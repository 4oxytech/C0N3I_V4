; Listing generated by Microsoft (R) Optimizing Compiler Version 19.39.33522.0 

include listing.inc

INCLUDELIB OLDNAMES

?sigma@@3QBDB DB 'expand 32-byte k', 00H		; sigma
	ORG $+2
?tau@@3QBDB DB	'expand 16-byte k', 00H			; tau
PUBLIC	ECRYPT_decrypt_bytes
PUBLIC	ECRYPT_encrypt_bytes
PUBLIC	ECRYPT_ivsetup
PUBLIC	ECRYPT_keysetup
;	COMDAT pdata
pdata	SEGMENT
$pdata$ECRYPT_encrypt_bytes DD imagerel $LN51
	DD	imagerel $LN51+59
	DD	imagerel $unwind$ECRYPT_encrypt_bytes
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$6$ECRYPT_encrypt_bytes DD imagerel $LN51+59
	DD	imagerel $LN51+1596
	DD	imagerel $chain$6$ECRYPT_encrypt_bytes
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$7$ECRYPT_encrypt_bytes DD imagerel $LN51+1596
	DD	imagerel $LN51+1685
	DD	imagerel $chain$7$ECRYPT_encrypt_bytes
;	COMDAT xdata
xdata	SEGMENT
$chain$7$ECRYPT_encrypt_bytes DD 021H
	DD	imagerel $LN51
	DD	imagerel $LN51+59
	DD	imagerel $unwind$ECRYPT_encrypt_bytes
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$6$ECRYPT_encrypt_bytes DD 0e6521H
	DD	01ef465H
	DD	01fe447H
	DD	020c443H
	DD	021742eH
	DD	0226420H
	DD	0235412H
	DD	0273404H
	DD	imagerel $LN51
	DD	imagerel $LN51+59
	DD	imagerel $unwind$ECRYPT_encrypt_bytes
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$ECRYPT_encrypt_bytes DD 032719H
	DD	0240115H
	DD	0d00eH
	DD	imagerel __GSHandlerCheck
	DD	0e0H
; Function compile flags: /Ogtpy
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\chacha20\chacha.c
;	COMDAT ECRYPT_keysetup
_TEXT	SEGMENT
x$ = 8
k$ = 16
kbits$dead$ = 24
ivbits$dead$ = 32
ECRYPT_keysetup PROC					; COMDAT

; 30   :     const char* constants;
; 31   : 
; 32   :     x->input[4] = U8TO32_LITTLE(k + 0);

  00000	8b 02		 mov	 eax, DWORD PTR [rdx]
  00002	89 41 10	 mov	 DWORD PTR [rcx+16], eax

; 33   :     x->input[5] = U8TO32_LITTLE(k + 4);

  00005	8b 42 04	 mov	 eax, DWORD PTR [rdx+4]
  00008	89 41 14	 mov	 DWORD PTR [rcx+20], eax

; 34   :     x->input[6] = U8TO32_LITTLE(k + 8);

  0000b	8b 42 08	 mov	 eax, DWORD PTR [rdx+8]
  0000e	89 41 18	 mov	 DWORD PTR [rcx+24], eax

; 35   :     x->input[7] = U8TO32_LITTLE(k + 12);

  00011	8b 42 0c	 mov	 eax, DWORD PTR [rdx+12]
  00014	89 41 1c	 mov	 DWORD PTR [rcx+28], eax

; 36   :     if (kbits == 256) { /* recommended */
; 37   :         k += 16;
; 38   :         constants = sigma;
; 39   :     }
; 40   :     else { /* kbits == 128 */
; 41   :         constants = tau;
; 42   :     }
; 43   :     x->input[8] = U8TO32_LITTLE(k + 0);

  00017	8b 42 10	 mov	 eax, DWORD PTR [rdx+16]
  0001a	89 41 20	 mov	 DWORD PTR [rcx+32], eax

; 44   :     x->input[9] = U8TO32_LITTLE(k + 4);

  0001d	8b 42 14	 mov	 eax, DWORD PTR [rdx+20]
  00020	89 41 24	 mov	 DWORD PTR [rcx+36], eax

; 45   :     x->input[10] = U8TO32_LITTLE(k + 8);

  00023	8b 42 18	 mov	 eax, DWORD PTR [rdx+24]
  00026	89 41 28	 mov	 DWORD PTR [rcx+40], eax

; 46   :     x->input[11] = U8TO32_LITTLE(k + 12);

  00029	8b 42 1c	 mov	 eax, DWORD PTR [rdx+28]
  0002c	89 41 2c	 mov	 DWORD PTR [rcx+44], eax

; 47   :     x->input[0] = U8TO32_LITTLE(constants + 0);

  0002f	c7 01 65 78 70
	61		 mov	 DWORD PTR [rcx], 1634760805 ; 61707865H

; 48   :     x->input[1] = U8TO32_LITTLE(constants + 4);

  00035	c7 41 04 6e 64
	20 33		 mov	 DWORD PTR [rcx+4], 857760878 ; 3320646eH

; 49   :     x->input[2] = U8TO32_LITTLE(constants + 8);

  0003c	c7 41 08 32 2d
	62 79		 mov	 DWORD PTR [rcx+8], 2036477234 ; 79622d32H

; 50   :     x->input[3] = U8TO32_LITTLE(constants + 12);

  00043	c7 41 0c 74 65
	20 6b		 mov	 DWORD PTR [rcx+12], 1797285236 ; 6b206574H

; 51   : }

  0004a	c3		 ret	 0
ECRYPT_keysetup ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\chacha20\chacha.c
;	COMDAT ECRYPT_ivsetup
_TEXT	SEGMENT
x$ = 8
iv$ = 16
ECRYPT_ivsetup PROC					; COMDAT

; 55   :     x->input[12] = 0;

  00000	33 c0		 xor	 eax, eax
  00002	48 89 41 30	 mov	 QWORD PTR [rcx+48], rax

; 56   :     x->input[13] = 0;
; 57   :     x->input[14] = U8TO32_LITTLE(iv + 0);

  00006	8b 02		 mov	 eax, DWORD PTR [rdx]
  00008	89 41 38	 mov	 DWORD PTR [rcx+56], eax

; 58   :     x->input[15] = U8TO32_LITTLE(iv + 4);

  0000b	8b 42 04	 mov	 eax, DWORD PTR [rdx+4]
  0000e	89 41 3c	 mov	 DWORD PTR [rcx+60], eax

; 59   : }

  00011	c3		 ret	 0
ECRYPT_ivsetup ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\chacha20\chacha.c
;	COMDAT ECRYPT_encrypt_bytes
_TEXT	SEGMENT
x13$4$ = 0
x11$1$ = 0
x10$1$ = 4
j12$1$ = 8
x9$1$ = 12
x3$2$ = 12
x3$1$ = 12
j13$1$ = 16
x5$4$ = 20
x6$4$ = 24
x7$4$ = 28
x15$4$ = 32
j0$1$ = 36
x12$4$ = 40
x8$1$ = 40
j8$1$ = 44
j9$1$ = 48
j10$1$ = 52
j11$1$ = 56
j14$1$ = 60
j15$1$ = 64
bytes$1$ = 68
j1$1$ = 72
j2$1$ = 76
j3$1$ = 80
j4$1$ = 84
j5$1$ = 88
j6$1$ = 92
j7$1$ = 96
x2$2$ = 104
m$1$ = 104
c$GSCopy$1$ = 112
x1$2$ = 120
tv934 = 120
x14$4$ = 128
x0$1$ = 132
ctarget$1$ = 136
x$GSCopy$1$ = 144
tmp$ = 160
__$ArrayPad$ = 224
x$ = 304
m$ = 312
c$ = 320
bytes$ = 328
ECRYPT_encrypt_bytes PROC				; COMDAT

; 62   : {

$LN51:

; 63   :     u32 x0, x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15;
; 64   :     u32 j0, j1, j2, j3, j4, j5, j6, j7, j8, j9, j10, j11, j12, j13, j14, j15;
; 65   :     u8* ctarget = 0;
; 66   :     u8 tmp[64];
; 67   :     int i;
; 68   : 
; 69   :     if (!bytes) return;

  00000	45 85 c9	 test	 r9d, r9d
  00003	0f 84 8b 06 00
	00		 je	 $LN49@ECRYPT_enc
  00009	4c 8b dc	 mov	 r11, rsp
  0000c	41 55		 push	 r13
  0000e	48 81 ec 20 01
	00 00		 sub	 rsp, 288		; 00000120H
  00015	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0001c	48 33 c4	 xor	 rax, rsp
  0001f	48 89 84 24 e0
	00 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 70   : 
; 71   :     j0 = x->input[0];
; 72   :     j1 = x->input[1];
; 73   :     j2 = x->input[2];
; 74   :     j3 = x->input[3];
; 75   :     j4 = x->input[4];
; 76   :     j5 = x->input[5];
; 77   :     j6 = x->input[6];
; 78   :     j7 = x->input[7];
; 79   :     j8 = x->input[8];
; 80   :     j9 = x->input[9];
; 81   :     j10 = x->input[10];
; 82   :     j11 = x->input[11];
; 83   :     j12 = x->input[12];
; 84   :     j13 = x->input[13];

  00027	44 8b 51 34	 mov	 r10d, DWORD PTR [rcx+52]
  0002b	33 c0		 xor	 eax, eax
  0002d	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR ctarget$1$[rsp], rax
  00035	4d 8b e8	 mov	 r13, r8
  00038	8b 41 18	 mov	 eax, DWORD PTR [rcx+24]
  0003b	49 89 5b 10	 mov	 QWORD PTR [r11+16], rbx
  0003f	8b 59 04	 mov	 ebx, DWORD PTR [rcx+4]
  00042	89 44 24 5c	 mov	 DWORD PTR j6$1$[rsp], eax
  00046	8b 41 1c	 mov	 eax, DWORD PTR [rcx+28]
  00049	49 89 6b f0	 mov	 QWORD PTR [r11-16], rbp
  0004d	8b 69 10	 mov	 ebp, DWORD PTR [rcx+16]
  00050	89 44 24 60	 mov	 DWORD PTR j7$1$[rsp], eax
  00054	8b 41 20	 mov	 eax, DWORD PTR [rcx+32]
  00057	49 89 73 e8	 mov	 QWORD PTR [r11-24], rsi
  0005b	8b 71 0c	 mov	 esi, DWORD PTR [rcx+12]
  0005e	89 44 24 2c	 mov	 DWORD PTR j8$1$[rsp], eax
  00062	8b 41 24	 mov	 eax, DWORD PTR [rcx+36]
  00065	49 89 7b e0	 mov	 QWORD PTR [r11-32], rdi
  00069	8b 79 08	 mov	 edi, DWORD PTR [rcx+8]
  0006c	89 44 24 30	 mov	 DWORD PTR j9$1$[rsp], eax
  00070	8b 41 28	 mov	 eax, DWORD PTR [rcx+40]
  00073	89 44 24 34	 mov	 DWORD PTR j10$1$[rsp], eax
  00077	8b 41 2c	 mov	 eax, DWORD PTR [rcx+44]
  0007a	4d 89 63 d8	 mov	 QWORD PTR [r11-40], r12
  0007e	4d 89 73 d0	 mov	 QWORD PTR [r11-48], r14
  00082	44 8b 71 14	 mov	 r14d, DWORD PTR [rcx+20]
  00086	89 44 24 38	 mov	 DWORD PTR j11$1$[rsp], eax

; 85   :     j14 = x->input[14];

  0008a	8b 41 38	 mov	 eax, DWORD PTR [rcx+56]
  0008d	89 44 24 3c	 mov	 DWORD PTR j14$1$[rsp], eax

; 86   :     j15 = x->input[15];

  00091	8b 41 3c	 mov	 eax, DWORD PTR [rcx+60]
  00094	4c 89 44 24 70	 mov	 QWORD PTR c$GSCopy$1$[rsp], r8
  00099	44 8b 01	 mov	 r8d, DWORD PTR [rcx]
  0009c	4d 89 7b c8	 mov	 QWORD PTR [r11-56], r15
  000a0	44 8b 59 30	 mov	 r11d, DWORD PTR [rcx+48]
  000a4	89 44 24 40	 mov	 DWORD PTR j15$1$[rsp], eax
  000a8	44 89 4c 24 44	 mov	 DWORD PTR bytes$1$[rsp], r9d
  000ad	48 89 54 24 68	 mov	 QWORD PTR m$1$[rsp], rdx
  000b2	48 89 8c 24 90
	00 00 00	 mov	 QWORD PTR x$GSCopy$1$[rsp], rcx
  000ba	44 89 44 24 24	 mov	 DWORD PTR j0$1$[rsp], r8d
  000bf	89 5c 24 48	 mov	 DWORD PTR j1$1$[rsp], ebx
  000c3	89 7c 24 4c	 mov	 DWORD PTR j2$1$[rsp], edi
  000c7	89 74 24 50	 mov	 DWORD PTR j3$1$[rsp], esi
  000cb	89 6c 24 54	 mov	 DWORD PTR j4$1$[rsp], ebp
  000cf	44 89 74 24 58	 mov	 DWORD PTR j5$1$[rsp], r14d
  000d4	44 89 5c 24 08	 mov	 DWORD PTR j12$1$[rsp], r11d
  000d9	44 89 54 24 10	 mov	 DWORD PTR j13$1$[rsp], r10d
  000de	66 90		 npad	 2
$LL2@ECRYPT_enc:

; 87   : 
; 88   :     for (;;) {
; 89   :         if (bytes < 64) {

  000e0	41 83 f9 40	 cmp	 r9d, 64			; 00000040H
  000e4	73 61		 jae	 SHORT $LN15@ECRYPT_enc

; 90   :             for (i = 0; i < bytes; ++i) tmp[i] = m[i];

  000e6	45 85 c9	 test	 r9d, r9d
  000e9	74 3a		 je	 SHORT $LN6@ECRYPT_enc
  000eb	48 8d 84 24 a0
	00 00 00	 lea	 rax, QWORD PTR tmp$[rsp]
  000f3	45 8b c1	 mov	 r8d, r9d
  000f6	48 2b d0	 sub	 rdx, rax
  000f9	48 8d 8c 24 a0
	00 00 00	 lea	 rcx, QWORD PTR tmp$[rsp]
  00101	0f 1f 40 00 66
	66 66 0f 1f 84
	00 00 00 00 00	 npad	 15
$LL29@ECRYPT_enc:
  00110	0f b6 04 0a	 movzx	 eax, BYTE PTR [rdx+rcx]
  00114	88 01		 mov	 BYTE PTR [rcx], al
  00116	48 8d 49 01	 lea	 rcx, QWORD PTR [rcx+1]
  0011a	49 83 e8 01	 sub	 r8, 1
  0011e	75 f0		 jne	 SHORT $LL29@ECRYPT_enc
  00120	44 8b 44 24 24	 mov	 r8d, DWORD PTR j0$1$[rsp]
$LN6@ECRYPT_enc:

; 91   :             m = tmp;
; 92   :             ctarget = c;

  00125	4c 89 ac 24 88
	00 00 00	 mov	 QWORD PTR ctarget$1$[rsp], r13
  0012d	48 8d 94 24 a0
	00 00 00	 lea	 rdx, QWORD PTR tmp$[rsp]

; 93   :             c = tmp;

  00135	4c 8d ac 24 a0
	00 00 00	 lea	 r13, QWORD PTR tmp$[rsp]
  0013d	48 89 54 24 68	 mov	 QWORD PTR m$1$[rsp], rdx
  00142	4c 89 6c 24 70	 mov	 QWORD PTR c$GSCopy$1$[rsp], r13
$LN15@ECRYPT_enc:

; 94   :         }
; 95   :         x0 = j0;
; 96   :         x1 = j1;
; 97   :         x2 = j2;
; 98   :         x3 = j3;
; 99   :         x4 = j4;
; 100  :         x5 = j5;
; 101  :         x6 = j6;

  00147	8b 4c 24 5c	 mov	 ecx, DWORD PTR j6$1$[rsp]
  0014b	44 8b ef	 mov	 r13d, edi

; 102  :         x7 = j7;

  0014e	8b 44 24 60	 mov	 eax, DWORD PTR j7$1$[rsp]
  00152	44 8b e3	 mov	 r12d, ebx

; 103  :         x8 = j8;

  00155	44 8b 4c 24 2c	 mov	 r9d, DWORD PTR j8$1$[rsp]
  0015a	8b d6		 mov	 edx, esi

; 104  :         x9 = j9;

  0015c	8b 5c 24 30	 mov	 ebx, DWORD PTR j9$1$[rsp]
  00160	8b fd		 mov	 edi, ebp

; 105  :         x10 = j10;
; 106  :         x11 = j11;
; 107  :         x12 = j12;
; 108  :         x13 = j13;
; 109  :         x14 = j14;

  00162	8b 6c 24 3c	 mov	 ebp, DWORD PTR j14$1$[rsp]
  00166	45 8b f8	 mov	 r15d, r8d
  00169	89 4c 24 18	 mov	 DWORD PTR x6$4$[rsp], ecx
  0016d	41 8b f2	 mov	 esi, r10d
  00170	8b 4c 24 38	 mov	 ecx, DWORD PTR j11$1$[rsp]
  00174	89 0c 24	 mov	 DWORD PTR x11$1$[rsp], ecx

; 110  :         x15 = j15;

  00177	8b 4c 24 40	 mov	 ecx, DWORD PTR j15$1$[rsp]
  0017b	89 44 24 1c	 mov	 DWORD PTR x7$4$[rsp], eax
  0017f	8b 44 24 34	 mov	 eax, DWORD PTR j10$1$[rsp]
  00183	89 4c 24 20	 mov	 DWORD PTR x15$4$[rsp], ecx
  00187	44 89 74 24 14	 mov	 DWORD PTR x5$4$[rsp], r14d
  0018c	89 44 24 04	 mov	 DWORD PTR x10$1$[rsp], eax
  00190	48 c7 44 24 78
	04 00 00 00	 mov	 QWORD PTR tv934[rsp], 4
  00199	0f 1f 80 00 00
	00 00		 npad	 7
$LL10@ECRYPT_enc:

; 111  :         for (i = 8; i > 0; i -= 2) {
; 112  :             QUARTERROUND(x0, x4, x8, x12)
; 113  :                 QUARTERROUND(x1, x5, x9, x13)

  001a0	44 03 64 24 14	 add	 r12d, DWORD PTR x5$4$[rsp]
  001a5	44 03 ff	 add	 r15d, edi

; 114  :                 QUARTERROUND(x2, x6, x10, x14)

  001a8	44 03 6c 24 18	 add	 r13d, DWORD PTR x6$4$[rsp]
  001ad	41 33 f4	 xor	 esi, r12d
  001b0	45 33 df	 xor	 r11d, r15d
  001b3	41 33 ed	 xor	 ebp, r13d
  001b6	45 8b c3	 mov	 r8d, r11d
  001b9	41 c1 e3 10	 shl	 r11d, 16
  001bd	41 c1 e8 10	 shr	 r8d, 16
  001c1	45 0b c3	 or	 r8d, r11d
  001c4	45 03 c8	 add	 r9d, r8d
  001c7	41 8b c1	 mov	 eax, r9d
  001ca	33 c7		 xor	 eax, edi
  001cc	8b c8		 mov	 ecx, eax
  001ce	c1 e0 0c	 shl	 eax, 12
  001d1	c1 e9 14	 shr	 ecx, 20
  001d4	0b c8		 or	 ecx, eax
  001d6	44 03 f9	 add	 r15d, ecx
  001d9	45 33 c7	 xor	 r8d, r15d
  001dc	41 8b f8	 mov	 edi, r8d
  001df	41 c1 e0 08	 shl	 r8d, 8
  001e3	c1 ef 18	 shr	 edi, 24
  001e6	41 0b f8	 or	 edi, r8d
  001e9	44 8b c6	 mov	 r8d, esi
  001ec	41 c1 e8 10	 shr	 r8d, 16
  001f0	44 03 cf	 add	 r9d, edi
  001f3	c1 e6 10	 shl	 esi, 16
  001f6	41 8b c1	 mov	 eax, r9d
  001f9	33 c1		 xor	 eax, ecx
  001fb	44 89 4c 24 28	 mov	 DWORD PTR x8$1$[rsp], r9d
  00200	44 8b 4c 24 04	 mov	 r9d, DWORD PTR x10$1$[rsp]
  00205	44 8b f0	 mov	 r14d, eax
  00208	c1 e0 07	 shl	 eax, 7
  0020b	44 0b c6	 or	 r8d, esi
  0020e	41 03 d8	 add	 ebx, r8d
  00211	41 c1 ee 19	 shr	 r14d, 25
  00215	44 0b f0	 or	 r14d, eax
  00218	8b c3		 mov	 eax, ebx
  0021a	33 44 24 14	 xor	 eax, DWORD PTR x5$4$[rsp]
  0021e	8b c8		 mov	 ecx, eax
  00220	c1 e0 0c	 shl	 eax, 12
  00223	c1 e9 14	 shr	 ecx, 20
  00226	0b c8		 or	 ecx, eax
  00228	44 03 e1	 add	 r12d, ecx
  0022b	45 33 c4	 xor	 r8d, r12d
  0022e	41 8b f0	 mov	 esi, r8d
  00231	41 c1 e0 08	 shl	 r8d, 8
  00235	c1 ee 18	 shr	 esi, 24
  00238	41 0b f0	 or	 esi, r8d
  0023b	44 8b c5	 mov	 r8d, ebp
  0023e	c1 e5 10	 shl	 ebp, 16
  00241	03 de		 add	 ebx, esi
  00243	41 c1 e8 10	 shr	 r8d, 16
  00247	8b c3		 mov	 eax, ebx
  00249	33 c1		 xor	 eax, ecx
  0024b	89 5c 24 0c	 mov	 DWORD PTR x9$1$[rsp], ebx
  0024f	44 8b d0	 mov	 r10d, eax
  00252	44 0b c5	 or	 r8d, ebp
  00255	c1 e0 07	 shl	 eax, 7
  00258	45 03 c8	 add	 r9d, r8d
  0025b	41 c1 ea 19	 shr	 r10d, 25
  0025f	44 0b d0	 or	 r10d, eax
  00262	41 8b c1	 mov	 eax, r9d
  00265	33 44 24 18	 xor	 eax, DWORD PTR x6$4$[rsp]
  00269	8b c8		 mov	 ecx, eax
  0026b	c1 e0 0c	 shl	 eax, 12
  0026e	c1 e9 14	 shr	 ecx, 20
  00271	0b c8		 or	 ecx, eax
  00273	44 03 e9	 add	 r13d, ecx
  00276	45 33 c5	 xor	 r8d, r13d
  00279	41 8b e8	 mov	 ebp, r8d
  0027c	41 c1 e0 08	 shl	 r8d, 8
  00280	c1 ed 18	 shr	 ebp, 24
  00283	41 0b e8	 or	 ebp, r8d
  00286	44 03 cd	 add	 r9d, ebp
  00289	41 8b c1	 mov	 eax, r9d
  0028c	44 89 4c 24 04	 mov	 DWORD PTR x10$1$[rsp], r9d
  00291	33 c1		 xor	 eax, ecx
  00293	44 8b d8	 mov	 r11d, eax
  00296	41 c1 eb 19	 shr	 r11d, 25
  0029a	c1 e0 07	 shl	 eax, 7

; 115  :                 QUARTERROUND(x3, x7, x11, x15)

  0029d	03 54 24 1c	 add	 edx, DWORD PTR x7$4$[rsp]
  002a1	44 0b d8	 or	 r11d, eax
  002a4	8b 44 24 20	 mov	 eax, DWORD PTR x15$4$[rsp]

; 116  :                 QUARTERROUND(x0, x5, x10, x15)

  002a8	45 03 fa	 add	 r15d, r10d
  002ab	8b 1c 24	 mov	 ebx, DWORD PTR x11$1$[rsp]
  002ae	33 c2		 xor	 eax, edx
  002b0	44 8b c0	 mov	 r8d, eax

; 117  :                 QUARTERROUND(x1, x6, x11, x12)

  002b3	45 03 e3	 add	 r12d, r11d
  002b6	c1 e0 10	 shl	 eax, 16
  002b9	41 33 fc	 xor	 edi, r12d
  002bc	41 c1 e8 10	 shr	 r8d, 16
  002c0	44 0b c0	 or	 r8d, eax
  002c3	41 03 d8	 add	 ebx, r8d
  002c6	8b c3		 mov	 eax, ebx
  002c8	33 44 24 1c	 xor	 eax, DWORD PTR x7$4$[rsp]
  002cc	8b c8		 mov	 ecx, eax
  002ce	c1 e0 0c	 shl	 eax, 12
  002d1	c1 e9 14	 shr	 ecx, 20
  002d4	0b c8		 or	 ecx, eax
  002d6	03 d1		 add	 edx, ecx
  002d8	44 33 c2	 xor	 r8d, edx
  002db	45 8b c8	 mov	 r9d, r8d
  002de	41 c1 e0 08	 shl	 r8d, 8
  002e2	41 c1 e9 18	 shr	 r9d, 24
  002e6	45 0b c8	 or	 r9d, r8d
  002e9	41 03 d9	 add	 ebx, r9d
  002ec	45 33 cf	 xor	 r9d, r15d
  002ef	45 8b c1	 mov	 r8d, r9d
  002f2	89 1c 24	 mov	 DWORD PTR x11$1$[rsp], ebx
  002f5	41 c1 e8 10	 shr	 r8d, 16
  002f9	8b c3		 mov	 eax, ebx
  002fb	33 c1		 xor	 eax, ecx
  002fd	41 c1 e1 10	 shl	 r9d, 16
  00301	8b d8		 mov	 ebx, eax
  00303	45 0b c1	 or	 r8d, r9d
  00306	44 8b 4c 24 04	 mov	 r9d, DWORD PTR x10$1$[rsp]
  0030b	c1 e0 07	 shl	 eax, 7
  0030e	45 03 c8	 add	 r9d, r8d
  00311	c1 eb 19	 shr	 ebx, 25
  00314	0b d8		 or	 ebx, eax
  00316	41 8b c1	 mov	 eax, r9d
  00319	41 33 c2	 xor	 eax, r10d
  0031c	44 8b 14 24	 mov	 r10d, DWORD PTR x11$1$[rsp]
  00320	8b c8		 mov	 ecx, eax
  00322	c1 e0 0c	 shl	 eax, 12
  00325	c1 e9 14	 shr	 ecx, 20
  00328	0b c8		 or	 ecx, eax
  0032a	44 03 f9	 add	 r15d, ecx
  0032d	45 33 c7	 xor	 r8d, r15d
  00330	41 8b c0	 mov	 eax, r8d
  00333	41 c1 e0 08	 shl	 r8d, 8
  00337	c1 e8 18	 shr	 eax, 24
  0033a	41 0b c0	 or	 eax, r8d
  0033d	44 8b c7	 mov	 r8d, edi
  00340	44 03 c8	 add	 r9d, eax
  00343	89 44 24 20	 mov	 DWORD PTR x15$4$[rsp], eax
  00347	41 c1 e8 10	 shr	 r8d, 16
  0034b	41 8b c1	 mov	 eax, r9d
  0034e	33 c1		 xor	 eax, ecx
  00350	c1 e7 10	 shl	 edi, 16
  00353	8b c8		 mov	 ecx, eax
  00355	44 89 4c 24 04	 mov	 DWORD PTR x10$1$[rsp], r9d
  0035a	c1 e9 19	 shr	 ecx, 25
  0035d	44 0b c7	 or	 r8d, edi
  00360	c1 e0 07	 shl	 eax, 7
  00363	45 03 d0	 add	 r10d, r8d
  00366	0b c8		 or	 ecx, eax
  00368	41 8b c2	 mov	 eax, r10d
  0036b	41 33 c3	 xor	 eax, r11d
  0036e	89 4c 24 14	 mov	 DWORD PTR x5$4$[rsp], ecx
  00372	8b c8		 mov	 ecx, eax
  00374	c1 e0 0c	 shl	 eax, 12
  00377	c1 e9 14	 shr	 ecx, 20
  0037a	0b c8		 or	 ecx, eax
  0037c	44 03 e1	 add	 r12d, ecx
  0037f	45 33 c4	 xor	 r8d, r12d
  00382	45 8b d8	 mov	 r11d, r8d
  00385	41 c1 e0 08	 shl	 r8d, 8
  00389	41 c1 eb 18	 shr	 r11d, 24
  0038d	45 0b d8	 or	 r11d, r8d
  00390	45 03 d3	 add	 r10d, r11d

; 118  :                 QUARTERROUND(x2, x7, x8, x13)

  00393	44 8b 4c 24 28	 mov	 r9d, DWORD PTR x8$1$[rsp]
  00398	44 03 eb	 add	 r13d, ebx
  0039b	41 33 f5	 xor	 esi, r13d
  0039e	44 89 14 24	 mov	 DWORD PTR x11$1$[rsp], r10d
  003a2	44 8b c6	 mov	 r8d, esi

; 119  :                 QUARTERROUND(x3, x4, x9, x14)

  003a5	41 03 d6	 add	 edx, r14d
  003a8	41 c1 e8 10	 shr	 r8d, 16
  003ac	33 ea		 xor	 ebp, edx
  003ae	c1 e6 10	 shl	 esi, 16
  003b1	41 8b c2	 mov	 eax, r10d
  003b4	33 c1		 xor	 eax, ecx
  003b6	44 0b c6	 or	 r8d, esi
  003b9	8b c8		 mov	 ecx, eax
  003bb	45 03 c8	 add	 r9d, r8d
  003be	c1 e0 07	 shl	 eax, 7
  003c1	c1 e9 19	 shr	 ecx, 25
  003c4	0b c8		 or	 ecx, eax
  003c6	41 8b c1	 mov	 eax, r9d
  003c9	33 c3		 xor	 eax, ebx
  003cb	89 4c 24 18	 mov	 DWORD PTR x6$4$[rsp], ecx
  003cf	8b 5c 24 0c	 mov	 ebx, DWORD PTR x9$1$[rsp]
  003d3	8b c8		 mov	 ecx, eax
  003d5	c1 e0 0c	 shl	 eax, 12
  003d8	c1 e9 14	 shr	 ecx, 20
  003db	0b c8		 or	 ecx, eax
  003dd	44 03 e9	 add	 r13d, ecx
  003e0	45 33 c5	 xor	 r8d, r13d
  003e3	41 8b f0	 mov	 esi, r8d
  003e6	41 c1 e0 08	 shl	 r8d, 8
  003ea	c1 ee 18	 shr	 esi, 24
  003ed	41 0b f0	 or	 esi, r8d
  003f0	44 8b c5	 mov	 r8d, ebp
  003f3	c1 e5 10	 shl	 ebp, 16
  003f6	44 03 ce	 add	 r9d, esi
  003f9	41 c1 e8 10	 shr	 r8d, 16
  003fd	41 8b c1	 mov	 eax, r9d
  00400	33 c1		 xor	 eax, ecx
  00402	44 0b c5	 or	 r8d, ebp
  00405	8b c8		 mov	 ecx, eax
  00407	41 03 d8	 add	 ebx, r8d
  0040a	c1 e0 07	 shl	 eax, 7
  0040d	c1 e9 19	 shr	 ecx, 25
  00410	0b c8		 or	 ecx, eax
  00412	8b c3		 mov	 eax, ebx
  00414	41 33 c6	 xor	 eax, r14d
  00417	89 4c 24 1c	 mov	 DWORD PTR x7$4$[rsp], ecx
  0041b	8b c8		 mov	 ecx, eax
  0041d	c1 e0 0c	 shl	 eax, 12
  00420	c1 e9 14	 shr	 ecx, 20
  00423	0b c8		 or	 ecx, eax
  00425	03 d1		 add	 edx, ecx
  00427	44 33 c2	 xor	 r8d, edx
  0042a	41 8b e8	 mov	 ebp, r8d
  0042d	41 c1 e0 08	 shl	 r8d, 8
  00431	c1 ed 18	 shr	 ebp, 24
  00434	41 0b e8	 or	 ebp, r8d
  00437	03 dd		 add	 ebx, ebp
  00439	8b c3		 mov	 eax, ebx
  0043b	33 c1		 xor	 eax, ecx
  0043d	8b f8		 mov	 edi, eax
  0043f	c1 e0 07	 shl	 eax, 7
  00442	c1 ef 19	 shr	 edi, 25
  00445	0b f8		 or	 edi, eax
  00447	48 83 6c 24 78
	01		 sub	 QWORD PTR tv934[rsp], 1
  0044d	0f 85 4d fd ff
	ff		 jne	 $LL10@ECRYPT_enc

; 120  :         }
; 121  :         x0 = PLUS(x0, j0);
; 122  :         x1 = PLUS(x1, j1);

  00453	8b 44 24 48	 mov	 eax, DWORD PTR j1$1$[rsp]

; 123  :         x2 = PLUS(x2, j2);
; 124  :         x3 = PLUS(x3, j3);
; 125  :         x4 = PLUS(x4, j4);
; 126  :         x5 = PLUS(x5, j5);
; 127  :         x6 = PLUS(x6, j6);

  00457	44 8b 74 24 18	 mov	 r14d, DWORD PTR x6$4$[rsp]
  0045c	41 03 c4	 add	 eax, r12d
  0045f	44 03 74 24 5c	 add	 r14d, DWORD PTR j6$1$[rsp]
  00464	44 8b 64 24 54	 mov	 r12d, DWORD PTR j4$1$[rsp]

; 128  :         x7 = PLUS(x7, j7);
; 129  :         x8 = PLUS(x8, j8);
; 130  :         x9 = PLUS(x9, j9);
; 131  :         x10 = PLUS(x10, j10);
; 132  :         x11 = PLUS(x11, j11);
; 133  :         x12 = PLUS(x12, j12);
; 134  :         x13 = PLUS(x13, j13);
; 135  :         x14 = PLUS(x14, j14);

  00469	44 8b 44 24 3c	 mov	 r8d, DWORD PTR j14$1$[rsp]
  0046e	44 03 e7	 add	 r12d, edi
  00471	8b 7c 24 30	 mov	 edi, DWORD PTR j9$1$[rsp]

; 136  :         x15 = PLUS(x15, j15);

  00475	8b 4c 24 20	 mov	 ecx, DWORD PTR x15$4$[rsp]
  00479	03 fb		 add	 edi, ebx
  0047b	03 4c 24 40	 add	 ecx, DWORD PTR j15$1$[rsp]
  0047f	8b 5c 24 04	 mov	 ebx, DWORD PTR x10$1$[rsp]
  00483	03 5c 24 34	 add	 ebx, DWORD PTR j10$1$[rsp]
  00487	89 34 24	 mov	 DWORD PTR x13$4$[rsp], esi
  0048a	8b 74 24 2c	 mov	 esi, DWORD PTR j8$1$[rsp]
  0048e	41 03 f1	 add	 esi, r9d
  00491	44 89 5c 24 28	 mov	 DWORD PTR x12$4$[rsp], r11d
  00496	44 8b 5c 24 38	 mov	 r11d, DWORD PTR j11$1$[rsp]
  0049b	44 8b 0c 24	 mov	 r9d, DWORD PTR x13$4$[rsp]
  0049f	45 03 da	 add	 r11d, r10d
  004a2	44 8b 54 24 28	 mov	 r10d, DWORD PTR x12$4$[rsp]
  004a7	44 03 54 24 08	 add	 r10d, DWORD PTR j12$1$[rsp]
  004ac	89 ac 24 80 00
	00 00		 mov	 DWORD PTR x14$4$[rsp], ebp
  004b3	44 03 84 24 80
	00 00 00	 add	 r8d, DWORD PTR x14$4$[rsp]
  004bb	8b 6c 24 1c	 mov	 ebp, DWORD PTR x7$4$[rsp]
  004bf	03 6c 24 60	 add	 ebp, DWORD PTR j7$1$[rsp]
  004c3	44 89 bc 24 84
	00 00 00	 mov	 DWORD PTR x0$1$[rsp], r15d
  004cb	44 8b 7c 24 14	 mov	 r15d, DWORD PTR x5$4$[rsp]
  004d0	44 03 7c 24 58	 add	 r15d, DWORD PTR j5$1$[rsp]
  004d5	89 54 24 0c	 mov	 DWORD PTR x3$1$[rsp], edx
  004d9	48 8b 54 24 68	 mov	 rdx, QWORD PTR m$1$[rsp]

; 137  : 
; 138  :         x0 = XOR(x0, U8TO32_LITTLE(m + 0));
; 139  :         x1 = XOR(x1, U8TO32_LITTLE(m + 4));

  004de	33 42 04	 xor	 eax, DWORD PTR [rdx+4]

; 140  :         x2 = XOR(x2, U8TO32_LITTLE(m + 8));
; 141  :         x3 = XOR(x3, U8TO32_LITTLE(m + 12));
; 142  :         x4 = XOR(x4, U8TO32_LITTLE(m + 16));

  004e1	44 33 62 10	 xor	 r12d, DWORD PTR [rdx+16]

; 143  :         x5 = XOR(x5, U8TO32_LITTLE(m + 20));

  004e5	44 33 7a 14	 xor	 r15d, DWORD PTR [rdx+20]

; 144  :         x6 = XOR(x6, U8TO32_LITTLE(m + 24));

  004e9	44 33 72 18	 xor	 r14d, DWORD PTR [rdx+24]

; 145  :         x7 = XOR(x7, U8TO32_LITTLE(m + 28));

  004ed	33 6a 1c	 xor	 ebp, DWORD PTR [rdx+28]

; 146  :         x8 = XOR(x8, U8TO32_LITTLE(m + 32));

  004f0	33 72 20	 xor	 esi, DWORD PTR [rdx+32]

; 147  :         x9 = XOR(x9, U8TO32_LITTLE(m + 36));

  004f3	33 7a 24	 xor	 edi, DWORD PTR [rdx+36]

; 148  :         x10 = XOR(x10, U8TO32_LITTLE(m + 40));

  004f6	33 5a 28	 xor	 ebx, DWORD PTR [rdx+40]

; 149  :         x11 = XOR(x11, U8TO32_LITTLE(m + 44));

  004f9	44 33 5a 2c	 xor	 r11d, DWORD PTR [rdx+44]

; 150  :         x12 = XOR(x12, U8TO32_LITTLE(m + 48));

  004fd	44 33 52 30	 xor	 r10d, DWORD PTR [rdx+48]

; 151  :         x13 = XOR(x13, U8TO32_LITTLE(m + 52));
; 152  :         x14 = XOR(x14, U8TO32_LITTLE(m + 56));

  00501	44 33 42 38	 xor	 r8d, DWORD PTR [rdx+56]

; 153  :         x15 = XOR(x15, U8TO32_LITTLE(m + 60));

  00505	33 4a 3c	 xor	 ecx, DWORD PTR [rdx+60]
  00508	89 44 24 78	 mov	 DWORD PTR x1$2$[rsp], eax
  0050c	8b 44 24 4c	 mov	 eax, DWORD PTR j2$1$[rsp]
  00510	41 03 c5	 add	 eax, r13d
  00513	44 8b 6c 24 0c	 mov	 r13d, DWORD PTR x3$1$[rsp]
  00518	33 42 08	 xor	 eax, DWORD PTR [rdx+8]
  0051b	44 03 6c 24 50	 add	 r13d, DWORD PTR j3$1$[rsp]
  00520	44 33 6a 0c	 xor	 r13d, DWORD PTR [rdx+12]
  00524	89 44 24 68	 mov	 DWORD PTR x2$2$[rsp], eax
  00528	44 89 6c 24 0c	 mov	 DWORD PTR x3$2$[rsp], r13d
  0052d	44 8b 6c 24 10	 mov	 r13d, DWORD PTR j13$1$[rsp]
  00532	45 03 cd	 add	 r9d, r13d
  00535	44 33 4a 34	 xor	 r9d, DWORD PTR [rdx+52]

; 154  : 
; 155  :         j12 = PLUSONE(j12);

  00539	83 44 24 08 01	 add	 DWORD PTR j12$1$[rsp], 1

; 156  :         if (!j12) {
; 157  :             j13 = PLUSONE(j13);
; 158  :             /* stopping at 2^70 bytes per nonce is user's responsibility */
; 159  :         }
; 160  : 
; 161  :         U32TO8_LITTLE(c + 0, x0);

  0053e	41 8d 45 01	 lea	 eax, DWORD PTR [r13+1]
  00542	41 0f 45 c5	 cmovne	 eax, r13d
  00546	4c 8b 6c 24 70	 mov	 r13, QWORD PTR c$GSCopy$1$[rsp]
  0054b	89 44 24 10	 mov	 DWORD PTR j13$1$[rsp], eax
  0054f	8b 84 24 84 00
	00 00		 mov	 eax, DWORD PTR x0$1$[rsp]
  00556	03 44 24 24	 add	 eax, DWORD PTR j0$1$[rsp]
  0055a	33 02		 xor	 eax, DWORD PTR [rdx]
  0055c	41 89 45 00	 mov	 DWORD PTR [r13], eax

; 162  :         U32TO8_LITTLE(c + 4, x1);

  00560	8b 44 24 78	 mov	 eax, DWORD PTR x1$2$[rsp]
  00564	41 89 45 04	 mov	 DWORD PTR [r13+4], eax

; 163  :         U32TO8_LITTLE(c + 8, x2);

  00568	8b 44 24 68	 mov	 eax, DWORD PTR x2$2$[rsp]
  0056c	41 89 45 08	 mov	 DWORD PTR [r13+8], eax

; 164  :         U32TO8_LITTLE(c + 12, x3);

  00570	48 8b 44 24 70	 mov	 rax, QWORD PTR c$GSCopy$1$[rsp]
  00575	44 8b 6c 24 0c	 mov	 r13d, DWORD PTR x3$2$[rsp]
  0057a	44 89 68 0c	 mov	 DWORD PTR [rax+12], r13d

; 165  :         U32TO8_LITTLE(c + 16, x4);

  0057e	4c 8b e8	 mov	 r13, rax
  00581	44 89 60 10	 mov	 DWORD PTR [rax+16], r12d

; 166  :         U32TO8_LITTLE(c + 20, x5);

  00585	44 89 78 14	 mov	 DWORD PTR [rax+20], r15d

; 167  :         U32TO8_LITTLE(c + 24, x6);

  00589	44 89 70 18	 mov	 DWORD PTR [rax+24], r14d

; 168  :         U32TO8_LITTLE(c + 28, x7);

  0058d	89 68 1c	 mov	 DWORD PTR [rax+28], ebp

; 169  :         U32TO8_LITTLE(c + 32, x8);

  00590	89 70 20	 mov	 DWORD PTR [rax+32], esi

; 170  :         U32TO8_LITTLE(c + 36, x9);

  00593	89 78 24	 mov	 DWORD PTR [rax+36], edi

; 171  :         U32TO8_LITTLE(c + 40, x10);

  00596	89 58 28	 mov	 DWORD PTR [rax+40], ebx

; 172  :         U32TO8_LITTLE(c + 44, x11);

  00599	44 89 58 2c	 mov	 DWORD PTR [rax+44], r11d

; 173  :         U32TO8_LITTLE(c + 48, x12);

  0059d	44 89 50 30	 mov	 DWORD PTR [rax+48], r10d

; 174  :         U32TO8_LITTLE(c + 52, x13);

  005a1	44 89 48 34	 mov	 DWORD PTR [rax+52], r9d

; 175  :         U32TO8_LITTLE(c + 56, x14);
; 176  :         U32TO8_LITTLE(c + 60, x15);
; 177  : 
; 178  :         if (bytes <= 64) {

  005a5	44 8b 4c 24 44	 mov	 r9d, DWORD PTR bytes$1$[rsp]
  005aa	44 89 40 38	 mov	 DWORD PTR [rax+56], r8d
  005ae	89 48 3c	 mov	 DWORD PTR [rax+60], ecx
  005b1	41 83 f9 40	 cmp	 r9d, 64			; 00000040H
  005b5	76 44		 jbe	 SHORT $LN25@ECRYPT_enc

; 184  :             return;
; 185  :         }
; 186  :         bytes -= 64;
; 187  :         c += 64;
; 188  :         m += 64;
; 189  :     }

  005b7	44 8b 54 24 10	 mov	 r10d, DWORD PTR j13$1$[rsp]
  005bc	41 83 c1 c0	 add	 r9d, -64		; ffffffc0H
  005c0	44 8b 5c 24 08	 mov	 r11d, DWORD PTR j12$1$[rsp]
  005c5	49 83 c5 40	 add	 r13, 64			; 00000040H
  005c9	44 8b 44 24 24	 mov	 r8d, DWORD PTR j0$1$[rsp]
  005ce	48 83 c2 40	 add	 rdx, 64			; 00000040H
  005d2	8b 5c 24 48	 mov	 ebx, DWORD PTR j1$1$[rsp]
  005d6	8b 7c 24 4c	 mov	 edi, DWORD PTR j2$1$[rsp]
  005da	8b 74 24 50	 mov	 esi, DWORD PTR j3$1$[rsp]
  005de	8b 6c 24 54	 mov	 ebp, DWORD PTR j4$1$[rsp]
  005e2	44 8b 74 24 58	 mov	 r14d, DWORD PTR j5$1$[rsp]
  005e7	48 89 54 24 68	 mov	 QWORD PTR m$1$[rsp], rdx
  005ec	44 89 4c 24 44	 mov	 DWORD PTR bytes$1$[rsp], r9d
  005f1	4c 89 6c 24 70	 mov	 QWORD PTR c$GSCopy$1$[rsp], r13
  005f6	e9 e5 fa ff ff	 jmp	 $LL2@ECRYPT_enc
$LN25@ECRYPT_enc:

; 179  :             if (bytes < 64) {

  005fb	4c 8b bc 24 f0
	00 00 00	 mov	 r15, QWORD PTR [rsp+240]
  00603	41 8d 41 ff	 lea	 eax, DWORD PTR [r9-1]
  00607	4c 8b b4 24 f8
	00 00 00	 mov	 r14, QWORD PTR [rsp+248]
  0060f	4c 8b a4 24 00
	01 00 00	 mov	 r12, QWORD PTR [rsp+256]
  00617	48 8b bc 24 08
	01 00 00	 mov	 rdi, QWORD PTR [rsp+264]
  0061f	48 8b b4 24 10
	01 00 00	 mov	 rsi, QWORD PTR [rsp+272]
  00627	48 8b ac 24 18
	01 00 00	 mov	 rbp, QWORD PTR [rsp+280]
  0062f	48 8b 9c 24 38
	01 00 00	 mov	 rbx, QWORD PTR [rsp+312]
  00637	83 f8 3e	 cmp	 eax, 62			; 0000003eH
  0063a	77 25		 ja	 SHORT $LN12@ECRYPT_enc
  0063c	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR ctarget$1$[rsp]
  00644	49 8b d1	 mov	 rdx, r9
  00647	4c 2b e9	 sub	 r13, rcx
  0064a	66 0f 1f 44 00
	00		 npad	 6
$LL31@ECRYPT_enc:

; 180  :                 for (i = 0; i < bytes; ++i) ctarget[i] = c[i];

  00650	42 0f b6 04 29	 movzx	 eax, BYTE PTR [rcx+r13]
  00655	88 01		 mov	 BYTE PTR [rcx], al
  00657	48 8d 49 01	 lea	 rcx, QWORD PTR [rcx+1]
  0065b	48 83 ea 01	 sub	 rdx, 1
  0065f	75 ef		 jne	 SHORT $LL31@ECRYPT_enc
$LN12@ECRYPT_enc:

; 181  :             }
; 182  :             x->input[12] = j12;

  00661	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR x$GSCopy$1$[rsp]
  00669	44 8b 5c 24 08	 mov	 r11d, DWORD PTR j12$1$[rsp]

; 183  :             x->input[13] = j13;

  0066e	44 8b 54 24 10	 mov	 r10d, DWORD PTR j13$1$[rsp]
  00673	44 89 58 30	 mov	 DWORD PTR [rax+48], r11d
  00677	44 89 50 34	 mov	 DWORD PTR [rax+52], r10d

; 190  : }

  0067b	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  00683	48 33 cc	 xor	 rcx, rsp
  00686	e8 00 00 00 00	 call	 __security_check_cookie
  0068b	48 81 c4 20 01
	00 00		 add	 rsp, 288		; 00000120H
  00692	41 5d		 pop	 r13
$LN49@ECRYPT_enc:
  00694	c3		 ret	 0
ECRYPT_encrypt_bytes ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\chacha20\chacha.c
;	COMDAT ECRYPT_decrypt_bytes
_TEXT	SEGMENT
x$ = 8
c$ = 16
m$ = 24
bytes$ = 32
ECRYPT_decrypt_bytes PROC				; COMDAT

; 194  :     ECRYPT_encrypt_bytes(x, c, m, bytes);

  00000	e9 00 00 00 00	 jmp	 ECRYPT_encrypt_bytes
ECRYPT_decrypt_bytes ENDP
_TEXT	ENDS
END
