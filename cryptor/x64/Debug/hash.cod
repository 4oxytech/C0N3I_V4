; Listing generated by Microsoft (R) Optimizing Compiler Version 19.39.33522.0 

include listing.inc

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

msvcjmc	SEGMENT
__E91472BE_hash@h DB 01H
__0ED14FEE_winpackagefamily@h DB 01H
__F92EF742_winapifamily@h DB 01H
__22E515EB_sdkddkver@h DB 01H
__FE09AF47_concurrencysal@h DB 01H
__C073CA79_sal@h DB 01H
__D6AFE870_vadefs@h DB 01H
__D63E96CF_vcruntime@h DB 01H
__514B86D7_excpt@h DB 01H
__9A7D38D9_stdarg@h DB 01H
__29F49F40_specstrings_undef@h DB 01H
__D0F42932_specstrings_strict@h DB 01H
__F00405FD_sdv_driverspecs@h DB 01H
__173E09CA_driverspecs@h DB 01H
__9A452361_specstrings@h DB 01H
__1B0272D9_corecrt@h DB 01H
__74484FB3_corecrt_wctype@h DB 01H
__1EC467ED_ctype@h DB 01H
__98517906_kernelspecs@h DB 01H
__D3497022_basetsd@h DB 01H
__61CC25A1_errno@h DB 01H
__3EADF068_vcruntime_string@h DB 01H
__E4C945B4_corecrt_memcpy_s@h DB 01H
__8EAFF484_corecrt_memory@h DB 01H
__6490AEC5_corecrt_wstring@h DB 01H
__E8295E1E_string@h DB 01H
__7FCB5136_guiddef@h DB 01H
__FF8A9E11_pshpack4@h DB 01H
__D5438902_poppack@h DB 01H
__FB07E2A3_pshpack2@h DB 01H
__F6906775_pshpack8@h DB 01H
__F9415CFA_pshpack1@h DB 01H
__E58C6F1C_apiset@h DB 01H
__A5C52262_ktmtypes@h DB 01H
__FBBA8F9D_winnt@h DB 01H
__A32D3D2C_minwindef@h DB 01H
__7D798299_windef@h DB 01H
__9AE108E9_apisetcconv@h DB 01H
__9CE53D2C_minwinbase@h DB 01H
__5D0AA210_apiquery2@h DB 01H
__4DD4E726_processenv@h DB 01H
__3575CC96_fileapi@h DB 01H
__8EA220E6_fileapifromapp@h DB 01H
__BF9B31FE_debugapi@h DB 01H
__C3AFE134_utilapiset@h DB 01H
__76F69E51_handleapi@h DB 01H
__7E63D784_errhandlingapi@h DB 01H
__FFA7003C_fibersapi@h DB 01H
__8971CECF_namedpipeapi@h DB 01H
__46C9D8A6_profileapi@h DB 01H
__98D4F0A3_heapapi@h DB 01H
__50EF2A88_ioapiset@h DB 01H
__92EA1464_synchapi@h DB 01H
__A53D8AED_interlockedapi@h DB 01H
__B506CAAF_processthreadsapi@h DB 01H
__FF735694_sysinfoapi@h DB 01H
__29589789_memoryapi@h DB 01H
__E9C7A663_enclaveapi@h DB 01H
__D035F9F7_threadpoollegacyapiset@h DB 01H
__C899130C_threadpoolapiset@h DB 01H
__E0441EE7_jobapi@h DB 01H
__CEF86838_jobapi2@h DB 01H
__35AC6B9A_wow64apiset@h DB 01H
__C8AE41A5_libloaderapi@h DB 01H
__CC9E232D_securitybaseapi@h DB 01H
__C9D0C9B8_namespaceapi@h DB 01H
__30FF9CAD_systemtopologyapi@h DB 01H
__4D358795_processtopologyapi@h DB 01H
__40446D10_securityappcontainer@h DB 01H
__3A952EDF_realtimeapiset@h DB 01H
__F4865F4B_winerror@h DB 01H
__53C1BD93_timezoneapi@h DB 01H
__1FFBEDBF_winbase@h DB 01H
__43D3FA34_wingdi@h DB 01H
__D24A7391_tvout@h DB 01H
__7713A6C8_winuser@h DB 01H
__0B345F71_datetimeapi@h DB 01H
__9AC6960C_winnls@h DB 01H
__973A40A8_stringapiset@h DB 01H
__CC46FEE2_wincontypes@h DB 01H
__97D70BE1_consoleapi@h DB 01H
__27EC5E18_consoleapi2@h DB 01H
__262E342F_consoleapi3@h DB 01H
__641DCD70_wincon@h DB 01H
__5A96C7A7_verrsrc@h DB 01H
__B69C6FF2_winver@h DB 01H
__7AEB8C37_reason@h DB 01H
__59F1A8A9_winreg@h DB 01H
__EE0E2B7F_wnnc@h DB 01H
__DCDB7054_winnetwk@h DB 01H
__EDC72EEB_cderr@h DB 01H
__95F9199D_dde@h DB 01H
__66427627_ddeml@h DB 01H
__957C29A0_dlgs@h DB 01H
__12EA15AF_lzexpand@h DB 01H
__62131F15_mmsyscom@h DB 01H
__47E68D49_mciapi@h DB 01H
__5D7DD356_mmiscapi@h DB 01H
__7223D2EF_mmiscapi2@h DB 01H
__A330DBB3_playsoundapi@h DB 01H
__601B366F_mmeapi@h DB 01H
__1134ADD5_timeapi@h DB 01H
__93F2265A_joystickapi@h DB 01H
__DF6EB4E3_mmsystem@h DB 01H
__BD641FCB_nb30@h DB 01H
__DF8704F0_rpcdcep@h DB 01H
__5C6CA7BB_rpcdce@h DB 01H
__853533C4_rpcnsi@h DB 01H
__2D2406C3_rpcnterr@h DB 01H
__64521D71_rpcasync@h DB 01H
__AADCBA08_rpc@h DB 01H
__19E26CFF_shellapi@h DB 01H
__1E9F31D3_winperf@h DB 01H
__32C6F875_winsock@h DB 01H
__7953A3F8_bcrypt@h DB 01H
__E4169492_ncrypt@h DB 01H
__AF3DDDC3_dpapi@h DB 01H
__D1E23BF2_wincrypt@h DB 01H
__82AB4779_winefs@h DB 01H
__1FE431C9_rpcnsip@h DB 01H
__2B741F2D_rpcsal@h DB 01H
__92623256_rpcndr@h DB 01H
__9C18532E_wtypesbase@h DB 01H
__EA2E1D6D_wtypes@h DB 01H
__7DDD9F45_winioctl@h DB 01H
__E550A843_winsmcrd@h DB 01H
__9809C1BA_winscard@h DB 01H
__EA174FA4_prsht@h DB 01H
__0E1BD114_winspool@h DB 01H
__45DED006_corecrt_malloc@h DB 01H
__13F5961F_stddef@h DB 01H
__FD6DBD68_corecrt_search@h DB 01H
__E2E33A61_corecrt_wstdlib@h DB 01H
__10D4A829_limits@h DB 01H
__6E5ACABA_stdlib@h DB 01H
__30B1AFDA_unknwnbase@h DB 01H
__328C1996_objidlbase@h DB 01H
__C4E06B6A_cguid@h DB 01H
__434718C5_combaseapi@h DB 01H
__DE6FDEF1_unknwn@h DB 01H
__CCE0BACC_objidl@h DB 01H
__8C7011E5_oaidl@h DB 01H
__2E0B7863_propidlbase@h DB 01H
__BF4CF2EC_coml2api@h DB 01H
__6D897344_oleidl@h DB 01H
__1129FC2C_servprov@h DB 01H
__757952E4_msxml@h DB 01H
__B1191D53_urlmon@h DB 01H
__404D1A47_propidl@h DB 01H
__A1C63593_objbase@h DB 01H
__C1B0A9CB_oleauto@h DB 01H
__24EAF61F_ole2@h DB 01H
__2B1843DA_commdlg@h DB 01H
__81DDEDE3_stralign@h DB 01H
__2134D1B4_winsvc@h DB 01H
__11C07376_mcx@h DB 01H
__577CE3E7_ime_cmodes@h DB 01H
__1E72C31E_imm@h DB 01H
__E15BF856_windows@h DB 01H
__832A4112_inaddr@h DB 01H
__C59B8995_ws2def@h DB 01H
__F9202461_qos@h DB 01H
__50CB22FA_WinSock2@h DB 01H
__32E3D3D2_xkeycheck@h DB 01H
__CFD6EDFA_yvals_core@h DB 01H
__BE6CFB00___msvc_sanitizer_annotate_container@hpp DB 01H
__A3D3E4E8_vcruntime_new@h DB 01H
__8D1A214D_vcruntime_new_debug@h DB 01H
__935DC21B_crtdbg@h DB 01H
__497BC13E_crtdefs@h DB 01H
__DDE8D0E0_use_ansi@h DB 01H
__AE7FBCDF_yvals@h DB 01H
__44420885_corecrt_stdio_config@h DB 01H
__AB601D8D_corecrt_wstdio@h DB 01H
__C1EC35D3_stdio@h DB 01H
__1C5946C5_cstdio DB 01H
__54ADA280_cstring DB 01H
__EF1F6BBA_corecrt_wconio@h DB 01H
__3D1D430C_corecrt_wdirect@h DB 01H
__8ECB7138_corecrt_share@h DB 01H
__DB7FEBA6_corecrt_wio@h DB 01H
__9A9F0068_corecrt_wprocess@h DB 01H
__369A9BC3_corecrt_wtime@h DB 01H
__CE789B9D_types@h DB 01H
__9901C817_stat@h DB 01H
__3FCAD62E_wchar@h DB 01H
__86D29096_cwchar DB 01H
__26E6E2A9_xtr1common DB 01H
__C51215A0_iosfwd DB 01H
__AEA28616_stdint@h DB 01H
__A561EB1D_cstdint DB 01H
__BB16330F_corecrt_math@h DB 01H
__3BF2A406_math@h DB 01H
__183F0A60_cstdlib DB 01H
__B9985323_float@h DB 01H
__6F1D8D42_cfloat DB 01H
__9CD02892_climits DB 01H
__F5A7E1DF_intrin0@inl@h DB 01H
__50567835_intrin0@h DB 01H
__09FBC026_limits DB 01H
__BDF4D0CD_cstddef DB 01H
__7C4A1519_type_traits DB 01H
__FA77ED4C_malloc@h DB 01H
__89766DA4_corecrt_terminate@h DB 01H
__EEF52EF9_eh@h DB 01H
__85F4241F_vcruntime_exception@h DB 01H
__8124AFA8_exception DB 01H
__5003AD96_new DB 01H
__8B28237E_xatomic@h DB 01H
__E4CFD974_initializer_list DB 01H
__2F328FEB_utility DB 01H
__91F58E7E___msvc_iter_core@hpp DB 01H
__C27AFEEB_xutility DB 01H
__45A7EC28_xmemory DB 01H
__31746AB4_xstring DB 01H
__1392A162_cctype DB 01H
__C1864A34_string DB 01H
__9D469CC8_common@h DB 01H
__ED66B863_memory@h DB 01H
__B7229D19_hash@cpp DB 01H
msvcjmc	ENDS
CONST	SEGMENT
?_Fake_alloc@std@@3U_Fake_allocator@1@B	ORG $+1		; std::_Fake_alloc
CONST	ENDS
PUBLIC	?MurmurHash2A@@YAIPEBXHI@Z			; MurmurHash2A
PUBLIC	RtlSecureZeroMemory
PUBLIC	__JustMyCode_Default
EXTRN	?Copy@memory@@YAXPEAXQEAX_K@Z:PROC		; memory::Copy
EXTRN	_RTC_CheckStackVars:PROC
EXTRN	_RTC_InitBase:PROC
EXTRN	_RTC_Shutdown:PROC
EXTRN	__CheckForDebuggerJustMyCode:PROC
EXTRN	__GSHandlerCheck:PROC
EXTRN	__security_check_cookie:PROC
EXTRN	__security_cookie:QWORD
;	COMDAT pdata
pdata	SEGMENT
$pdata$?MurmurHash2A@@YAIPEBXHI@Z DD imagerel $LN14
	DD	imagerel $LN14+888
	DD	imagerel $unwind$?MurmurHash2A@@YAIPEBXHI@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$RtlSecureZeroMemory DD imagerel $LN3
	DD	imagerel $LN3+79
	DD	imagerel $unwind$RtlSecureZeroMemory
pdata	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
_RTC_Shutdown.rtc$TMZ DQ FLAT:_RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
_RTC_InitBase.rtc$IMZ DQ FLAT:_RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$RtlSecureZeroMemory DD 025051801H
	DD	01132318H
	DD	0700c0021H
	DD	0500bH
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	03fH
	DW	035fH
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?MurmurHash2A@@YAIPEBXHI@Z DD 025054619H
	DD	0117231cH
	DD	070100049H
	DD	0500fH
	DD	imagerel __GSHandlerCheck
	DD	0238H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?MurmurHash2A@@YAIPEBXHI@Z$rtcName$0 DB 074H		; MurmurHash2A
	DB	065H
	DB	06dH
	DB	070H
	DB	00H
	ORG $+11
?MurmurHash2A@@YAIPEBXHI@Z$rtcVarDesc DD 030H		; MurmurHash2A
	DD	040H
	DQ	FLAT:?MurmurHash2A@@YAIPEBXHI@Z$rtcName$0
	ORG $+48
?MurmurHash2A@@YAIPEBXHI@Z$rtcFrameData DD 01H		; MurmurHash2A
	DD	00H
	DQ	FLAT:?MurmurHash2A@@YAIPEBXHI@Z$rtcVarDesc
CONST	ENDS
; Function compile flags: /Odt
;	COMDAT __JustMyCode_Default
_TEXT	SEGMENT
__JustMyCode_Default PROC				; COMDAT
  00000	c2 00 00	 ret	 0
__JustMyCode_Default ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\um\winnt.h
;	COMDAT RtlSecureZeroMemory
_TEXT	SEGMENT
vptr$ = 8
ptr$ = 256
cnt$ = 264
RtlSecureZeroMemory PROC				; COMDAT

; 21766: {

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__FBBA8F9D_winnt@h
  0001f	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 21767:     volatile char *vptr = (volatile char *)ptr;

  00024	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR ptr$[rbp]
  0002b	48 89 45 08	 mov	 QWORD PTR vptr$[rbp], rax

; 21768: 
; 21769: #if defined(_M_AMD64) && !defined(_M_ARM64EC)
; 21770: 
; 21771:     __stosb((PBYTE )((DWORD64)vptr), 0, cnt);

  0002f	48 8b 7d 08	 mov	 rdi, QWORD PTR vptr$[rbp]
  00033	33 c0		 xor	 eax, eax
  00035	48 8b 8d 08 01
	00 00		 mov	 rcx, QWORD PTR cnt$[rbp]
  0003c	f3 aa		 rep stosb

; 21772: 
; 21773: #else
; 21774: 
; 21775:     while (cnt) {
; 21776: 
; 21777: #if !defined(_M_CEE) && (defined(_M_ARM) || defined(_M_ARM64) || defined(_M_ARM64EC))
; 21778: 
; 21779:         __iso_volatile_store8(vptr, 0);
; 21780: 
; 21781: #else
; 21782: 
; 21783:         *vptr = 0;
; 21784: 
; 21785: #endif
; 21786: 
; 21787:         vptr++;
; 21788:         cnt--;
; 21789:     }
; 21790: 
; 21791: #endif // _M_AMD64 && !defined(_M_ARM64EC)
; 21792: 
; 21793:     return ptr;

  0003e	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR ptr$[rbp]

; 21794: }

  00045	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  0004c	5f		 pop	 rdi
  0004d	5d		 pop	 rbp
  0004e	c3		 ret	 0
RtlSecureZeroMemory ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\api\hash.cpp
;	COMDAT ?MurmurHash2A@@YAIPEBXHI@Z
_TEXT	SEGMENT
temp$ = 16
i$4 = 100
m$ = 132
r$ = 164
l$ = 196
data$ = 232
h$ = 260
k$ = 292
t$ = 324
tv132 = 532
__$ArrayPad$ = 536
key$ = 576
len$ = 584
seed$ = 592
?MurmurHash2A@@YAIPEBXHI@Z PROC				; MurmurHash2A, COMDAT

; 8    : {

$LN14:
  00000	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  00005	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00009	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000e	55		 push	 rbp
  0000f	57		 push	 rdi
  00010	48 81 ec 48 02
	00 00		 sub	 rsp, 584		; 00000248H
  00017	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0001c	48 8d 7c 24 20	 lea	 rdi, QWORD PTR [rsp+32]
  00021	b9 5a 00 00 00	 mov	 ecx, 90			; 0000005aH
  00026	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002b	f3 ab		 rep stosd
  0002d	48 8b 8c 24 68
	02 00 00	 mov	 rcx, QWORD PTR [rsp+616]
  00035	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0003c	48 33 c5	 xor	 rax, rbp
  0003f	48 89 85 18 02
	00 00		 mov	 QWORD PTR __$ArrayPad$[rbp], rax
  00046	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__B7229D19_hash@cpp
  0004d	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 9    : 	char temp[64];
; 10   : 	RtlSecureZeroMemory(temp, 64);

  00052	ba 40 00 00 00	 mov	 edx, 64			; 00000040H
  00057	48 8d 4d 10	 lea	 rcx, QWORD PTR temp$[rbp]
  0005b	e8 00 00 00 00	 call	 RtlSecureZeroMemory

; 11   : 	memory::Copy(temp, (PVOID)key, len);

  00060	48 63 85 48 02
	00 00		 movsxd	 rax, DWORD PTR len$[rbp]
  00067	4c 8b c0	 mov	 r8, rax
  0006a	48 8b 95 40 02
	00 00		 mov	 rdx, QWORD PTR key$[rbp]
  00071	48 8d 4d 10	 lea	 rcx, QWORD PTR temp$[rbp]
  00075	e8 00 00 00 00	 call	 ?Copy@memory@@YAXPEAXQEAX_K@Z ; memory::Copy

; 12   : 
; 13   : 	for (int i = 0; i < len; i++) {

  0007a	c7 45 64 00 00
	00 00		 mov	 DWORD PTR i$4[rbp], 0
  00081	eb 08		 jmp	 SHORT $LN4@MurmurHash
$LN2@MurmurHash:
  00083	8b 45 64	 mov	 eax, DWORD PTR i$4[rbp]
  00086	ff c0		 inc	 eax
  00088	89 45 64	 mov	 DWORD PTR i$4[rbp], eax
$LN4@MurmurHash:
  0008b	8b 85 48 02 00
	00		 mov	 eax, DWORD PTR len$[rbp]
  00091	39 45 64	 cmp	 DWORD PTR i$4[rbp], eax
  00094	7d 32		 jge	 SHORT $LN3@MurmurHash

; 14   : 		LowerChar(temp[i]);

  00096	48 63 45 64	 movsxd	 rax, DWORD PTR i$4[rbp]
  0009a	0f be 44 05 10	 movsx	 eax, BYTE PTR temp$[rbp+rax]
  0009f	83 f8 41	 cmp	 eax, 65			; 00000041H
  000a2	7c 22		 jl	 SHORT $LN9@MurmurHash
  000a4	48 63 45 64	 movsxd	 rax, DWORD PTR i$4[rbp]
  000a8	0f be 44 05 10	 movsx	 eax, BYTE PTR temp$[rbp+rax]
  000ad	83 f8 5a	 cmp	 eax, 90			; 0000005aH
  000b0	7f 14		 jg	 SHORT $LN9@MurmurHash
  000b2	48 63 45 64	 movsxd	 rax, DWORD PTR i$4[rbp]
  000b6	0f be 44 05 10	 movsx	 eax, BYTE PTR temp$[rbp+rax]
  000bb	83 c0 20	 add	 eax, 32			; 00000020H
  000be	48 63 4d 64	 movsxd	 rcx, DWORD PTR i$4[rbp]
  000c2	88 44 0d 10	 mov	 BYTE PTR temp$[rbp+rcx], al
$LN9@MurmurHash:

; 15   : 	}

  000c6	eb bb		 jmp	 SHORT $LN2@MurmurHash
$LN3@MurmurHash:

; 16   : 
; 17   : 	const unsigned int m = 0x5bd1e995;

  000c8	c7 85 84 00 00
	00 95 e9 d1 5b	 mov	 DWORD PTR m$[rbp], 1540483477 ; 5bd1e995H

; 18   : 	const int r = 24;

  000d2	c7 85 a4 00 00
	00 18 00 00 00	 mov	 DWORD PTR r$[rbp], 24

; 19   : 	unsigned int l = len;

  000dc	8b 85 48 02 00
	00		 mov	 eax, DWORD PTR len$[rbp]
  000e2	89 85 c4 00 00
	00		 mov	 DWORD PTR l$[rbp], eax

; 20   : 
; 21   : 	const unsigned char* data = (const unsigned char*)temp;

  000e8	48 8d 45 10	 lea	 rax, QWORD PTR temp$[rbp]
  000ec	48 89 85 e8 00
	00 00		 mov	 QWORD PTR data$[rbp], rax

; 22   : 
; 23   : 	unsigned int h = seed;

  000f3	8b 85 50 02 00
	00		 mov	 eax, DWORD PTR seed$[rbp]
  000f9	89 85 04 01 00
	00		 mov	 DWORD PTR h$[rbp], eax
$LN5@MurmurHash:

; 24   : 	unsigned int k;
; 25   : 
; 26   : 	while (len >= 4)

  000ff	83 bd 48 02 00
	00 04		 cmp	 DWORD PTR len$[rbp], 4
  00106	0f 8c 94 00 00
	00		 jl	 $LN6@MurmurHash

; 27   : 	{
; 28   : 		k = *(unsigned int*)data;

  0010c	48 8b 85 e8 00
	00 00		 mov	 rax, QWORD PTR data$[rbp]
  00113	8b 00		 mov	 eax, DWORD PTR [rax]
  00115	89 85 24 01 00
	00		 mov	 DWORD PTR k$[rbp], eax

; 29   : 
; 30   : 		mmix(h, k);

  0011b	69 85 24 01 00
	00 95 e9 d1 5b	 imul	 eax, DWORD PTR k$[rbp], 1540483477 ; 5bd1e995H
  00125	89 85 24 01 00
	00		 mov	 DWORD PTR k$[rbp], eax
  0012b	8b 85 24 01 00
	00		 mov	 eax, DWORD PTR k$[rbp]
  00131	c1 e8 18	 shr	 eax, 24
  00134	8b 8d 24 01 00
	00		 mov	 ecx, DWORD PTR k$[rbp]
  0013a	33 c8		 xor	 ecx, eax
  0013c	8b c1		 mov	 eax, ecx
  0013e	89 85 24 01 00
	00		 mov	 DWORD PTR k$[rbp], eax
  00144	69 85 24 01 00
	00 95 e9 d1 5b	 imul	 eax, DWORD PTR k$[rbp], 1540483477 ; 5bd1e995H
  0014e	89 85 24 01 00
	00		 mov	 DWORD PTR k$[rbp], eax
  00154	69 85 04 01 00
	00 95 e9 d1 5b	 imul	 eax, DWORD PTR h$[rbp], 1540483477 ; 5bd1e995H
  0015e	89 85 04 01 00
	00		 mov	 DWORD PTR h$[rbp], eax
  00164	8b 85 24 01 00
	00		 mov	 eax, DWORD PTR k$[rbp]
  0016a	8b 8d 04 01 00
	00		 mov	 ecx, DWORD PTR h$[rbp]
  00170	33 c8		 xor	 ecx, eax
  00172	8b c1		 mov	 eax, ecx
  00174	89 85 04 01 00
	00		 mov	 DWORD PTR h$[rbp], eax

; 31   : 
; 32   : 		data += 4;

  0017a	48 8b 85 e8 00
	00 00		 mov	 rax, QWORD PTR data$[rbp]
  00181	48 83 c0 04	 add	 rax, 4
  00185	48 89 85 e8 00
	00 00		 mov	 QWORD PTR data$[rbp], rax

; 33   : 		len -= 4;

  0018c	8b 85 48 02 00
	00		 mov	 eax, DWORD PTR len$[rbp]
  00192	83 e8 04	 sub	 eax, 4
  00195	89 85 48 02 00
	00		 mov	 DWORD PTR len$[rbp], eax

; 34   : 	}

  0019b	e9 5f ff ff ff	 jmp	 $LN5@MurmurHash
$LN6@MurmurHash:

; 35   : 
; 36   : 	unsigned int t = 0;

  001a0	c7 85 44 01 00
	00 00 00 00 00	 mov	 DWORD PTR t$[rbp], 0

; 37   : 
; 38   : 	switch (len)

  001aa	8b 85 48 02 00
	00		 mov	 eax, DWORD PTR len$[rbp]
  001b0	89 85 14 02 00
	00		 mov	 DWORD PTR tv132[rbp], eax
  001b6	83 bd 14 02 00
	00 01		 cmp	 DWORD PTR tv132[rbp], 1
  001bd	74 62		 je	 SHORT $LN12@MurmurHash
  001bf	83 bd 14 02 00
	00 02		 cmp	 DWORD PTR tv132[rbp], 2
  001c6	74 32		 je	 SHORT $LN11@MurmurHash
  001c8	83 bd 14 02 00
	00 03		 cmp	 DWORD PTR tv132[rbp], 3
  001cf	74 02		 je	 SHORT $LN10@MurmurHash
  001d1	eb 72		 jmp	 SHORT $LN7@MurmurHash
$LN10@MurmurHash:

; 39   : 	{
; 40   : 	case 3: t ^= data[2] << 16;

  001d3	b8 01 00 00 00	 mov	 eax, 1
  001d8	48 6b c0 02	 imul	 rax, rax, 2
  001dc	48 8b 8d e8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  001e3	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  001e7	c1 e0 10	 shl	 eax, 16
  001ea	8b 8d 44 01 00
	00		 mov	 ecx, DWORD PTR t$[rbp]
  001f0	33 c8		 xor	 ecx, eax
  001f2	8b c1		 mov	 eax, ecx
  001f4	89 85 44 01 00
	00		 mov	 DWORD PTR t$[rbp], eax
$LN11@MurmurHash:

; 41   : 	case 2: t ^= data[1] << 8;

  001fa	b8 01 00 00 00	 mov	 eax, 1
  001ff	48 6b c0 01	 imul	 rax, rax, 1
  00203	48 8b 8d e8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  0020a	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  0020e	c1 e0 08	 shl	 eax, 8
  00211	8b 8d 44 01 00
	00		 mov	 ecx, DWORD PTR t$[rbp]
  00217	33 c8		 xor	 ecx, eax
  00219	8b c1		 mov	 eax, ecx
  0021b	89 85 44 01 00
	00		 mov	 DWORD PTR t$[rbp], eax
$LN12@MurmurHash:

; 42   : 	case 1: t ^= data[0];

  00221	b8 01 00 00 00	 mov	 eax, 1
  00226	48 6b c0 00	 imul	 rax, rax, 0
  0022a	48 8b 8d e8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00231	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  00235	8b 8d 44 01 00
	00		 mov	 ecx, DWORD PTR t$[rbp]
  0023b	33 c8		 xor	 ecx, eax
  0023d	8b c1		 mov	 eax, ecx
  0023f	89 85 44 01 00
	00		 mov	 DWORD PTR t$[rbp], eax
$LN7@MurmurHash:

; 43   : 	};
; 44   : 
; 45   : 	mmix(h, t);

  00245	69 85 44 01 00
	00 95 e9 d1 5b	 imul	 eax, DWORD PTR t$[rbp], 1540483477 ; 5bd1e995H
  0024f	89 85 44 01 00
	00		 mov	 DWORD PTR t$[rbp], eax
  00255	8b 85 44 01 00
	00		 mov	 eax, DWORD PTR t$[rbp]
  0025b	c1 e8 18	 shr	 eax, 24
  0025e	8b 8d 44 01 00
	00		 mov	 ecx, DWORD PTR t$[rbp]
  00264	33 c8		 xor	 ecx, eax
  00266	8b c1		 mov	 eax, ecx
  00268	89 85 44 01 00
	00		 mov	 DWORD PTR t$[rbp], eax
  0026e	69 85 44 01 00
	00 95 e9 d1 5b	 imul	 eax, DWORD PTR t$[rbp], 1540483477 ; 5bd1e995H
  00278	89 85 44 01 00
	00		 mov	 DWORD PTR t$[rbp], eax
  0027e	69 85 04 01 00
	00 95 e9 d1 5b	 imul	 eax, DWORD PTR h$[rbp], 1540483477 ; 5bd1e995H
  00288	89 85 04 01 00
	00		 mov	 DWORD PTR h$[rbp], eax
  0028e	8b 85 44 01 00
	00		 mov	 eax, DWORD PTR t$[rbp]
  00294	8b 8d 04 01 00
	00		 mov	 ecx, DWORD PTR h$[rbp]
  0029a	33 c8		 xor	 ecx, eax
  0029c	8b c1		 mov	 eax, ecx
  0029e	89 85 04 01 00
	00		 mov	 DWORD PTR h$[rbp], eax

; 46   : 	mmix(h, l);

  002a4	69 85 c4 00 00
	00 95 e9 d1 5b	 imul	 eax, DWORD PTR l$[rbp], 1540483477 ; 5bd1e995H
  002ae	89 85 c4 00 00
	00		 mov	 DWORD PTR l$[rbp], eax
  002b4	8b 85 c4 00 00
	00		 mov	 eax, DWORD PTR l$[rbp]
  002ba	c1 e8 18	 shr	 eax, 24
  002bd	8b 8d c4 00 00
	00		 mov	 ecx, DWORD PTR l$[rbp]
  002c3	33 c8		 xor	 ecx, eax
  002c5	8b c1		 mov	 eax, ecx
  002c7	89 85 c4 00 00
	00		 mov	 DWORD PTR l$[rbp], eax
  002cd	69 85 c4 00 00
	00 95 e9 d1 5b	 imul	 eax, DWORD PTR l$[rbp], 1540483477 ; 5bd1e995H
  002d7	89 85 c4 00 00
	00		 mov	 DWORD PTR l$[rbp], eax
  002dd	69 85 04 01 00
	00 95 e9 d1 5b	 imul	 eax, DWORD PTR h$[rbp], 1540483477 ; 5bd1e995H
  002e7	89 85 04 01 00
	00		 mov	 DWORD PTR h$[rbp], eax
  002ed	8b 85 c4 00 00
	00		 mov	 eax, DWORD PTR l$[rbp]
  002f3	8b 8d 04 01 00
	00		 mov	 ecx, DWORD PTR h$[rbp]
  002f9	33 c8		 xor	 ecx, eax
  002fb	8b c1		 mov	 eax, ecx
  002fd	89 85 04 01 00
	00		 mov	 DWORD PTR h$[rbp], eax

; 47   : 
; 48   : 	h ^= h >> 13;

  00303	8b 85 04 01 00
	00		 mov	 eax, DWORD PTR h$[rbp]
  00309	c1 e8 0d	 shr	 eax, 13
  0030c	8b 8d 04 01 00
	00		 mov	 ecx, DWORD PTR h$[rbp]
  00312	33 c8		 xor	 ecx, eax
  00314	8b c1		 mov	 eax, ecx
  00316	89 85 04 01 00
	00		 mov	 DWORD PTR h$[rbp], eax

; 49   : 	h *= m;

  0031c	69 85 04 01 00
	00 95 e9 d1 5b	 imul	 eax, DWORD PTR h$[rbp], 1540483477 ; 5bd1e995H
  00326	89 85 04 01 00
	00		 mov	 DWORD PTR h$[rbp], eax

; 50   : 	h ^= h >> 15;

  0032c	8b 85 04 01 00
	00		 mov	 eax, DWORD PTR h$[rbp]
  00332	c1 e8 0f	 shr	 eax, 15
  00335	8b 8d 04 01 00
	00		 mov	 ecx, DWORD PTR h$[rbp]
  0033b	33 c8		 xor	 ecx, eax
  0033d	8b c1		 mov	 eax, ecx
  0033f	89 85 04 01 00
	00		 mov	 DWORD PTR h$[rbp], eax

; 51   : 
; 52   : 	return h;

  00345	8b 85 04 01 00
	00		 mov	 eax, DWORD PTR h$[rbp]

; 53   : }

  0034b	8b f8		 mov	 edi, eax
  0034d	48 8d 4d e0	 lea	 rcx, QWORD PTR [rbp-32]
  00351	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?MurmurHash2A@@YAIPEBXHI@Z$rtcFrameData
  00358	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  0035d	8b c7		 mov	 eax, edi
  0035f	48 8b 8d 18 02
	00 00		 mov	 rcx, QWORD PTR __$ArrayPad$[rbp]
  00366	48 33 cd	 xor	 rcx, rbp
  00369	e8 00 00 00 00	 call	 __security_check_cookie
  0036e	48 8d a5 28 02
	00 00		 lea	 rsp, QWORD PTR [rbp+552]
  00375	5f		 pop	 rdi
  00376	5d		 pop	 rbp
  00377	c3		 ret	 0
?MurmurHash2A@@YAIPEBXHI@Z ENDP				; MurmurHash2A
_TEXT	ENDS
END
