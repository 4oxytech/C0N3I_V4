; Listing generated by Microsoft (R) Optimizing Compiler Version 19.39.33522.0 

include listing.inc

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

msvcjmc	SEGMENT
__FE09AF47_concurrencysal@h DB 01H
__C073CA79_sal@h DB 01H
__D6AFE870_vadefs@h DB 01H
__D63E96CF_vcruntime@h DB 01H
__10D4A829_limits@h DB 01H
__636D4263_ecrypt-config@h DB 01H
__B6C0B8F2_ecrypt-machine@h DB 01H
__94D60663_ecrypt-portable@h DB 01H
__80D1E77F_ecrypt-sync@h DB 01H
__8816C957_chacha@c DB 01H
msvcjmc	ENDS
CONST	SEGMENT
?sigma@@3QBDB DB 'expand 32-byte k', 00H		; sigma
	ORG $+7
?tau@@3QBDB DB	'expand 16-byte k', 00H			; tau
CONST	ENDS
PUBLIC	ECRYPT_init
PUBLIC	ECRYPT_keysetup
PUBLIC	ECRYPT_ivsetup
PUBLIC	ECRYPT_encrypt_bytes
PUBLIC	ECRYPT_decrypt_bytes
PUBLIC	ECRYPT_keystream_bytes
PUBLIC	__JustMyCode_Default
EXTRN	_RTC_CheckStackVars:PROC
EXTRN	_RTC_InitBase:PROC
EXTRN	_RTC_Shutdown:PROC
EXTRN	__CheckForDebuggerJustMyCode:PROC
EXTRN	__GSHandlerCheck:PROC
EXTRN	__security_check_cookie:PROC
EXTRN	__security_cookie:QWORD
;	COMDAT pdata
pdata	SEGMENT
$pdata$ECRYPT_init DD imagerel $LN3
	DD	imagerel $LN3+37
	DD	imagerel $unwind$ECRYPT_init
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$ECRYPT_keysetup DD imagerel $LN5
	DD	imagerel $LN5+575
	DD	imagerel $unwind$ECRYPT_keysetup
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$ECRYPT_ivsetup DD imagerel $LN3
	DD	imagerel $LN3+171
	DD	imagerel $unwind$ECRYPT_ivsetup
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$ECRYPT_encrypt_bytes DD imagerel $LN20
	DD	imagerel $LN20+4415
	DD	imagerel $unwind$ECRYPT_encrypt_bytes
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$ECRYPT_decrypt_bytes DD imagerel $LN3
	DD	imagerel $LN3+89
	DD	imagerel $unwind$ECRYPT_decrypt_bytes
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$ECRYPT_keystream_bytes DD imagerel $LN6
	DD	imagerel $LN6+128
	DD	imagerel $unwind$ECRYPT_keystream_bytes
pdata	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
_RTC_Shutdown.rtc$TMZ DQ FLAT:_RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
_RTC_InitBase.rtc$IMZ DQ FLAT:_RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$ECRYPT_keystream_bytes DD 025051d01H
	DD	0118231dH
	DD	070110021H
	DD	05010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$ECRYPT_decrypt_bytes DD 025052201H
	DD	011d2322H
	DD	07016001dH
	DD	05015H
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	045H
	DW	01126H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$ECRYPT_encrypt_bytes DD 025054c19H
	DD	011d2322H
	DD	0701600e1H
	DD	05015H
	DD	imagerel __GSHandlerCheck
	DD	06f8H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
ECRYPT_encrypt_bytes$rtcName$0 DB 074H
	DB	06dH
	DB	070H
	DB	00H
	ORG $+12
ECRYPT_encrypt_bytes$rtcVarDesc DD 0450H
	DD	040H
	DQ	FLAT:ECRYPT_encrypt_bytes$rtcName$0
	ORG $+48
ECRYPT_encrypt_bytes$rtcFrameData DD 01H
	DD	00H
	DQ	FLAT:ECRYPT_encrypt_bytes$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$ECRYPT_ivsetup DD 025051801H
	DD	01132318H
	DD	0700c001dH
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$ECRYPT_keysetup DD 025052201H
	DD	011d2322H
	DD	070160021H
	DD	05015H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$ECRYPT_init DD 025050f01H
	DD	010a230fH
	DD	07003001dH
	DD	05002H
xdata	ENDS
; Function compile flags: /Odt
;	COMDAT __JustMyCode_Default
_TEXT	SEGMENT
__JustMyCode_Default PROC				; COMDAT
  00000	c2 00 00	 ret	 0
__JustMyCode_Default ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\chacha20\chacha.c
;	COMDAT ECRYPT_keystream_bytes
_TEXT	SEGMENT
i$ = 4
x$ = 256
stream$ = 264
bytes$ = 272
ECRYPT_keystream_bytes PROC				; COMDAT

; 198  : {

$LN6:
  00000	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	55		 push	 rbp
  00010	57		 push	 rdi
  00011	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  00018	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0001d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__8816C957_chacha@c
  00024	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 199  :     u32 i;
; 200  :     for (i = 0; i < bytes; ++i) stream[i] = 0;

  00029	c7 45 04 00 00
	00 00		 mov	 DWORD PTR i$[rbp], 0
  00030	eb 08		 jmp	 SHORT $LN4@ECRYPT_key
$LN2@ECRYPT_key:
  00032	8b 45 04	 mov	 eax, DWORD PTR i$[rbp]
  00035	ff c0		 inc	 eax
  00037	89 45 04	 mov	 DWORD PTR i$[rbp], eax
$LN4@ECRYPT_key:
  0003a	8b 85 10 01 00
	00		 mov	 eax, DWORD PTR bytes$[rbp]
  00040	39 45 04	 cmp	 DWORD PTR i$[rbp], eax
  00043	73 10		 jae	 SHORT $LN3@ECRYPT_key
  00045	8b 45 04	 mov	 eax, DWORD PTR i$[rbp]
  00048	48 8b 8d 08 01
	00 00		 mov	 rcx, QWORD PTR stream$[rbp]
  0004f	c6 04 01 00	 mov	 BYTE PTR [rcx+rax], 0
  00053	eb dd		 jmp	 SHORT $LN2@ECRYPT_key
$LN3@ECRYPT_key:

; 201  :     ECRYPT_encrypt_bytes(x, stream, stream, bytes);

  00055	44 8b 8d 10 01
	00 00		 mov	 r9d, DWORD PTR bytes$[rbp]
  0005c	4c 8b 85 08 01
	00 00		 mov	 r8, QWORD PTR stream$[rbp]
  00063	48 8b 95 08 01
	00 00		 mov	 rdx, QWORD PTR stream$[rbp]
  0006a	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR x$[rbp]
  00071	e8 00 00 00 00	 call	 ECRYPT_encrypt_bytes

; 202  : }

  00076	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  0007d	5f		 pop	 rdi
  0007e	5d		 pop	 rbp
  0007f	c3		 ret	 0
ECRYPT_keystream_bytes ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\chacha20\chacha.c
;	COMDAT ECRYPT_decrypt_bytes
_TEXT	SEGMENT
x$ = 224
c$ = 232
m$ = 240
bytes$ = 248
ECRYPT_decrypt_bytes PROC				; COMDAT

; 193  : {

$LN3:
  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	55		 push	 rbp
  00015	57		 push	 rdi
  00016	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0001d	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00022	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__8816C957_chacha@c
  00029	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 194  :     ECRYPT_encrypt_bytes(x, c, m, bytes);

  0002e	44 8b 8d f8 00
	00 00		 mov	 r9d, DWORD PTR bytes$[rbp]
  00035	4c 8b 85 f0 00
	00 00		 mov	 r8, QWORD PTR m$[rbp]
  0003c	48 8b 95 e8 00
	00 00		 mov	 rdx, QWORD PTR c$[rbp]
  00043	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR x$[rbp]
  0004a	e8 00 00 00 00	 call	 ECRYPT_encrypt_bytes

; 195  : }

  0004f	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00056	5f		 pop	 rdi
  00057	5d		 pop	 rbp
  00058	c3		 ret	 0
ECRYPT_decrypt_bytes ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\chacha20\chacha.c
;	COMDAT ECRYPT_encrypt_bytes
_TEXT	SEGMENT
x0$ = 4
x1$ = 36
x2$ = 68
x3$ = 100
x4$ = 132
x5$ = 164
x6$ = 196
x7$ = 228
x8$ = 260
x9$ = 292
x10$ = 324
x11$ = 356
x12$ = 388
x13$ = 420
x14$ = 452
x15$ = 484
j0$ = 516
j1$ = 548
j2$ = 580
j3$ = 612
j4$ = 644
j5$ = 676
j6$ = 708
j7$ = 740
j8$ = 772
j9$ = 804
j10$ = 836
j11$ = 868
j12$ = 900
j13$ = 932
j14$ = 964
j15$ = 996
ctarget$ = 1032
tmp$ = 1072
i$ = 1156
__$ArrayPad$ = 1752
x$ = 1792
m$ = 1800
c$ = 1808
bytes$ = 1816
ECRYPT_encrypt_bytes PROC				; COMDAT

; 62   : {

$LN20:
  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	55		 push	 rbp
  00015	57		 push	 rdi
  00016	48 81 ec 08 07
	00 00		 sub	 rsp, 1800		; 00000708H
  0001d	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00022	48 8d 7c 24 20	 lea	 rdi, QWORD PTR [rsp+32]
  00027	b9 2a 01 00 00	 mov	 ecx, 298		; 0000012aH
  0002c	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00031	f3 ab		 rep stosd
  00033	48 8b 8c 24 28
	07 00 00	 mov	 rcx, QWORD PTR [rsp+1832]
  0003b	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00042	48 33 c5	 xor	 rax, rbp
  00045	48 89 85 d8 06
	00 00		 mov	 QWORD PTR __$ArrayPad$[rbp], rax
  0004c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__8816C957_chacha@c
  00053	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 63   :     u32 x0, x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15;
; 64   :     u32 j0, j1, j2, j3, j4, j5, j6, j7, j8, j9, j10, j11, j12, j13, j14, j15;
; 65   :     u8* ctarget = 0;

  00058	48 c7 85 08 04
	00 00 00 00 00
	00		 mov	 QWORD PTR ctarget$[rbp], 0

; 66   :     u8 tmp[64];
; 67   :     int i;
; 68   : 
; 69   :     if (!bytes) return;

  00063	83 bd 18 07 00
	00 00		 cmp	 DWORD PTR bytes$[rbp], 0
  0006a	75 05		 jne	 SHORT $LN14@ECRYPT_enc
  0006c	e9 a5 10 00 00	 jmp	 $LN1@ECRYPT_enc
$LN14@ECRYPT_enc:

; 70   : 
; 71   :     j0 = x->input[0];

  00071	b8 04 00 00 00	 mov	 eax, 4
  00076	48 6b c0 00	 imul	 rax, rax, 0
  0007a	48 8b 8d 00 07
	00 00		 mov	 rcx, QWORD PTR x$[rbp]
  00081	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  00084	89 85 04 02 00
	00		 mov	 DWORD PTR j0$[rbp], eax

; 72   :     j1 = x->input[1];

  0008a	b8 04 00 00 00	 mov	 eax, 4
  0008f	48 6b c0 01	 imul	 rax, rax, 1
  00093	48 8b 8d 00 07
	00 00		 mov	 rcx, QWORD PTR x$[rbp]
  0009a	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  0009d	89 85 24 02 00
	00		 mov	 DWORD PTR j1$[rbp], eax

; 73   :     j2 = x->input[2];

  000a3	b8 04 00 00 00	 mov	 eax, 4
  000a8	48 6b c0 02	 imul	 rax, rax, 2
  000ac	48 8b 8d 00 07
	00 00		 mov	 rcx, QWORD PTR x$[rbp]
  000b3	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  000b6	89 85 44 02 00
	00		 mov	 DWORD PTR j2$[rbp], eax

; 74   :     j3 = x->input[3];

  000bc	b8 04 00 00 00	 mov	 eax, 4
  000c1	48 6b c0 03	 imul	 rax, rax, 3
  000c5	48 8b 8d 00 07
	00 00		 mov	 rcx, QWORD PTR x$[rbp]
  000cc	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  000cf	89 85 64 02 00
	00		 mov	 DWORD PTR j3$[rbp], eax

; 75   :     j4 = x->input[4];

  000d5	b8 04 00 00 00	 mov	 eax, 4
  000da	48 6b c0 04	 imul	 rax, rax, 4
  000de	48 8b 8d 00 07
	00 00		 mov	 rcx, QWORD PTR x$[rbp]
  000e5	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  000e8	89 85 84 02 00
	00		 mov	 DWORD PTR j4$[rbp], eax

; 76   :     j5 = x->input[5];

  000ee	b8 04 00 00 00	 mov	 eax, 4
  000f3	48 6b c0 05	 imul	 rax, rax, 5
  000f7	48 8b 8d 00 07
	00 00		 mov	 rcx, QWORD PTR x$[rbp]
  000fe	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  00101	89 85 a4 02 00
	00		 mov	 DWORD PTR j5$[rbp], eax

; 77   :     j6 = x->input[6];

  00107	b8 04 00 00 00	 mov	 eax, 4
  0010c	48 6b c0 06	 imul	 rax, rax, 6
  00110	48 8b 8d 00 07
	00 00		 mov	 rcx, QWORD PTR x$[rbp]
  00117	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  0011a	89 85 c4 02 00
	00		 mov	 DWORD PTR j6$[rbp], eax

; 78   :     j7 = x->input[7];

  00120	b8 04 00 00 00	 mov	 eax, 4
  00125	48 6b c0 07	 imul	 rax, rax, 7
  00129	48 8b 8d 00 07
	00 00		 mov	 rcx, QWORD PTR x$[rbp]
  00130	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  00133	89 85 e4 02 00
	00		 mov	 DWORD PTR j7$[rbp], eax

; 79   :     j8 = x->input[8];

  00139	b8 04 00 00 00	 mov	 eax, 4
  0013e	48 6b c0 08	 imul	 rax, rax, 8
  00142	48 8b 8d 00 07
	00 00		 mov	 rcx, QWORD PTR x$[rbp]
  00149	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  0014c	89 85 04 03 00
	00		 mov	 DWORD PTR j8$[rbp], eax

; 80   :     j9 = x->input[9];

  00152	b8 04 00 00 00	 mov	 eax, 4
  00157	48 6b c0 09	 imul	 rax, rax, 9
  0015b	48 8b 8d 00 07
	00 00		 mov	 rcx, QWORD PTR x$[rbp]
  00162	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  00165	89 85 24 03 00
	00		 mov	 DWORD PTR j9$[rbp], eax

; 81   :     j10 = x->input[10];

  0016b	b8 04 00 00 00	 mov	 eax, 4
  00170	48 6b c0 0a	 imul	 rax, rax, 10
  00174	48 8b 8d 00 07
	00 00		 mov	 rcx, QWORD PTR x$[rbp]
  0017b	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  0017e	89 85 44 03 00
	00		 mov	 DWORD PTR j10$[rbp], eax

; 82   :     j11 = x->input[11];

  00184	b8 04 00 00 00	 mov	 eax, 4
  00189	48 6b c0 0b	 imul	 rax, rax, 11
  0018d	48 8b 8d 00 07
	00 00		 mov	 rcx, QWORD PTR x$[rbp]
  00194	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  00197	89 85 64 03 00
	00		 mov	 DWORD PTR j11$[rbp], eax

; 83   :     j12 = x->input[12];

  0019d	b8 04 00 00 00	 mov	 eax, 4
  001a2	48 6b c0 0c	 imul	 rax, rax, 12
  001a6	48 8b 8d 00 07
	00 00		 mov	 rcx, QWORD PTR x$[rbp]
  001ad	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  001b0	89 85 84 03 00
	00		 mov	 DWORD PTR j12$[rbp], eax

; 84   :     j13 = x->input[13];

  001b6	b8 04 00 00 00	 mov	 eax, 4
  001bb	48 6b c0 0d	 imul	 rax, rax, 13
  001bf	48 8b 8d 00 07
	00 00		 mov	 rcx, QWORD PTR x$[rbp]
  001c6	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  001c9	89 85 a4 03 00
	00		 mov	 DWORD PTR j13$[rbp], eax

; 85   :     j14 = x->input[14];

  001cf	b8 04 00 00 00	 mov	 eax, 4
  001d4	48 6b c0 0e	 imul	 rax, rax, 14
  001d8	48 8b 8d 00 07
	00 00		 mov	 rcx, QWORD PTR x$[rbp]
  001df	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  001e2	89 85 c4 03 00
	00		 mov	 DWORD PTR j14$[rbp], eax

; 86   :     j15 = x->input[15];

  001e8	b8 04 00 00 00	 mov	 eax, 4
  001ed	48 6b c0 0f	 imul	 rax, rax, 15
  001f1	48 8b 8d 00 07
	00 00		 mov	 rcx, QWORD PTR x$[rbp]
  001f8	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  001fb	89 85 e4 03 00
	00		 mov	 DWORD PTR j15$[rbp], eax
$LN2@ECRYPT_enc:

; 87   : 
; 88   :     for (;;) {
; 89   :         if (bytes < 64) {

  00201	83 bd 18 07 00
	00 40		 cmp	 DWORD PTR bytes$[rbp], 64 ; 00000040H
  00208	73 74		 jae	 SHORT $LN15@ECRYPT_enc

; 90   :             for (i = 0; i < bytes; ++i) tmp[i] = m[i];

  0020a	c7 85 84 04 00
	00 00 00 00 00	 mov	 DWORD PTR i$[rbp], 0
  00214	eb 0e		 jmp	 SHORT $LN7@ECRYPT_enc
$LN5@ECRYPT_enc:
  00216	8b 85 84 04 00
	00		 mov	 eax, DWORD PTR i$[rbp]
  0021c	ff c0		 inc	 eax
  0021e	89 85 84 04 00
	00		 mov	 DWORD PTR i$[rbp], eax
$LN7@ECRYPT_enc:
  00224	8b 85 18 07 00
	00		 mov	 eax, DWORD PTR bytes$[rbp]
  0022a	39 85 84 04 00
	00		 cmp	 DWORD PTR i$[rbp], eax
  00230	73 22		 jae	 SHORT $LN6@ECRYPT_enc
  00232	48 63 85 84 04
	00 00		 movsxd	 rax, DWORD PTR i$[rbp]
  00239	48 63 8d 84 04
	00 00		 movsxd	 rcx, DWORD PTR i$[rbp]
  00240	48 8b 95 08 07
	00 00		 mov	 rdx, QWORD PTR m$[rbp]
  00247	0f b6 04 02	 movzx	 eax, BYTE PTR [rdx+rax]
  0024b	88 84 0d 30 04
	00 00		 mov	 BYTE PTR tmp$[rbp+rcx], al
  00252	eb c2		 jmp	 SHORT $LN5@ECRYPT_enc
$LN6@ECRYPT_enc:

; 91   :             m = tmp;

  00254	48 8d 85 30 04
	00 00		 lea	 rax, QWORD PTR tmp$[rbp]
  0025b	48 89 85 08 07
	00 00		 mov	 QWORD PTR m$[rbp], rax

; 92   :             ctarget = c;

  00262	48 8b 85 10 07
	00 00		 mov	 rax, QWORD PTR c$[rbp]
  00269	48 89 85 08 04
	00 00		 mov	 QWORD PTR ctarget$[rbp], rax

; 93   :             c = tmp;

  00270	48 8d 85 30 04
	00 00		 lea	 rax, QWORD PTR tmp$[rbp]
  00277	48 89 85 10 07
	00 00		 mov	 QWORD PTR c$[rbp], rax
$LN15@ECRYPT_enc:

; 94   :         }
; 95   :         x0 = j0;

  0027e	8b 85 04 02 00
	00		 mov	 eax, DWORD PTR j0$[rbp]
  00284	89 45 04	 mov	 DWORD PTR x0$[rbp], eax

; 96   :         x1 = j1;

  00287	8b 85 24 02 00
	00		 mov	 eax, DWORD PTR j1$[rbp]
  0028d	89 45 24	 mov	 DWORD PTR x1$[rbp], eax

; 97   :         x2 = j2;

  00290	8b 85 44 02 00
	00		 mov	 eax, DWORD PTR j2$[rbp]
  00296	89 45 44	 mov	 DWORD PTR x2$[rbp], eax

; 98   :         x3 = j3;

  00299	8b 85 64 02 00
	00		 mov	 eax, DWORD PTR j3$[rbp]
  0029f	89 45 64	 mov	 DWORD PTR x3$[rbp], eax

; 99   :         x4 = j4;

  002a2	8b 85 84 02 00
	00		 mov	 eax, DWORD PTR j4$[rbp]
  002a8	89 85 84 00 00
	00		 mov	 DWORD PTR x4$[rbp], eax

; 100  :         x5 = j5;

  002ae	8b 85 a4 02 00
	00		 mov	 eax, DWORD PTR j5$[rbp]
  002b4	89 85 a4 00 00
	00		 mov	 DWORD PTR x5$[rbp], eax

; 101  :         x6 = j6;

  002ba	8b 85 c4 02 00
	00		 mov	 eax, DWORD PTR j6$[rbp]
  002c0	89 85 c4 00 00
	00		 mov	 DWORD PTR x6$[rbp], eax

; 102  :         x7 = j7;

  002c6	8b 85 e4 02 00
	00		 mov	 eax, DWORD PTR j7$[rbp]
  002cc	89 85 e4 00 00
	00		 mov	 DWORD PTR x7$[rbp], eax

; 103  :         x8 = j8;

  002d2	8b 85 04 03 00
	00		 mov	 eax, DWORD PTR j8$[rbp]
  002d8	89 85 04 01 00
	00		 mov	 DWORD PTR x8$[rbp], eax

; 104  :         x9 = j9;

  002de	8b 85 24 03 00
	00		 mov	 eax, DWORD PTR j9$[rbp]
  002e4	89 85 24 01 00
	00		 mov	 DWORD PTR x9$[rbp], eax

; 105  :         x10 = j10;

  002ea	8b 85 44 03 00
	00		 mov	 eax, DWORD PTR j10$[rbp]
  002f0	89 85 44 01 00
	00		 mov	 DWORD PTR x10$[rbp], eax

; 106  :         x11 = j11;

  002f6	8b 85 64 03 00
	00		 mov	 eax, DWORD PTR j11$[rbp]
  002fc	89 85 64 01 00
	00		 mov	 DWORD PTR x11$[rbp], eax

; 107  :         x12 = j12;

  00302	8b 85 84 03 00
	00		 mov	 eax, DWORD PTR j12$[rbp]
  00308	89 85 84 01 00
	00		 mov	 DWORD PTR x12$[rbp], eax

; 108  :         x13 = j13;

  0030e	8b 85 a4 03 00
	00		 mov	 eax, DWORD PTR j13$[rbp]
  00314	89 85 a4 01 00
	00		 mov	 DWORD PTR x13$[rbp], eax

; 109  :         x14 = j14;

  0031a	8b 85 c4 03 00
	00		 mov	 eax, DWORD PTR j14$[rbp]
  00320	89 85 c4 01 00
	00		 mov	 DWORD PTR x14$[rbp], eax

; 110  :         x15 = j15;

  00326	8b 85 e4 03 00
	00		 mov	 eax, DWORD PTR j15$[rbp]
  0032c	89 85 e4 01 00
	00		 mov	 DWORD PTR x15$[rbp], eax

; 111  :         for (i = 8; i > 0; i -= 2) {

  00332	c7 85 84 04 00
	00 08 00 00 00	 mov	 DWORD PTR i$[rbp], 8
  0033c	eb 0f		 jmp	 SHORT $LN10@ECRYPT_enc
$LN8@ECRYPT_enc:
  0033e	8b 85 84 04 00
	00		 mov	 eax, DWORD PTR i$[rbp]
  00344	83 e8 02	 sub	 eax, 2
  00347	89 85 84 04 00
	00		 mov	 DWORD PTR i$[rbp], eax
$LN10@ECRYPT_enc:
  0034d	83 bd 84 04 00
	00 00		 cmp	 DWORD PTR i$[rbp], 0
  00354	0f 8e c5 07 00
	00		 jle	 $LN9@ECRYPT_enc

; 112  :             QUARTERROUND(x0, x4, x8, x12)

  0035a	8b 85 84 00 00
	00		 mov	 eax, DWORD PTR x4$[rbp]
  00360	8b 4d 04	 mov	 ecx, DWORD PTR x0$[rbp]
  00363	03 c8		 add	 ecx, eax
  00365	8b c1		 mov	 eax, ecx
  00367	89 45 04	 mov	 DWORD PTR x0$[rbp], eax
  0036a	8b 45 04	 mov	 eax, DWORD PTR x0$[rbp]
  0036d	8b 8d 84 01 00
	00		 mov	 ecx, DWORD PTR x12$[rbp]
  00373	33 c8		 xor	 ecx, eax
  00375	8b c1		 mov	 eax, ecx
  00377	c1 e0 10	 shl	 eax, 16
  0037a	8b 4d 04	 mov	 ecx, DWORD PTR x0$[rbp]
  0037d	8b 95 84 01 00
	00		 mov	 edx, DWORD PTR x12$[rbp]
  00383	33 d1		 xor	 edx, ecx
  00385	8b ca		 mov	 ecx, edx
  00387	c1 e9 10	 shr	 ecx, 16
  0038a	0b c1		 or	 eax, ecx
  0038c	89 85 84 01 00
	00		 mov	 DWORD PTR x12$[rbp], eax
  00392	8b 85 84 01 00
	00		 mov	 eax, DWORD PTR x12$[rbp]
  00398	8b 8d 04 01 00
	00		 mov	 ecx, DWORD PTR x8$[rbp]
  0039e	03 c8		 add	 ecx, eax
  003a0	8b c1		 mov	 eax, ecx
  003a2	89 85 04 01 00
	00		 mov	 DWORD PTR x8$[rbp], eax
  003a8	8b 85 04 01 00
	00		 mov	 eax, DWORD PTR x8$[rbp]
  003ae	8b 8d 84 00 00
	00		 mov	 ecx, DWORD PTR x4$[rbp]
  003b4	33 c8		 xor	 ecx, eax
  003b6	8b c1		 mov	 eax, ecx
  003b8	c1 e0 0c	 shl	 eax, 12
  003bb	8b 8d 04 01 00
	00		 mov	 ecx, DWORD PTR x8$[rbp]
  003c1	8b 95 84 00 00
	00		 mov	 edx, DWORD PTR x4$[rbp]
  003c7	33 d1		 xor	 edx, ecx
  003c9	8b ca		 mov	 ecx, edx
  003cb	c1 e9 14	 shr	 ecx, 20
  003ce	0b c1		 or	 eax, ecx
  003d0	89 85 84 00 00
	00		 mov	 DWORD PTR x4$[rbp], eax
  003d6	8b 85 84 00 00
	00		 mov	 eax, DWORD PTR x4$[rbp]
  003dc	8b 4d 04	 mov	 ecx, DWORD PTR x0$[rbp]
  003df	03 c8		 add	 ecx, eax
  003e1	8b c1		 mov	 eax, ecx
  003e3	89 45 04	 mov	 DWORD PTR x0$[rbp], eax
  003e6	8b 45 04	 mov	 eax, DWORD PTR x0$[rbp]
  003e9	8b 8d 84 01 00
	00		 mov	 ecx, DWORD PTR x12$[rbp]
  003ef	33 c8		 xor	 ecx, eax
  003f1	8b c1		 mov	 eax, ecx
  003f3	c1 e0 08	 shl	 eax, 8
  003f6	8b 4d 04	 mov	 ecx, DWORD PTR x0$[rbp]
  003f9	8b 95 84 01 00
	00		 mov	 edx, DWORD PTR x12$[rbp]
  003ff	33 d1		 xor	 edx, ecx
  00401	8b ca		 mov	 ecx, edx
  00403	c1 e9 18	 shr	 ecx, 24
  00406	0b c1		 or	 eax, ecx
  00408	89 85 84 01 00
	00		 mov	 DWORD PTR x12$[rbp], eax
  0040e	8b 85 84 01 00
	00		 mov	 eax, DWORD PTR x12$[rbp]
  00414	8b 8d 04 01 00
	00		 mov	 ecx, DWORD PTR x8$[rbp]
  0041a	03 c8		 add	 ecx, eax
  0041c	8b c1		 mov	 eax, ecx
  0041e	89 85 04 01 00
	00		 mov	 DWORD PTR x8$[rbp], eax
  00424	8b 85 04 01 00
	00		 mov	 eax, DWORD PTR x8$[rbp]
  0042a	8b 8d 84 00 00
	00		 mov	 ecx, DWORD PTR x4$[rbp]
  00430	33 c8		 xor	 ecx, eax
  00432	8b c1		 mov	 eax, ecx
  00434	c1 e0 07	 shl	 eax, 7
  00437	8b 8d 04 01 00
	00		 mov	 ecx, DWORD PTR x8$[rbp]
  0043d	8b 95 84 00 00
	00		 mov	 edx, DWORD PTR x4$[rbp]
  00443	33 d1		 xor	 edx, ecx
  00445	8b ca		 mov	 ecx, edx
  00447	c1 e9 19	 shr	 ecx, 25
  0044a	0b c1		 or	 eax, ecx
  0044c	89 85 84 00 00
	00		 mov	 DWORD PTR x4$[rbp], eax

; 113  :                 QUARTERROUND(x1, x5, x9, x13)

  00452	8b 85 a4 00 00
	00		 mov	 eax, DWORD PTR x5$[rbp]
  00458	8b 4d 24	 mov	 ecx, DWORD PTR x1$[rbp]
  0045b	03 c8		 add	 ecx, eax
  0045d	8b c1		 mov	 eax, ecx
  0045f	89 45 24	 mov	 DWORD PTR x1$[rbp], eax
  00462	8b 45 24	 mov	 eax, DWORD PTR x1$[rbp]
  00465	8b 8d a4 01 00
	00		 mov	 ecx, DWORD PTR x13$[rbp]
  0046b	33 c8		 xor	 ecx, eax
  0046d	8b c1		 mov	 eax, ecx
  0046f	c1 e0 10	 shl	 eax, 16
  00472	8b 4d 24	 mov	 ecx, DWORD PTR x1$[rbp]
  00475	8b 95 a4 01 00
	00		 mov	 edx, DWORD PTR x13$[rbp]
  0047b	33 d1		 xor	 edx, ecx
  0047d	8b ca		 mov	 ecx, edx
  0047f	c1 e9 10	 shr	 ecx, 16
  00482	0b c1		 or	 eax, ecx
  00484	89 85 a4 01 00
	00		 mov	 DWORD PTR x13$[rbp], eax
  0048a	8b 85 a4 01 00
	00		 mov	 eax, DWORD PTR x13$[rbp]
  00490	8b 8d 24 01 00
	00		 mov	 ecx, DWORD PTR x9$[rbp]
  00496	03 c8		 add	 ecx, eax
  00498	8b c1		 mov	 eax, ecx
  0049a	89 85 24 01 00
	00		 mov	 DWORD PTR x9$[rbp], eax
  004a0	8b 85 24 01 00
	00		 mov	 eax, DWORD PTR x9$[rbp]
  004a6	8b 8d a4 00 00
	00		 mov	 ecx, DWORD PTR x5$[rbp]
  004ac	33 c8		 xor	 ecx, eax
  004ae	8b c1		 mov	 eax, ecx
  004b0	c1 e0 0c	 shl	 eax, 12
  004b3	8b 8d 24 01 00
	00		 mov	 ecx, DWORD PTR x9$[rbp]
  004b9	8b 95 a4 00 00
	00		 mov	 edx, DWORD PTR x5$[rbp]
  004bf	33 d1		 xor	 edx, ecx
  004c1	8b ca		 mov	 ecx, edx
  004c3	c1 e9 14	 shr	 ecx, 20
  004c6	0b c1		 or	 eax, ecx
  004c8	89 85 a4 00 00
	00		 mov	 DWORD PTR x5$[rbp], eax
  004ce	8b 85 a4 00 00
	00		 mov	 eax, DWORD PTR x5$[rbp]
  004d4	8b 4d 24	 mov	 ecx, DWORD PTR x1$[rbp]
  004d7	03 c8		 add	 ecx, eax
  004d9	8b c1		 mov	 eax, ecx
  004db	89 45 24	 mov	 DWORD PTR x1$[rbp], eax
  004de	8b 45 24	 mov	 eax, DWORD PTR x1$[rbp]
  004e1	8b 8d a4 01 00
	00		 mov	 ecx, DWORD PTR x13$[rbp]
  004e7	33 c8		 xor	 ecx, eax
  004e9	8b c1		 mov	 eax, ecx
  004eb	c1 e0 08	 shl	 eax, 8
  004ee	8b 4d 24	 mov	 ecx, DWORD PTR x1$[rbp]
  004f1	8b 95 a4 01 00
	00		 mov	 edx, DWORD PTR x13$[rbp]
  004f7	33 d1		 xor	 edx, ecx
  004f9	8b ca		 mov	 ecx, edx
  004fb	c1 e9 18	 shr	 ecx, 24
  004fe	0b c1		 or	 eax, ecx
  00500	89 85 a4 01 00
	00		 mov	 DWORD PTR x13$[rbp], eax
  00506	8b 85 a4 01 00
	00		 mov	 eax, DWORD PTR x13$[rbp]
  0050c	8b 8d 24 01 00
	00		 mov	 ecx, DWORD PTR x9$[rbp]
  00512	03 c8		 add	 ecx, eax
  00514	8b c1		 mov	 eax, ecx
  00516	89 85 24 01 00
	00		 mov	 DWORD PTR x9$[rbp], eax
  0051c	8b 85 24 01 00
	00		 mov	 eax, DWORD PTR x9$[rbp]
  00522	8b 8d a4 00 00
	00		 mov	 ecx, DWORD PTR x5$[rbp]
  00528	33 c8		 xor	 ecx, eax
  0052a	8b c1		 mov	 eax, ecx
  0052c	c1 e0 07	 shl	 eax, 7
  0052f	8b 8d 24 01 00
	00		 mov	 ecx, DWORD PTR x9$[rbp]
  00535	8b 95 a4 00 00
	00		 mov	 edx, DWORD PTR x5$[rbp]
  0053b	33 d1		 xor	 edx, ecx
  0053d	8b ca		 mov	 ecx, edx
  0053f	c1 e9 19	 shr	 ecx, 25
  00542	0b c1		 or	 eax, ecx
  00544	89 85 a4 00 00
	00		 mov	 DWORD PTR x5$[rbp], eax

; 114  :                 QUARTERROUND(x2, x6, x10, x14)

  0054a	8b 85 c4 00 00
	00		 mov	 eax, DWORD PTR x6$[rbp]
  00550	8b 4d 44	 mov	 ecx, DWORD PTR x2$[rbp]
  00553	03 c8		 add	 ecx, eax
  00555	8b c1		 mov	 eax, ecx
  00557	89 45 44	 mov	 DWORD PTR x2$[rbp], eax
  0055a	8b 45 44	 mov	 eax, DWORD PTR x2$[rbp]
  0055d	8b 8d c4 01 00
	00		 mov	 ecx, DWORD PTR x14$[rbp]
  00563	33 c8		 xor	 ecx, eax
  00565	8b c1		 mov	 eax, ecx
  00567	c1 e0 10	 shl	 eax, 16
  0056a	8b 4d 44	 mov	 ecx, DWORD PTR x2$[rbp]
  0056d	8b 95 c4 01 00
	00		 mov	 edx, DWORD PTR x14$[rbp]
  00573	33 d1		 xor	 edx, ecx
  00575	8b ca		 mov	 ecx, edx
  00577	c1 e9 10	 shr	 ecx, 16
  0057a	0b c1		 or	 eax, ecx
  0057c	89 85 c4 01 00
	00		 mov	 DWORD PTR x14$[rbp], eax
  00582	8b 85 c4 01 00
	00		 mov	 eax, DWORD PTR x14$[rbp]
  00588	8b 8d 44 01 00
	00		 mov	 ecx, DWORD PTR x10$[rbp]
  0058e	03 c8		 add	 ecx, eax
  00590	8b c1		 mov	 eax, ecx
  00592	89 85 44 01 00
	00		 mov	 DWORD PTR x10$[rbp], eax
  00598	8b 85 44 01 00
	00		 mov	 eax, DWORD PTR x10$[rbp]
  0059e	8b 8d c4 00 00
	00		 mov	 ecx, DWORD PTR x6$[rbp]
  005a4	33 c8		 xor	 ecx, eax
  005a6	8b c1		 mov	 eax, ecx
  005a8	c1 e0 0c	 shl	 eax, 12
  005ab	8b 8d 44 01 00
	00		 mov	 ecx, DWORD PTR x10$[rbp]
  005b1	8b 95 c4 00 00
	00		 mov	 edx, DWORD PTR x6$[rbp]
  005b7	33 d1		 xor	 edx, ecx
  005b9	8b ca		 mov	 ecx, edx
  005bb	c1 e9 14	 shr	 ecx, 20
  005be	0b c1		 or	 eax, ecx
  005c0	89 85 c4 00 00
	00		 mov	 DWORD PTR x6$[rbp], eax
  005c6	8b 85 c4 00 00
	00		 mov	 eax, DWORD PTR x6$[rbp]
  005cc	8b 4d 44	 mov	 ecx, DWORD PTR x2$[rbp]
  005cf	03 c8		 add	 ecx, eax
  005d1	8b c1		 mov	 eax, ecx
  005d3	89 45 44	 mov	 DWORD PTR x2$[rbp], eax
  005d6	8b 45 44	 mov	 eax, DWORD PTR x2$[rbp]
  005d9	8b 8d c4 01 00
	00		 mov	 ecx, DWORD PTR x14$[rbp]
  005df	33 c8		 xor	 ecx, eax
  005e1	8b c1		 mov	 eax, ecx
  005e3	c1 e0 08	 shl	 eax, 8
  005e6	8b 4d 44	 mov	 ecx, DWORD PTR x2$[rbp]
  005e9	8b 95 c4 01 00
	00		 mov	 edx, DWORD PTR x14$[rbp]
  005ef	33 d1		 xor	 edx, ecx
  005f1	8b ca		 mov	 ecx, edx
  005f3	c1 e9 18	 shr	 ecx, 24
  005f6	0b c1		 or	 eax, ecx
  005f8	89 85 c4 01 00
	00		 mov	 DWORD PTR x14$[rbp], eax
  005fe	8b 85 c4 01 00
	00		 mov	 eax, DWORD PTR x14$[rbp]
  00604	8b 8d 44 01 00
	00		 mov	 ecx, DWORD PTR x10$[rbp]
  0060a	03 c8		 add	 ecx, eax
  0060c	8b c1		 mov	 eax, ecx
  0060e	89 85 44 01 00
	00		 mov	 DWORD PTR x10$[rbp], eax
  00614	8b 85 44 01 00
	00		 mov	 eax, DWORD PTR x10$[rbp]
  0061a	8b 8d c4 00 00
	00		 mov	 ecx, DWORD PTR x6$[rbp]
  00620	33 c8		 xor	 ecx, eax
  00622	8b c1		 mov	 eax, ecx
  00624	c1 e0 07	 shl	 eax, 7
  00627	8b 8d 44 01 00
	00		 mov	 ecx, DWORD PTR x10$[rbp]
  0062d	8b 95 c4 00 00
	00		 mov	 edx, DWORD PTR x6$[rbp]
  00633	33 d1		 xor	 edx, ecx
  00635	8b ca		 mov	 ecx, edx
  00637	c1 e9 19	 shr	 ecx, 25
  0063a	0b c1		 or	 eax, ecx
  0063c	89 85 c4 00 00
	00		 mov	 DWORD PTR x6$[rbp], eax

; 115  :                 QUARTERROUND(x3, x7, x11, x15)

  00642	8b 85 e4 00 00
	00		 mov	 eax, DWORD PTR x7$[rbp]
  00648	8b 4d 64	 mov	 ecx, DWORD PTR x3$[rbp]
  0064b	03 c8		 add	 ecx, eax
  0064d	8b c1		 mov	 eax, ecx
  0064f	89 45 64	 mov	 DWORD PTR x3$[rbp], eax
  00652	8b 45 64	 mov	 eax, DWORD PTR x3$[rbp]
  00655	8b 8d e4 01 00
	00		 mov	 ecx, DWORD PTR x15$[rbp]
  0065b	33 c8		 xor	 ecx, eax
  0065d	8b c1		 mov	 eax, ecx
  0065f	c1 e0 10	 shl	 eax, 16
  00662	8b 4d 64	 mov	 ecx, DWORD PTR x3$[rbp]
  00665	8b 95 e4 01 00
	00		 mov	 edx, DWORD PTR x15$[rbp]
  0066b	33 d1		 xor	 edx, ecx
  0066d	8b ca		 mov	 ecx, edx
  0066f	c1 e9 10	 shr	 ecx, 16
  00672	0b c1		 or	 eax, ecx
  00674	89 85 e4 01 00
	00		 mov	 DWORD PTR x15$[rbp], eax
  0067a	8b 85 e4 01 00
	00		 mov	 eax, DWORD PTR x15$[rbp]
  00680	8b 8d 64 01 00
	00		 mov	 ecx, DWORD PTR x11$[rbp]
  00686	03 c8		 add	 ecx, eax
  00688	8b c1		 mov	 eax, ecx
  0068a	89 85 64 01 00
	00		 mov	 DWORD PTR x11$[rbp], eax
  00690	8b 85 64 01 00
	00		 mov	 eax, DWORD PTR x11$[rbp]
  00696	8b 8d e4 00 00
	00		 mov	 ecx, DWORD PTR x7$[rbp]
  0069c	33 c8		 xor	 ecx, eax
  0069e	8b c1		 mov	 eax, ecx
  006a0	c1 e0 0c	 shl	 eax, 12
  006a3	8b 8d 64 01 00
	00		 mov	 ecx, DWORD PTR x11$[rbp]
  006a9	8b 95 e4 00 00
	00		 mov	 edx, DWORD PTR x7$[rbp]
  006af	33 d1		 xor	 edx, ecx
  006b1	8b ca		 mov	 ecx, edx
  006b3	c1 e9 14	 shr	 ecx, 20
  006b6	0b c1		 or	 eax, ecx
  006b8	89 85 e4 00 00
	00		 mov	 DWORD PTR x7$[rbp], eax
  006be	8b 85 e4 00 00
	00		 mov	 eax, DWORD PTR x7$[rbp]
  006c4	8b 4d 64	 mov	 ecx, DWORD PTR x3$[rbp]
  006c7	03 c8		 add	 ecx, eax
  006c9	8b c1		 mov	 eax, ecx
  006cb	89 45 64	 mov	 DWORD PTR x3$[rbp], eax
  006ce	8b 45 64	 mov	 eax, DWORD PTR x3$[rbp]
  006d1	8b 8d e4 01 00
	00		 mov	 ecx, DWORD PTR x15$[rbp]
  006d7	33 c8		 xor	 ecx, eax
  006d9	8b c1		 mov	 eax, ecx
  006db	c1 e0 08	 shl	 eax, 8
  006de	8b 4d 64	 mov	 ecx, DWORD PTR x3$[rbp]
  006e1	8b 95 e4 01 00
	00		 mov	 edx, DWORD PTR x15$[rbp]
  006e7	33 d1		 xor	 edx, ecx
  006e9	8b ca		 mov	 ecx, edx
  006eb	c1 e9 18	 shr	 ecx, 24
  006ee	0b c1		 or	 eax, ecx
  006f0	89 85 e4 01 00
	00		 mov	 DWORD PTR x15$[rbp], eax
  006f6	8b 85 e4 01 00
	00		 mov	 eax, DWORD PTR x15$[rbp]
  006fc	8b 8d 64 01 00
	00		 mov	 ecx, DWORD PTR x11$[rbp]
  00702	03 c8		 add	 ecx, eax
  00704	8b c1		 mov	 eax, ecx
  00706	89 85 64 01 00
	00		 mov	 DWORD PTR x11$[rbp], eax
  0070c	8b 85 64 01 00
	00		 mov	 eax, DWORD PTR x11$[rbp]
  00712	8b 8d e4 00 00
	00		 mov	 ecx, DWORD PTR x7$[rbp]
  00718	33 c8		 xor	 ecx, eax
  0071a	8b c1		 mov	 eax, ecx
  0071c	c1 e0 07	 shl	 eax, 7
  0071f	8b 8d 64 01 00
	00		 mov	 ecx, DWORD PTR x11$[rbp]
  00725	8b 95 e4 00 00
	00		 mov	 edx, DWORD PTR x7$[rbp]
  0072b	33 d1		 xor	 edx, ecx
  0072d	8b ca		 mov	 ecx, edx
  0072f	c1 e9 19	 shr	 ecx, 25
  00732	0b c1		 or	 eax, ecx
  00734	89 85 e4 00 00
	00		 mov	 DWORD PTR x7$[rbp], eax

; 116  :                 QUARTERROUND(x0, x5, x10, x15)

  0073a	8b 85 a4 00 00
	00		 mov	 eax, DWORD PTR x5$[rbp]
  00740	8b 4d 04	 mov	 ecx, DWORD PTR x0$[rbp]
  00743	03 c8		 add	 ecx, eax
  00745	8b c1		 mov	 eax, ecx
  00747	89 45 04	 mov	 DWORD PTR x0$[rbp], eax
  0074a	8b 45 04	 mov	 eax, DWORD PTR x0$[rbp]
  0074d	8b 8d e4 01 00
	00		 mov	 ecx, DWORD PTR x15$[rbp]
  00753	33 c8		 xor	 ecx, eax
  00755	8b c1		 mov	 eax, ecx
  00757	c1 e0 10	 shl	 eax, 16
  0075a	8b 4d 04	 mov	 ecx, DWORD PTR x0$[rbp]
  0075d	8b 95 e4 01 00
	00		 mov	 edx, DWORD PTR x15$[rbp]
  00763	33 d1		 xor	 edx, ecx
  00765	8b ca		 mov	 ecx, edx
  00767	c1 e9 10	 shr	 ecx, 16
  0076a	0b c1		 or	 eax, ecx
  0076c	89 85 e4 01 00
	00		 mov	 DWORD PTR x15$[rbp], eax
  00772	8b 85 e4 01 00
	00		 mov	 eax, DWORD PTR x15$[rbp]
  00778	8b 8d 44 01 00
	00		 mov	 ecx, DWORD PTR x10$[rbp]
  0077e	03 c8		 add	 ecx, eax
  00780	8b c1		 mov	 eax, ecx
  00782	89 85 44 01 00
	00		 mov	 DWORD PTR x10$[rbp], eax
  00788	8b 85 44 01 00
	00		 mov	 eax, DWORD PTR x10$[rbp]
  0078e	8b 8d a4 00 00
	00		 mov	 ecx, DWORD PTR x5$[rbp]
  00794	33 c8		 xor	 ecx, eax
  00796	8b c1		 mov	 eax, ecx
  00798	c1 e0 0c	 shl	 eax, 12
  0079b	8b 8d 44 01 00
	00		 mov	 ecx, DWORD PTR x10$[rbp]
  007a1	8b 95 a4 00 00
	00		 mov	 edx, DWORD PTR x5$[rbp]
  007a7	33 d1		 xor	 edx, ecx
  007a9	8b ca		 mov	 ecx, edx
  007ab	c1 e9 14	 shr	 ecx, 20
  007ae	0b c1		 or	 eax, ecx
  007b0	89 85 a4 00 00
	00		 mov	 DWORD PTR x5$[rbp], eax
  007b6	8b 85 a4 00 00
	00		 mov	 eax, DWORD PTR x5$[rbp]
  007bc	8b 4d 04	 mov	 ecx, DWORD PTR x0$[rbp]
  007bf	03 c8		 add	 ecx, eax
  007c1	8b c1		 mov	 eax, ecx
  007c3	89 45 04	 mov	 DWORD PTR x0$[rbp], eax
  007c6	8b 45 04	 mov	 eax, DWORD PTR x0$[rbp]
  007c9	8b 8d e4 01 00
	00		 mov	 ecx, DWORD PTR x15$[rbp]
  007cf	33 c8		 xor	 ecx, eax
  007d1	8b c1		 mov	 eax, ecx
  007d3	c1 e0 08	 shl	 eax, 8
  007d6	8b 4d 04	 mov	 ecx, DWORD PTR x0$[rbp]
  007d9	8b 95 e4 01 00
	00		 mov	 edx, DWORD PTR x15$[rbp]
  007df	33 d1		 xor	 edx, ecx
  007e1	8b ca		 mov	 ecx, edx
  007e3	c1 e9 18	 shr	 ecx, 24
  007e6	0b c1		 or	 eax, ecx
  007e8	89 85 e4 01 00
	00		 mov	 DWORD PTR x15$[rbp], eax
  007ee	8b 85 e4 01 00
	00		 mov	 eax, DWORD PTR x15$[rbp]
  007f4	8b 8d 44 01 00
	00		 mov	 ecx, DWORD PTR x10$[rbp]
  007fa	03 c8		 add	 ecx, eax
  007fc	8b c1		 mov	 eax, ecx
  007fe	89 85 44 01 00
	00		 mov	 DWORD PTR x10$[rbp], eax
  00804	8b 85 44 01 00
	00		 mov	 eax, DWORD PTR x10$[rbp]
  0080a	8b 8d a4 00 00
	00		 mov	 ecx, DWORD PTR x5$[rbp]
  00810	33 c8		 xor	 ecx, eax
  00812	8b c1		 mov	 eax, ecx
  00814	c1 e0 07	 shl	 eax, 7
  00817	8b 8d 44 01 00
	00		 mov	 ecx, DWORD PTR x10$[rbp]
  0081d	8b 95 a4 00 00
	00		 mov	 edx, DWORD PTR x5$[rbp]
  00823	33 d1		 xor	 edx, ecx
  00825	8b ca		 mov	 ecx, edx
  00827	c1 e9 19	 shr	 ecx, 25
  0082a	0b c1		 or	 eax, ecx
  0082c	89 85 a4 00 00
	00		 mov	 DWORD PTR x5$[rbp], eax

; 117  :                 QUARTERROUND(x1, x6, x11, x12)

  00832	8b 85 c4 00 00
	00		 mov	 eax, DWORD PTR x6$[rbp]
  00838	8b 4d 24	 mov	 ecx, DWORD PTR x1$[rbp]
  0083b	03 c8		 add	 ecx, eax
  0083d	8b c1		 mov	 eax, ecx
  0083f	89 45 24	 mov	 DWORD PTR x1$[rbp], eax
  00842	8b 45 24	 mov	 eax, DWORD PTR x1$[rbp]
  00845	8b 8d 84 01 00
	00		 mov	 ecx, DWORD PTR x12$[rbp]
  0084b	33 c8		 xor	 ecx, eax
  0084d	8b c1		 mov	 eax, ecx
  0084f	c1 e0 10	 shl	 eax, 16
  00852	8b 4d 24	 mov	 ecx, DWORD PTR x1$[rbp]
  00855	8b 95 84 01 00
	00		 mov	 edx, DWORD PTR x12$[rbp]
  0085b	33 d1		 xor	 edx, ecx
  0085d	8b ca		 mov	 ecx, edx
  0085f	c1 e9 10	 shr	 ecx, 16
  00862	0b c1		 or	 eax, ecx
  00864	89 85 84 01 00
	00		 mov	 DWORD PTR x12$[rbp], eax
  0086a	8b 85 84 01 00
	00		 mov	 eax, DWORD PTR x12$[rbp]
  00870	8b 8d 64 01 00
	00		 mov	 ecx, DWORD PTR x11$[rbp]
  00876	03 c8		 add	 ecx, eax
  00878	8b c1		 mov	 eax, ecx
  0087a	89 85 64 01 00
	00		 mov	 DWORD PTR x11$[rbp], eax
  00880	8b 85 64 01 00
	00		 mov	 eax, DWORD PTR x11$[rbp]
  00886	8b 8d c4 00 00
	00		 mov	 ecx, DWORD PTR x6$[rbp]
  0088c	33 c8		 xor	 ecx, eax
  0088e	8b c1		 mov	 eax, ecx
  00890	c1 e0 0c	 shl	 eax, 12
  00893	8b 8d 64 01 00
	00		 mov	 ecx, DWORD PTR x11$[rbp]
  00899	8b 95 c4 00 00
	00		 mov	 edx, DWORD PTR x6$[rbp]
  0089f	33 d1		 xor	 edx, ecx
  008a1	8b ca		 mov	 ecx, edx
  008a3	c1 e9 14	 shr	 ecx, 20
  008a6	0b c1		 or	 eax, ecx
  008a8	89 85 c4 00 00
	00		 mov	 DWORD PTR x6$[rbp], eax
  008ae	8b 85 c4 00 00
	00		 mov	 eax, DWORD PTR x6$[rbp]
  008b4	8b 4d 24	 mov	 ecx, DWORD PTR x1$[rbp]
  008b7	03 c8		 add	 ecx, eax
  008b9	8b c1		 mov	 eax, ecx
  008bb	89 45 24	 mov	 DWORD PTR x1$[rbp], eax
  008be	8b 45 24	 mov	 eax, DWORD PTR x1$[rbp]
  008c1	8b 8d 84 01 00
	00		 mov	 ecx, DWORD PTR x12$[rbp]
  008c7	33 c8		 xor	 ecx, eax
  008c9	8b c1		 mov	 eax, ecx
  008cb	c1 e0 08	 shl	 eax, 8
  008ce	8b 4d 24	 mov	 ecx, DWORD PTR x1$[rbp]
  008d1	8b 95 84 01 00
	00		 mov	 edx, DWORD PTR x12$[rbp]
  008d7	33 d1		 xor	 edx, ecx
  008d9	8b ca		 mov	 ecx, edx
  008db	c1 e9 18	 shr	 ecx, 24
  008de	0b c1		 or	 eax, ecx
  008e0	89 85 84 01 00
	00		 mov	 DWORD PTR x12$[rbp], eax
  008e6	8b 85 84 01 00
	00		 mov	 eax, DWORD PTR x12$[rbp]
  008ec	8b 8d 64 01 00
	00		 mov	 ecx, DWORD PTR x11$[rbp]
  008f2	03 c8		 add	 ecx, eax
  008f4	8b c1		 mov	 eax, ecx
  008f6	89 85 64 01 00
	00		 mov	 DWORD PTR x11$[rbp], eax
  008fc	8b 85 64 01 00
	00		 mov	 eax, DWORD PTR x11$[rbp]
  00902	8b 8d c4 00 00
	00		 mov	 ecx, DWORD PTR x6$[rbp]
  00908	33 c8		 xor	 ecx, eax
  0090a	8b c1		 mov	 eax, ecx
  0090c	c1 e0 07	 shl	 eax, 7
  0090f	8b 8d 64 01 00
	00		 mov	 ecx, DWORD PTR x11$[rbp]
  00915	8b 95 c4 00 00
	00		 mov	 edx, DWORD PTR x6$[rbp]
  0091b	33 d1		 xor	 edx, ecx
  0091d	8b ca		 mov	 ecx, edx
  0091f	c1 e9 19	 shr	 ecx, 25
  00922	0b c1		 or	 eax, ecx
  00924	89 85 c4 00 00
	00		 mov	 DWORD PTR x6$[rbp], eax

; 118  :                 QUARTERROUND(x2, x7, x8, x13)

  0092a	8b 85 e4 00 00
	00		 mov	 eax, DWORD PTR x7$[rbp]
  00930	8b 4d 44	 mov	 ecx, DWORD PTR x2$[rbp]
  00933	03 c8		 add	 ecx, eax
  00935	8b c1		 mov	 eax, ecx
  00937	89 45 44	 mov	 DWORD PTR x2$[rbp], eax
  0093a	8b 45 44	 mov	 eax, DWORD PTR x2$[rbp]
  0093d	8b 8d a4 01 00
	00		 mov	 ecx, DWORD PTR x13$[rbp]
  00943	33 c8		 xor	 ecx, eax
  00945	8b c1		 mov	 eax, ecx
  00947	c1 e0 10	 shl	 eax, 16
  0094a	8b 4d 44	 mov	 ecx, DWORD PTR x2$[rbp]
  0094d	8b 95 a4 01 00
	00		 mov	 edx, DWORD PTR x13$[rbp]
  00953	33 d1		 xor	 edx, ecx
  00955	8b ca		 mov	 ecx, edx
  00957	c1 e9 10	 shr	 ecx, 16
  0095a	0b c1		 or	 eax, ecx
  0095c	89 85 a4 01 00
	00		 mov	 DWORD PTR x13$[rbp], eax
  00962	8b 85 a4 01 00
	00		 mov	 eax, DWORD PTR x13$[rbp]
  00968	8b 8d 04 01 00
	00		 mov	 ecx, DWORD PTR x8$[rbp]
  0096e	03 c8		 add	 ecx, eax
  00970	8b c1		 mov	 eax, ecx
  00972	89 85 04 01 00
	00		 mov	 DWORD PTR x8$[rbp], eax
  00978	8b 85 04 01 00
	00		 mov	 eax, DWORD PTR x8$[rbp]
  0097e	8b 8d e4 00 00
	00		 mov	 ecx, DWORD PTR x7$[rbp]
  00984	33 c8		 xor	 ecx, eax
  00986	8b c1		 mov	 eax, ecx
  00988	c1 e0 0c	 shl	 eax, 12
  0098b	8b 8d 04 01 00
	00		 mov	 ecx, DWORD PTR x8$[rbp]
  00991	8b 95 e4 00 00
	00		 mov	 edx, DWORD PTR x7$[rbp]
  00997	33 d1		 xor	 edx, ecx
  00999	8b ca		 mov	 ecx, edx
  0099b	c1 e9 14	 shr	 ecx, 20
  0099e	0b c1		 or	 eax, ecx
  009a0	89 85 e4 00 00
	00		 mov	 DWORD PTR x7$[rbp], eax
  009a6	8b 85 e4 00 00
	00		 mov	 eax, DWORD PTR x7$[rbp]
  009ac	8b 4d 44	 mov	 ecx, DWORD PTR x2$[rbp]
  009af	03 c8		 add	 ecx, eax
  009b1	8b c1		 mov	 eax, ecx
  009b3	89 45 44	 mov	 DWORD PTR x2$[rbp], eax
  009b6	8b 45 44	 mov	 eax, DWORD PTR x2$[rbp]
  009b9	8b 8d a4 01 00
	00		 mov	 ecx, DWORD PTR x13$[rbp]
  009bf	33 c8		 xor	 ecx, eax
  009c1	8b c1		 mov	 eax, ecx
  009c3	c1 e0 08	 shl	 eax, 8
  009c6	8b 4d 44	 mov	 ecx, DWORD PTR x2$[rbp]
  009c9	8b 95 a4 01 00
	00		 mov	 edx, DWORD PTR x13$[rbp]
  009cf	33 d1		 xor	 edx, ecx
  009d1	8b ca		 mov	 ecx, edx
  009d3	c1 e9 18	 shr	 ecx, 24
  009d6	0b c1		 or	 eax, ecx
  009d8	89 85 a4 01 00
	00		 mov	 DWORD PTR x13$[rbp], eax
  009de	8b 85 a4 01 00
	00		 mov	 eax, DWORD PTR x13$[rbp]
  009e4	8b 8d 04 01 00
	00		 mov	 ecx, DWORD PTR x8$[rbp]
  009ea	03 c8		 add	 ecx, eax
  009ec	8b c1		 mov	 eax, ecx
  009ee	89 85 04 01 00
	00		 mov	 DWORD PTR x8$[rbp], eax
  009f4	8b 85 04 01 00
	00		 mov	 eax, DWORD PTR x8$[rbp]
  009fa	8b 8d e4 00 00
	00		 mov	 ecx, DWORD PTR x7$[rbp]
  00a00	33 c8		 xor	 ecx, eax
  00a02	8b c1		 mov	 eax, ecx
  00a04	c1 e0 07	 shl	 eax, 7
  00a07	8b 8d 04 01 00
	00		 mov	 ecx, DWORD PTR x8$[rbp]
  00a0d	8b 95 e4 00 00
	00		 mov	 edx, DWORD PTR x7$[rbp]
  00a13	33 d1		 xor	 edx, ecx
  00a15	8b ca		 mov	 ecx, edx
  00a17	c1 e9 19	 shr	 ecx, 25
  00a1a	0b c1		 or	 eax, ecx
  00a1c	89 85 e4 00 00
	00		 mov	 DWORD PTR x7$[rbp], eax

; 119  :                 QUARTERROUND(x3, x4, x9, x14)

  00a22	8b 85 84 00 00
	00		 mov	 eax, DWORD PTR x4$[rbp]
  00a28	8b 4d 64	 mov	 ecx, DWORD PTR x3$[rbp]
  00a2b	03 c8		 add	 ecx, eax
  00a2d	8b c1		 mov	 eax, ecx
  00a2f	89 45 64	 mov	 DWORD PTR x3$[rbp], eax
  00a32	8b 45 64	 mov	 eax, DWORD PTR x3$[rbp]
  00a35	8b 8d c4 01 00
	00		 mov	 ecx, DWORD PTR x14$[rbp]
  00a3b	33 c8		 xor	 ecx, eax
  00a3d	8b c1		 mov	 eax, ecx
  00a3f	c1 e0 10	 shl	 eax, 16
  00a42	8b 4d 64	 mov	 ecx, DWORD PTR x3$[rbp]
  00a45	8b 95 c4 01 00
	00		 mov	 edx, DWORD PTR x14$[rbp]
  00a4b	33 d1		 xor	 edx, ecx
  00a4d	8b ca		 mov	 ecx, edx
  00a4f	c1 e9 10	 shr	 ecx, 16
  00a52	0b c1		 or	 eax, ecx
  00a54	89 85 c4 01 00
	00		 mov	 DWORD PTR x14$[rbp], eax
  00a5a	8b 85 c4 01 00
	00		 mov	 eax, DWORD PTR x14$[rbp]
  00a60	8b 8d 24 01 00
	00		 mov	 ecx, DWORD PTR x9$[rbp]
  00a66	03 c8		 add	 ecx, eax
  00a68	8b c1		 mov	 eax, ecx
  00a6a	89 85 24 01 00
	00		 mov	 DWORD PTR x9$[rbp], eax
  00a70	8b 85 24 01 00
	00		 mov	 eax, DWORD PTR x9$[rbp]
  00a76	8b 8d 84 00 00
	00		 mov	 ecx, DWORD PTR x4$[rbp]
  00a7c	33 c8		 xor	 ecx, eax
  00a7e	8b c1		 mov	 eax, ecx
  00a80	c1 e0 0c	 shl	 eax, 12
  00a83	8b 8d 24 01 00
	00		 mov	 ecx, DWORD PTR x9$[rbp]
  00a89	8b 95 84 00 00
	00		 mov	 edx, DWORD PTR x4$[rbp]
  00a8f	33 d1		 xor	 edx, ecx
  00a91	8b ca		 mov	 ecx, edx
  00a93	c1 e9 14	 shr	 ecx, 20
  00a96	0b c1		 or	 eax, ecx
  00a98	89 85 84 00 00
	00		 mov	 DWORD PTR x4$[rbp], eax
  00a9e	8b 85 84 00 00
	00		 mov	 eax, DWORD PTR x4$[rbp]
  00aa4	8b 4d 64	 mov	 ecx, DWORD PTR x3$[rbp]
  00aa7	03 c8		 add	 ecx, eax
  00aa9	8b c1		 mov	 eax, ecx
  00aab	89 45 64	 mov	 DWORD PTR x3$[rbp], eax
  00aae	8b 45 64	 mov	 eax, DWORD PTR x3$[rbp]
  00ab1	8b 8d c4 01 00
	00		 mov	 ecx, DWORD PTR x14$[rbp]
  00ab7	33 c8		 xor	 ecx, eax
  00ab9	8b c1		 mov	 eax, ecx
  00abb	c1 e0 08	 shl	 eax, 8
  00abe	8b 4d 64	 mov	 ecx, DWORD PTR x3$[rbp]
  00ac1	8b 95 c4 01 00
	00		 mov	 edx, DWORD PTR x14$[rbp]
  00ac7	33 d1		 xor	 edx, ecx
  00ac9	8b ca		 mov	 ecx, edx
  00acb	c1 e9 18	 shr	 ecx, 24
  00ace	0b c1		 or	 eax, ecx
  00ad0	89 85 c4 01 00
	00		 mov	 DWORD PTR x14$[rbp], eax
  00ad6	8b 85 c4 01 00
	00		 mov	 eax, DWORD PTR x14$[rbp]
  00adc	8b 8d 24 01 00
	00		 mov	 ecx, DWORD PTR x9$[rbp]
  00ae2	03 c8		 add	 ecx, eax
  00ae4	8b c1		 mov	 eax, ecx
  00ae6	89 85 24 01 00
	00		 mov	 DWORD PTR x9$[rbp], eax
  00aec	8b 85 24 01 00
	00		 mov	 eax, DWORD PTR x9$[rbp]
  00af2	8b 8d 84 00 00
	00		 mov	 ecx, DWORD PTR x4$[rbp]
  00af8	33 c8		 xor	 ecx, eax
  00afa	8b c1		 mov	 eax, ecx
  00afc	c1 e0 07	 shl	 eax, 7
  00aff	8b 8d 24 01 00
	00		 mov	 ecx, DWORD PTR x9$[rbp]
  00b05	8b 95 84 00 00
	00		 mov	 edx, DWORD PTR x4$[rbp]
  00b0b	33 d1		 xor	 edx, ecx
  00b0d	8b ca		 mov	 ecx, edx
  00b0f	c1 e9 19	 shr	 ecx, 25
  00b12	0b c1		 or	 eax, ecx
  00b14	89 85 84 00 00
	00		 mov	 DWORD PTR x4$[rbp], eax

; 120  :         }

  00b1a	e9 1f f8 ff ff	 jmp	 $LN8@ECRYPT_enc
$LN9@ECRYPT_enc:

; 121  :         x0 = PLUS(x0, j0);

  00b1f	8b 85 04 02 00
	00		 mov	 eax, DWORD PTR j0$[rbp]
  00b25	8b 4d 04	 mov	 ecx, DWORD PTR x0$[rbp]
  00b28	03 c8		 add	 ecx, eax
  00b2a	8b c1		 mov	 eax, ecx
  00b2c	89 45 04	 mov	 DWORD PTR x0$[rbp], eax

; 122  :         x1 = PLUS(x1, j1);

  00b2f	8b 85 24 02 00
	00		 mov	 eax, DWORD PTR j1$[rbp]
  00b35	8b 4d 24	 mov	 ecx, DWORD PTR x1$[rbp]
  00b38	03 c8		 add	 ecx, eax
  00b3a	8b c1		 mov	 eax, ecx
  00b3c	89 45 24	 mov	 DWORD PTR x1$[rbp], eax

; 123  :         x2 = PLUS(x2, j2);

  00b3f	8b 85 44 02 00
	00		 mov	 eax, DWORD PTR j2$[rbp]
  00b45	8b 4d 44	 mov	 ecx, DWORD PTR x2$[rbp]
  00b48	03 c8		 add	 ecx, eax
  00b4a	8b c1		 mov	 eax, ecx
  00b4c	89 45 44	 mov	 DWORD PTR x2$[rbp], eax

; 124  :         x3 = PLUS(x3, j3);

  00b4f	8b 85 64 02 00
	00		 mov	 eax, DWORD PTR j3$[rbp]
  00b55	8b 4d 64	 mov	 ecx, DWORD PTR x3$[rbp]
  00b58	03 c8		 add	 ecx, eax
  00b5a	8b c1		 mov	 eax, ecx
  00b5c	89 45 64	 mov	 DWORD PTR x3$[rbp], eax

; 125  :         x4 = PLUS(x4, j4);

  00b5f	8b 85 84 02 00
	00		 mov	 eax, DWORD PTR j4$[rbp]
  00b65	8b 8d 84 00 00
	00		 mov	 ecx, DWORD PTR x4$[rbp]
  00b6b	03 c8		 add	 ecx, eax
  00b6d	8b c1		 mov	 eax, ecx
  00b6f	89 85 84 00 00
	00		 mov	 DWORD PTR x4$[rbp], eax

; 126  :         x5 = PLUS(x5, j5);

  00b75	8b 85 a4 02 00
	00		 mov	 eax, DWORD PTR j5$[rbp]
  00b7b	8b 8d a4 00 00
	00		 mov	 ecx, DWORD PTR x5$[rbp]
  00b81	03 c8		 add	 ecx, eax
  00b83	8b c1		 mov	 eax, ecx
  00b85	89 85 a4 00 00
	00		 mov	 DWORD PTR x5$[rbp], eax

; 127  :         x6 = PLUS(x6, j6);

  00b8b	8b 85 c4 02 00
	00		 mov	 eax, DWORD PTR j6$[rbp]
  00b91	8b 8d c4 00 00
	00		 mov	 ecx, DWORD PTR x6$[rbp]
  00b97	03 c8		 add	 ecx, eax
  00b99	8b c1		 mov	 eax, ecx
  00b9b	89 85 c4 00 00
	00		 mov	 DWORD PTR x6$[rbp], eax

; 128  :         x7 = PLUS(x7, j7);

  00ba1	8b 85 e4 02 00
	00		 mov	 eax, DWORD PTR j7$[rbp]
  00ba7	8b 8d e4 00 00
	00		 mov	 ecx, DWORD PTR x7$[rbp]
  00bad	03 c8		 add	 ecx, eax
  00baf	8b c1		 mov	 eax, ecx
  00bb1	89 85 e4 00 00
	00		 mov	 DWORD PTR x7$[rbp], eax

; 129  :         x8 = PLUS(x8, j8);

  00bb7	8b 85 04 03 00
	00		 mov	 eax, DWORD PTR j8$[rbp]
  00bbd	8b 8d 04 01 00
	00		 mov	 ecx, DWORD PTR x8$[rbp]
  00bc3	03 c8		 add	 ecx, eax
  00bc5	8b c1		 mov	 eax, ecx
  00bc7	89 85 04 01 00
	00		 mov	 DWORD PTR x8$[rbp], eax

; 130  :         x9 = PLUS(x9, j9);

  00bcd	8b 85 24 03 00
	00		 mov	 eax, DWORD PTR j9$[rbp]
  00bd3	8b 8d 24 01 00
	00		 mov	 ecx, DWORD PTR x9$[rbp]
  00bd9	03 c8		 add	 ecx, eax
  00bdb	8b c1		 mov	 eax, ecx
  00bdd	89 85 24 01 00
	00		 mov	 DWORD PTR x9$[rbp], eax

; 131  :         x10 = PLUS(x10, j10);

  00be3	8b 85 44 03 00
	00		 mov	 eax, DWORD PTR j10$[rbp]
  00be9	8b 8d 44 01 00
	00		 mov	 ecx, DWORD PTR x10$[rbp]
  00bef	03 c8		 add	 ecx, eax
  00bf1	8b c1		 mov	 eax, ecx
  00bf3	89 85 44 01 00
	00		 mov	 DWORD PTR x10$[rbp], eax

; 132  :         x11 = PLUS(x11, j11);

  00bf9	8b 85 64 03 00
	00		 mov	 eax, DWORD PTR j11$[rbp]
  00bff	8b 8d 64 01 00
	00		 mov	 ecx, DWORD PTR x11$[rbp]
  00c05	03 c8		 add	 ecx, eax
  00c07	8b c1		 mov	 eax, ecx
  00c09	89 85 64 01 00
	00		 mov	 DWORD PTR x11$[rbp], eax

; 133  :         x12 = PLUS(x12, j12);

  00c0f	8b 85 84 03 00
	00		 mov	 eax, DWORD PTR j12$[rbp]
  00c15	8b 8d 84 01 00
	00		 mov	 ecx, DWORD PTR x12$[rbp]
  00c1b	03 c8		 add	 ecx, eax
  00c1d	8b c1		 mov	 eax, ecx
  00c1f	89 85 84 01 00
	00		 mov	 DWORD PTR x12$[rbp], eax

; 134  :         x13 = PLUS(x13, j13);

  00c25	8b 85 a4 03 00
	00		 mov	 eax, DWORD PTR j13$[rbp]
  00c2b	8b 8d a4 01 00
	00		 mov	 ecx, DWORD PTR x13$[rbp]
  00c31	03 c8		 add	 ecx, eax
  00c33	8b c1		 mov	 eax, ecx
  00c35	89 85 a4 01 00
	00		 mov	 DWORD PTR x13$[rbp], eax

; 135  :         x14 = PLUS(x14, j14);

  00c3b	8b 85 c4 03 00
	00		 mov	 eax, DWORD PTR j14$[rbp]
  00c41	8b 8d c4 01 00
	00		 mov	 ecx, DWORD PTR x14$[rbp]
  00c47	03 c8		 add	 ecx, eax
  00c49	8b c1		 mov	 eax, ecx
  00c4b	89 85 c4 01 00
	00		 mov	 DWORD PTR x14$[rbp], eax

; 136  :         x15 = PLUS(x15, j15);

  00c51	8b 85 e4 03 00
	00		 mov	 eax, DWORD PTR j15$[rbp]
  00c57	8b 8d e4 01 00
	00		 mov	 ecx, DWORD PTR x15$[rbp]
  00c5d	03 c8		 add	 ecx, eax
  00c5f	8b c1		 mov	 eax, ecx
  00c61	89 85 e4 01 00
	00		 mov	 DWORD PTR x15$[rbp], eax

; 137  : 
; 138  :         x0 = XOR(x0, U8TO32_LITTLE(m + 0));

  00c67	b8 04 00 00 00	 mov	 eax, 4
  00c6c	48 6b c0 00	 imul	 rax, rax, 0
  00c70	48 8b 8d 08 07
	00 00		 mov	 rcx, QWORD PTR m$[rbp]
  00c77	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  00c7a	8b 4d 04	 mov	 ecx, DWORD PTR x0$[rbp]
  00c7d	33 c8		 xor	 ecx, eax
  00c7f	8b c1		 mov	 eax, ecx
  00c81	89 45 04	 mov	 DWORD PTR x0$[rbp], eax

; 139  :         x1 = XOR(x1, U8TO32_LITTLE(m + 4));

  00c84	b8 04 00 00 00	 mov	 eax, 4
  00c89	48 6b c0 00	 imul	 rax, rax, 0
  00c8d	48 8b 8d 08 07
	00 00		 mov	 rcx, QWORD PTR m$[rbp]
  00c94	8b 44 01 04	 mov	 eax, DWORD PTR [rcx+rax+4]
  00c98	8b 4d 24	 mov	 ecx, DWORD PTR x1$[rbp]
  00c9b	33 c8		 xor	 ecx, eax
  00c9d	8b c1		 mov	 eax, ecx
  00c9f	89 45 24	 mov	 DWORD PTR x1$[rbp], eax

; 140  :         x2 = XOR(x2, U8TO32_LITTLE(m + 8));

  00ca2	b8 04 00 00 00	 mov	 eax, 4
  00ca7	48 6b c0 00	 imul	 rax, rax, 0
  00cab	48 8b 8d 08 07
	00 00		 mov	 rcx, QWORD PTR m$[rbp]
  00cb2	8b 44 01 08	 mov	 eax, DWORD PTR [rcx+rax+8]
  00cb6	8b 4d 44	 mov	 ecx, DWORD PTR x2$[rbp]
  00cb9	33 c8		 xor	 ecx, eax
  00cbb	8b c1		 mov	 eax, ecx
  00cbd	89 45 44	 mov	 DWORD PTR x2$[rbp], eax

; 141  :         x3 = XOR(x3, U8TO32_LITTLE(m + 12));

  00cc0	b8 04 00 00 00	 mov	 eax, 4
  00cc5	48 6b c0 00	 imul	 rax, rax, 0
  00cc9	48 8b 8d 08 07
	00 00		 mov	 rcx, QWORD PTR m$[rbp]
  00cd0	8b 44 01 0c	 mov	 eax, DWORD PTR [rcx+rax+12]
  00cd4	8b 4d 64	 mov	 ecx, DWORD PTR x3$[rbp]
  00cd7	33 c8		 xor	 ecx, eax
  00cd9	8b c1		 mov	 eax, ecx
  00cdb	89 45 64	 mov	 DWORD PTR x3$[rbp], eax

; 142  :         x4 = XOR(x4, U8TO32_LITTLE(m + 16));

  00cde	b8 04 00 00 00	 mov	 eax, 4
  00ce3	48 6b c0 00	 imul	 rax, rax, 0
  00ce7	48 8b 8d 08 07
	00 00		 mov	 rcx, QWORD PTR m$[rbp]
  00cee	8b 44 01 10	 mov	 eax, DWORD PTR [rcx+rax+16]
  00cf2	8b 8d 84 00 00
	00		 mov	 ecx, DWORD PTR x4$[rbp]
  00cf8	33 c8		 xor	 ecx, eax
  00cfa	8b c1		 mov	 eax, ecx
  00cfc	89 85 84 00 00
	00		 mov	 DWORD PTR x4$[rbp], eax

; 143  :         x5 = XOR(x5, U8TO32_LITTLE(m + 20));

  00d02	b8 04 00 00 00	 mov	 eax, 4
  00d07	48 6b c0 00	 imul	 rax, rax, 0
  00d0b	48 8b 8d 08 07
	00 00		 mov	 rcx, QWORD PTR m$[rbp]
  00d12	8b 44 01 14	 mov	 eax, DWORD PTR [rcx+rax+20]
  00d16	8b 8d a4 00 00
	00		 mov	 ecx, DWORD PTR x5$[rbp]
  00d1c	33 c8		 xor	 ecx, eax
  00d1e	8b c1		 mov	 eax, ecx
  00d20	89 85 a4 00 00
	00		 mov	 DWORD PTR x5$[rbp], eax

; 144  :         x6 = XOR(x6, U8TO32_LITTLE(m + 24));

  00d26	b8 04 00 00 00	 mov	 eax, 4
  00d2b	48 6b c0 00	 imul	 rax, rax, 0
  00d2f	48 8b 8d 08 07
	00 00		 mov	 rcx, QWORD PTR m$[rbp]
  00d36	8b 44 01 18	 mov	 eax, DWORD PTR [rcx+rax+24]
  00d3a	8b 8d c4 00 00
	00		 mov	 ecx, DWORD PTR x6$[rbp]
  00d40	33 c8		 xor	 ecx, eax
  00d42	8b c1		 mov	 eax, ecx
  00d44	89 85 c4 00 00
	00		 mov	 DWORD PTR x6$[rbp], eax

; 145  :         x7 = XOR(x7, U8TO32_LITTLE(m + 28));

  00d4a	b8 04 00 00 00	 mov	 eax, 4
  00d4f	48 6b c0 00	 imul	 rax, rax, 0
  00d53	48 8b 8d 08 07
	00 00		 mov	 rcx, QWORD PTR m$[rbp]
  00d5a	8b 44 01 1c	 mov	 eax, DWORD PTR [rcx+rax+28]
  00d5e	8b 8d e4 00 00
	00		 mov	 ecx, DWORD PTR x7$[rbp]
  00d64	33 c8		 xor	 ecx, eax
  00d66	8b c1		 mov	 eax, ecx
  00d68	89 85 e4 00 00
	00		 mov	 DWORD PTR x7$[rbp], eax

; 146  :         x8 = XOR(x8, U8TO32_LITTLE(m + 32));

  00d6e	b8 04 00 00 00	 mov	 eax, 4
  00d73	48 6b c0 00	 imul	 rax, rax, 0
  00d77	48 8b 8d 08 07
	00 00		 mov	 rcx, QWORD PTR m$[rbp]
  00d7e	8b 44 01 20	 mov	 eax, DWORD PTR [rcx+rax+32]
  00d82	8b 8d 04 01 00
	00		 mov	 ecx, DWORD PTR x8$[rbp]
  00d88	33 c8		 xor	 ecx, eax
  00d8a	8b c1		 mov	 eax, ecx
  00d8c	89 85 04 01 00
	00		 mov	 DWORD PTR x8$[rbp], eax

; 147  :         x9 = XOR(x9, U8TO32_LITTLE(m + 36));

  00d92	b8 04 00 00 00	 mov	 eax, 4
  00d97	48 6b c0 00	 imul	 rax, rax, 0
  00d9b	48 8b 8d 08 07
	00 00		 mov	 rcx, QWORD PTR m$[rbp]
  00da2	8b 44 01 24	 mov	 eax, DWORD PTR [rcx+rax+36]
  00da6	8b 8d 24 01 00
	00		 mov	 ecx, DWORD PTR x9$[rbp]
  00dac	33 c8		 xor	 ecx, eax
  00dae	8b c1		 mov	 eax, ecx
  00db0	89 85 24 01 00
	00		 mov	 DWORD PTR x9$[rbp], eax

; 148  :         x10 = XOR(x10, U8TO32_LITTLE(m + 40));

  00db6	b8 04 00 00 00	 mov	 eax, 4
  00dbb	48 6b c0 00	 imul	 rax, rax, 0
  00dbf	48 8b 8d 08 07
	00 00		 mov	 rcx, QWORD PTR m$[rbp]
  00dc6	8b 44 01 28	 mov	 eax, DWORD PTR [rcx+rax+40]
  00dca	8b 8d 44 01 00
	00		 mov	 ecx, DWORD PTR x10$[rbp]
  00dd0	33 c8		 xor	 ecx, eax
  00dd2	8b c1		 mov	 eax, ecx
  00dd4	89 85 44 01 00
	00		 mov	 DWORD PTR x10$[rbp], eax

; 149  :         x11 = XOR(x11, U8TO32_LITTLE(m + 44));

  00dda	b8 04 00 00 00	 mov	 eax, 4
  00ddf	48 6b c0 00	 imul	 rax, rax, 0
  00de3	48 8b 8d 08 07
	00 00		 mov	 rcx, QWORD PTR m$[rbp]
  00dea	8b 44 01 2c	 mov	 eax, DWORD PTR [rcx+rax+44]
  00dee	8b 8d 64 01 00
	00		 mov	 ecx, DWORD PTR x11$[rbp]
  00df4	33 c8		 xor	 ecx, eax
  00df6	8b c1		 mov	 eax, ecx
  00df8	89 85 64 01 00
	00		 mov	 DWORD PTR x11$[rbp], eax

; 150  :         x12 = XOR(x12, U8TO32_LITTLE(m + 48));

  00dfe	b8 04 00 00 00	 mov	 eax, 4
  00e03	48 6b c0 00	 imul	 rax, rax, 0
  00e07	48 8b 8d 08 07
	00 00		 mov	 rcx, QWORD PTR m$[rbp]
  00e0e	8b 44 01 30	 mov	 eax, DWORD PTR [rcx+rax+48]
  00e12	8b 8d 84 01 00
	00		 mov	 ecx, DWORD PTR x12$[rbp]
  00e18	33 c8		 xor	 ecx, eax
  00e1a	8b c1		 mov	 eax, ecx
  00e1c	89 85 84 01 00
	00		 mov	 DWORD PTR x12$[rbp], eax

; 151  :         x13 = XOR(x13, U8TO32_LITTLE(m + 52));

  00e22	b8 04 00 00 00	 mov	 eax, 4
  00e27	48 6b c0 00	 imul	 rax, rax, 0
  00e2b	48 8b 8d 08 07
	00 00		 mov	 rcx, QWORD PTR m$[rbp]
  00e32	8b 44 01 34	 mov	 eax, DWORD PTR [rcx+rax+52]
  00e36	8b 8d a4 01 00
	00		 mov	 ecx, DWORD PTR x13$[rbp]
  00e3c	33 c8		 xor	 ecx, eax
  00e3e	8b c1		 mov	 eax, ecx
  00e40	89 85 a4 01 00
	00		 mov	 DWORD PTR x13$[rbp], eax

; 152  :         x14 = XOR(x14, U8TO32_LITTLE(m + 56));

  00e46	b8 04 00 00 00	 mov	 eax, 4
  00e4b	48 6b c0 00	 imul	 rax, rax, 0
  00e4f	48 8b 8d 08 07
	00 00		 mov	 rcx, QWORD PTR m$[rbp]
  00e56	8b 44 01 38	 mov	 eax, DWORD PTR [rcx+rax+56]
  00e5a	8b 8d c4 01 00
	00		 mov	 ecx, DWORD PTR x14$[rbp]
  00e60	33 c8		 xor	 ecx, eax
  00e62	8b c1		 mov	 eax, ecx
  00e64	89 85 c4 01 00
	00		 mov	 DWORD PTR x14$[rbp], eax

; 153  :         x15 = XOR(x15, U8TO32_LITTLE(m + 60));

  00e6a	b8 04 00 00 00	 mov	 eax, 4
  00e6f	48 6b c0 00	 imul	 rax, rax, 0
  00e73	48 8b 8d 08 07
	00 00		 mov	 rcx, QWORD PTR m$[rbp]
  00e7a	8b 44 01 3c	 mov	 eax, DWORD PTR [rcx+rax+60]
  00e7e	8b 8d e4 01 00
	00		 mov	 ecx, DWORD PTR x15$[rbp]
  00e84	33 c8		 xor	 ecx, eax
  00e86	8b c1		 mov	 eax, ecx
  00e88	89 85 e4 01 00
	00		 mov	 DWORD PTR x15$[rbp], eax

; 154  : 
; 155  :         j12 = PLUSONE(j12);

  00e8e	8b 85 84 03 00
	00		 mov	 eax, DWORD PTR j12$[rbp]
  00e94	ff c0		 inc	 eax
  00e96	89 85 84 03 00
	00		 mov	 DWORD PTR j12$[rbp], eax

; 156  :         if (!j12) {

  00e9c	83 bd 84 03 00
	00 00		 cmp	 DWORD PTR j12$[rbp], 0
  00ea3	75 0e		 jne	 SHORT $LN16@ECRYPT_enc

; 157  :             j13 = PLUSONE(j13);

  00ea5	8b 85 a4 03 00
	00		 mov	 eax, DWORD PTR j13$[rbp]
  00eab	ff c0		 inc	 eax
  00ead	89 85 a4 03 00
	00		 mov	 DWORD PTR j13$[rbp], eax
$LN16@ECRYPT_enc:

; 158  :             /* stopping at 2^70 bytes per nonce is user's responsibility */
; 159  :         }
; 160  : 
; 161  :         U32TO8_LITTLE(c + 0, x0);

  00eb3	b8 04 00 00 00	 mov	 eax, 4
  00eb8	48 6b c0 00	 imul	 rax, rax, 0
  00ebc	48 8b 8d 10 07
	00 00		 mov	 rcx, QWORD PTR c$[rbp]
  00ec3	8b 55 04	 mov	 edx, DWORD PTR x0$[rbp]
  00ec6	89 14 01	 mov	 DWORD PTR [rcx+rax], edx

; 162  :         U32TO8_LITTLE(c + 4, x1);

  00ec9	b8 04 00 00 00	 mov	 eax, 4
  00ece	48 6b c0 00	 imul	 rax, rax, 0
  00ed2	48 8b 8d 10 07
	00 00		 mov	 rcx, QWORD PTR c$[rbp]
  00ed9	8b 55 24	 mov	 edx, DWORD PTR x1$[rbp]
  00edc	89 54 01 04	 mov	 DWORD PTR [rcx+rax+4], edx

; 163  :         U32TO8_LITTLE(c + 8, x2);

  00ee0	b8 04 00 00 00	 mov	 eax, 4
  00ee5	48 6b c0 00	 imul	 rax, rax, 0
  00ee9	48 8b 8d 10 07
	00 00		 mov	 rcx, QWORD PTR c$[rbp]
  00ef0	8b 55 44	 mov	 edx, DWORD PTR x2$[rbp]
  00ef3	89 54 01 08	 mov	 DWORD PTR [rcx+rax+8], edx

; 164  :         U32TO8_LITTLE(c + 12, x3);

  00ef7	b8 04 00 00 00	 mov	 eax, 4
  00efc	48 6b c0 00	 imul	 rax, rax, 0
  00f00	48 8b 8d 10 07
	00 00		 mov	 rcx, QWORD PTR c$[rbp]
  00f07	8b 55 64	 mov	 edx, DWORD PTR x3$[rbp]
  00f0a	89 54 01 0c	 mov	 DWORD PTR [rcx+rax+12], edx

; 165  :         U32TO8_LITTLE(c + 16, x4);

  00f0e	b8 04 00 00 00	 mov	 eax, 4
  00f13	48 6b c0 00	 imul	 rax, rax, 0
  00f17	48 8b 8d 10 07
	00 00		 mov	 rcx, QWORD PTR c$[rbp]
  00f1e	8b 95 84 00 00
	00		 mov	 edx, DWORD PTR x4$[rbp]
  00f24	89 54 01 10	 mov	 DWORD PTR [rcx+rax+16], edx

; 166  :         U32TO8_LITTLE(c + 20, x5);

  00f28	b8 04 00 00 00	 mov	 eax, 4
  00f2d	48 6b c0 00	 imul	 rax, rax, 0
  00f31	48 8b 8d 10 07
	00 00		 mov	 rcx, QWORD PTR c$[rbp]
  00f38	8b 95 a4 00 00
	00		 mov	 edx, DWORD PTR x5$[rbp]
  00f3e	89 54 01 14	 mov	 DWORD PTR [rcx+rax+20], edx

; 167  :         U32TO8_LITTLE(c + 24, x6);

  00f42	b8 04 00 00 00	 mov	 eax, 4
  00f47	48 6b c0 00	 imul	 rax, rax, 0
  00f4b	48 8b 8d 10 07
	00 00		 mov	 rcx, QWORD PTR c$[rbp]
  00f52	8b 95 c4 00 00
	00		 mov	 edx, DWORD PTR x6$[rbp]
  00f58	89 54 01 18	 mov	 DWORD PTR [rcx+rax+24], edx

; 168  :         U32TO8_LITTLE(c + 28, x7);

  00f5c	b8 04 00 00 00	 mov	 eax, 4
  00f61	48 6b c0 00	 imul	 rax, rax, 0
  00f65	48 8b 8d 10 07
	00 00		 mov	 rcx, QWORD PTR c$[rbp]
  00f6c	8b 95 e4 00 00
	00		 mov	 edx, DWORD PTR x7$[rbp]
  00f72	89 54 01 1c	 mov	 DWORD PTR [rcx+rax+28], edx

; 169  :         U32TO8_LITTLE(c + 32, x8);

  00f76	b8 04 00 00 00	 mov	 eax, 4
  00f7b	48 6b c0 00	 imul	 rax, rax, 0
  00f7f	48 8b 8d 10 07
	00 00		 mov	 rcx, QWORD PTR c$[rbp]
  00f86	8b 95 04 01 00
	00		 mov	 edx, DWORD PTR x8$[rbp]
  00f8c	89 54 01 20	 mov	 DWORD PTR [rcx+rax+32], edx

; 170  :         U32TO8_LITTLE(c + 36, x9);

  00f90	b8 04 00 00 00	 mov	 eax, 4
  00f95	48 6b c0 00	 imul	 rax, rax, 0
  00f99	48 8b 8d 10 07
	00 00		 mov	 rcx, QWORD PTR c$[rbp]
  00fa0	8b 95 24 01 00
	00		 mov	 edx, DWORD PTR x9$[rbp]
  00fa6	89 54 01 24	 mov	 DWORD PTR [rcx+rax+36], edx

; 171  :         U32TO8_LITTLE(c + 40, x10);

  00faa	b8 04 00 00 00	 mov	 eax, 4
  00faf	48 6b c0 00	 imul	 rax, rax, 0
  00fb3	48 8b 8d 10 07
	00 00		 mov	 rcx, QWORD PTR c$[rbp]
  00fba	8b 95 44 01 00
	00		 mov	 edx, DWORD PTR x10$[rbp]
  00fc0	89 54 01 28	 mov	 DWORD PTR [rcx+rax+40], edx

; 172  :         U32TO8_LITTLE(c + 44, x11);

  00fc4	b8 04 00 00 00	 mov	 eax, 4
  00fc9	48 6b c0 00	 imul	 rax, rax, 0
  00fcd	48 8b 8d 10 07
	00 00		 mov	 rcx, QWORD PTR c$[rbp]
  00fd4	8b 95 64 01 00
	00		 mov	 edx, DWORD PTR x11$[rbp]
  00fda	89 54 01 2c	 mov	 DWORD PTR [rcx+rax+44], edx

; 173  :         U32TO8_LITTLE(c + 48, x12);

  00fde	b8 04 00 00 00	 mov	 eax, 4
  00fe3	48 6b c0 00	 imul	 rax, rax, 0
  00fe7	48 8b 8d 10 07
	00 00		 mov	 rcx, QWORD PTR c$[rbp]
  00fee	8b 95 84 01 00
	00		 mov	 edx, DWORD PTR x12$[rbp]
  00ff4	89 54 01 30	 mov	 DWORD PTR [rcx+rax+48], edx

; 174  :         U32TO8_LITTLE(c + 52, x13);

  00ff8	b8 04 00 00 00	 mov	 eax, 4
  00ffd	48 6b c0 00	 imul	 rax, rax, 0
  01001	48 8b 8d 10 07
	00 00		 mov	 rcx, QWORD PTR c$[rbp]
  01008	8b 95 a4 01 00
	00		 mov	 edx, DWORD PTR x13$[rbp]
  0100e	89 54 01 34	 mov	 DWORD PTR [rcx+rax+52], edx

; 175  :         U32TO8_LITTLE(c + 56, x14);

  01012	b8 04 00 00 00	 mov	 eax, 4
  01017	48 6b c0 00	 imul	 rax, rax, 0
  0101b	48 8b 8d 10 07
	00 00		 mov	 rcx, QWORD PTR c$[rbp]
  01022	8b 95 c4 01 00
	00		 mov	 edx, DWORD PTR x14$[rbp]
  01028	89 54 01 38	 mov	 DWORD PTR [rcx+rax+56], edx

; 176  :         U32TO8_LITTLE(c + 60, x15);

  0102c	b8 04 00 00 00	 mov	 eax, 4
  01031	48 6b c0 00	 imul	 rax, rax, 0
  01035	48 8b 8d 10 07
	00 00		 mov	 rcx, QWORD PTR c$[rbp]
  0103c	8b 95 e4 01 00
	00		 mov	 edx, DWORD PTR x15$[rbp]
  01042	89 54 01 3c	 mov	 DWORD PTR [rcx+rax+60], edx

; 177  : 
; 178  :         if (bytes <= 64) {

  01046	83 bd 18 07 00
	00 40		 cmp	 DWORD PTR bytes$[rbp], 64 ; 00000040H
  0104d	0f 87 8b 00 00
	00		 ja	 $LN17@ECRYPT_enc

; 179  :             if (bytes < 64) {

  01053	83 bd 18 07 00
	00 40		 cmp	 DWORD PTR bytes$[rbp], 64 ; 00000040H
  0105a	73 4e		 jae	 SHORT $LN18@ECRYPT_enc

; 180  :                 for (i = 0; i < bytes; ++i) ctarget[i] = c[i];

  0105c	c7 85 84 04 00
	00 00 00 00 00	 mov	 DWORD PTR i$[rbp], 0
  01066	eb 0e		 jmp	 SHORT $LN13@ECRYPT_enc
$LN11@ECRYPT_enc:
  01068	8b 85 84 04 00
	00		 mov	 eax, DWORD PTR i$[rbp]
  0106e	ff c0		 inc	 eax
  01070	89 85 84 04 00
	00		 mov	 DWORD PTR i$[rbp], eax
$LN13@ECRYPT_enc:
  01076	8b 85 18 07 00
	00		 mov	 eax, DWORD PTR bytes$[rbp]
  0107c	39 85 84 04 00
	00		 cmp	 DWORD PTR i$[rbp], eax
  01082	73 26		 jae	 SHORT $LN12@ECRYPT_enc
  01084	48 63 85 84 04
	00 00		 movsxd	 rax, DWORD PTR i$[rbp]
  0108b	48 63 8d 84 04
	00 00		 movsxd	 rcx, DWORD PTR i$[rbp]
  01092	48 8b 95 08 04
	00 00		 mov	 rdx, QWORD PTR ctarget$[rbp]
  01099	4c 8b 85 10 07
	00 00		 mov	 r8, QWORD PTR c$[rbp]
  010a0	41 0f b6 04 00	 movzx	 eax, BYTE PTR [r8+rax]
  010a5	88 04 0a	 mov	 BYTE PTR [rdx+rcx], al
  010a8	eb be		 jmp	 SHORT $LN11@ECRYPT_enc
$LN12@ECRYPT_enc:
$LN18@ECRYPT_enc:

; 181  :             }
; 182  :             x->input[12] = j12;

  010aa	b8 04 00 00 00	 mov	 eax, 4
  010af	48 6b c0 0c	 imul	 rax, rax, 12
  010b3	48 8b 8d 00 07
	00 00		 mov	 rcx, QWORD PTR x$[rbp]
  010ba	8b 95 84 03 00
	00		 mov	 edx, DWORD PTR j12$[rbp]
  010c0	89 14 01	 mov	 DWORD PTR [rcx+rax], edx

; 183  :             x->input[13] = j13;

  010c3	b8 04 00 00 00	 mov	 eax, 4
  010c8	48 6b c0 0d	 imul	 rax, rax, 13
  010cc	48 8b 8d 00 07
	00 00		 mov	 rcx, QWORD PTR x$[rbp]
  010d3	8b 95 a4 03 00
	00		 mov	 edx, DWORD PTR j13$[rbp]
  010d9	89 14 01	 mov	 DWORD PTR [rcx+rax], edx

; 184  :             return;

  010dc	eb 38		 jmp	 SHORT $LN1@ECRYPT_enc
$LN17@ECRYPT_enc:

; 185  :         }
; 186  :         bytes -= 64;

  010de	8b 85 18 07 00
	00		 mov	 eax, DWORD PTR bytes$[rbp]
  010e4	83 e8 40	 sub	 eax, 64			; 00000040H
  010e7	89 85 18 07 00
	00		 mov	 DWORD PTR bytes$[rbp], eax

; 187  :         c += 64;

  010ed	48 8b 85 10 07
	00 00		 mov	 rax, QWORD PTR c$[rbp]
  010f4	48 83 c0 40	 add	 rax, 64			; 00000040H
  010f8	48 89 85 10 07
	00 00		 mov	 QWORD PTR c$[rbp], rax

; 188  :         m += 64;

  010ff	48 8b 85 08 07
	00 00		 mov	 rax, QWORD PTR m$[rbp]
  01106	48 83 c0 40	 add	 rax, 64			; 00000040H
  0110a	48 89 85 08 07
	00 00		 mov	 QWORD PTR m$[rbp], rax

; 189  :     }

  01111	e9 eb f0 ff ff	 jmp	 $LN2@ECRYPT_enc
$LN1@ECRYPT_enc:

; 190  : }

  01116	48 8d 4d e0	 lea	 rcx, QWORD PTR [rbp-32]
  0111a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:ECRYPT_encrypt_bytes$rtcFrameData
  01121	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  01126	48 8b 8d d8 06
	00 00		 mov	 rcx, QWORD PTR __$ArrayPad$[rbp]
  0112d	48 33 cd	 xor	 rcx, rbp
  01130	e8 00 00 00 00	 call	 __security_check_cookie
  01135	48 8d a5 e8 06
	00 00		 lea	 rsp, QWORD PTR [rbp+1768]
  0113c	5f		 pop	 rdi
  0113d	5d		 pop	 rbp
  0113e	c3		 ret	 0
ECRYPT_encrypt_bytes ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\chacha20\chacha.c
;	COMDAT ECRYPT_ivsetup
_TEXT	SEGMENT
x$ = 224
iv$ = 232
ECRYPT_ivsetup PROC					; COMDAT

; 54   : {

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__8816C957_chacha@c
  0001f	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 55   :     x->input[12] = 0;

  00024	b8 04 00 00 00	 mov	 eax, 4
  00029	48 6b c0 0c	 imul	 rax, rax, 12
  0002d	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR x$[rbp]
  00034	c7 04 01 00 00
	00 00		 mov	 DWORD PTR [rcx+rax], 0

; 56   :     x->input[13] = 0;

  0003b	b8 04 00 00 00	 mov	 eax, 4
  00040	48 6b c0 0d	 imul	 rax, rax, 13
  00044	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR x$[rbp]
  0004b	c7 04 01 00 00
	00 00		 mov	 DWORD PTR [rcx+rax], 0

; 57   :     x->input[14] = U8TO32_LITTLE(iv + 0);

  00052	b8 04 00 00 00	 mov	 eax, 4
  00057	48 6b c0 00	 imul	 rax, rax, 0
  0005b	b9 04 00 00 00	 mov	 ecx, 4
  00060	48 6b c9 0e	 imul	 rcx, rcx, 14
  00064	48 8b 95 e0 00
	00 00		 mov	 rdx, QWORD PTR x$[rbp]
  0006b	4c 8b 85 e8 00
	00 00		 mov	 r8, QWORD PTR iv$[rbp]
  00072	41 8b 04 00	 mov	 eax, DWORD PTR [r8+rax]
  00076	89 04 0a	 mov	 DWORD PTR [rdx+rcx], eax

; 58   :     x->input[15] = U8TO32_LITTLE(iv + 4);

  00079	b8 04 00 00 00	 mov	 eax, 4
  0007e	48 6b c0 00	 imul	 rax, rax, 0
  00082	b9 04 00 00 00	 mov	 ecx, 4
  00087	48 6b c9 0f	 imul	 rcx, rcx, 15
  0008b	48 8b 95 e0 00
	00 00		 mov	 rdx, QWORD PTR x$[rbp]
  00092	4c 8b 85 e8 00
	00 00		 mov	 r8, QWORD PTR iv$[rbp]
  00099	41 8b 44 00 04	 mov	 eax, DWORD PTR [r8+rax+4]
  0009e	89 04 0a	 mov	 DWORD PTR [rdx+rcx], eax

; 59   : }

  000a1	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  000a8	5f		 pop	 rdi
  000a9	5d		 pop	 rbp
  000aa	c3		 ret	 0
ECRYPT_ivsetup ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\chacha20\chacha.c
;	COMDAT ECRYPT_keysetup
_TEXT	SEGMENT
constants$ = 8
x$ = 256
k$ = 264
kbits$ = 272
ivbits$ = 280
ECRYPT_keysetup PROC					; COMDAT

; 29   : {

$LN5:
  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	55		 push	 rbp
  00015	57		 push	 rdi
  00016	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  0001d	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00022	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__8816C957_chacha@c
  00029	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 30   :     const char* constants;
; 31   : 
; 32   :     x->input[4] = U8TO32_LITTLE(k + 0);

  0002e	b8 04 00 00 00	 mov	 eax, 4
  00033	48 6b c0 00	 imul	 rax, rax, 0
  00037	b9 04 00 00 00	 mov	 ecx, 4
  0003c	48 6b c9 04	 imul	 rcx, rcx, 4
  00040	48 8b 95 00 01
	00 00		 mov	 rdx, QWORD PTR x$[rbp]
  00047	4c 8b 85 08 01
	00 00		 mov	 r8, QWORD PTR k$[rbp]
  0004e	41 8b 04 00	 mov	 eax, DWORD PTR [r8+rax]
  00052	89 04 0a	 mov	 DWORD PTR [rdx+rcx], eax

; 33   :     x->input[5] = U8TO32_LITTLE(k + 4);

  00055	b8 04 00 00 00	 mov	 eax, 4
  0005a	48 6b c0 00	 imul	 rax, rax, 0
  0005e	b9 04 00 00 00	 mov	 ecx, 4
  00063	48 6b c9 05	 imul	 rcx, rcx, 5
  00067	48 8b 95 00 01
	00 00		 mov	 rdx, QWORD PTR x$[rbp]
  0006e	4c 8b 85 08 01
	00 00		 mov	 r8, QWORD PTR k$[rbp]
  00075	41 8b 44 00 04	 mov	 eax, DWORD PTR [r8+rax+4]
  0007a	89 04 0a	 mov	 DWORD PTR [rdx+rcx], eax

; 34   :     x->input[6] = U8TO32_LITTLE(k + 8);

  0007d	b8 04 00 00 00	 mov	 eax, 4
  00082	48 6b c0 00	 imul	 rax, rax, 0
  00086	b9 04 00 00 00	 mov	 ecx, 4
  0008b	48 6b c9 06	 imul	 rcx, rcx, 6
  0008f	48 8b 95 00 01
	00 00		 mov	 rdx, QWORD PTR x$[rbp]
  00096	4c 8b 85 08 01
	00 00		 mov	 r8, QWORD PTR k$[rbp]
  0009d	41 8b 44 00 08	 mov	 eax, DWORD PTR [r8+rax+8]
  000a2	89 04 0a	 mov	 DWORD PTR [rdx+rcx], eax

; 35   :     x->input[7] = U8TO32_LITTLE(k + 12);

  000a5	b8 04 00 00 00	 mov	 eax, 4
  000aa	48 6b c0 00	 imul	 rax, rax, 0
  000ae	b9 04 00 00 00	 mov	 ecx, 4
  000b3	48 6b c9 07	 imul	 rcx, rcx, 7
  000b7	48 8b 95 00 01
	00 00		 mov	 rdx, QWORD PTR x$[rbp]
  000be	4c 8b 85 08 01
	00 00		 mov	 r8, QWORD PTR k$[rbp]
  000c5	41 8b 44 00 0c	 mov	 eax, DWORD PTR [r8+rax+12]
  000ca	89 04 0a	 mov	 DWORD PTR [rdx+rcx], eax

; 36   :     if (kbits == 256) { /* recommended */

  000cd	81 bd 10 01 00
	00 00 01 00 00	 cmp	 DWORD PTR kbits$[rbp], 256 ; 00000100H
  000d7	75 1f		 jne	 SHORT $LN2@ECRYPT_key

; 37   :         k += 16;

  000d9	48 8b 85 08 01
	00 00		 mov	 rax, QWORD PTR k$[rbp]
  000e0	48 83 c0 10	 add	 rax, 16
  000e4	48 89 85 08 01
	00 00		 mov	 QWORD PTR k$[rbp], rax

; 38   :         constants = sigma;

  000eb	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:?sigma@@3QBDB
  000f2	48 89 45 08	 mov	 QWORD PTR constants$[rbp], rax

; 39   :     }

  000f6	eb 0b		 jmp	 SHORT $LN3@ECRYPT_key
$LN2@ECRYPT_key:

; 40   :     else { /* kbits == 128 */
; 41   :         constants = tau;

  000f8	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:?tau@@3QBDB
  000ff	48 89 45 08	 mov	 QWORD PTR constants$[rbp], rax
$LN3@ECRYPT_key:

; 42   :     }
; 43   :     x->input[8] = U8TO32_LITTLE(k + 0);

  00103	b8 04 00 00 00	 mov	 eax, 4
  00108	48 6b c0 00	 imul	 rax, rax, 0
  0010c	b9 04 00 00 00	 mov	 ecx, 4
  00111	48 6b c9 08	 imul	 rcx, rcx, 8
  00115	48 8b 95 00 01
	00 00		 mov	 rdx, QWORD PTR x$[rbp]
  0011c	4c 8b 85 08 01
	00 00		 mov	 r8, QWORD PTR k$[rbp]
  00123	41 8b 04 00	 mov	 eax, DWORD PTR [r8+rax]
  00127	89 04 0a	 mov	 DWORD PTR [rdx+rcx], eax

; 44   :     x->input[9] = U8TO32_LITTLE(k + 4);

  0012a	b8 04 00 00 00	 mov	 eax, 4
  0012f	48 6b c0 00	 imul	 rax, rax, 0
  00133	b9 04 00 00 00	 mov	 ecx, 4
  00138	48 6b c9 09	 imul	 rcx, rcx, 9
  0013c	48 8b 95 00 01
	00 00		 mov	 rdx, QWORD PTR x$[rbp]
  00143	4c 8b 85 08 01
	00 00		 mov	 r8, QWORD PTR k$[rbp]
  0014a	41 8b 44 00 04	 mov	 eax, DWORD PTR [r8+rax+4]
  0014f	89 04 0a	 mov	 DWORD PTR [rdx+rcx], eax

; 45   :     x->input[10] = U8TO32_LITTLE(k + 8);

  00152	b8 04 00 00 00	 mov	 eax, 4
  00157	48 6b c0 00	 imul	 rax, rax, 0
  0015b	b9 04 00 00 00	 mov	 ecx, 4
  00160	48 6b c9 0a	 imul	 rcx, rcx, 10
  00164	48 8b 95 00 01
	00 00		 mov	 rdx, QWORD PTR x$[rbp]
  0016b	4c 8b 85 08 01
	00 00		 mov	 r8, QWORD PTR k$[rbp]
  00172	41 8b 44 00 08	 mov	 eax, DWORD PTR [r8+rax+8]
  00177	89 04 0a	 mov	 DWORD PTR [rdx+rcx], eax

; 46   :     x->input[11] = U8TO32_LITTLE(k + 12);

  0017a	b8 04 00 00 00	 mov	 eax, 4
  0017f	48 6b c0 00	 imul	 rax, rax, 0
  00183	b9 04 00 00 00	 mov	 ecx, 4
  00188	48 6b c9 0b	 imul	 rcx, rcx, 11
  0018c	48 8b 95 00 01
	00 00		 mov	 rdx, QWORD PTR x$[rbp]
  00193	4c 8b 85 08 01
	00 00		 mov	 r8, QWORD PTR k$[rbp]
  0019a	41 8b 44 00 0c	 mov	 eax, DWORD PTR [r8+rax+12]
  0019f	89 04 0a	 mov	 DWORD PTR [rdx+rcx], eax

; 47   :     x->input[0] = U8TO32_LITTLE(constants + 0);

  001a2	b8 04 00 00 00	 mov	 eax, 4
  001a7	48 6b c0 00	 imul	 rax, rax, 0
  001ab	b9 04 00 00 00	 mov	 ecx, 4
  001b0	48 6b c9 00	 imul	 rcx, rcx, 0
  001b4	48 8b 95 00 01
	00 00		 mov	 rdx, QWORD PTR x$[rbp]
  001bb	4c 8b 45 08	 mov	 r8, QWORD PTR constants$[rbp]
  001bf	41 8b 04 00	 mov	 eax, DWORD PTR [r8+rax]
  001c3	89 04 0a	 mov	 DWORD PTR [rdx+rcx], eax

; 48   :     x->input[1] = U8TO32_LITTLE(constants + 4);

  001c6	b8 04 00 00 00	 mov	 eax, 4
  001cb	48 6b c0 00	 imul	 rax, rax, 0
  001cf	b9 04 00 00 00	 mov	 ecx, 4
  001d4	48 6b c9 01	 imul	 rcx, rcx, 1
  001d8	48 8b 95 00 01
	00 00		 mov	 rdx, QWORD PTR x$[rbp]
  001df	4c 8b 45 08	 mov	 r8, QWORD PTR constants$[rbp]
  001e3	41 8b 44 00 04	 mov	 eax, DWORD PTR [r8+rax+4]
  001e8	89 04 0a	 mov	 DWORD PTR [rdx+rcx], eax

; 49   :     x->input[2] = U8TO32_LITTLE(constants + 8);

  001eb	b8 04 00 00 00	 mov	 eax, 4
  001f0	48 6b c0 00	 imul	 rax, rax, 0
  001f4	b9 04 00 00 00	 mov	 ecx, 4
  001f9	48 6b c9 02	 imul	 rcx, rcx, 2
  001fd	48 8b 95 00 01
	00 00		 mov	 rdx, QWORD PTR x$[rbp]
  00204	4c 8b 45 08	 mov	 r8, QWORD PTR constants$[rbp]
  00208	41 8b 44 00 08	 mov	 eax, DWORD PTR [r8+rax+8]
  0020d	89 04 0a	 mov	 DWORD PTR [rdx+rcx], eax

; 50   :     x->input[3] = U8TO32_LITTLE(constants + 12);

  00210	b8 04 00 00 00	 mov	 eax, 4
  00215	48 6b c0 00	 imul	 rax, rax, 0
  00219	b9 04 00 00 00	 mov	 ecx, 4
  0021e	48 6b c9 03	 imul	 rcx, rcx, 3
  00222	48 8b 95 00 01
	00 00		 mov	 rdx, QWORD PTR x$[rbp]
  00229	4c 8b 45 08	 mov	 r8, QWORD PTR constants$[rbp]
  0022d	41 8b 44 00 0c	 mov	 eax, DWORD PTR [r8+rax+12]
  00232	89 04 0a	 mov	 DWORD PTR [rdx+rcx], eax

; 51   : }

  00235	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  0023c	5f		 pop	 rdi
  0023d	5d		 pop	 rbp
  0023e	c3		 ret	 0
ECRYPT_keysetup ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\chacha20\chacha.c
;	COMDAT ECRYPT_init
_TEXT	SEGMENT
ECRYPT_init PROC					; COMDAT

; 21   : {

$LN3:
  00000	40 55		 push	 rbp
  00002	57		 push	 rdi
  00003	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000a	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0000f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__8816C957_chacha@c
  00016	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 22   :     return;
; 23   : }

  0001b	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00022	5f		 pop	 rdi
  00023	5d		 pop	 rbp
  00024	c3		 ret	 0
ECRYPT_init ENDP
_TEXT	ENDS
END
