; Listing generated by Microsoft (R) Optimizing Compiler Version 19.39.33522.0 

include listing.inc

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?g_CritSec@@3U_RTL_CRITICAL_SECTION@@A		; g_CritSec
PUBLIC	?g_LogHandle@@3PEAXEA				; g_LogHandle
_BSS	SEGMENT
?g_CritSec@@3U_RTL_CRITICAL_SECTION@@A DB 028H DUP (?)	; g_CritSec
_BSS	ENDS
msvcjmc	SEGMENT
__0ED14FEE_winpackagefamily@h DB 01H
__F92EF742_winapifamily@h DB 01H
__22E515EB_sdkddkver@h DB 01H
__FE09AF47_concurrencysal@h DB 01H
__C073CA79_sal@h DB 01H
__D6AFE870_vadefs@h DB 01H
__D63E96CF_vcruntime@h DB 01H
__514B86D7_excpt@h DB 01H
__9A7D38D9_stdarg@h DB 01H
__29F49F40_specstrings_undef@h DB 01H
__D0F42932_specstrings_strict@h DB 01H
__F00405FD_sdv_driverspecs@h DB 01H
__173E09CA_driverspecs@h DB 01H
__9A452361_specstrings@h DB 01H
__1B0272D9_corecrt@h DB 01H
__74484FB3_corecrt_wctype@h DB 01H
__1EC467ED_ctype@h DB 01H
__98517906_kernelspecs@h DB 01H
__D3497022_basetsd@h DB 01H
__61CC25A1_errno@h DB 01H
__3EADF068_vcruntime_string@h DB 01H
__E4C945B4_corecrt_memcpy_s@h DB 01H
__8EAFF484_corecrt_memory@h DB 01H
__6490AEC5_corecrt_wstring@h DB 01H
__E8295E1E_string@h DB 01H
__7FCB5136_guiddef@h DB 01H
__FF8A9E11_pshpack4@h DB 01H
__D5438902_poppack@h DB 01H
__FB07E2A3_pshpack2@h DB 01H
__F6906775_pshpack8@h DB 01H
__F9415CFA_pshpack1@h DB 01H
__E58C6F1C_apiset@h DB 01H
__A5C52262_ktmtypes@h DB 01H
__FBBA8F9D_winnt@h DB 01H
__A32D3D2C_minwindef@h DB 01H
__7D798299_windef@h DB 01H
__9AE108E9_apisetcconv@h DB 01H
__9CE53D2C_minwinbase@h DB 01H
__5D0AA210_apiquery2@h DB 01H
__4DD4E726_processenv@h DB 01H
__3575CC96_fileapi@h DB 01H
__8EA220E6_fileapifromapp@h DB 01H
__BF9B31FE_debugapi@h DB 01H
__C3AFE134_utilapiset@h DB 01H
__76F69E51_handleapi@h DB 01H
__7E63D784_errhandlingapi@h DB 01H
__FFA7003C_fibersapi@h DB 01H
__8971CECF_namedpipeapi@h DB 01H
__46C9D8A6_profileapi@h DB 01H
__98D4F0A3_heapapi@h DB 01H
__50EF2A88_ioapiset@h DB 01H
__92EA1464_synchapi@h DB 01H
__A53D8AED_interlockedapi@h DB 01H
__B506CAAF_processthreadsapi@h DB 01H
__FF735694_sysinfoapi@h DB 01H
__29589789_memoryapi@h DB 01H
__E9C7A663_enclaveapi@h DB 01H
__D035F9F7_threadpoollegacyapiset@h DB 01H
__C899130C_threadpoolapiset@h DB 01H
__E0441EE7_jobapi@h DB 01H
__CEF86838_jobapi2@h DB 01H
__35AC6B9A_wow64apiset@h DB 01H
__C8AE41A5_libloaderapi@h DB 01H
__CC9E232D_securitybaseapi@h DB 01H
__C9D0C9B8_namespaceapi@h DB 01H
__30FF9CAD_systemtopologyapi@h DB 01H
__4D358795_processtopologyapi@h DB 01H
__40446D10_securityappcontainer@h DB 01H
__3A952EDF_realtimeapiset@h DB 01H
__F4865F4B_winerror@h DB 01H
__53C1BD93_timezoneapi@h DB 01H
__1FFBEDBF_winbase@h DB 01H
__43D3FA34_wingdi@h DB 01H
__D24A7391_tvout@h DB 01H
__7713A6C8_winuser@h DB 01H
__0B345F71_datetimeapi@h DB 01H
__9AC6960C_winnls@h DB 01H
__973A40A8_stringapiset@h DB 01H
__CC46FEE2_wincontypes@h DB 01H
__97D70BE1_consoleapi@h DB 01H
__27EC5E18_consoleapi2@h DB 01H
__262E342F_consoleapi3@h DB 01H
__641DCD70_wincon@h DB 01H
__5A96C7A7_verrsrc@h DB 01H
__B69C6FF2_winver@h DB 01H
__7AEB8C37_reason@h DB 01H
__59F1A8A9_winreg@h DB 01H
__EE0E2B7F_wnnc@h DB 01H
__DCDB7054_winnetwk@h DB 01H
__EDC72EEB_cderr@h DB 01H
__95F9199D_dde@h DB 01H
__66427627_ddeml@h DB 01H
__957C29A0_dlgs@h DB 01H
__12EA15AF_lzexpand@h DB 01H
__62131F15_mmsyscom@h DB 01H
__47E68D49_mciapi@h DB 01H
__5D7DD356_mmiscapi@h DB 01H
__7223D2EF_mmiscapi2@h DB 01H
__A330DBB3_playsoundapi@h DB 01H
__601B366F_mmeapi@h DB 01H
__1134ADD5_timeapi@h DB 01H
__93F2265A_joystickapi@h DB 01H
__DF6EB4E3_mmsystem@h DB 01H
__BD641FCB_nb30@h DB 01H
__DF8704F0_rpcdcep@h DB 01H
__5C6CA7BB_rpcdce@h DB 01H
__853533C4_rpcnsi@h DB 01H
__2D2406C3_rpcnterr@h DB 01H
__64521D71_rpcasync@h DB 01H
__AADCBA08_rpc@h DB 01H
__19E26CFF_shellapi@h DB 01H
__1E9F31D3_winperf@h DB 01H
__32C6F875_winsock@h DB 01H
__7953A3F8_bcrypt@h DB 01H
__E4169492_ncrypt@h DB 01H
__AF3DDDC3_dpapi@h DB 01H
__D1E23BF2_wincrypt@h DB 01H
__82AB4779_winefs@h DB 01H
__1FE431C9_rpcnsip@h DB 01H
__2B741F2D_rpcsal@h DB 01H
__92623256_rpcndr@h DB 01H
__9C18532E_wtypesbase@h DB 01H
__EA2E1D6D_wtypes@h DB 01H
__7DDD9F45_winioctl@h DB 01H
__E550A843_winsmcrd@h DB 01H
__9809C1BA_winscard@h DB 01H
__EA174FA4_prsht@h DB 01H
__0E1BD114_winspool@h DB 01H
__45DED006_corecrt_malloc@h DB 01H
__13F5961F_stddef@h DB 01H
__FD6DBD68_corecrt_search@h DB 01H
__E2E33A61_corecrt_wstdlib@h DB 01H
__10D4A829_limits@h DB 01H
__6E5ACABA_stdlib@h DB 01H
__30B1AFDA_unknwnbase@h DB 01H
__328C1996_objidlbase@h DB 01H
__C4E06B6A_cguid@h DB 01H
__434718C5_combaseapi@h DB 01H
__DE6FDEF1_unknwn@h DB 01H
__CCE0BACC_objidl@h DB 01H
__8C7011E5_oaidl@h DB 01H
__2E0B7863_propidlbase@h DB 01H
__BF4CF2EC_coml2api@h DB 01H
__6D897344_oleidl@h DB 01H
__1129FC2C_servprov@h DB 01H
__757952E4_msxml@h DB 01H
__B1191D53_urlmon@h DB 01H
__404D1A47_propidl@h DB 01H
__A1C63593_objbase@h DB 01H
__C1B0A9CB_oleauto@h DB 01H
__24EAF61F_ole2@h DB 01H
__2B1843DA_commdlg@h DB 01H
__81DDEDE3_stralign@h DB 01H
__2134D1B4_winsvc@h DB 01H
__11C07376_mcx@h DB 01H
__577CE3E7_ime_cmodes@h DB 01H
__1E72C31E_imm@h DB 01H
__E15BF856_windows@h DB 01H
__832A4112_inaddr@h DB 01H
__C59B8995_ws2def@h DB 01H
__F9202461_qos@h DB 01H
__50CB22FA_WinSock2@h DB 01H
__32E3D3D2_xkeycheck@h DB 01H
__CFD6EDFA_yvals_core@h DB 01H
__BE6CFB00___msvc_sanitizer_annotate_container@hpp DB 01H
__A3D3E4E8_vcruntime_new@h DB 01H
__8D1A214D_vcruntime_new_debug@h DB 01H
__935DC21B_crtdbg@h DB 01H
__497BC13E_crtdefs@h DB 01H
__DDE8D0E0_use_ansi@h DB 01H
__AE7FBCDF_yvals@h DB 01H
__44420885_corecrt_stdio_config@h DB 01H
__AB601D8D_corecrt_wstdio@h DB 01H
__C1EC35D3_stdio@h DB 01H
__1C5946C5_cstdio DB 01H
__54ADA280_cstring DB 01H
__EF1F6BBA_corecrt_wconio@h DB 01H
__3D1D430C_corecrt_wdirect@h DB 01H
__8ECB7138_corecrt_share@h DB 01H
__DB7FEBA6_corecrt_wio@h DB 01H
__9A9F0068_corecrt_wprocess@h DB 01H
__369A9BC3_corecrt_wtime@h DB 01H
__CE789B9D_types@h DB 01H
__9901C817_stat@h DB 01H
__3FCAD62E_wchar@h DB 01H
__86D29096_cwchar DB 01H
__26E6E2A9_xtr1common DB 01H
__C51215A0_iosfwd DB 01H
__AEA28616_stdint@h DB 01H
__A561EB1D_cstdint DB 01H
__BB16330F_corecrt_math@h DB 01H
__3BF2A406_math@h DB 01H
__183F0A60_cstdlib DB 01H
__B9985323_float@h DB 01H
__6F1D8D42_cfloat DB 01H
__9CD02892_climits DB 01H
__F5A7E1DF_intrin0@inl@h DB 01H
__50567835_intrin0@h DB 01H
__09FBC026_limits DB 01H
__BDF4D0CD_cstddef DB 01H
__7C4A1519_type_traits DB 01H
__FA77ED4C_malloc@h DB 01H
__89766DA4_corecrt_terminate@h DB 01H
__EEF52EF9_eh@h DB 01H
__85F4241F_vcruntime_exception@h DB 01H
__8124AFA8_exception DB 01H
__5003AD96_new DB 01H
__8B28237E_xatomic@h DB 01H
__E4CFD974_initializer_list DB 01H
__2F328FEB_utility DB 01H
__91F58E7E___msvc_iter_core@hpp DB 01H
__C27AFEEB_xutility DB 01H
__45A7EC28_xmemory DB 01H
__31746AB4_xstring DB 01H
__1392A162_cctype DB 01H
__C1864A34_string DB 01H
__9D469CC8_common@h DB 01H
__AE454FA2_lmcons@h DB 01H
__67F5F762_mprapidef@h DB 01H
__1F2B86E1_ipifcons@h DB 01H
__EFFE9D94_ifdef@h DB 01H
__AF31E881_ifmib@h DB 01H
__8BC2807C_nldef@h DB 01H
__7ABE0907_ipmib@h DB 01H
__2E95CCCA_tcpmib@h DB 01H
__2798F2DA_udpmib@h DB 01H
__FCC255DB_iprtrmib@h DB 01H
__B01BC3FD_in6addr@h DB 01H
__D834A143_ipexport@h DB 01H
__0A9237D2_time@h DB 01H
__82EB0637_iptypes@h DB 01H
__6063C472_tcpestats@h DB 01H
__63D3B6A5_netioapi@h DB 01H
__D1674A86_iphlpapi@h DB 01H
__F5D3A320_RestartManager@h DB 01H
__AAAC9FBE_TlHelp32@h DB 01H
__9B49ECA4_getapi@h DB 01H
__62F75DE5_metarandom2@h DB 01H
__93160BA8_array DB 01H
__722C6D77_MetaString@h DB 01H
__457AF2B3_logs@h DB 01H
__EF34CC1A_logs@cpp DB 01H
msvcjmc	ENDS
_DATA	SEGMENT
?g_LogHandle@@3PEAXEA DQ ffffffffffffffffH		; g_LogHandle
_DATA	ENDS
CONST	SEGMENT
?_Fake_alloc@std@@3U_Fake_allocator@1@B	ORG $+1		; std::_Fake_alloc
CONST	ENDS
PUBLIC	RtlSecureZeroMemory
PUBLIC	?pWriteFile@@YAHPEAXPEBXKPEAKPEAU_OVERLAPPED@@@Z ; pWriteFile
PUBLIC	?pCreateFileW@@YAPEAXPEB_WKKPEAU_SECURITY_ATTRIBUTES@@KKPEAX@Z ; pCreateFileW
PUBLIC	?pEnterCriticalSection@@YAXPEAU_RTL_CRITICAL_SECTION@@@Z ; pEnterCriticalSection
PUBLIC	?pLeaveCriticalSection@@YAXPEAU_RTL_CRITICAL_SECTION@@@Z ; pLeaveCriticalSection
PUBLIC	?pInitializeCriticalSection@@YAXPEAU_RTL_CRITICAL_SECTION@@@Z ; pInitializeCriticalSection
PUBLIC	?pSetFilePointer@@YAKPEAXJPEAJK@Z		; pSetFilePointer
PUBLIC	?pwvsprintfW@@YAHPEA_WPEB_WPEAD@Z		; pwvsprintfW
PUBLIC	?positive_modulo@@YAHHH@Z			; positive_modulo
PUBLIC	?Init@logs@@YAXPEB_W@Z				; logs::Init
PUBLIC	?Write@logs@@YAXPEB_WZZ				; logs::Write
PUBLIC	??0?$MetaBuffer@$04$0DJ@U?$integer_sequence@_K$0A@$00$01$02$03$04@std@@@@QEAA@PEBE@Z ; MetaBuffer<5,57,std::integer_sequence<unsigned __int64,0,1,2,3,4,5> >::MetaBuffer<5,57,std::integer_sequence<unsigned __int64,0,1,2,3,4,5> >
PUBLIC	?isDecrypted@?$MetaBuffer@$04$0DJ@U?$integer_sequence@_K$0A@$00$01$02$03$04@std@@@@QEBA_NXZ ; MetaBuffer<5,57,std::integer_sequence<unsigned __int64,0,1,2,3,4,5> >::isDecrypted
PUBLIC	?decrypt@?$MetaBuffer@$04$0DJ@U?$integer_sequence@_K$0A@$00$01$02$03$04@std@@@@QEAAPEBDXZ ; MetaBuffer<5,57,std::integer_sequence<unsigned __int64,0,1,2,3,4,5> >::decrypt
PUBLIC	?encrypt@?$MetaBuffer@$04$0DJ@U?$integer_sequence@_K$0A@$00$01$02$03$04@std@@@@AEBAEE@Z ; MetaBuffer<5,57,std::integer_sequence<unsigned __int64,0,1,2,3,4,5> >::encrypt
PUBLIC	?decrypt@?$MetaBuffer@$04$0DJ@U?$integer_sequence@_K$0A@$00$01$02$03$04@std@@@@AEBAEE@Z ; MetaBuffer<5,57,std::integer_sequence<unsigned __int64,0,1,2,3,4,5> >::decrypt
PUBLIC	??0?$MetaBuffer@$0DN@$0HK@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@@std@@@@QEAA@PEBE@Z ; MetaBuffer<61,122,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35> >::MetaBuffer<61,122,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35> >
PUBLIC	?isDecrypted@?$MetaBuffer@$0DN@$0HK@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@@std@@@@QEBA_NXZ ; MetaBuffer<61,122,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35> >::isDecrypted
PUBLIC	?decrypt@?$MetaBuffer@$0DN@$0HK@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@@std@@@@QEAAPEBDXZ ; MetaBuffer<61,122,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35> >::decrypt
PUBLIC	?encrypt@?$MetaBuffer@$0DN@$0HK@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@@std@@@@AEBAEE@Z ; MetaBuffer<61,122,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35> >::encrypt
PUBLIC	?decrypt@?$MetaBuffer@$0DN@$0HK@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@@std@@@@AEBAEE@Z ; MetaBuffer<61,122,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35> >::decrypt
PUBLIC	__JustMyCode_Default
PUBLIC	??_C@_15JNBOKNOG@?$AA?$AN?$AA?6@		; `string'
PUBLIC	??_C@_1CE@MDGPDCAG@?$AA?$FL?$AA?$CF?$AA0?$AA2?$AAd?$AA?3?$AA?$CF?$AA0?$AA2?$AAd?$AA?3?$AA?$CF?$AA0?$AA2?$AAd@ ; `string'
EXTRN	__imp_GetLocalTime:PROC
EXTRN	__imp_wsprintfW:PROC
EXTRN	?GetProcAddressEx2@getapi@@YAPEAXPEADKKH@Z:PROC	; getapi::GetProcAddressEx2
EXTRN	_RTC_CheckStackVars:PROC
EXTRN	_RTC_InitBase:PROC
EXTRN	_RTC_Shutdown:PROC
EXTRN	__CheckForDebuggerJustMyCode:PROC
EXTRN	__GSHandlerCheck:PROC
EXTRN	__security_check_cookie:PROC
EXTRN	__security_cookie:QWORD
;	COMDAT pdata
pdata	SEGMENT
$pdata$RtlSecureZeroMemory DD imagerel $LN3
	DD	imagerel $LN3+79
	DD	imagerel $unwind$RtlSecureZeroMemory
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?pWriteFile@@YAHPEAXPEBXKPEAKPEAU_OVERLAPPED@@@Z DD imagerel $LN3
	DD	imagerel $LN3+127
	DD	imagerel $unwind$?pWriteFile@@YAHPEAXPEBXKPEAKPEAU_OVERLAPPED@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?pCreateFileW@@YAPEAXPEB_WKKPEAU_SECURITY_ATTRIBUTES@@KKPEAX@Z DD imagerel $LN3
	DD	imagerel $LN3+145
	DD	imagerel $unwind$?pCreateFileW@@YAPEAXPEB_WKKPEAU_SECURITY_ATTRIBUTES@@KKPEAX@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?pEnterCriticalSection@@YAXPEAU_RTL_CRITICAL_SECTION@@@Z DD imagerel $LN3
	DD	imagerel $LN3+79
	DD	imagerel $unwind$?pEnterCriticalSection@@YAXPEAU_RTL_CRITICAL_SECTION@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?pLeaveCriticalSection@@YAXPEAU_RTL_CRITICAL_SECTION@@@Z DD imagerel $LN3
	DD	imagerel $LN3+79
	DD	imagerel $unwind$?pLeaveCriticalSection@@YAXPEAU_RTL_CRITICAL_SECTION@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?pInitializeCriticalSection@@YAXPEAU_RTL_CRITICAL_SECTION@@@Z DD imagerel $LN3
	DD	imagerel $LN3+79
	DD	imagerel $unwind$?pInitializeCriticalSection@@YAXPEAU_RTL_CRITICAL_SECTION@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?pSetFilePointer@@YAKPEAXJPEAJK@Z DD imagerel $LN3
	DD	imagerel $LN3+113
	DD	imagerel $unwind$?pSetFilePointer@@YAKPEAXJPEAJK@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?pwvsprintfW@@YAHPEA_WPEB_WPEAD@Z DD imagerel $LN3
	DD	imagerel $LN3+103
	DD	imagerel $unwind$?pwvsprintfW@@YAHPEA_WPEB_WPEAD@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?positive_modulo@@YAHHH@Z DD imagerel $LN3
	DD	imagerel $LN3+74
	DD	imagerel $unwind$?positive_modulo@@YAHHH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?Init@logs@@YAXPEB_W@Z DD imagerel $LN3
	DD	imagerel $LN3+134
	DD	imagerel $unwind$?Init@logs@@YAXPEB_W@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?Write@logs@@YAXPEB_WZZ DD imagerel $LN6
	DD	imagerel $LN6+555
	DD	imagerel $unwind$?Write@logs@@YAXPEB_WZZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$MetaBuffer@$04$0DJ@U?$integer_sequence@_K$0A@$00$01$02$03$04@std@@@@QEAA@PEBE@Z DD imagerel $LN3
	DD	imagerel $LN3+332
	DD	imagerel $unwind$??0?$MetaBuffer@$04$0DJ@U?$integer_sequence@_K$0A@$00$01$02$03$04@std@@@@QEAA@PEBE@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?isDecrypted@?$MetaBuffer@$04$0DJ@U?$integer_sequence@_K$0A@$00$01$02$03$04@std@@@@QEBA_NXZ DD imagerel $LN3
	DD	imagerel $LN3+51
	DD	imagerel $unwind$?isDecrypted@?$MetaBuffer@$04$0DJ@U?$integer_sequence@_K$0A@$00$01$02$03$04@std@@@@QEBA_NXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?decrypt@?$MetaBuffer@$04$0DJ@U?$integer_sequence@_K$0A@$00$01$02$03$04@std@@@@QEAAPEBDXZ DD imagerel $LN7
	DD	imagerel $LN7+153
	DD	imagerel $unwind$?decrypt@?$MetaBuffer@$04$0DJ@U?$integer_sequence@_K$0A@$00$01$02$03$04@std@@@@QEAAPEBDXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?encrypt@?$MetaBuffer@$04$0DJ@U?$integer_sequence@_K$0A@$00$01$02$03$04@std@@@@AEBAEE@Z DD imagerel $LN3
	DD	imagerel $LN3+68
	DD	imagerel $unwind$?encrypt@?$MetaBuffer@$04$0DJ@U?$integer_sequence@_K$0A@$00$01$02$03$04@std@@@@AEBAEE@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?decrypt@?$MetaBuffer@$04$0DJ@U?$integer_sequence@_K$0A@$00$01$02$03$04@std@@@@AEBAEE@Z DD imagerel $LN3
	DD	imagerel $LN3+70
	DD	imagerel $unwind$?decrypt@?$MetaBuffer@$04$0DJ@U?$integer_sequence@_K$0A@$00$01$02$03$04@std@@@@AEBAEE@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$MetaBuffer@$0DN@$0HK@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@@std@@@@QEAA@PEBE@Z DD imagerel $LN3
	DD	imagerel $LN3+1592
	DD	imagerel $unwind$??0?$MetaBuffer@$0DN@$0HK@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@@std@@@@QEAA@PEBE@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?isDecrypted@?$MetaBuffer@$0DN@$0HK@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@@std@@@@QEBA_NXZ DD imagerel $LN3
	DD	imagerel $LN3+51
	DD	imagerel $unwind$?isDecrypted@?$MetaBuffer@$0DN@$0HK@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@@std@@@@QEBA_NXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?decrypt@?$MetaBuffer@$0DN@$0HK@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@@std@@@@QEAAPEBDXZ DD imagerel $LN7
	DD	imagerel $LN7+153
	DD	imagerel $unwind$?decrypt@?$MetaBuffer@$0DN@$0HK@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@@std@@@@QEAAPEBDXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?encrypt@?$MetaBuffer@$0DN@$0HK@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@@std@@@@AEBAEE@Z DD imagerel $LN3
	DD	imagerel $LN3+68
	DD	imagerel $unwind$?encrypt@?$MetaBuffer@$0DN@$0HK@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@@std@@@@AEBAEE@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?decrypt@?$MetaBuffer@$0DN@$0HK@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@@std@@@@AEBAEE@Z DD imagerel $LN3
	DD	imagerel $LN3+70
	DD	imagerel $unwind$?decrypt@?$MetaBuffer@$0DN@$0HK@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@@std@@@@AEBAEE@Z
pdata	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
_RTC_Shutdown.rtc$TMZ DQ FLAT:_RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
_RTC_InitBase.rtc$IMZ DQ FLAT:_RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT ??_C@_1CE@MDGPDCAG@?$AA?$FL?$AA?$CF?$AA0?$AA2?$AAd?$AA?3?$AA?$CF?$AA0?$AA2?$AAd?$AA?3?$AA?$CF?$AA0?$AA2?$AAd@
CONST	SEGMENT
??_C@_1CE@MDGPDCAG@?$AA?$FL?$AA?$CF?$AA0?$AA2?$AAd?$AA?3?$AA?$CF?$AA0?$AA2?$AAd?$AA?3?$AA?$CF?$AA0?$AA2?$AAd@ DB '['
	DB	00H, '%', 00H, '0', 00H, '2', 00H, 'd', 00H, ':', 00H, '%', 00H
	DB	'0', 00H, '2', 00H, 'd', 00H, ':', 00H, '%', 00H, '0', 00H, '2'
	DB	00H, 'd', 00H, ']', 00H, ' ', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_15JNBOKNOG@?$AA?$AN?$AA?6@
CONST	SEGMENT
??_C@_15JNBOKNOG@?$AA?$AN?$AA?6@ DB 0dH, 00H, 0aH, 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?decrypt@?$MetaBuffer@$0DN@$0HK@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@@std@@@@AEBAEE@Z DD 025051701H
	DD	01122317H
	DD	0700b001dH
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?encrypt@?$MetaBuffer@$0DN@$0HK@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@@std@@@@AEBAEE@Z DD 025051701H
	DD	01122317H
	DD	0700b001dH
	DD	0500aH
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	05fH
	DB	080H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?decrypt@?$MetaBuffer@$0DN@$0HK@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@@std@@@@QEAAPEBDXZ DD 025051301H
	DD	010e2313H
	DD	070070021H
	DD	05006H
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	026H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?isDecrypted@?$MetaBuffer@$0DN@$0HK@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@@std@@@@QEBA_NXZ DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	02bH
	DW	055H
	DW	07fH
	DW	0a9H
	DW	0d3H
	DW	0fdH
	DW	0127H
	DW	0151H
	DW	017bH
	DW	01a5H
	DW	01cfH
	DW	01f9H
	DW	0223H
	DW	024dH
	DW	0277H
	DW	02a1H
	DW	02cbH
	DW	02f5H
	DW	031fH
	DW	0349H
	DW	0373H
	DW	039dH
	DW	03c7H
	DW	03f1H
	DW	041bH
	DW	0445H
	DW	046fH
	DW	0499H
	DW	04c3H
	DW	04edH
	DW	0517H
	DW	0541H
	DW	056bH
	DW	0595H
	DW	05bfH
	DW	05e9H
	DW	0613H
	DW	061dH
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$MetaBuffer@$0DN@$0HK@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@@std@@@@QEAA@PEBE@Z DD 025051801H
	DD	01132318H
	DD	0700c001fH
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?decrypt@?$MetaBuffer@$04$0DJ@U?$integer_sequence@_K$0A@$00$01$02$03$04@std@@@@AEBAEE@Z DD 025051701H
	DD	01122317H
	DD	0700b001dH
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?encrypt@?$MetaBuffer@$04$0DJ@U?$integer_sequence@_K$0A@$00$01$02$03$04@std@@@@AEBAEE@Z DD 025051701H
	DD	01122317H
	DD	0700b001dH
	DD	0500aH
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	05fH
	DB	080H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?decrypt@?$MetaBuffer@$04$0DJ@U?$integer_sequence@_K$0A@$00$01$02$03$04@std@@@@QEAAPEBDXZ DD 025051301H
	DD	010e2313H
	DD	070070021H
	DD	05006H
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	026H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?isDecrypted@?$MetaBuffer@$04$0DJ@U?$integer_sequence@_K$0A@$00$01$02$03$04@std@@@@QEBA_NXZ DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	02bH
	DW	055H
	DW	07fH
	DW	0a9H
	DW	0d3H
	DW	0fdH
	DW	0127H
	DW	0131H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$MetaBuffer@$04$0DJ@U?$integer_sequence@_K$0A@$00$01$02$03$04@std@@@@QEAA@PEBE@Z DD 025051801H
	DD	01132318H
	DD	0700c001fH
	DD	0500bH
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	045H
	DW	0212H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?Write@logs@@YAXPEB_WZZ DD 035054c19H
	DD	011d3322H
	DD	0701601ebH
	DD	05015H
	DD	imagerel __GSHandlerCheck
	DD	0f40H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?Write@logs@@YAXPEB_WZZ$rtcName$0 DB 041H		; logs::Write
	DB	072H
	DB	067H
	DB	073H
	DB	00H
	ORG $+3
?Write@logs@@YAXPEB_WZZ$rtcName$1 DB 042H		; logs::Write
	DB	075H
	DB	066H
	DB	066H
	DB	065H
	DB	072H
	DB	00H
	ORG $+1
?Write@logs@@YAXPEB_WZZ$rtcName$2 DB 064H		; logs::Write
	DB	077H
	DB	057H
	DB	072H
	DB	069H
	DB	074H
	DB	074H
	DB	065H
	DB	06eH
	DB	00H
	ORG $+6
?Write@logs@@YAXPEB_WZZ$rtcName$3 DB 054H		; logs::Write
	DB	069H
	DB	06dH
	DB	065H
	DB	042H
	DB	075H
	DB	066H
	DB	066H
	DB	065H
	DB	072H
	DB	00H
	ORG $+1
?Write@logs@@YAXPEB_WZZ$rtcName$4 DB 073H		; logs::Write
	DB	074H
	DB	00H
	ORG $+1
?Write@logs@@YAXPEB_WZZ$rtcVarDesc DD 09f8H		; logs::Write
	DD	010H
	DQ	FLAT:?Write@logs@@YAXPEB_WZZ$rtcName$4
	DD	08e0H
	DD	0100H
	DQ	FLAT:?Write@logs@@YAXPEB_WZZ$rtcName$3
	DD	08b4H
	DD	04H
	DQ	FLAT:?Write@logs@@YAXPEB_WZZ$rtcName$2
	DD	060H
	DD	0800H
	DQ	FLAT:?Write@logs@@YAXPEB_WZZ$rtcName$1
	DD	038H
	DD	08H
	DQ	FLAT:?Write@logs@@YAXPEB_WZZ$rtcName$0
	ORG $+240
?Write@logs@@YAXPEB_WZZ$rtcFrameData DD 05H		; logs::Write
	DD	00H
	DQ	FLAT:?Write@logs@@YAXPEB_WZZ$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?Init@logs@@YAXPEB_W@Z DD 045051301H
	DD	010e4313H
	DD	070070021H
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?positive_modulo@@YAHHH@Z DD 025051601H
	DD	01112316H
	DD	0700a001dH
	DD	05009H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?pwvsprintfW@@YAHPEA_WPEB_WPEAD@Z DD 025051d01H
	DD	0118231dH
	DD	070110021H
	DD	05010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?pSetFilePointer@@YAKPEAXJPEAJK@Z DD 025052101H
	DD	011c2321H
	DD	070150021H
	DD	05014H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?pInitializeCriticalSection@@YAXPEAU_RTL_CRITICAL_SECTION@@@Z DD 025051301H
	DD	010e2313H
	DD	070070021H
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?pLeaveCriticalSection@@YAXPEAU_RTL_CRITICAL_SECTION@@@Z DD 025051301H
	DD	010e2313H
	DD	070070021H
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?pEnterCriticalSection@@YAXPEAU_RTL_CRITICAL_SECTION@@@Z DD 025051301H
	DD	010e2313H
	DD	070070021H
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?pCreateFileW@@YAPEAXPEB_WKKPEAU_SECURITY_ATTRIBUTES@@KKPEAX@Z DD 045052101H
	DD	011c4321H
	DD	070150025H
	DD	05014H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?pWriteFile@@YAHPEAXPEBXKPEAKPEAU_OVERLAPPED@@@Z DD 035052201H
	DD	011d3322H
	DD	070160023H
	DD	05015H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$RtlSecureZeroMemory DD 025051801H
	DD	01132318H
	DD	0700c0021H
	DD	0500bH
xdata	ENDS
; Function compile flags: /Odt
;	COMDAT __JustMyCode_Default
_TEXT	SEGMENT
__JustMyCode_Default PROC				; COMDAT
  00000	c2 00 00	 ret	 0
__JustMyCode_Default ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\obfuscation\MetaString.h
;	COMDAT ?decrypt@?$MetaBuffer@$0DN@$0HK@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@@std@@@@AEBAEE@Z
_TEXT	SEGMENT
this$ = 224
byte$ = 232
?decrypt@?$MetaBuffer@$0DN@$0HK@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@@std@@@@AEBAEE@Z PROC ; MetaBuffer<61,122,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35> >::decrypt, COMDAT

; 79   :     {

$LN3:
  00000	88 54 24 10	 mov	 BYTE PTR [rsp+16], dl
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	55		 push	 rbp
  0000a	57		 push	 rdi
  0000b	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00012	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00017	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__722C6D77_MetaString@h
  0001e	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 80   :         return positive_modulo(ExtendedEuclidian<127, A>::y * (byte - B), 127);

  00023	0f b6 85 e8 00
	00 00		 movzx	 eax, BYTE PTR byte$[rbp]
  0002a	83 e8 7a	 sub	 eax, 122		; 0000007aH
  0002d	6b c0 19	 imul	 eax, eax, 25
  00030	ba 7f 00 00 00	 mov	 edx, 127		; 0000007fH
  00035	8b c8		 mov	 ecx, eax
  00037	e8 00 00 00 00	 call	 ?positive_modulo@@YAHHH@Z ; positive_modulo

; 81   :     }

  0003c	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00043	5f		 pop	 rdi
  00044	5d		 pop	 rbp
  00045	c3		 ret	 0
?decrypt@?$MetaBuffer@$0DN@$0HK@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@@std@@@@AEBAEE@Z ENDP ; MetaBuffer<61,122,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35> >::decrypt
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\obfuscation\MetaString.h
;	COMDAT ?encrypt@?$MetaBuffer@$0DN@$0HK@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@@std@@@@AEBAEE@Z
_TEXT	SEGMENT
this$ = 224
byte$ = 232
?encrypt@?$MetaBuffer@$0DN@$0HK@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@@std@@@@AEBAEE@Z PROC ; MetaBuffer<61,122,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35> >::encrypt, COMDAT

; 74   :     {

$LN3:
  00000	88 54 24 10	 mov	 BYTE PTR [rsp+16], dl
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	55		 push	 rbp
  0000a	57		 push	 rdi
  0000b	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00012	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00017	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__722C6D77_MetaString@h
  0001e	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 75   :         return (A * byte + B) % 127;

  00023	0f b6 85 e8 00
	00 00		 movzx	 eax, BYTE PTR byte$[rbp]
  0002a	6b c0 3d	 imul	 eax, eax, 61		; 0000003dH
  0002d	83 c0 7a	 add	 eax, 122		; 0000007aH
  00030	99		 cdq
  00031	b9 7f 00 00 00	 mov	 ecx, 127		; 0000007fH
  00036	f7 f9		 idiv	 ecx
  00038	8b c2		 mov	 eax, edx

; 76   :     }

  0003a	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00041	5f		 pop	 rdi
  00042	5d		 pop	 rbp
  00043	c3		 ret	 0
?encrypt@?$MetaBuffer@$0DN@$0HK@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@@std@@@@AEBAEE@Z ENDP ; MetaBuffer<61,122,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35> >::encrypt
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\obfuscation\MetaString.h
;	COMDAT ?decrypt@?$MetaBuffer@$0DN@$0HK@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@@std@@@@QEAAPEBDXZ
_TEXT	SEGMENT
i$1 = 8
this$ = 256
?decrypt@?$MetaBuffer@$0DN@$0HK@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@@std@@@@QEAAPEBDXZ PROC ; MetaBuffer<61,122,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35> >::decrypt, COMDAT

; 62   :     {

$LN7:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__722C6D77_MetaString@h
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 63   :         if (!isDecrypted())

  0001f	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00026	e8 00 00 00 00	 call	 ?isDecrypted@?$MetaBuffer@$0DN@$0HK@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@@std@@@@QEBA_NXZ ; MetaBuffer<61,122,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35> >::isDecrypted
  0002b	0f b6 c0	 movzx	 eax, al
  0002e	85 c0		 test	 eax, eax
  00030	75 53		 jne	 SHORT $LN5@decrypt

; 64   :         {
; 65   :             for (size_t i = 0; i < sizeof...(Ints); ++i)

  00032	48 c7 45 08 00
	00 00 00	 mov	 QWORD PTR i$1[rbp], 0
  0003a	eb 0b		 jmp	 SHORT $LN4@decrypt
$LN2@decrypt:
  0003c	48 8b 45 08	 mov	 rax, QWORD PTR i$1[rbp]
  00040	48 ff c0	 inc	 rax
  00043	48 89 45 08	 mov	 QWORD PTR i$1[rbp], rax
$LN4@decrypt:
  00047	48 83 7d 08 24	 cmp	 QWORD PTR i$1[rbp], 36	; 00000024H
  0004c	73 37		 jae	 SHORT $LN3@decrypt

; 66   :                 m_buffer[i] = decrypt(m_buffer[i]);

  0004e	48 8b 45 08	 mov	 rax, QWORD PTR i$1[rbp]
  00052	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00059	48 03 c8	 add	 rcx, rax
  0005c	48 8b c1	 mov	 rax, rcx
  0005f	0f b6 50 01	 movzx	 edx, BYTE PTR [rax+1]
  00063	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0006a	e8 00 00 00 00	 call	 ?decrypt@?$MetaBuffer@$0DN@$0HK@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@@std@@@@AEBAEE@Z ; MetaBuffer<61,122,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35> >::decrypt
  0006f	48 8b 4d 08	 mov	 rcx, QWORD PTR i$1[rbp]
  00073	48 8b 95 00 01
	00 00		 mov	 rdx, QWORD PTR this$[rbp]
  0007a	48 03 d1	 add	 rdx, rcx
  0007d	48 8b ca	 mov	 rcx, rdx
  00080	88 41 01	 mov	 BYTE PTR [rcx+1], al
  00083	eb b7		 jmp	 SHORT $LN2@decrypt
$LN3@decrypt:
$LN5@decrypt:

; 67   :         }
; 68   : 
; 69   :         return (const char*)m_buffer;

  00085	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0008c	48 ff c0	 inc	 rax

; 70   :     }

  0008f	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  00096	5f		 pop	 rdi
  00097	5d		 pop	 rbp
  00098	c3		 ret	 0
?decrypt@?$MetaBuffer@$0DN@$0HK@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@@std@@@@QEAAPEBDXZ ENDP ; MetaBuffer<61,122,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35> >::decrypt
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\obfuscation\MetaString.h
;	COMDAT ?isDecrypted@?$MetaBuffer@$0DN@$0HK@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@@std@@@@QEBA_NXZ
_TEXT	SEGMENT
this$ = 224
?isDecrypted@?$MetaBuffer@$0DN@$0HK@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@@std@@@@QEBA_NXZ PROC ; MetaBuffer<61,122,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35> >::isDecrypted, COMDAT

; 57   :     {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__722C6D77_MetaString@h
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 58   :         return m_isDecrypted;

  0001f	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00026	0f b6 00	 movzx	 eax, BYTE PTR [rax]

; 59   :     }

  00029	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00030	5f		 pop	 rdi
  00031	5d		 pop	 rbp
  00032	c3		 ret	 0
?isDecrypted@?$MetaBuffer@$0DN@$0HK@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@@std@@@@QEBA_NXZ ENDP ; MetaBuffer<61,122,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35> >::isDecrypted
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\obfuscation\MetaString.h
;	COMDAT ??0?$MetaBuffer@$0DN@$0HK@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@@std@@@@QEAA@PEBE@Z
_TEXT	SEGMENT
tv350 = 192
this$ = 240
data$ = 248
??0?$MetaBuffer@$0DN@$0HK@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@@std@@@@QEAA@PEBE@Z PROC ; MetaBuffer<61,122,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35> >::MetaBuffer<61,122,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35> >, COMDAT

; 50   :     constexpr __forceinline MetaBuffer(const unsigned char* data)

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec f8 00
	00 00		 sub	 rsp, 248		; 000000f8H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__722C6D77_MetaString@h
  0001f	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 55   : 
; 56   :     inline bool isDecrypted() const
; 57   :     {
; 58   :         return m_isDecrypted;
; 59   :     }
; 60   : 
; 61   :     inline const char* decrypt()
; 62   :     {
; 63   :         if (!isDecrypted())
; 64   :         {
; 65   :             for (size_t i = 0; i < sizeof...(Ints); ++i)
; 66   :                 m_buffer[i] = decrypt(m_buffer[i]);
; 67   :         }
; 68   : 
; 69   :         return (const char*)m_buffer;
; 70   :     }
; 71   : 
; 72   : private:
; 73   :     constexpr unsigned char __forceinline encrypt(unsigned char byte) const
; 74   :     {
; 75   :         return (A * byte + B) % 127;
; 76   :     }
; 77   : 
; 78   :     constexpr unsigned char __forceinline decrypt(unsigned char byte) const
; 79   :     {
; 80   :         return positive_modulo(ExtendedEuclidian<127, A>::y * (byte - B), 127);
; 81   :     }
; 82   : 
; 83   :     volatile bool m_isDecrypted = false;

  00024	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0002b	c6 00 00	 mov	 BYTE PTR [rax], 0

; 51   :         : m_buffer{ encrypt(data[Ints])... }

  0002e	b8 01 00 00 00	 mov	 eax, 1
  00033	48 6b c0 00	 imul	 rax, rax, 0
  00037	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  0003e	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00042	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00049	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0DN@$0HK@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@@std@@@@AEBAEE@Z ; MetaBuffer<61,122,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35> >::encrypt
  0004e	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00055	88 41 01	 mov	 BYTE PTR [rcx+1], al
  00058	b8 01 00 00 00	 mov	 eax, 1
  0005d	48 6b c0 01	 imul	 rax, rax, 1
  00061	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00068	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  0006c	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00073	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0DN@$0HK@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@@std@@@@AEBAEE@Z ; MetaBuffer<61,122,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35> >::encrypt
  00078	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0007f	88 41 02	 mov	 BYTE PTR [rcx+2], al
  00082	b8 01 00 00 00	 mov	 eax, 1
  00087	48 6b c0 02	 imul	 rax, rax, 2
  0008b	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00092	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00096	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0009d	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0DN@$0HK@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@@std@@@@AEBAEE@Z ; MetaBuffer<61,122,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35> >::encrypt
  000a2	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000a9	88 41 03	 mov	 BYTE PTR [rcx+3], al
  000ac	b8 01 00 00 00	 mov	 eax, 1
  000b1	48 6b c0 03	 imul	 rax, rax, 3
  000b5	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  000bc	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  000c0	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000c7	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0DN@$0HK@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@@std@@@@AEBAEE@Z ; MetaBuffer<61,122,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35> >::encrypt
  000cc	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000d3	88 41 04	 mov	 BYTE PTR [rcx+4], al
  000d6	b8 01 00 00 00	 mov	 eax, 1
  000db	48 6b c0 04	 imul	 rax, rax, 4
  000df	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  000e6	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  000ea	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000f1	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0DN@$0HK@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@@std@@@@AEBAEE@Z ; MetaBuffer<61,122,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35> >::encrypt
  000f6	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000fd	88 41 05	 mov	 BYTE PTR [rcx+5], al
  00100	b8 01 00 00 00	 mov	 eax, 1
  00105	48 6b c0 05	 imul	 rax, rax, 5
  00109	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00110	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00114	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0011b	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0DN@$0HK@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@@std@@@@AEBAEE@Z ; MetaBuffer<61,122,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35> >::encrypt
  00120	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00127	88 41 06	 mov	 BYTE PTR [rcx+6], al
  0012a	b8 01 00 00 00	 mov	 eax, 1
  0012f	48 6b c0 06	 imul	 rax, rax, 6
  00133	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  0013a	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  0013e	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00145	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0DN@$0HK@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@@std@@@@AEBAEE@Z ; MetaBuffer<61,122,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35> >::encrypt
  0014a	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00151	88 41 07	 mov	 BYTE PTR [rcx+7], al
  00154	b8 01 00 00 00	 mov	 eax, 1
  00159	48 6b c0 07	 imul	 rax, rax, 7
  0015d	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00164	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00168	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0016f	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0DN@$0HK@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@@std@@@@AEBAEE@Z ; MetaBuffer<61,122,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35> >::encrypt
  00174	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0017b	88 41 08	 mov	 BYTE PTR [rcx+8], al
  0017e	b8 01 00 00 00	 mov	 eax, 1
  00183	48 6b c0 08	 imul	 rax, rax, 8
  00187	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  0018e	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00192	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00199	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0DN@$0HK@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@@std@@@@AEBAEE@Z ; MetaBuffer<61,122,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35> >::encrypt
  0019e	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  001a5	88 41 09	 mov	 BYTE PTR [rcx+9], al
  001a8	b8 01 00 00 00	 mov	 eax, 1
  001ad	48 6b c0 09	 imul	 rax, rax, 9
  001b1	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  001b8	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  001bc	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  001c3	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0DN@$0HK@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@@std@@@@AEBAEE@Z ; MetaBuffer<61,122,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35> >::encrypt
  001c8	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  001cf	88 41 0a	 mov	 BYTE PTR [rcx+10], al
  001d2	b8 01 00 00 00	 mov	 eax, 1
  001d7	48 6b c0 0a	 imul	 rax, rax, 10
  001db	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  001e2	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  001e6	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  001ed	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0DN@$0HK@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@@std@@@@AEBAEE@Z ; MetaBuffer<61,122,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35> >::encrypt
  001f2	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  001f9	88 41 0b	 mov	 BYTE PTR [rcx+11], al
  001fc	b8 01 00 00 00	 mov	 eax, 1
  00201	48 6b c0 0b	 imul	 rax, rax, 11
  00205	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  0020c	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00210	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00217	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0DN@$0HK@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@@std@@@@AEBAEE@Z ; MetaBuffer<61,122,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35> >::encrypt
  0021c	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00223	88 41 0c	 mov	 BYTE PTR [rcx+12], al
  00226	b8 01 00 00 00	 mov	 eax, 1
  0022b	48 6b c0 0c	 imul	 rax, rax, 12
  0022f	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00236	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  0023a	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00241	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0DN@$0HK@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@@std@@@@AEBAEE@Z ; MetaBuffer<61,122,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35> >::encrypt
  00246	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0024d	88 41 0d	 mov	 BYTE PTR [rcx+13], al
  00250	b8 01 00 00 00	 mov	 eax, 1
  00255	48 6b c0 0d	 imul	 rax, rax, 13
  00259	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00260	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00264	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0026b	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0DN@$0HK@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@@std@@@@AEBAEE@Z ; MetaBuffer<61,122,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35> >::encrypt
  00270	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00277	88 41 0e	 mov	 BYTE PTR [rcx+14], al
  0027a	b8 01 00 00 00	 mov	 eax, 1
  0027f	48 6b c0 0e	 imul	 rax, rax, 14
  00283	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  0028a	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  0028e	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00295	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0DN@$0HK@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@@std@@@@AEBAEE@Z ; MetaBuffer<61,122,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35> >::encrypt
  0029a	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  002a1	88 41 0f	 mov	 BYTE PTR [rcx+15], al
  002a4	b8 01 00 00 00	 mov	 eax, 1
  002a9	48 6b c0 0f	 imul	 rax, rax, 15
  002ad	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  002b4	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  002b8	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  002bf	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0DN@$0HK@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@@std@@@@AEBAEE@Z ; MetaBuffer<61,122,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35> >::encrypt
  002c4	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  002cb	88 41 10	 mov	 BYTE PTR [rcx+16], al
  002ce	b8 01 00 00 00	 mov	 eax, 1
  002d3	48 6b c0 10	 imul	 rax, rax, 16
  002d7	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  002de	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  002e2	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  002e9	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0DN@$0HK@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@@std@@@@AEBAEE@Z ; MetaBuffer<61,122,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35> >::encrypt
  002ee	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  002f5	88 41 11	 mov	 BYTE PTR [rcx+17], al
  002f8	b8 01 00 00 00	 mov	 eax, 1
  002fd	48 6b c0 11	 imul	 rax, rax, 17
  00301	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00308	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  0030c	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00313	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0DN@$0HK@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@@std@@@@AEBAEE@Z ; MetaBuffer<61,122,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35> >::encrypt
  00318	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0031f	88 41 12	 mov	 BYTE PTR [rcx+18], al
  00322	b8 01 00 00 00	 mov	 eax, 1
  00327	48 6b c0 12	 imul	 rax, rax, 18
  0032b	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00332	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00336	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0033d	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0DN@$0HK@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@@std@@@@AEBAEE@Z ; MetaBuffer<61,122,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35> >::encrypt
  00342	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00349	88 41 13	 mov	 BYTE PTR [rcx+19], al
  0034c	b8 01 00 00 00	 mov	 eax, 1
  00351	48 6b c0 13	 imul	 rax, rax, 19
  00355	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  0035c	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00360	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00367	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0DN@$0HK@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@@std@@@@AEBAEE@Z ; MetaBuffer<61,122,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35> >::encrypt
  0036c	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00373	88 41 14	 mov	 BYTE PTR [rcx+20], al
  00376	b8 01 00 00 00	 mov	 eax, 1
  0037b	48 6b c0 14	 imul	 rax, rax, 20
  0037f	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00386	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  0038a	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00391	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0DN@$0HK@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@@std@@@@AEBAEE@Z ; MetaBuffer<61,122,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35> >::encrypt
  00396	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0039d	88 41 15	 mov	 BYTE PTR [rcx+21], al
  003a0	b8 01 00 00 00	 mov	 eax, 1
  003a5	48 6b c0 15	 imul	 rax, rax, 21
  003a9	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  003b0	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  003b4	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  003bb	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0DN@$0HK@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@@std@@@@AEBAEE@Z ; MetaBuffer<61,122,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35> >::encrypt
  003c0	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  003c7	88 41 16	 mov	 BYTE PTR [rcx+22], al
  003ca	b8 01 00 00 00	 mov	 eax, 1
  003cf	48 6b c0 16	 imul	 rax, rax, 22
  003d3	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  003da	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  003de	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  003e5	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0DN@$0HK@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@@std@@@@AEBAEE@Z ; MetaBuffer<61,122,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35> >::encrypt
  003ea	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  003f1	88 41 17	 mov	 BYTE PTR [rcx+23], al
  003f4	b8 01 00 00 00	 mov	 eax, 1
  003f9	48 6b c0 17	 imul	 rax, rax, 23
  003fd	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00404	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00408	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0040f	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0DN@$0HK@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@@std@@@@AEBAEE@Z ; MetaBuffer<61,122,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35> >::encrypt
  00414	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0041b	88 41 18	 mov	 BYTE PTR [rcx+24], al
  0041e	b8 01 00 00 00	 mov	 eax, 1
  00423	48 6b c0 18	 imul	 rax, rax, 24
  00427	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  0042e	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00432	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00439	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0DN@$0HK@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@@std@@@@AEBAEE@Z ; MetaBuffer<61,122,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35> >::encrypt
  0043e	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00445	88 41 19	 mov	 BYTE PTR [rcx+25], al
  00448	b8 01 00 00 00	 mov	 eax, 1
  0044d	48 6b c0 19	 imul	 rax, rax, 25
  00451	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00458	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  0045c	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00463	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0DN@$0HK@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@@std@@@@AEBAEE@Z ; MetaBuffer<61,122,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35> >::encrypt
  00468	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0046f	88 41 1a	 mov	 BYTE PTR [rcx+26], al
  00472	b8 01 00 00 00	 mov	 eax, 1
  00477	48 6b c0 1a	 imul	 rax, rax, 26
  0047b	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00482	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00486	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0048d	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0DN@$0HK@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@@std@@@@AEBAEE@Z ; MetaBuffer<61,122,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35> >::encrypt
  00492	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00499	88 41 1b	 mov	 BYTE PTR [rcx+27], al
  0049c	b8 01 00 00 00	 mov	 eax, 1
  004a1	48 6b c0 1b	 imul	 rax, rax, 27
  004a5	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  004ac	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  004b0	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  004b7	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0DN@$0HK@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@@std@@@@AEBAEE@Z ; MetaBuffer<61,122,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35> >::encrypt
  004bc	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  004c3	88 41 1c	 mov	 BYTE PTR [rcx+28], al
  004c6	b8 01 00 00 00	 mov	 eax, 1
  004cb	48 6b c0 1c	 imul	 rax, rax, 28
  004cf	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  004d6	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  004da	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  004e1	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0DN@$0HK@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@@std@@@@AEBAEE@Z ; MetaBuffer<61,122,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35> >::encrypt
  004e6	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  004ed	88 41 1d	 mov	 BYTE PTR [rcx+29], al
  004f0	b8 01 00 00 00	 mov	 eax, 1
  004f5	48 6b c0 1d	 imul	 rax, rax, 29
  004f9	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00500	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00504	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0050b	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0DN@$0HK@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@@std@@@@AEBAEE@Z ; MetaBuffer<61,122,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35> >::encrypt
  00510	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00517	88 41 1e	 mov	 BYTE PTR [rcx+30], al
  0051a	b8 01 00 00 00	 mov	 eax, 1
  0051f	48 6b c0 1e	 imul	 rax, rax, 30
  00523	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  0052a	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  0052e	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00535	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0DN@$0HK@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@@std@@@@AEBAEE@Z ; MetaBuffer<61,122,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35> >::encrypt
  0053a	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00541	88 41 1f	 mov	 BYTE PTR [rcx+31], al
  00544	b8 01 00 00 00	 mov	 eax, 1
  00549	48 6b c0 1f	 imul	 rax, rax, 31
  0054d	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00554	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00558	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0055f	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0DN@$0HK@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@@std@@@@AEBAEE@Z ; MetaBuffer<61,122,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35> >::encrypt
  00564	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0056b	88 41 20	 mov	 BYTE PTR [rcx+32], al
  0056e	b8 01 00 00 00	 mov	 eax, 1
  00573	48 6b c0 20	 imul	 rax, rax, 32		; 00000020H
  00577	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  0057e	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00582	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00589	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0DN@$0HK@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@@std@@@@AEBAEE@Z ; MetaBuffer<61,122,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35> >::encrypt
  0058e	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00595	88 41 21	 mov	 BYTE PTR [rcx+33], al
  00598	b8 01 00 00 00	 mov	 eax, 1
  0059d	48 6b c0 21	 imul	 rax, rax, 33		; 00000021H
  005a1	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  005a8	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  005ac	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  005b3	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0DN@$0HK@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@@std@@@@AEBAEE@Z ; MetaBuffer<61,122,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35> >::encrypt
  005b8	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  005bf	88 41 22	 mov	 BYTE PTR [rcx+34], al
  005c2	b8 01 00 00 00	 mov	 eax, 1
  005c7	48 6b c0 22	 imul	 rax, rax, 34		; 00000022H
  005cb	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  005d2	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  005d6	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  005dd	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0DN@$0HK@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@@std@@@@AEBAEE@Z ; MetaBuffer<61,122,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35> >::encrypt
  005e2	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  005e9	88 41 23	 mov	 BYTE PTR [rcx+35], al
  005ec	b8 01 00 00 00	 mov	 eax, 1
  005f1	48 6b c0 23	 imul	 rax, rax, 35		; 00000023H
  005f5	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  005fc	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00600	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00607	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$0DN@$0HK@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@@std@@@@AEBAEE@Z ; MetaBuffer<61,122,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35> >::encrypt
  0060c	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00613	88 41 24	 mov	 BYTE PTR [rcx+36], al
  00616	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0061d	0f b6 40 01	 movzx	 eax, BYTE PTR [rax+1]
  00621	88 85 c0 00 00
	00		 mov	 BYTE PTR tv350[rbp], al

; 52   :     {
; 53   : 
; 54   :     }

  00627	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0062e	48 8d a5 d8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+216]
  00635	5f		 pop	 rdi
  00636	5d		 pop	 rbp
  00637	c3		 ret	 0
??0?$MetaBuffer@$0DN@$0HK@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@@std@@@@QEAA@PEBE@Z ENDP ; MetaBuffer<61,122,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35> >::MetaBuffer<61,122,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\obfuscation\MetaString.h
;	COMDAT ?decrypt@?$MetaBuffer@$04$0DJ@U?$integer_sequence@_K$0A@$00$01$02$03$04@std@@@@AEBAEE@Z
_TEXT	SEGMENT
this$ = 224
byte$ = 232
?decrypt@?$MetaBuffer@$04$0DJ@U?$integer_sequence@_K$0A@$00$01$02$03$04@std@@@@AEBAEE@Z PROC ; MetaBuffer<5,57,std::integer_sequence<unsigned __int64,0,1,2,3,4,5> >::decrypt, COMDAT

; 79   :     {

$LN3:
  00000	88 54 24 10	 mov	 BYTE PTR [rsp+16], dl
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	55		 push	 rbp
  0000a	57		 push	 rdi
  0000b	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00012	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00017	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__722C6D77_MetaString@h
  0001e	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 80   :         return positive_modulo(ExtendedEuclidian<127, A>::y * (byte - B), 127);

  00023	0f b6 85 e8 00
	00 00		 movzx	 eax, BYTE PTR byte$[rbp]
  0002a	83 e8 39	 sub	 eax, 57			; 00000039H
  0002d	6b c0 33	 imul	 eax, eax, 51		; 00000033H
  00030	ba 7f 00 00 00	 mov	 edx, 127		; 0000007fH
  00035	8b c8		 mov	 ecx, eax
  00037	e8 00 00 00 00	 call	 ?positive_modulo@@YAHHH@Z ; positive_modulo

; 81   :     }

  0003c	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00043	5f		 pop	 rdi
  00044	5d		 pop	 rbp
  00045	c3		 ret	 0
?decrypt@?$MetaBuffer@$04$0DJ@U?$integer_sequence@_K$0A@$00$01$02$03$04@std@@@@AEBAEE@Z ENDP ; MetaBuffer<5,57,std::integer_sequence<unsigned __int64,0,1,2,3,4,5> >::decrypt
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\obfuscation\MetaString.h
;	COMDAT ?encrypt@?$MetaBuffer@$04$0DJ@U?$integer_sequence@_K$0A@$00$01$02$03$04@std@@@@AEBAEE@Z
_TEXT	SEGMENT
this$ = 224
byte$ = 232
?encrypt@?$MetaBuffer@$04$0DJ@U?$integer_sequence@_K$0A@$00$01$02$03$04@std@@@@AEBAEE@Z PROC ; MetaBuffer<5,57,std::integer_sequence<unsigned __int64,0,1,2,3,4,5> >::encrypt, COMDAT

; 74   :     {

$LN3:
  00000	88 54 24 10	 mov	 BYTE PTR [rsp+16], dl
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	55		 push	 rbp
  0000a	57		 push	 rdi
  0000b	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00012	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00017	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__722C6D77_MetaString@h
  0001e	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 75   :         return (A * byte + B) % 127;

  00023	0f b6 85 e8 00
	00 00		 movzx	 eax, BYTE PTR byte$[rbp]
  0002a	6b c0 05	 imul	 eax, eax, 5
  0002d	83 c0 39	 add	 eax, 57			; 00000039H
  00030	99		 cdq
  00031	b9 7f 00 00 00	 mov	 ecx, 127		; 0000007fH
  00036	f7 f9		 idiv	 ecx
  00038	8b c2		 mov	 eax, edx

; 76   :     }

  0003a	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00041	5f		 pop	 rdi
  00042	5d		 pop	 rbp
  00043	c3		 ret	 0
?encrypt@?$MetaBuffer@$04$0DJ@U?$integer_sequence@_K$0A@$00$01$02$03$04@std@@@@AEBAEE@Z ENDP ; MetaBuffer<5,57,std::integer_sequence<unsigned __int64,0,1,2,3,4,5> >::encrypt
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\obfuscation\MetaString.h
;	COMDAT ?decrypt@?$MetaBuffer@$04$0DJ@U?$integer_sequence@_K$0A@$00$01$02$03$04@std@@@@QEAAPEBDXZ
_TEXT	SEGMENT
i$1 = 8
this$ = 256
?decrypt@?$MetaBuffer@$04$0DJ@U?$integer_sequence@_K$0A@$00$01$02$03$04@std@@@@QEAAPEBDXZ PROC ; MetaBuffer<5,57,std::integer_sequence<unsigned __int64,0,1,2,3,4,5> >::decrypt, COMDAT

; 62   :     {

$LN7:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__722C6D77_MetaString@h
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 63   :         if (!isDecrypted())

  0001f	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00026	e8 00 00 00 00	 call	 ?isDecrypted@?$MetaBuffer@$04$0DJ@U?$integer_sequence@_K$0A@$00$01$02$03$04@std@@@@QEBA_NXZ ; MetaBuffer<5,57,std::integer_sequence<unsigned __int64,0,1,2,3,4,5> >::isDecrypted
  0002b	0f b6 c0	 movzx	 eax, al
  0002e	85 c0		 test	 eax, eax
  00030	75 53		 jne	 SHORT $LN5@decrypt

; 64   :         {
; 65   :             for (size_t i = 0; i < sizeof...(Ints); ++i)

  00032	48 c7 45 08 00
	00 00 00	 mov	 QWORD PTR i$1[rbp], 0
  0003a	eb 0b		 jmp	 SHORT $LN4@decrypt
$LN2@decrypt:
  0003c	48 8b 45 08	 mov	 rax, QWORD PTR i$1[rbp]
  00040	48 ff c0	 inc	 rax
  00043	48 89 45 08	 mov	 QWORD PTR i$1[rbp], rax
$LN4@decrypt:
  00047	48 83 7d 08 06	 cmp	 QWORD PTR i$1[rbp], 6
  0004c	73 37		 jae	 SHORT $LN3@decrypt

; 66   :                 m_buffer[i] = decrypt(m_buffer[i]);

  0004e	48 8b 45 08	 mov	 rax, QWORD PTR i$1[rbp]
  00052	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00059	48 03 c8	 add	 rcx, rax
  0005c	48 8b c1	 mov	 rax, rcx
  0005f	0f b6 50 01	 movzx	 edx, BYTE PTR [rax+1]
  00063	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0006a	e8 00 00 00 00	 call	 ?decrypt@?$MetaBuffer@$04$0DJ@U?$integer_sequence@_K$0A@$00$01$02$03$04@std@@@@AEBAEE@Z ; MetaBuffer<5,57,std::integer_sequence<unsigned __int64,0,1,2,3,4,5> >::decrypt
  0006f	48 8b 4d 08	 mov	 rcx, QWORD PTR i$1[rbp]
  00073	48 8b 95 00 01
	00 00		 mov	 rdx, QWORD PTR this$[rbp]
  0007a	48 03 d1	 add	 rdx, rcx
  0007d	48 8b ca	 mov	 rcx, rdx
  00080	88 41 01	 mov	 BYTE PTR [rcx+1], al
  00083	eb b7		 jmp	 SHORT $LN2@decrypt
$LN3@decrypt:
$LN5@decrypt:

; 67   :         }
; 68   : 
; 69   :         return (const char*)m_buffer;

  00085	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0008c	48 ff c0	 inc	 rax

; 70   :     }

  0008f	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  00096	5f		 pop	 rdi
  00097	5d		 pop	 rbp
  00098	c3		 ret	 0
?decrypt@?$MetaBuffer@$04$0DJ@U?$integer_sequence@_K$0A@$00$01$02$03$04@std@@@@QEAAPEBDXZ ENDP ; MetaBuffer<5,57,std::integer_sequence<unsigned __int64,0,1,2,3,4,5> >::decrypt
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\obfuscation\MetaString.h
;	COMDAT ?isDecrypted@?$MetaBuffer@$04$0DJ@U?$integer_sequence@_K$0A@$00$01$02$03$04@std@@@@QEBA_NXZ
_TEXT	SEGMENT
this$ = 224
?isDecrypted@?$MetaBuffer@$04$0DJ@U?$integer_sequence@_K$0A@$00$01$02$03$04@std@@@@QEBA_NXZ PROC ; MetaBuffer<5,57,std::integer_sequence<unsigned __int64,0,1,2,3,4,5> >::isDecrypted, COMDAT

; 57   :     {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__722C6D77_MetaString@h
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 58   :         return m_isDecrypted;

  0001f	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00026	0f b6 00	 movzx	 eax, BYTE PTR [rax]

; 59   :     }

  00029	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00030	5f		 pop	 rdi
  00031	5d		 pop	 rbp
  00032	c3		 ret	 0
?isDecrypted@?$MetaBuffer@$04$0DJ@U?$integer_sequence@_K$0A@$00$01$02$03$04@std@@@@QEBA_NXZ ENDP ; MetaBuffer<5,57,std::integer_sequence<unsigned __int64,0,1,2,3,4,5> >::isDecrypted
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\obfuscation\MetaString.h
;	COMDAT ??0?$MetaBuffer@$04$0DJ@U?$integer_sequence@_K$0A@$00$01$02$03$04@std@@@@QEAA@PEBE@Z
_TEXT	SEGMENT
tv140 = 192
this$ = 240
data$ = 248
??0?$MetaBuffer@$04$0DJ@U?$integer_sequence@_K$0A@$00$01$02$03$04@std@@@@QEAA@PEBE@Z PROC ; MetaBuffer<5,57,std::integer_sequence<unsigned __int64,0,1,2,3,4,5> >::MetaBuffer<5,57,std::integer_sequence<unsigned __int64,0,1,2,3,4,5> >, COMDAT

; 50   :     constexpr __forceinline MetaBuffer(const unsigned char* data)

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec f8 00
	00 00		 sub	 rsp, 248		; 000000f8H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__722C6D77_MetaString@h
  0001f	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 55   : 
; 56   :     inline bool isDecrypted() const
; 57   :     {
; 58   :         return m_isDecrypted;
; 59   :     }
; 60   : 
; 61   :     inline const char* decrypt()
; 62   :     {
; 63   :         if (!isDecrypted())
; 64   :         {
; 65   :             for (size_t i = 0; i < sizeof...(Ints); ++i)
; 66   :                 m_buffer[i] = decrypt(m_buffer[i]);
; 67   :         }
; 68   : 
; 69   :         return (const char*)m_buffer;
; 70   :     }
; 71   : 
; 72   : private:
; 73   :     constexpr unsigned char __forceinline encrypt(unsigned char byte) const
; 74   :     {
; 75   :         return (A * byte + B) % 127;
; 76   :     }
; 77   : 
; 78   :     constexpr unsigned char __forceinline decrypt(unsigned char byte) const
; 79   :     {
; 80   :         return positive_modulo(ExtendedEuclidian<127, A>::y * (byte - B), 127);
; 81   :     }
; 82   : 
; 83   :     volatile bool m_isDecrypted = false;

  00024	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0002b	c6 00 00	 mov	 BYTE PTR [rax], 0

; 51   :         : m_buffer{ encrypt(data[Ints])... }

  0002e	b8 01 00 00 00	 mov	 eax, 1
  00033	48 6b c0 00	 imul	 rax, rax, 0
  00037	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  0003e	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00042	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00049	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$04$0DJ@U?$integer_sequence@_K$0A@$00$01$02$03$04@std@@@@AEBAEE@Z ; MetaBuffer<5,57,std::integer_sequence<unsigned __int64,0,1,2,3,4,5> >::encrypt
  0004e	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00055	88 41 01	 mov	 BYTE PTR [rcx+1], al
  00058	b8 01 00 00 00	 mov	 eax, 1
  0005d	48 6b c0 01	 imul	 rax, rax, 1
  00061	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00068	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  0006c	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00073	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$04$0DJ@U?$integer_sequence@_K$0A@$00$01$02$03$04@std@@@@AEBAEE@Z ; MetaBuffer<5,57,std::integer_sequence<unsigned __int64,0,1,2,3,4,5> >::encrypt
  00078	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0007f	88 41 02	 mov	 BYTE PTR [rcx+2], al
  00082	b8 01 00 00 00	 mov	 eax, 1
  00087	48 6b c0 02	 imul	 rax, rax, 2
  0008b	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00092	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00096	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0009d	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$04$0DJ@U?$integer_sequence@_K$0A@$00$01$02$03$04@std@@@@AEBAEE@Z ; MetaBuffer<5,57,std::integer_sequence<unsigned __int64,0,1,2,3,4,5> >::encrypt
  000a2	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000a9	88 41 03	 mov	 BYTE PTR [rcx+3], al
  000ac	b8 01 00 00 00	 mov	 eax, 1
  000b1	48 6b c0 03	 imul	 rax, rax, 3
  000b5	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  000bc	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  000c0	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000c7	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$04$0DJ@U?$integer_sequence@_K$0A@$00$01$02$03$04@std@@@@AEBAEE@Z ; MetaBuffer<5,57,std::integer_sequence<unsigned __int64,0,1,2,3,4,5> >::encrypt
  000cc	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000d3	88 41 04	 mov	 BYTE PTR [rcx+4], al
  000d6	b8 01 00 00 00	 mov	 eax, 1
  000db	48 6b c0 04	 imul	 rax, rax, 4
  000df	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  000e6	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  000ea	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000f1	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$04$0DJ@U?$integer_sequence@_K$0A@$00$01$02$03$04@std@@@@AEBAEE@Z ; MetaBuffer<5,57,std::integer_sequence<unsigned __int64,0,1,2,3,4,5> >::encrypt
  000f6	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000fd	88 41 05	 mov	 BYTE PTR [rcx+5], al
  00100	b8 01 00 00 00	 mov	 eax, 1
  00105	48 6b c0 05	 imul	 rax, rax, 5
  00109	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00110	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00114	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0011b	e8 00 00 00 00	 call	 ?encrypt@?$MetaBuffer@$04$0DJ@U?$integer_sequence@_K$0A@$00$01$02$03$04@std@@@@AEBAEE@Z ; MetaBuffer<5,57,std::integer_sequence<unsigned __int64,0,1,2,3,4,5> >::encrypt
  00120	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00127	88 41 06	 mov	 BYTE PTR [rcx+6], al
  0012a	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00131	0f b6 40 01	 movzx	 eax, BYTE PTR [rax+1]
  00135	88 85 c0 00 00
	00		 mov	 BYTE PTR tv140[rbp], al

; 52   :     {
; 53   : 
; 54   :     }

  0013b	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00142	48 8d a5 d8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+216]
  00149	5f		 pop	 rdi
  0014a	5d		 pop	 rbp
  0014b	c3		 ret	 0
??0?$MetaBuffer@$04$0DJ@U?$integer_sequence@_K$0A@$00$01$02$03$04@std@@@@QEAA@PEBE@Z ENDP ; MetaBuffer<5,57,std::integer_sequence<unsigned __int64,0,1,2,3,4,5> >::MetaBuffer<5,57,std::integer_sequence<unsigned __int64,0,1,2,3,4,5> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\logs\logs.cpp
;	COMDAT ?Write@logs@@YAXPEB_WZZ
_TEXT	SEGMENT
Args$8 = 8
Buffer$9 = 48
Size$10 = 2116
clrf$11 = 2152
dwWritten$12 = 2180
TimeBuffer$13 = 2224
st$14 = 2504
TimeSize$15 = 2548
$T16 = 3764
$T17 = 3800
tv86 = 3844
tv88 = 3848
tv90 = 3852
__$ArrayPad$ = 3856
Format$ = 3904
?Write@logs@@YAXPEB_WZZ PROC				; logs::Write, COMDAT

; 24   : {

$LN6:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000f	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00014	55		 push	 rbp
  00015	57		 push	 rdi
  00016	48 81 ec 58 0f
	00 00		 sub	 rsp, 3928		; 00000f58H
  0001d	48 8d 6c 24 30	 lea	 rbp, QWORD PTR [rsp+48]
  00022	48 8d 7c 24 30	 lea	 rdi, QWORD PTR [rsp+48]
  00027	b9 aa 02 00 00	 mov	 ecx, 682		; 000002aaH
  0002c	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00031	f3 ab		 rep stosd
  00033	48 8b 8c 24 78
	0f 00 00	 mov	 rcx, QWORD PTR [rsp+3960]
  0003b	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00042	48 33 c5	 xor	 rax, rbp
  00045	48 89 85 10 0f
	00 00		 mov	 QWORD PTR __$ArrayPad$[rbp], rax
  0004c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__EF34CC1A_logs@cpp
  00053	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 25   : 	if (g_LogHandle != INVALID_HANDLE_VALUE) {

  00058	48 83 3d 00 00
	00 00 ff	 cmp	 QWORD PTR ?g_LogHandle@@3PEAXEA, -1 ; g_LogHandle
  00060	0f 84 9c 01 00
	00		 je	 $LN2@Write

; 26   : 
; 27   : 		va_list Args;
; 28   : 		WCHAR Buffer[1024];
; 29   : 
; 30   : 		va_start(Args, Format);

  00066	48 8d 85 48 0f
	00 00		 lea	 rax, QWORD PTR Format$[rbp+8]
  0006d	48 89 45 08	 mov	 QWORD PTR Args$8[rbp], rax

; 31   : 
; 32   : 		RtlSecureZeroMemory(Buffer, sizeof(Buffer));

  00071	ba 00 08 00 00	 mov	 edx, 2048		; 00000800H
  00076	48 8d 4d 30	 lea	 rcx, QWORD PTR Buffer$9[rbp]
  0007a	e8 00 00 00 00	 call	 RtlSecureZeroMemory

; 33   : 		INT Size = pwvsprintfW(Buffer, Format, Args);

  0007f	4c 8b 45 08	 mov	 r8, QWORD PTR Args$8[rbp]
  00083	48 8b 95 40 0f
	00 00		 mov	 rdx, QWORD PTR Format$[rbp]
  0008a	48 8d 4d 30	 lea	 rcx, QWORD PTR Buffer$9[rbp]
  0008e	e8 00 00 00 00	 call	 ?pwvsprintfW@@YAHPEA_WPEB_WPEAD@Z ; pwvsprintfW
  00093	89 85 44 08 00
	00		 mov	 DWORD PTR Size$10[rbp], eax

; 34   : 
; 35   : 		va_end(Args);

  00099	48 c7 45 08 00
	00 00 00	 mov	 QWORD PTR Args$8[rbp], 0

; 36   : 
; 37   : 		if (Size > 0) {

  000a1	83 bd 44 08 00
	00 00		 cmp	 DWORD PTR Size$10[rbp], 0
  000a8	0f 8e 54 01 00
	00		 jle	 $LN3@Write

; 38   : 
; 39   : 			LPCWSTR clrf = OBFW(L"\r\n");

  000ae	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_15JNBOKNOG@?$AA?$AN?$AA?6@
  000b5	48 8d 8d b4 0e
	00 00		 lea	 rcx, QWORD PTR $T16[rbp]
  000bc	e8 00 00 00 00	 call	 ??0?$MetaBuffer@$04$0DJ@U?$integer_sequence@_K$0A@$00$01$02$03$04@std@@@@QEAA@PEBE@Z ; MetaBuffer<5,57,std::integer_sequence<unsigned __int64,0,1,2,3,4,5> >::MetaBuffer<5,57,std::integer_sequence<unsigned __int64,0,1,2,3,4,5> >
  000c1	48 8b c8	 mov	 rcx, rax
  000c4	e8 00 00 00 00	 call	 ?decrypt@?$MetaBuffer@$04$0DJ@U?$integer_sequence@_K$0A@$00$01$02$03$04@std@@@@QEAAPEBDXZ ; MetaBuffer<5,57,std::integer_sequence<unsigned __int64,0,1,2,3,4,5> >::decrypt
  000c9	48 89 85 68 08
	00 00		 mov	 QWORD PTR clrf$11[rbp], rax

; 40   : 			Size *= sizeof(WCHAR);

  000d0	48 63 85 44 08
	00 00		 movsxd	 rax, DWORD PTR Size$10[rbp]
  000d7	48 d1 e0	 shl	 rax, 1
  000da	89 85 44 08 00
	00		 mov	 DWORD PTR Size$10[rbp], eax

; 41   : 			DWORD dwWritten;
; 42   : 
; 43   : 			pEnterCriticalSection(&g_CritSec);

  000e0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?g_CritSec@@3U_RTL_CRITICAL_SECTION@@A ; g_CritSec
  000e7	e8 00 00 00 00	 call	 ?pEnterCriticalSection@@YAXPEAU_RTL_CRITICAL_SECTION@@@Z ; pEnterCriticalSection

; 44   : 			{
; 45   : 
; 46   : 				WCHAR TimeBuffer[128];
; 47   : 				SYSTEMTIME st;
; 48   : 				GetLocalTime(&st);

  000ec	48 8d 8d c8 09
	00 00		 lea	 rcx, QWORD PTR st$14[rbp]
  000f3	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_GetLocalTime

; 49   : 				INT TimeSize = wsprintfW(TimeBuffer, OBFW(L"[%02d:%02d:%02d] "), st.wHour, st.wMinute, st.wSecond);

  000f9	0f b7 85 d4 09
	00 00		 movzx	 eax, WORD PTR st$14[rbp+12]
  00100	89 85 04 0f 00
	00		 mov	 DWORD PTR tv86[rbp], eax
  00106	0f b7 8d d2 09
	00 00		 movzx	 ecx, WORD PTR st$14[rbp+10]
  0010d	89 8d 08 0f 00
	00		 mov	 DWORD PTR tv88[rbp], ecx
  00113	0f b7 95 d0 09
	00 00		 movzx	 edx, WORD PTR st$14[rbp+8]
  0011a	89 95 0c 0f 00
	00		 mov	 DWORD PTR tv90[rbp], edx
  00120	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CE@MDGPDCAG@?$AA?$FL?$AA?$CF?$AA0?$AA2?$AAd?$AA?3?$AA?$CF?$AA0?$AA2?$AAd?$AA?3?$AA?$CF?$AA0?$AA2?$AAd@
  00127	48 8d 8d d8 0e
	00 00		 lea	 rcx, QWORD PTR $T17[rbp]
  0012e	e8 00 00 00 00	 call	 ??0?$MetaBuffer@$0DN@$0HK@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@@std@@@@QEAA@PEBE@Z ; MetaBuffer<61,122,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35> >::MetaBuffer<61,122,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35> >
  00133	48 8b c8	 mov	 rcx, rax
  00136	e8 00 00 00 00	 call	 ?decrypt@?$MetaBuffer@$0DN@$0HK@U?$integer_sequence@_K$0A@$00$01$02$03$04$05$06$07$08$09$0L@$0M@$0N@$0O@$0P@$0BA@$0BB@$0BC@$0BD@$0BE@$0BF@$0BG@$0BH@$0BI@$0BJ@$0BK@$0BL@$0BM@$0BN@$0BO@$0BP@$0CA@$0CB@$0CC@$0CD@@std@@@@QEAAPEBDXZ ; MetaBuffer<61,122,std::integer_sequence<unsigned __int64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35> >::decrypt
  0013b	8b 8d 04 0f 00
	00		 mov	 ecx, DWORD PTR tv86[rbp]
  00141	89 4c 24 20	 mov	 DWORD PTR [rsp+32], ecx
  00145	8b 8d 08 0f 00
	00		 mov	 ecx, DWORD PTR tv88[rbp]
  0014b	44 8b c9	 mov	 r9d, ecx
  0014e	8b 8d 0c 0f 00
	00		 mov	 ecx, DWORD PTR tv90[rbp]
  00154	44 8b c1	 mov	 r8d, ecx
  00157	48 8b d0	 mov	 rdx, rax
  0015a	48 8d 8d b0 08
	00 00		 lea	 rcx, QWORD PTR TimeBuffer$13[rbp]
  00161	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_wsprintfW
  00167	89 85 f4 09 00
	00		 mov	 DWORD PTR TimeSize$15[rbp], eax

; 50   : 
; 51   : 				if (TimeSize) {

  0016d	83 bd f4 09 00
	00 00		 cmp	 DWORD PTR TimeSize$15[rbp], 0
  00174	74 30		 je	 SHORT $LN4@Write

; 52   : 					pWriteFile(g_LogHandle, TimeBuffer, TimeSize * sizeof(WCHAR), &dwWritten, NULL);

  00176	48 63 85 f4 09
	00 00		 movsxd	 rax, DWORD PTR TimeSize$15[rbp]
  0017d	48 d1 e0	 shl	 rax, 1
  00180	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR [rsp+32], 0
  00189	4c 8d 8d 84 08
	00 00		 lea	 r9, QWORD PTR dwWritten$12[rbp]
  00190	44 8b c0	 mov	 r8d, eax
  00193	48 8d 95 b0 08
	00 00		 lea	 rdx, QWORD PTR TimeBuffer$13[rbp]
  0019a	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR ?g_LogHandle@@3PEAXEA ; g_LogHandle
  001a1	e8 00 00 00 00	 call	 ?pWriteFile@@YAHPEAXPEBXKPEAKPEAU_OVERLAPPED@@@Z ; pWriteFile
$LN4@Write:

; 53   : 				}
; 54   : 
; 55   : 				pWriteFile(g_LogHandle, Buffer, Size, &dwWritten, NULL);

  001a6	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR [rsp+32], 0
  001af	4c 8d 8d 84 08
	00 00		 lea	 r9, QWORD PTR dwWritten$12[rbp]
  001b6	44 8b 85 44 08
	00 00		 mov	 r8d, DWORD PTR Size$10[rbp]
  001bd	48 8d 55 30	 lea	 rdx, QWORD PTR Buffer$9[rbp]
  001c1	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR ?g_LogHandle@@3PEAXEA ; g_LogHandle
  001c8	e8 00 00 00 00	 call	 ?pWriteFile@@YAHPEAXPEBXKPEAKPEAU_OVERLAPPED@@@Z ; pWriteFile

; 56   : 				pWriteFile(g_LogHandle, clrf, 4, &dwWritten, NULL);

  001cd	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR [rsp+32], 0
  001d6	4c 8d 8d 84 08
	00 00		 lea	 r9, QWORD PTR dwWritten$12[rbp]
  001dd	41 b8 04 00 00
	00		 mov	 r8d, 4
  001e3	48 8b 95 68 08
	00 00		 mov	 rdx, QWORD PTR clrf$11[rbp]
  001ea	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR ?g_LogHandle@@3PEAXEA ; g_LogHandle
  001f1	e8 00 00 00 00	 call	 ?pWriteFile@@YAHPEAXPEBXKPEAKPEAU_OVERLAPPED@@@Z ; pWriteFile

; 57   : 
; 58   : 			}
; 59   : 			pLeaveCriticalSection(&g_CritSec);

  001f6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?g_CritSec@@3U_RTL_CRITICAL_SECTION@@A ; g_CritSec
  001fd	e8 00 00 00 00	 call	 ?pLeaveCriticalSection@@YAXPEAU_RTL_CRITICAL_SECTION@@@Z ; pLeaveCriticalSection
$LN3@Write:
$LN2@Write:

; 60   : 
; 61   : 		}
; 62   : 
; 63   : 	}
; 64   : }

  00202	48 8d 4d d0	 lea	 rcx, QWORD PTR [rbp-48]
  00206	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?Write@logs@@YAXPEB_WZZ$rtcFrameData
  0020d	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  00212	48 8b 8d 10 0f
	00 00		 mov	 rcx, QWORD PTR __$ArrayPad$[rbp]
  00219	48 33 cd	 xor	 rcx, rbp
  0021c	e8 00 00 00 00	 call	 __security_check_cookie
  00221	48 8d a5 28 0f
	00 00		 lea	 rsp, QWORD PTR [rbp+3880]
  00228	5f		 pop	 rdi
  00229	5d		 pop	 rbp
  0022a	c3		 ret	 0
?Write@logs@@YAXPEB_WZZ ENDP				; logs::Write
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\logs\logs.cpp
;	COMDAT ?Init@logs@@YAXPEB_W@Z
_TEXT	SEGMENT
LogFile$ = 224
?Init@logs@@YAXPEB_W@Z PROC				; logs::Init, COMDAT

; 8    : {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  0000e	48 8d 6c 24 40	 lea	 rbp, QWORD PTR [rsp+64]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__EF34CC1A_logs@cpp
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 9    : 	pInitializeCriticalSection(&g_CritSec);

  0001f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?g_CritSec@@3U_RTL_CRITICAL_SECTION@@A ; g_CritSec
  00026	e8 00 00 00 00	 call	 ?pInitializeCriticalSection@@YAXPEAU_RTL_CRITICAL_SECTION@@@Z ; pInitializeCriticalSection

; 10   : 	g_LogHandle = pCreateFileW(

  0002b	48 c7 44 24 30
	00 00 00 00	 mov	 QWORD PTR [rsp+48], 0
  00034	c7 44 24 28 00
	00 00 80	 mov	 DWORD PTR [rsp+40], -2147483648 ; 80000000H
  0003c	c7 44 24 20 04
	00 00 00	 mov	 DWORD PTR [rsp+32], 4
  00044	45 33 c9	 xor	 r9d, r9d
  00047	41 b8 01 00 00
	00		 mov	 r8d, 1
  0004d	ba 00 00 00 40	 mov	 edx, 1073741824		; 40000000H
  00052	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR LogFile$[rbp]
  00059	e8 00 00 00 00	 call	 ?pCreateFileW@@YAPEAXPEB_WKKPEAU_SECURITY_ATTRIBUTES@@KKPEAX@Z ; pCreateFileW
  0005e	48 89 05 00 00
	00 00		 mov	 QWORD PTR ?g_LogHandle@@3PEAXEA, rax ; g_LogHandle

; 11   : 		LogFile,
; 12   : 		GENERIC_WRITE,
; 13   : 		FILE_SHARE_READ,
; 14   : 		NULL,
; 15   : 		OPEN_ALWAYS,
; 16   : 		FILE_FLAG_WRITE_THROUGH,
; 17   : 		NULL);
; 18   : 
; 19   : 	pSetFilePointer(g_LogHandle, 0, NULL, FILE_END);

  00065	41 b9 02 00 00
	00		 mov	 r9d, 2
  0006b	45 33 c0	 xor	 r8d, r8d
  0006e	33 d2		 xor	 edx, edx
  00070	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR ?g_LogHandle@@3PEAXEA ; g_LogHandle
  00077	e8 00 00 00 00	 call	 ?pSetFilePointer@@YAKPEAXJPEAJK@Z ; pSetFilePointer

; 20   : }

  0007c	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00083	5f		 pop	 rdi
  00084	5d		 pop	 rbp
  00085	c3		 ret	 0
?Init@logs@@YAXPEB_W@Z ENDP				; logs::Init
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\obfuscation\MetaString.h
;	COMDAT ?positive_modulo@@YAHHH@Z
_TEXT	SEGMENT
a$ = 224
n$ = 232
?positive_modulo@@YAHHH@Z PROC				; positive_modulo, COMDAT

; 39   : {

$LN3:
  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  00008	55		 push	 rbp
  00009	57		 push	 rdi
  0000a	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00011	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00016	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__722C6D77_MetaString@h
  0001d	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 40   :     return (a % n + n) % n;

  00022	8b 85 e0 00 00
	00		 mov	 eax, DWORD PTR a$[rbp]
  00028	99		 cdq
  00029	f7 bd e8 00 00
	00		 idiv	 DWORD PTR n$[rbp]
  0002f	8b c2		 mov	 eax, edx
  00031	03 85 e8 00 00
	00		 add	 eax, DWORD PTR n$[rbp]
  00037	99		 cdq
  00038	f7 bd e8 00 00
	00		 idiv	 DWORD PTR n$[rbp]
  0003e	8b c2		 mov	 eax, edx

; 41   : }

  00040	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00047	5f		 pop	 rdi
  00048	5d		 pop	 rbp
  00049	c3		 ret	 0
?positive_modulo@@YAHHH@Z ENDP				; positive_modulo
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\api\getapi.h
;	COMDAT ?pwvsprintfW@@YAHPEA_WPEB_WPEAD@Z
_TEXT	SEGMENT
pFunction$ = 8
Buf$ = 256
Format$ = 264
arglist$ = 272
?pwvsprintfW@@YAHPEA_WPEB_WPEAD@Z PROC			; pwvsprintfW, COMDAT

; 1089 : {

$LN3:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	55		 push	 rbp
  00010	57		 push	 rdi
  00011	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  00018	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0001d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__9B49ECA4_getapi@h
  00024	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 1090 : 	int(WINAPI * pFunction)(LPWSTR, LPCWSTR, va_list);
; 1091 : 	pFunction = (int(WINAPI*)(LPWSTR, LPCWSTR, va_list))getapi::GetProcAddressEx2(NULL, USER32_MODULE_ID, 0x5b7a35c4, 16);

  00029	41 b9 10 00 00
	00		 mov	 r9d, 16
  0002f	41 b8 c4 35 7a
	5b		 mov	 r8d, 1534735812		; 5b7a35c4H
  00035	ba 14 00 00 00	 mov	 edx, 20
  0003a	33 c9		 xor	 ecx, ecx
  0003c	e8 00 00 00 00	 call	 ?GetProcAddressEx2@getapi@@YAPEAXPEADKKH@Z ; getapi::GetProcAddressEx2
  00041	48 89 45 08	 mov	 QWORD PTR pFunction$[rbp], rax

; 1092 : 	return pFunction(Buf, Format, arglist);

  00045	4c 8b 85 10 01
	00 00		 mov	 r8, QWORD PTR arglist$[rbp]
  0004c	48 8b 95 08 01
	00 00		 mov	 rdx, QWORD PTR Format$[rbp]
  00053	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR Buf$[rbp]
  0005a	ff 55 08	 call	 QWORD PTR pFunction$[rbp]

; 1093 : }

  0005d	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  00064	5f		 pop	 rdi
  00065	5d		 pop	 rbp
  00066	c3		 ret	 0
?pwvsprintfW@@YAHPEA_WPEB_WPEAD@Z ENDP			; pwvsprintfW
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\api\getapi.h
;	COMDAT ?pSetFilePointer@@YAKPEAXJPEAJK@Z
_TEXT	SEGMENT
pFunction$ = 8
hFile$ = 256
lDistanceToMove$ = 264
lpDistanceToMoveHigh$ = 272
dwMoveMethod$ = 280
?pSetFilePointer@@YAKPEAXJPEAJK@Z PROC			; pSetFilePointer, COMDAT

; 1075 : {

$LN3:
  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  0000e	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00013	55		 push	 rbp
  00014	57		 push	 rdi
  00015	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  0001c	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00021	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__9B49ECA4_getapi@h
  00028	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 1076 : 	DWORD(WINAPI * pFunction)(HANDLE, LONG, PLONG, DWORD);
; 1077 : 	pFunction = (DWORD(WINAPI*)(HANDLE, LONG, PLONG, DWORD))getapi::GetProcAddressEx2(NULL, KERNEL32_MODULE_ID, 0x29103c8c, 17);

  0002d	41 b9 11 00 00
	00		 mov	 r9d, 17
  00033	41 b8 8c 3c 10
	29		 mov	 r8d, 688929932		; 29103c8cH
  00039	ba 0f 00 00 00	 mov	 edx, 15
  0003e	33 c9		 xor	 ecx, ecx
  00040	e8 00 00 00 00	 call	 ?GetProcAddressEx2@getapi@@YAPEAXPEADKKH@Z ; getapi::GetProcAddressEx2
  00045	48 89 45 08	 mov	 QWORD PTR pFunction$[rbp], rax

; 1078 : 	return pFunction(hFile, lDistanceToMove, lpDistanceToMoveHigh, dwMoveMethod);

  00049	44 8b 8d 18 01
	00 00		 mov	 r9d, DWORD PTR dwMoveMethod$[rbp]
  00050	4c 8b 85 10 01
	00 00		 mov	 r8, QWORD PTR lpDistanceToMoveHigh$[rbp]
  00057	8b 95 08 01 00
	00		 mov	 edx, DWORD PTR lDistanceToMove$[rbp]
  0005d	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR hFile$[rbp]
  00064	ff 55 08	 call	 QWORD PTR pFunction$[rbp]

; 1079 : }

  00067	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  0006e	5f		 pop	 rdi
  0006f	5d		 pop	 rbp
  00070	c3		 ret	 0
?pSetFilePointer@@YAKPEAXJPEAJK@Z ENDP			; pSetFilePointer
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\api\getapi.h
;	COMDAT ?pInitializeCriticalSection@@YAXPEAU_RTL_CRITICAL_SECTION@@@Z
_TEXT	SEGMENT
pFunction$ = 8
lpCriticalSection$ = 256
?pInitializeCriticalSection@@YAXPEAU_RTL_CRITICAL_SECTION@@@Z PROC ; pInitializeCriticalSection, COMDAT

; 421  : {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__9B49ECA4_getapi@h
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 422  : 	void(WINAPI * pFunction)(LPCRITICAL_SECTION);
; 423  : 	pFunction = (void(WINAPI*)(LPCRITICAL_SECTION))getapi::GetProcAddressEx2(NULL, KERNEL32_MODULE_ID, 0xddde40d3, 73);//GetProcAddress(hKernel32, OBFA("InitializeCriticalSection"));

  0001f	41 b9 49 00 00
	00		 mov	 r9d, 73			; 00000049H
  00025	41 b8 d3 40 de
	dd		 mov	 r8d, -572636973		; ddde40d3H
  0002b	ba 0f 00 00 00	 mov	 edx, 15
  00030	33 c9		 xor	 ecx, ecx
  00032	e8 00 00 00 00	 call	 ?GetProcAddressEx2@getapi@@YAPEAXPEADKKH@Z ; getapi::GetProcAddressEx2
  00037	48 89 45 08	 mov	 QWORD PTR pFunction$[rbp], rax

; 424  : 	return pFunction(lpCriticalSection);

  0003b	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR lpCriticalSection$[rbp]
  00042	ff 55 08	 call	 QWORD PTR pFunction$[rbp]

; 425  : }

  00045	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  0004c	5f		 pop	 rdi
  0004d	5d		 pop	 rbp
  0004e	c3		 ret	 0
?pInitializeCriticalSection@@YAXPEAU_RTL_CRITICAL_SECTION@@@Z ENDP ; pInitializeCriticalSection
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\api\getapi.h
;	COMDAT ?pLeaveCriticalSection@@YAXPEAU_RTL_CRITICAL_SECTION@@@Z
_TEXT	SEGMENT
pFunction$ = 8
lpCriticalSection$ = 256
?pLeaveCriticalSection@@YAXPEAU_RTL_CRITICAL_SECTION@@@Z PROC ; pLeaveCriticalSection, COMDAT

; 412  : {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__9B49ECA4_getapi@h
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 413  : 	void(WINAPI * pFunction)(LPCRITICAL_SECTION);
; 414  : 	pFunction = (void(WINAPI*)(LPCRITICAL_SECTION))getapi::GetProcAddressEx2(NULL, KERNEL32_MODULE_ID, 0x992c0884, 74);//GetProcAddress(hKernel32, OBFA("LeaveCriticalSection"));

  0001f	41 b9 4a 00 00
	00		 mov	 r9d, 74			; 0000004aH
  00025	41 b8 84 08 2c
	99		 mov	 r8d, -1725167484	; 992c0884H
  0002b	ba 0f 00 00 00	 mov	 edx, 15
  00030	33 c9		 xor	 ecx, ecx
  00032	e8 00 00 00 00	 call	 ?GetProcAddressEx2@getapi@@YAPEAXPEADKKH@Z ; getapi::GetProcAddressEx2
  00037	48 89 45 08	 mov	 QWORD PTR pFunction$[rbp], rax

; 415  : 	return pFunction(lpCriticalSection);

  0003b	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR lpCriticalSection$[rbp]
  00042	ff 55 08	 call	 QWORD PTR pFunction$[rbp]

; 416  : }

  00045	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  0004c	5f		 pop	 rdi
  0004d	5d		 pop	 rbp
  0004e	c3		 ret	 0
?pLeaveCriticalSection@@YAXPEAU_RTL_CRITICAL_SECTION@@@Z ENDP ; pLeaveCriticalSection
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\api\getapi.h
;	COMDAT ?pEnterCriticalSection@@YAXPEAU_RTL_CRITICAL_SECTION@@@Z
_TEXT	SEGMENT
pFunction$ = 8
lpCriticalSection$ = 256
?pEnterCriticalSection@@YAXPEAU_RTL_CRITICAL_SECTION@@@Z PROC ; pEnterCriticalSection, COMDAT

; 394  : {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__9B49ECA4_getapi@h
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 395  : 	VOID(WINAPI * pFunction)(LPCRITICAL_SECTION);
; 396  : 	pFunction = (VOID(WINAPI*)(LPCRITICAL_SECTION))getapi::GetProcAddressEx2(NULL, KERNEL32_MODULE_ID, 0x4f2c3749, 76);//GetProcAddress(hKernel32, OBFA("EnterCriticalSection"));

  0001f	41 b9 4c 00 00
	00		 mov	 r9d, 76			; 0000004cH
  00025	41 b8 49 37 2c
	4f		 mov	 r8d, 1328297801		; 4f2c3749H
  0002b	ba 0f 00 00 00	 mov	 edx, 15
  00030	33 c9		 xor	 ecx, ecx
  00032	e8 00 00 00 00	 call	 ?GetProcAddressEx2@getapi@@YAPEAXPEADKKH@Z ; getapi::GetProcAddressEx2
  00037	48 89 45 08	 mov	 QWORD PTR pFunction$[rbp], rax

; 397  : 	return pFunction(lpCriticalSection);

  0003b	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR lpCriticalSection$[rbp]
  00042	ff 55 08	 call	 QWORD PTR pFunction$[rbp]

; 398  : }

  00045	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  0004c	5f		 pop	 rdi
  0004d	5d		 pop	 rbp
  0004e	c3		 ret	 0
?pEnterCriticalSection@@YAXPEAU_RTL_CRITICAL_SECTION@@@Z ENDP ; pEnterCriticalSection
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\api\getapi.h
;	COMDAT ?pCreateFileW@@YAPEAXPEB_WKKPEAU_SECURITY_ATTRIBUTES@@KKPEAX@Z
_TEXT	SEGMENT
pFunction$ = 8
lpFileName$ = 256
dwDesiredAccess$ = 264
dwShareMode$ = 272
lpSecurityAttributes$ = 280
dwCreationDisposition$ = 288
dwFlagsAndAttributes$ = 296
hTemplateFile$ = 304
?pCreateFileW@@YAPEAXPEB_WKKPEAU_SECURITY_ATTRIBUTES@@KKPEAX@Z PROC ; pCreateFileW, COMDAT

; 172  : {

$LN3:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  0000e	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00013	55		 push	 rbp
  00014	57		 push	 rdi
  00015	48 81 ec 28 01
	00 00		 sub	 rsp, 296		; 00000128H
  0001c	48 8d 6c 24 40	 lea	 rbp, QWORD PTR [rsp+64]
  00021	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__9B49ECA4_getapi@h
  00028	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 173  : 	HANDLE(WINAPI * pFunction)(LPCWSTR, DWORD, DWORD, LPSECURITY_ATTRIBUTES, DWORD, DWORD, HANDLE);
; 174  : 	pFunction = (HANDLE(WINAPI*)(LPCWSTR, DWORD, DWORD, LPSECURITY_ATTRIBUTES, DWORD, DWORD, HANDLE))getapi::GetProcAddressEx2(NULL, KERNEL32_MODULE_ID, 0x017610e8, 97);//GetProcAddress(hKernel32, OBFA("CreateFileW"));

  0002d	41 b9 61 00 00
	00		 mov	 r9d, 97			; 00000061H
  00033	41 b8 e8 10 76
	01		 mov	 r8d, 24514792		; 017610e8H
  00039	ba 0f 00 00 00	 mov	 edx, 15
  0003e	33 c9		 xor	 ecx, ecx
  00040	e8 00 00 00 00	 call	 ?GetProcAddressEx2@getapi@@YAPEAXPEADKKH@Z ; getapi::GetProcAddressEx2
  00045	48 89 45 08	 mov	 QWORD PTR pFunction$[rbp], rax

; 175  : 	return pFunction(lpFileName, dwDesiredAccess, dwShareMode, lpSecurityAttributes, dwCreationDisposition, dwFlagsAndAttributes, hTemplateFile);

  00049	48 8b 85 30 01
	00 00		 mov	 rax, QWORD PTR hTemplateFile$[rbp]
  00050	48 89 44 24 30	 mov	 QWORD PTR [rsp+48], rax
  00055	8b 85 28 01 00
	00		 mov	 eax, DWORD PTR dwFlagsAndAttributes$[rbp]
  0005b	89 44 24 28	 mov	 DWORD PTR [rsp+40], eax
  0005f	8b 85 20 01 00
	00		 mov	 eax, DWORD PTR dwCreationDisposition$[rbp]
  00065	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  00069	4c 8b 8d 18 01
	00 00		 mov	 r9, QWORD PTR lpSecurityAttributes$[rbp]
  00070	44 8b 85 10 01
	00 00		 mov	 r8d, DWORD PTR dwShareMode$[rbp]
  00077	8b 95 08 01 00
	00		 mov	 edx, DWORD PTR dwDesiredAccess$[rbp]
  0007d	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR lpFileName$[rbp]
  00084	ff 55 08	 call	 QWORD PTR pFunction$[rbp]

; 176  : }

  00087	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  0008e	5f		 pop	 rdi
  0008f	5d		 pop	 rbp
  00090	c3		 ret	 0
?pCreateFileW@@YAPEAXPEB_WKKPEAU_SECURITY_ATTRIBUTES@@KKPEAX@Z ENDP ; pCreateFileW
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\admin-z10\Desktop\conti_v3\cryptor\api\getapi.h
;	COMDAT ?pWriteFile@@YAHPEAXPEBXKPEAKPEAU_OVERLAPPED@@@Z
_TEXT	SEGMENT
pFunction$ = 8
hFile$ = 256
lpBuffer$ = 264
nNumberOfBytesToWrite$ = 272
lpNumberOfBytesWritten$ = 280
lpOverlapped$ = 288
?pWriteFile@@YAHPEAXPEBXKPEAKPEAU_OVERLAPPED@@@Z PROC	; pWriteFile, COMDAT

; 120  : {

$LN3:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	55		 push	 rbp
  00015	57		 push	 rdi
  00016	48 81 ec 18 01
	00 00		 sub	 rsp, 280		; 00000118H
  0001d	48 8d 6c 24 30	 lea	 rbp, QWORD PTR [rsp+48]
  00022	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__9B49ECA4_getapi@h
  00029	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 121  : 	BOOL(WINAPI * pFunction)(HANDLE, LPCVOID, DWORD, LPDWORD, LPOVERLAPPED);
; 122  : 	pFunction = (BOOL(WINAPI*)(HANDLE, LPCVOID, DWORD, LPDWORD, LPOVERLAPPED))getapi::GetProcAddressEx2(NULL, KERNEL32_MODULE_ID, 0x088f1e18, 102);//GetProcAddress(hKernel32, OBFA("WriteFile"));

  0002e	41 b9 66 00 00
	00		 mov	 r9d, 102		; 00000066H
  00034	41 b8 18 1e 8f
	08		 mov	 r8d, 143597080		; 088f1e18H
  0003a	ba 0f 00 00 00	 mov	 edx, 15
  0003f	33 c9		 xor	 ecx, ecx
  00041	e8 00 00 00 00	 call	 ?GetProcAddressEx2@getapi@@YAPEAXPEADKKH@Z ; getapi::GetProcAddressEx2
  00046	48 89 45 08	 mov	 QWORD PTR pFunction$[rbp], rax

; 123  : 	return pFunction(hFile, lpBuffer, nNumberOfBytesToWrite, lpNumberOfBytesWritten, lpOverlapped);

  0004a	48 8b 85 20 01
	00 00		 mov	 rax, QWORD PTR lpOverlapped$[rbp]
  00051	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00056	4c 8b 8d 18 01
	00 00		 mov	 r9, QWORD PTR lpNumberOfBytesWritten$[rbp]
  0005d	44 8b 85 10 01
	00 00		 mov	 r8d, DWORD PTR nNumberOfBytesToWrite$[rbp]
  00064	48 8b 95 08 01
	00 00		 mov	 rdx, QWORD PTR lpBuffer$[rbp]
  0006b	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR hFile$[rbp]
  00072	ff 55 08	 call	 QWORD PTR pFunction$[rbp]

; 124  : }

  00075	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  0007c	5f		 pop	 rdi
  0007d	5d		 pop	 rbp
  0007e	c3		 ret	 0
?pWriteFile@@YAHPEAXPEBXKPEAKPEAU_OVERLAPPED@@@Z ENDP	; pWriteFile
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\um\winnt.h
;	COMDAT RtlSecureZeroMemory
_TEXT	SEGMENT
vptr$ = 8
ptr$ = 256
cnt$ = 264
RtlSecureZeroMemory PROC				; COMDAT

; 21766: {

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__FBBA8F9D_winnt@h
  0001f	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 21767:     volatile char *vptr = (volatile char *)ptr;

  00024	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR ptr$[rbp]
  0002b	48 89 45 08	 mov	 QWORD PTR vptr$[rbp], rax

; 21768: 
; 21769: #if defined(_M_AMD64) && !defined(_M_ARM64EC)
; 21770: 
; 21771:     __stosb((PBYTE )((DWORD64)vptr), 0, cnt);

  0002f	48 8b 7d 08	 mov	 rdi, QWORD PTR vptr$[rbp]
  00033	33 c0		 xor	 eax, eax
  00035	48 8b 8d 08 01
	00 00		 mov	 rcx, QWORD PTR cnt$[rbp]
  0003c	f3 aa		 rep stosb

; 21772: 
; 21773: #else
; 21774: 
; 21775:     while (cnt) {
; 21776: 
; 21777: #if !defined(_M_CEE) && (defined(_M_ARM) || defined(_M_ARM64) || defined(_M_ARM64EC))
; 21778: 
; 21779:         __iso_volatile_store8(vptr, 0);
; 21780: 
; 21781: #else
; 21782: 
; 21783:         *vptr = 0;
; 21784: 
; 21785: #endif
; 21786: 
; 21787:         vptr++;
; 21788:         cnt--;
; 21789:     }
; 21790: 
; 21791: #endif // _M_AMD64 && !defined(_M_ARM64EC)
; 21792: 
; 21793:     return ptr;

  0003e	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR ptr$[rbp]

; 21794: }

  00045	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  0004c	5f		 pop	 rdi
  0004d	5d		 pop	 rbp
  0004e	c3		 ret	 0
RtlSecureZeroMemory ENDP
_TEXT	ENDS
END
